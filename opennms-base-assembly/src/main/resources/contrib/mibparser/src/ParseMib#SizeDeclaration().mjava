// handle
// (SIZE (0..255))
// (SIZE (0 | 8 | 11))
// (SIZE (6))
// (SIZE (1 | 4..85))
// (1)
  static final public void SizeDeclaration() throws ParseException {
                          /*@bgen(jjtree) SizeDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTSIZEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LPAREN);
      if (jj_2_153(3)) {
        jj_consume_token(SIZE_TOKEN);
        jj_consume_token(LPAREN);
        label_28:
        while (true) {
          jj_consume_token(INTEGER_LITERAL);
          if (jj_2_147(3)) {
            jj_consume_token(68);
            jj_consume_token(68);
            jj_consume_token(INTEGER_LITERAL);
          } else {
            ;
          }
          if (jj_2_148(3)) {
            jj_consume_token(69);
          } else {
            ;
          }
          if (jj_2_149(3)) {
            ;
          } else {
            break label_28;
          }
        }
        jj_consume_token(RPAREN);
      } else if (jj_2_154(3)) {
        label_29:
        while (true) {
          jj_consume_token(INTEGER_LITERAL);
          if (jj_2_150(3)) {
            jj_consume_token(68);
            jj_consume_token(68);
            jj_consume_token(INTEGER_LITERAL);
          } else {
            ;
          }
          if (jj_2_151(3)) {
            jj_consume_token(69);
          } else {
            ;
          }
          if (jj_2_152(3)) {
            ;
          } else {
            break label_29;
          }
        }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(RPAREN);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

