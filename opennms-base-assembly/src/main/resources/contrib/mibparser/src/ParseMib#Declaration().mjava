  static final public void Declaration() throws ParseException {
                               /*@bgen(jjtree) DeclOID */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLOID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ObjectIdentifier();
      if (jj_2_75(3)) {
        if (jj_2_28(3)) {
          jj_consume_token(OBJECT_IDENTITY);
        } else if (jj_2_29(3)) {
          jj_consume_token(OBJECT_TYPE);
        } else if (jj_2_30(3)) {
          jj_consume_token(MODULE_COMPLIANCE_TOKEN);
        } else if (jj_2_31(3)) {
          jj_consume_token(OBJECT_GROUP_TOKEN);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        label_7:
        while (true) {
          if (jj_2_32(3)) {
            ;
          } else {
            break label_7;
          }
          if (jj_2_61(3)) {
            jj_consume_token(STATUS);
            jj_consume_token(IDENTIFIER);
          } else if (jj_2_62(3)) {
            if (jj_2_33(3)) {
              jj_consume_token(DESCRIPTION);
            } else if (jj_2_34(3)) {
              jj_consume_token(REFERENCE_TOKEN);
            } else if (jj_2_35(3)) {
              jj_consume_token(UNITS_TOKEN);
            } else {
              jj_consume_token(-1);
              throw new ParseException();
            }
            jj_consume_token(DESCRIPTOR_LITERAL);
          } else if (jj_2_63(3)) {
            jj_consume_token(DEFVAL_TOKEN);
            if (jj_2_41(3)) {
              jj_consume_token(DESCRIPTOR_LITERAL);
            } else if (jj_2_42(3)) {
              jj_consume_token(LBRACE);
              if (jj_2_36(3)) {
                jj_consume_token(LBRACE);
              } else {
                ;
              }
              label_8:
              while (true) {
                if (jj_2_37(3)) {
                  jj_consume_token(IDENTIFIER);
                } else if (jj_2_38(3)) {
                  jj_consume_token(INTEGER_LITERAL);
                } else {
                  jj_consume_token(-1);
                  throw new ParseException();
                }
                if (jj_2_39(3)) {
                  ;
                } else {
                  break label_8;
                }
              }
              jj_consume_token(RBRACE);
              if (jj_2_40(3)) {
                jj_consume_token(RBRACE);
              } else {
                ;
              }
            } else if (jj_2_43(3)) {
              jj_consume_token(INTEGER_LITERAL);
            } else {
              jj_consume_token(-1);
              throw new ParseException();
            }
          } else if (jj_2_64(3)) {
            jj_consume_token(MODULE_TOKEN);
            jj_consume_token(MANDATORY_GROUPS_TOKEN);
            jj_consume_token(LBRACE);
            label_9:
            while (true) {
              jj_consume_token(IDENTIFIER);
              if (jj_2_44(3)) {
                jj_consume_token(COMMA);
              } else {
                ;
              }
              if (jj_2_45(3)) {
                ;
              } else {
                break label_9;
              }
            }
            jj_consume_token(RBRACE);
          } else if (jj_2_65(3)) {
            jj_consume_token(GROUP_TOKEN);
            jj_consume_token(IDENTIFIER);
          } else if (jj_2_66(3)) {
            jj_consume_token(AUGMENTS_TOKEN);
            jj_consume_token(LBRACE);
            jj_consume_token(IDENTIFIER);
            jj_consume_token(RBRACE);
          } else if (jj_2_67(3)) {
            jj_consume_token(OBJECT_TOKEN);
            jj_consume_token(IDENTIFIER);
          } else if (jj_2_68(3)) {
            jj_consume_token(OBJECTS_TOKEN);
            jj_consume_token(LBRACE);
            label_10:
            while (true) {
              jj_consume_token(IDENTIFIER);
              if (jj_2_46(3)) {
                jj_consume_token(COMMA);
              } else {
                ;
              }
              if (jj_2_47(3)) {
                ;
              } else {
                break label_10;
              }
            }
            jj_consume_token(RBRACE);
          } else if (jj_2_69(3)) {
            jj_consume_token(SYNTAX_TOKEN);
            if (jj_2_54(3)) {
              jj_consume_token(OBJECT_TOKEN);
              jj_consume_token(IDENTIFIER_TOKEN);
            } else if (jj_2_55(3)) {
              jj_consume_token(OCTET_TOKEN);
              jj_consume_token(STRING_TOKEN);
              if (jj_2_48(3)) {
                SizeDeclaration();
              } else {
                ;
              }
            } else if (jj_2_56(3)) {
              TableSequenceOf();
            } else if (jj_2_57(3)) {
              GetTypeIdentifier();
              label_11:
              while (true) {
                if (jj_2_49(3)) {
                  ;
                } else {
                  break label_11;
                }
                if (jj_2_52(3)) {
                  SizeDeclaration();
                } else if (jj_2_53(3)) {
                  jj_consume_token(LBRACE);
                  label_12:
                  while (true) {
                    jj_consume_token(IDENTIFIER);
                    jj_consume_token(LPAREN);
                    jj_consume_token(INTEGER_LITERAL);
                    jj_consume_token(RPAREN);
                    if (jj_2_50(3)) {
                      jj_consume_token(COMMA);
                    } else {
                      ;
                    }
                    if (jj_2_51(3)) {
                      ;
                    } else {
                      break label_12;
                    }
                  }
                  jj_consume_token(RBRACE);
                } else {
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              }
            } else {
              jj_consume_token(-1);
              throw new ParseException();
            }
          } else if (jj_2_70(3)) {
            if (jj_2_58(3)) {
              jj_consume_token(ACCESS_TOKEN);
            } else if (jj_2_59(3)) {
              jj_consume_token(MAX_ACCESS_TOKEN);
            } else if (jj_2_60(3)) {
              jj_consume_token(MIN_ACCESS_TOKEN);
            } else {
              jj_consume_token(-1);
              throw new ParseException();
            }
            GetAccessIdentifier();
          } else if (jj_2_71(3)) {
            IndexOfTable();
          } else if (jj_2_72(3)) {
            jj_consume_token(ASSIGN);
            jj_consume_token(LBRACE);
            ParentObjectIdentifier();
            IntegerOID();
            jj_consume_token(RBRACE);
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } else if (jj_2_76(3)) {
        IndexOfTable();
      } else if (jj_2_77(3)) {
        jj_consume_token(OBJECT_TOKEN);
        jj_consume_token(IDENTIFIER_TOKEN);
        jj_consume_token(ASSIGN);
        jj_consume_token(LBRACE);
        ParentObjectIdentifier();
        label_13:
        while (true) {
          if (jj_2_73(3)) {
            ;
          } else {
            break label_13;
          }
          MultipleOids();
        }
        if (jj_2_74(3)) {
          IntegerOID();
        } else {
          ;
        }
        jj_consume_token(RBRACE);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

