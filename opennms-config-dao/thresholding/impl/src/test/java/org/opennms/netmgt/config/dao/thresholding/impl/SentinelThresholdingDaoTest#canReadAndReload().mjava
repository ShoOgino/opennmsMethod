    @Test
    public void canReadAndReload() throws IOException {
        ThresholdingConfig configToServe = new ThresholdingConfig();
        Group groupToServe = new Group();
        groupToServe.setName("test");
        groupToServe.setRrdRepository("test");
        configToServe.setGroups(Collections.singletonList(groupToServe));

        JsonStore mockJsonStore = mock(JsonStore.class);
        when(mockJsonStore.getLastUpdated(AbstractThresholdingDao.JSON_STORE_KEY,
                ConfigDaoConstants.JSON_KEY_STORE_CONTEXT))
                .thenReturn(OptionalLong.of(System.currentTimeMillis()));
        when(mockJsonStore.get(AbstractThresholdingDao.JSON_STORE_KEY, ConfigDaoConstants.JSON_KEY_STORE_CONTEXT))
                .thenReturn(Optional.of(configToJson(configToServe)));

        ReadableThresholdingDao thresholdingDao = new SentinelThresholdingDao(mockJsonStore);
        assertThat(thresholdingDao.getReadOnlyConfig(), equalTo(configToServe));
        
        groupToServe.setName("new name");
        when(mockJsonStore.getLastUpdated(AbstractThresholdingDao.JSON_STORE_KEY,
                ConfigDaoConstants.JSON_KEY_STORE_CONTEXT))
                .thenReturn(OptionalLong.of(System.currentTimeMillis()));
        when(mockJsonStore.get(AbstractThresholdingDao.JSON_STORE_KEY, ConfigDaoConstants.JSON_KEY_STORE_CONTEXT))
                .thenReturn(Optional.of(configToJson(configToServe)));
        thresholdingDao.reload();
        assertThat(thresholdingDao.getReadOnlyConfig(), equalTo(configToServe));
    }

