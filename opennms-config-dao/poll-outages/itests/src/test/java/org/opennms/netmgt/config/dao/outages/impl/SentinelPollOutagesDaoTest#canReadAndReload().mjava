    @Test
    public void canReadAndReload() throws IOException {
        Outages configToServe = new Outages();
        Outage outageToAdd = new Outage();
        Node nodeToAdd = new Node();
        nodeToAdd.setId(1);
        outageToAdd.addNode(nodeToAdd);
        outageToAdd.setName("test");
        outageToAdd.setType("daily");
        configToServe.addOutage(outageToAdd);

        JsonStore mockJsonStore = mock(JsonStore.class);
        when(mockJsonStore.getLastUpdated(AbstractPollOutagesDao.JSON_STORE_KEY,
                ConfigDaoConstants.JSON_KEY_STORE_CONTEXT))
                .thenReturn(OptionalLong.of(System.currentTimeMillis()));
        when(mockJsonStore.get(AbstractPollOutagesDao.JSON_STORE_KEY, ConfigDaoConstants.JSON_KEY_STORE_CONTEXT))
                .thenReturn(Optional.of(configToJson(configToServe)));

        ReadablePollOutagesDao threshdDao = new SentinelPollOutagesDao(mockJsonStore);
        assertThat(threshdDao.getConfig(), CoreMatchers.equalTo(configToServe));

        configToServe.removeOutage(outageToAdd);
        when(mockJsonStore.getLastUpdated(AbstractPollOutagesDao.JSON_STORE_KEY,
                ConfigDaoConstants.JSON_KEY_STORE_CONTEXT))
                .thenReturn(OptionalLong.of(System.currentTimeMillis()));
        when(mockJsonStore.get(AbstractPollOutagesDao.JSON_STORE_KEY, ConfigDaoConstants.JSON_KEY_STORE_CONTEXT))
                .thenReturn(Optional.of(configToJson(configToServe)));
        threshdDao.reload();
        assertThat(threshdDao.getConfig(), CoreMatchers.equalTo(configToServe));
    }

