    /**
     * The fun part is actually sending those notifications we worked so hard for
     * so here we let growl know about things we think the user would like, and growl
     * decides if that is the case.
     *
     * @param inNotificationName - The name of one of the notifications we told growl
     *                             about.
     * @param inIconData - The NSData for the icon for this notification, can be null
     * @param inTitle - The Title of our Notification as Growl will show it
     * @param inDescription - The Description of our Notification as Growl will 
     *                        display it
     * @param extraInfo - Growl is flexible and allows Display Plugins to do as they 
     *                    please with thier own special keys and values, you may use 
     *                    them here. These may be ignored by either the user's 
     *                    preferences or the current Display Plugin. This can be null
     *
     * @throws Exception When a notification is not known
     *
     */
    public void notifyGrowlOf( String inNotificationName, NSData inIconData, 
			       String inTitle, String inDescription, 
			       NSDictionary inExtraInfo ) throws Exception {
	NSMutableDictionary noteDict = new NSMutableDictionary();

	if ( ! allNotes.containsObject( inNotificationName ) ) {
	    throw new Exception( "Undefined Notification attempted" );
	}

	noteDict.setObjectForKey( inNotificationName, GROWL_NOTIFICATION_NAME );
	noteDict.setObjectForKey( inTitle, GROWL_NOTIFICATION_TITLE );
	noteDict.setObjectForKey( inDescription, GROWL_NOTIFICATION_DESCRIPTION );
	noteDict.setObjectForKey( appName, GROWL_APP_NAME );
	if ( inIconData != null ) {
	    noteDict.setObjectForKey( inIconData, GROWL_NOTIFICATION_ICON );
	}

	if ( inExtraInfo != null ) {
	    noteDict.addEntriesFromDictionary( inExtraInfo );
	}

	theCenter.postNotification( GROWL_NOTIFICATION,
				    (String)null,
				    noteDict,
				    true );
    }

