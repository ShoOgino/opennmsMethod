    /**
     * This method performs a check of the disk space available on the drive
     * specified in the 'parameter' string. The warning and critical
     * thresholds defined by 'warningPercent' and 'criticalPercent' are used
     * to validate the percent of used disk space.
     * 
     * @param param
     *            The param string should contain a drive letter, warning and
     *            critical should contain non-zero percentages.
     * @return the processed <code>NsclientPacket</code>.
     * @throws NsclientException
     *             this method rethrows the exception thrown by
     *             <code>sendCheckRequest</code>
     */
    private NsclientPacket checkUsedDiskSpace(NsclientCheckParams param)
            throws NsclientException {
        NsclientPacket pack = null;

        try {
            // send/receive the request
            pack = sendCheckRequest(m_Password + "&" + CHECK_USEDDISKSPACE
                    + "&" + param.getParamString());
            pack.setResultCode(NsclientPacket.RES_STATE_OK);

            // Check for "ERROR" string.
            if (pack.getResponse().matches(".*ERROR.*")) {
                pack.setResultCode(NsclientPacket.RES_STATE_UNKNOWN);
                return pack;
            }

            // parse out the response.
            String[] results = pack.getResponse().split("&");
            double freeDisk = Double.parseDouble(results[0]);
            double totalDisk = Double.parseDouble(results[1]);
            double usedPerc = ((totalDisk - freeDisk) / totalDisk) * 100;

            // check to see if the drives even exist.
            if (freeDisk < 0 || totalDisk < 0) {
                pack.setResultCode(NsclientPacket.RES_STATE_UNKNOWN);
                return pack;
            }

            // Process checks.
            if (param.getWarningPercent() != 0) {
                if (usedPerc > param.getWarningPercent()) {
                    pack.setResultCode(NsclientPacket.RES_STATE_WARNING);
                }
            }
            if (param.getCriticalPercent() != 0) {
                if (usedPerc > param.getCriticalPercent()) {
                    pack.setResultCode(NsclientPacket.RES_STATE_CRIT);
                }
            }

            return pack;
        } catch (NumberFormatException nfe) {
            return handleNumberFormatException(pack, nfe);
        } catch (NsclientException e) {
            throw e;
        }
    }

