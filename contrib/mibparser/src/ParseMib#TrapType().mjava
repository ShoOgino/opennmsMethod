// handle the TRAP-TYPE, this is just different enough from
// NOTIFICATION-TYPE that I wanted to keep them separate
  static final public void TrapType() throws ParseException {
                   /*@bgen(jjtree) TrapType */
  SimpleNode jjtn000 = new SimpleNode(JJTTRAPTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IDENTIFIER);
      jj_consume_token(TRAP_TYPE_TOKEN);
      label_17:
      while (true) {
        if (jj_2_90(3)) {
          ;
        } else {
          break label_17;
        }
        if (jj_2_95(3)) {
          jj_consume_token(STATUS);
          jj_consume_token(IDENTIFIER);
        } else if (jj_2_96(3)) {
          jj_consume_token(DESCRIPTION);
          jj_consume_token(DESCRIPTOR_LITERAL);
        } else if (jj_2_97(3)) {
          jj_consume_token(ENTERPRISE_TOKEN);
          jj_consume_token(IDENTIFIER);
        } else if (jj_2_98(3)) {
          jj_consume_token(VARIABLES_TOKEN);
          jj_consume_token(LBRACE);
          label_18:
          while (true) {
            jj_consume_token(IDENTIFIER);
            if (jj_2_91(3)) {
              jj_consume_token(COMMA);
            } else {
              ;
            }
            if (jj_2_92(3)) {
              ;
            } else {
              break label_18;
            }
          }
          jj_consume_token(RBRACE);
        } else if (jj_2_99(3)) {
          jj_consume_token(ASSIGN);
          if (jj_2_93(3)) {
            jj_consume_token(LBRACE);
            jj_consume_token(IDENTIFIER);
          } else {
            ;
          }
          jj_consume_token(INTEGER_LITERAL);
          if (jj_2_94(3)) {
            jj_consume_token(RBRACE);
          } else {
            ;
          }
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

