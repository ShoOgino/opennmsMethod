// handle identifier :== identifier
  static final public void Assignment() throws ParseException {
 /*@bgen(jjtree) Assignment */
    SimpleNode jjtn000 = new SimpleNode(JJTASSIGNMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      // quite a few different kinds of identifiers
          //    RouterID ::= IpAddress
          //    AutonomousType    ::= OBJECT IDENTIFIER
          //    Metric    ::= INTEGER (1..'FFFF'h)
          //    TruthValue ::= INTEGER { true (1), false (2) }
          //    Status ::= INTEGER { enabled (1), disabled (2) }
        t = jj_consume_token(IDENTIFIER);
      jj_consume_token(ASSIGN);
      if (jj_2_101(3)) {
        GetTypeIdentifier();
      } else if (jj_2_102(3)) {
        jj_consume_token(OBJECT_TOKEN);
        jj_consume_token(IDENTIFIER_TOKEN);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_107(3)) {
        if (jj_2_105(3)) {
          jj_consume_token(LPAREN);
          jj_consume_token(INTEGER_LITERAL);
          jj_consume_token(68);
          jj_consume_token(68);
          jj_consume_token(INTEGER_LITERAL);
          jj_consume_token(RPAREN);
        } else if (jj_2_106(3)) {
          jj_consume_token(LBRACE);
          label_20:
          while (true) {
            jj_consume_token(IDENTIFIER);
            jj_consume_token(LPAREN);
            jj_consume_token(INTEGER_LITERAL);
            jj_consume_token(RPAREN);
            if (jj_2_103(3)) {
              jj_consume_token(COMMA);
            } else {
              ;
            }
            if (jj_2_104(3)) {
              ;
            } else {
              break label_20;
            }
          }
          jj_consume_token(RBRACE);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        jjtn000.setName(t.image);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

