  /**
   * Walk the abstract syntax tree and collect information about
   * the index of a table. By convention, the index of a table is the
   * first variable in the MIB SEQUENCE delcaration.
   */
  public void collectTableIndexInfo() {
    //if (printDebug) System.out.println("collectTableIndexInfo node=" + this.toString());

    if (this.getVisited() == true) {
      return;
    }

    //   auiTable OBJECT-TYPE
    //      SYNTAX SEQUENCE OF AuiEntry ...
    // Save the name ("auiTable") as the value, and the entry ("AuiEntry") as the key
    // The entry is the key so that we can search it later by entry when we get the
    // sequence entry (in collectSequenceInfo)
    //  entryNameAndTableName is the symbol table Hashtable
    // The tree looks like:
    //     TableOidVars AuiEntry visited=false children=5
    //         IdentifierInSequenceOfVars auiTableIndex visited=false children=0
    //         IdentifierInSequenceOfVars activeSessions visited=false children=0
    //         IdentifierInSequenceOfVars inactiveSessions visited=false children=0
    //         IdentifierInSequenceOfVars openCursors visited=false children=0
    //         IdentifierInSequenceOfVars accounts visited=false children=0

    String entryName = this.getName();
    String tableName = (String) entryNameAndTableName.get(entryName);

    if (children != null) {
      // walk through the children and collect information
      String indexName = null;
      for (int i = 0; i < children.length; ++i) {
        SimpleNode n = (SimpleNode) children[i];
        if (i == 0) {
          // the index is always the first child
          if (ParseMibTreeConstants.jjtNodeName[n.getId()].equals(
              "IdentifierInSequenceOfVars")) {
            indexName = n.identifier_text;
          }
        } // end if

        if (n.getIsOidInTable()) {
          // this was set during parsing
          if (printDebug) {
            System.out.println("adding OID " + n.getName() + " to table");
            // put all the OID vars in a symbol table (hashtable) oidName/tableName
          }
          oidVarsTableName.put(n.getName(), tableName);
        }

        if (n != null) {
          n.collectTableIndexInfo();
          n.setVisited(true);
        }
      } // end for

      // we know we have found a table if indexName |= null
      if (indexName != null) {
        if (printDebug) {
          System.out.println("collectTableIndexInfo indexName=" + indexName);
        }
        if (printDebug) {
          System.out.println("collectTableIndexInfo entryName=" + entryName);

        }
        if (printDebug) {
          System.out.println("collectTableIndexInfo tableName=" + tableName);
        }
        tableAndIndex.put(tableName, indexName);
      }
    }

  } // end collectTableIndexInfo

