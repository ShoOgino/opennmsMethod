  static final public void Imports() throws ParseException {
                  /*@bgen(jjtree) Imports */
  SimpleNode jjtn000 = new SimpleNode(JJTIMPORTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IMPORTS);
      label_3:
      while (true) {
        label_4:
        while (true) {
          if (jj_2_9(3)) {
            jj_consume_token(IDENTIFIER);
          } else if (jj_2_10(3)) {
            jj_consume_token(OBJECT_TYPE);
          } else if (jj_2_11(3)) {
            jj_consume_token(NOTIFICATION_TYPE_TOKEN);
          } else if (jj_2_12(3)) {
            jj_consume_token(MODULE_IDENTITY_TOKEN);
          } else if (jj_2_13(3)) {
            jj_consume_token(MODULE_COMPLIANCE_TOKEN);
          } else if (jj_2_14(3)) {
            jj_consume_token(OBJECT_GROUP_TOKEN);
          } else if (jj_2_15(3)) {
            jj_consume_token(NOTIFICATION_GROUP_TOKEN);
          } else if (jj_2_16(3)) {
            jj_consume_token(TRAP_TYPE_TOKEN);
          } else if (jj_2_17(3)) {
            jj_consume_token(TEXTUAL_CONVENTION_TOKEN);
          } else if (jj_2_18(3)) {
            jj_consume_token(OBJECT_IDENTITY);
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
          label_5:
          while (true) {
            if (jj_2_19(3)) {
              ;
            } else {
              break label_5;
            }
            jj_consume_token(COMMA);
          }
          if (jj_2_20(3)) {
            ;
          } else {
            break label_4;
          }
        }
        jj_consume_token(FROM);
        jj_consume_token(IDENTIFIER);
        if (jj_2_21(3)) {
          ;
        } else {
          break label_3;
        }
      }
      jj_consume_token(SEMICOLON);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

