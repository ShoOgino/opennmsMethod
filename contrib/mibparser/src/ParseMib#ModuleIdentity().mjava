  static final public void ModuleIdentity() throws ParseException {
                         /*@bgen(jjtree) ModuleIdentity */
  SimpleNode jjtn000 = new SimpleNode(JJTMODULEIDENTITY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ObjectIdentifier();
      jj_consume_token(MODULE_IDENTITY_TOKEN);
      label_6:
      while (true) {
        if (jj_2_22(3)) {
          jj_consume_token(LAST_UPDATED_TOKEN);
          jj_consume_token(DESCRIPTOR_LITERAL);
        } else if (jj_2_23(3)) {
          jj_consume_token(ORGANIZATION_TOKEN);
          jj_consume_token(DESCRIPTOR_LITERAL);
        } else if (jj_2_24(3)) {
          jj_consume_token(DESCRIPTION);
          jj_consume_token(DESCRIPTOR_LITERAL);
        } else if (jj_2_25(3)) {
          jj_consume_token(CONTACT_INFO_TOKEN);
          jj_consume_token(DESCRIPTOR_LITERAL);
        } else if (jj_2_26(3)) {
          jj_consume_token(REVISION_TOKEN);
          jj_consume_token(DESCRIPTOR_LITERAL);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        if (jj_2_27(3)) {
          ;
        } else {
          break label_6;
        }
      }
      jj_consume_token(ASSIGN);
      jj_consume_token(LBRACE);
      ParentObjectIdentifier();
      IntegerOID();
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

