    /**
     * Test forward event.
     *
     * @throws Exception the exception
     */
    @Test
    public void testForwardEvent() throws Exception {
        SyslogEventForwarder forwarder = new SyslogEventForwarder();
        forwarder.initialize("localTest1");

        OnmsNode node = new OnmsNode();
        node.setForeignSource("TestGroup");
        node.setForeignId("1");
        node.setId(1);
        node.setLabel("p-brane");

        Event event = new Event();
        event.setUei("uei.opennms.org/junit/testEvent");
        event.setNodeid(1l);
        event.setDbid(100);
        event.setLogmsg(new Logmsg());
        event.getLogmsg().setContent("something is wrong");
        Parm param = new Parm();
        param.setParmName("forwardEventToActivitySyslog");
        Value value = new Value();
        value.setContent("true");
        param.setValue(value);
        event.setParmCollection(new ArrayList<Parm>());
        event.getParmCollection().add(param);
        event.setSeverity("Major");

        forwarder.forward(event, node);

        Thread.sleep(100);

        BufferedReader r = new BufferedReader(new StringReader(m_logStream.readStream()));

        List<String> messages = new LinkedList<>();
        String line = null;

        while ((line = r.readLine()) != null) {
            messages.add(line);
            Thread.sleep(10);
        }

        Assert.assertTrue("Log messages sent: 1, Log messages received: " + messages.size(), 1 == messages.size());
        messages.forEach(System.out::println);
        Assert.assertTrue(messages.get(0).contains("EVENT 100 FOR NODE p-brane IN TestGroup: something is wrong"));

        forwarder.reload();
        forwarder.shutdown();
    }

