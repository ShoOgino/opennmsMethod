	/**
	 * This tests forwarding of 7 alarms, one for each OpenNMS severity to
	 * verify the LOG_LEVEL agrees with the Severity based on our algorithm.
	 * 
	 * @throws InterruptedException
	 * @throws IOException
	 */
	@Test
	public void testForwardAlarms() throws InterruptedException, IOException {
		
		String xml = generateConfigXml();
		
		Resource resource = new ByteArrayResource(xml.getBytes());
		
		SyslogNorthbounderConfigDao dao = new SyslogNorthbounderConfigDao();
		dao.setConfigResource(resource);
		dao.afterPropertiesSet();

		SyslogNorthbounder nb = new SyslogNorthbounder();
		SyslogNorthbounderConfig config = dao.getConfig();
		
		nb.setNodeDao(new TestNodeDao());
		nb.setConfig(config);
		

		int j = 7;
		List<NorthboundAlarm> alarms = new LinkedList<NorthboundAlarm>();
		
		OnmsDistPoller distpoller = new OnmsDistPoller("barbrady", "172.20.1.11");
		OnmsNode node = new OnmsNode(distpoller, "p-brane");
		node.setForeignSource("TestGroup");
		node.setForeignId("1");
		node.setId(TEST_NODE_ID);
		
		OnmsSnmpInterface snmpInterface = new OnmsSnmpInterface(node, 1);
		snmpInterface.setId(1);
		snmpInterface.setIfAlias("Connection to OpenNMS Wifi");
		snmpInterface.setIfDescr("en1");
		snmpInterface.setIfName("en1/0");
		snmpInterface.setPhysAddr("00:00:00:00:00:01");
		
		Set<OnmsIpInterface> ipInterfaces = new LinkedHashSet<OnmsIpInterface>(j);
		InetAddress address = InetAddress.getByName("10.0.1.1");
		OnmsIpInterface onmsIf = new OnmsIpInterface(address, node);
		onmsIf.setSnmpInterface(snmpInterface);
		onmsIf.setId(1);
		onmsIf.setIfIndex(1);
		onmsIf.setIpHostName("p-brane");
		onmsIf.setIsSnmpPrimary(PrimaryType.PRIMARY);
		
		
		ipInterfaces.add(onmsIf);
		
		node.setIpInterfaces(ipInterfaces);

		
		for (int i = 1; i <=j; ++i) {
			OnmsAlarm onmsAlarm = new OnmsAlarm();
			onmsAlarm.setId(i);
			onmsAlarm.setUei("uei.opennms.org/test/syslogNorthBounder");
			onmsAlarm.setNode(node);
			onmsAlarm.setSeverityId(i);
			onmsAlarm.setIpAddr(InetAddress.getByName("127.0.0.1"));
			onmsAlarm.setLogMsg("Node Down");
			onmsAlarm.setX733AlarmType(NorthboundAlarm.x733AlarmType.get(i).name());
			onmsAlarm.setX733ProbableCause(NorthboundAlarm.x733ProbableCause.get(i).getId());
			NorthboundAlarm a = new NorthboundAlarm(onmsAlarm);

			Assert.assertFalse(nb.accepts(a));
			onmsAlarm.setUei("uei.opennms.org/nodes/nodeDown");
			a = new NorthboundAlarm(onmsAlarm);
			Assert.assertTrue(nb.accepts(a));
			
			alarms.add(a);
		}
		

		nb.forwardAlarms(alarms);
		Thread.sleep(1000);

		BufferedReader r = new BufferedReader(new StringReader(m_logStream.readStream()));

		List<String> messages = new LinkedList<String>();
		String line = null;

		while ((line = r.readLine()) != null) {
			messages.add(line);
			Thread.sleep(10);
		}

		Assert.assertTrue("Log messages sent: 7, Log messages received: " + messages.size(), 7 == messages.size());
		
		for (String message : messages) {
			System.out.println(message);
		}
		
		int i = 0;
		for (String message : messages) {
			if (i == 0) {
				i++;
				continue;
			}
			switch (i) {
			case 1:
				Assert.assertTrue("Alarm (OnmsSeverity: "+OnmsSeverity.get(i)+") = LEVEL_INFO.", message.contains("INFO"));
				Assert.assertTrue(message.contains("NODE:p-brane"));
				break;
			case 2:
				Assert.assertTrue("Alarm (OnmsSeverity: "+OnmsSeverity.get(i)+") = LEVEL_NOTICE.", message.contains("NOTICE"));
				Assert.assertTrue(message.contains("NODE:p-brane"));
				break;
			case 3:
				Assert.assertTrue("Alarm (OnmsSeverity: "+OnmsSeverity.get(i)+") = LEVEL_NOTICE.", message.contains("NOTICE"));
				Assert.assertTrue(message.contains("NODE:p-brane"));
				break;
			case 4:
				Assert.assertTrue("Alarm (OnmsSeverity: "+OnmsSeverity.get(i)+") = LEVEL_ERROR.", message.contains("ERROR"));
				Assert.assertTrue(message.contains("NODE:p-brane"));
				break;
			case 5:
				Assert.assertTrue("Alarm (OnmsSeverity: "+OnmsSeverity.get(i)+") = LEVEL_ERROR.", message.contains("ERROR"));
				Assert.assertTrue(message.contains("NODE:p-brane"));
				break;
			case 6:
				Assert.assertTrue("Alarm (OnmsSeverity: "+OnmsSeverity.get(i)+") = LEVEL_CRITICAL.", message.contains("CRITICAL"));
				Assert.assertTrue(message.contains("NODE:p-brane"));
				break;
			}
			i++;
		}

		// TODO: Verify facility and level of each log message

	}

