    @Test
    public void alarmsUnAckSituation() {
        // If a new unacked alarm gets added to an acked situation, or an existing related alarm is unacknowledged,
        // then the situation itself should be unacked
        // (but all other related alarms which were acked should remain acked)
        Scenario scenario = Scenario.builder()
                .withLegacyAlarmBehavior()
                // Create some node down alarms
                .withNodeDownEvent(1, 1)
                .withNodeDownEvent(2, 2)
                // Create a situation that contains the node down alarms
                .withSituationForNodeDownAlarms(3, "situation#1", 1, 2)
                // Now ACK the situation
                .withAcknowledgmentForSituation(4, "situation#1")
                // now un-acknowledge one of the alarms
                .withUnAcknowledgmentForNodeDownAlarm(5, 1)
                .build();
        ScenarioResults results = scenario.play();

        // Verify the set of alarms at various points in time

        // t=0, no alarms
        assertThat(results.getAlarms(0), hasSize(0));
        // t=1, a single problem alarm
        assertThat(results.getAlarms(1), hasSize(1));
        // t=2, two problem alarms
        assertThat(results.getAlarms(2), hasSize(2));
        // t=3, two problem alarms + 1 situation, situation is not acknowledged
        assertThat(results.getAlarms(3), hasSize(3)); // the situation is also an alarm, so it is counted here
        assertThat(results.getSituation(3), not(acknowledged()));

        // t=4, everything should be Ack'd
        assertThat(results.getSituation(4), acknowledged());
        assertThat(results.getAlarms(4), everyItem(acknowledged()));
        // t=5, alarm and situation should be unacked
        assertThat(results.getSituation(5), not(acknowledged()));
        // t=6, but other alarm should still be ACK'd
        assertThat(results.getAlarms(6), not(everyItem(not(acknowledged()))));
        // t=âˆž
        assertThat(results.getAlarmsAtLastKnownTime(), hasSize(0));
    }

