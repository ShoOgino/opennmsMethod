    /**
     * Verifies a Situation will de-escalate if the Max Severity of related alarms decreases.
     */
    @Test
    public void canDeEscalateSituation() {
        Scenario scenario = Scenario.builder()
                .withLegacyAlarmBehavior()
                // Create some node down alarms
                .withNodeDownEvent(1, 1)
                .withInterfaceDownEvent(2, 2)
                // Create a situation that contains the node down alarms
                .withSituationForAlarmReductionKeys(3, "situation#1", 
                                                    EventConstants.NODE_DOWN_EVENT_UEI + ":1", 
                                                    EventConstants.INTERFACE_DOWN_EVENT_UEI + ":2")
                // Now clear the node down alarms
                .withNodeUpEvent(4, 1)
                .build();
        ScenarioResults results = scenario.play();

        // Verify the set of alarms at various points in time

        // t=0, no alarms
        assertThat(results.getAlarms(0), hasSize(0));
        // t=1, a single problem alarm
        assertThat(results.getAlarms(1), hasSize(1));
        assertThat(results.getProblemAlarm(1), hasSeverity(OnmsSeverity.MAJOR));
        // t=2, two problem alarms
        assertThat(results.getAlarms(2), hasSize(2));
        // t=3, two problem alarms + 1 situation
        assertThat(results.getAlarms(3), hasSize(3)); // the situation is also an alarm, so it is counted here
        assertThat(results.getSituations(3), hasSize(1));
        assertThat(results.getSituation(3), hasSeverity(OnmsSeverity.CRITICAL)); // the situation should be escalated in severity
        // t=4, situation should now have severity MINOR
        assertThat(results.getSituation(4), hasSeverity(OnmsSeverity.MAJOR));
        // t=âˆž
        assertThat(results.getAlarmsAtLastKnownTime(), hasSize(0));
    }

