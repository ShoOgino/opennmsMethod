    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((m_ackTime == null) ? 0 : m_ackTime.hashCode());
        result = prime * result + ((m_ackUser == null) ? 0 : m_ackUser.hashCode());
        result = prime * result + ((m_alarmKey == null) ? 0 : m_alarmKey.hashCode());
        result = prime * result + ((m_alarmType == null) ? 0 : m_alarmType.hashCode());
        result = prime * result + ((m_appDn == null) ? 0 : m_appDn.hashCode());
        result = prime * result + ((m_clearKey == null) ? 0 : m_clearKey.hashCode());
        result = prime * result + ((m_count == null) ? 0 : m_count.hashCode());
        result = prime * result + ((m_desc == null) ? 0 : m_desc.hashCode());
        result = prime * result + ((m_eventParametersCollection == null) ? 0 : m_eventParametersCollection.hashCode());
        result = prime * result + ((m_eventParametersMap == null) ? 0 : m_eventParametersMap.hashCode());
        result = prime * result + ((m_firstOccurrence == null) ? 0 : m_firstOccurrence.hashCode());
        result = prime * result + ((m_foreignId == null) ? 0 : m_foreignId.hashCode());
        result = prime * result + ((m_foreignSource == null) ? 0 : m_foreignSource.hashCode());
        result = prime * result + ((m_id == null) ? 0 : m_id.hashCode());
        result = prime * result + ((m_ipAddr == null) ? 0 : m_ipAddr.hashCode());
        result = prime * result + ((m_lastOccurrence == null) ? 0 : m_lastOccurrence.hashCode());
        result = prime * result + ((m_logMsg == null) ? 0 : m_logMsg.hashCode());
        result = prime * result + ((m_nodeId == null) ? 0 : m_nodeId.hashCode());
        result = prime * result + ((m_nodeLabel == null) ? 0 : m_nodeLabel.hashCode());
        result = prime * result + ((m_nodeSysObjectId == null) ? 0 : m_nodeSysObjectId.hashCode());
        result = prime * result + ((m_objectInstance == null) ? 0 : m_objectInstance.hashCode());
        result = prime * result + ((m_objectType == null) ? 0 : m_objectType.hashCode());
        result = prime * result + ((m_operInst == null) ? 0 : m_operInst.hashCode());
        result = prime * result + ((m_ossKey == null) ? 0 : m_ossKey.hashCode());
        result = prime * result + ((m_ossState == null) ? 0 : m_ossState.hashCode());
        result = prime * result + ((m_poller == null) ? 0 : m_poller.hashCode());
        result = prime * result + (m_preserved ? 1231 : 1237);
        result = prime * result + ((m_service == null) ? 0 : m_service.hashCode());
        result = prime * result + ((m_severity == null) ? 0 : m_severity.hashCode());
        result = prime * result + ((m_suppressed == null) ? 0 : m_suppressed.hashCode());
        result = prime * result + ((m_suppressedBy == null) ? 0 : m_suppressedBy.hashCode());
        result = prime * result + ((m_suppressedUntil == null) ? 0 : m_suppressedUntil.hashCode());
        result = prime * result + ((m_ticketId == null) ? 0 : m_ticketId.hashCode());
        result = prime * result + ((m_ticketState == null) ? 0 : m_ticketState.hashCode());
        result = prime * result + ((m_uei == null) ? 0 : m_uei.hashCode());
        result = prime * result + m_x733Cause;
        result = prime * result + ((m_x733Type == null) ? 0 : m_x733Type.hashCode());
        return result;
    }

