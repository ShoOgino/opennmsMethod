    /**
     * Test failure.
     *
     * @throws InterruptedException the interrupted exception
     */
    public void testFailure() throws InterruptedException {
        AlarmQueue<NorthboundAlarm> queue = new AlarmQueue<NorthboundAlarm>(this);
        queue.setMaxBatchSize(3);
        queue.init();

        queue.accept(createAlarm());  // 1
        queue.preserve(createAlarm()); // 2
        queue.accept(createAlarm());  // 3

        List<NorthboundAlarm> alarms = queue.getAlarmsToForward();
        assertNotNull(alarms);
        assertEquals(3, alarms.size());

        queue.forwardSuccessful(alarms);

        queue.preserve(createAlarm()); // 4
        queue.accept(createAlarm());  // 5
        queue.preserve(createAlarm()); // 6
        queue.accept(createAlarm());  // 7

        alarms = queue.getAlarmsToForward();
        assertNotNull(alarms);
        assertEquals(3, alarms.size());

        queue.forwardFailed(alarms);

        queue.accept(createAlarm()); // 8

        alarms = queue.getAlarmsToForward();
        assertNotNull(alarms);
        assertEquals(2, alarms.size());
        assertPreservedAlarm(alarms, 0, 4);
        assertPreservedAlarm(alarms, 1, 6);

        queue.forwardFailed(alarms);

        queue.preserve(createAlarm()); // 9
        queue.accept(createAlarm()); // 10
        queue.preserve(createAlarm()); // 11
        queue.accept(createAlarm()); // 12

        alarms = queue.getAlarmsToForward();
        assertNotNull(alarms);
        assertEquals(3, alarms.size());
        assertPreservedAlarm(alarms, 0, 4);
        assertPreservedAlarm(alarms, 1, 6);
        assertPreservedAlarm(alarms, 2, 9);

        queue.forwardSuccessful(alarms);

        queue.preserve(createAlarm()); // 13
        queue.accept(createAlarm()); // 14

        alarms = queue.getAlarmsToForward();
        assertNotNull(alarms);
        assertEquals(1, alarms.size());
        assertPreservedAlarm(alarms, 0, 11);

        queue.forwardSuccessful(alarms);

        alarms = queue.getAlarmsToForward();
        assertNotNull(alarms);
        assertEquals(2, alarms.size());
        assertPreservedAlarm(alarms, 0, 13);
        assertEquals(14, alarms.get(1).getId().intValue());

        queue.forwardSuccessful(alarms);
    }

