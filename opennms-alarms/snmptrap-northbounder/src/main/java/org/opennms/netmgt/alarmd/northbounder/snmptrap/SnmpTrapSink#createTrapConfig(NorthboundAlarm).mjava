    /**
     * Creates the SNMP trap configuration object.
     *
     * @param alarm the northbound alarm
     * @return the SNMP trap configuration
     * @throws SnmpTrapException the SNMP trap exception
     */
    public SnmpTrapConfig createTrapConfig(NorthboundAlarm alarm) throws SnmpTrapException {
        SnmpTrapMapping mapping = getSnmpTrapMapping(alarm);
        if (mapping == null) {
            return null;
        }
        final SnmpTrapConfig config = new SnmpTrapConfig();
        config.setDestinationAddress(InetAddressUtils.addr(m_ipAddress));
        config.setDestinationPort(m_port);
        config.setVersion(m_version);
        config.setCommunity(m_community);
        if (m_v1AgentAddress == null) {
            config.setHostAddress(alarm.getIpAddr());
        } else {
            StandardEvaluationContext context = new StandardEvaluationContext(alarm);
            ExpressionParser parser = new SpelExpressionParser();
            Expression exp = parser.parseExpression(m_v1AgentAddress);
            try {
                String v1AgentAddress = (String) exp.getValue(context, String.class);
                config.setHostAddress(InetAddressUtils.addr(v1AgentAddress));
            } catch (Exception e) {
                LOG.warn("Can't evaluate expression for v1-agent-address. Using the IP address present on the alarm object.");
                config.setHostAddress(alarm.getIpAddr());
            }
        }
        config.setEnterpriseId(mapping.getEnterpriseOid());
        config.setGeneric(mapping.getGeneric());
        config.setSpecific(mapping.getSpecific());
        config.setParameters(mapping.getParams(alarm));
        return config;
    }

