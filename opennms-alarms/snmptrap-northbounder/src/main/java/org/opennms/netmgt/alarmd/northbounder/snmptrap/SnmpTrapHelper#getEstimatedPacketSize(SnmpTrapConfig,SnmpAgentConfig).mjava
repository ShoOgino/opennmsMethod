    /**
     * Gets the estimated packet size.
     *
     * @param trapConfig the trap configuration object
     * @param agentConfig the agent configuration object
     * @return the estimated packet size
     */
    public int getEstimatedPacketSize(SnmpTrapConfig trapConfig, SnmpAgentConfig agentConfig) {
        // Calculating the preamble overhead
        int preamble = 0;
        if (trapConfig.getVersion().isV1()) {
            preamble = 42;
        }
        if (trapConfig.getVersion().isV2()) {
            preamble = 43;
        }
        if (trapConfig.getVersion().isV3()) {
            preamble = 41;
        }
        // Calculating the version overhead
        int version = 3;
        // Calculating the community overhead
        int community = 0;
        if (trapConfig.getVersion().isV1() || trapConfig.getVersion().isV2()) {
            community = agentConfig.getReadCommunity().length() + 2;
        }
        // Calculating the basic packet overhead
        int overhead = 0;
        if (trapConfig.getVersion().isV1()) {
            overhead = trapConfig.getEnterpriseId().length() + 1;
            overhead += trapConfig.getHostAddress().getHostAddress().length() + 2;
            overhead += 13; // GenericType(3) + Specific-Type(4) + Timestamp(6)
        } else {
            overhead = 21; // Basic varbind overhead (2) + sysUpTime Varbind (19)
            overhead += trapConfig.getEnterpriseId().length() + 14; // Trap-OID Varbind 
            if (trapConfig.getVersion().isV3()) {
                switch (agentConfig.getSecurityLevel()) {
                case 1: overhead += 92; break;
                case 2: overhead += 120; break;
                case 3: overhead += 130; break;
                }
                overhead += agentConfig.getSecurityName().length() + 2;
            }
        }
        // Calculating additional varbinds overhead
        int varbinds = 0;
        for (Parm p : trapConfig.getParameters()) {
            varbinds += p.getParmName().length() + p.getValue().getContent().length() + 4;
        }
        // Calculating the estimated packet size;
        return preamble + version + community + overhead + varbinds;
    }

