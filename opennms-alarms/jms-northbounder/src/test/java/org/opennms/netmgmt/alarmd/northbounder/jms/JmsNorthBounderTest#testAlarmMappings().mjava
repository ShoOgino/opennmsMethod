    @Test
    public void testAlarmMappings() throws Exception {
        String xml = generateMappingConfigXml();

        Resource resource = new ByteArrayResource(xml.getBytes());

        JmsNorthbounderConfigDao dao = new JmsNorthbounderConfigDao();
        dao.setConfigResource(resource);
        dao.afterPropertiesSet();

        JmsNorthbounderConfig config = dao.getConfig();

        List<JmsDestination> destinations = config.getDestinations();

        List<JmsNorthbounder> nbis = new LinkedList<JmsNorthbounder>();

        for (JmsDestination jmsDestination : destinations) {
            JmsNorthbounder nbi = new JmsNorthbounder(
                                                      config,
                                                      m_jmsNorthbounderConnectionFactory,
                                                      jmsDestination);
            nbi.afterPropertiesSet();
            nbis.add(nbi);
        }

        List<NorthboundAlarm> alarms = new LinkedList<NorthboundAlarm>();
        OnmsNode node = new OnmsNode(null, NODE_LABEL);
        node.setForeignSource("TestGroup");
        node.setForeignId("2");
        node.setId(m_nodeDao.getNextNodeId());
        OnmsIpInterface ip = new OnmsIpInterface("127.0.0.1", node);
        InetAddress ia = null;
        try {
            ia = InetAddress.getByName("127.0.0.1");
        } catch (UnknownHostException e){ }
        m_nodeDao.save(node);
        m_nodeDao.flush();
        // TX via NBIs
        for (JmsNorthbounder nbi : nbis) {
            String eventparms = "syslogmessage=Dec 22 2015 20:12:57.1 UTC :  %UC_CTI-3-CtiProviderOpenFailure: %[CTIconnectionId%61232238][ Login User Id%61pguser][Reason code.%61-1932787616][UNKNOWN_PARAMNAME:IPAddress%61172.17.12.73][UNKNOWN_PARAMNAME:IPv6Address%61][App ID%61Cisco CTIManager][Cluster ID%61SplkCluster][Node ID%61splkcucm6p]: CTI application failed to open provider%59 application startup failed(string,text);severity=Error(string,text);timestamp=Dec 22 14:13:21(string,text);process=229250(string,text);service=local7(string,text)";
            OnmsEvent event = new OnmsEvent(5, "uei.uei.org/uei", new Date(),
                "eventhost", "eventsource", ia,
                null, "eventssnmphost", null,
                "eventsnmp", eventparms, new Date(),
                "eventdescr", "eventloggroup", "eventlogmsg",
                4, null, null,
                0, "operinstruct",
                null, null,
                null, null,
                "tticketid", 1,
                null, null, null,
                null, null, null,
                null, node,
                null, null,
                null);
            OnmsAlarm alarm = new OnmsAlarm(9, event.getEventUei(), null, 1, 4, new Date(), event);
            alarm.setNode(node);
            alarm.setDescription(event.getEventDescr());
            alarm.setApplicationDN("applicationDN");
            alarm.setLogMsg(event.getEventLogMsg());
            alarm.setManagedObjectInstance("managedObjectInstance");
            alarm.setManagedObjectType("managedObjectType");
            alarm.setOssPrimaryKey("ossPrimaryKey");
            alarm.setQosAlarmState("qosAlarmState");
            alarm.setTTicketId("tticketId");
            alarm.setReductionKey("reductionKey");
            alarm.setClearKey("clearKey");
            alarm.setOperInstruct("operInstruct");
            alarm.setAlarmType(1);
            alarm.setFirstEventTime(new Date(0));
            alarm.setIpAddr(ia);
            alarm.setEventParms(eventparms);
            alarm.setX733AlarmType(NorthboundAlarm.x733AlarmType.get(1).name());
            alarm.setX733ProbableCause(NorthboundAlarm.x733ProbableCause.get(1).getId());
            NorthboundAlarm a = new NorthboundAlarm(alarm);
            alarm.setCounter(2);
            NorthboundAlarm b = new NorthboundAlarm(alarm);
            alarms.add(a);
            alarms.add(b);
            nbi.forwardAlarms(alarms);
        }

        Thread.sleep(100);

        // Let's become a consumer and receive the message
        Message m = m_template.receive("MappingTestQueue");
        String escapedResponse = "ackUser:  appDn: applicationDN logMsg: eventlogmsg objectInstance: managedObjectInstance objectType: managedObjectType ossKey: ossPrimaryKey\n" +
                " ossState: qosAlarmState ticketId: tticketId alarmUei: uei.uei.org/uei alarmKey: reductionKey clearKey: clearKey description: eventdescr operInstruct: operInstruct ackTime: \n" +
                " alarmType: PROBLEM count: 1 alarmId: 9 ipAddr: 127.0.0.1 lastOccurrence:  nodeId: 1\n" +
                " nodeLabel: schlazor distPoller: 00000000-0000-0000-0000-000000000000 ifService:  severity: WARNING ticketState:  x733AlarmType: other\n"+
                " x733ProbableCause: other firstOccurrence: " + StringUtils.iso8601LocalOffsetString(new Date(0)) + " lastOccurrence  eventParmsXml: <eventParms>\n" +
                "    <parm name=\"syslogmessage\" value=\"Dec 22 2015 20:12:57.1 UTC :  %UC_CTI-3-CtiProviderOpenFailure: %[CTIconnectionId%61232238][ Login User Id%61pguser][Reason code.%61-1932787616][UNKNOWN_PARAMNAME:IPAddress%61172.17.12.73][UNKNOWN_PARAMNAME:IPv6Address%61][App ID%61Cisco CTIManager][Cluster ID%61SplkCluster][Node ID%61splkcucm6p]: CTI application failed to open provider%59 application startup failed\" type=\"string\"/>\n" +
                "    <parm name=\"severity\" value=\"Error\" type=\"string\"/>\n" +
                "    <parm name=\"timestamp\" value=\"Dec 22 14:13:21\" type=\"string\"/>\n" +
                "    <parm name=\"process\" value=\"229250\" type=\"string\"/>\n" +
                "    <parm name=\"service\" value=\"local7\" type=\"string\"/>\n" +
                "</eventParms>";
        String response = ((TextMessage)m).getText();
        Assert.assertEquals("Contents of message\n'" + response + "'\n not equals\n'" + escapedResponse+"'.", response, escapedResponse);
        // ensure only 1 message received since same reduction key
        m_template.setReceiveTimeout(JmsTemplate.RECEIVE_TIMEOUT_NO_WAIT);
        m = m_template.receive("MappingTestQueue");
        Assert.assertNull(m);
    }

