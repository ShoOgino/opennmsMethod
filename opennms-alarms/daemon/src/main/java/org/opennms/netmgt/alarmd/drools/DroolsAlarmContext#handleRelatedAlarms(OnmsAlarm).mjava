    private void handleRelatedAlarms(OnmsAlarm situation) {
        if (!situation.isSituation()) {
            return;
        }
        final Map<Integer, AlarmAssociationAndFact> associationFacts = alarmAssociationById.computeIfAbsent(situation.getId(), (sid) -> new HashMap<>());
        for (AlarmAssociation association : situation.getAssociatedAlarms()) {
            Integer alarmId = association.getRelatedAlarm().getId();
            AlarmAssociationAndFact assocationFact = associationFacts.get(alarmId);
            if (assocationFact == null) {
                LOG.debug("Inserting alarm association into session: {}", association);
                final FactHandle fact = getKieSession().insert(association);
                associationFacts.put(alarmId, new AlarmAssociationAndFact(association, fact));
            } else {
                FactHandle fact = assocationFact.getFact();
                LOG.trace("Updating alarm assocation in session: {}", assocationFact);
                getKieSession().update(fact, association);
                associationFacts.put(alarmId, new AlarmAssociationAndFact(association, fact)); 
            }
        }
        // Remove Fact for any Alarms no longer in the Situation
        Set<Integer> deletedAlarmIds = associationFacts.values().stream()
                .map(fact -> fact.getAlarmAssociation().getRelatedAlarm().getId())
                    .filter(alarmId -> !situation.getRelatedAlarmIds().contains(alarmId))
                    .collect(Collectors.toSet());
        deletedAlarmIds.forEach(alarmId -> {
            final AlarmAssociationAndFact associationAndFact = associationFacts.remove(alarmId);
            if (associationAndFact != null) {
                LOG.debug("Deleting AlarmAssociationAndFact from session: {}", associationAndFact.getAlarmAssociation());
                getKieSession().delete(associationAndFact.getFact());
            }
        });
    }

