    public synchronized void reload() {
        if (!started) {
            LOG.warn("The context for session {} is not yet started. Treating reload as a start request", kSessionName);
            start();
            return;
        }

        // Attempt to build and deploy the ruleset
        // If this fails, we'll throw an exception and abort the reload
        final ReleaseId releaseId = buildKieModule();

        // The rules we're successfully built and deployed
        // Let's lock the current engine, grab the facts, and stop it
        final List<Object> factObjects;
        lock.lock();
        try {
            // Capture the current set of facts
            factObjects  = kieSession.getFactHandles().stream()
                    .map(fact -> kieSession.getObject(fact))
                    .collect(Collectors.toList());

            // Stop the engine
            stop();
        } finally {
            lock.unlock();
        }

        // Remove the previous module
        if (releaseIdForContainerUsedByKieSession != null) {
            if (KieServices.Factory.get().getRepository().removeKieModule(releaseIdForContainerUsedByKieSession) != null) {
                LOG.info("Successfully removed previous KIE module with ID: {}.", releaseIdForContainerUsedByKieSession);
            } else {
                LOG.info("Previous KIE module was with ID: {} was already removed.", releaseIdForContainerUsedByKieSession);
            }
            releaseIdForContainerUsedByKieSession = null;
        }

        // Restart the engine
        startWithModuleAndFacts(releaseId, factObjects);
    }

