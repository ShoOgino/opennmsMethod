    /**
     * Creates a {@code Striped<Lock>} with eagerly initialized, strongly referenced locks.
     * Every lock is fair and reentrant.
     *
     * @param stripes the minimum number of stripes (locks) required
     * @return a new {@code Striped<Lock>}
     */
    public static Striped<Lock> fairLock(int stripes) {
        final Striped<Lock> lockStripes = Striped.lock(1);
        try {
            final Constructor<?> ctor = lockStripes.getClass().getDeclaredConstructor(int.class, Supplier.class);
            ctor.setAccessible(true);
            try {
                return (Striped<Lock>)ctor.newInstance(stripes, (Supplier<Lock>) () -> new FairPaddedLock());
            } catch (InstantiationException|IllegalAccessException|InvocationTargetException ex) {
                throw new RuntimeException(ex);
            }
        } catch (NoSuchMethodException e) {
            throw new RuntimeException(e);
        }
    }

