    @Override
    @Transactional
    public void deleteAlarm(OnmsAlarm alarm) {
        LOG.info("Deleting alarm with id: {} with severity: {}", alarm.getId(), alarm.getSeverity());
        final OnmsAlarm alarmInTrans = alarmDao.get(alarm.getId());
        if (alarmInTrans == null) {
            LOG.warn("Alarm disappeared: {}. Skipping delete.", alarm);
            return;
        }
        // If alarm was in Situation, calculate notifications for the Situation
        Map<OnmsAlarm, Set<OnmsAlarm>> priorRelatedAlarms = new HashMap<>();
        if (alarmInTrans.isPartOfSituation()) {
            for (OnmsAlarm situation : alarmInTrans.getRelatedSituations()) {
                priorRelatedAlarms.put(situation, new HashSet<OnmsAlarm>(situation.getRelatedAlarms()));
            }
        }
        alarmDao.delete(alarmInTrans);
        // fire notifications after alarm has been deleted
        for (Entry<OnmsAlarm, Set<OnmsAlarm>> entry : priorRelatedAlarms.entrySet()) {
            alarmEntityNotifier.didUpdateRelatedAlarms(entry.getKey(), entry.getValue());
        }
        alarmEntityNotifier.didDeleteAlarm(alarmInTrans);
    }

