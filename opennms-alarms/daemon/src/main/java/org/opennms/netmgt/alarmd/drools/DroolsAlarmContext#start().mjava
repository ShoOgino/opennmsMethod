    public void start() {
        final KieServices ks = KieServices.Factory.get();
        final KieContainer kcont = ks.newKieClasspathContainer(getClass().getClassLoader());
        final KieBaseConfiguration kbaseConfig = ks.newKieBaseConfiguration();
        kbaseConfig.setOption(EventProcessingOption.STREAM);
        final KieBase kbase = kcont.newKieBase("alarmKBase", kbaseConfig);

        final KieSessionConfiguration kieSessionConfig = KieServices.Factory.get().newKieSessionConfiguration();
        if (usePseudoClock) {
            kieSessionConfig.setOption(ClockTypeOption.get(ClockType.PSEUDO_CLOCK.getId()));
        }

        kieSession = kbase.newKieSession(kieSessionConfig, null);
        kieSession.setGlobal("alarmService", alarmService);

        if (usePseudoClock) {
            this.clock = kieSession.getSessionClock();
        } else {
            this.clock = null;
        }

        alarmsById.clear();

        kieSession.insert(alarmTicketerService);

        if (!useManualTick) {
            timer = new Timer();
            timer.scheduleAtFixedRate(new TimerTask() {
                @Override
                public void run() {
                    firing.set(true);
                    lock.lock();
                    try {
                        LOG.debug("Firing rules.");
                        kieSession.fireAllRules();
                    } catch (Exception e) {
                        LOG.error("Error occurred while firing rules.", e);
                    } finally {
                        firing.set(false);
                        lock.unlock();
                    }
                }
            }, TimeUnit.SECONDS.toMillis(1), TimeUnit.SECONDS.toMillis(1));
        }
    }

