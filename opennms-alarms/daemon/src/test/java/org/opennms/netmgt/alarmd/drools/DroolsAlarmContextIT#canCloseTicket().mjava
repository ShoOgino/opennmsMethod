    @Test
    public void canCloseTicket() {
        ticketer.setEnabled(true);

        // Trigger some problem
        OnmsAlarm trigger = new OnmsAlarm();
        trigger.setId(1);
        trigger.setAlarmType(1);
        trigger.setSeverity(OnmsSeverity.WARNING);
        trigger.setReductionKey("n1:oops");
        trigger.setLastEventTime(new Date(100));
        when(alarmDao.get(trigger.getId())).thenReturn(trigger);
        dac.getClock().advanceTime( 100, TimeUnit.MILLISECONDS );
        dac.handleNewOrUpdatedAlarm(trigger);
        dac.tick();

        // No ticket yet
        assertThat(ticketer.getCreates(), hasSize(0));

        // Advance the clock and tick
        dac.getClock().advanceTime( 20, TimeUnit.MINUTES );
        dac.tick();
        // Verify that there is another
        assertThat(ticketer.getCreates(), contains(trigger.getId()));

        // Inject a clear
        OnmsAlarm clear = new OnmsAlarm();
        clear.setId(2);
        clear.setAlarmType(2);
        clear.setSeverity(OnmsSeverity.CLEARED);
        clear.setReductionKey("clear:n1:oops");
        clear.setClearKey("n1:oops");
        clear.setLastEventTime(new Date(101));
        dac.getClock().advanceTime( 1, TimeUnit.MILLISECONDS );
        dac.handleNewOrUpdatedAlarm(clear);
        dac.tick();

        // The trigger should be cleared
        assertThat(trigger, hasSeverity(OnmsSeverity.CLEARED));

        // Advance the clock and tick
        dac.handleNewOrUpdatedAlarm(trigger);
        dac.getClock().advanceTime( 1, TimeUnit.MINUTES );
        dac.tick();
        dac.getClock().advanceTime( 20, TimeUnit.MINUTES );
        dac.tick();
        assertThat(ticketer.didCloseTicketFor(trigger), equalTo(true));
    }

