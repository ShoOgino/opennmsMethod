    @Test
    public void testThatUpdateAndCloseTicketsTriggersAlarmNotification() {

        alarmLifecycleListenerManager.onListenerRegistered(this, Collections.emptyMap());
        // Create some alarm
        OnmsAlarm a1 = transactionTemplate.execute(status -> {
            OnmsAlarm alarm = new OnmsAlarm();
            alarm.setDistPoller(distPollerDao.whoami());
            alarm.setCounter(1);
            alarm.setUei("linkDown");
            alarm.setLastAutomationTime(new Date(0));
            alarmDao.saveOrUpdate(alarm);
            return alarm;
        });
        Date now = new Date();
        // Set different ticket Id that should be in cancelled state.
        a1.setTTicketId("testId2");
        alarmTicketerService.updateTicket(a1, now);
        // Verifies that ticket state changes gets notified.
        await().atMost(10, TimeUnit.SECONDS).untilTrue(ticketStateUpdated);
        assertEquals(TroubleTicketState.CANCELLED, troubleTicketState);
        // clear again
        ticketStateUpdated.set(false);

        // Close the ticket and verify that ticket state gets notified.
        a1.setSeverity(OnmsSeverity.CLEARED);
        transactionTemplate.execute(status -> {
            alarmDao.saveOrUpdate(a1);
            return a1;
        });
        alarmTicketerService.closeTicket(a1, now);
        await().atMost(10, TimeUnit.SECONDS).untilTrue(ticketStateUpdated);
        assertEquals(TroubleTicketState.CLOSED, troubleTicketState);
        // clear again
        ticketStateUpdated.set(false);

    }

