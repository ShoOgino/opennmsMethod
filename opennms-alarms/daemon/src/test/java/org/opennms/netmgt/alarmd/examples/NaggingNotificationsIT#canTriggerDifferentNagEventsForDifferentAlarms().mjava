    /**
     * Verifies that we can generate different "nag" events for different alarms.
     */
    @Test
    public void canTriggerDifferentNagEventsForDifferentAlarms() {
        OnmsAlarm a1 = createNagAlarmTrigger(1, "uei.opennms.org/nag/notification");
        dac.handleNewOrUpdatedAlarm(a1);
        OnmsAlarm a2 = createNagAlarmTrigger(2, "uei.opennms.org/nag/other/notification");
        dac.handleNewOrUpdatedAlarm(a2);

        dac.getClock().advanceTime( 16, TimeUnit.SECONDS );
        // t = 00:16.0000
        dac.tick();

        // No calls yet
        verify(eventForwarder, times(0)).sendNow(any(Event.class));

        // Advance the clock sufficiently for a first nag event to generate
        dac.getClock().advanceTime( 45, TimeUnit.SECONDS );
        // t = 01:01.0001
        dac.tick();

        // Verify
        ArgumentCaptor<Event> eventCaptor = ArgumentCaptor.forClass(Event.class);
        verify(eventForwarder, times(2)).sendNow(eventCaptor.capture());
        List<Event> events = eventCaptor.getAllValues();
        // We should have 2 nag events
        assertThat(events, hasSize(2));

        // Validate the nag for a1
        Event nagForA1 = getNagEventFor(events, a1);
        assertThat(nagForA1.getTime().getTime(), equalTo(61000L));
        assertThat(nagForA1.getUei(), equalTo("uei.opennms.org/nag/notification"));
        reset(eventForwarder);

        // Validate the nag for a2
        Event nagForA2 = getNagEventFor(events, a2);
        assertThat(nagForA2.getTime().getTime(), equalTo(61000L));
        assertThat(nagForA2.getUei(), equalTo("uei.opennms.org/nag/other/notification"));
        reset(eventForwarder);
    }

