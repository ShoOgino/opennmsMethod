    @Test
    public void testSingleAlarmState() throws Exception {
        AlarmPersisterImpl persisterImpl = (AlarmPersisterImpl)m_alarmd.getPersister();
        
        // Enable the new single alarm state functionality
        persisterImpl.setLegacyAlarmState(false);

        final MockNode node = m_mockNetwork.getNode(1);

        // There should be no alarms in the alarms table
        assertEmptyAlarmTable();

        //this should be the first occurrence of this alarm
        //there should be 1 alarm now
        sendNodeDownEvent(node);

        // Wait until we've create the node down alarm
        Callable<Integer> numAlarmsCallable = getNumAlarmsCallable();
        await().atMost(10, SECONDS).until(numAlarmsCallable, equalTo(1));

        // Send in the UP
        sendNodeUpEvent(node);

        // We should only have one alarm now
        numAlarmsCallable = getNumAlarmsCallable();
        await().atMost(10, SECONDS).until(numAlarmsCallable, equalTo(1));

        // One alarm should be cleared, and not archived
        assertThat(m_alarmDao.findAll().stream().filter(a -> !a.isArchived()
                && OnmsSeverity.CLEARED.equals(a.getSeverity())).count(), equalTo(1L));

    }

