    /**
     * Indirectly verifies the cosmicClear, unclear and GC automations.
     */
    @Test
    public void canFlapAlarm() {
        Scenario scenario = Scenario.builder()
                .withNodeDownEvent(1, 1)
                .withNodeUpEvent(2, 1)
                .withNodeDownEvent(3, 1)
                .withNodeUpEvent(4, 1)
                .withNodeDownEvent(5, 1)
                .build();
        ScenarioResults results = play(scenario);

        // Verify the set of alarms at various points in time

        // t=0, no alarms
        assertThat(results.getAlarms(0), hasSize(0));
        // t=1, a single problem alarm
        assertThat(results.getAlarms(1), hasSize(1));
        assertThat(results.getProblemAlarm(1), hasSeverity(OnmsSeverity.MAJOR));
        assertThat(results.getProblemAlarm(1).getCounter(), equalTo(1));
        // t=2, a (cleared) problem and a resolution
        assertThat(results.getAlarms(2), hasSize(2));
        assertThat(results.getProblemAlarm(2), hasSeverity(OnmsSeverity.CLEARED));
        assertThat(results.getProblemAlarm(2).getCounter(), equalTo(1));
        assertThat(results.getResolutionAlarm(2), hasSeverity(OnmsSeverity.NORMAL));
        assertThat(results.getResolutionAlarm(2).getCounter(), equalTo(1));
        // t=3, a (re-armed) problem and a resolution
        assertThat(results.getAlarms(3), hasSize(2));
        assertThat(results.getProblemAlarm(3), hasSeverity(OnmsSeverity.MAJOR));
        assertThat(results.getProblemAlarm(3).getCounter(), equalTo(2));
        assertThat(results.getResolutionAlarm(3), hasSeverity(OnmsSeverity.NORMAL));
        assertThat(results.getResolutionAlarm(3).getCounter(), equalTo(1));
        // t=4, a (cleared) problem and a resolution
        assertThat(results.getAlarms(4), hasSize(2));
        assertThat(results.getProblemAlarm(4), hasSeverity(OnmsSeverity.CLEARED));
        assertThat(results.getProblemAlarm(4).getCounter(), equalTo(2));
        assertThat(results.getResolutionAlarm(4), hasSeverity(OnmsSeverity.NORMAL));
        assertThat(results.getResolutionAlarm(4).getCounter(), equalTo(2));
        // t=5, a (re-armed) problem and a resolution
        assertThat(results.getAlarms(5), hasSize(2));
        assertThat(results.getProblemAlarm(5), hasSeverity(OnmsSeverity.MAJOR));
        assertThat(results.getProblemAlarm(5).getCounter(), equalTo(3));
        assertThat(results.getResolutionAlarm(5), hasSeverity(OnmsSeverity.NORMAL));
        assertThat(results.getResolutionAlarm(5).getCounter(), equalTo(2));
        // t=âˆž
        assertThat(results.getAlarmsAtLastKnownTime(), hasSize(0));
    }

