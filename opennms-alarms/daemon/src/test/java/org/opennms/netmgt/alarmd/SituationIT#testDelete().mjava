    @Test
    @Transactional
    public void testDelete() {
        long startTime = new Date().getTime();
        OnmsAlarm situation = new OnmsAlarm();
        situation.setDistPoller(m_distPollerDao.whoami());
        situation.setCounter(1);
        situation.setUei("cardDown");
        situation.setRelatedAlarms(new HashSet<>(Arrays.asList(linkDownAlarmOnR1, linkDownAlarmOnR2)));
        situation.setReductionKey("situation/reduction/key");

        m_alarmDao.saveOrUpdate(situation);

        OnmsAlarm retrieved = m_alarmDao.findByReductionKey("situation/reduction/key");
        assertThat(retrieved.getRelatedAlarms().size(), is(2));
        List<AlarmAssociation> associatedAlarms = alarmAssociationDao.findAll();
        assertThat(associatedAlarms.size(), is(2));
        AlarmAssociation alarmAssociation = associatedAlarms.get(0);
        assertThat(alarmAssociation.getMappedTime().getTime(), is(greaterThanOrEqualTo(startTime)));
        // delete the situation
        m_alarmDao.delete(retrieved);

        OnmsAlarm retrieved2 = m_alarmDao.findByReductionKey("situation/reduction/key");
        assertThat(retrieved2, is(nullValue()));
        associatedAlarms = alarmAssociationDao.findAll();
        assertThat(associatedAlarms.size(), is(0));
    }

