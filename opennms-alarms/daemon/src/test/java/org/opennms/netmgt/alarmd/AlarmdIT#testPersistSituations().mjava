    @Test
    public void testPersistSituations() throws Exception {
        final MockNode node = m_mockNetwork.getNode(1);

        //there should be no alarms in the alarms table
        assertEmptyAlarmTable();

        //there should be no alarms in the alarm_situations table
        assertEmptyAlarmSituationTable();

        //create 3 alarms to roll up into situation
        sendNodeDownEvent("Alarm1", node);
        Thread.sleep(1000);
        assertEquals(1, m_jdbcTemplate.queryForObject("select count(*) from alarms", Integer.class).intValue());

        sendNodeDownEvent("Alarm2", node);
        Thread.sleep(1000);
        assertEquals(2, m_jdbcTemplate.queryForObject("select count(*) from alarms", Integer.class).intValue());

        sendNodeDownEvent("Alarm3", node);
        Thread.sleep(1000);
        assertEquals(3, m_jdbcTemplate.queryForObject("select count(*) from alarms", Integer.class).intValue());

        //create situation rolling up the first 2 alarms
        List<String> reductionKeys = new ArrayList<>(Arrays.asList("Alarm1", "Alarm2"));
        sendSituationEvent("Situation1", node, reductionKeys);
        Thread.sleep(1000);
        assertEquals(2, m_jdbcTemplate.queryForObject("select count(*) from alarm_situations", Integer.class).intValue());
        
        //send situation in with 3rd alarm, should result in 1 situation with 3 alarms
        List<String> newReductionKeys = new ArrayList<>(Arrays.asList("Alarm3"));
        sendSituationEvent("Situation1", node, newReductionKeys);
        Thread.sleep(1000);
        assertEquals(3, m_jdbcTemplate.queryForObject("select count(*) from alarm_situations", Integer.class).intValue());
    }

