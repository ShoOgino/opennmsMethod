    /**
     * Verifies that the {@link AlarmLifecycleListener} does not invoke
     * the {@link AlarmLifecycleListener#handleNewOrUpdatedAlarm(OnmsAlarm)} or
     * {@link AlarmLifecycleListener#handleDeletedAlarm(int, String)} callbacks while
     * processing a snapshot.
     *
     * @throws InterruptedException
     */
    @Test
    public void canBlockCallbacksWhileSnapshotIsProcessing() throws InterruptedException {
        // Triggered when the snapshot is called in our handler
        CountDownLatch isProcessingSnapshot = new CountDownLatch(1);
        // Set when the snapshot is complete
        AtomicBoolean doneSnapshot = new AtomicBoolean(false);
        // Keeps track of the number of callbacks we received *after* the snapshot is complete
        AtomicInteger newUpdateOrDeleteAfterSnapshot = new AtomicInteger(0);

        AlarmLifecycleListener listener = new AlarmLifecycleListener() {
            @Override
            public void handleAlarmSnapshot(List<OnmsAlarm> alarms) {
                isProcessingSnapshot.countDown();
                try {
                    // Sleep for some arbitrary amount of time, sufficient to invoke the callbacks
                    Thread.sleep(1000);
                    doneSnapshot.set(true);
                } catch (InterruptedException e) {
                    // pass
                }
            }

            @Override
            public void handleNewOrUpdatedAlarm(OnmsAlarm alarm) {
                if (doneSnapshot.get()) {
                    newUpdateOrDeleteAfterSnapshot.incrementAndGet();
                }
            }

            @Override
            public void handleDeletedAlarm(int alarmId, String reductionKey) {
                if (doneSnapshot.get()) {
                    newUpdateOrDeleteAfterSnapshot.incrementAndGet();
                }
            }
        };

        // Bootstrap the ALM with our listener
        AlarmLifecycleListenerManager alm = new AlarmLifecycleListenerManager();
        AlarmDao alarmDao = mock(AlarmDao.class);
        when(alarmDao.findAll()).thenReturn(Collections.emptyList());
        alm.setAlarmDao(alarmDao);
        MockTransactionTemplate mockTransactionTemplate = new MockTransactionTemplate();
        mockTransactionTemplate.afterPropertiesSet();
        alm.setTransactionTemplate(mockTransactionTemplate);
        alm.onListenerRegistered(listener, Maps.newHashMap());

        // Trigger a snapshot on a another thread
        Thread t = new Thread(alm::doSnapshot);
        t.start();

        // Wait for handler to be invoked
        isProcessingSnapshot.await();

        // (the handler was invoked, and is sleeping)

        // Let's attempt to trigger some callbacks - we expect these to block until
        // the snapshot is completed
        OnmsAlarm alarm = mock(OnmsAlarm.class);
        alm.onAlarmCreated(alarm);
        alm.onAlarmDeleted(alarm);

        // We should have received the callbacks, but only *after* the snapshot was compelete
        assertThat(newUpdateOrDeleteAfterSnapshot.get(), equalTo(2));
    }

