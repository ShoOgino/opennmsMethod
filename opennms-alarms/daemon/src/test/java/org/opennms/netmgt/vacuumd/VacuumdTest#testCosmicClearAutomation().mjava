    /**
     * This tests the capabilities of the cosmicClear automation as shipped in the standard build.
     * @throws InterruptedException 
     */
    @Test(timeout=30000)
    @JUnitTemporaryDatabase(dirtiesContext=true,tempDbClass=MockDatabase.class)
    public final void testCosmicClearAutomation() throws InterruptedException {
        // create node down events with severity 6
        bringNodeDownCreatingEvent(1);
        bringNodeDownCreatingEvent(2);
        Thread.sleep(1000);
        // create node up event with severity 3
        bringNodeUpCreatingEvent(1);

        while (m_jdbcTemplate.queryForObject("select count(*) from alarms", Long.class) != 3) {
            Thread.sleep(100);
        }

        // should have three alarms, one for each event
        assertEquals("should have one alarm for each event", 3L, (long)m_jdbcTemplate.queryForObject("select count(*) from alarms", Long.class));

        AutomationProcessor ap = new AutomationProcessor(VacuumdConfigFactory.getInstance().getAutomation("cosmicClear"));
        ap.run();

        while(m_jdbcTemplate.queryForObject("select count(*) from alarms where severity = 2", Long.class) < 1) {
            Thread.sleep(100);
        }

        // the automation should have cleared the nodeDown for node 1 so it should now have severity CLEARED == 2
        assertEquals("alarms with severity == 2", 1L, (long)m_jdbcTemplate.queryForObject("select count(*) from alarms where severity = 2", Long.class));

        // There should still be a nodeUp alarm and an uncleared nodeDown alarm
        assertEquals("alarms with severity > 2", 2L, (long)m_jdbcTemplate.queryForObject("select count(*) from alarms where severity > 2", Long.class));

        // run this automation again and make sure nothing happens since we've already processed the clear
        ap = new AutomationProcessor(VacuumdConfigFactory.getInstance().getAutomation("cosmicClear"));
        ap.run();

        Thread.sleep(1000);

        // same as above
        assertEquals("alarms with severity == 2", 1L, (long)m_jdbcTemplate.queryForObject("select count(*) from alarms where severity = 2", Long.class));

        // save as above
        assertEquals("alarms with severity > 2", 2L, (long)m_jdbcTemplate.queryForObject("select count(*) from alarms where severity > 2", Long.class));
    }

