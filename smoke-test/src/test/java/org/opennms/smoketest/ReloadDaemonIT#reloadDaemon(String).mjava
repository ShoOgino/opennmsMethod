    public void reloadDaemon(final String daemonName) throws Exception {
        final Date startOfTest = new Date();

        try (final SshClient sshClient = new SshClient(stack.opennms().getSshAddress(), "admin", "admin")) {
            final PrintStream pipe = sshClient.openShell();
            pipe.println("opennms:reload-daemon " + daemonName);
            pipe.println("logout");
            await().atMost(30, SECONDS).until(sshClient.isShellClosedCallable());
        }

        final EventDao eventDao = stack.postgres().getDaoFactory().getDao(EventDaoHibernate.class);
        await().atMost(45, SECONDS).pollInterval(2, SECONDS).until(new Callable<Boolean>() {
            @Override
            public Boolean call() throws Exception {
                long eventCount = eventDao.findMatching(
                        new CriteriaBuilder(OnmsEvent.class)
                                .alias("eventParameters", "eventParameters")
                                .ge("eventCreateTime", startOfTest)
                                .eq("eventUei", RELOAD_DAEMON_CONFIG_SUCCESSFUL_UEI)
                                .toCriteria()
                ).stream()
                        .filter(e -> e.getEventParameters().stream()
                                .anyMatch(p -> EventConstants.PARM_DAEMON_NAME.equals(p.getName()) && daemonName.equals(p.getValue())))
                        .count();
                LOG.info("Waiting for {} event (count = {})", daemonName, eventCount);
                return eventCount > 0;
            }
        });
    }

