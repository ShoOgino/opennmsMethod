    /**
     * Creates and publishes a requisition with 2 dummy nodes with predefined parameters
     */
    private void createDummyNodes() throws IOException, InterruptedException {

        // First node has foreign ID "node1", label - "North 2" and category "Routers"
        // Second node has foreign ID "node2", label - "North 3" and categories "Routers" and "Servers"

        final String foreignSourceXML = "<foreign-source name=\"" + OpenNMSSeleniumTestCase.REQUISITION_NAME + "\">\n" +
                "<scan-interval>1d</scan-interval>\n" +
                "<detectors/>\n" +
                "<policies/>\n" +
                "</foreign-source>";
        createForeignSource(REQUISITION_NAME, foreignSourceXML);

        String requisitionXML = "<model-import foreign-source=\"" + OpenNMSSeleniumTestCase.REQUISITION_NAME + "\">" +
                                "   <node foreign-id=\"node1\" node-label=\"North 2\">" +
                                "       <interface ip-addr=\"127.0.0.1\" status=\"1\" snmp-primary=\"N\">" +
                                "           <monitored-service service-name=\"ICMP\"/>" +
                                "       </interface>" +
                                "       <category name=\"Routers\"/>" +
                                "   </node>" +
                                "   <node foreign-id=\"node2\" node-label=\"North 3\">" +
                                "       <interface ip-addr=\"127.0.0.1\" status=\"1\" snmp-primary=\"N\">" +
                                "           <monitored-service service-name=\"ICMP\"/>" +
                                "       </interface>" +
                                "       <category name=\"Routers\"/>" +
                                "       <category name=\"Servers\"/>" +
                                "   </node>" +
                                "</model-import>";
        createRequisition(REQUISITION_NAME, requisitionXML, 2);
        // Send an event to force reload of topology
        final EventBuilder builder = new EventBuilder(EventConstants.RELOAD_TOPOLOGY_UEI, getClass().getSimpleName());
        builder.setTime(new Date());
        builder.setParam(EventConstants.PARAM_TOPOLOGY_NAMESPACE, "all");
        sendPost("/rest/events", JaxbUtils.marshal(builder.getEvent()), 204);
        Thread.sleep(5000); // Wait to allow the event to be processed
    }

