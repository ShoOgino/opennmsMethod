    @Test
    public void testRequisitionUI() throws Exception {
        waitUntil(null, null, new Callable<Boolean>() {
            @Override public Boolean call() throws Exception {
                final WebElement form = waitForElement(By.xpath("//form[@name='takeAction']"));
                form.findElement(By.cssSelector("input[type=text][name=groupName]")).click();
                form.findElement(By.cssSelector("input[type=text][name=groupName]")).sendKeys(REQUISITION_NAME, Keys.TAB);
                form.findElement(By.cssSelector("input[type=text][name=groupName]")).click();
                form.submit();
                return true;
            }
        });

        // edit the foreign source
        clickElement(By.id("edit_fs_anchor_" + REQUISITION_NAME));

        // add a detector
        clickElement(By.xpath("//input[@value='Add Detector']"));
        String detectorNode = setTreeFieldsAndSave("foreignSourceEditForm", type("name", "HTTP-8980"), select("pluginClass", "HTTP"));

        // set the port to 8980
        clickElement(By.xpath("//a[contains(@href, '"+detectorNode+"') and text() = '[Add Parameter]']"));
        setTreeFieldsAndSave("foreignSourceEditForm", select("key", "port"), type("value", "8980"));

        clickElement(By.xpath("//input[@value='Done']"));

        // add a node
        clickElement(By.id("edit_req_anchor_" + REQUISITION_NAME));
        clickElement(By.xpath("//input[@value='Add Node']"));
        String nodeForNode = setTreeFieldsAndSave("nodeEditForm", type("nodeLabel", NODE_LABEL), type("foreignId", NODE_LABEL));

        // add the node interface
        clickElement(By.xpath("//a[contains(@href, '" + nodeForNode + "') and text() = '[Add Interface]']"));
        setTreeFieldsAndSave("nodeEditForm", type("ipAddr", "::1"));

        // add the interface service
        clickElement(By.xpath("//a[text() = 'Add Service']"));
        setTreeFieldsAndSave("nodeEditForm", select("serviceName", "HTTP-8980"));

        clickElement(By.xpath("//input[@value='Done']"));
        clickElement(By.xpath("//input[@value='Synchronize']"));

        assertTrue(wait.until(new WaitForNodesInDatabase(1)));
        LOG.debug("Found 1 node in the database.");

        // wait for the node scanning to complete
        Thread.sleep(5000);

        m_driver.get(getBaseUrl() + "opennms/element/node.jsp?node="+ REQUISITION_NAME + ":" + NODE_LABEL);
        waitForElement(By.xpath("//h3[text()='Availability']"));

        wait.until(ExpectedConditions.elementToBeClickable(By.linkText("ICMP")));
        waitForElement(By.xpath("//a[contains(@href, 'element/interface.jsp') and text()='" + InetAddressUtils.normalize("::1") + "']"));
    }

