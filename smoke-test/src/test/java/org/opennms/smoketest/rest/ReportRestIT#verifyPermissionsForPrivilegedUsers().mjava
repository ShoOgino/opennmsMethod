    @Test
    public void verifyPermissionsForPrivilegedUsers() {
        final String[][] users = new String[][]{
                // username, password
                new String[]{"admin", "admin"},
                new String[]{"ulf", "admin"}
        };

         /*
         * Verify as privileged users
         */
        for (String[] user : users) {
            authentication = preemptive().basic(user[0], user[1]);

            // Verify list works
            given().get().then().statusCode(200);

            // Verify get specific report works
            given().get(REPORT_ID).then().statusCode(200);

            // Verify render report works
            given().body(reportParameters.toString())
                    .contentType(ContentType.JSON)
                    .log().all()
                    .post(REPORT_ID)
                    .then().statusCode(200);

            /**
             * Delivered Reports
             */
            // Verify list already persisted reports (none yet)
            given().get("persisted").then().statusCode(204);

            // Verify deliver report works
            deliveryOptions.put("instanceId", INSTANCE_ID_TEMPLATE.replaceAll("%user%", user[0]));
            given().body(reportParameters.toString())
                    .contentType(ContentType.JSON)
                    .log().all()
                    .post("persisted")
                    .then().statusCode(202);

            // Verify list already persisted reports work (one yet)
            final AtomicReference<Integer> persistedId = new AtomicReference<>(-1);
            await().atMost(5, MINUTES).pollInterval(5, SECONDS).until(() -> {
                        final String response = given().get("persisted")
                                .then().log().status()
                                .assertThat()
                                .statusCode(200)
                                .body("", Matchers.hasSize(1))
                                .extract().response().asString();
                        final JSONArray persistedReports = new JSONArray(response);
                        if (persistedReports.length() == 1) {
                            persistedId.set(persistedReports.getJSONObject(0).getInt("id"));
                            return; // pass
                        }
                        throw new IllegalStateException("Invalid Result returned. Expected 1 report, but got " + persistedReports.length());
                    }
            );

            // Verify deleting existing persisted report
            given().delete("persisted/" + persistedId.get()).then().statusCode(202);

            // Verify delete all persisted reports
            given().delete("persisted").then().statusCode(202);

            /**
             * Scheduled Reports
             */
            // Verify listing scheduled report works (none yet)
            given().get("scheduled").then().statusCode(204);

            // Verify Creating a scheduled Report works
            deliveryOptions.put("instanceId", INSTANCE_ID_TEMPLATE.replaceAll("%user%", user[0]));
            given().body(reportParameters.toString())
                    .contentType(ContentType.JSON)
                    .log().all()
                    .post("scheduled")
                    .then().statusCode(202);

            // Verify listing scheduled report works (one yet)
            final String response = given().get("scheduled")
                    .then().log().status()
                    .assertThat()
                    .statusCode(200)
                    .body("", Matchers.hasSize(1))
                    .extract().response().asString();
            final JSONArray scheduledReports = new JSONArray(response);
            if (scheduledReports.length() != 1) {
                throw new IllegalStateException("Expected one result, but got " + scheduledReports.length());
            }
            final String scheduledId = scheduledReports.getJSONObject(0).getString("triggerName");

            // Verify deleting specific scheduled report works
            given().delete("scheduled/" + scheduledId).then().statusCode(202);

            // Verify deleting scheduled reports work
            given().delete("scheduled").then().statusCode(202);
        }
    }

