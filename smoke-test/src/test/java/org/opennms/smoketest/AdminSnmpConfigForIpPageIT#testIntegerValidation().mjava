    /**
     * Tests if the validation of the integer fields in the "saveConfig" form works fine.
     */
    @Test
    public void testIntegerValidation() {
        final String defaultValidationErrorTemplate = "%s is not a valid %s. Please enter a number greater than 0 or leave it empty.";
        final String geZeroValidationErrorTemplate = "%s is not a valid %s. Please enter a number greater than or equal to 0, or leave it empty.";
        final String maxRequestSizeErrorTemplate = "%s is not a valid %s. Please enter a number greater or equal than 484 or leave it empty.";
        final String[] integerFields = new String[]{
                "timeout", 
                "retryCount", 
                "port", 
                "maxVarsPerPdu", 
                "maxRepetitions",
        "maxRequestSize"};
        final String[] fieldLabels = new String[]{
                "timeout", 
                "Retry Count", 
                "Port",
                "Max Vars Per Pdu",
                "Max Repetitions",
        "Max Request Size"};
        final String[] errorMessages = new String[]{
                defaultValidationErrorTemplate, 
                geZeroValidationErrorTemplate, 
                defaultValidationErrorTemplate, 
                defaultValidationErrorTemplate, 
                defaultValidationErrorTemplate,
                maxRequestSizeErrorTemplate};
        assertTrue("integerFields and fieldDescriptions must have the same length", integerFields.length == fieldLabels.length);
        assertTrue("integerFields and errorMessages must have the same length", integerFields.length == errorMessages.length);

        for (int i=0; i<integerFields.length; i++) {
            if (i>0) {
                gotoPage(); // reset page
            }
            final String fieldName = integerFields[i];
            final String fieldLabel = fieldLabels[i];
            final String errorMessageTemplate = errorMessages[i];

            // we must set first ip to a valid value, otherwise we get an "ip not set" error
            enterText(By.name("firstIPAddress"), "1.2.3.4");
            // now do the validation
            enterText(By.name(fieldName), "abc"); // no integer
            validate(errorMessageTemplate, fieldName, fieldLabel, "abc", false);
            enterText(By.name(fieldName), "-5"); // < 0
            validate(errorMessageTemplate, fieldName, fieldLabel, "-5", false);
            enterText(By.name( fieldName), "0"); // = 0
            if (i != 1) { // A retryCount of zero is legal
                validate(errorMessageTemplate, fieldName, fieldLabel, "0", false);
            }
            enterText(By.name(fieldName), "1000"); // > 0
            validate(errorMessageTemplate, fieldName, fieldLabel, "1000", true);
            // reset to default
            findElementByName(fieldName).clear();
        }

        // now test max request size individually
        final String[] input = new String[]{"483", "484", "65535", "65536"};
        final boolean[] success = new boolean[]{false, true, true, true};
        for (int i=0; i<input.length; i++) {
            gotoPage();
            enterText(By.name("firstIPAddress"), "1.2.3.4");
            enterText(By.name("maxRequestSize"), input[i]);
            validate(maxRequestSizeErrorTemplate, "maxRequestSize", "Max Request Size", input[i], success[i]);
        }
    }

