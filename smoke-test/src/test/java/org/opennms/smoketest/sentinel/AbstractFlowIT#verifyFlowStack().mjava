    @Test
    public void verifyFlowStack() throws Exception {
        // Determine endpoints
        final InetSocketAddress elasticRestAddress = stack.elastic().getRestAddress();
        final InetSocketAddress sentinelSshAddress = stack.sentinel().getSshAddress();
        final InetSocketAddress minionFlowAddress = stack.minion().getNetworkProtocolAddress(NetworkProtocol.FLOWS);

        waitForSentinelStartup(sentinelSshAddress);

        final Sender sender = Sender.udp(minionFlowAddress);

        final FlowTester flowTester = new FlowTestBuilder()
                .withNetflow5Packet(sender)
                .withNetflow9Packet(sender)
                .withIpfixPacket(sender)
                .withSFlowPacket(sender)
                .verifyBeforeSendingFlows(theTester -> {
                    // We don't know in which order the the tests are executed so we delete all previously created flows
                    try {
                        theTester.getJestClient().execute(new DeleteIndex.Builder("netflow-*").build());
                    } catch (IOException e) {
                        throw new RuntimeException(e);
                    }
                })
                .build(elasticRestAddress);

        flowTester.verifyFlows();
    }

