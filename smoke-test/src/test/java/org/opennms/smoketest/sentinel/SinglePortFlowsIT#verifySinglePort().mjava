    @Test
    public void verifySinglePort() throws Exception {
        // Determine endpoints
        final InetSocketAddress elasticRestAddress = testEnvironment.getServiceAddress(NewTestEnvironment.ContainerAlias.ELASTICSEARCH_6, 9200, "tcp");
        final InetSocketAddress sentinelSshAddress = testEnvironment.getServiceAddress(NewTestEnvironment.ContainerAlias.SENTINEL, 8301);
        final InetSocketAddress minionSinglePortAddress = testEnvironment.getServiceAddress(NewTestEnvironment.ContainerAlias.MINION, Ports.SFLOW_PORT, "udp");

        waitForSentinelStartup(sentinelSshAddress);

        // For each existing FlowPacket, create a definition to point to "minionSinglePortAddress"
        final List<FlowPacket> collect = Packets.getFlowPackets().stream()
                .map(p -> new FlowPacket(p.getResource(), p.getFlowCount(), minionSinglePortAddress))
                .collect(Collectors.toList());

        // Now verify Flow creation
        final FlowTester tester = new FlowTestBuilder()
                .withFlowPackets(collect)
                .verifyBeforeSendingFlows((flowTester) -> {
                    try {
                        final SearchResult response = flowTester.getJestClient().execute(new Search.Builder("").addIndex("netflow-*").build());
                        Assert.assertEquals(Boolean.TRUE, response.isSucceeded());
                        Assert.assertEquals(0L, response.getTotal().longValue());
                    } catch (IOException e) {
                        Throwables.propagate(e);
                    }
                })
                .build(elasticRestAddress);
        tester.verifyFlows();
    }

