    public void createRequisition(final InetSocketAddress opennmsHttpAddress, final InetSocketAddress postgresqlAddress) {
        // Build requisition object
        final List<RequisitionInterface> interfaces = new ArrayList<>();
        final RequisitionInterface requisitionInterface = new RequisitionInterface();
        requisitionInterface.setIpAddr("172.18.45.116"); // IP-Address from the sflow-package we are going to send
        requisitionInterface.setManaged(true);
        requisitionInterface.setSnmpPrimary(PrimaryType.PRIMARY);
        interfaces.add(requisitionInterface);

        final RequisitionNode node = new RequisitionNode();
        node.setNodeLabel("Dummy-Node");
        node.setForeignId("dummy-node");
        node.setInterfaces(interfaces);
        node.setLocation("MINION"); // The node must be in the same location as the sender, which is MINION

        final Requisition requisition = new Requisition("telemetry-sflow");
        requisition.insertNode(node);


        // Create requisition and trigger import
        final RestClient client = new RestClient(opennmsHttpAddress);
        client.addOrReplaceRequisition(requisition);
        client.importRequisition("telemetry-sflow");

        // Verify that node has been created
        final HibernateDaoFactory daoFactory = new HibernateDaoFactory(postgresqlAddress);
        final NodeDao nodeDao = daoFactory.getDao(NodeDaoHibernate.class);
        final OnmsNode onmsNode = await().atMost(3, MINUTES).pollInterval(30, SECONDS)
                .until(DaoUtils.findMatchingCallable(nodeDao, new CriteriaBuilder(OnmsNode.class)
                        .eq("label", "Dummy-Node").toCriteria()), notNullValue());
        assertNotNull(onmsNode);
    }

