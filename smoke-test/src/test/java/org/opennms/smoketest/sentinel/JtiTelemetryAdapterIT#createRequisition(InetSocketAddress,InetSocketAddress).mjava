    public static OnmsNode createRequisition(InetSocketAddress opennmsHttp, InetSocketAddress postgresAddress) {
        final RestClient client = new RestClient(opennmsHttp);
        final Requisition requisition = new Requisition("telemetry-jti");
        List<RequisitionInterface> interfaces = new ArrayList<>();
        RequisitionInterface requisitionInterface = new RequisitionInterface();
        requisitionInterface.setIpAddr("192.168.1.1");
        requisitionInterface.setManaged(true);
        requisitionInterface.setSnmpPrimary(PrimaryType.PRIMARY);
        interfaces.add(requisitionInterface);
        RequisitionNode node = new RequisitionNode();
        node.setNodeLabel("dummy-node");
        node.setForeignId("dummy-node");
        node.setInterfaces(interfaces);
        node.setLocation("MINION");
        requisition.insertNode(node);
        client.addOrReplaceRequisition(requisition);
        client.importRequisition("telemetry-jti");

        HibernateDaoFactory daoFactory = new HibernateDaoFactory(postgresAddress);
        NodeDao nodeDao = daoFactory.getDao(NodeDaoHibernate.class);

        final OnmsNode onmsNode = await().atMost(3, MINUTES).pollInterval(30, SECONDS)
                .until(DaoUtils.findMatchingCallable(nodeDao, new CriteriaBuilder(OnmsNode.class)
                        .eq("foreignSource", "telemetry-jti")
                        .eq("label", "dummy-node").toCriteria()), notNullValue());

        assertNotNull(onmsNode);

        return onmsNode;

    }

