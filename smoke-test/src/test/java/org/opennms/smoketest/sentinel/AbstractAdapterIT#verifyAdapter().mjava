    @Test
    public void verifyAdapter() throws Exception {
        // Determine endpoints
        final InetSocketAddress sentinelSshAddress = stack.sentinel().getSshAddress();
        final InetSocketAddress opennmsHttpAddress = stack.opennms().getWebAddress();

        // Configure RestAssured
        RestAssured.baseURI = String.format("http://%s:%s/opennms", opennmsHttpAddress.getHostName(), opennmsHttpAddress.getPort());
        RestAssured.port = opennmsHttpAddress.getPort();
        RestAssured.basePath = "/rest";
        RestAssured.authentication = preemptive().basic(OpenNMSContainer.ADMIN_USER, OpenNMSContainer.ADMIN_PASSWORD);

        // The package send may contain a node, which must be created in order to have the adapter store it to newts
        // so we check if this is the case and afterwards create the requisition
        final RequisitionCreateInfo requisitionToCreate = getRequisitionToCreate();
        if (requisitionToCreate != null) {
            createRequisition(requisitionToCreate, opennmsHttpAddress, stack.postgres().getDaoFactory());
        }

        // Wait until a route for procession is actually started
        new KarafShell(sentinelSshAddress).verifyLog(getSentinelReadyVerificationFunction());

        // If a new requisition was created, also probably new nodes are available.
        // However, sentinel may not know about it yet, so we manually sync the InterfaceToNodeCache in order to
        // "see" the new nodes and interfaces.
        if (requisitionToCreate != null) {
            new KarafShell(sentinelSshAddress).runCommand("opennms-nodecache:sync");
        }

        // Resource Id to verify against
        final String resourceId = getResourceId();

        // Ensure no measurement data available
        final Response response = RestAssured.given().accept(ContentType.JSON)
                .get("/measurements/" + resourceId);
        Assert.assertEquals(404, response.statusCode());

        await().atMost(3, TimeUnit.MINUTES).pollInterval(10, TimeUnit.SECONDS).until(
                () -> {
                    // Send packet to Minion
                    sendTelemetryMessage();
                    // Verify that the resource exists
                    final Response theResponse = RestAssured.given().accept(ContentType.JSON)
                            .get("/measurements/" + resourceId);
                    return theResponse.statusCode() == 200;
                }
        );
    }

