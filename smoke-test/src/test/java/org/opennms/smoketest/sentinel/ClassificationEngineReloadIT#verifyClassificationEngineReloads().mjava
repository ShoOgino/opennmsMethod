    @Test
    public void verifyClassificationEngineReloads() throws IOException {
        final InetSocketAddress sentinelSshAddress = stack.sentinel().getSshAddress();
        final String elasticRestUrl = stack.elastic().getRestAddressString();
        final InetSocketAddress minionFlowAddress = stack.minion().getNetworkProtocolAddress(NetworkProtocol.FLOWS);
        final InetSocketAddress opennmsWebAddress = stack.opennms().getWebAddress();

        waitForSentinelStartup(sentinelSshAddress);

        // Enable faster reloading on sentinel, default is 5 minutes.
        final KarafShell karafShell = new KarafShell(sentinelSshAddress);
        karafShell.runCommand(
                "config:edit org.opennms.features.flows.classification\n" +
                "config:property-set sentinel.cache.engine.reloadInterval 5\n" + // 5 Seconds
                "config:update");

        // Build the Elastic Rest Client
        final JestClientFactory factory = new JestClientFactory();
        factory.setHttpClientConfig(new HttpClientConfig.Builder(elasticRestUrl)
                .connTimeout(5000)
                .readTimeout(10000)
                .multiThreaded(true).build());
        try (JestClient client = factory.getObject()) {
            // Verify nothing is created yet
            await().atMost(2, TimeUnit.MINUTES).pollInterval(5, TimeUnit.SECONDS).until(() -> {
                final Search query = new Search.Builder("").build();
                final SearchResult result = client.execute(query);
                return SearchResultUtils.getTotal(result) == 0;
            });

            // Send flow
            Packets.Netflow5.setDestinationAddress(minionFlowAddress);
            Packets.Netflow5.send();

            // Verify it was classified properly
            await().atMost(2, TimeUnit.MINUTES).pollInterval(5, TimeUnit.SECONDS).until(() -> {
                // Verify it has been created properly
                final Search query = new Search.Builder(buildApplicationQuery("ssh")).build();
                final SearchResult result = client.execute(query);
                return SearchResultUtils.getTotal(result) == 2;
            });

            // Update rule definitions
            RestAssured.baseURI = "http://" + opennmsWebAddress.getHostName();
            RestAssured.port = opennmsWebAddress.getPort();
            RestAssured.basePath = "/opennms/rest/classifications";
            RestAssured.authentication = preemptive().basic(OpenNMSContainer.ADMIN_USER, OpenNMSContainer.ADMIN_PASSWORD);
            final GroupDTO group = getGroup(2);
            final RuleDTO rule = new RuleDTOBuilder()
                    .withName("custom-rule")
                    .withDstPort("22")
                    .withOmnidirectional(true)
                    .withGroup(group)
                    .build();
            saveAndRetrieveRule(rule);

            // Verify that sentinel reloaded the rules
            new KarafShell(sentinelSshAddress).runCommand(
                    "classification:classify --protocol tcp --srcAddress 127.0.0.1 --srcPort 55000 --dstAddress 8.8.8.8 --destPort 22 --exporterAddress 127.0.0.1",
                    output -> output.contains("custom-rule")
            );

            // Send Flow again
            Packets.Netflow5.send();

            // Verify it was classified according the new rule
            await().atMost(2, TimeUnit.MINUTES).pollInterval(5, TimeUnit.SECONDS).until(() -> {
                // Verify it has been created properly
                final Search query = new Search.Builder(buildApplicationQuery("custom-rule")).build();
                final SearchResult result = client.execute(query);
                return SearchResultUtils.getTotal(result) == 2;
            });
        }
    }

