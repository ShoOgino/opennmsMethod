    @Test
    public void verifyAdapter() throws Exception {
        // Determine endpoints
        final InetSocketAddress sentinelSshAddress = testEnvironment.getServiceAddress(NewTestEnvironment.ContainerAlias.SENTINEL, 8301);
        final InetSocketAddress minionListenerAddress = testEnvironment.getServiceAddress(NewTestEnvironment.ContainerAlias.MINION, 50000, "udp");
        final InetSocketAddress opennmsHttpAddress = testEnvironment.getServiceAddress(NewTestEnvironment.ContainerAlias.OPENNMS, 8980);
        final InetSocketAddress postgresqlAddress = testEnvironment.getServiceAddress(NewTestEnvironment.ContainerAlias.POSTGRES, 5432);

        // Configure RestAssured
        RestAssured.baseURI = String.format("http://%s:%s/opennms", opennmsHttpAddress.getHostName(), opennmsHttpAddress.getPort());
        RestAssured.port = opennmsHttpAddress.getPort();
        RestAssured.basePath = "/rest";
        RestAssured.authentication = preemptive().basic(BASIC_AUTH_USERNAME, BASIC_AUTH_PASSWORD);

        // The SFlow packet contains a node, which must be created in order to have the adapter store it to newts
        // so a requisition is created first
        createRequisition(opennmsHttpAddress, postgresqlAddress);

        // Wait until a route for SFlow procession is actually started
        new KarafShell(sentinelSshAddress).verifyLog((output) -> output.contains("Route: Sink.Server.Telemetry-NXOS started and consuming from: queuingservice://OpenNMS.Sink.Telemetry-NXOS"));

        // Now sentinel is up and running, we should re-sync the datasource,as the
        // earlier created node may not be visible to sentinel yet.
        new KarafShell(sentinelSshAddress).runCommand("nodecache:sync");

        // Ensure no measurement data available
        final Response response = RestAssured.given().accept(ContentType.JSON)
                .get("/measurements/node[telemetry-nxos:nexus9k].nodeSnmp[]/load_avg_1min");
        Assert.assertEquals(404, response.statusCode());

        // Send nxos packet to minion
        sendNxosTelemetryMessage(minionListenerAddress);

        await().atMost(3, TimeUnit.MINUTES).pollInterval(10, TimeUnit.SECONDS).until(
                () -> {
                    final Response theResponse = RestAssured.given().accept(ContentType.JSON)
                            .get("/measurements/node[telemetry-nxos:nexus9k].nodeSnmp[]/load_avg_1min");
                    return theResponse.statusCode() == 200;
                }
        );
    }

