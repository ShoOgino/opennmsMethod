    /**
     * Tests if the validation of the integer fields in the "saveConfig" form works fine.
     * 
     */
    @Test
    public void testIntegerValidation() {
    	final String defaultValidationErrorTemplate = "%s is not a valid %s. Please enter a number greater than 0 or leave it empty.";
    	final String maxRequestSizeErrorTemplate = "%s is not a valid %s. Please enter a number greater or equal than 484 or leave it empty.";
    	final String[] integerFields = new String[]{
    			"timeout", 
    			"retryCount", 
    			"port", 
    			"maxVarsPerPdu", 
    			"maxRepetitions",
    			"maxRequestSize"};
    	final String[] fieldLabels = new String[]{
    			"timeout", 
    			"Retry Count", 
    			"Port",
    			"Max Vars Per Pdu",
    			"Max Repetitions",
    			"Max Request Size"};
    	final String[] errorMessages = new String[]{
    			defaultValidationErrorTemplate, 
    			defaultValidationErrorTemplate, 
    			defaultValidationErrorTemplate, 
    			defaultValidationErrorTemplate, 
    			defaultValidationErrorTemplate,
    			maxRequestSizeErrorTemplate};
    	assertTrue("integerFields and fieldDescriptions must have the same length", integerFields.length == fieldLabels.length);
    	assertTrue("integerFields and errorMessages must have the same length", integerFields.length == errorMessages.length);
    	
    	for (int i=0; i<integerFields.length; i++) {
    		if (i>0) gotoPage(); // reset page
    		final String fieldName = integerFields[i];
    		final String fieldLabel = fieldLabels[i];
    		final String errorMessageTemplate = errorMessages[i];
    		
    		// we must set first ip to a valid value, otherwise we get an "ip not set" error
    		selenium.type("name=firstIPAddress", "1.2.3.4");
    		// now do the validation
    		selenium.type("name=" + fieldName, "abc"); // no integer
    		validate(errorMessageTemplate, fieldName, fieldLabel, "abc", false);
    		selenium.type("name=" + fieldName, "-5"); // < 0
    		validate(errorMessageTemplate, fieldName, fieldLabel, "-5", false);
    		selenium.type("name=" +  fieldName, "0"); // = 0
    		validate(errorMessageTemplate, fieldName, fieldLabel, "0", false);
    		selenium.type("name=" + fieldName, "1000"); // > 0
    		validate(errorMessageTemplate, fieldName, fieldLabel, "1000", true);
    		// reset to default
    		selenium.type("name=" + fieldName,  "");
    	}
    	
    	// now test max request size individually
    	final String[] input = new String[]{"483", "484", "65535", "65536"};
    	final boolean[] success = new boolean[]{false, true, true, true};
    	for (int i=0; i<input.length; i++) {
    		gotoPage();
    		selenium.type("name=firstIPAddress", "1.2.3.4");
    		selenium.type("name=maxRequestSize", input[i]);
    		validate(maxRequestSizeErrorTemplate, "maxRequestSize", "Max Request Size", input[i], success[i]);
    	}
    }

