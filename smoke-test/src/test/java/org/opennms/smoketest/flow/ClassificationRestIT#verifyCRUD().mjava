    @Test
    public void verifyCRUD() {
        // Verify GET Rules
        given().get().then().assertThat().statusCode(200); // 200 because "system defined" rules are enabled

        // Verify GET Groups (system-defined and user-defined rules should be there)
        given().get("/groups").then().assertThat().statusCode(200).body("", hasSize(2));

        // Disable "system-defined" rules
        setEnabled(1, false);
        given().get().then().assertThat().statusCode(204); // 204 because "system-defined" rules are disabled

        // POST (create) a rule
        final RuleDTO httpRule = builder().withName("http").withDstPort("80,8080").withProtocol("tcp,udp").build();
        String header = given().contentType(ContentType.JSON)
                .accept(ContentType.JSON)
                .body(httpRule)
                .post().then().assertThat().statusCode(201) // created
                .extract().header("Location");
        final String[] split = header.split("/");
        int classificationId = Integer.parseInt(split[split.length - 1]);

        // Verify Creation of rule
        final RuleDTO receivedHttpRule = given().get("" + classificationId)
                .then().log().body(true)
                .assertThat()
                    .statusCode(200)
                    .contentType(ContentType.JSON)
                .extract().response().as(RuleDTO.class);
        assertThat(receivedHttpRule.getId(), is(classificationId));
        assertThat(receivedHttpRule.getName(), is(httpRule.getName()));
        assertThat(receivedHttpRule.getDstAddress(), is(httpRule.getDstAddress()));
        assertThat(receivedHttpRule.getProtocols(), is(httpRule.getProtocols()));
        assertThat(receivedHttpRule.getGroup().getName(), is(Groups.USER_DEFINED));

        // Post another rule
        given().contentType(ContentType.JSON)
            .accept(ContentType.JSON)
            .body(builder().withName("https").withDstPort("443").withProtocol("tcp").build())
            .post().then().assertThat().statusCode(201); // created

        // Verify creation worked
        given().get()
                .then()
                    .log().body(true)
                .assertThat()
                    .statusCode(200)
                    .contentType(ContentType.JSON)
                    .body("", hasSize(2))
                .extract().response().asString();

        // UPDATE 1st rule
        receivedHttpRule.setName("http-opennms");
        receivedHttpRule.setDstPort("8980");
        receivedHttpRule.setProtocol("tcp");
        receivedHttpRule.setDstAddress("127.0.0.1");
        given().contentType(ContentType.JSON)
                .body(receivedHttpRule)
                .log().all()
                .put(Integer.toString(classificationId))
                .then().assertThat()
                .log().all()
                .statusCode(200);

        // Verify update worked
        final RuleDTO updatedRule = given().get(Integer.toString(classificationId))
                .then()
                    .log().body(true)
                .assertThat()
                    .contentType(ContentType.JSON)
                    .statusCode(200)
                .extract().response().as(RuleDTO.class);
        assertThat(updatedRule.getId(), is(classificationId));
        assertThat(updatedRule.getName(), is(receivedHttpRule.getName()));
        assertThat(updatedRule.getDstAddress(), is(receivedHttpRule.getDstAddress()));
        assertThat(updatedRule.getProtocols(), is(receivedHttpRule.getProtocols()));
        assertThat(updatedRule.getGroup().getName(), is(Groups.USER_DEFINED));

        // Delete 1st rule
        given().delete(Integer.toString(classificationId)).then().statusCode(204);

        // Verify deleted
        given().get()
                .then()
                    .log().body(true)
                .assertThat()
                    .contentType(ContentType.JSON)
                    .statusCode(200)
                    .body("", hasSize(1));

        // DELETE group
        given().param("groupId", "2").delete()
                .then().statusCode(204);

        // Verify Group deleted
        given().get().then().statusCode(204);

        // Verify DELETE ALL is not allowed
        given().delete().then().assertThat().statusCode(400);
    }

