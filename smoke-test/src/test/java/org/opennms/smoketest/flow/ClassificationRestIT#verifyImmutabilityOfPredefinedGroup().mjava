    @Test
    public void verifyImmutabilityOfPredefinedGroup() {
        // The predefined group and its rules should not be able to be altered.
        GroupDTO predefinedGroup = getGroup(1);
        GroupDTO userDefinedGroup = getGroup(2);
        assertThat(predefinedGroup.getName(), is(Groups.SYSTEM_DEFINED));
        assertThat(userDefinedGroup.getName(), is(Groups.USER_DEFINED));

        // try to add new rule to group
        final RuleDTO httpRule = builder().withName("http").withDstPort("80").withProtocol("tcp").build();
        given().contentType(ContentType.JSON)
                .accept(ContentType.JSON)
                .body(httpRule)
                .post().then().assertThat().statusCode(400);

        // try to add existing rule to predefined group
        RuleDTO rule = saveAndRetrieveRule(builder().withName("http").withGroup(userDefinedGroup).withDstPort("80")
                .withProtocol("tcp").build());
        rule.setGroup(predefinedGroup);
        given().contentType(ContentType.JSON)
                .body(rule)
                .log().all()
                .put(Integer.toString(rule.getId()))
                .then().assertThat()
                .log().all()
                .statusCode(400);

        // try to delete a rule in predefined group
        rule = given()
                .param("groupFilter", predefinedGroup.getId())
                .param("limit", 1)
                .get()
                .then()
                .extract().response().body().jsonPath().getList(".", RuleDTO.class).get(0);
        given().delete(Integer.toString(rule.getId())).then().statusCode(400);

        // try to modify group parameters
        predefinedGroup.setName("new name");
        predefinedGroup.setDescription("new description");
        given().contentType(ContentType.JSON)
                .accept(ContentType.JSON)
                .body(predefinedGroup)
                .put("/groups/"+predefinedGroup.getId()).then().assertThat().statusCode(400);

    }

