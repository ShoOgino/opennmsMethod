    // Verifies that when OpenNMS and ElasticSearch is running and configured, that sending a flow packet
    // will actually be persisted in elastic
    @Test
    public void verifyFlowStack() throws Exception {
        // Determine endpoints
        final InetSocketAddress elasticRestAddress = testEnvironment.getServiceAddress(NewTestEnvironment.ContainerAlias.ELASTICSEARCH_5, 9200, "tcp");
        final InetSocketAddress opennmsWebAddress = testEnvironment.getServiceAddress(NewTestEnvironment.ContainerAlias.OPENNMS, 8980);
        final InetSocketAddress opennmsSshAddress = testEnvironment.getServiceAddress(NewTestEnvironment.ContainerAlias.OPENNMS, 8101);
        final InetSocketAddress opennmsNetflowAdapterAddress = testEnvironment.getServiceAddress(NewTestEnvironment.ContainerAlias.OPENNMS, NETFLOW_LISTENER_UDP_PORT, "udp");
        final String elasticRestUrl = String.format("http://%s:%d", elasticRestAddress.getHostString(), elasticRestAddress.getPort());

        // Configure OpenNMS
        setupOnmsContainer(opennmsSshAddress);

        // Build the Elastic Rest Client
        final JestClientFactory factory = new JestClientFactory();
        factory.setHttpClientConfig(new HttpClientConfig.Builder(elasticRestUrl)
                .multiThreaded(true)
                .build());
        final JestClient client = factory.getObject();
        try {
            // Read netflow 5 packet
           sendNetflowPacket(opennmsNetflowAdapterAddress);

            // Ensure that the template has been created
            verify(client, (jestClient) -> {
                JestResult result = jestClient.execute(new GetTemplate.Builder(TEMPLATE_NAME).build());
                if (result.isSucceeded() && result.getJsonObject().get(TEMPLATE_NAME) != null) {
                    return true;
                }
                return false;
            });
            // Verify directly at elastic that the flows have been created
            verify(client, jestClient -> {
                SearchResult response = jestClient.execute(new Search.Builder("").addIndex("flow-*").build());
                if (response.isSucceeded() && response.getTotal() == 2) {
                    return true;
                }
                return false;
            });
        } finally {
            // JestClient 2.x does not support Autoclosable, so we close it manually.
            // Can be removed when updated to a later version
            if (client != null) {
                client.shutdownClient();
            }
        }

        // Verify via OpenNMS ReST API
        final String flowRestUrl = "http://" + opennmsWebAddress.getHostString().toString() + ":" + opennmsWebAddress.getPort() + "/opennms/" + REST_URL;
        final NetflowPacket netflowPacket = new NetflowPacket(ByteBuffer.wrap(getNetflowPacketContent()));
        final List<NetflowDocument> documents = new Netflow5Converter().convert(netflowPacket);
        documents.stream().forEach(d -> {
            d.setLocation("Default");
            d.setExporterAddress("127.0.0.1");
        });
        try (HttpClientWrapper restClient = createClientWrapper()) {
            // Persist flow
            HttpPut httpPut = new HttpPut(flowRestUrl);
            httpPut.addHeader("content-type", "application/json");
            httpPut.setEntity(new StringEntity(gson.toJson(documents)));
            CloseableHttpResponse response = restClient.execute(httpPut);
            assertEquals(202, response.getStatusLine().getStatusCode());

            // Wait 5 seconds, because it takes a while before elastic returns the data
            Thread.sleep(5000);

            // Query flows
            final HttpGet httpGet = new HttpGet(flowRestUrl);
            httpGet.addHeader("accept", "application/json");
            response = restClient.execute(httpGet);
            assertEquals(200, response.getStatusLine().getStatusCode());

            // Read response
            final Type listType = new TypeToken<ArrayList<NetflowDocument>>() {
            }.getType();
            List<NetflowDocument> netflowDocuments = gson.fromJson(new InputStreamReader(response.getEntity().getContent()), listType);
            assertEquals(4, netflowDocuments.size());

            // Proxy query
            final HttpPost httpPost = new HttpPost(flowRestUrl + "/proxy");
            httpPost.addHeader("content-type", "application/json");
            httpPost.addHeader("accept", "application/json");
            httpPost.setEntity(new StringEntity("{}"));
            response = restClient.execute(httpPost);
            assertEquals(200, response.getStatusLine().getStatusCode());

            // Verify response by checking that hits.hits exists
            final String json = EntityUtils.toString(response.getEntity());
            EntityUtils.consume(response.getEntity());
            final JsonObject jsonRoot = gson.fromJson(json, JsonObject.class);
            final JsonArray jsonArray = jsonRoot.get("hits").getAsJsonObject().get("hits").getAsJsonArray();
            assertEquals(4, jsonArray.size());
        }
    }

