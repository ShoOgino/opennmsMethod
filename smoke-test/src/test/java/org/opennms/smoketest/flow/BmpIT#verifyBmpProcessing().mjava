    @Test
    public void verifyBmpProcessing() {
        final InetSocketAddress bgpTelemetryAddress = stack.opennms().getNetworkProtocolAddress(NetworkProtocol.BMP);

        final String node = "<node type=\"A\" label=\"TestNode\" foreignSource=\"SmokeTests\" foreignId=\"TestNode\">" +
                            "<labelSource>H</labelSource>" +
                            "<sysContact>Me</sysContact>" +
                            "<sysDescription>Black Ops 4</sysDescription>" +
                            "<sysLocation>German DevJam 2020</sysLocation>" +
                            "<sysName>TestNode</sysName>" +
                            "<sysObjectId>.1.3.6.1.4.1.8072.3.2.255</sysObjectId>" +
                            "<createTime>2020-02-25T13:20:00.123-04:00</createTime>" +
                            "<lastCapsdPoll>2020-02-25T13:21:00.456-04:00</lastCapsdPoll>" +
                            "</node>";

        given().body(node)
                .basePath("/opennms/rest/nodes")
                .contentType(ContentType.XML).post()
                .then().assertThat()
                .statusCode(201);

        final String ipInterface = "<ipInterface isManaged=\"M\" snmpPrimary=\"P\">" +
                                   "<ipAddress>" + getLocalAddress() + "</ipAddress>" +
                                   "<hostName>test-machine1.local</hostName>" +
                                   "</ipInterface>";

        given().body(ipInterface)
                .basePath("/opennms/rest/nodes/SmokeTests:TestNode/ipinterfaces")
                .contentType(ContentType.XML).post()
                .then().assertThat()
                .statusCode(201);

        await().atMost(1, MINUTES).pollDelay(0, SECONDS).pollInterval(5, SECONDS)
                .until(() -> {
                    sendBmpTelemetryMessage(bgpTelemetryAddress);
                    return matchRrdFileFromNodeResource("SmokeTests:TestNode");
                });
    }

