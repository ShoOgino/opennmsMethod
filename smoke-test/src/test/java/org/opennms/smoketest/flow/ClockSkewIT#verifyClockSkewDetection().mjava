    @Test
    public void verifyClockSkewDetection() throws Exception {
        // setting up endpoint addresses
        final InetSocketAddress flowTelemetryAddress = stack.minion().getNetworkProtocolAddress(NetworkProtocol.FLOWS);
        final InetSocketAddress opennmsWebAddress = stack.opennms().getWebAddress();
        final InetSocketAddress elasticRestAddress = InetSocketAddress.createUnresolved(
                stack.elastic().getContainerIpAddress(), stack.elastic().getMappedPort(9200));

        // we need the host ip address in the docker network to be used as the exporter address
        final String localAddress = stack.minion()
                .getCurrentContainerInfo()
                .getNetworkSettings()
                .getNetworks()
                .entrySet()
                .stream()
                .findFirst()
                .get()
                .getValue()
                .getGateway();

        // create node with ip address
        final RestClient restClient = stack.opennms().getRestClient();
        final Requisition requisition = new Requisition("TestForeignSource");

        final RequisitionNode requisitionNode = new RequisitionNode();
        requisitionNode.setNodeLabel("ExporterNode");
        requisitionNode.setLocation(stack.minion().getLocation());

        final RequisitionInterface requisitionInterface = new RequisitionInterface();
        requisitionInterface.setIpAddr(localAddress);
        requisitionInterface.setManaged(true);
        requisitionInterface.setSnmpPrimary(PrimaryType.PRIMARY);
        requisitionNode.setInterfaces(ImmutableList.of(requisitionInterface));
        requisitionNode.setForeignId("ExporterNode");
        requisition.insertNode(requisitionNode);
        restClient.addOrReplaceRequisition(requisition);
        restClient.importRequisition("TestForeignSource");

        // wait till the node is created
        final NodeDao nodeDao = stack.postgres().dao(org.opennms.netmgt.dao.hibernate.NodeDaoHibernate.class);
        final OnmsNode onmsNode = await()
                .atMost(2, MINUTES).pollInterval(5, SECONDS)
                .until(DaoUtils.findMatchingCallable(nodeDao,
                        new CriteriaBuilder(OnmsNode.class)
                                .eq("label", "ExporterNode")
                                .toCriteria()),
                        notNullValue());

        // now send Netflow v5 packet
        final FlowTester flowTester = new FlowTestBuilder()
                .withNetflow5Packet(Sender.udp(flowTelemetryAddress))
                .verifyOpennmsRestEndpoint(opennmsWebAddress)
                .build(elasticRestAddress);

        // and verify
        flowTester.verifyFlows();

        // check for the event to appear
        final EventDao eventDao = stack.postgres().getDaoFactory().getDao(EventDaoHibernate.class);
        final OnmsEvent onmsEvent = await().atMost(2, MINUTES).pollInterval(10, SECONDS)
                .until(DaoUtils.findMatchingCallable(eventDao, new CriteriaBuilder(OnmsEvent.class)
                        .eq("eventUei", "uei.opennms.org/internal/telemetry/clockSkewDetected")
                        .toCriteria()), notNullValue());

        // check for the alarm to appear
        final AlarmDao alarmDao = stack.postgres().getDaoFactory().getDao(AlarmDaoHibernate.class);
        final OnmsAlarm onmsAlarm = await().atMost(2, MINUTES).pollInterval(10, SECONDS)
                .until(DaoUtils.findMatchingCallable(alarmDao, new CriteriaBuilder(OnmsAlarm.class)
                        .eq("uei", "uei.opennms.org/translator/telemetry/clockSkewDetected")
                        .toCriteria()), notNullValue());
    }

