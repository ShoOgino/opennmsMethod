    private OnmsNode sendnewSuspectEvent(boolean isMinion, Date startOfTest)
            throws ClientProtocolException, IOException {

        Event minionEvent = new Event();
        minionEvent.setUei("uei.opennms.org/internal/discovery/newSuspect");
        minionEvent.setHost(SENDER_IP);
        minionEvent.setInterface(SENDER_IP);
        minionEvent.setInterfaceAddress(Inet4Address.getByName(SENDER_IP));
        minionEvent.setSource("system-test");
        minionEvent.setSeverity("4");
        if (isMinion) {
            Parm parm = new Parm();
            parm.setParmName("location");
            Value minion = new Value("MINION");
            parm.setValue(minion);
            List<Parm> parms = new ArrayList<>();
            parms.add(parm);
            minionEvent.setParmCollection(parms);
        }

        String xmlString = JaxbUtils.marshal(minionEvent);

        executor.execute(Request.Post(String.format("http://%s:%d/opennms/rest/events",
                opennmsHttp.getAddress().getHostAddress(), opennmsHttp.getPort()))
                .bodyString(xmlString, ContentType.APPLICATION_XML)).returnContent();

        InetSocketAddress pgsql = m_testEnvironment.getServiceAddress(ContainerAlias.POSTGRES, 5432);
        HibernateDaoFactory daoFactory = new HibernateDaoFactory(pgsql);
        EventDao eventDao = daoFactory.getDao(EventDaoHibernate.class);
        NodeDao nodeDao = daoFactory.getDao(NodeDaoHibernate.class);

        Criteria criteria = new CriteriaBuilder(OnmsEvent.class)
                .eq("eventUei", EventConstants.NEW_SUSPECT_INTERFACE_EVENT_UEI).ge("eventTime", startOfTest)
                .eq("ipAddr", Inet4Address.getByName(SENDER_IP)).toCriteria();

        await().atMost(1, MINUTES).pollInterval(10, SECONDS).until(DaoUtils.countMatchingCallable(eventDao, criteria),
                greaterThan(0));

        final OnmsNode onmsNode = await().atMost(1, MINUTES).pollInterval(5, SECONDS)
                .until(DaoUtils.findMatchingCallable(nodeDao, new CriteriaBuilder(OnmsNode.class).eq("label", SENDER_IP)
                        .ge("createTime", startOfTest).toCriteria()), notNullValue());

        assertNotNull(onmsNode);

        if (isMinion) {
            assertThat(onmsNode.getLocation().getLocationName(), is("MINION"));
        }

        LOG.info(" New suspect event has been sent and node has been created for IP : {}", SENDER_IP);
        return onmsNode;
    }

