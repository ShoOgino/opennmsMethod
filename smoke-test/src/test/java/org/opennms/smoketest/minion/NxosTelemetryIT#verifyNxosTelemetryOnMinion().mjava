    @Test
    public void verifyNxosTelemetryOnMinion() throws Exception {

        Date startOfTest = new Date();

        final InetSocketAddress sshAddr = m_testEnvironment.getServiceAddress(ContainerAlias.MINION, 8201);
        try (final SshClient sshClient = new SshClient(sshAddr, "admin", "admin")) {
            // Modify minion configuration for telemetry
            PrintStream pipe = sshClient.openShell();
            pipe.println("config:edit --alias udp-50001 --factory org.opennms.features.telemetry.listeners");
            pipe.println("config:property-set name NXOS");
            pipe.println("config:property-set class-name org.opennms.netmgt.telemetry.listeners.UdpListener");
            pipe.println("config:property-set parameters.port 50001");
            pipe.println("config:property-set parsers.1.name NXOS");
            pipe.println("config:property-set parsers.1.class-name org.opennms.netmgt.telemetry.protocols.common.parser.ForwardParser");
            pipe.println("config:update");
            pipe.println("logout");
            await().atMost(1, MINUTES).until(sshClient.isShellClosedCallable());
        }

        OnmsNode onmsNode = addRequisition(opennmsHttp, true, startOfTest);
        final InetSocketAddress minionUdp = m_testEnvironment.getServiceAddress(ContainerAlias.MINION, 50001, "udp");
        sendNxosTelemetryMessage(minionUdp);

        await().atMost(2, MINUTES).pollDelay(0, SECONDS).pollInterval(15, SECONDS)
                .until(matchRrdFileFromNodeResource(onmsNode.getId()));
    }

