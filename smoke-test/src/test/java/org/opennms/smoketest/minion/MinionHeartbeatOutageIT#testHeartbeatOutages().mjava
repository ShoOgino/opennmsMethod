    @Test
    public void testHeartbeatOutages() throws Exception {
        Date startOfTest = new Date();

        InetSocketAddress minionSshAddr = testEnvironment.getServiceAddress(ContainerAlias.MINION, 8201);
        InetSocketAddress opennmsSshAddr = testEnvironment.getServiceAddress(ContainerAlias.OPENNMS, 8101);

        installFeaturesOnMinion(minionSshAddr);

        installFeaturesOnOpenNMS(opennmsSshAddr);

        // Wait for the Minion to show up
        await().atMost(90, SECONDS).pollInterval(5, SECONDS)
            .until(DaoUtils.countMatchingCallable(
                 getDaoFactory().getDao(MinionDaoHibernate.class),
                 new CriteriaBuilder(OnmsMinion.class)
                     .gt("lastUpdated", startOfTest)
                     .eq("location", "MINION")
                     .toCriteria()
                 ),
                 is(1)
             );

        // Make sure that the node is available
        await().atMost(180, SECONDS).pollInterval(5, SECONDS)
            .until(DaoUtils.countMatchingCallable(
                getDaoFactory().getDao(NodeDaoHibernate.class),
                new CriteriaBuilder(OnmsNode.class)
                .eq("foreignSource", "Minions")
                .eq("foreignId", "00000000-0000-0000-0000-000000ddba11")
                .toCriteria()
                ),
            equalTo(1)
        );

        // Make sure that the expected events are present
        assertEquals(1, DaoUtils.countMatchingCallable(
            getDaoFactory().getDao(EventDaoHibernate.class),
            new CriteriaBuilder(OnmsEvent.class)
            .eq("eventUei", EventConstants.MONITORING_SYSTEM_ADDED_UEI)
            .like("eventParms", String.format("%%%s=%s%%", EventConstants.PARAM_MONITORING_SYSTEM_TYPE, OnmsMonitoringSystem.TYPE_MINION))
            .like("eventParms", String.format("%%%s=%s%%", EventConstants.PARAM_MONITORING_SYSTEM_ID, "00000000-0000-0000-0000-000000ddba11"))
            .like("eventParms", String.format("%%%s=%s%%", EventConstants.PARAM_MONITORING_SYSTEM_LOCATION, "MINION"))
            .toCriteria()
            ).call().intValue()
        );

        assertEquals(0, DaoUtils.countMatchingCallable(
            getDaoFactory().getDao(EventDaoHibernate.class),
            new CriteriaBuilder(OnmsEvent.class)
            .eq("eventUei", EventConstants.MONITORING_SYSTEM_LOCATION_CHANGED_UEI)
            .toCriteria()
            ).call().intValue()
        );

        for (int i = 0; i < 3; i++) {
            restartContainer(ContainerAlias.MINION);

            // Reset the startOfTest timestamp
            startOfTest = new Date();

            await().atMost(90, SECONDS).pollInterval(5, SECONDS)
                .until(DaoUtils.countMatchingCallable(
                     getDaoFactory().getDao(MinionDaoHibernate.class),
                     new CriteriaBuilder(OnmsMinion.class)
                         .gt("lastUpdated", startOfTest)
                         .eq("location", "MINION")
                         .toCriteria()
                     ),
                     is(1)
                 );
        }

        for (int i = 0; i < 2; i++) {
            restartContainer(ContainerAlias.OPENNMS);

            // Reset the startOfTest timestamp
            startOfTest = new Date();

            await().atMost(240, SECONDS).pollInterval(5, SECONDS)
                .until(DaoUtils.countMatchingCallable(
                     getDaoFactory().getDao(MinionDaoHibernate.class),
                     new CriteriaBuilder(OnmsMinion.class)
                         .gt("lastUpdated", startOfTest)
                         .eq("location", "MINION")
                         .toCriteria()
                     ),
                     is(1)
                 );
        }

        for (int i = 0; i < 1; i++) {
            restartContainer(ContainerAlias.MINION);

            // Reset the startOfTest timestamp
            startOfTest = new Date();

            await().atMost(90, SECONDS).pollInterval(5, SECONDS)
                .until(DaoUtils.countMatchingCallable(
                     getDaoFactory().getDao(MinionDaoHibernate.class),
                     new CriteriaBuilder(OnmsMinion.class)
                         .gt("lastUpdated", startOfTest)
                         .eq("location", "MINION")
                         .toCriteria()
                     ),
                     is(1)
                 );
        }
    }

