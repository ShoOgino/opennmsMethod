    /**
     * This test will send syslog messages and verify that they have been processed into
     * Elasticsearch records.
     */
    @Test
    @Ignore
    public void testElasticsearchSyslogs() throws Exception {
        Date startOfTest = new Date();
        int numMessages = 1000000;
        int packetsPerSecond = 9000;

        // Install the Kafka syslog and trap handlers on the Minion system
        InetSocketAddress minionSshAddr = minionSystem.getServiceAddress(ContainerAlias.MINION, 8201);
        InetSocketAddress opennmsSshAddr = minionSystem.getServiceAddress(ContainerAlias.OPENNMS, 8101);
        InetSocketAddress kafkaAddress = minionSystem.getServiceAddress(ContainerAlias.KAFKA, 9092);
        InetSocketAddress zookeeperAddress = minionSystem.getServiceAddress(ContainerAlias.KAFKA, 2181);

        try (final SshClient sshClient = new SshClient(minionSshAddr, "admin", "admin")) {
            PrintStream pipe = sshClient.openShell();
            pipe.println("config:edit org.opennms.netmgt.syslog.handler.kafka");
            // Set the IP address for Kafka to the address of the Docker host
            pipe.println("config:property-set kafkaAddress " + InetAddress.getLocalHost().getHostAddress() + ":" + kafkaAddress.getPort());
            pipe.println("config:update");
            // Uninstall all of the syslog and trap features with ActiveMQ handlers
            pipe.println("feature:uninstall -v opennms-syslogd-listener-camel-netty opennms-trapd-listener opennms-syslogd-handler-minion opennms-trapd-handler-minion");
            // Reinstall all of the syslog and trap features with Kafka handlers
            pipe.println("feature:install -v opennms-syslogd-listener-camel-netty opennms-trapd-listener opennms-syslogd-handler-kafka opennms-trapd-handler-kafka");
            pipe.println("feature:list -i");
            pipe.println("list");
            pipe.println("logout");
            try {
                await().atMost(2, MINUTES).until(sshClient.isShellClosedCallable());
            } finally {
                LOG.info("Karaf output:\n{}", sshClient.getStdout());
            }
        }

        try (final SshClient sshClient = new SshClient(opennmsSshAddr, "admin", "admin")) {
            PrintStream pipe = sshClient.openShell();
            // Configure and install the Elasticsearch event forwarder
            pipe.println("config:edit org.opennms.features.elasticsearch.eventforwarder");
            // Set the IP address for Elasticsearch to the address of the Docker host
            pipe.println("config:propset elasticsearchIp " + InetAddress.getLocalHost().getHostAddress());
            pipe.println("config:update");
            pipe.println("features:install opennms-elasticsearch-event-forwarder");
            pipe.println("features:list -i");

            // Configure and install the  Kafka syslog and trap handlers on the OpenNMS system
            pipe.println("config:edit org.opennms.netmgt.syslog.handler.kafka.default");
            // Set the IP address for Kafka to the address of the Docker host
            pipe.println("config:propset kafkaAddress " + InetAddress.getLocalHost().getHostAddress() + ":" + kafkaAddress.getPort());
            // Set the IP address for Zookeeper to the address of the Docker host
            pipe.println("config:propset zookeeperhost " + InetAddress.getLocalHost().getHostAddress());
            pipe.println("config:propset zookeeperport " + zookeeperAddress.getPort());
            pipe.println("config:propset consumerstreams " + 1);
            pipe.println("config:update");
            pipe.println("features:install opennms-syslogd-handler-kafka-default opennms-trapd-handler-kafka-default");
            pipe.println("features:list -i");
            pipe.println("logout");
            try {
                await().atMost(2, MINUTES).until(sshClient.isShellClosedCallable());
            } finally {
                LOG.info("Karaf output:\n{}", sshClient.getStdout());
            }
        }

        final String sender = minionSystem.getContainerInfo(ContainerAlias.SNMPD).networkSettings().ipAddress();

        // Wait for the minion to show up
        await().atMost(90, SECONDS).pollInterval(5, SECONDS)
            .until(DaoUtils.countMatchingCallable(
                 this.daoFactory.getDao(MinionDaoHibernate.class),
                 new CriteriaBuilder(OnmsMinion.class)
                     .gt("lastUpdated", startOfTest)
                     .eq("location", "MINION")
                     .toCriteria()
                 ),
                 is(1)
             );

        LOG.info("Warming up syslog routes by sending 100 packets");

        // Warm up the routes
        SyslogTest.sendMessage(sender, 100);

        for (int i = 0; i < 10; i++) {
            LOG.info("Slept for " + i + " seconds");
            Thread.sleep(1000);
        }

        LOG.info("Resetting statistics");

        // Reset route statistics on Minion
        try (final SshClient sshClient = new SshClient(minionSshAddr, "admin", "admin")) {
            PrintStream pipe = sshClient.openShell();

            // Syslog sender
            pipe.println("camel:route-reset-stats syslogListen");
            pipe.println("camel:route-reset-stats syslogMarshal");
            pipe.println("camel:route-reset-stats syslogSendKafka");

            // Trap sender
            pipe.println("camel:route-reset-stats trapMarshal");
            pipe.println("camel:route-reset-stats trapSendKafka");

            pipe.println("logout");
            try {
                await().atMost(2, MINUTES).until(sshClient.isShellClosedCallable());
            } finally {
                LOG.info("Karaf output:\n{}", sshClient.getStdout());
            }
        }

        // Reset route statistics on OpenNMS
        try (final SshClient sshClient = new SshClient(opennmsSshAddr, "admin", "admin")) {
            PrintStream pipe = sshClient.openShell();

            // Elasticsearch forwarder
            pipe.println("camel:route-reset-stats alarmsFromOpennms");
            pipe.println("camel:route-reset-stats enrichAlarmsAndEvents");
            pipe.println("camel:route-reset-stats eventsFromOpennms");
            pipe.println("camel:route-reset-stats toElasticsearch");
            pipe.println("camel:route-reset-stats updateElastisearchTemplateMappingRunOnlyOnce");

            // Syslog receiver
            pipe.println("camel:route-reset-stats receiveSyslogConnectionViaKafka");
            pipe.println("camel:route-reset-stats syslogHandler");

            // Trap receiver
            pipe.println("camel:route-reset-stats receiveTrapConnectionViaKafka");
            pipe.println("camel:route-reset-stats trapHandler");

            pipe.println("logout");
            try {
                await().atMost(2, MINUTES).until(sshClient.isShellClosedCallable());
            } finally {
                LOG.info("Karaf output:\n{}", sshClient.getStdout());
            }
        }

        for (int i = 0; i < 30; i++) {
            LOG.info("Slept for " + i + " seconds");
            Thread.sleep(1000);
        }

        // Make sure that this evenly divides into the numMessages
        int chunk = 500;
        int count = 0;
        long start = System.currentTimeMillis();
        // Send ${numMessages} syslog messages
        RateLimiter limiter = RateLimiter.create(packetsPerSecond);
        for (int i = 0; i < (numMessages / chunk); i++) {
            limiter.acquire(chunk);
            SyslogTest.sendMessage(sender, chunk);
            count += chunk;
            if (count % 1000 == 0) {
                long mid = System.currentTimeMillis();
                LOG.info(String.format("Sent %d packets in %d milliseconds", 1000, mid - start));
                start = System.currentTimeMillis();
            }
        }

        Thread.sleep(3600000);

        with().pollInterval(1, SECONDS).await().atMost(30, SECONDS).until(() -> {
            try {
                // Refresh the "opennms-2011.01" index
                ELASTICSEARCH.getClient().admin().indices().prepareRefresh(new IndexNameFunction().apply("opennms", startOfTest)).execute().actionGet();

                // Search for all entries in the index
                SearchResponse response = ELASTICSEARCH.getClient()
                    // Search the index that the event above created
                    .prepareSearch(new IndexNameFunction().apply("opennms", startOfTest)) // opennms-2011.01
                    .setQuery(QueryBuilders.termQuery("eventuei", "uei.opennms.org/vendor/cisco/syslog/SEC-6-IPACCESSLOGP/aclDeniedIPTraffic"))
                    .execute()
                    .actionGet();

                LOG.debug("RESPONSE: {}", response.toString());

                assertEquals("ES search hits was not equal to " + numMessages, numMessages, response.getHits().totalHits());
                assertEquals("Event UEI did not match", "uei.opennms.org/vendor/cisco/syslog/SEC-6-IPACCESSLOGP/aclDeniedIPTraffic", response.getHits().getAt(0).getSource().get("eventuei"));
                //assertEquals("Event IP address did not match", "4.2.2.2", response.getHits().getAt(0).getSource().get("ipaddr"));
            } catch (Throwable e) {
                LOG.warn(e.getMessage(), e);
                return false;
            }
            return true;
        });
    }

