    @Test
    public void canReceiveTraps() {
        Date startOfTest = new Date();

        final InetSocketAddress trapAddr = stack.minion().getNetworkProtocolAddress(NetworkProtocol.SNMP);

        // Connect to the postgresql container
        EventDao eventDao = stack.postgres().dao(EventDaoHibernate.class);

        // Parsing the message correctly relies on the customized syslogd-configuration.xml that is part of the OpenNMS image
        Criteria criteria = new CriteriaBuilder(OnmsEvent.class)
                .eq("eventUei", "uei.opennms.org/generic/traps/SNMP_Warm_Start")
                .ge("eventTime", startOfTest)
                .toCriteria();

        // Send traps to the Minion listener until one makes it through
        await().atMost(5, MINUTES).pollInterval(5, SECONDS)
                .until(() -> {
                    sendTrap(trapAddr);
                    try {
                        await().atMost(30, SECONDS).pollInterval(5, SECONDS)
                                .until(DaoUtils.countMatchingCallable(eventDao, criteria), greaterThanOrEqualTo(1));
                    } catch (final Exception e) {
                        return false;
                    }
                    return true;
                });
    }

