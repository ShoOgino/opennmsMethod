    public static OnmsNode sendNewSuspectEvent(OpenNMSStack stack, boolean isMinion, Date startOfTest)
            throws IOException {

        Event minionEvent = new Event();
        minionEvent.setUei("uei.opennms.org/internal/discovery/newSuspect");
        minionEvent.setHost(SENDER_IP);
        minionEvent.setInterface(SENDER_IP);
        minionEvent.setInterfaceAddress(Inet4Address.getByName(SENDER_IP));
        minionEvent.setSource("system-test");
        minionEvent.setSeverity("4");
        if (isMinion) {
            Parm parm = new Parm();
            parm.setParmName("location");
            Value minion = new Value(stack.minion().getLocation());
            parm.setValue(minion);
            List<Parm> parms = new ArrayList<>();
            parms.add(parm);
            minionEvent.setParmCollection(parms);
        }
        stack.opennms().getRestClient().sendEvent(minionEvent);

        EventDao eventDao = stack.postgres().dao(EventDaoHibernate.class);
        NodeDao nodeDao = stack.postgres().dao(NodeDaoHibernate.class);

        Criteria criteria = new CriteriaBuilder(OnmsEvent.class)
                .eq("eventUei", EventConstants.NEW_SUSPECT_INTERFACE_EVENT_UEI).ge("eventTime", startOfTest)
                .eq("ipAddr", Inet4Address.getByName(SENDER_IP)).toCriteria();

        await().atMost(1, MINUTES).pollInterval(10, SECONDS).until(DaoUtils.countMatchingCallable(eventDao, criteria),
                greaterThan(0));

        final OnmsNode onmsNode = await().atMost(1, MINUTES).pollInterval(5, SECONDS)
                .until(DaoUtils.findMatchingCallable(nodeDao, new CriteriaBuilder(OnmsNode.class).eq("label", SENDER_IP)
                        .ge("createTime", startOfTest).toCriteria()), notNullValue());

        assertNotNull(onmsNode);

        if (isMinion) {
            assertThat(onmsNode.getLocation().getLocationName(), is(stack.minion().getLocation()));
        }

        LOG.info("New suspect event has been sent and node has been created for IP : {}", SENDER_IP);
        return onmsNode;
    }

