    public static OnmsNode addRequisition(InetSocketAddress opennmsHttp, boolean isMinion, Date startOfTest) {

        RestClient client = new RestClient(opennmsHttp);
        Requisition requisition = new Requisition("telemetry");
        List<RequisitionInterface> interfaces = new ArrayList<>();
        RequisitionInterface requisitionInterface = new RequisitionInterface();
        requisitionInterface.setIpAddr("192.168.0.1");
        requisitionInterface.setManaged(true);
        requisitionInterface.setSnmpPrimary(PrimaryType.PRIMARY);
        interfaces.add(requisitionInterface);
        RequisitionNode node = new RequisitionNode();
        String label = "nexus9k";
        node.setNodeLabel(label);
        node.setForeignId("nxos");
        node.setInterfaces(interfaces);
        if (isMinion) {
            // For a requisition, foreignId needs to be unique, change foreignId
            node.setLocation("MINION");
            node.setForeignId("nexus9k");
            // Change label so that node matches with foreignId
            label = "nxos";
            node.setNodeLabel(label);
        }
        requisition.insertNode(node);
        client.addOrReplaceRequisition(requisition);
        client.importRequisition("telemetry");

        InetSocketAddress pgsql = m_testEnvironment.getServiceAddress(ContainerAlias.POSTGRES, 5432);
        HibernateDaoFactory daoFactory = new HibernateDaoFactory(pgsql);
        NodeDao nodeDao = daoFactory.getDao(NodeDaoHibernate.class);

        final OnmsNode onmsNode = await().atMost(3, MINUTES).pollInterval(30, SECONDS)
                .until(DaoUtils.findMatchingCallable(nodeDao, new CriteriaBuilder(OnmsNode.class)
                        .ge("createTime", startOfTest).eq("label", label).toCriteria()), notNullValue());

        assertNotNull(onmsNode);

        return onmsNode;

    }

