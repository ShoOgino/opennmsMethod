    @Test
	public void minionHeartBeatTestForLastUpdated() {

		final String fs = "Minions";
		final String fid = stack.minion().getId();
		final String location = stack.minion().getLocation();

		final Date startOfTest = new Date();
		final MinionDao minionDao = stack.postgres().dao(MinionDaoHibernate.class);
		final NodeDao nodeDao = stack.postgres().dao(NodeDaoHibernate.class);

		// The heartbeat runs every minute so if we miss the first one, poll long enough
		// to catch the next one
		await().atMost(90, SECONDS)
			   .pollInterval(5, SECONDS)
			   .until(DaoUtils.countMatchingCallable(minionDao, new CriteriaBuilder(OnmsMinion.class)
															 .ge("lastUpdated", startOfTest)
															 .toCriteria()), greaterThan(0));

		await().atMost(180, SECONDS)
			   .pollInterval(5, SECONDS)
			   .until(DaoUtils.countMatchingCallable(nodeDao, new CriteriaBuilder(OnmsNode.class)
															 .eq("foreignSource", fs)
															 .eq("foreignId", fid)
															 .toCriteria()), equalTo(1));

		assertThat(nodeDao.get(fs + ":" + fid).getLocation().getLocationName(), equalTo(location));
	}

