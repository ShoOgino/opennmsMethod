    @Test
    public void testNewSuspect() throws Exception {
        final Date startOfTest = new Date();

        final String location = stack.minion().getLocation();
        final String sender = OpenNMSContainer.DB_ALIAS;

        // Wait for the minion to show up
        await().atMost(90, SECONDS).pollInterval(5, SECONDS)
               .until(DaoUtils.countMatchingCallable(stack.postgres().dao(MinionDaoHibernate.class),
                                                     new CriteriaBuilder(OnmsMinion.class)
                                                             .gt("lastUpdated", startOfTest)
                                                             .eq("location", location)
                                                             .toCriteria()),
                      is(1));

        // Send the initial message
        SyslogUtils.sendMessage(stack.minion().getSyslogAddress(), sender, 1);

        // Wait for the syslog message
        await().atMost(1, MINUTES).pollInterval(5, SECONDS)
               .until(DaoUtils.countMatchingCallable(stack.postgres().dao(EventDaoHibernate.class),
                                                     new CriteriaBuilder(OnmsEvent.class)
                                                             .eq("eventUei", "uei.opennms.org/vendor/cisco/syslog/SEC-6-IPACCESSLOGP/aclDeniedIPTraffic")
                                                             .ge("eventCreateTime", startOfTest)
                                                             .toCriteria()),
                      is(1));

        //Wait for a new suspect
        try {
            final OnmsEvent event = await()
                    .atMost(1, MINUTES).pollInterval(5, SECONDS)
                    .until(DaoUtils.findMatchingCallable(stack.postgres().dao(EventDaoHibernate.class),
                            new CriteriaBuilder(OnmsEvent.class)
                                    .eq("eventUei", "uei.opennms.org/internal/discovery/newSuspect")
                                    .ge("eventTime", startOfTest)
                                    .isNull("node")
                                    .toCriteria()),
                            notNullValue());
            assertThat(event.getDistPoller().getLocation(), is(location));
        } catch (Exception e) {
            Thread.sleep(TimeUnit.DAYS.toMillis(1));
        }

        // Wait for a node to be added
        await().atMost(1, MINUTES).pollInterval(5, SECONDS)
                .until(DaoUtils.findMatchingCallable(stack.postgres().dao(EventDaoHibernate.class),
                        new CriteriaBuilder(OnmsEvent.class)
                                .eq("eventUei", "uei.opennms.org/nodes/nodeAdded")
                                .ge("eventTime", startOfTest)
                                .toCriteria()),
                        notNullValue());

        // Send the second message
        SyslogUtils.sendMessage(stack.minion().getSyslogAddress(), sender, 1);

        // Wait for the second message with the node assigned
        final OnmsEvent eventWithNode = await().atMost(1, MINUTES).pollInterval(5, SECONDS)
                .until(DaoUtils.findMatchingCallable(stack.postgres().dao(EventDaoHibernate.class),
                        new CriteriaBuilder(OnmsEvent.class)
                                .eq("eventUei", "uei.opennms.org/vendor/cisco/syslog/SEC-6-IPACCESSLOGP/aclDeniedIPTraffic")
                                .ge("eventCreateTime", startOfTest)
                                .isNotNull("node")
                                .toCriteria()),
                        notNullValue());
    }

