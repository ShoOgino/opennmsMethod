    @Test
    public void canDiscoverRemoteNodes() throws IOException, InterruptedException {
        Date startOfTest = new Date();

        final HttpHost opennmsHttpHost = new HttpHost(stack.opennms().getContainerIpAddress(), stack.opennms().getWebPort());

        HttpClient instance = HttpClientBuilder.create()
                .setRedirectStrategy(new LaxRedirectStrategy()) // Ignore the 302 response to the POST
                .build();

        Executor executor = Executor.newInstance(instance)
                .auth(opennmsHttpHost, OpenNMSContainer.ADMIN_USER, OpenNMSContainer.ADMIN_PASSWORD)
                .authPreemptive(opennmsHttpHost);

        // Configure Discovery with the specific address of our Tomcat server
        // No REST endpoint is currently available to configure the Discovery daemon
        // so we resort to POSTin nasty form data
        executor.execute(Request.Post(String.format("http://%s:%d/opennms/admin/discovery/actionDiscovery?action=AddSpecific",
                opennmsHttpHost.getHostName(), opennmsHttpHost.getPort()))
            .bodyForm(Form.form()
                    .add("specificipaddress", stack.opennms().getContainerIpAddress())
                    .add("specifictimeout", "2000")
                    .add("specificretries", "1")
                    .add("initialsleeptime", "30000")
                    .add("restartsleeptime", "86400000")
                    .add("foreignsource", "NODES")
                    .add("location", stack.minion().getLocation())
                    .add("retries", "1")
                    .add("timeout", "2000")
                    .build())).returnContent();

        executor.execute(Request.Post(String.format("http://%s:%d/opennms/admin/discovery/actionDiscovery?action=SaveAndRestart",
                opennmsHttpHost.getHostName(), opennmsHttpHost.getPort()))
            .bodyForm(Form.form()
                    .add("initialsleeptime", "1")
                    .add("restartsleeptime", "86400000")
                    .add("foreignsource", "NODES")
                    .add("location", stack.minion().getLocation())
                    .add("retries", "1")
                    .add("timeout", "2000")
                    .build())).returnContent();

        HibernateDaoFactory daoFactory = stack.postgres().getDaoFactory();
        EventDao eventDao = daoFactory.getDao(EventDaoHibernate.class);

        Criteria criteria = new CriteriaBuilder(OnmsEvent.class)
                .eq("eventUei", EventConstants.NEW_SUSPECT_INTERFACE_EVENT_UEI)
                .ge("eventTime", startOfTest)
                .toCriteria();

        await().atMost(1, MINUTES).pollInterval(10, SECONDS)
                .until(DaoUtils.countMatchingCallable(eventDao, criteria), greaterThan(0));
    }

