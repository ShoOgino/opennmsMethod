    private static void installFeaturesOnOpenNMS(InetSocketAddress opennmsSshAddr, InetSocketAddress kafkaAddress, InetSocketAddress zookeeperAddress, boolean useEsRest) throws Exception {
        try (final SshClient sshClient = new SshClient(opennmsSshAddr, "admin", "admin")) {
            PrintStream pipe = sshClient.openShell();

            if (useEsRest) {
                // Configure and install the Elasticsearch REST event forwarder
                pipe.println("config:edit org.opennms.plugin.elasticsearch.rest.forwarder");
                pipe.println("config:propset logAllEvents true");
                pipe.println("config:update");
                pipe.println("features:install opennms-es-rest");
            } else {
                // Configure and install the Elasticsearch event forwarder
                pipe.println("config:edit org.opennms.features.elasticsearch.eventforwarder");
                // Set the IP address for Elasticsearch to the address of the Docker host
                pipe.println("config:propset elasticsearchIp " + InetAddress.getLocalHost().getHostAddress());
                pipe.println("config:propset logAllEvents true");
                pipe.println("config:update");
                pipe.println("features:install opennms-elasticsearch-event-forwarder");
            }


            // Configure and install the  Kafka syslog and trap handlers on the OpenNMS system
            pipe.println("config:edit org.opennms.netmgt.syslog.handler.kafka.default");
            // Set the IP address for Kafka to the address of the Docker host
            pipe.println("config:propset kafkaAddress " + InetAddress.getLocalHost().getHostAddress() + ":" + kafkaAddress.getPort());
            // Set the IP address for Zookeeper to the address of the Docker host
            pipe.println("config:propset zookeeperhost " + InetAddress.getLocalHost().getHostAddress());
            pipe.println("config:propset zookeeperport " + zookeeperAddress.getPort());
            pipe.println("config:propset consumerstreams " + 1);
            pipe.println("config:update");
            pipe.println("features:install opennms-syslogd-handler-kafka-default opennms-trapd-handler-kafka-default");
            pipe.println("features:list -i");
            // Set the log level to INFO
            pipe.println("log:set INFO");
            pipe.println("logout");
            try {
                await().atMost(2, MINUTES).until(sshClient.isShellClosedCallable());
            } finally {
                LOG.info("Karaf output:\n{}", sshClient.getStdout());
            }
        }
    }

