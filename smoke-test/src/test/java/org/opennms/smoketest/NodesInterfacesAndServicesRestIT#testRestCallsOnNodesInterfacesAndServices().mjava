    @Test
    public void testRestCallsOnNodesInterfacesAndServices() {
        // Create a node
        OnmsNode node = new OnmsNode();
        node.setLabel("node1");
        node.setType(OnmsNode.NodeType.ACTIVE);
        // Set foreignSource and foreignId to use it as nodeCriteria
        node.setForeignSource("test");
        node.setForeignId("node1");
        // Verify that node was added
        Response response = restClient.addNode(node);
        assertEquals(201, response.getStatus());
        node = restClient.getNode("test:node1");
        assertEquals("node1", node.getLabel());
        // Add Interface to node
        OnmsIpInterface ipInterface = new OnmsIpInterface();
        ipInterface.setNode(node);
        ipInterface.setIpAddress(InetAddressUtils.getInetAddress("192.168.1.1"));
        ipInterface.setIpHostName("192.168.1.1");
        // Verify that interface (192.168.1.1) was added
        response = restClient.addInterface("test:node1", ipInterface);
        assertEquals(201, response.getStatus());
        // Add another Interface to node
        OnmsIpInterface ipInterface2 = new OnmsIpInterface();
        ipInterface2.setNode(node);
        ipInterface2.setIpAddress(InetAddressUtils.getInetAddress("192.168.1.2"));
        ipInterface2.setIpHostName("192.168.1.2");
        // Verify that interface2 (192.168.1.2) was added
        response = restClient.addInterface("test:node1", ipInterface2);
        assertEquals(201, response.getStatus());
        ipInterface2 = restClient.getInterface("test:node1", "192.168.1.2");
        assertEquals(node.getId(), ipInterface2.getNode().getId());
        assertEquals("192.168.1.2", ipInterface2.getIpHostName());
        // Delete interface (192.168.1.2)
        response = restClient.deleteInterface("test:node1", "192.168.1.2");
        assertEquals(204, response.getStatus());
        // Verify that interface2 (192.168.1.2) was deleted
        response = restClient.getResponseForInterface("test:node1", "192.168.1.2");
        assertEquals(404, response.getStatus());
        // Add services on interface (192.168.1.1)
        OnmsMonitoredService service = new OnmsMonitoredService();
        OnmsServiceType serviceType = new OnmsServiceType();
        serviceType.setName("HTTP");
        service.setServiceType(serviceType);
        // Verify that service http was added 
        response = restClient.addService("test:node1", "192.168.1.1", service);
        assertEquals(201, response.getStatus());
        // Add another service on interface (192.168.1.1)
        OnmsMonitoredService service2 = new OnmsMonitoredService();
        OnmsServiceType serviceType2 = new OnmsServiceType();
        serviceType2.setName("SSH");
        service2.setServiceType(serviceType2);
        // Verify that service https was added 
        response = restClient.addService("test:node1", "192.168.1.1", service2);
        assertEquals(201, response.getStatus());
        // Delete http service 
        response = restClient.deleteService("test:node1", "192.168.1.1", "HTTP");
        assertEquals(204, response.getStatus());
        // Delete https service 
        response = restClient.deleteService("test:node1", "192.168.1.1", "SSH");
        assertEquals(204, response.getStatus());
/*        // Delete interface (192.168.1.1)
        response = restClient.deleteInterface("test:node1", "192.168.1.1");
        assertEquals(204, response.getStatus());*/
        // Verify that interface (192.168.1.1) was deleted
        response = restClient.getResponseForInterface("test:node1", "192.168.1.1");
        assertEquals(400, response.getStatus()); // Since node doesn't exist, responde code is 400
        // Verify that node also gets deleted
        response = restClient.getResponseForNode("test:node1");
        assertEquals(404, response.getStatus());
    }

