    @Test
    public void verifyNodeSearch() {
        // Set up test data
        createRequisition();
        createGraphMLAndWaitUntilDone(graphmlDocument);

        // Verify suggestions
        final String response = given().log().ifValidationFails()
                .accept(ContentType.JSON)
                .params("s", "Node A")
                .get("/search/suggestions/{namespace}", "acme:markets")
                .then().log().ifValidationFails()
                .statusCode(200)
                .contentType(ContentType.JSON)
                .content("[0].context", Matchers.is("Node"))
                .content("[0].label", Matchers.is("Node A"))
                .content("[0].provider", Matchers.is("NodeSearchProvider"))
                .content("", Matchers.hasSize(1))
                .extract().response().asString();
        final JSONArray result = new JSONArray(new JSONTokener(response));
        assertThat(result.length(), Matchers.is(1));
        final String id = result.getJSONObject(0).getString("id");
        assertNotNull(id);

        // Verify resolution
        given().log().ifValidationFails()
                .params("providerId", "NodeSearchProvider")
                .params("criteria", id)
                .accept(ContentType.JSON)
                .get("/search/results/{namespace}/", "acme:markets")
                .then().log().ifValidationFails()
                .statusCode(200)
                .contentType(ContentType.JSON)
                .content("[0].namespace", Matchers.is("acme:markets"))
                .content("[0].id", Matchers.is("north.2"))
                .content("", Matchers.hasSize(1));
    }

