    @Test
    public void verifyNodeEnrichment() throws InterruptedException {
        // Set up test data
        createRequisition();
        createGraphMLAndWaitUntilDone(graphmlDocument);

        // Fetch data
        final JSONObject query = new JSONObject()
                .put("semanticZoomLevel", 0)
                .put("verticesInFocus", new JSONArray().put("north.1").put("north.2").put("north.3"));
        given().log().ifValidationFails()
                .body(query.toString())
                .contentType(ContentType.JSON)
                .post(CONTAINER_ID + "/{namespace}", "acme:markets")
                .then()
                .log().ifValidationFails()
                .contentType(ContentType.JSON)
                .body("id", Matchers.is("markets"))
                .body("namespace", Matchers.is("acme:markets"))
                .body("vertices", Matchers.hasSize(3))
                .body("edges", Matchers.hasSize(0))
                .body("vertices[0].id", Matchers.is("north.1"))
                .body("vertices[1].id", Matchers.is("north.2"))
                .body("vertices[1].nodeInfo.foreignSource", Matchers.is(REQUISITION_NAME))
                .body("vertices[1].nodeInfo.foreignId", Matchers.is("node1"))
                .body("vertices[1].nodeInfo.label", Matchers.is("Node A"))
                .body("vertices[1].nodeInfo.categories", Matchers.hasItems("Test", "Server"))
                .body("vertices[2].id", Matchers.is("north.3"))
                .body("vertices[2].nodeInfo.foreignSource", Matchers.is(REQUISITION_NAME))
                .body("vertices[2].nodeInfo.foreignId", Matchers.is("node2"))
                .body("vertices[2].nodeInfo.label", Matchers.is("Node B"))
                .body("vertices[2].nodeInfo.categories", Matchers.hasItems("Test", "Node"));
    }

