    @Test
    public void verifyStatusEnrichmentApplication() throws InterruptedException {
        final String applicationName = "StatusEnrichmentTest";

        final InetAddress localhost = InetAddressUtils.getInetAddress("127.0.0.1");
        final String perspectiveKey = "perspective";
        final String perspectiveName = "Default";

        final String testServiceName = "ICMP";
        final String minorSeverity = OnmsSeverity.MINOR.getLabel();
        final String criticalSeverity = OnmsSeverity.CRITICAL.getLabel();

        // Set up test data
        createRequisition();

        adminPage();
        findElementByLink("Manage Applications").click();

        // create the application
        waitForElement(By.name("newApplicationName"));
        enterText(By.name("newApplicationName"), applicationName);
        clickElement(By.cssSelector("form[action='admin/applications.htm'] > button"));

        // browse to the application page
        clickElement(By.linkText(applicationName));

        clickElement(By.linkText("Edit application"));
        // make sure the forms have loaded
        waitForElement(By.id("input_toAdd"));

        // add the services
        clickElement(By.xpath("//select[@id='input_toAdd']/option[contains(text(), 'Node A / 127.0.0.1 / ICMP')]"));
        clickElement(By.id("input_addService"));
        clickElement(By.xpath("//select[@id='input_toAdd']/option[contains(text(), 'Node B / 127.0.0.1 / ICMP')]"));
        clickElement(By.id("input_addService"));

        // add the default location
        clickElement(By.xpath("//select[@id='input_locationAdd']/option[@value='Default']"));
        clickElement(By.id("input_addLocation"));

        // get the application
        final List<OnmsApplication> applications = restClient.getApplications();
        System.err.println("applications=" + applications);
        final Optional<OnmsApplication> app = applications.stream().filter(a -> applicationName.equals(a.getName())).findFirst();
        if (!app.isPresent()) {
            throw new IllegalStateException("Failed to retrieve application '" + applicationName + "'");
        }
        final OnmsApplication application = app.get();

        // Force application provider to reload (otherwise we have to wait until cache is invalidated)
        awaitForApplicationStatus(application, "Normal");

        final List<OnmsNode> nodes = restClient.getNodes();
        final int nodeId1 = nodes.stream().filter(n -> "Node A".equals(n.getLabel())).findFirst().get().getId();
        final int nodeId2 = nodes.stream().filter(n -> "Node B".equals(n.getLabel())).findFirst().get().getId();

        // Fetch data nothing down
        final JSONObject query = new JSONObject()
                .put("semanticZoomLevel", 1)
                .put("verticesInFocus", Lists.newArrayList(String.format("Application:%s", application.getId())));
        given().log().ifValidationFails()
                .body(query.toString())
                .contentType(ContentType.JSON)
                .post("{container_id}/{namespace}", "application", "application")
                .then()
                .log().ifValidationFails()
                .statusCode(200)
                .contentType(ContentType.JSON)
                .body("vertices", Matchers.hasSize(3))
                .body("vertices[0].status.severity", Matchers.is("Normal"))
                .body("vertices[1].status.severity", Matchers.is("Normal"))
                .body("vertices[2].status.severity", Matchers.is("Normal"))
                .body("vertices[0].status.count", Matchers.is(0))
                .body("vertices[1].status.count", Matchers.is(0))
                .body("vertices[2].status.count", Matchers.is(0));

        // Prepare simulated outages
        final Event nodeLostServiceEvent = new EventBuilder(EventConstants.PERSPECTIVE_NODE_LOST_SERVICE_UEI, getClass().getSimpleName())
                .setNodeid(nodeId1)
                .setInterface(localhost)
                .setService(testServiceName)
                .setParam(perspectiveKey, perspectiveName)
                .setSeverity(minorSeverity)
                .getEvent();
        final Event nodeLostServiceEventApp2 = new EventBuilder(EventConstants.PERSPECTIVE_NODE_LOST_SERVICE_UEI, getClass().getSimpleName())
                .setNodeid(nodeId2)
                .setInterface(localhost)
                .setService(testServiceName)
                .setParam(perspectiveKey, perspectiveName)
                .setSeverity(criticalSeverity)
                .getEvent();

        getDriver().get(getBaseUrlInternal() + "opennms/topology");
        waitForElement(By.xpath("//span[@class='v-menubar-menuitem-caption' and contains(text(), 'View')]"));

        clickElement(By.xpath("//span[@class='v-menubar-menuitem-caption' and contains(text(), 'View')]"));
        clickElement(By.xpath("//span[@class='v-menubar-menuitem-caption' and contains(text(), 'Application')]"));

        // Waiting for perspective poller to detect services as UP
        await().atMost(2, MINUTES)
               .until(() -> this.restClient.getEventsForNodeByEventUei(nodeId1, EventConstants.PERSPECTIVE_NODE_REGAINED_SERVICE_UEI).getTotalCount(),
                      Matchers.greaterThan(0));

        await().atMost(2, MINUTES)
               .until(() -> this.restClient.getEventsForNodeByEventUei(nodeId2, EventConstants.PERSPECTIVE_NODE_REGAINED_SERVICE_UEI).getTotalCount(),
                      Matchers.greaterThan(0));

        // Take service down, reload graph and verify
        restClient.sendEvent(nodeLostServiceEvent);
        awaitForApplicationStatus(application, "Minor");

        final Response response = getApplicationViewResponse(query.toString());
        final ApplicationViewResponse applicationViewResponse = new ApplicationViewResponse(response);
        assertThat(applicationViewResponse.length(), Matchers.is(3));
        verifyStatus(applicationViewResponse.getVertexByApplicationId(application.getId()), "Minor", 1);
        verifyStatus(applicationViewResponse.getVertexByNodeId(nodeId1), "Minor", 1);
        verifyStatus(applicationViewResponse.getVertexByNodeId(nodeId2), "Normal", 0);

        // Take service down with severity higher than Major
        restClient.sendEvent(nodeLostServiceEventApp2);
        awaitForApplicationStatus(application, "Critical");

        final Response response2 = getApplicationViewResponse(query.toString());
        final ApplicationViewResponse applicationViewResponse2 = new ApplicationViewResponse(response2);
        assertThat(applicationViewResponse2.length(), Matchers.is(3));
        verifyStatus(applicationViewResponse2.getVertexByApplicationId(application.getId()), "Critical", 2);
        verifyStatus(applicationViewResponse2.getVertexByNodeId(nodeId1), "Minor", 1);
        verifyStatus(applicationViewResponse2.getVertexByNodeId(nodeId2), "Critical", 1); // we expect the same severity as the interface with the highest severity
    }

