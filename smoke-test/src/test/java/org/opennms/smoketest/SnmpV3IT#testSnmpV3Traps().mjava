    @Test
    public void testSnmpV3Traps() {
        Date startOfTest = new Date();
        final InetSocketAddress snmpAddress = stack.opennms().getNetworkProtocolAddress(NetworkProtocol.SNMP);
        HibernateDaoFactory daoFactory = stack.postgres().getDaoFactory();
        AlarmDao alarmDao = daoFactory.getDao(AlarmDaoHibernate.class);

        Criteria criteria = new CriteriaBuilder(OnmsAlarm.class)
                .eq("uei", "uei.opennms.org/generic/traps/EnterpriseDefault").ge("lastEventTime", startOfTest)
                .toCriteria();

        try {
            executor.scheduleWithFixedDelay(() -> {
                try {
                    sendV3Trap(snmpAddress);
                } catch (Exception e) {
                    LOG.error("Exception while sending trap.", e);
                }
            }, 0, 5, TimeUnit.SECONDS);
            // Check if there is at least one alarm
            await().atMost(30, SECONDS).pollInterval(5, SECONDS).pollDelay(5, SECONDS)
                    .until(DaoUtils.countMatchingCallable(alarmDao, criteria), greaterThanOrEqualTo(1));
            // Check if multiple traps are getting received not just the first one
            await().atMost(30, SECONDS).pollInterval(5, SECONDS).pollDelay(5, SECONDS)
                    .until(DaoUtils.findMatchingCallable(alarmDao, new CriteriaBuilder(OnmsAlarm.class)
                                    .eq("uei", "uei.opennms.org/generic/traps/EnterpriseDefault").ge("counter", 3).toCriteria()),
                            notNullValue());
        } finally {
            // Make sure we always shutdown the thread pool, even when the test fails
            executor.shutdownNow();
        }
    }

