    public void verifyFlows() throws IOException {
        final String elasticRestUrl = String.format("http://%s:%d", elasticRestAddress.getHostString(), elasticRestAddress.getPort());

        // Build the Elastic Rest Client
        final JestClientFactory factory = new JestClientFactory();
        factory.setHttpClientConfig(new HttpClientConfig.Builder(elasticRestUrl)
                .connTimeout(5000)
                .readTimeout(10000)
                .multiThreaded(true).build());

        try {
            client = factory.getObject();
            runBefore.forEach(rb -> rb.accept(this));

            // Group the packets by protocol
            final Map<NetflowVersion, List<Delivery>> delivieriesByProtocol = deliveries.stream()
                                                                                        .collect(Collectors.groupingBy(delivery -> delivery.packet.getNetflowVersion()));
            LOG.info("Verifying flows. Expecting to persist {} flows across protocols: {}",
                    totalFlowCount, delivieriesByProtocol.keySet());

            // Send all the packets once
            for (Delivery delivery : deliveries) {
                LOG.info("Sending packet payload from {} containing {} flows to: {}",
                        delivery.packet.getPayload(), delivery.packet.getFlowCount(),
                        delivery.sender);
                delivery.send();
            }

            for (NetflowVersion netflowVersion : delivieriesByProtocol.keySet()) {
                final List<Delivery> deliveriesForProtocol = delivieriesByProtocol.get(netflowVersion);
                final int numFlowsExpected = deliveriesForProtocol.stream().mapToInt(delivery -> delivery.packet.getFlowCount()).sum();

                LOG.info("Verifying flows for {}", netflowVersion);
                verify(() -> {
                    // Verify directly in Elasticsearch that the flows have been created
                    final String query = "{\"query\":{\"term\":{\"netflow.version\":{\"value\":"
                            + gson.toJson(netflowVersion)
                            + "}}}}";
                    LOG.info("Executing query: {}", query);
                    final SearchResult response = client.execute(new Search.Builder(query)
                            .addIndex("netflow-*")
                            .build());
                    LOG.info("Response {} with {} flow documents: {}", response.isSucceeded() ? "successful" : "failed", SearchResultUtils.getTotal(response), response.getJsonString());
                    final boolean foundAllFlowsForProtocol = response.isSucceeded() && SearchResultUtils.getTotal(response) >= numFlowsExpected;

                    if (!foundAllFlowsForProtocol) {
                        // If we haven't found them all yet, try sending all the packets for this protocol again.
                        // We do this since the flows are UDP packages and aren't 100% reliable.
                        // This test is only concerned that they eventually do make their way into ES.
                        for (Delivery delivery : deliveriesForProtocol) {
                            LOG.info("Sending packet payload from {} containing {} flows to: {}",
                                    delivery.packet.getPayload(), delivery.packet.getFlowCount(),
                                    delivery.sender);
                            delivery.send();
                        }
                    }
                    return foundAllFlowsForProtocol;
                });
            }

            LOG.info("Ensuring that the index template was created...");
            verify(() -> {
                final JestResult result = client.execute(new GetTemplate.Builder(TEMPLATE_NAME).build());
                return result.isSucceeded() && result.getJsonObject().get(TEMPLATE_NAME) != null;
            });

            runAfter.forEach(ra -> ra.accept(this));
        } finally {
            if (client != null) {
                client.close();
            }
        }
    }

