    public FlowTester(InetSocketAddress elasticAddress, InetSocketAddress opennmsWebAddress, List<FlowPacket> packets) {
        this.elasticRestAddress = Objects.requireNonNull(elasticAddress);
        this.packets = Objects.requireNonNull(packets);
        this.totalFlowCount = packets.stream().mapToInt(p -> p.getFlowCount()).sum();

        if (totalFlowCount <= 0) {
            throw new IllegalStateException("Cannot verify flow creation/procession, as total flow count is <= 0, but must be > 0");
        }

        if (opennmsWebAddress != null) {
            final RestClient restclient = new RestClient(opennmsWebAddress);

            // No flows should be present
            runBefore.add(flowTester -> assertEquals(Long.valueOf(0L), restclient.getFlowCount(0L, System.currentTimeMillis())));


            // Verify the flow count via the REST API
            runAfter.add(flowTester -> {
                with().pollInterval(15, SECONDS).await().atMost(1, MINUTES)
                    .until(() -> restclient.getFlowCount(0L, System.currentTimeMillis()), equalTo((long) totalFlowCount));
            });
        }


        if (opennmsWebAddress != null) {
            final RestClient restClient = new RestClient(opennmsWebAddress);

            // No flows should be present
            runBefore.add((flowTester) -> assertEquals(Long.valueOf(0L), restClient.getFlowCount(0L, System.currentTimeMillis())));


            // Verify the flow count via the REST API
            runAfter.add((flowTester) -> with().pollInterval(15, SECONDS).await().atMost(1, MINUTES)
                                     .until(() -> restClient.getFlowCount(0L, System.currentTimeMillis()), equalTo((long) totalFlowCount)));
        }
    }

