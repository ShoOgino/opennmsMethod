        @Override
        protected void waitUntilReady() {
            LOG.info("Waiting for startup to begin.");
            final Path managerLog = Paths.get("/opt", "opennms", "logs", "manager.log");
            await().atMost(2, MINUTES).ignoreExceptions()
                    .until(() -> TestContainerUtils.getFileFromContainerAsString(container, managerLog),
                    containsString("Starter: Beginning startup"));
            LOG.info("OpenNMS has begun starting up.");

            LOG.info("Waiting for OpenNMS REST API...");
            final long timeoutMins = 5;
            final RestClient restClient = container.getRestClient();
            final AtomicReference<String> lastOutput = new AtomicReference<>();
            try {
                await().atMost(timeoutMins, MINUTES)
                        .pollInterval(10, SECONDS)
                        .ignoreExceptions()
                        .until(restClient::getDisplayVersion, notNullValue());
            } catch(ConditionTimeoutException e) {
                LOG.error("OpenNMS did not finish starting after {} minutes. Last output: {}", timeoutMins, lastOutput);
                throw new RuntimeException(e);
            }
            LOG.info("OpenNMS REST API is online.");

            // Wait until all daemons have finished starting up
            // This helps ensure that all of the sockets that should be up and listening i.e. teletrymd flows
            // have been given a chance to bind
            LOG.info("Waiting for startup to complete.");
            await().atMost(3, MINUTES).until(() -> TestContainerUtils.getFileFromContainerAsString(container, managerLog),
                    containsString("Starter: Startup complete"));
            LOG.info("OpenNMS has started.");

            // Defer the health-check (if we do run it) until the system has completely started
            // in order to give all the health checks a chance to load.
            // Only wait for the health-check if Elasticsearch is enabled, since it's
            // currently required to pass.
            if (container.getModel().isElasticsearchEnabled()) {
                LOG.info("Waiting for OpenNMS health check...");
                final InetSocketAddress karafSsh = container.getSshAddress();
                await().atMost(3, MINUTES).pollInterval(5, SECONDS)
                        .until(() -> KarafShellUtils.testHealthCheck(karafSsh));
                LOG.info("Health check passed.");
            }
        }

