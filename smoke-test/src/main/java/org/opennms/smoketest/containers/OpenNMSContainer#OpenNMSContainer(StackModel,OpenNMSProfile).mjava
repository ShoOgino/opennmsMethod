    public OpenNMSContainer(StackModel model, OpenNMSProfile profile) {
        super("horizon");
        this.model = Objects.requireNonNull(model);
        this.profile = Objects.requireNonNull(profile);
        this.overlay = writeOverlay();

        String containerCommand = "-s";
        if (TimeSeriesStrategy.NEWTS.equals(model.getTimeSeriesStrategy())) {
            containerCommand = "-c";
        }

        final Integer[] exposedPorts = new ArrayList<>(networkProtocolMap.values())
                .toArray(new Integer[0]);
        final int[] exposedUdpPorts = networkProtocolMap.entrySet().stream()
                .filter(e -> InternetProtocol.UDP.equals(e.getKey().getIpProtocol()))
                .mapToInt(Map.Entry::getValue)
                .toArray();

        withExposedPorts(exposedPorts)
                .withCreateContainerCmdModifier(cmd -> {
                    final CreateContainerCmd createCmd = (CreateContainerCmd)cmd;
                    TestContainerUtils.setGlobalMemAndCpuLimits(createCmd);
                    // The framework doesn't support exposing UDP ports directly, so we use this hook to map some of the exposed ports to UDP
                    TestContainerUtils.exposePortsAsUdp(createCmd, exposedUdpPorts);
                })
                .withEnv("POSTGRES_HOST", DB_ALIAS)
                .withEnv("POSTGRES_PORT", Integer.toString(PostgreSQLContainer.POSTGRESQL_PORT))
                // User/pass are hardcoded in PostgreSQLContainer but are not exposed
                .withEnv("POSTGRES_USER", "test")
                .withEnv("POSTGRES_PASSWORD", "test")
                .withEnv("OPENNMS_DBNAME", "opennms")
                .withEnv("OPENNMS_DBUSER", "opennms")
                .withEnv("OPENNMS_DBPASS", "opennms")
                // These are expected to be set when using Newts
                // We also set the corresponding roperties explicitly in our overlay
                .withEnv("OPENNMS_CASSANDRA_HOSTNAMES", CASSANDRA_ALIAS)
                .withEnv("OPENNMS_CASSANDRA_KEYSPACE", "newts")
                .withEnv("OPENNMS_CASSANDRA_PORT", Integer.toString(CassandraContainer.CQL_PORT))
                .withEnv("OPENNMS_CASSANDRA_USERNAME", "cassandra")
                .withEnv("OPENNMS_CASSANDRA_USERNAME", "cassandra")
                .withEnv("JAVA_OPTS", "-Xms1536m -Xmx1536m -Djava.security.egd=file:/dev/./urandom")
                .withNetwork(Network.SHARED)
                .withNetworkAliases(ALIAS)
                .withCommand(containerCommand)
                .waitingFor(new WaitForOpenNMS(this))
                .addFileSystemBind(overlay.toString(),
                        "/opt/opennms-overlay", BindMode.READ_ONLY, SelinuxContext.SINGLE);

        // Help make development/debugging easier
        DevDebugUtils.setupMavenRepoBind(this, "/root/.m2/repository");
    }

