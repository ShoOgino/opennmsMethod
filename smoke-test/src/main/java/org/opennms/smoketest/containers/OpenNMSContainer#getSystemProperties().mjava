    public Properties getSystemProperties() {
        final Properties props = new Properties();
        if (IpcStrategy.KAFKA.equals(model.getIpcStrategy())) {
            props.put("org.opennms.core.ipc.sink.strategy", "kafka");
            props.put("org.opennms.core.ipc.sink.kafka.bootstrap.servers", KAFKA_ALIAS + ":9092");
            props.put("org.opennms.core.ipc.rpc.strategy", "kafka");
            props.put("org.opennms.core.ipc.rpc.kafka.bootstrap.servers", KAFKA_ALIAS + ":9092");
        }
        if (IpcStrategy.GRPC.equals(model.getIpcStrategy())) {
            props.put("org.opennms.core.ipc.strategy", "osgi");
        }

        if (TimeSeriesStrategy.RRD.equals(model.getTimeSeriesStrategy())) {
            // Use jrrd2
            props.put("org.opennms.rrd.strategyClass", "org.opennms.netmgt.rrd.rrdtool.MultithreadedJniRrdStrategy");
            props.put("org.opennms.rrd.interfaceJar", "/usr/share/java/jrrd2.jar");
            props.put("opennms.library.jrrd2", "/usr/lib64/libjrrd2.so");
        } else if (TimeSeriesStrategy.NEWTS.equals(model.getTimeSeriesStrategy())) {
            // Use Newts
            props.put("org.opennms.timeseries.strategy", "newts");
            props.put("org.opennms.newts.config.hostname", CASSANDRA_ALIAS);
            props.put("org.opennms.newts.config.port", Integer.toString(CassandraContainer.CQL_PORT));
            props.put("org.opennms.rrd.storeByForeignSource", Boolean.TRUE.toString());
        }
        return props;
    }

