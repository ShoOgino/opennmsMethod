    /**
     * Used to remove a fixed set of known attributes from an XML string.
     *
     * We use this since some of the entity include fields which have no corresponding
     * setters and as a result, cause errors when POSTing to the REST APIs.
     *
     * @param xmlIn xml string
     * @param attributeNames list of attributes to remove
     * @return filtered xml
     */
    protected static String filterAttributesFromXml(String xmlIn, String... attributeNames) {
        try {
            final DocumentBuilderFactory dbfact = DocumentBuilderFactory.newInstance();
            final DocumentBuilder builder = dbfact.newDocumentBuilder();
            final Document doc = builder.parse(new InputSource(new StringReader(xmlIn)));

            final NodeList nodes = doc.getChildNodes();
            for (int i = 0; i < nodes.getLength(); i++) {
                final Node node = nodes.item(i);
                final NamedNodeMap attributes = node.getAttributes();
                for (String attributeName : attributeNames) {
                    if (attributes.getNamedItem(attributeName) != null) {
                        attributes.removeNamedItem(attributeName);
                    }
                }
            }

            final TransformerFactory tf = TransformerFactory.newInstance();
            final Transformer t = tf.newTransformer();
            t.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
            final StringWriter writer = new StringWriter();
            t.transform(new DOMSource(doc), new StreamResult(writer));
            return writer.toString();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

