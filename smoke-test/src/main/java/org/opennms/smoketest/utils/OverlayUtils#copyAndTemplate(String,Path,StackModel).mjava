    public static void copyAndTemplate(String classpathResource, Path target, StackModel model) {
        Jinjava jinjava = new Jinjava();
        Map<String, Object> context = Maps.newHashMap();
        context.put("model", model);

        try {
            // Copy the files from the class-path to the target directory
            FileUtils.copyDirectory(new File(forClasspathResource(classpathResource).getFilesystemPath()), target.toFile());

            // Render any .j2 files
            try (Stream<Path> walk = java.nio.file.Files.walk(target)) {
                walk.map(Path::toString)
                        .filter(f -> FilenameUtils.isExtension(f, "j2"))
                        .forEach(template -> {
                            try {
                                final String templateSource = Files.asCharSource(new File(template), StandardCharsets.UTF_8).read();
                                final String renderedTemplate = jinjava.render(templateSource, context);
                                final String targetFile = FilenameUtils.removeExtension(template);
                                Files.asCharSink(new File(targetFile), StandardCharsets.UTF_8).write(renderedTemplate);
                            } catch (IOException e) {
                                throw new RuntimeException(e);
                            }
                        });
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

