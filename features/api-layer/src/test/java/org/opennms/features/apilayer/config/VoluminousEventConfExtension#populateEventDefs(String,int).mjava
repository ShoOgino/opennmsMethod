    public void populateEventDefs(String ueiBase, int eventCount) {
        for (int i = 0; i < eventCount; i++) {
            final int idx = i;
            final LogMessage logmsg = new LogMessage() {
                @Override
                public String getContent() {
                    return String.format("This is voluminous event %d of %d", idx, eventCount);
                }

                @Override
                public LogMsgDestType getDestination() {
                    return LogMsgDestType.LOGNDISPLAY;
                }
            };
            final List<MaskElement> maskElems = new LinkedList<>();
            maskElems.add(new MaskElement() {
                @Override
                public String getName() {
                    return "id";
                }
                @Override
                public List<String> getValues() {
                    List<String> vals = new ArrayList<>();
                    vals.add(String.format(".1.3.6.1.4.1.5813.%d", idx));
                    return vals;
                }
            });
            final Mask mask = new Mask() {
                @Override
                public List<MaskElement> getMaskElements() {
                    return maskElems;
                }
                @Override
                public List<Varbind> getVarbinds() {
                    return new ArrayList<>();
                }
            };
            final AlarmData alarmData = new AlarmData() {
                @Override
                public String getReductionKey() {
                    return "%uei%:%dpname%:%nodeid%";
                }
                @Override
                public AlarmType getType() {
                    return AlarmType.PROBLEM_WITHOUT_RESOLUTION;
                }
                @Override
                public String getClearKey() {
                    return null;
                }
                @Override
                public boolean isAutoClean() {
                    return false;
                }
                @Override
                public List<UpdateField> getUpdateFields() {
                    return Collections.emptyList();
                }
                @Override
                public ManagedObject getManagedObject() {
                    return null;
                }
            };
            final List<Parameter> params = new ArrayList<>();
            params.add(new Parameter() {
                @Override
                public String getName() {
                    return "eventNumber";
                }
                @Override
                public String getValue() {
                    return String.format("%d", idx);
                }
                @Override
                public boolean shouldExpand() {
                    return false;
                }
            });
            final EventDefinition eventDef = new EventDefinition() {
                @Override
                public int getPriority() {
                    return 1000;
                }
                @Override
                public String getUei() {
                    return String.format("%s%d", ueiBase, idx);
                }
                @Override
                public String getLabel() {
                    return String.format("Test event: VoluminousEvents #%d", idx);
                }
                @Override
                public Severity getSeverity() {
                    return (idx % 2 == 0) ? Severity.WARNING : Severity.CRITICAL;
                }
                @Override
                public String getDescription() {
                    return String.format("Test event #%d for voluminous testing", idx);
                }
                @Override
                public String getOperatorInstructions() {
                    return String.format("Operators should do stuff when they see event number %d. Unless they don't feel like it today.", idx);
                }
                @Override
                public LogMessage getLogMessage() {
                    return logmsg;
                }
                @Override
                public AlarmData getAlarmData() {
                    return alarmData;
                }
                @Override
                public Mask getMask() {
                    return mask;
                }
                @Override
                public List<Parameter> getParameters() {
                    return params;
                }
            };
            eventDefs.add(eventDef);
        }
    }

