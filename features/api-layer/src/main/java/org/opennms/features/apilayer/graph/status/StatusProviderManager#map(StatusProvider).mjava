    @Override
    public EnrichmentProcessor map(final StatusProvider extension) {
        return new EnrichmentProcessor() {

            @Override
            public boolean canEnrich(GenericGraph graph) {
                return extension.canCalculate(graph.getNamespace());
            }

            @Override
            public void enrich(EnrichmentGraphBuilder graphBuilder) {
                graphBuilder.getVertices().forEach(vertex -> {
                    final ImmutableVertex apiVertex = ImmutableVertex
                            .newBuilder(vertex.getNamespace(), vertex.getId())
                            .properties(vertex.getProperties())
                            .build();
                    final StatusInfo apiStatus = extension.calculateStatus(apiVertex);
                    graphBuilder.property(vertex, EnrichedProperties.STATUS, convert(apiStatus));
                });
                graphBuilder.getEdges().forEach(edge -> {
                    final ImmutableEdge apiEdge = ImmutableEdge.newBuilder(edge.getNamespace(), edge.getId(),
                            ImmutableVertexRef.newBuilder(edge.getSource().getNamespace(), edge.getSource().getId()).build(),
                            ImmutableVertexRef.newBuilder(edge.getTarget().getNamespace(), edge.getTarget().getId()).build()
                    ).build();
                    final StatusInfo apiStatus = extension.calculateStatus(apiEdge);
                    graphBuilder.property(edge, EnrichedProperties.STATUS, convert(apiStatus));
                });
            }
        };
    }

