    @Override
    public org.opennms.features.topology.api.topo.EdgeStatusProvider map(LegacyStatusProvider extension) {
        return new org.opennms.features.topology.api.topo.EdgeStatusProvider() {

            @Override
            public String getNamespace() {
                // This is not ideal, but technically the namespace is not required for the StatusProvider
                // So this returns null.
                return null;
            }

            @Override
            public boolean contributesTo(String namespace) {
                return extension.canCalculate(namespace);
            }

            @Override
            public Map<? extends EdgeRef, ? extends Status> getStatusForEdges(BackendGraph graph, Collection<EdgeRef> edges, Criteria[] criteria) {
                final Map<EdgeRef, Status> statusMap = new HashMap<>();
                edges.forEach(edgeRef -> {
                    // edgeRef is an Edge. If that is the case, the EdgeRef is returned casted as an Edge.
                    // However as the edgeRef is not the actual Edge implementation but a cloned version of AbstractEdge, thus not a LegacyEdge.
                    // In order to get the LegacyEdge, the edgeRef must not implement Edge, so here we create a new instanceof EdgeRef
                    // (using AbstractEdgeRef) to get the LegacyEdge reference
                    final EdgeRef actualEdgeRef = new AbstractEdgeRef(edgeRef);
                    final Edge edge = graph.getEdge(actualEdgeRef);
                    if (edge instanceof LegacyEdge) {
                        final LegacyEdge legacyEdge = (LegacyEdge) edge;
                        final VertexRef sourceVertex = legacyEdge.getSource().getVertex();
                        final VertexRef targetVertex = legacyEdge.getTarget().getVertex();
                        final ImmutableEdge apiEdge = ImmutableEdge
                                .newBuilder(
                                        legacyEdge.getNamespace(),
                                        legacyEdge.getId(),
                                        ImmutableVertexRef.newBuilder(sourceVertex.getNamespace(), sourceVertex.getId()).build(),
                                        ImmutableVertexRef.newBuilder(targetVertex.getNamespace(), targetVertex.getId()).build())
                                .properties(legacyEdge.getProperties())
                                .build();
                        final StatusInfo apiStatus = extension.calculateStatus(apiEdge);
                        final Status status = convert(apiStatus);
                        statusMap.put(edgeRef, status);
                    } else {
                        statusMap.put(edgeRef, new DefaultStatus(OnmsSeverity.INDETERMINATE.getLabel(), 0));
                    }
                });
                return statusMap;
            }
        };
    }

