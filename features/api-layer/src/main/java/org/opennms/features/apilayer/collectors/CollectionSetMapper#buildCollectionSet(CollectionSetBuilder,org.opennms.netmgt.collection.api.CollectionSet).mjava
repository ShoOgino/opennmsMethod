    /**
     *  Maps @{@link org.opennms.netmgt.collection.api.CollectionSet} to Integration API @{@link CollectionSet} and builds it.
     */
    @SuppressWarnings("unchecked")
    public CollectionSet buildCollectionSet(CollectionSetBuilder builder, org.opennms.netmgt.collection.api.CollectionSet collectionSet) {

        collectionSet.visit(new CollectionSetVisitor() {
            CollectionSetResourceBuilder resourceBuilder;
            String groupName = null;

            @Override
            public void visitCollectionSet(org.opennms.netmgt.collection.api.CollectionSet set) {

            }

            @Override
            public void visitResource(CollectionResource resource) {
                resourceBuilder = new CollectionSetResourceBuilder();
                if (resource.getResourceTypeName().equals(CollectionResource.RESOURCE_TYPE_NODE)) {
                    resourceBuilder.withResource(buildNodeResource(resource));
                } else if (resource.getResourceTypeName().equals(CollectionResource.RESOURCE_TYPE_IF)) {
                    IpInterfaceResource ipInterfaceResource = new ResourceBuilder()
                            .withInstance(resource.getInstance())
                            .buildIpInterfaceResource(buildNodeResource(resource));
                    resourceBuilder.withResource(ipInterfaceResource);
                } else {
                    GenericTypeResource genericTypeResource = new ResourceBuilder()
                            .withInstance(resource.getInstance())
                            .withType(resource.getResourceTypeName())
                            .buildGenericTypeResource(buildNodeResource(resource));
                    resourceBuilder.withResource(genericTypeResource);
                }
            }

            @Override
            public void visitGroup(AttributeGroup group) {
                groupName = group.getName();
            }

            @Override
            public void visitAttribute(CollectionAttribute attribute) {
                if (attribute.getType().equals(AttributeType.STRING)) {
                    StringAttribute stringAttribute = new AttributeBuilder()
                            .withName(attribute.getName())
                            .withStringValue(attribute.getStringValue())
                            .buildString();
                    resourceBuilder.withStringAttribute(stringAttribute);
                } else {
                    NumericAttribute numericAttribute = new AttributeBuilder()
                            .withName(attribute.getName())
                            .withGroup(groupName)
                            .withType((attribute.getType() == AttributeType.COUNTER) ? NumericAttribute.Type.COUNTER : NumericAttribute.Type.GAUGE)
                            .withNumericValue(attribute.getNumericValue().doubleValue())
                            .buildNumeric();
                    resourceBuilder.withNumericAttribute(numericAttribute);
                }
            }

            @Override
            public void completeAttribute(CollectionAttribute attribute) {

            }

            @Override
            public void completeGroup(AttributeGroup group) {

            }

            @Override
            public void completeResource(CollectionResource resource) {
                builder.withCollectionSetResource(resourceBuilder.build());
            }

            @Override
            public void completeCollectionSet(org.opennms.netmgt.collection.api.CollectionSet set) {
                builder.withTimeStamp(set.getCollectionTimestamp().getTime());
                builder.withStatus(CollectionSet.Status.SUCCEEDED);
            }
        });
        return builder.build();
    }

