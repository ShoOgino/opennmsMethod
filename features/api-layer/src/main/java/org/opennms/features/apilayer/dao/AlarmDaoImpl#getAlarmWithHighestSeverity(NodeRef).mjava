    @Override
    public Optional<Alarm> getAlarmWithHighestSeverity(NodeRef nodeRef) {
        final Criteria criteria = new CriteriaBuilder(OnmsAlarm.class)
                .alias("node", "node")
                .orderBy("severity", false)
                .and(Restrictions.eq("node.foreignSource", nodeRef.getForeignSource()),
                     Restrictions.eq("node.foreignId", nodeRef.getForeignId()))
                .limit(1)
                .toCriteria();
        return sessionUtils.withReadOnlyTransaction(() -> {
            final List<OnmsAlarm> matching = alarmDao.findMatching(criteria);
            if (matching.isEmpty()) {
                return Optional.empty();
            }
            final Alarm alarm = ModelMappers.toAlarm(matching.get(0));
            return Optional.of(alarm);
        });
    }

