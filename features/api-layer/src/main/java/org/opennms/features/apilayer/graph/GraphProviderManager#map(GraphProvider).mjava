    @Override
    public org.opennms.netmgt.graph.api.service.GraphProvider map(GraphProvider extension) {
        return new org.opennms.netmgt.graph.api.service.GraphProvider() {

            @Override
            public ImmutableGraph<?, ?> loadGraph() {
                final Graph extensionGraph = extension.loadGraph();
                Objects.requireNonNull(extensionGraph, "extension.loadGraph() must return not null value");
                final List<GenericVertex> vertices = extensionGraph.getVertices().stream()
                        .map(v -> GenericVertex.builder().properties(v.getProperties()).build())
                        .collect(Collectors.toList());
                final List<GenericEdge> edges = extensionGraph.getEdges().stream()
                        .map(e -> GenericEdge.builder()
                                .properties(e.getProperties())
                                .source(e.getSource().getNamespace(), e.getSource().getId())
                                .target(e.getTarget().getNamespace(), e.getTarget().getId())
                                .build())
                        .collect(Collectors.toList());
                final GenericGraph convertedGraph = GenericGraph.builder().properties(extensionGraph.getProperties())
                    .addVertices(vertices)
                    .addEdges(edges)
                    .build();
                return convertedGraph;
            }

            @Override
            public org.opennms.netmgt.graph.api.info.GraphInfo<?> getGraphInfo() {
                final GraphInfo extensionGraphInfo = extension.getGraphInfo();
                Objects.requireNonNull(extensionGraphInfo, "extension.getGraphInfo() must return not null value");
                return new org.opennms.netmgt.graph.api.info.GraphInfo<GenericVertex>() {

                    @Override
                    public String getNamespace() {
                        return extensionGraphInfo.getNamespace();
                    }

                    @Override
                    public String getDescription() {
                        return extensionGraphInfo.getDescription();
                    }

                    @Override
                    public String getLabel() {
                        return extensionGraphInfo.getLabel();
                    }

                    @Override
                    public Class<GenericVertex> getVertexType() {
                        return GenericVertex.class;
                    }
                };
            }
        };
    }

