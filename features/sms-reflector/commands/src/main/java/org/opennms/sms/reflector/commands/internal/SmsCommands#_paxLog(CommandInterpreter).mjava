    /**
     * <p>_paxLog</p>
     *
     * @param intp a {@link org.eclipse.osgi.framework.console.CommandInterpreter} object.
     * @return a {@link java.lang.Object} object.
     */
    @SuppressWarnings("unchecked")
    public Object _paxLog(CommandInterpreter intp) {

        try {

            String level = intp.nextArgument();

            String prefix = intp.nextArgument();

            Configuration config = m_configAdmin.getConfiguration("org.ops4j.pax.logging", null);
            Dictionary properties = config.getProperties();
            if (level == null) {
                if (properties == null) {
                    intp.println("Not current configuration");
                } else {
                    intp.printDictionary(properties, "Current Configuration");
                }
                return null;
            }

            if (properties == null) {
                intp.println("Creating a new configuraiton");
                properties = new Properties();
                properties.put("log4j.rootLogger", "DEBUG, A1");
                properties.put("log4j.appender.A1", "org.apache.log4j.ConsoleAppender");
                properties.put("log4j.appender.A1.layout", "org.apache.log4j.PatternLayout");
                properties.put("log4j.appender.A1.layout.ConversionPattern", "%-4r [%t] %-5p %c %x - %m%n");
            } else {
                intp.println("Found an existing configuration");
                intp.printDictionary(properties, "Existing");
            }

            if (prefix == null) {
                intp.println("Setting default config to "+level);
                properties.put("log4j.rootLogger", level+", A1");
            } else {
                intp.println("Setting log level for "+prefix+" to "+level);
                properties.put("log4j.logger."+prefix, level);
            }


            intp.println("Setting new log configuration");
            intp.printDictionary(properties, "New");
            config.update(properties);

        } 
        catch (Exception e) {
            intp.printStackTrace(e);
        }

        return null;
    }

