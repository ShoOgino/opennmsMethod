    @Test
    @Ignore
    public void testReadMessage() throws Exception {
        Service srv = null;
        // Define a list which will hold the phonebook entries.
        Phonebook phonebook;

        // Define a list which will hold the read messages.
        List<InboundMessage> msgList;

        // Create the notification callback method for inbound & status report
        // messages.
        InboundNotification inboundNotification = new InboundNotification();

        // Create the notification callback method for inbound voice calls.
        CallNotification callNotification = new CallNotification();

        // Create the notification callback method for gateway statuses.
        GatewayStatusNotification statusNotification = new GatewayStatusNotification();

        try {
            System.out.println("Example: Read messages from a serial gsm modem.");
            System.out.println(Library.getLibraryDescription());
            System.out.println("Version: " + Library.getLibraryVersion());

            // Create new Service object - the parent of all and the main
            // interface
            // to you.
            srv = new Service();

            // Create the Gateway representing the serial GSM modem.
            AGateway gateway = createGateway();

            // Set the modem protocol to PDU (alternative is TEXT). PDU is the
            // default, anyway...
            gateway.setProtocol(Protocols.PDU);

            // Do we want the Gateway to be used for Inbound messages?
            gateway.setInbound(true);

            // Do we want the Gateway to be used for Outbound messages?
            gateway.setOutbound(true);

            // Set up the notification methods.
            srv.setInboundNotification(inboundNotification);
            srv.setCallNotification(callNotification);
            srv.setGatewayStatusNotification(statusNotification);

            // Add the Gateway to the Service object.
            srv.addGateway(gateway);

            // Similarly, you may define as many Gateway objects, representing
            // various GSM modems, add them in the Service object and control
            // all of them.

            // Start! (i.e. connect to all defined Gateways)
            srv.startService();

            // Printout some general information about the modem.
            printGatewayInfo(gateway);

            // In case you work with encrypted messages, its a good time to
            // declare your keys.
            // Create a new AES Key with a known key value.
            // Register it in KeyManager in order to keep it active. SMSLib
            // will then automatically
            // encrypt / decrypt all messages send to / received from this
            // number.
            srv.getKeyManager().registerKey("+306948494037", new AESKey(new SecretKeySpec("0011223344556677".getBytes(), "AES")));

            // Read Messages. The reading is done via the Service object and
            // affects all Gateway objects defined. This can also be more
            // directed to a specific
            // Gateway - look the JavaDocs for information on the Service
            // method calls.
            msgList = new ArrayList<InboundMessage>();
            srv.readMessages(msgList, MessageClasses.ALL);
            for (InboundMessage msg : msgList)
                System.out.println(msg);

            /*
             * // Read Phonebook. phonebook = new Phonebook();
             * System.out.println("TOTAL PHONEBOOK ENTRIES = " +
             * srv.readPhonebook(phonebook, gateway.getGatewayId())); // Print
             * out all contacts retrieved. for (Contact entry :
             * phonebook.getContacts()) System.out.println(entry); // Print
             * out contact stored on the SIM card. for (Contact entry :
             * phonebook.getContacts(Contact.ContactLocation.SIM_ENTRIES))
             * System.out.println(entry);
             */

            // Sleep now. Emulate real world situation and give a chance to
            // the notifications
            // methods to be called in the event of message or voice call
            // reception.

            Thread.sleep(20000);

        } catch (Throwable e) {
            LogUtils.warnf(this, e, "failed to read message");
        } finally {
            if (srv != null) srv.stopService();
        }
    }

