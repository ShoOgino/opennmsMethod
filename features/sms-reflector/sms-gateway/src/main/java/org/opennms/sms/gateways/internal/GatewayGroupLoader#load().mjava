    /**
     * <p>load</p>
     */
    public void load() {

        Properties modemProperties = m_configProperties;
        
        String modems = System.getProperty("org.opennms.sms.gateways.modems");
        
        if (modems == null || "".equals(modems.trim())) {
            modems = modemProperties.getProperty("modems");
        }

        String[] tokens = modems.split("\\s+");

        final AGateway[] gateways = new AGateway[tokens.length];

        if (tokens.length == 0) {
            m_gatewayGroups = new GatewayGroup[0];
        } else {
            for(int i = 0; i < tokens.length; i++){
                String modemId = tokens[i];
                String port = modemProperties.getProperty(modemId + ".port");
                
                if (port == null) {
                    throw new IllegalArgumentException("No port defined for modem with id " + modemId );
                }
                int baudRate = Integer.parseInt(modemProperties.getProperty(modemId + ".baudrate", "9600"));
                String manufacturer = modemProperties.getProperty(modemId + ".manufacturer");
                String model = modemProperties.getProperty(modemId + ".model");
                String pin = modemProperties.getProperty(modemId+".pin", "0000");

                infof("Create SerialModemGateway(%s, %s, %d, %s, %s)", modemId, port, baudRate, manufacturer, model);

                SerialModemGateway gateway = new SerialModemGateway(modemId, port, baudRate, manufacturer, model);
                gateway.setProtocol(Protocols.PDU);
                gateway.setInbound(true);
                gateway.setOutbound(true);
                gateway.setSimPin(pin);

                gateways[i] = gateway;
            }


            GatewayGroup gatewayGroup = new GatewayGroup() {

                public AGateway[] getGateways() {
                    return gateways;
                }

            };

            m_gatewayGroups  = new GatewayGroup[] { gatewayGroup };

        }

    }

