	@Override
	public PollStatus poll(MonitoredService svc, Map<String, Object> parameters) {

	    try {

	        String config = ParameterMap.getKeyedString(parameters, "sequence", "");

	        if (!StringUtils.hasLength(config)) {
	            return PollStatus.unavailable("Sequence configuration was empty.  You must specify a 'sequence' parameter in the SMSSequenceMonitor poller configuration!");
	        }

	        SequenceConfigFactory factory = SequenceConfigFactory.getInstance();
	        MobileSequenceConfig sequenceConfig = factory.getSequenceForXml(config);

	        if (!sequenceConfig.hasTransactions()) {
	            log.warn("No transactions were configured for host " + svc.getIpAddr());
	            return PollStatus.unavailable("No transactions were configured for host " + svc.getIpAddr());
	        }

            MobileSequenceSession session = new MobileSequenceSession(parameters, sequenceConfig.getSessionVariables(), m_tracker);

            session.setRecipient(m_phonebook.getTargetForAddress(svc.getIpAddr()));

			session.checkoutVariables();

			Map<String, Number> results = null;
			try {
				results = sequenceConfig.executeSequence(session, m_coordinator);
			} finally {
				session.checkinVariables();
			}

	        Map<String, Number> responseTimes = results;
	        PollStatus response = PollStatus.available();
	        response.setProperties(responseTimes);
	        return response;


	    } catch (PhonebookException e) {
	        log.warn("Unable to locate recpient phone number for IP address " + svc.getIpAddr(), e);
	        return PollStatus.unavailable("Unable to find phone number for IP address " + svc.getIpAddr());
	    } catch (SequenceException e) {
	        log.warn("Unable to parse sequence configuration for host " + svc.getIpAddr(), e);
	        return PollStatus.unavailable("unable to read sequence configuration");
	    } catch (Throwable e) {
	        log.debug("Sequence failed", e);
	        return PollStatus.unavailable("Sequence failed: " + e.getLocalizedMessage());
	    } 
	}

