	public Object _rxtxInfo(CommandInterpreter intp) {
		
		try
		{

			String id = intp.nextArgument();

			assertNotNull( id, "usage: rxtxInfo <id>" );

			assertOpenPort( id );

			SerialPort port = m_openPorts.get( id );
		

			intp.println("===== Info for port " + port.getName() + " =====");
			// Unsupported by ACM driver
			//intp.println("\tbaudBase: " + port.getBaudBase() );
			intp.println("\tbaudRate: " + port.getBaudRate() );
			// Unsupported by RXTX
			//intp.println("\tcallOutHangup: " + port.getCallOutHangup() );
			intp.println("\tisCD: " + port.isCD() );
			intp.println("\tisCTS: " + port.isCTS() );
			intp.println("\tisDSR: " + port.isDSR() );
			intp.println("\tisDTR: " + port.isDTR() );
			intp.println("\tisRI: " + port.isRI() );
			intp.println("\tisRTS: " + port.isRTS() );
			intp.println("\tdataBits: " + port.getDataBits() );
			// Unsupported by ACM driver
			//intp.println("\tdivisor: " + port.getDivisor() );
			intp.println("\tendOfInputChar: " + port.getEndOfInputChar() );
			intp.println("\tflowControlMode: " + port.getFlowControlMode() );
			intp.println("\tinputBufferSize: " + port.getInputBufferSize() );
			// Unsupported by RXTX
			//intp.println("\tlowLatency: " + port.getLowLatency() );
			intp.println("\toutputBufferSize: " + port.getOutputBufferSize() );
			intp.println("\tparity: " + port.getParity() );
			intp.println("\tparityErrorChar: " + port.getParityErrorChar() );
			intp.println("\treceiveFramingEnabled: " + port.isReceiveFramingEnabled() );
			intp.println("\treceiveFramingByte: " + port.getReceiveFramingByte() );
			intp.println("\treceiveThresholdEnabled: " + port.isReceiveThresholdEnabled() );
			intp.println("\treceiveThreshold: " + port.getReceiveThreshold() );
			intp.println("\treceiveTimeoutEnabled: " + port.isReceiveTimeoutEnabled() );
			intp.println("\treceiveTimeout: " + port.getReceiveTimeout() );
			intp.println("\tstopBits: " + port.getStopBits() );
			// Unsupported by RXTX
			//intp.println("\tuartType: " + port.getUARTType() );
			intp.println("===================================================");

		}
		catch( IllegalArgumentException e)
		{
			intp.println( e.getMessage() );
		}
		catch( Exception e )
		{
			intp.printStackTrace(e);
		}
		
		return null;
	}

