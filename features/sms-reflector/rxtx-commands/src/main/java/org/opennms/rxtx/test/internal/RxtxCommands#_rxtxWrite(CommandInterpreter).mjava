	/**
	 * <p>_rxtxWrite</p>
	 *
	 * @param intp a {@link org.eclipse.osgi.framework.console.CommandInterpreter} object.
	 * @return a {@link java.lang.Object} object.
	 */
	public Object _rxtxWrite(CommandInterpreter intp) {

		String id = intp.nextArgument();
		String text = intp.nextArgument();
		
		try
		{
		
			assertNotNull( id , "usage: rxtxWrite <id> <text>" );
			assertNotNull( text , "usage: rxtxWrite <id> <text>" );

			assertOpenPort( id );

			SerialPort port = m_openPorts.get( id );

			Writer out = new OutputStreamWriter( port.getOutputStream(), "US-ASCII" );

			if ( text.startsWith( "<<" ) ) {
				String eof = text.substring( 2 );

				BufferedReader in = new BufferedReader( new InputStreamReader( System.in ) );
				String line = in.readLine();
				while( ! eof.equals( line ) )
				{
					out.write( line + "\r\n");
					out.flush();
					
					line = in.readLine();
				}
				
			} else {
				text = text.replace("\\r", "\r");
				text = text.replace("\\n", "\n");
				text = text.replace("\\\\", "\\");
				
				out.write( text + "\r\n");
				out.flush();
			}

		}
		catch( IllegalArgumentException e )
		{
			intp.println( e.getMessage() );
		}
		catch( UnsupportedEncodingException e )
		{
			intp.println( "Unsupported Encoded " + e.getMessage() );
		} 
		catch( IOException e )
		{
			intp.println( "Exception writing " + text + " to port with id " + id );
			intp.printStackTrace( e );
		}
		
		return null;
		
	}

