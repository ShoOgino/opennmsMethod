    /**
     * Create a cache.
     * @param minTtl the minimum TTL
     * @param maxTtl the maximum TTL
     * @param negativeTtl the TTL for failed queries
     */
    public CaffeineDnsCache(int minTtl, int maxTtl, int negativeTtl, long maxSize) {
        this.minTtl = Math.min(MAX_SUPPORTED_TTL_SECS, checkPositiveOrZero(minTtl, "minTtl"));
        this.maxTtl = Math.min(MAX_SUPPORTED_TTL_SECS, checkPositiveOrZero(maxTtl, "maxTtl"));
        Preconditions.checkArgument(minTtl <= maxTtl, "minTtl: " + minTtl + ", maxTtl: " + maxTtl + " (expected: 0 <= minTtl <= maxTtl)");
        this.negativeTtl = checkPositiveOrZero(negativeTtl, "negativeTtl");
        this.maxSize = checkPositiveOrZero(maxSize, "maxSize");

        resolveCache = new CaffeineCache<ExtendedDnsCacheEntry>(maxSize) {
            @Override
            protected boolean shouldReplaceAll(ExtendedDnsCacheEntry entry) {
                return entry.cause() != null;
            }
        };
    }

