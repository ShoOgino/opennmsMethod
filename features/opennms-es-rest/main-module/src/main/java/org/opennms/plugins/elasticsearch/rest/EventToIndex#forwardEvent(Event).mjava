	/** 
	 * this handles the incoming event and deals with it as an alarm change event or a normal event
	 * @param event
	 */
	public void forwardEvent(Event event){

		try{
			maybeRefreshCache(event);

			// handling uei definitions of alarm change events

			String uei=event.getUei();
			Update alarmUpdate=null;
			Index eventIndex=null;
			DocumentResult alarmIndexresult=null;
			DocumentResult eventIndexresult=null;

			// if alarm change notification then handle change
			// change alarm index and add event to alarm change event index
			if(uei.startsWith(ALARM_NOTIFICATION_UEI_STEM)) {
				if (STICKY_MEMO_EVENT.equals(uei)|| JOURNAL_MEMO_EVENT.equals(uei) ){
					// handle memo change events
					// TODO may want to create a sticky and journal memo field in alarms index and update accordingly
					// currently we just save the event as an event to ES with no other processing
					if (LOG.isDebugEnabled()) LOG.debug("Sending Alarm MEMO Event to ES:"+event.toString());

				} else {
					// handle alarm change events

					if (ALARM_CREATED_EVENT.equals(uei)){
						if (LOG.isDebugEnabled()) LOG.debug("Sending Alarm Created Event to ES:"+event.toString());

					} else if( ALARM_DELETED_EVENT.equals(uei)){
						if (LOG.isDebugEnabled()) LOG.debug("Sending Alarm Deleted Event to ES:"+event.toString());

					} else if (ALARM_SEVERITY_CHANGED_EVENT.equals(uei)){
						if (LOG.isDebugEnabled()) LOG.debug("Sending Alarm Changed Severity Event to ES:"+event.toString());

					} else if (ALARM_CLEARED_EVENT.equals(uei)){
						if (LOG.isDebugEnabled()) LOG.debug("Sending Alarm Cleared Event to ES:"+event.toString());

					} else if (ALARM_ACKNOWLEDGED_EVENT.equals(uei)){
						if (LOG.isDebugEnabled()) LOG.debug("Sending Alarm Acknowledged Event to ES:"+event.toString());

					} else if (ALARM_UNACKNOWLEDGED_EVENT.equals(uei)){
						if (LOG.isDebugEnabled()) LOG.debug("Sending Alarm Unacknowledged Event to ES:"+event.toString());

					} else if (ALARM_SUPPRESSED_EVENT.equals(uei)){
						if (LOG.isDebugEnabled()) LOG.debug("Sending Alarm Suppressed Event to ES:"+event.toString());

					} else if (ALARM_UNSUPPRESSED_EVENT.equals(uei)){
						if (LOG.isDebugEnabled()) LOG.debug("Sending Alarm Unsuppressed Event to ES:"+event.toString());

					} else if (ALARM_TROUBLETICKET_STATE_CHANGE_EVENT.equals(uei)){
						if (LOG.isDebugEnabled()) LOG.debug("Sending Alarm TroubleTicked state changed Event to ES:"+event.toString());

					} else if (ALARM_CHANGED_EVENT.equals(uei)){
						if (LOG.isDebugEnabled()) LOG.debug("Sending Alarm Changed Event to ES:"+event.toString());

					}

					if(archiveAlarms){
						// if an alarm change event, use the alarm change fields to update the alarm index
						alarmUpdate = populateAlarmIndexBodyFromAlarmChangeEvent(event, ALARM_INDEX_NAME, ALARM_INDEX_TYPE);
						String alarmindexname=alarmUpdate.getIndex();

						alarmIndexresult = getJestClient().execute(alarmUpdate);

						if(alarmIndexresult.getResponseCode()==404){
							// index doesn't exist for upsert command so create new index and try again

							if(LOG.isDebugEnabled()) {
								LOG.debug("trying to update alarm"
										+ "\n   received search result: "+alarmIndexresult.getJsonString()
										+ "\n   response code:" +alarmIndexresult.getResponseCode() 
										+ "\n   error message: "+alarmIndexresult.getErrorMessage());
								LOG.debug("index name "+alarmindexname + " doesnt exist creating new index");
							}

							// create new index
							CreateIndex createIndex = new CreateIndex.Builder(alarmindexname).build();
							JestResult result = getJestClient().execute(createIndex);
							if(LOG.isDebugEnabled()) {
								LOG.debug("created new alarm index:"+alarmindexname+" type:"+ ALARM_INDEX_TYPE
										+ "\n   received search result: "+result.getJsonString()
										+ "\n   response code:" +result.getResponseCode() 
										+ "\n   error message: "+result.getErrorMessage());
							}
							alarmIndexresult = getJestClient().execute(alarmUpdate);
						}

						if(alarmIndexresult.getResponseCode()!=200){
							LOG.error("Problem sending alarm to es index:" +alarmindexname+ " type:"+ ALARM_INDEX_TYPE
									+ "\n   received search result: "+alarmIndexresult.getJsonString()
									+ "\n   response code:" +alarmIndexresult.getResponseCode() 
									+ "\n   error message: "+alarmIndexresult.getErrorMessage());
						} else if(LOG.isDebugEnabled()) {
							LOG.debug("Alarm sent to es index:" +alarmindexname+ " type:"+ ALARM_INDEX_TYPE
									+ "\n   received search result: "+alarmIndexresult.getJsonString()
									+ "\n   response code:" +alarmIndexresult.getResponseCode() 
									+ "\n   error message: "+alarmIndexresult.getErrorMessage());

						}
					}
				}

				// save all Alarm Change Events including memo change events
				if(archiveAlarmChangeEvents){
					eventIndex = populateEventIndexBodyFromEvent(event, ALARM_EVENT_INDEX_NAME, EVENT_INDEX_TYPE);
					String alarmeventindexname=eventIndex.getIndex();
					eventIndexresult = getJestClient().execute(eventIndex);

					if(eventIndexresult.getResponseCode()==404){
						// index doesn't exist for upsert command so create new index first

						if(LOG.isDebugEnabled()) {
							LOG.debug("trying to update alarm event index"
									+ "\n   received search result: "+eventIndexresult.getJsonString()
									+ "\n   response code:" +eventIndexresult.getResponseCode() 
									+ "\n   error message: "+eventIndexresult.getErrorMessage());
							LOG.debug("index name "+alarmeventindexname + " doesnt exist creating new index");
						}

						// create new index
						CreateIndex createIndex = new CreateIndex.Builder(alarmeventindexname).build();
						JestResult result = getJestClient().execute(createIndex);
						if(LOG.isDebugEnabled()) {
							LOG.debug("created new alarm change event index:"+alarmeventindexname+" type:"+ EVENT_INDEX_TYPE
									+ "\n   received search result: "+result.getJsonString()
									+ "\n   response code:" +result.getResponseCode() 
									+ "\n   error message: "+result.getErrorMessage());
						}
						eventIndexresult = getJestClient().execute(eventIndex);
					}


					if(eventIndexresult.getResponseCode()!=200){
						LOG.error("Problem sending Alarm Event to es index:" +alarmeventindexname+ " type:"+ EVENT_INDEX_TYPE
								+ "\n   received search result: "+alarmIndexresult.getJsonString()
								+ "\n   response code:" +alarmIndexresult.getResponseCode() 
								+ "\n   error message: "+alarmIndexresult.getErrorMessage());
					} else if(LOG.isDebugEnabled()) {
						LOG.debug("Alarm Event sent to es index:"+alarmeventindexname+" type:"+ EVENT_INDEX_TYPE
								+ "\n   received search result: "+eventIndexresult.getJsonString()
								+ "\n   response code:" +eventIndexresult.getResponseCode() 
								+ "\n   error message: "+eventIndexresult.getErrorMessage());

					}
				}

			} else {
				// else handle all other event types

				if(archiveRawEvents){
					// only send events to ES which are persisted to database
					if(logAllEvents || (event.getDbid()!=null && event.getDbid()!=0)) {
						if (LOG.isDebugEnabled()) LOG.debug("Sending Event to ES:"+event.toString());
						// Send the event to the event forwarder
						eventIndex = populateEventIndexBodyFromEvent(event, EVENT_INDEX_NAME, EVENT_INDEX_TYPE);
						String eventindexname=eventIndex.getIndex();
						eventIndexresult = getJestClient().execute(eventIndex);

						if(eventIndexresult.getResponseCode()==404){
							// index doesn't exist for upsert command so create new index first

							if(LOG.isDebugEnabled()) {
								LOG.debug("trying to update event index"
										+ "\n   received search result: "+eventIndexresult.getJsonString()
										+ "\n   response code:" +eventIndexresult.getResponseCode() 
										+ "\n   error message: "+eventIndexresult.getErrorMessage());
								LOG.debug("index name "+eventindexname + " doesnt exist creating new index");
							}

							// create new index
							CreateIndex createIndex = new CreateIndex.Builder(eventindexname).build();
							JestResult result = getJestClient().execute(createIndex);
							if(LOG.isDebugEnabled()) {
								LOG.debug("created new event index:"+eventindexname+" type:"+ EVENT_INDEX_TYPE
										+ "\n   received search result: "+result.getJsonString()
										+ "\n   response code:" +result.getResponseCode() 
										+ "\n   error message: "+result.getErrorMessage());
							}
							eventIndexresult = getJestClient().execute(eventIndex);
						}

						if(LOG.isDebugEnabled()) {
							LOG.debug("Event sent to es index:"+eventindexname+" type:"+ EVENT_INDEX_TYPE
									+ "\n   received search result: "+eventIndexresult.getJsonString()
									+ "\n   response code:" +eventIndexresult.getResponseCode() 
									+ "\n   error message: "+eventIndexresult.getErrorMessage());
						}
					}

				} else {
					if (LOG.isDebugEnabled()) LOG.debug("Not Sending Event to ES: null event.getDbid()="+event.getDbid()+ " Event="+event.toString());
				}
			}



		} catch (Exception ex){
			LOG.error("problem sending event to Elastic Search",ex);
		}

	}

