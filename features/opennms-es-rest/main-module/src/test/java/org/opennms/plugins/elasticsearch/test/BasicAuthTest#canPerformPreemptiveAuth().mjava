    @Test
    public void canPerformPreemptiveAuth() throws IOException {
        stubFor(post(urlEqualTo("/_all/_search"))
                // Require basic auth credentials
                .withBasicAuth("mi", "mimimi")
                .willReturn(aResponse()
                        // Use some valid body so that JEST treats the response
                        // as a success, aside from that, we don't care about the contents
                        .withBody("{\n" +
                                "    \"took\": 1,\n" +
                                "    \"timed_out\": false,\n" +
                                "    \"_shards\":{\n" +
                                "        \"total\" : 1,\n" +
                                "        \"successful\" : 1,\n" +
                                "        \"skipped\" : 0,\n" +
                                "        \"failed\" : 0\n" +
                                "    },\n" +
                                "    \"hits\":{\n" +
                                "        \"total\" : 0,\n" +
                                "        \"max_score\": 0,\n" +
                                "        \"hits\" : []\n" +
                                "    }\n" +
                                "}")));

        // Create the REST client factory in a fashion similar to how it's created in the Blueprint
        // and specify some basic auth credentials
        RestClientFactory restClientFactory = new RestClientFactory(wireMockRule.url(""), "mi", "mimimi");
        restClientFactory.setTimeout(3000);
        restClientFactory.setSocketTimeout(3000);
        restClientFactory.setRetries(0);

        // Execute a request with our client, the contents of the search don't really matter
        // here, we just need some valid JSON
        JestClient client = restClientFactory.getJestClient();
        JestResult result = client.execute(new Search.Builder("{\n" +
                "    \"query\" : {\n" +
                "        \"term\" : { \"user\" : \"kimchy\" }\n" +
                "    }\n" +
                "}").build());

        // Verify
        assertTrue("The search request using Jest should succeed.", result.isSucceeded());

        // Cleanup
        client.shutdownClient();
    }

