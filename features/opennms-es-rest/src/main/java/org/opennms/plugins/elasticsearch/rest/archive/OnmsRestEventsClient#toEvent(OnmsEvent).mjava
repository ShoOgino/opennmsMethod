	private static Event toEvent(OnmsEvent onmsEvent) {
		final Event event = new Event();
		if (onmsEvent.getId() != null) event.setDbid(onmsEvent.getId());
		if (onmsEvent.getEventUei() != null ) event.setUei(onmsEvent.getEventUei());
		if (onmsEvent.getEventCreateTime() != null ) event.setCreationTime(onmsEvent.getEventCreateTime());
		if (onmsEvent.getSeverityLabel() !=null ) event.setSeverity(onmsEvent.getSeverityLabel());
		if (onmsEvent.getEventDescr() !=null ) event.setDescr(onmsEvent.getEventDescr());
		if (onmsEvent.getEventHost() !=null ) event.setHost(onmsEvent.getEventHost());
		
		final List<Parm> parmColl = new ArrayList<>();
		if (onmsEvent.getEventParameters()!=null) {
			final List<OnmsEventParameter> params = onmsEvent.getEventParameters();
			for(OnmsEventParameter onmsEventParameter:params){
				final Value parmvalue = new Value();
				parmvalue.setType(onmsEventParameter.getType());
				parmvalue.setContent(onmsEventParameter.getValue());

				final Parm parm = new Parm();
				parm.setParmName(onmsEventParameter.getName());
				parm.setValue(parmvalue);
				parmColl.add(parm);
			}
		}
		
		// add node label as param
		if (onmsEvent.getNodeLabel() != null){
			final Value parmValue = new Value();
			parmValue.setType("string");
			parmValue.setEncoding("text");
			parmValue.setContent(onmsEvent.getNodeLabel());

			final Parm parm = new Parm();
			parm.setParmName(NODE_LABEL);
			parm.setValue(parmValue);
			parmColl.add(parm);
		}
		event.setParmCollection(parmColl);

		if (onmsEvent.getEventLogMsg() != null ) {
			final Logmsg logmsg = new Logmsg();
			logmsg.setContent(onmsEvent.getEventLogMsg());
			event.setLogmsg(logmsg );
		}

		if (onmsEvent.getNodeId() != null ) {
			event.setNodeid(onmsEvent.getNodeId().longValue());
		}
		return event;
	}

