	/**
	 * <p>This method converts events into a sequence of Elasticsearch index/update commands.
	 * Three types of actions are possible:</p>
	 * <ul>
	 * <li>Updating an alarm document based on an {@link #ALARM_NOTIFICATION_UEI_STEM} event</li>
	 * <li>Indexing the {@link #ALARM_NOTIFICATION_UEI_STEM} events</li>
	 * <li>Indexing all other events</li>
	 * </ul>
	 * 
	 * @param events
	 */
	private List<BulkableAction<DocumentResult>> convertEventsToEsActions(List<Event> events) {

		final List<BulkableAction<DocumentResult>> retval = new ArrayList<>();

		for (Event event : events) {

			refreshCacheIfNecessary(event);

			final String uei = event.getUei();

			// if alarm change notification then handle change
			// change alarm index and add event to alarm change event index
			if(uei.startsWith(ALARM_NOTIFICATION_UEI_STEM)) {
				if (STICKY_MEMO_EVENT.equals(uei) || JOURNAL_MEMO_EVENT.equals(uei) ){
					// handle memo change events
					// TODO may want to create a sticky and journal memo field in alarms index and update accordingly
					// currently we just save the event as an event to ES with no other processing
					LOG.debug("Sending Alarm MEMO Event to ES: {}", event);

				} else {
					// handle alarm change events
					LOG.debug("Sending event with uei {}: {} to ES", uei, event);

					if(archiveAlarms){
						// if an alarm change event, use the alarm change fields to update the alarm index
						final Update alarmUpdate = createAlarmIndexFromAlarmChangeEvent(event, Indices.ALARMS);
						retval.add(alarmUpdate);
					}
				}

				// save all Alarm Change Events including memo change events
				if(archiveAlarmChangeEvents){
					final Index eventIndex = createEventIndexFromEvent(event, Indices.ALARM_EVENTS);
					retval.add(eventIndex);
				}

			} else {
				// Handle all other event types
				if(archiveRawEvents){
					// only send events to ES if they are persisted to database or logAllEvents is set to true
					if(logAllEvents || (event.getDbid() !=null && event.getDbid()!=0)) {
						Index eventIndex = createEventIndexFromEvent(event, Indices.EVENTS);
						retval.add(eventIndex);
					} else {
						LOG.debug("Not Sending Event to ES. Event is not persisted to database, or logAllEvents is false. Event: {}", event);
					}
				}
			}
		}

		return retval;
	}

