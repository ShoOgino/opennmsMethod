    public NodeCacheImpl(final NodeDao nodeDao, final TransactionOperations transactionOperations, final CacheConfig cacheConfig, final boolean archiveAssetData) {
        this.nodeDao = Objects.requireNonNull(nodeDao);
        this.transactionOperations = Objects.requireNonNull(transactionOperations);
        this.archiveAssetData = archiveAssetData;

        // Initialize cache
        LOG.info("initializing node data cache (archiveAssetData={}, TTL={}m, MAX_SIZE={})", archiveAssetData, cacheConfig.getMaxTTL(), cacheConfig.getMaxSize());
        final CacheBuilder cacheBuilder = CacheBuilder.newBuilder();
        if(cacheConfig.getMaxTTL() > 0) {
            cacheBuilder.expireAfterWrite(cacheConfig.getMaxTTL(), TimeUnit.MINUTES);
        }
        if(cacheConfig.getMaxSize() > 0) {
            cacheBuilder.maximumSize(cacheConfig.getMaxSize());
        }
        cache = cacheBuilder.build(new CacheLoader<Long, Map<String, String>>() {
                                     @Override
                                     public Map<String,String> load(Long nodeId) {
                                         return loadNodeAndCategoryInfo(nodeId);
                                     }
                                 }
        );
    }

