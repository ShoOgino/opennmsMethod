	@Override
	public Object execute() {
		try {
			final OnmsHistoricEventsToEs onmsHistoryEventsToEs = new OnmsHistoricEventsToEs();
			onmsHistoryEventsToEs.setEventForwarder(eventForwarder);
			onmsHistoryEventsToEs.setLimit(limit);
			if (limit > 0) {
				onmsHistoryEventsToEs.setOffset(offset);
			}
			if (this.password != null) {
				onmsHistoryEventsToEs.setOnmsPassWord(password);
			}
			if (this.username != null) {
				onmsHistoryEventsToEs.setOnmsUserName(username);
			}
			if (this.url != null){
				new URL(this.url); // check url is formatted ok
				onmsHistoryEventsToEs.setOnmsUrl(this.url);
			}
			if (this.useNodelabel) {
				onmsHistoryEventsToEs.setUseNodeLabel(useNodelabel);
			}
			if (logSize > 0) {
				onmsHistoryEventsToEs.setLogSize(logSize);
			}
			final String msg = "Sending events to Elasticsearch. "
					+ "\n Limit: "+onmsHistoryEventsToEs.getLimit()
					+ "\n Offset: "+onmsHistoryEventsToEs.getOffset()
					+ "\n Retrieving events from OpenNMS URL: "+onmsHistoryEventsToEs.getOnmsUrl()
					+ "\n OpenNMS Username: "+onmsHistoryEventsToEs.getOnmsUserName()
					+ "\n OpenNMS Password: "+onmsHistoryEventsToEs.getOnmsPassWord()
			        + "\n Use Node Label: "+onmsHistoryEventsToEs.getUseNodeLabel()
					+ "\n Log Size: " + logSize;
			LOG.info(msg);
			System.out.println(msg);
			
			final String response = onmsHistoryEventsToEs.sendEventsToEs();
			LOG.info(response);
			System.out.println(response);
		} catch (Exception e) {
			System.err.println("Error Sending Historical Events to ES (see karaf.log) "+ExceptionUtils.getStackTrace(e));
			LOG.error("Error Sending Historical Events to ES ",e);
		}
		return null;
	}

