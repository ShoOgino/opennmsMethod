    public void doMain(String[] args) {

        CmdLineParser parser = new CmdLineParser(this);

        parser.setUsageWidth(80);

        try {
            parser.parseArgument(args);
            if (jmx && graph) {
                throw new CmdLineException(parser, "jmx and graph is set. Just use one at a time.");
            } else if (!jmx && !graph) {
                throw new CmdLineException(parser, "set jmx or graph.");
            }

            dictionary = loadInternalDictionary();
            if (dictionaryFile != null) {
                dictionary = loadExternalDictionary(dictionaryFile);
            }

            if (jmx) {
                JMXConnector jmxConnector = null;
                if (hostName != null && port != null && outFile != null) {
                    JmxDatacollectionConfiggenerator jmxConfigGenerator = new JmxDatacollectionConfiggenerator();
                    JMXServiceURL jmxServiceURL = jmxConfigGenerator.getJmxServiceURL(jmxmp, hostName, port);
                    jmxConnector = jmxConfigGenerator.getJmxConnector(username, password, jmxServiceURL);
                    MBeanServerConnection mBeanServerConnection = jmxConfigGenerator.createMBeanServerConnection(jmxConnector);
                    JmxDatacollectionConfig generateJmxConfigModel = jmxConfigGenerator.generateJmxConfigModel(mBeanServerConnection, serviceName, !skipDefaultVM, runWritableMBeans, dictionary);
                    jmxConfigGenerator.writeJmxConfigFile(generateJmxConfigModel, outFile);
                } else if (url != null && outFile != null) {
                    JmxDatacollectionConfiggenerator jmxConfigGenerator = new JmxDatacollectionConfiggenerator();
                    JMXServiceURL jmxServiceURL = new JMXServiceURL(url);
                    jmxConnector = jmxConfigGenerator.getJmxConnector(username, password, jmxServiceURL);
                    MBeanServerConnection mBeanServerConnection = jmxConfigGenerator.createMBeanServerConnection(jmxConnector);
                    JmxDatacollectionConfig generateJmxConfigModel = jmxConfigGenerator.generateJmxConfigModel(mBeanServerConnection, serviceName, !skipDefaultVM, runWritableMBeans, dictionary);
                    jmxConfigGenerator.writeJmxConfigFile(generateJmxConfigModel, outFile);

                } else {
                    throw new CmdLineException(parser, "no valid call found.");
                }

                if (jmxConnector != null) {
                    logger.debug("closing connection");
                    jmxConnector.close();
                    logger.debug("connection closed");
                }

                return;

            } else if (graph) {
                if (inputFile != null && outFile != null) {

                    JmxConfigReader jmxToSnmpGraphConfigGen = new JmxConfigReader();
                    Collection<Report> reports = jmxToSnmpGraphConfigGen.generateReportsByJmxDatacollectionConfig(inputFile);

                    GraphConfigGenerator graphConfigGenerator = new GraphConfigGenerator();

                    String snmpGraphConfig;
                    if (templateFile != null) {
                        snmpGraphConfig = graphConfigGenerator.generateSnmpGraph(reports, templateFile);
                    } else {
                        snmpGraphConfig = graphConfigGenerator.generateSnmpGraph(reports);
                    }

                    System.out.println(snmpGraphConfig);
                    FileUtils.writeStringToFile(new File(outFile), snmpGraphConfig, "UTF-8");
                    return;
                } else {
                    throw new CmdLineException(parser, "no valid call found.");
                }
            } else {
                throw new CmdLineException(parser, "no valid call found.");
            }
        } catch (Exception e) {
            logger.error("An exception occured", e);
            System.err.println("JmxConfigGenerator [options...] arguments...");
            parser.printUsage(System.err);
            System.err.println();
            // System.err.println("  Example: java -jar JmxConfigGenerator" +
            // parser.printExample(ALL));
            System.err.println("Examples:");
            System.err
                    .println(" Generation of jmx-datacollection.xml: java -jar JmxConfigGenerator.jar -jmx -host localhost -port 7199 -out JMX-DatacollectionDummy.xml [-service cassandra] [-skipDefaultVM] [-runWritableMBeans] [-dictionary dictionary.properties]");
            System.err.println(" Generation of snmp-graph.properties: java -jar JmxConfigGenerator.jar -graph -input test.xml -out test.properies [-template graphTemplate.vm] [-service cassandra]");
        }
    }

