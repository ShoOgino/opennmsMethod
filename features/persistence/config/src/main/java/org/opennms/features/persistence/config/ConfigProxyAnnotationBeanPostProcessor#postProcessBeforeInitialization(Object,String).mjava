    @Override
    public Object postProcessBeforeInitialization(final Object bean, String beanName) throws BeansException {
        final ConfigProxy annotation = bean.getClass().getAnnotation(ConfigProxy.class);
        if (annotation != null) {
            if (!(bean instanceof JaxbConfigDao)) {
                throw new IllegalStateException("Bean with name '" + beanName
                        + "' has @" + ConfigProxy.class.getSimpleName()
                        + " annotation, but does not implement " + JaxbConfigDao.class);
            }
            if (annotation.proxyMethod() == null || annotation.proxyMethod().isEmpty()) {
                throw new IllegalStateException("Bean with name '" + beanName
                        + "' has @" + ConfigProxy.class.getSimpleName()
                        + " annotation, but does not define proxied methods");
            }
            if (isRunningInOpennmsJvm) {
                return bean;
            }
            // Proxy call
            return Proxy.newProxyInstance(getClass().getClassLoader(), bean.getClass().getInterfaces(), (proxy, method, args) -> {
                // The call to loading the configuration is proxied, everything else is kept as is
                if (method.getName().equals(annotation.proxyMethod())) {
                    final Class configType = ((JaxbConfigDao) bean).getConfigType();
                    final String configuration = restClient.getConfiguration(configType.getSimpleName());
                    if (configuration == null) {
                        throw new RuntimeException("Could not retrieve configuration of type " + configType);
                    }
                    try (InputStream inputStream = new ByteArrayInputStream(configuration.getBytes())) {
                        return JaxbUtils.unmarshal(configType, inputStream);
                    }
                }
                return method.invoke(bean, args);
            });

        }
        return bean;
    }

