    public Double getAvailability() {
        if (m_statusFrom == null || m_locationSpecificStatuses == null) {
            return null;
        }

        // service id -> location id -> outages
        final Map<Integer, Map<Integer, List<GWTServiceOutage>>> outages = getOutages();

        Set<Interval> serviceOutageIntervals = IntervalUtils.getIntervalSet();

        for (final Integer serviceId : outages.keySet()) {
            final Set<Interval> serviceUpIntervals = IntervalUtils.getIntervalSet();
            final Map<Integer, List<GWTServiceOutage>> serviceOutage = outages.get(serviceId);
            if (serviceOutage.size() == 0) continue;
            for (final GWTLocationMonitor monitor : m_locationMonitors) {
                final Integer locationId = monitor.getId();
                Set<Interval> locationIntervals = IntervalUtils.getIntervalSet();
                if (serviceOutage.containsKey(locationId)) {
                    for (final GWTServiceOutage outage : serviceOutage.get(locationId)) {
                        locationIntervals.add(new Interval(outage.getFrom().getTime(), outage.getTo().getTime()));
                    }
                }
                locationIntervals = IntervalUtils.invert(m_statusFrom, m_statusTo, IntervalUtils.normalize(locationIntervals));
                serviceUpIntervals.addAll(locationIntervals);
            }
            final Set<Interval> normalized = IntervalUtils.normalize(serviceUpIntervals);
            final Set<Interval> downIntervals = IntervalUtils.invert(m_statusFrom, m_statusTo, normalized);
            serviceOutageIntervals.addAll(downIntervals);
        }

        serviceOutageIntervals = IntervalUtils.normalize(serviceOutageIntervals);

        Long timeAvailable = 0L;
        final Set<Interval> upIntervals = IntervalUtils.invert(m_statusFrom, m_statusTo, serviceOutageIntervals);
        for (final Interval i : upIntervals) {
            timeAvailable += (i.getEndMillis() - i.getStartMillis());
        }

        final Long totalTime = m_statusTo.getTime() - m_statusFrom.getTime();
        final double availability = timeAvailable.doubleValue() / totalTime.doubleValue() * 100;
        return availability;
    }

