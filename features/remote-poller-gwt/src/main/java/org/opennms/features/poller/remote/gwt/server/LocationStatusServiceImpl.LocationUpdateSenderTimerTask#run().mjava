		@Override
		public void run() {
			LogUtils.debugf(this, "checking for monitor status updates");
			final Date startDate = lastUpdated;
			final Date endDate   = new Date();

			final Map<String,OnmsMonitoringLocationDefinition> definitions = new HashMap<String,OnmsMonitoringLocationDefinition>();

			// check for any monitors that have changed status
			for (OnmsMonitoringLocationDefinition def : m_locationDao.findAllMonitoringLocationDefinitions()) {
				for (OnmsLocationMonitor mon : m_locationDao.findByLocationDefinition(def)) {
					final MonitorStatus status = m_monitorStatuses.get(mon.getDefinitionName());
					if (status == null || !status.equals(mon.getStatus())) {
						definitions.put(def.getName(), def);
						m_monitorStatuses.put(def.getName(), mon.getStatus());
					}
				}
			}

			// check for any definitions that have status updates
			for (final OnmsLocationSpecificStatus status : m_locationDao.getStatusChangesBetween(startDate, endDate)) {
				final String definitionName = status.getLocationMonitor().getDefinitionName();
				if (!definitions.containsKey(definitionName)) {
					definitions.put(definitionName, m_locationDao.findMonitoringLocationDefinition(definitionName));
				}
			}

			for (final OnmsMonitoringLocationDefinition def : definitions.values()) {
				final Location location = getLocation(def);
				LogUtils.debugf(this, "pushing location update: %s", location.getName());
				addEvent(Location.LOCATION_EVENT_DOMAIN, location);
			}

			lastUpdated = endDate;
		}

