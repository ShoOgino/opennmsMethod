	/** {@inheritDoc} */
	public GWTLatLng geocode(final String geolocation) throws GeocoderException {
		final HttpUriRequest method = new HttpGet(getUrl(geolocation));
		method.addHeader("User-Agent", "OpenNMS-MapQuestGeocoder/1.0");
		method.addHeader("Referer", m_referer);

		try {
			InputStream responseStream = m_httpClient.execute(method).getEntity().getContent();
			final ElementTree tree = ElementTree.fromStream(responseStream);
			if (tree == null) {
				throw new GeocoderException("an error occurred connecting to the MapQuest geocoding service (no XML tree was found)");
			}

			final ElementTree statusCode = tree.find("//statusCode");
			if (statusCode == null || !statusCode.getText().equals("0")) {
				final String code = (statusCode == null? "unknown" : statusCode.getText());
				final ElementTree messageTree = tree.find("//message");
				final String message = (messageTree == null? "unknown" : messageTree.getText());
				throw new GeocoderException(
					"an error occurred when querying MapQuest (statusCode=" + code + ", message=" + message + ")"
				);
			}

			final List<ElementTree> locations = tree.findAll("//location");
			if (locations.size() > 1) {
				LogUtils.warnf(this, "more than one location returned for query: %s", geolocation);
			} else if (locations.size() == 0) {
				throw new GeocoderException("MapQuest returned an OK status code, but no locations");
			}
			final ElementTree location = locations.get(0);

			// first, check the quality
			if (m_minimumQuality != null) {
				final Quality geocodeQuality = Quality.valueOf(location.find("//geocodeQuality").getText().toUpperCase());
				if (geocodeQuality.compareTo(m_minimumQuality) < 0) {
					throw new GeocoderException("response did not meet minimum quality requirement (" + geocodeQuality + " is less specific than " + m_minimumQuality + ")");
				}
			}

			// then, extract the lat/lng
			final ElementTree latLng = location.find("//latLng");
			Double latitude = Double.valueOf(latLng.find("//lat").getText());
			Double longitude = Double.valueOf(latLng.find("//lng").getText());
			return new GWTLatLng(latitude, longitude);
		} catch (GeocoderException e) {
			throw e;
		} catch (Exception e) {
			throw new GeocoderException("unable to get lat/lng from MapQuest", e);
		}
	}

