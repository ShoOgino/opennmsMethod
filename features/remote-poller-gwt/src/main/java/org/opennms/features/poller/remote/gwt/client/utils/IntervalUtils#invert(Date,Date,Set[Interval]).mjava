    public static Set<Interval> invert(final Date beginning, final Date end, final Set<Interval> intervals) {
        if (intervals.size() == 0) {
            final Set<Interval> newIntervals = getIntervalSet();
            newIntervals.add(new Interval(beginning.getTime(), end.getTime()));
            return newIntervals;
        } else if (intervals.size() == 1) {
            final Interval interval = intervals.iterator().next();
            if (interval.getStartMillis() == beginning.getTime() && interval.getEndMillis() == end.getTime()) {
                return getIntervalSet();
            }
        }
        final Set<Interval> preIntervals = getIntervalSet();
        preIntervals.addAll(intervals);
        final Set<Interval> invertedIntervals = getIntervalSet();

        Interval lastInterval = null;
        for (final Interval interval : preIntervals) {
            if (lastInterval == null) {
                if (interval.getStartMillis() > beginning.getTime()) {
                    final Interval i = new Interval(beginning.getTime(), interval.getStartMillis());
//                    System.err.println("adding " + i);
                    invertedIntervals.add(i);
                }
                lastInterval = new Interval(interval.getEndMillis(), interval.getEndMillis());
            } else if (interval.getStartMillis() > lastInterval.getEndMillis()) {
                final Interval i = new Interval(lastInterval.getStartMillis(), interval.getStartMillis());
//                System.err.println("adding " + i);
                invertedIntervals.add(i);
                lastInterval = new Interval(interval.getEndMillis(), interval.getEndMillis());
            }
        }
        if (lastInterval != null && lastInterval.getEndMillis() < end.getTime()) {
            final Interval i = new Interval(lastInterval.getEndMillis(), end.getTime());
//            System.err.println("adding " + i);
            invertedIntervals.add(i);
        } else if (lastInterval == null) {
            invertedIntervals.add(new Interval(beginning.getTime(), end.getTime()));
        }
        return invertedIntervals;
    }

