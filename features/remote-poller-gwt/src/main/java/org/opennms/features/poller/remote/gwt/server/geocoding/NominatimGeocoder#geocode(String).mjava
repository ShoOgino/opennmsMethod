	/** {@inheritDoc} */
	public GWTLatLng geocode(final String geolocation) throws GeocoderException {
		final Date now = new Date();
		final long difference = now.getTime() - m_lastRequest.getTime();
		m_lastRequest = now;
		if (difference < m_rateLimit) {
			try {
				LogUtils.tracef(this, "waiting %d milliseconds for the next request", difference);
				Thread.sleep(difference);
			} catch (InterruptedException e) {
				LogUtils.warnf(this, e, "thread was interrupted while sleeping");
				Thread.currentThread().interrupt();
			}
		}

		final HttpUriRequest method = new HttpGet(getUrl(geolocation));
		method.addHeader("User-Agent", "OpenNMS-MapquestGeocoder/1.0");
		if (m_referer != null) {
			method.addHeader("Referer", m_referer);
		}

		try {
			InputStream responseStream = m_httpClient.execute(method).getEntity().getContent();
			final ElementTree tree = ElementTree.fromStream(responseStream);
			if (tree == null) {
				throw new GeocoderException("an error occurred connecting to the Nominatim geocoding service (no XML tree was found)");
			}
			
			final List<ElementTree> places = tree.findAll("//place");
			if (places.size() > 1) {
				LogUtils.warnf(this, "more than one location returned for query: %s", geolocation);
			} else if (places.size() == 0) {
				throw new GeocoderException("Nominatim returned an OK status code, but no places");
			}
			final ElementTree place = places.get(0);

			Double latitude = Double.valueOf(place.getAttribute("lat"));
			Double longitude = Double.valueOf(place.getAttribute("lon"));
			return new GWTLatLng(latitude, longitude);
		} catch (GeocoderException e) {
			throw e;
		} catch (Exception e) {
			throw new GeocoderException("unable to get lat/lng from Nominatim", e);
		}
	}

