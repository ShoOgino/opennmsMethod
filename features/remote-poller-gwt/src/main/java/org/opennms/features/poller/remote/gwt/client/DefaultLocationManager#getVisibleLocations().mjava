    /**
     * TODO: Figure out if this public function is necessary or if we can get
     * by just responding to incoming events.
     */
    public ArrayList<LocationInfo> getVisibleLocations() {
        // Use an ArrayList so that it has good random-access efficiency
        // since the pageable lists use get() to fetch based on index.
        final ArrayList<LocationInfo> visibleLocations = new ArrayList<LocationInfo>();
        for (final LocationInfo location : m_locations.values()) {
            final GWTMarkerState markerState = location.getMarkerState();
            GWTBounds mapBounds = m_mapPanel.getBounds();
            if (markerState.isSelected() && mapBounds.contains(markerState.getLatLng()) && markerState.isVisible()) {
                visibleLocations.add(location);
            }
        }

        // TODO: this should use the current filter set eventually, for now
        // sort by priority, then name
        // for now, LocationInfo is Comparable and has a natural sort ordering
        // based on status, priority, and name
        Collections.sort(visibleLocations, new Comparator<LocationInfo>() {
            public int compare(LocationInfo o1, LocationInfo o2) {
                return o1.compareTo(o2);
            }
        });

        return visibleLocations;
    }

