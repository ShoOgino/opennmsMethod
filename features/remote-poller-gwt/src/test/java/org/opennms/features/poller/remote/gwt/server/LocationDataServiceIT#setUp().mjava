    @Before
    public void setUp() throws Exception {
        Properties p = new Properties();
        p.setProperty("log4j.logger.org.hibernate", "INFO");
        p.setProperty("log4j.logger.org.hibernate.SQL", "DEBUG");
        MockLogAppender.setupLogging(p);

        LocationDef location = new LocationDef("RDU", "East Coast", new String[] { "example1" }, new String[0], "Research Triangle Park, NC", 35.715751f, -79.16262f, 1L, "odd");
        m_monitoringLocationDao.saveOrUpdate(location);

        OnmsApplication app = new OnmsApplication();
        app.setName("TestApp1");
        m_applicationDao.saveOrUpdate(app);

        OnmsNode localhostNode = new OnmsNode("localhost");
        m_nodeDao.saveOrUpdate(localhostNode);
        OnmsNode googleNode = new OnmsNode("google");
        m_nodeDao.saveOrUpdate(googleNode);

        OnmsIpInterface localhostIpInterface = new OnmsIpInterface(addr("127.0.0.1"), localhostNode);
        m_ipInterfaceDao.saveOrUpdate(localhostIpInterface);
        OnmsIpInterface googleIpInterface = new OnmsIpInterface(addr("66.249.80.104"), googleNode);
        m_ipInterfaceDao.saveOrUpdate(googleIpInterface);

        OnmsServiceType httpServiceType = new OnmsServiceType("HTTP");
        m_serviceTypeDao.saveOrUpdate(httpServiceType);

        m_localhostHttpService = createService(app, localhostIpInterface, httpServiceType);
        m_googleHttpService = createService(app, googleIpInterface, httpServiceType);

        m_rduMonitor1 = new OnmsLocationMonitor();
        m_rduMonitor1.setId(UUID.randomUUID().toString());
        m_rduMonitor1.setLocation("RDU");
        m_rduMonitor1.setLastUpdated(m_pollingEnd);
        m_rduMonitor1.setStatus(MonitorStatus.STARTED);
        m_locationMonitorDao.saveOrUpdate(m_rduMonitor1);

        m_rduMonitor2 = new OnmsLocationMonitor();
        m_rduMonitor2.setId(UUID.randomUUID().toString());
        m_rduMonitor2.setLocation("RDU");
        m_rduMonitor2.setLastUpdated(m_pollingEnd);
        m_rduMonitor2.setStatus(MonitorStatus.STARTED);
        m_locationMonitorDao.saveOrUpdate(m_rduMonitor2);
        
        m_applicationDao.flush();
        m_distPollerDao.flush();
        m_nodeDao.flush();
        m_ipInterfaceDao.flush();
        m_serviceTypeDao.flush();
        m_monitoredServiceDao.flush();
        m_locationMonitorDao.flush();

        OnmsApplication onmsApp = m_applicationDao.findByName("TestApp1");
        assertTrue(onmsApp.equals(app));

        assertEquals("Count of applications associated with services is wrong", 1, m_localhostHttpService.getApplications().size());
        assertEquals("Count of applications associated with services is wrong", 1, m_googleHttpService.getApplications().size());
        assertEquals("Count of services associated with application is wrong", 2, app.getMonitoredServices().size());
        m_pollingEnd = new Date();
        m_pollingStart = new Date(m_pollingEnd.getTime() - (1000 * 60 * 60 * 24));
    }

