	@Test
	public void testMarkerStatusSomeReportDownStatus() {
		Collection<GWTLocationMonitor> monitors = new ArrayList<>();
		Collection<GWTLocationSpecificStatus> statuses = new ArrayList<>();
		
		int httpServiceId = ++count;
		int ftpServiceId = ++count;

		GWTLocationMonitor monitor = getMonitor("STARTED");
		monitors.add(monitor);

		GWTLocationSpecificStatus status = new GWTLocationSpecificStatus();
		status.setId(++count);
		status.setLocationMonitor(monitor);
		status.setMonitoredService(getService(httpServiceId, "HTTP"));
		status.setPollResult(GWTPollResult.available(100));
		statuses.add(status);

		status = new GWTLocationSpecificStatus();
		status.setId(++count);
		status.setLocationMonitor(monitor);
		status.setMonitoredService(getService(ftpServiceId, "FTP"));
		status.setPollResult(GWTPollResult.down("failure to yield to oncoming traffic"));
		statuses.add(status);

		monitor = getMonitor("STARTED");
		monitors.add(monitor);

		status = new GWTLocationSpecificStatus();
		status.setId(++count);
		status.setLocationMonitor(monitor);
		status.setMonitoredService(getService(httpServiceId, "HTTP"));
		status.setPollResult(GWTPollResult.down("trouble in paradise"));
		statuses.add(status);

		status = new GWTLocationSpecificStatus();
		status.setId(++count);
		status.setLocationMonitor(monitor);
		status.setMonitoredService(getService(ftpServiceId, "FTP"));
		status.setPollResult(GWTPollResult.available(150));
		statuses.add(status);

		LocationMonitorState lms = new LocationMonitorState(monitors, statuses);
		assertEquals("status should be marginal when some services are down", Status.MARGINAL, lms.getStatusDetails().getStatus());
	}

