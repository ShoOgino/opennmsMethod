    private CollectionSet collect(Collection collection, List<Group> groups, String path) {
        // Create the agent
        OnmsNode node = mock(OnmsNode.class);
        OnmsIpInterface iface = mock(OnmsIpInterface.class);
        when(iface.getNode()).thenReturn(node);
        when(iface.getIpAddress()).thenReturn(InetAddressUtils.getLocalHostAddress());

        IpInterfaceDao ifaceDao = mock(IpInterfaceDao.class);
        when(ifaceDao.load(1)).thenReturn(iface);
        PlatformTransactionManager transMgr = mock(PlatformTransactionManager.class);
        final CollectionAgent agent = DefaultCollectionAgent.create(1, ifaceDao, transMgr);

        PrometheusDataCollectionConfigDao collectionDao = mock(PrometheusDataCollectionConfigDao.class);
        when(collectionDao.getCollectionByName(any())).thenReturn(collection);
        when(collectionDao.getGroupsForCollection(collection)).thenReturn(groups);
        collector.setPrometheusCollectionDao(collectionDao);

        try {
            Map<String, Object> serviceParams = new ImmutableMap.Builder<String, Object>()
                    .put("collection", "default")
                    .put("url", String.format("http://127.0.0.1:%d/" + path, wireMockRule.port()))
                    .build();
            Map<String, Object> runtimeParams = collector.getRuntimeAttributes(agent, serviceParams);
            Map<String, Object> allParams = new HashMap<>();
            allParams.putAll(serviceParams);
            allParams.putAll(runtimeParams);

            return collector.collect(agent, allParams);
        } catch (CollectionException e) {
            throw new RuntimeException(e);
        }
    }

