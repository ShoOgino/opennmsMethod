    @Test
    public void canCollectFlinkTaskMetrics() {
        // Define our configuration
        Collection collection = new Collection();
        Group flinkTask = new Group();
        flinkTask.setName("flink-task");
        flinkTask.setFilterExp("name matches 'flink_taskmanager_job_task_.*'");
        flinkTask.setGroupByExp("labels[task_id]");
        flinkTask.setResourceType("flinkTask");

        NumericAttribute attribute = new NumericAttribute();
        attribute.setAliasExp("name.substring('flink_taskmanager_job_task_'.length())");
        flinkTask.getNumericAttribute().add(attribute);

        StringAttribute taskNameStringAttribute = new StringAttribute();
        taskNameStringAttribute.setAlias("task_name");
        taskNameStringAttribute.setValueExp("labels[task_name]");
        flinkTask.getStringAttribute().add(taskNameStringAttribute);

        StringAttribute jobIdAttribute = new StringAttribute();
        jobIdAttribute.setAlias("job_id");
        jobIdAttribute.setValueExp("labels[job_id]");
        flinkTask.getStringAttribute().add(jobIdAttribute);

        // Define the resource type
        ResourceType resourceType = createStandardResourceType("flinkTask");
        ResourceTypeMapper.getInstance().setResourceTypeMapper((rt) -> resourceType);

        // Collect!
        CollectionSet collectionSet = collectNephronMetrics(collection, flinkTask);

        // Verify
        List<String> collectionSetKeys = CollectionSetUtils.flatten(collectionSet);
        assertThat(collectionSetKeys, hasSize(629));
        assertThat(collectionSetKeys, hasItem("0/flinkTask/058ef95d84f46825bd5592f3e3fc122a/flink-task/numRecorOutPerSecon[null,0.1]"));
        assertThat(collectionSetKeys, hasItem("0/flinkTask/058ef95d84f46825bd5592f3e3fc122a/flink-task/task_name[FlowAnalyzer_CalculateFlowStatistics_CalculateTopHostsByExporterAndInterface_CalculateTopHostsByExporterAndInterface_top_k_per_key____FlowAnalyzer_CalculateFlowStatistics_CalculateTopHostsByExporterAndInterface_CalculateTopHostsByExporterAndInterface_flatten_Values_Map_ParMultiDo_Anonymous_____FlowAnalyzer_CalculateFlowStatistics_CalculateTopHostsByExporterAndInterface_CalculateTopHostsByExporterAndInterface_top_k_for_window_ParMultiDo_Anonymous_,null]"));
    }

