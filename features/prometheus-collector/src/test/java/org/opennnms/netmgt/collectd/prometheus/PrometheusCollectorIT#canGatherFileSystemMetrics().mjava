    @Test
    public void canGatherFileSystemMetrics() {
        // Define our configuration
        Collection collection = new Collection();
        Group nodeExporterCpu = new Group();
        nodeExporterCpu.setName("node-exporter-filesystems");
        nodeExporterCpu.setFilterExp("name matches 'node_filesystem_.*' and labels[mountpoint] matches '.*home'");
        nodeExporterCpu.setGroupByExp("labels[mountpoint]");
        nodeExporterCpu.setResourceType("nodeExporterFilesytem");

        NumericAttribute attribute = new NumericAttribute();
        attribute.setAliasExp("name.substring('node_filesystem_'.length())");
        nodeExporterCpu.getNumericAttribute().add(attribute);

        StringAttribute fsTypeStringAttribute = new StringAttribute();
        fsTypeStringAttribute.setAlias("fstype");
        fsTypeStringAttribute.setValueExp("labels[fstype]");
        nodeExporterCpu.getStringAttribute().add(fsTypeStringAttribute);

        StringAttribute deviceStringAttribute = new StringAttribute();
        deviceStringAttribute.setAlias("device");
        deviceStringAttribute.setValueExp("labels[device]");
        nodeExporterCpu.getStringAttribute().add(deviceStringAttribute);

        // Define the resource type
        ResourceType resourceType = createStandardResourceType("nodeExporterFilesytem");
        ResourceTypeMapper.getInstance().setResourceTypeMapper((rt) -> resourceType);

        // Collect!
        CollectionSet collectionSet = collect(collection, Lists.newArrayList(nodeExporterCpu));

        // Verify
        List<String> collectionSetKeys = CollectionSetUtils.flatten(collectionSet);
        assertThat(collectionSetKeys, hasSize(8));
        assertThat(collectionSetKeys, hasItem("0/nodeExporterFilesytem/_rootfs_home/node-exporter-filesystems/files[null,2.4420352E7]"));
        assertThat(collectionSetKeys, hasItem("0/nodeExporterFilesytem/_rootfs_home/node-exporter-filesystems/device[/dev/mapper/optical-home,null]"));
    }

