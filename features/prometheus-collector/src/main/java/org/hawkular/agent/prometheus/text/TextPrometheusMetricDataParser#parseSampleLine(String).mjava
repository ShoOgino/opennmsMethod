    private TextSample parseSampleLine(String line) {
        // algorithm from parser.py
        StringBuilder name = new StringBuilder();
        StringBuilder labelname = new StringBuilder();
        StringBuilder labelvalue = new StringBuilder();
        StringBuilder value = new StringBuilder();
        Map<String, String> labels = new LinkedHashMap<>();

        String state = "name";

        for (int c = 0; c < line.length(); c++) {
            char charAt = line.charAt(c);
            if (state.equals("name")) {
                if (charAt == '{') {
                    state = "startoflabelname";
                } else if (charAt == ' ' || charAt == '\t') {
                    state = "endofname";
                } else {
                    name.append(charAt);
                }
            } else if (state.equals("endofname")) {
                if (charAt == ' ' || charAt == '\t') {
                    // do nothing
                } else if (charAt == '{') {
                    state = "startoflabelname";
                } else {
                    value.append(charAt);
                    state = "value";
                }
            } else if (state.equals("startoflabelname")) {
                if (charAt == ' ' || charAt == '\t') {
                    // do nothing
                } else if (charAt == '}') {
                    state = "endoflabels";
                } else {
                    labelname.append(charAt);
                    state = "labelname";
                }
            } else if (state.equals("labelname")) {
                if (charAt == '=') {
                    state = "labelvaluequote";
                } else if (charAt == '}') {
                    state = "endoflabels";
                } else if (charAt == ' ' || charAt == '\t') {
                    state = "labelvalueequals";
                } else {
                    labelname.append(charAt);
                }
            } else if (state.equals("labelvalueequals")) {
                if (charAt == '=') {
                    state = "labelvaluequote";
                } else if (charAt == ' ' || charAt == '\t') {
                    // do nothing
                } else {
                    throw new IllegalStateException("Invalid line: " + line);
                }
            } else if (state.equals("labelvaluequote")) {
                if (charAt == '"') {
                    state = "labelvalue";
                } else if (charAt == ' ' || charAt == '\t') {
                    // do nothing
                } else {
                    throw new IllegalStateException("Invalid line: " + line);
                }
            } else if (state.equals("labelvalue")) {
                if (charAt == '\\') {
                    state = "labelvalueslash";
                } else if (charAt == '"') {
                    labels.put(labelname.toString(), labelvalue.toString());
                    labelname.setLength(0);
                    labelvalue.setLength(0);
                    state = "nextlabel";
                } else {
                    labelvalue.append(charAt);
                }
            } else if (state.equals("labelvalueslash")) {
                state = "labelvalue";
                if (charAt == '\\') {
                    labelvalue.append('\\');
                } else if (charAt == 'n') {
                    labelvalue.append('\n');
                } else if (charAt == '"') {
                    labelvalue.append('"');
                } else {
                    labelvalue.append('\\').append(charAt);
                }
            } else if (state.equals("nextlabel")) {
                if (charAt == ',') {
                    state = "labelname";
                } else if (charAt == '}') {
                    state = "endoflabels";
                } else if (charAt == ' ' || charAt == '\t') {
                    // do nothing
                } else {
                    throw new IllegalStateException("Invalid line: " + line);
                }
            } else if (state.equals("endoflabels")) {
                if (charAt == ' ' || charAt == '\t') {
                    // do nothing
                } else {
                    value.append(charAt);
                    state = "value";
                }
            } else if (state.equals("value")) {
                if (charAt == ' ' || charAt == '\t') {
                    break; // timestamps are NOT supported - ignoring
                } else {
                    value.append(charAt);
                }
            }
        }

        TextSample sample = new TextSample.Builder()
                .setLine(line)
                .setName(name.toString())
                .setValue(value.toString())
                .addLabels(labels).build();

        return sample;
    }

