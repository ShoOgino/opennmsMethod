    public static void scrape(URI uri, Map<String, Object> parameters, MetricCollectingWalker walker) throws IOException {
        try (HttpClientWrapper httpClientWrapper = createHttpClientFromParmMap(parameters)) {
            final HttpGet get = new HttpGet(uri);
            get.setHeader(HttpHeaders.ACCEPT, DEFAULT_ACCEPT_HEADER);
            // Derive additional headers from the parameter map
            parameters.forEach((k,v) -> {
                if (k.startsWith(HEADER_PREFIX_PARM_KEY) && v instanceof String) {
                    String headerName = k.substring(HEADER_PREFIX_PARM_KEY.length());
                    get.setHeader(headerName, (String)v);
                }
            });

            try(CloseableHttpResponse response = httpClientWrapper.execute(get)) {
                final HttpEntity entity = response.getEntity();
                if (entity == null) {
                    throw new IOException("No HTTP response entity from URL " + uri);
                }
                PrometheusMetricsProcessor<?> processor = new TextPrometheusMetricsProcessor(entity.getContent(), walker);
                processor.walk();
            }
        }
    }

