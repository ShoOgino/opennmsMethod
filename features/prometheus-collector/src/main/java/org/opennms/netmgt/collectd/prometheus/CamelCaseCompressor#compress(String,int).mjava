    public static String compress(String input, int maxLen) {
        if (input == null) {
            return null;
        }

        int len = input.length();
        if (len <= maxLen) {
            return input;
        }

        // Split the string into components
        final String[] components = StringUtils.splitByCharacterTypeCamelCase(input);

        // Determine the number of characters we need to remove
        int numCharactersToRemove = Arrays.stream(components).mapToInt(String::length).sum() - maxLen;

        // Build a priority queue of the components, larger elements have higher priority
        PriorityQueue<Component> q = new PriorityQueue<>();
        int i = 0;
        for (String component : components) {
            q.add(new Component(i++, component));
        }

        // Remove a character from the largest string until we've removed enough characters
        while (numCharactersToRemove > 0) {
            Component component = q.remove();
            if (!component.removeCharacter()) {
                continue;
            }
            q.add(component);
            numCharactersToRemove--;
        }

        // Rebuild the string
        return q.stream().sorted(Comparator.comparing(c -> c.index))
                .map(c -> c.value).collect(Collectors.joining());
    }

