	/**
	 * Test collector.
	 *
	 * @throws Exception the exception
	 */
	@Test
	public void testCollector() throws Exception {
		Map<String,Object> parameters = new HashMap<String,Object>();
		parameters.put("collection", "default");

		// Create Collection Set
		TcaCollector collector = new TcaCollector();
		collector.setConfigDao(m_configDao);
		collector.initialize(new HashMap<String,String>());
		collector.initialize(m_collectionAgent, parameters);
		OneToOnePersister persister = new OneToOnePersister(new ServiceParameters(parameters), collector.getRrdRepository("default"));

		// Setup SNMP Value Handling
		SnmpValueFactory valFac = SnmpUtils.getValueFactory();
		SnmpObjId peer1 = SnmpObjId.get(".1.3.6.1.4.1.27091.3.1.6.1.2.171.19.37.60");
		SnmpObjId peer2 = SnmpObjId.get(".1.3.6.1.4.1.27091.3.1.6.1.2.171.19.38.70");

		// Collect and Persist Data - Step 1
		CollectionSet collectionSet = collector.collect(m_collectionAgent, null, parameters);
		validateCollectionSet(collectionSet);
		collectionSet.visit(persister);

		// Generate new SNMP Data
		StringBuffer sb = new StringBuffer("|25|");
		long ts = 1327451787l;
		for (int i = 0; i < 25; i++) {
			sb.append(ts++);
			sb.append(",12,-1,12,-2,1|");
		}

		// Get Current Values
		SnmpValue v1a = SnmpUtils.get(m_collectionAgent.getAgentConfig(), peer1);
		SnmpValue v2a = SnmpUtils.get(m_collectionAgent.getAgentConfig(), peer2);

		// Set New Values
		SnmpUtils.set(m_collectionAgent.getAgentConfig(), peer1, valFac.getOctetString(sb.toString().getBytes()));
		SnmpUtils.set(m_collectionAgent.getAgentConfig(), peer2, valFac.getOctetString(sb.toString().getBytes()));

		// Validate New Values
		SnmpValue v1b = SnmpUtils.get(m_collectionAgent.getAgentConfig(), peer1);
		SnmpValue v2b = SnmpUtils.get(m_collectionAgent.getAgentConfig(), peer2);
		Assert.assertFalse(v1a.toDisplayString().equals(v1b.toDisplayString()));
		Assert.assertFalse(v2a.toDisplayString().equals(v2b.toDisplayString()));

		// Collect and Persist Data - Step 2
		collectionSet = collector.collect(m_collectionAgent, null, parameters);
		validateCollectionSet(collectionSet);
		collectionSet.visit(persister);

		// Validate Persisted Data
		RrdDb jrb = new RrdDb(TEST_SNMP_DIR + "/1/" + TcaCollectionResource.RESOURCE_TYPE_NAME + "/171.19.37.60/" + TcaCollectionSet.INBOUND_DELAY + RrdUtils.getExtension());

		// According with the Fixed Step
		Assert.assertEquals(1, jrb.getArchive(0).getArcStep());

		// According with the Sample Data
		Assert.assertEquals(ts - 1, jrb.getArchive(0).getEndTime());
		Robin inboundDelay = jrb.getArchive(0).getRobin(0);
		for (int i = inboundDelay.getSize() - 49; i < inboundDelay.getSize() - 25; i++) {
			Assert.assertEquals(new Double(11), Double.valueOf(inboundDelay.getValue(i)));
		}
		for (int i = inboundDelay.getSize() - 24; i < inboundDelay.getSize(); i++) {
			Assert.assertEquals(new Double(12), Double.valueOf(inboundDelay.getValue(i)));
		}
	}

