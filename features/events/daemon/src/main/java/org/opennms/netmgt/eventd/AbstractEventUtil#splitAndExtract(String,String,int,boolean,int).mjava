	public static String splitAndExtract(String src, String sep, int offset, boolean doRange, int rangeLen) {
		String sepLiteral = Pattern.quote(sep);
		
		// If the src string starts with the separator, lose the first separator
		if (src.startsWith(sep)) {
			src = src.replaceFirst(sepLiteral, "");
		}
		
		String[] components = src.split(sepLiteral);
		int startIndex, endIndex;
		if ((Math.abs(offset) > components.length) || (offset == 0)) {
			return null;
		} else if (offset < 0) {
			startIndex = components.length + offset;
		} else {
			// offset is, by definition, > 0
			startIndex = offset - 1;
		}
		
		endIndex = startIndex;
		
		if (! doRange) {
			return components[startIndex];
		} else if (rangeLen == 0) {
			endIndex = components.length - 1;
		} else if (rangeLen < 0) {
			endIndex = startIndex + 1 + rangeLen;
		} else {
			// rangeLen is, by definition, > 0
			endIndex = startIndex - 1 + rangeLen;
		}
		
		final StringBuilder retVal = new StringBuilder();
		for (int i = startIndex; i <= endIndex; i++) {
			retVal.append(components[i]);
			if (i < endIndex) {
				retVal.append(sep);
			}
		}
		return retVal.toString();
	}

