    /**
     * Parses the input and creates {@link ExpandableToken} to expand it.
     */
    private void parse() {
        tokens.clear();
        String tempInp = input;
        int inpLen = input.length();

        int index1 = -1;
        int index2 = -1;

        // check input string to see if it has any %xxx% substring
        while ((tempInp != null) && ((index1 = tempInp.indexOf(PERCENT)) != -1)) {

            LOG.debug("checking input {}", tempInp);
            // copy till first %
            tokens.add(new ExpandableConstant(tempInp.substring(0, index1)));
            tempInp = tempInp.substring(index1);

            index2 = tempInp.indexOf(PERCENT, 1);
            // If another % character is the next value
            if (index2 == 1) {
                tokens.add(new ExpandableConstant(PERCENT));
                tempInp = tempInp.substring(index2 + 1);
                LOG.debug("Escaped percent %% found in value");
                continue;
            } else if (index2 != -1) {
                // Get the value between the %s
                String parm = tempInp.substring(1, index2);
                LOG.debug("parm: {} found in value", parm);

                // If there's any whitespace in between the % signs, then do not try to
                // expand it with a parameter value
                if (WHITESPACE_PATTERN.matcher(parm).matches()) {
                    tokens.add(new ExpandableConstant(PERCENT));
                    tempInp = tempInp.substring(1);
                    LOG.debug("skipping parm: {} because whitespace found in value", parm);
                    continue;
                }

                tokens.add(new ExpandableParameter(parm, eventUtil));

                if (index2 < (inpLen - 1)) {
                    tempInp = tempInp.substring(index2 + 1);
                } else {
                    tempInp = null;
                }
            } else {
                break;
            }
        }
        if ((index1 == -1 || index2 == -1) && (tempInp != null)) {
            tokens.add(new ExpandableConstant(tempInp));
        }
    }

