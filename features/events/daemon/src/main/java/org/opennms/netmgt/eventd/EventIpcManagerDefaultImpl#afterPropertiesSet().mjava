    /**
     * <p>afterPropertiesSet</p>
     */
    @Override
    public void afterPropertiesSet() {
        Assert.state(m_eventHandlerPool == null, "afterPropertiesSet() has already been called");

        Assert.state(m_eventHandler != null, "eventHandler not set");
        Assert.state(m_handlerPoolSize != null, "handlerPoolSize not set");

        final LinkedBlockingQueue<Runnable> workQueue = m_handlerQueueLength == null ? new LinkedBlockingQueue<>() : new LinkedBlockingQueue<>(m_handlerQueueLength);
        m_registry.remove("eventlogs.queued");
        m_registry.register("eventlogs.queued", new Gauge<Integer>() {
            @Override
            public Integer getValue() {
                return workQueue.size();
            }
        });

        Logging.withPrefix(Eventd.LOG4J_CATEGORY, new Runnable() {

            @Override
            public void run() {
                /**
                 * Create a fixed-size thread pool. The number of threads can be configured by using
                 * the "receivers" attribute in the config. The queue length for the pool can be configured
                 * with the "queueLength" attribute in the config.
                 */
                m_eventHandlerPool = new ThreadPoolExecutor(
                    m_handlerPoolSize,
                    m_handlerPoolSize,
                    0L,
                    TimeUnit.MILLISECONDS,
                    workQueue,
                    new LogPreservingThreadFactory(EventIpcManagerDefaultImpl.class.getSimpleName(), m_handlerPoolSize)
                );
            }
            
        });
    }

