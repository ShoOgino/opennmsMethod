    private Optional<String> process(Log eventLog) {
        // Now that we have a list of events, process them
        final Event[] events = eventLog.getEvents().getEvent();

        // process the events
        Arrays.sort(events, EVENT_COMPARATOR);

        final List<Event> okEvents = new ArrayList<Event>(events.length);

        /*
         * Get the handler and then have it process all
         * the events in the document before moving to the
         * next event handler.
         */
        for (final Event event : events) {
            /*
             * Process the event and log any errors,
             * but don't die on these errors
             */
            try {
                LOG.debug("handling event: {}", event);
                eventForwarder.sendNow(event);
                if (!okEvents.contains(event)) {
                    okEvents.add(event);
                }
            } catch (final Throwable t) {
                LOG.warn("An exception occured while processing an event.", t);
            }
        }

        // Now process the good events and send a receipt message
        boolean hasReceipt = false;
        final EventReceipt receipt = new EventReceipt();

        for (final Event event : okEvents) {
            if (event.getUuid() != null) {
                receipt.addUuid(event.getUuid());
                hasReceipt = true;
            }
        }

        if (hasReceipt) {
            // Transform it to XML and send it to the socket in one call
            final StringWriter writer = new StringWriter();
            JaxbUtils.marshal(receipt, writer);
            writer.flush();
            return Optional.of(writer.toString());
        }
        return Optional.empty();
    }

