    @Override
    public void process(Log eventLog) throws EventProcessorException {
        if (eventLog != null && eventLog.getEvents() != null) {
            final List<Event> eventsInLog = eventLog.getEvents().getEventCollection();
            // This shouldn't happen, but just to be safe...
            if (eventsInLog == null) {
                return;
            }

            // Find the events in the log that need to be persisted
            final List<Event> eventsToPersist = eventsInLog.stream()
                .filter(e -> checkEventSanityAndDoWeProcess(e, "HibernateEventWriter"))
                .collect(Collectors.toList());

            // If there are no events to persist, avoid creating a database transaction
            if (eventsToPersist.size() < 1) {
                return;
            }

            // Time the transaction and insertions
            try (Context context = writeTimer.time()) {
                final AtomicReference<EventProcessorException> exception = new AtomicReference<>();

                m_transactionManager.execute(new TransactionCallbackWithoutResult() {
                    @Override
                    protected void doInTransactionWithoutResult(TransactionStatus status) {
                        for (Event eachEvent : eventsToPersist) {
                            try {
                                process(eventLog.getHeader(), eachEvent);
                            } catch (EventProcessorException e) {
                                exception.set(e);
                                return;
                            }
                        }
                    }
                });

                if (exception.get() != null) {
                    throw exception.get();
                }
            }
        }
    }

