    /**
     * Insert values into the EVENTS table
     * 
     * @exception java.sql.SQLException
     *                Thrown if there is an error adding the event to the
     *                database.
     * @exception java.lang.NullPointerException
     *                Thrown if a required resource cannot be found in the
     *                properties file.
     */
    private void insertEvent(final Header eventHeader, final Event event) {

        OnmsEvent ovent = new OnmsEvent();

        // eventID
        //ovent.setId(event.getDbid());

        // eventUEI
        ovent.setEventUei(EventDatabaseConstants.format(event.getUei(), EVENT_UEI_FIELD_SIZE));

        // nodeID
        if (event.hasNodeid()) {
            ovent.setNode(nodeDao.get(event.getNodeid().intValue()));
        }

        // eventTime
        ovent.setEventTime(event.getTime());

        // eventHost
        // Resolve the event host to a hostname using the ipInterface table
        ovent.setEventHost(EventDatabaseConstants.format(eventUtil.getEventHost(event), EVENT_HOST_FIELD_SIZE));

        // eventSource
        ovent.setEventSource(EventDatabaseConstants.format(event.getSource(), EVENT_SOURCE_FIELD_SIZE));

        // ipAddr
        ovent.setIpAddr(event.getInterfaceAddress());

        // ifindex
        if (event.hasIfIndex()) {
            ovent.setIfIndex(event.getIfIndex());
        } else {
        	ovent.setIfIndex(null);
        }

        // eventDpName
        String dpName = event.getDistPoller();
        if (eventHeader != null && eventHeader.getDpName() != null && !"".equals(eventHeader.getDpName())) {
            dpName = EventDatabaseConstants.format(eventHeader.getDpName(), EVENT_DPNAME_FIELD_SIZE);
        } else if (event.getDistPoller() != null && !"".equals(event.getDistPoller())) {
            dpName = EventDatabaseConstants.format(event.getDistPoller(), EVENT_DPNAME_FIELD_SIZE);
        } else {
            dpName = "localhost";
        }
        ovent.setDistPoller(distPollerDao.get(dpName));

        // eventSnmpHost
        ovent.setEventSnmpHost(EventDatabaseConstants.format(event.getSnmphost(), EVENT_SNMPHOST_FIELD_SIZE));

        // service
        ovent.setServiceType(serviceTypeDao.findByName(event.getService()));

        // eventSnmp
        ovent.setEventSnmp(event.getSnmp() == null ? null : SnmpInfo.format(event.getSnmp(), EVENT_SNMP_FIELD_SIZE));

        // eventParms
        // Replace any null bytes with a space, otherwise postgres will complain about encoding in UNICODE
        final String parametersString = EventParameterUtils.format(event);
        ovent.setEventParms(EventDatabaseConstants.format(parametersString, 0));

        // eventCreateTime
        // TODO: Should we use event.getCreationTime() here?
        ovent.setEventCreateTime(new Date());

        // eventDescr
        ovent.setEventDescr(EventDatabaseConstants.format(event.getDescr(), 0));

        // eventLoggroup
        ovent.setEventLogGroup(event.getLoggroupCount() > 0 ? EventDatabaseConstants.format(event.getLoggroup(), EVENT_LOGGRP_FIELD_SIZE) : null);

        // eventLogMsg
        // eventLog
        // eventDisplay
        if (event.getLogmsg() != null) {
            // set log message
            ovent.setEventLogMsg(EventDatabaseConstants.format(event.getLogmsg().getContent(), 0));
            String logdest = event.getLogmsg().getDest();
            if ("logndisplay".equals(logdest)) {
                // if 'logndisplay' set both log and display column to yes
                ovent.setEventLog(String.valueOf(MSG_YES));
                ovent.setEventDisplay(String.valueOf(MSG_YES));
            } else if ("logonly".equals(logdest)) {
                // if 'logonly' set log column to true
                ovent.setEventLog(String.valueOf(MSG_YES));
                ovent.setEventDisplay(String.valueOf(MSG_NO));
            } else if ("displayonly".equals(logdest)) {
                // if 'displayonly' set display column to true
                ovent.setEventLog(String.valueOf(MSG_NO));
                ovent.setEventDisplay(String.valueOf(MSG_YES));
            } else if ("suppress".equals(logdest)) {
                // if 'suppress' set both log and display to false
                ovent.setEventLog(String.valueOf(MSG_NO));
                ovent.setEventDisplay(String.valueOf(MSG_NO));
            }
        } else {
            ovent.setEventLogMsg(null);
            ovent.setEventLog(String.valueOf(MSG_YES));
            ovent.setEventDisplay(String.valueOf(MSG_YES));
        }

        // eventSeverity
        ovent.setEventSeverity(OnmsSeverity.get(event.getSeverity()).getId());

        // eventPathOutage
        ovent.setEventPathOutage(event.getPathoutage() != null ? EventDatabaseConstants.format(event.getPathoutage(), EVENT_PATHOUTAGE_FIELD_SIZE) : null);

        // eventCorrelation
        ovent.setEventCorrelation(event.getCorrelation() != null ? Correlation.format(event.getCorrelation(), EVENT_CORRELATION_FIELD_SIZE) : null);

        // eventSuppressedCount
        ovent.setEventSuppressedCount(null);

        // eventOperInstruct
        ovent.setEventOperInstruct(EventDatabaseConstants.format(event.getOperinstruct(), EVENT_OPERINSTRUCT_FIELD_SIZE));

        // eventAutoAction
        ovent.setEventAutoAction(event.getAutoactionCount() > 0 ? AutoAction.format(event.getAutoaction(), EVENT_AUTOACTION_FIELD_SIZE) : null);

        // eventOperAction / eventOperActionMenuText
        if (event.getOperactionCount() > 0) {
            final List<Operaction> a = new ArrayList<Operaction>();
            final List<String> b = new ArrayList<String>();

            for (final Operaction eoa : event.getOperactionCollection()) {
                a.add(eoa);
                b.add(eoa.getMenutext());
            }
            ovent.setEventOperAction(OperatorAction.format(a, EVENT_OPERACTION_FIELD_SIZE));
            ovent.setEventOperActionMenuText(EventDatabaseConstants.format(b, EVENT_OPERACTION_FIELD_SIZE));
        } else {
            ovent.setEventOperAction(null);
            ovent.setEventOperActionMenuText(null);
        }

        // eventNotification, this column no longer needed
        ovent.setEventNotification(null);

        // eventTroubleTicket / eventTroubleTicket state
        if (event.getTticket() != null) {
            ovent.setEventTTicket(EventDatabaseConstants.format(event.getTticket().getContent(), EVENT_TTICKET_FIELD_SIZE));
            ovent.setEventTTicketState("on".equals(event.getTticket().getState()) ? 1 : 0);
        } else {
            ovent.setEventTTicket(null);
            ovent.setEventTTicketState(null);
        }

        // eventForward
        ovent.setEventForward(event.getForwardCount() > 0 ? Forward.format(event.getForward(), EVENT_FORWARD_FIELD_SIZE) : null);

        // eventmouseOverText
        ovent.setEventMouseOverText(EventDatabaseConstants.format(event.getMouseovertext(), EVENT_MOUSEOVERTEXT_FIELD_SIZE));

        // eventAckUser
        if (event.getAutoacknowledge() != null && "on".equals(event.getAutoacknowledge().getState())) {
            ovent.setEventAckUser(EventDatabaseConstants.format(event.getAutoacknowledge().getContent(), EVENT_ACKUSER_FIELD_SIZE));
            // eventAckTime - if autoacknowledge is present,
            // set time to event create time
            ovent.setEventAckTime(ovent.getEventCreateTime());
        } else {
            ovent.setEventAckUser(null);
            ovent.setEventAckTime(null);
        }

        eventDao.save(ovent);
        eventDao.flush();

        // Update the event with the database ID of the event stored in the database
        event.setDbid(ovent.getId());
    }

