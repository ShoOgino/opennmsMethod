        /**
         * Process the received events. For each event, use the EventExpander to
         * look up matching eventconf entry and load info from that match, expand
         * event parms, add event to database and send event to appropriate
         * listeners.
         */
        @Override
        public void run() {
            Events events = m_eventLog.getEvents();
            if (events == null || events.getEventCount() <= 0) {
                // no events to process
                return;
            }

            for (final Event event : events.getEventCollection()) {
                if (event.getNodeid() == 0) {
                    final Parm foreignSource = event.getParm("_foreignSource");
                    if (foreignSource != null && foreignSource.getValue() != null) {
                        final Parm foreignId = event.getParm("_foreignId");
                        if (foreignId != null && foreignId.getValue() != null) {
                            final OnmsNode node = getNodeDao().findByForeignId(foreignSource.getValue().getContent(), foreignId.getValue().getContent());
                            if (node != null) {
                                event.setNodeid(node.getId().longValue());
                            } else {
                                LOG.warn("Can't find node associated with foreignSource {} and foreignId {}", foreignSource, foreignId);
                            }
                        }
                    }
                }

                if (LOG.isInfoEnabled() && getLogEventSummaries()) {
                    LOG.info("Received event: UEI={}, src={}, iface={}, svc={}, time={}, parms={}", event.getUei(), event.getSource(), event.getInterface(), event.getService(), event.getTime(), getPrettyParms(event));
                }

                if (LOG.isDebugEnabled()) {
                    // Log the uei, source, and other important aspects
                    final String uuid = event.getUuid();
                    LOG.debug("Event {");
                    LOG.debug("  uuid  = {}", (uuid != null && uuid.length() > 0 ? uuid : "<not-set>"));
                    LOG.debug("  uei   = {}", event.getUei());
                    LOG.debug("  src   = {}", event.getSource());
                    LOG.debug("  iface = {}", event.getInterface());
                    LOG.debug("  svc   = {}", event.getService());
                    LOG.debug("  time  = {}", event.getTime());
                    // NMS-8413: I'm seeing a ConcurrentModificationException in the logs here,
                    // copy the parm collection to avoid this
                    List<Parm> parms = new ArrayList<>(event.getParmCollection());
                    if (parms.size() > 0) {
                        LOG.debug("  parms {");
                        for (final Parm parm : parms) {
                            if ((parm.getParmName() != null) && (parm.getValue().getContent() != null)) {
                                LOG.debug("    ({}, {})", parm.getParmName().trim(), parm.getValue().getContent().trim());
                            }
                        }
                        LOG.debug("  }");
                    }
                    LOG.debug("}");
                }
            }

            try (Timer.Context context = processTimer.time()) {
                for (final EventProcessor eventProcessor : m_eventProcessors) {
                    try {
                        eventProcessor.process(m_eventLog, m_synchronous);
                        logSizes.update(events.getEventCount());
                    } catch (EventProcessorException e) {
                        LOG.warn("Unable to process event using processor {}; not processing with any later processors.", eventProcessor, e);
                        break;
                    } catch (Throwable t) {
                        LOG.warn("Unknown exception processing event with processor {}; not processing with any later processors.", eventProcessor, t);
                        break;
                    }
                }
            }
        }

