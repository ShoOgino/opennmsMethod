    public void testOptionalParameters() {
        String uei = "uei.opennms.org/testEventWithOptionalParameters";
        EventBuilder builder = new EventBuilder(uei, "something");
        builder.addParam("worst-framework-ever", "Vaadin");
        Event event = builder.getEvent();

        EventExpander expander = new EventExpander();
        expander.setEventConfDao(m_eventConfDao);
        expander.afterPropertiesSet();

        org.opennms.netmgt.xml.eventconf.Event eventConfig = new org.opennms.netmgt.xml.eventconf.Event();
        eventConfig.setUei(uei);
        org.opennms.netmgt.xml.eventconf.Parameter p1 = new org.opennms.netmgt.xml.eventconf.Parameter();
        p1.setName("username");
        p1.setValue("agalue");
        eventConfig.addParameter(p1);
        org.opennms.netmgt.xml.eventconf.Parameter p2 = new org.opennms.netmgt.xml.eventconf.Parameter();
        p2.setName("i-hate");
        p2.setValue("%parm[#1]%");
        p2.setExpand(true);
        eventConfig.addParameter(p2);

        EasyMock.expect(m_eventConfDao.findByEvent(event)).andReturn(eventConfig);
        EasyMock.expect(m_eventConfDao.isSecureTag(EasyMock.anyObject())).andReturn(true).anyTimes();
        EventUtil eventUtil = m_mocks.createMock(EventUtil.class);
        EasyMock.expect(eventUtil.expandParms("%parm[#1]%", event, new HashMap<String,Map<String,String>>())).andReturn("Vaadin");
        m_mocks.replayAll();
        AbstractEventUtil.setInstance(eventUtil);

        expander.expandEvent(event);

        assertEquals("event UEI", uei, event.getUei());
        assertEquals("parameters count", 3, event.getParmCollection().size());
        assertNotNull(event.getParm("username"));
        assertEquals("parameter value", "agalue", event.getParm("username").getValue().getContent());
        assertEquals("parameter value", "Vaadin", event.getParm("i-hate").getValue().getContent());
    }

