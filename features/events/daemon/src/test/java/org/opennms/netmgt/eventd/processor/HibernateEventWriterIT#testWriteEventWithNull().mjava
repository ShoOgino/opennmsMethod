    /**
     * Tests writing nulls to postgres db and the db encoding.
     * @throws SQLException
     */
    @Test
    public void testWriteEventWithNull() throws Exception {
        EventBuilder bldr = new EventBuilder("testUei", "testSource");
        bldr.setLogDest(HibernateEventWriter.LOG_MSG_DEST_LOG_AND_DISPLAY);
        bldr.addParam("test", "testVal");
        final String testVal2 = "valWith\u0000Null\u0000";
        bldr.addParam("test2", testVal2);

        byte[] bytes = new byte[] { 0x07, (byte)0xD7, 0x04, 0x0A, 0x01, 0x17, 0x06, 0x00, 0x2B, 0x00, 0x00 };


        SnmpValue snmpVal = SnmpUtils.getValueFactory().getOctetString(bytes);

        assertFalse(snmpVal.isDisplayable());

        bldr.addParam("test3", snmpVal.toString());

        String b64 = EventConstants.toString(EventConstants.XML_ENCODING_BASE64, snmpVal);

        bldr.addParam("test", b64);

        Event event = bldr.getEvent();
        assertEquals(new Integer(0), event.getDbid());
        m_eventWriter.process(bldr.getLog());
        assertTrue(event.getDbid() > 0);

        final List<Map<String, Object>> parameters = jdbcTemplate.queryForList("SELECT name, value FROM event_parameters WHERE eventID = " + event.getDbid() + " ORDER BY name");
        assertEquals(3, parameters.size());

        assertEquals("test", parameters.get(0).get("name"));
        assertEquals("B9cECgEXBgArAAA%61", parameters.get(0).get("value"));

        assertEquals("test2", parameters.get(1).get("name"));
        assertEquals("valWith%0Null%0", parameters.get(1).get("value"));

        assertEquals("test3", parameters.get(2).get("name"));
        assertEquals(snmpVal.toString(), parameters.get(2).get("value"));
    }

