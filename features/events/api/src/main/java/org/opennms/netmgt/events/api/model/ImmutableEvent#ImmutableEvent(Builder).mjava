    private ImmutableEvent(Builder builder) {
        uuid = builder.uuid;
        dbId = builder.dbId;
        distPoller = builder.distPoller;
        creationTime = builder.creationTime;
        masterStation = builder.masterStation;
        mask = ImmutableMask.immutableCopy(builder.mask);
        uei = builder.uei;
        source = builder.source;
        nodeid = builder.nodeid;
        time = builder.time;
        host = builder.host;
        interfaceAddress = builder.interfaceAddress;
        interfaceString = builder.interfaceString;
        snmpHost = builder.snmpHost;
        service = builder.service;
        snmp = ImmutableSnmp.immutableCopy(builder.snmp);
        parms = ImmutableCollections.with(ImmutableParm::immutableCopy).newList(builder.parms);
        descr = builder.descr;
        logMsg = ImmutableLogMsg.immutableCopy(builder.logMsg);
        severity = builder.severity;
        pathOutage = builder.pathOutage;
        correlation = ImmutableCorrelation.immutableCopy(builder.correlation);
        operInstruct = builder.operInstruct;
        autoActionList = ImmutableCollections.with(ImmutableAutoAction::immutableCopy).newList(builder.autoActionList);
        operActionList = ImmutableCollections.with(ImmutableOperAction::immutableCopy).newList(builder.operActionList);
        autoAcknowledge = ImmutableAutoAcknowledge.immutableCopy(builder.autoAcknowledge);
        logGroupList = ImmutableCollections.newListOfImmutableType(builder.logGroupList);
        tTicket = ImmutableTticket.immutableCopy(builder.tTicket);
        forwardList = ImmutableCollections.with(ImmutableForward::immutableCopy).newList(builder.forwardList);
        scriptList = ImmutableCollections.with(ImmutableScript::immutableCopy).newList(builder.scriptList);
        ifIndex = builder.ifIndex;
        ifAlias = builder.ifAlias;
        mouseOverText = builder.mouseOverText;
        alarmData = ImmutableAlarmData.immutableCopy(builder.alarmData);
    }

