	/**
	 * The cause of NMS-9522 was that the parser tree generation
	 * was considering the {@code %{STRING:timezone}} and 
	 * {@code %{STRING:hostname}} clauses as identical because the 
	 * {@code m_resultConsumer} function wasn't
	 * being taken into account in the {@code equals()} method for
	 * the parser stages.
	 * 
	 * @see https://issues.opennms.org/browse/NMS-9522
	 */
	@Test
	public void testHostnameVersusTimezoneNms9522() {
		RadixTreeParser radixParser = new RadixTreeParser();
		// Put the more-precise timezone match first in the parser tree
		radixParser.teach(GrokParserStageSequenceBuilder.parseGrok("<%{INT:facilityPriority}> %{MONTH:month} %{INT:day} %{INT:hour}:%{INT:minute}:%{INT:second} %{STRING:timezone} %{NOSPACE:processName}[%{INT:processId}]: %{STRING:message}").toArray(new ParserStage[0]));
		radixParser.teach(GrokParserStageSequenceBuilder.parseGrok("<%{INT:facilityPriority}> %{MONTH:month} %{INT:day} %{INT:hour}:%{INT:minute}:%{INT:second} %{STRING:hostname} %{NOSPACE:processName}[%{INT:processId}]: %{STRING:message}").toArray(new ParserStage[0]));

		System.out.println("Parser tree: " + radixParser.tree.toString());
		System.out.println("Parser tree size: " + radixParser.tree.size());

		verifyNms9522Message1(radixParser);
		verifyNms9522Message2(radixParser);

		radixParser.performEdgeCompression();

		System.out.println("Parser tree (after compression): " + radixParser.tree.toString());
		System.out.println("Parser tree size (after compression): " + radixParser.tree.size());

		// Make sure that everything works after edge compression as well
		verifyNms9522Message1(radixParser);
		verifyNms9522Message2(radixParser);
	}

