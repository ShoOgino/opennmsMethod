	@Test
	public void testSyslogd() throws Exception {

		final MockEndpoint broadcastSyslog = getMockEndpoint("mock:kafka:127.0.0.1:" + kafkaPort, false);
		broadcastSyslog.setExpectedMessageCount(1);

		// Create a mock SyslogdConfig
		final SyslogConfigBean config = new SyslogConfigBean();
		config.setSyslogPort(10514);
		config.setNewSuspectOnMessage(false);

		final byte[] messageBytes = "<34>main: 2010-08-19 localhost foo0: load test 0 on tty1\0".getBytes("US-ASCII");

		final UUID systemId = UUID.randomUUID();

		//ProducerTemplate template = syslogd.createProducerTemplate();
		final SyslogConnection connection = new SyslogConnection(
			InetAddressUtils.ONE_TWENTY_SEVEN,
			2000,
			ByteBuffer.wrap(messageBytes),
			config,
			systemId.toString(),
			MonitoringLocationDao.DEFAULT_MONITORING_LOCATION_ID
		);
		template.sendBody( "seda:handleMessage", connection);

		assertMockEndpointsSatisfied();

		// Check that the input for the Kafka endpoint matches
		// the SyslogConnection that we created
		final String trapDtoXml = broadcastSyslog.getReceivedExchanges().get(0).getIn().getBody(String.class);
		assertNotNull(trapDtoXml);

		final SyslogConnection result = SyslogDTOToObjectProcessor.dto2object(
			JaxbUtils.unmarshal(SyslogDTO.class, trapDtoXml)
		);
		assertEquals(InetAddressUtils.ONE_TWENTY_SEVEN, result.getSourceAddress());
		assertEquals(2000, result.getPort());
		assertTrue(Arrays.equals(result.getBytes(), messageBytes));
		assertEquals(systemId.toString(), result.getSystemId());
	}

