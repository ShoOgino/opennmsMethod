	@Test
	public void testMe() throws Exception {

		MockLogAppender.setupLogging(true, "INFO");

		String abc = "<190>Mar 11 08:35:17 127.0.0.1 30128311[4]: Mar 11 08:35:16.844 CST: %SEC-6-IPACCESSLOGP: list in110 denied tcp 192.168.10.100(63923) -> 192.168.11.128(1521), 1 packet";
		//String abc = "<190>Mar 11 08:35:17 127.0.0.1 30128311: Mar 11 08:35:16.844 CST: %SEC-6-IPACCESSLOGP: list in110 denied tcp 192.168.10.100(63923) -> 192.168.11.128(1521), 1 packet";
		ByteBuffer incoming = ByteBuffer.wrap(abc.getBytes());

		List<ParserStage> grokStages = GrokParserStageSequenceBuilder.parseGrok("<%{INTEGER:facilityPriority}> %{MONTH:month} %{INTEGER:day} %{INTEGER:hour}:%{INTEGER:minute}:%{INTEGER:second} %{STRING:hostname} %{STRING:processName}[%{INTEGER:processId}]: %{MONTH:month} %{INTEGER:day} %{STRING:timestamp} %{STRING:timezone} \\%%{STRING:facility}-%{INTEGER:priority}-%{STRING:mnemonic}: %{STRING:message}");
		//BufferParserFactory grokFactory = parseGrok("<%{INTEGER:facilityPriority}> %{MONTH:month} %{INTEGER:day} %{INTEGER:hour}:%{INTEGER:minute}:%{INTEGER:second} %{STRING:hostname} %{STRING:processName}: %{MONTH:month} %{INTEGER:day} %{STRING:timestamp} %{STRING:timezone} \\%%{STRING:facility}-%{INTEGER:priority}-%{STRING:mnemonic}: %{STRING:message}");
		ByteBufferParser<Event> grokParser = new SingleSequenceParser(grokStages);

		// SyslogNG format
		List<ParserStage> parserStages = new ParserStageSequenceBuilder()
			.intBetweenDelimiters('<', '>', (s,v) -> {
				String facilityTxt = SyslogFacility.getFacilityForCode(v).toString();
				String priorityTxt = SyslogSeverity.getSeverityForCode(v).toString();

				s.builder.setParam("service", facilityTxt);
				s.builder.setParam("severity", priorityTxt);
				s.builder.setUei("uei.opennms.org/syslogd/" + facilityTxt + "/" + priorityTxt);
			})
			.whitespace()
			.monthString((s,v) -> { s.builder.setMonth(v); })
			.whitespace()
			.integer((s,v) -> { s.builder.setDayOfMonth(v); })
			.whitespace()
			.integer((s,v) -> { s.builder.setHourOfDay(v); })
			.character(':')
			.integer((s,v) -> { s.builder.setMinute(v); })
			.character(':')
			.integer((s,v) -> { s.builder.setSecond(v); })
			.whitespace()
			// TODO: This is not correct
			.stringUntilWhitespace((s,v) -> { s.builder.setHost(v); })
			.whitespace()
			.stringUntil("\\s[:", (s,v) -> { s.builder.addParam("processName", v); })
			.optional().character('[')
			.optional().integer((s,v) -> { s.builder.addParam("processId", v); })
			.optional().character(']')
			.optional().character(':')
			.whitespace()
			.stringUntilWhitespace(null) // Original month
			.whitespace()
			.integer(null) // Original day
			.whitespace()
			.stringUntilWhitespace(null) // Original timestamp
			.whitespace()
			.stringUntilWhitespace(null) // Original time zone
			.whitespace()
			.character('%')
			.stringUntilChar('-', (s,v) -> { s.builder.addParam("facility", v); })
			.character('-')
			.stringUntilChar('-', (s,v) -> { s.builder.addParam("severity", v); })
			.character('-')
			.stringUntilChar(':', (s,v) -> { s.builder.addParam("mnemonic", v); })
			.character(':')
			.whitespace()
			.terminal().string((s,v) -> {
				s.builder.setLogMessage(v);
				// Using parms provides configurability.
				s.builder.setParam("syslogmessage", v);
			 })
			.getStages()
			;
		ByteBufferParser<Event> parser = new SingleSequenceParser(parserStages);

		RadixTreeParser radixParser = new RadixTreeParser();
		//radixParser.teach(grokStages.toArray(new ParserStage[0]));
		radixParser.teach(GrokParserStageSequenceBuilder.parseGrok("<%{INTEGER:facilityPriority}>%{INTEGER:version} %{STRING:isotimestamp} %{STRING:hostname} %{STRING:processName} %{STRING:processId} %{STRING:messageId} [%{STRING:structureddata}][%{STRING:structureddata}] %{STRING:message}").toArray(new ParserStage[0]));
		radixParser.teach(GrokParserStageSequenceBuilder.parseGrok("<%{INTEGER:facilityPriority}>%{INTEGER:version} %{STRING:isotimestamp} %{STRING:hostname} %{STRING:processName} %{STRING:processId} %{STRING:messageId} [%{STRING:structureddata}][%{STRING:structureddata}]").toArray(new ParserStage[0]));
		radixParser.teach(GrokParserStageSequenceBuilder.parseGrok("<%{INTEGER:facilityPriority}>%{INTEGER:version} %{STRING:isotimestamp} %{STRING:hostname} %{STRING:processName} %{STRING:processId} %{STRING:messageId} [%{STRING:structureddata}] %{STRING:message}").toArray(new ParserStage[0]));
		radixParser.teach(GrokParserStageSequenceBuilder.parseGrok("<%{INTEGER:facilityPriority}>%{INTEGER:version} %{STRING:isotimestamp} %{STRING:hostname} %{STRING:processName} %{STRING:processId} %{STRING:messageId} %{STRING:structureddata} %{STRING:message}").toArray(new ParserStage[0]));

		radixParser.teach(GrokParserStageSequenceBuilder.parseGrok("<%{INTEGER:facilityPriority}>%{STRING:messageId}: %{MONTH:month} %{INTEGER:day} %{INTEGER:hour}:%{INTEGER:minute}:%{INTEGER:second} %{STRING:hostname} %{STRING:processName}[%{INTEGER:processId}]: %{STRING:message}").toArray(new ParserStage[0]));
		radixParser.teach(GrokParserStageSequenceBuilder.parseGrok("<%{INTEGER:facilityPriority}>%{MONTH:month} %{INTEGER:day} %{INTEGER:hour}:%{INTEGER:minute}:%{INTEGER:second} %{STRING:hostname} %{STRING:processName}[%{INTEGER:processId}]: %{STRING:message}").toArray(new ParserStage[0]));
		radixParser.teach(GrokParserStageSequenceBuilder.parseGrok("<%{INTEGER:facilityPriority}>%{STRING:messageId}: %{MONTH:month} %{INTEGER:day} %{INTEGER:hour}:%{INTEGER:minute}:%{INTEGER:second} %{STRING:hostname} [%{INTEGER:processId}]: %{STRING:message}").toArray(new ParserStage[0]));
		radixParser.teach(GrokParserStageSequenceBuilder.parseGrok("<%{INTEGER:facilityPriority}>%{MONTH:month} %{INTEGER:day} %{INTEGER:hour}:%{INTEGER:minute}:%{INTEGER:second} %{STRING:hostname} %{STRING:processName}: %{STRING:message}").toArray(new ParserStage[0]));
		radixParser.teach(GrokParserStageSequenceBuilder.parseGrok("<%{INTEGER:facilityPriority}>%{MONTH:month} %{INTEGER:day} %{INTEGER:hour}:%{INTEGER:minute}:%{INTEGER:second} %{STRING:hostname} [%{INTEGER:processId}]: %{STRING:message}").toArray(new ParserStage[0]));
		radixParser.teach(GrokParserStageSequenceBuilder.parseGrok("<%{INTEGER:facilityPriority}>%{STRING:messageId}: %{MONTH:month} %{INTEGER:day} %{INTEGER:hour}:%{INTEGER:minute}:%{INTEGER:second} %{STRING:hostname} %{STRING:processName}: %{STRING:message}").toArray(new ParserStage[0]));
		radixParser.teach(GrokParserStageSequenceBuilder.parseGrok("<%{INTEGER:facilityPriority}>%{STRING:messageId}: %{STRING:repeatedmonth} %{INTEGER:repeatedday} %{INTEGER:repeatedhour}:%{INTEGER:repeatedminute}:%{INTEGER:repeatedsecond} %{STRING:hostname} %{STRING:processName}[%{INTEGER:processId}]: %{STRING:message}").toArray(new ParserStage[0]));
		radixParser.teach(GrokParserStageSequenceBuilder.parseGrok("<%{INTEGER:facilityPriority}>%{STRING:messageId}: %{MONTH:month} %{INTEGER:day} %{INTEGER:hour}:%{INTEGER:minute}:%{INTEGER:second} %{STRING:hostname} %{STRING:message}").toArray(new ParserStage[0]));
		radixParser.teach(GrokParserStageSequenceBuilder.parseGrok("<%{INTEGER:facilityPriority}>%{MONTH:month} %{INTEGER:day} %{INTEGER:hour}:%{INTEGER:minute}:%{INTEGER:second} %{STRING:hostname} %{STRING:message}").toArray(new ParserStage[0]));
		radixParser.teach(GrokParserStageSequenceBuilder.parseGrok("<%{INTEGER:facilityPriority}>%{STRING:messageId}: %{INTEGER:year}-%{INTEGER:month}-%{INTEGER:day} %{STRING:hostname} %{STRING:processName}[%{INTEGER:processId}]: %{STRING:message}").toArray(new ParserStage[0]));
		radixParser.teach(GrokParserStageSequenceBuilder.parseGrok("<%{INTEGER:facilityPriority}> %{INTEGER:year}-%{INTEGER:month}-%{INTEGER:day} %{STRING:hostname} %{STRING:processName}[%{INTEGER:processId}]: %{STRING:message}").toArray(new ParserStage[0]));
		radixParser.teach(GrokParserStageSequenceBuilder.parseGrok("<%{INTEGER:facilityPriority}>%{STRING:messageId}: %{INTEGER:year}-%{INTEGER:month}-%{INTEGER:day} %{STRING:hostname} [%{INTEGER:processId}]: %{STRING:message}").toArray(new ParserStage[0]));
		radixParser.teach(GrokParserStageSequenceBuilder.parseGrok("<%{INTEGER:facilityPriority}> %{INTEGER:year}-%{INTEGER:month}-%{INTEGER:day} %{STRING:hostname} %{STRING:processName}: %{STRING:message}").toArray(new ParserStage[0]));
		radixParser.teach(GrokParserStageSequenceBuilder.parseGrok("<%{INTEGER:facilityPriority}> %{INTEGER:year}-%{INTEGER:month}-%{INTEGER:day} %{STRING:hostname} [%{INTEGER:processId}]: %{STRING:message}").toArray(new ParserStage[0]));
		radixParser.teach(GrokParserStageSequenceBuilder.parseGrok("<%{INTEGER:facilityPriority}>%{STRING:messageId}: %{INTEGER:year}-%{INTEGER:month}-%{INTEGER:day} %{STRING:hostname} %{STRING:processName}: %{STRING:message}").toArray(new ParserStage[0]));
		radixParser.teach(GrokParserStageSequenceBuilder.parseGrok("<%{INTEGER:facilityPriority}>%{STRING:messageId}: %{INTEGER:year}-%{INTEGER:month}-%{INTEGER:day} %{STRING:hostname} %{STRING:message}").toArray(new ParserStage[0]));
		radixParser.teach(GrokParserStageSequenceBuilder.parseGrok("<%{INTEGER:facilityPriority}> %{INTEGER:year}-%{INTEGER:month}-%{INTEGER:day} %{STRING:hostname} %{STRING:message}").toArray(new ParserStage[0]));

		int iterations = 100000;

		{
			CompletableFuture<EventBuilder> event = null;
			Event lastEvent = null;
			long start = System.currentTimeMillis();
			for (int i = 0; i < iterations; i++) {
				event = radixParser.parse(incoming.asReadOnlyBuffer());
				event.whenComplete((e, ex) -> {
					if (ex == null) {
						//System.out.println(e.toString());
					} else {
						ex.printStackTrace();
					}
				});
			}
			// Wait for the last future to complete
			try {
				lastEvent = event.get().getEvent();
			} catch (InterruptedException | ExecutionException e) {
				e.printStackTrace();
			}
			long end = System.currentTimeMillis();
			System.out.println("RADIX: " + (end - start) + "ms");
			System.out.println(lastEvent.toString());
		}

		{
			CompletableFuture<Event> event = null;
			long start = System.currentTimeMillis();
			for (int i = 0; i < iterations; i++) {
				event = parser.parse(incoming.asReadOnlyBuffer());
				event.whenComplete((e, ex) -> {
					if (ex == null) {
						//System.out.println(e.toString());
					} else {
						ex.printStackTrace();
					}
				});
			}
			// Wait for the last future to complete
			try {
				event.get();
			} catch (InterruptedException | ExecutionException e) {
				e.printStackTrace();
			}
			long end = System.currentTimeMillis();
			System.out.println("NEW: " + (end - start) + "ms");
		}

		{
			CompletableFuture<Event> event = null;
			long start = System.currentTimeMillis();
			for (int i = 0; i < iterations; i++) {
				event = grokParser.parse(incoming.asReadOnlyBuffer());
				event.whenComplete((e, ex) -> {
					if (ex == null) {
						//System.out.println(e.toString());
					} else {
						ex.printStackTrace();
					}
				});
			}
			// Wait for the last future to complete
			try {
				event.get();
			} catch (InterruptedException | ExecutionException e) {
				e.printStackTrace();
			}
			long end = System.currentTimeMillis();
			System.out.println("GROK: " + (end - start) + "ms");
		}

		{
			InputStream stream = ConfigurationTestUtils.getInputStreamForResource(this, "/etc/syslogd-syslogng-configuration.xml");
			SyslogdConfig config = new SyslogdConfigFactory(stream);

			long start = System.currentTimeMillis();
			for (int i = 0; i < iterations; i++) {
				ConvertToEvent convertToEvent = new ConvertToEvent(
					DistPollerDao.DEFAULT_DIST_POLLER_ID,
					MonitoringLocationDao.DEFAULT_MONITORING_LOCATION_ID,
					InetAddressUtils.ONE_TWENTY_SEVEN,
					9999,
					incoming, 
					config
				);
				Event convertedEvent = convertToEvent.getEvent();
			}
			long end = System.currentTimeMillis();
			System.out.println("OLD: " + (end - start) + "ms");
		}

		{
			InputStream stream = ConfigurationTestUtils.getInputStreamForResource(this, "/etc/syslogd-radix-configuration.xml");
			SyslogdConfig config = new SyslogdConfigFactory(stream);

			long start = System.currentTimeMillis();
			for (int i = 0; i < iterations; i++) {
				ConvertToEvent convertToEvent = new ConvertToEvent(
					DistPollerDao.DEFAULT_DIST_POLLER_ID,
					MonitoringLocationDao.DEFAULT_MONITORING_LOCATION_ID,
					InetAddressUtils.ONE_TWENTY_SEVEN,
					9999,
					incoming, 
					config
				);
				Event convertedEvent = convertToEvent.getEvent();
			}
			long end = System.currentTimeMillis();
			System.out.println("RADIX CONVERT: " + (end - start) + "ms");
		}
	}

