	@Test
	public void testParserStages() throws InterruptedException, ExecutionException {
		ParserStage a = new MatchChar('a');
		ParserStage b = new MatchChar('b');
		ParserStage c = new MatchChar('c');
		ParserStage d = new MatchChar('d');

//		c.setTerminal(true);
		d.setTerminal(true);

//		RadixTree<ParserStage> tree = new RadixTreeImpl<>();
//		tree.addChildren(new ParserStage[] { a, c });
//		tree.addChildren(new ParserStage[] { b, d });


//		ParserStageCompletableFutureVisitor visitor = new ParserStageCompletableFutureVisitor();
//		visitor.visit(tree);
//
//		System.out.println(visitor.stages);
//
//		ParserState state = visitor.getParserFunction().apply();
//		System.out.println(state);

		ParserState state = new ParserState(ByteBuffer.wrap("bc".getBytes()), new EventBuilder("uei.opennms.org/test", this.getClass().getSimpleName()));

		final List<CompletableFuture<ParserState>> futures = new ArrayList<>();

		// Top of future tree is parser state
		final CompletableFuture<ParserState> parent = CompletableFuture.completedFuture(state);

		// Iterate over children
		{
			CompletableFuture<ParserState> current = parent.thenApply(a::apply);
			// If children.length > 0
			// recurse(current)
			// else 
			futures.add(current);
		}

		{
			CompletableFuture<ParserState> current = parent.thenApply(b::apply);
			// If children.length > 0
			{
//				List<CompletableFuture<ParserState>> futures2 = new ArrayList<>();
//				futures.add(current.thenApply(a::apply));
//				futures.add(current.thenApply(b::apply));
				futures.add(current.thenApply(c::apply));
				futures.add(current.thenApply(d::apply));
//				CompletableFuture<ParserState> root = firstNonNullResult(futures2);
//				//System.out.println(root.join().builder.getEvent());
//				futures.add(root);
			}
			// else 
//			futures.add(current);
		}

		{
			CompletableFuture<ParserState> current = parent.thenApply(c::apply);
			// If children.length > 0
			// recurse(current)
			// else 
			futures.add(current);
		}

		CompletableFuture<ParserState> root = firstNonNullResult(futures);
		assertNotNull("One pattern should match", root.join());
	}

