	@Test
	public void testSyslogd() throws Exception {
		// Expect one SyslogConnection message to be broadcast on the messaging channel
		MockEndpoint broadcastSyslog = getMockEndpoint("mock:activemq:broadcastSyslog");
		broadcastSyslog.setExpectedMessageCount(1);

		MockEndpoint syslogHandler = getMockEndpoint("mock:seda:syslogHandler");
		syslogHandler.setExpectedMessageCount(1);

		// Create a mock SyslogdConfig
		SyslogConfigBean config = new SyslogConfigBean();
		config.setSyslogPort(10514);
		config.setNewSuspectOnMessage(false);

		// Leave a bunch of config that won't be available on the Minion side blank
		//config.setParser("org.opennms.netmgt.syslogd.CustomSyslogParser");
		//config.setForwardingRegexp("^.*\\s(19|20)\\d\\d([-/.])(0[1-9]|1[012])\\2(0[1-9]|[12][0-9]|3[01])(\\s+)(\\S+)(\\s)(\\S.+)");
		//config.setMatchingGroupHost(6);
		//config.setMatchingGroupMessage(8);
		//config.setDiscardUei("DISCARD-MATCHING-MESSAGES");

		byte[] messageBytes = "<34>main: 2010-08-19 localhost foo0: load test 0 on tty1\0".getBytes("US-ASCII");

		// Send a SyslogConnection
		template.sendBody(
			"activemq:broadcastSyslog",
			JaxbUtils.marshal(new SyslogConnection(InetAddressUtils.ONE_TWENTY_SEVEN, 2000, ByteBuffer.wrap(messageBytes), config))
		);

		assertMockEndpointsSatisfied();

		// Check that the input for the seda:syslogHandler endpoint matches
		// the SyslogConnection that we simulated via ActiveMQ
		SyslogConnection result = syslogHandler.getReceivedExchanges().get(0).getIn().getBody(SyslogConnection.class);
		assertEquals(InetAddressUtils.ONE_TWENTY_SEVEN, result.getSourceAddress());
		assertEquals(2000, result.getPort());
		assertTrue(Arrays.equals(result.getBytes(), messageBytes));

		// Assert that the SyslogdConfig has been updated to the local copy
		// that has been provided as an OSGi service
		assertEquals("DISCARD-MATCHING-MESSAGES", result.getConfig().getDiscardUei());
		assertEquals(4, result.getConfig().getMatchingGroupHost());
		assertEquals(7, result.getConfig().getMatchingGroupMessage());
	}

