    /**
     * This test configures each {@link SyslogParser} type and then
     * executes a variety of syslog messages against all of the parsers.
     * Successful parses are compared against one another to determine if
     * fields are parsed properly.
     * 
     * @throws IOException
     */
    @Test
    public void testCompareImplementations() throws IOException {
        SyslogConfigBean defaultConfig = new SyslogConfigBean();
        defaultConfig.setParser("org.opennms.netmgt.syslogd.CustomSyslogParser");
        defaultConfig.setForwardingRegexp("^.*\\s(19|20)\\d\\d([-/.])(0[1-9]|1[012])\\2(0[1-9]|[12][0-9]|3[01])(\\s+)(\\S+)(\\s)(\\S.+)");
        defaultConfig.setMatchingGroupHost(6);
        defaultConfig.setMatchingGroupMessage(8);
        defaultConfig.setDiscardUei("DISCARD-MATCHING-MESSAGES");

        SyslogConfigBean juniperConfig = new SyslogConfigBean();
        juniperConfig.setParser("org.opennms.netmgt.syslogd.JuniperSyslogParser");
        juniperConfig.setForwardingRegexp("^.*\\s(19|20)\\d\\d([-/.])(0[1-9]|1[012])\\2(0[1-9]|[12][0-9]|3[01])(\\s+)(\\S+)(\\s)(\\S.+)");
        juniperConfig.setMatchingGroupHost(6);
        juniperConfig.setMatchingGroupMessage(8);
        juniperConfig.setDiscardUei("DISCARD-MATCHING-MESSAGES");

        SyslogConfigBean rfc5424Config = new SyslogConfigBean();
        rfc5424Config.setParser("org.opennms.netmgt.syslogd.Rfc5424SyslogParser");
        rfc5424Config.setDiscardUei("DISCARD-MATCHING-MESSAGES");

        SyslogConfigBean syslogNgConfig = new SyslogConfigBean();
        syslogNgConfig.setParser("org.opennms.netmgt.syslogd.SyslogNGParser");
        syslogNgConfig.setDiscardUei("DISCARD-MATCHING-MESSAGES");

        SyslogConfigBean radixConfig = new SyslogConfigBean();
        radixConfig.setParser("org.opennms.netmgt.syslogd.RadixTreeSyslogParser");
        radixConfig.setDiscardUei("DISCARD-MATCHING-MESSAGES");

        final List<String> results = new ArrayList<>();
        Files.lines(ConfigurationTestUtils.getFileForResource(this, "/syslogMessages.txt").toPath()).forEach(syslog -> {
            // Ignore comments and blank lines
            if (syslog == null || syslog.trim().length() == 0 || syslog.trim().startsWith("#")) {
                return;
            }

            // Replace the "\x00" tokens with null characters. This allows us to store the 
            // syslogMessages.txt file as text instead of binary in git
            syslog = syslog.replaceAll("\\x00", "\0");

            final Event[] events = new Event[5];
            try {
                events[0] = parseSyslog("default", defaultConfig, syslog);
                events[1] = parseSyslog("juniper", juniperConfig, syslog);
                events[2] = parseSyslog("rfc5424", rfc5424Config, syslog);
                events[3] = parseSyslog("syslogNg", syslogNgConfig, syslog);
                events[4] = parseSyslog("radixTree", radixConfig, syslog);

                results.add(syslog);
                if (events[0] != null || events[1] != null || events[2] != null || events[3] != null || events[4] != null) {
                    results.add(String.format("%s\t%s\t%s\t%s\t%s", events[0] != null, events[1] != null, events[2] != null, events[3] != null, events[4] != null));
                } else {
                    results.add("PARSING FAILURE");
                }

                if (events[4] == null) {
                    fail("Grok parsing failure: " + syslog);
                }

                List<String> ueis = new ArrayList<>();
                List<Date> times = new ArrayList<>();
                List<Long> nodeIds = new ArrayList<>();
                List<String> interfaces = new ArrayList<>();
                List<String> messageids = new ArrayList<>();
                List<String> logmsgs = new ArrayList<>();
                List<String> syslogmessages = new ArrayList<>();
                List<String> severities = new ArrayList<>();
                List<String> timestamps = new ArrayList<>();
                List<String> processes = new ArrayList<>();
                List<String> services = new ArrayList<>();
                List<String> processids = new ArrayList<>();
                List<Long> parmcounts = new ArrayList<>();

                for (Event event : events) {
                    if (event != null) {
                        ueis.add(event.getUei());
                        times.add(event.getTime());
                        nodeIds.add(event.getNodeid());
                        interfaces.add(event.getInterface());
                        messageids.add(event.getParm("messageid") == null ? null : event.getParm("messageid").getValue().getContent());
                        logmsgs.add(event.getLogmsg().getContent());
                        syslogmessages.add(event.getParm("syslogmessage").getValue().getContent());
                        timestamps.add(event.getParm("timestamp") == null ? null : event.getParm("timestamp").getValue().getContent());
                        // Facility
                        services.add(event.getParm("service").getValue().getContent());
                        // Priority
                        severities.add(event.getParm("severity").getValue().getContent());
                        processes.add(event.getParm("process") == null ? null : event.getParm("process").getValue().getContent());
                        processids.add(event.getParm("processid") == null ? null : event.getParm("processid").getValue().getContent());
                        parmcounts.add((long)event.getParmCollection().size());
                    }
                }

                // Make sure that all parsers that match are emitting the same events
//                assertTrue("UEIs do not match", compare("uei", ueis.toArray(new String[0])));
//                assertTrue("times do not match", compare("time", times.toArray(new Date[0])));
//                assertTrue("nodeIds do not match", compare("nodeId", nodeIds.toArray(new Long[0])));
//                assertTrue("interfaces do not match", compare("interface", interfaces.toArray(new String[0])));
//                assertTrue("messageid parms do not match", compare("messageid", messageids.toArray(new String[0])));
//                assertTrue("severity parms do not match", compare("severity", severities.toArray(new String[0])));
//                assertTrue("timestamp parms do not match", compare("timestamp", timestamps.toArray(new String[0])));
//                assertTrue("process parms do not match", compare("process", processes.toArray(new String[0])));
//                assertTrue("service parms do not match", compare("service", services.toArray(new String[0])));
//                assertTrue("processid parms do not match", compare("processid", processids.toArray(new String[0])));
//                assertTrue("parm counts do not match", compare("parm count", parmcounts.toArray(new Long[0])));
//                assertTrue("logmsgs do not match", compare("logmsg", logmsgs.toArray(new String[0])));
//                assertTrue("syslogmessage parms do not match", compare("syslogmessage", syslogmessages.toArray(new String[0])));
                compare("uei", ueis.toArray(new String[0]));
                compare("time", times.toArray(new Date[0]));
                compare("nodeId", nodeIds.toArray(new Long[0]));
                compare("interface", interfaces.toArray(new String[0]));
                compare("messageid", messageids.toArray(new String[0]));
                compare("severity", severities.toArray(new String[0]));
                compare("timestamp", timestamps.toArray(new String[0]));
                compare("process", processes.toArray(new String[0]));
                compare("service", services.toArray(new String[0]));
                compare("processid", processids.toArray(new String[0]));
                compare("parm count", parmcounts.toArray(new Long[0]));
                compare("logmsg", logmsgs.toArray(new String[0]));
                compare("syslogmessage", syslogmessages.toArray(new String[0]));
            } catch (Throwable e) {
                e.printStackTrace();
                fail("Unexpected exception: " + e.getMessage());
            }
        });

        System.out.println("default\tjuniper\trfc5424\tsys-ng\tradix");
        results.stream().forEach(System.out::println);
    }

