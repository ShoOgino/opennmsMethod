	/**
	 * Gets the correct predicate for matching the given type of host.
	 * 
	 * @param pattern the pattern representing the type of host
	 * @return the predicate
	 */
	private static CharPredicate getHostMatcherForPattern(GrokParserStageSequenceBuilder.GrokPattern pattern) {
		// Match only valid hostname characters ('_' is technically invalid but we use it in tests)
		final List<Character> hostNameCharacters = ImmutableList.of('-', '.', '_');
		final CharPredicate hostNameMatcher = c -> Character.isDigit(c) || Character.isLetter(c) ||
				hostNameCharacters.contains(c);
		// Match only valid IPv4 address characters
		final CharPredicate ipV4AddressMatcher = c -> Character.isDigit(c) || c == '.';
		// Match only valid IPv6 address characters
		final CharPredicate ipV6AddressMatcher = c -> Character.digit(c, 16) >= 0 || c == ':';
		// Match IPv4 or IPv6 address characters
		final CharPredicate ipV4OrV6AddressMatcher = ipV4AddressMatcher.or(ipV6AddressMatcher);
		// Match any characters valid in a hostname or an IPv4 or IPv6 address
		final CharPredicate hostnameOrIPMatcher = hostNameMatcher.or(ipV4OrV6AddressMatcher);

		switch (pattern) {
			case HOSTNAME:
				return hostNameMatcher;
			case HOSTNAMEORIP:
				return hostnameOrIPMatcher;
			case IPADDRESS:
				return ipV4OrV6AddressMatcher;
			default:
				throw new IllegalArgumentException("Unsupported host pattern '" + pattern + "'");
		}
	}

