	/**
	 * This function maps {@link SemanticType} values of type String to {@link EventBuilder}
	 * calls.
	 * 
	 * @param semanticString
	 * @return
	 */
	private static BiConsumer<ParserState,String> semanticStringToEventBuilder(String semanticString) {
		SemanticType semanticType = null;
		try {
			semanticType = SemanticType.valueOf(semanticString);
		} catch (IllegalArgumentException e) {
			// Leave semanticType == null
		}

		if (semanticType == null) {
			return (s,v) -> {
				s.builder.setParam(semanticString, v);
			};
		} else {
			switch(semanticType) {
			case hostname:
				// TODO
				return NOOP;
			case message:
				return (s,v) -> {
					s.builder.setLogMessage(v);
					// Using parms provides configurability.
					s.builder.setParam("syslogmessage", v);
				};
			case messageId:
				// Unique to this parser
				return (s,v) -> {
					s.builder.setParam("messageid", v);
				};
			case processId:
				// processId can be an integer or string
				return (s,v) -> {
					s.builder.setParam("processid", v);
				};
			case processName:
				return (s,v) -> {
					s.builder.setParam("process", v);
				};
			case timezone:
				// TODO
				return NOOP;
			default:
				throw new IllegalArgumentException(String.format("Semantic type %s does not have a string value", semanticString));
			}
		}
	}

