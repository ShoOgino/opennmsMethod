	public static void compressNode(RadixTreeNode<ParserStage> node) {
		if (node.getChildren() != null) {
			switch(node.getChildren().size()) {
			case(0):
				return;
			case(1):
				RadixTreeNode<ParserStage> child = node.getChildren().iterator().next();
				if (node.getContent() instanceof CompositeParserStage) {
					((CompositeParserStage)node.getContent()).members.add(child.getContent());
				} else {
					CompositeParserStage stage = new CompositeParserStage();
					stage.members.add(node.getContent());
					stage.members.add(node.getChildren().iterator().next().getContent());
					node.setContent(stage);
				}
				// Link the child's children to this node
				node.setChildren(child.getChildren());
				// Recompress the node
				compressNode(node);
				break;
			default:
				for (RadixTreeNode<ParserStage> current : node.getChildren()) {
					compressNode(current);
				}
				break;
			}
		}
	}

