	@Test
	//public void main(final String[] args) {
	public void main() throws Exception {

		MockLogAppender.setupLogging(true, "INFO");

		String abc = "<190>Mar 11 08:35:17 127.0.0.1 30128311: Mar 11 08:35:16.844 CST: %SEC-6-IPACCESSLOGP: list in110 denied tcp 192.168.10.100(63923) -> 192.168.11.128(1521), 1 packetZ";
		ByteBuffer incoming = ByteBuffer.wrap(abc.getBytes());

		/***
			CompletableFuture future = CompletableFuture
				    .runAsync(new MatchChar(incoming, '<'), m_executor)
				.thenRunAsync(new MatchInteger(incoming, v -> { facility = SyslogFacility.getFacilityForCode(v); }), m_executor)
				.thenRunAsync(new MatchChar(incoming, '>'), m_executor)
				/ *
				.thenRunAsync(new MatchAny(incoming, System.out::println), m_executor)
				.thenRunAsync(new MatchAny(incoming, System.out::println), m_executor)
				.thenRunAsync(new MatchAny(incoming, System.out::println), m_executor)
				.thenRunAsync(new MatchAny(incoming, System.out::println), m_executor)
				.thenRunAsync(new MatchAny(incoming, System.out::println), m_executor)
				.thenRunAsync(new MatchAny(incoming, System.out::println), m_executor)
				* /
				.thenRunAsync(new MatchAny(incoming), m_executor)
				.thenRunAsync(new MatchAny(incoming), m_executor)
				.thenRunAsync(new MatchAny(incoming), m_executor)
				.thenRunAsync(new MatchAny(incoming), m_executor)
				.thenRunAsync(new MatchAny(incoming), m_executor)
				.thenRunAsync(new MatchAny(incoming), m_executor)
				.thenRunAsync(new MatchWhitespace(incoming), m_executor)
				//.thenRunAsync(new MatchAny(incoming, System.out::println), m_executor)
				.exceptionally(e -> { return null; })
				.thenAccept(v -> {
//					System.out.println("5: " + CamelUtils.nanoTime());
//					System.out.println(event.toString());
					end.set(System.nanoTime());
				});
			;
		***/

		AtomicReference<SyslogFacility> facility = new AtomicReference<>();
		AtomicReference<Integer> year = new AtomicReference<>();
		AtomicReference<Integer> month = new AtomicReference<>();
		AtomicReference<Integer> day = new AtomicReference<>();
		AtomicReference<Integer> hour = new AtomicReference<>();
		AtomicReference<Integer> minute = new AtomicReference<>();
		AtomicReference<Integer> second = new AtomicReference<>();

		// SyslogNG format
		ParserFactory factory = new ParserFactory()
			.intBetweenDelimiters('<', '>', (s,v) -> { facility.set(SyslogFacility.getFacilityForCode(v)); })
			.month((s,v) -> month.set(v))
			.whitespace()
			.integer((s,v) -> day.set(v))
			.whitespace()
			.integer((s,v) -> hour.set(v))
			.character(':')
			.integer((s,v) -> minute.set(v))
			.character(':')
			.integer((s,v) -> second.set(v))
			.whitespace()
			.stringUntilWhitespace((s,v) -> { s.builder.setHost(v); })
			.whitespace()
			.stringUntilWhitespace((s,v) -> { s.builder.addParam("processId", v); })
			.whitespace()
			.stringUntilWhitespace(null) // Original month
			.whitespace()
			.integer(null) // Original day
			.whitespace()
			.stringUntilWhitespace(null) // Original timestamp
			.whitespace()
			.stringUntilWhitespace(null) // Original time zone
			.whitespace()
			.character('%')
			.stringUntilChar('-', (s,v) -> { /* TODO: Set facility */ })
			.character('-')
			.stringUntilChar('-', (s,v) -> { /* TODO: Set severity */ })
			.character('-')
			.stringUntilChar(':', (s,v) -> { /* TODO: Set mnemonic */ })
			.whitespace()
			.stringUntilChar('Z', (s,v) -> { s.builder.setLogMessage(v); })
			;

		int iterations = 100000;

		CompletableFuture<Event> event = null;
		long start = System.currentTimeMillis();
		for (int i = 0; i < iterations; i++) {
			event = factory.parse(incoming.asReadOnlyBuffer(), m_executor);
			event.whenComplete((e, ex) -> {
				if (ex == null) {
					//System.out.println(e.toString());
				} else {
					ex.printStackTrace();
				}
			});
		}
		// Wait for the last future to complete
		try {
			event.get();
		} catch (InterruptedException | ExecutionException e) {
			e.printStackTrace();
		}
		long end = System.currentTimeMillis();
		System.out.println("NEW: " + (end - start) + "ms");

		InputStream stream = ConfigurationTestUtils.getInputStreamForResource(this, "/etc/syslogd-syslogng-configuration.xml");
		SyslogdConfig config = new SyslogdConfigFactory(stream);

		start = System.currentTimeMillis();
		for (int i = 0; i < iterations; i++) {
			ConvertToEvent convertToEvent = new ConvertToEvent(
				DistPollerDao.DEFAULT_DIST_POLLER_ID,
				InetAddressUtils.ONE_TWENTY_SEVEN,
				9999,
				abc, 
				config
			);
			Event event2 = convertToEvent.getEvent();
		}
		end = System.currentTimeMillis();
		System.out.println("OLD: " + (end - start) + "ms");

	}

