    /**
     * The execution context.
     */
    @Override
    public void run() {
        // get the context
        m_context = Thread.currentThread();

        // Get a log instance
        Logging.putPrefix(Syslogd.LOG4J_CATEGORY);

        // Create some metrics
        Meter packetMeter = METRICS.meter(MetricRegistry.name(getClass(), "packets"));
        Meter processorMeter = METRICS.meter(MetricRegistry.name(getClass(), "processors"));
        Meter connectionMeter = METRICS.meter(MetricRegistry.name(getClass(), "connections"));
        Histogram packetSizeHistogram = METRICS.histogram(MetricRegistry.name(getClass(), "packetSize"));

        if (m_stop) {
            LOG.debug("Stop flag set before thread started, exiting");
            return;
        } else {
            LOG.debug("Thread context started");
        }

        m_socketReceivers = m_executorFactory.newExecutor(SOCKET_RECEIVER_THREADS, Integer.MAX_VALUE, "OpenNMS.Syslogd", "socketReceivers");
        m_syslogConnectionExecutor = m_executorFactory.newExecutor(EVENT_PARSER_THREADS, Integer.MAX_VALUE, "OpenNMS.Syslogd", "syslogConnections");
        m_syslogProcessorExecutor = m_executorFactory.newExecutor(EVENT_SENDER_THREADS, Integer.MAX_VALUE, "OpenNMS.Syslogd", "syslogProcessors");

        try {
            LOG.debug("Opening syslog channel...");
            m_channel = openChannel(m_config);
        } catch (IOException e) {
            LOG.warn("An I/O error occured while trying to set the socket timeout", e);
        }

        // set an SO timeout to make sure we don't block forever
        // if a socket is closed.
        try {
            LOG.debug("Setting socket timeout to {}ms", SOCKET_TIMEOUT);
            m_channel.socket().setSoTimeout(SOCKET_TIMEOUT);
        } catch (SocketException e) {
            LOG.warn("An I/O error occured while trying to set the socket timeout", e);
        }

        // Increase the receive buffer for the socket
        try {
            LOG.debug("Attempting to set receive buffer size to {}", Integer.MAX_VALUE);
            m_channel.socket().setReceiveBufferSize(Integer.MAX_VALUE);
            LOG.debug("Actual receive buffer size is {}", m_channel.socket().getReceiveBufferSize());
        } catch (SocketException e) {
            LOG.info("Failed to set the receive buffer to {}", Integer.MAX_VALUE, e);
        }

        for (int i = 0; i < SOCKET_RECEIVER_THREADS; i++) {
            m_socketReceivers.execute(new Runnable() {
                public void run() {

                    // set to avoid numerous tracing message
                    boolean ioInterrupted = false;

                    // now start processing incoming requests
                    while (!m_stop) {
                        if (m_context.isInterrupted()) {
                            LOG.debug("Thread context interrupted");
                            break;
                        }

                        try {
                            /*
                            if (!ioInterrupted) {
                                LOG.debug("Waiting on a datagram to arrive");
                            }
                            */

                            // Check out a ByteBufferMessage
                            final long sequence = m_ringBuffer.next();

                            // Fetch the ByteBufferMessage
                            final ByteBufferMessage message = m_ringBuffer.get(sequence);

                            // Write the datagram into the ByteBuffer
                            final InetSocketAddress source = (InetSocketAddress)m_channel.receive(message.buffer);

                            // Increment the packet counter
                            packetMeter.mark();

                            // Flip the buffer from write to read mode
                            message.buffer.flip();

                            // Create a metric for the syslog packet size
                            packetSizeHistogram.update(message.buffer.remaining());

                            /*
                            CompletableFuture<Void> processPacket = CompletableFuture.supplyAsync(
                                () -> new SyslogConnection(source.getAddress(), source.getPort(), message.buffer, m_config, null),
                                m_syslogConnectionExecutor
                            )
                            .thenApplyAsync(c -> c.call(), m_syslogConnectionExecutor)
                            .thenAcceptAsync(c -> c.call(), m_syslogProcessorExecutor);
                            */

                            SyslogConnection conn = new SyslogConnection(source.getAddress(), source.getPort(), message.buffer, m_config, m_distPollerDao.whoami().getId(), m_distPollerDao.whoami().getLocation());

                            // Convert the syslog packet into an OpenNMS event
                            CompletableFuture<SyslogProcessor> proc = CompletableFuture.supplyAsync(conn::call, m_syslogConnectionExecutor);

                            // After the bytes are converted into an event...
                            proc.thenRun(() -> {
                                // Clear the buffer so that it's ready for writing again
                                message.buffer.clear();

                                if (sequence % 50 == 0) {
                                    LOG.debug("Released 50 more datagrams");
                                }

                                // Release the buffer back to the disruptor
                                m_ringBuffer.publish(sequence);

                                // Increment the counter
                                processorMeter.mark();
                            });

                            // Broadcast the event on the event channel
                            proc.thenAcceptAsync(c -> c.call(), m_syslogProcessorExecutor).thenRun(() -> connectionMeter.mark());

                            // reset the flag
                            ioInterrupted = false; 
                        } catch (SocketTimeoutException e) {
                            ioInterrupted = true;
                            continue;
                        } catch (InterruptedIOException e) {
                            ioInterrupted = true;
                            continue;
                        /*
                        TODO: Figure out how to handle exceptions appropriately in the async code
                        } catch (ExecutionException e) {
                            LOG.error("Task execution failed in {}", this.getClass().getSimpleName(), e);
                            break;
                        } catch (InterruptedException e) {
                            LOG.error("Task interrupted in {}", this.getClass().getSimpleName(), e);
                            break;
                        */
                        } catch (IOException e) {
                            LOG.error("An I/O exception occured on the datagram receipt port, exiting", e);
                            break;
                        }

                    } // end while status OK

                    LOG.debug("Thread context exiting");
                }
            });
        }
    }

