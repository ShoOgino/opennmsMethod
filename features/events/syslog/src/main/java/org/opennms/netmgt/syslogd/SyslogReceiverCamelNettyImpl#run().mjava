    /**
     * The execution context.
     */
    @Override
    public void run() {
        // Setup logging and create the dispatcher
        super.run();

        SimpleRegistry registry = new SimpleRegistry();

        //Adding netty component to camel in order to resolve OSGi loading issues
        NettyComponent nettyComponent = new NettyComponent();
        m_camel = new DefaultCamelContext(registry);

        // Set the context name so that it shows up nicely in JMX
        //
        // @see org.apache.camel.management.DefaultManagementNamingStrategy
        //
        //m_camel.setManagementName("org.opennms.features.events.syslog.listener");
        m_camel.setName("syslogdListenerCamelNettyContext");
        m_camel.setManagementNameStrategy(new DefaultManagementNameStrategy(m_camel, "#name#", null));

        m_camel.addComponent("netty4", nettyComponent);

        m_camel.getShutdownStrategy().setShutdownNowOnTimeout(true);
        m_camel.getShutdownStrategy().setTimeout(15);
        m_camel.getShutdownStrategy().setTimeUnit(TimeUnit.SECONDS);

        try {
            m_camel.addRoutes(new RouteBuilder() {
                @Override
                public void configure() throws Exception {
                    String from = String.format("netty4:udp://%s:%d?sync=false&allowDefaultCodec=false&receiveBufferSize=%d&connectTimeout=%d",
                        InetAddressUtils.str(m_host),
                        m_port,
                        Integer.MAX_VALUE,
                        SOCKET_TIMEOUT
                    );
                    from(from)
                    // Polled via JMX
                    .routeId("syslogListen")
                    .process(new AsyncProcessor() {

                        private SyslogConnection createSyslogConnection(Exchange exchange) {
                            ByteBuf buffer = exchange.getIn().getBody(ByteBuf.class);
                            // NettyConstants.NETTY_REMOTE_ADDRESS is a SocketAddress type but because 
                            // we are listening on an InetAddress, it will always be of type InetAddressSocket
                            InetSocketAddress source = (InetSocketAddress)exchange.getIn().getHeader(NettyConstants.NETTY_REMOTE_ADDRESS); 
                            ByteBuffer byteBuffer = buffer.copy().nioBuffer();
                            return new SyslogConnection(source, byteBuffer);
                        }

                        @Override
                        public void process(Exchange exchange) throws Exception {
                            // Synchronously invoke the dispatcher
                            m_dispatcher.send(createSyslogConnection(exchange)).get();
                        }

                        @Override
                        public boolean process(Exchange exchange, AsyncCallback callback) {
                            m_dispatcher.send(createSyslogConnection(exchange)).whenComplete((r,e) -> {
                                if (e != null) {
                                    exchange.setException(e);
                                }
                                callback.done(false); 
                            });
                            return false;
                        }
                    });
                }
            });
            m_camel.start();
        } catch (Throwable e) {
            LOG.error("Could not configure Camel routes for syslog receiver", e);
        }
    }

