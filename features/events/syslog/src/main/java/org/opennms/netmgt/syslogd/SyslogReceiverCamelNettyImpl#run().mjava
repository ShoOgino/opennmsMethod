    /**
     * The execution context.
     */
    @Override
    public void run() {
        // Get a log instance
        Logging.putPrefix(Syslogd.LOG4J_CATEGORY);

        // Create some metrics
        Meter packetMeter = METRICS.meter(MetricRegistry.name(getClass(), "packets"));
        Meter connectionMeter = METRICS.meter(MetricRegistry.name(getClass(), "connections"));
        Histogram packetSizeHistogram = METRICS.histogram(MetricRegistry.name(getClass(), "packetSize"));

        SimpleRegistry registry = new SimpleRegistry();
        registry.put("syslogDispatcher", syslogDispatcher);

        //Adding netty component to camel inorder to resolve OSGi loading issues
        NettyComponent nettyComponent = new NettyComponent();
        m_camel = new DefaultCamelContext(registry);
        // Set the context name so that it shows up nicely in JMX
        m_camel.setName("org.opennms.features.events.syslog.listener.camel-netty");
        m_camel.addComponent("netty", nettyComponent);
        

        try {
            m_camel.addRoutes(new RouteBuilder() {
                @Override
                public void configure() throws Exception {
                    String from = String.format("netty:udp://%s:%s?sync=false&allowDefaultCodec=false&receiveBufferSize=%d&connectTimeout=%d",
                        InetAddressUtils.str(m_host),
                        m_port,
                        Integer.MAX_VALUE,
                        SOCKET_TIMEOUT
                    );
                    
                    from(from)
                    //.convertBodyTo(java.nio.ByteBuffer.class)
                    .process(new Processor() {
                        @Override
                        public void process(Exchange exchange) throws Exception {
                            ChannelBuffer buffer = exchange.getIn().getBody(ChannelBuffer.class);
                            // NettyConstants.NETTY_REMOTE_ADDRESS is a SocketAddress type but because 
                            // we are listening on an InetAddress, it will always be of type InetAddressSocket
                            InetSocketAddress source = (InetSocketAddress)exchange.getIn().getHeader(NettyConstants.NETTY_REMOTE_ADDRESS); 
                            // Syslog Handler Implementation to receive message from syslog port and pass it on to handler
                            
                            ByteBuffer byteBuffer = buffer.toByteBuffer();
                            
                            // Increment the packet counter
                            packetMeter.mark();
                            
                            // Create a metric for the syslog packet size
                            packetSizeHistogram.update(byteBuffer.remaining());
                            
                            SyslogConnection connection = new SyslogConnection(source.getAddress(), source.getPort(), byteBuffer, m_config, m_distPollerDao.whoami().getId());
                            exchange.getIn().setBody(connection, SyslogConnection.class);

                            /*
                            try {
                                for (SyslogConnectionHandler handler : m_syslogConnectionHandlers) {
                                    connectionMeter.mark();
                                    handler.handleSyslogConnection(connection);
                                }
                            } catch (Throwable e) {
                                LOG.error("Handler execution failed in {}", this.getClass().getSimpleName(), e);
                            }
                            */
                        }
                    }).to("bean:syslogDispatcher?method=dispatch");
                }
            });

            m_camel.start();
        } catch (Throwable e) {
            LOG.error("Could not configure Camel routes for syslog receiver", e);
        }
    }

