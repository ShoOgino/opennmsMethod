    /**
     * Constructs a new event encapsulation instance based upon the
     * information passed to the method. The passed byte array is decoded into
     * a string using the <tt>US-ASCII</tt> character encoding.
     *
     * @param addr The remote agent's address.
     * @param port The remote agent's port
     * @param data The XML data in US-ASCII encoding.
     * @param len  The length of the XML data in the buffer.
     * @throws java.io.UnsupportedEncodingException
     *          Thrown if the data buffer cannot be decoded using the
     *          US-ASCII encoding.
     * @throws MessageDiscardedException 
     */
    public ConvertToEvent(
        final String systemId,
        final String location,
        final InetAddress addr,
        final int port,
        final String data,
        final SyslogdConfig config
    ) throws UnsupportedEncodingException, MessageDiscardedException {

        if (config == null) {
            throw new IllegalArgumentException("Config cannot be null");
        }

        String syslogString = data;
        // Trim trailing nulls from the string
        while (syslogString.endsWith("\0")) {
            syslogString = syslogString.substring(0, syslogString.length() - 1);
        }

        if (LOG.isDebugEnabled()) {
            LOG.debug("Converting to event: {}", this);
        }

        SyslogParser parser = SyslogParser.getParserInstance(config, syslogString);
        if (!parser.find()) {
            throw new MessageDiscardedException(String.format("Message does not match regex: '%s'", syslogString));
        }
        SyslogMessage message;
        try {
            message = parser.parse();
        } catch (final SyslogParserException ex) {
            LOG.debug("Unable to parse '{}'", syslogString, ex);
            throw new MessageDiscardedException(ex);
        }

        if (message == null) {
            throw new MessageDiscardedException(String.format("Unable to parse message: '%s'", syslogString));
        }

        if (LOG.isDebugEnabled()) {
            LOG.debug("got syslog message {}", message);
        }

        // Build a basic event out of the syslog message
        final String priorityTxt = message.getSeverity().toString();
        final String facilityTxt = message.getFacility().toString();

        EventBuilder bldr = new EventBuilder("uei.opennms.org/syslogd/" + facilityTxt + "/" + priorityTxt, "syslogd");


        // Set constant values in EventBuilder

        // Set monitoring system
        bldr.setDistPoller(systemId);
        // Set event host
        bldr.setHost(InetAddressUtils.getLocalHostName());
        // Set default event destination to logndisplay
        bldr.setLogDest("logndisplay");


        // Set values from SyslogMessage in the EventBuilder

        final InetAddress hostAddress = message.getHostAddress();
        if (hostAddress != null) {
            // Set nodeId
            InterfaceToNodeCache cache = AbstractInterfaceToNodeCache.getInstance();
            if (cache != null) {
                int nodeId = cache.getNodeId(location, hostAddress);
                if (nodeId > 0) {
                    bldr.setNodeid(nodeId);
                }
            }

            bldr.setInterface(hostAddress);
        }

        bldr.setTime(message.getDate());

        bldr.setLogMessage(message.getMessage());
        // Using parms provides configurability.
        bldr.addParam("syslogmessage", message.getMessage());

        bldr.addParam("severity", "" + priorityTxt);

        bldr.addParam("timestamp", message.getRfc3164FormattedDate());

        if (message.getProcessName() != null) {
            bldr.addParam("process", message.getProcessName());
        }

        bldr.addParam("service", "" + facilityTxt);

        if (message.getProcessId() != null) {
            bldr.addParam("processid", message.getProcessId().toString());
        }

        // Post-process the message based on the SyslogdConfig

        // We will also here find out if, the host needs to
        // be replaced, the message matched to a UEI, and
        // last if we need to actually hide the message.
        // this being potentially helpful in avoiding showing
        // operator a password or other data that should be
        // confidential.

        /*
        * We matched on a regexp for host/message pair.
        * This can be a forwarded message as in BSD Style
        * or syslog-ng.
        * We assume that the host is given to us
        * as an IP/Hostname and that the resolver
        * on the ONMS host actually can resolve the
        * node to match against nodeId.
         */

        // Time to verify UEI matching.

        final List<UeiMatch> ueiMatch = (config.getUeiList() == null ? Collections.emptyList() : config.getUeiList().getUeiMatchCollection());
        for (final UeiMatch uei : ueiMatch) {
            final boolean messageMatchesUeiListEntry = containsIgnoreCase(uei.getFacilityCollection(), facilityTxt) &&
                                              containsIgnoreCase(uei.getSeverityCollection(), priorityTxt) &&
                                              matchProcess(uei.getProcessMatch(), message.getProcessName()) &&
                                              matchHostname(uei.getHostnameMatch(), message.getHostName()) &&
                                              matchHostAddr(uei.getHostaddrMatch(), str(hostAddress));

            if (messageMatchesUeiListEntry) {
                if (uei.getMatch().getType().equals("substr")) {
                    if (matchSubstring(message.getMessage(), uei, bldr, config.getDiscardUei())) {
                        break;
                    }
                } else if ((uei.getMatch().getType().startsWith("regex"))) {
                    if (matchRegex(message.getMessage(), uei, bldr, config.getDiscardUei())) {
                        break;
                    }
                }
            }
        }

        final String fullText = message.asRfc3164Message();

        // Time to verify if we need to hide the message
        final List<HideMatch> hideMatch = (config.getHideMessages() == null ? Collections.emptyList() : config.getHideMessages().getHideMatchCollection());
        boolean doHide = false;
        for (final HideMatch hide : hideMatch) {
            if (hide.getMatch().getType().equals("substr")) {
                if (fullText.contains(hide.getMatch().getExpression())) {
                    // We should hide the message based on this match
                    doHide = true;
                    break;
                }
            } else if (hide.getMatch().getType().equals("regex")) {
                try {
                    Pattern msgPat = getPattern(hide.getMatch().getExpression());
                    Matcher msgMat = msgPat.matcher(fullText);
                    if (msgMat.find()) {
                        // We should hide the message based on this match
                        doHide = true;
                        break;
                    }
                } catch (PatternSyntaxException pse) {
                    LOG.warn("Failed to compile hide-match regex pattern '{}'", hide.getMatch().getExpression(), pse);
                }
            }
        }

        if (doHide) {
            LOG.debug("Hiding syslog message from Event - May contain sensitive data");
            bldr.setLogMessage(HIDDEN_MESSAGE);
            bldr.setParam("syslogmessage", HIDDEN_MESSAGE);
        }

        m_event = bldr.getEvent();
    }

