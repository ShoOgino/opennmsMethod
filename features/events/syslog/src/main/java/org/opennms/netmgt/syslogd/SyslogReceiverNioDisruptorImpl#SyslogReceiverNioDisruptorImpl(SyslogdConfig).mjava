    /**
     * Construct a new receiver
     *
     * @param sock
     * @param matchPattern
     * @param hostGroup
     * @param messageGroup
     */
    public SyslogReceiverNioDisruptorImpl(SyslogdConfig config) throws SocketException, IOException {
        if (config == null) {
            throw new IllegalArgumentException("Config cannot be null");
        }

        m_stop = false;
        m_channel = null;
        m_config = config;

        //m_socketReceivers = m_executorFactory.newExecutor(SOCKET_RECEIVER_THREADS, Integer.MAX_VALUE, "OpenNMS.Syslogd", "socketReceivers");
        //m_syslogConnectionExecutor = m_executorFactory.newExecutor(EVENT_PARSER_THREADS, Integer.MAX_VALUE, "OpenNMS.Syslogd", "syslogConnections");
        //m_syslogProcessorExecutor = m_executorFactory.newExecutor(EVENT_SENDER_THREADS, Integer.MAX_VALUE, "OpenNMS.Syslogd", "syslogProcessors");

        // We can use a null executor here because we're not queueing executable tasks.
        // We're just using this ring buffer to access preallocated ByteBuffers.
        m_byteBuffers = new Disruptor<ByteBufferMessage>(ByteBufferMessage::new, SOCKET_BYTE_BUFFER_QUEUE_SIZE, null);
        m_byteBuffers.start();
        m_ringBuffer = m_byteBuffers.getRingBuffer();

        /*
         * TODO: Do we need to do anything to warm up the ring buffer? Probably not I guess.

        for (int i = 0; i < 8192; i++) {
            long sequence = ringBuffer.next();
            try {
                ringBuffer.get(sequence);
            }
        }
        */
    }

