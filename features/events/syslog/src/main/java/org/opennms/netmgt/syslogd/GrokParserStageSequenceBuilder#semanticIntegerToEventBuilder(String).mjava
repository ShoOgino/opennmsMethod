	/**
	 * This function maps {@link SemanticType} values of type int to {@link EventBuilder}
	 * calls.
	 * 
	 * @param semanticString
	 * @return
	 */
	private static BiConsumer<ParserState,Integer> semanticIntegerToEventBuilder(String semanticString) {
		SemanticType semanticType = null;
		try {
			semanticType = SemanticType.valueOf(semanticString);
		} catch (IllegalArgumentException e) {
			// Leave semanticType == null
		}

		if (semanticType == null) {
			return (s,v) -> {
				s.builder.setParam(semanticString, v);
			};
		} else {
			switch(semanticType) {
			case day:
				// TODO
				return NOOP_INT;
			case facilityPriority:
				return (s,v) -> {
					String facilityTxt = SyslogFacility.getFacilityForCode(v).toString();
					String priorityTxt = SyslogSeverity.getSeverityForCode(v).toString();

					s.builder.setParam("service", facilityTxt);
					s.builder.setParam("severity", priorityTxt);
					s.builder.setUei("uei.opennms.org/syslogd/" + facilityTxt + "/" + priorityTxt);
				};
			case hour:
				// TODO
				return NOOP_INT;
			case minute:
				// TODO
				return NOOP_INT;
			case month:
				// TODO
				return NOOP_INT;
			case processId:
				// processId can be an integer or string
				return (s,v) -> {
					s.builder.setParam("processid", v);
				};
			case second:
				// TODO
				return NOOP_INT;
			case secondFraction:
				// TODO
				return NOOP_INT;
			case version:
				// Unique to this parser
				return (s,v) -> {
					s.builder.setParam("syslogversion", v);
				};
			case year:
				// TODO
				return NOOP_INT;
			default:
				throw new IllegalArgumentException(String.format("Semantic type %s does not have an integer value", semanticString));
			}
		}

	}

