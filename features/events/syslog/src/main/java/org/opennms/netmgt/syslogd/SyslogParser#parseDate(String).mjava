    protected Date parseDate(final String dateString) {
        try {
            // Date pattern has been created and checked inside if loop instead of 
            // parsing date inside the exception class.
            if (dateString.matches(datePattern)) {
                final DateFormat df = new SimpleDateFormat("yyyy-MM-dd", Locale.ROOT);
                adjustTimeZone(df);
                return df.parse(dateString);
            } else {
                final DateFormat df = new SimpleDateFormat("MMM dd HH:mm:ss", Locale.ROOT);
                adjustTimeZone(df);
                // 2012-03-14 Ben: Ugh, what's a non-lame way of forcing it to parse to "this year"?
                Date date = df.parse(dateString);
                final Calendar c = df.getCalendar();
                c.setTime(date);
                // Add 1 to the month value because Calendar.MONTH is zero-based and
                // java.time.Month values are 1-based
                c.set(Calendar.YEAR, ZonedDateTimeBuilder.getBestYearForMonth(c.get(Calendar.MONTH) + 1));
                return c.getTime();
            }
        } catch (final Exception e) {
            LOG.debug("Unable to parse date '{}'", dateString, e);
            return null;
        }
    }

