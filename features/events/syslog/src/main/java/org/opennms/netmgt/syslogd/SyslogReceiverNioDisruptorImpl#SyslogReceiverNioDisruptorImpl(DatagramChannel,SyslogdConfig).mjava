    /**
     * Construct a new receiver
     *
     * @param sock
     * @param matchPattern
     * @param hostGroup
     * @param messageGroup
     */
    public SyslogReceiverNioDisruptorImpl(DatagramChannel channel, SyslogdConfig config) {
        if (channel == null) {
            throw new IllegalArgumentException("Channel cannot be null");
        } else if (config == null) {
            throw new IllegalArgumentException("Config cannot be null");
        }

        m_stop = false;
        m_channel = channel;
        m_config = config;

        // Turn Cassandra client mode on so that we can use the {@link SharedExecutorPool} classes.
        Config.setClientMode(true);

        // These executors are all created using the Cassandra SharedExecutorPool
        m_socketReceivers = SYSLOGD_SEP.newExecutor(SOCKET_RECEIVER_THREADS, Integer.MAX_VALUE, "socketReceivers", "OpenNMS.Syslogd");
        m_syslogConnectionExecutor = SYSLOGD_SEP.newExecutor(EVENT_PARSER_THREADS, Integer.MAX_VALUE, "syslogConnections", "OpenNMS.Syslogd");
        m_syslogProcessorExecutor = SYSLOGD_SEP.newExecutor(EVENT_SENDER_THREADS, Integer.MAX_VALUE, "syslogProcessors", "OpenNMS.Syslogd");

        /*
        m_socketReceivers = new ThreadPoolExecutor(
            Runtime.getRuntime().availableProcessors(),
            Runtime.getRuntime().availableProcessors(),
            1000L,
            TimeUnit.MILLISECONDS,
            new LinkedBlockingQueue<Runnable>(),
            new LogPreservingThreadFactory(getClass().getSimpleName() + "-SocketReceiver", Integer.MAX_VALUE)
        );
        */

        // We can use a null executor here because we're not queueing executable tasks.
        // We're just using this ring buffer to access preallocated ByteBuffers.
        m_byteBuffers = new Disruptor<ByteBufferMessage>(ByteBufferMessage::new, SOCKET_BYTE_BUFFER_QUEUE_SIZE, null);
        m_byteBuffers.start();
        m_ringBuffer = m_byteBuffers.getRingBuffer();

        /*
         * TODO: Do we need to do anything to warm up the ring buffer? Probably not I guess.

        for (int i = 0; i < 8192; i++) {
            long sequence = ringBuffer.next();
            try {
                ringBuffer.get(sequence);
            }
        }
        */
    }

