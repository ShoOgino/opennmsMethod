    @Override
    public Object execute() {
        CriteriaBuilder criteriaBuilder = new CriteriaBuilder(OnmsAlarm.class)
                .orderBy("lastEventTime").desc()
                .limit(limit)
                .alias("node",  "node", JoinType.LEFT_JOIN);
        
        if (! Strings.isNullOrEmpty(eventUeiMatch)) {
            criteriaBuilder.eq("uei", eventUeiMatch);
        }

        final OnmsAlarmCollection alarmCollection = new OnmsAlarmCollection(alarmDao.findMatching(criteriaBuilder.toCriteria()));
        alarmCollection.setTotalCount(alarmDao.countMatching(criteriaBuilder.toCriteria()));
        System.out.println(String.format("Found %d alarms, showing %d:", alarmCollection.getTotalCount(), alarmCollection.size()));
        try {
            ShellTable table = new ShellTable();
            table.column("ID");
            table.column("Count");
            table.column("UEI");
            table.column("Severity");
            table.column("Last Event Time");
            table.column("Node Label");
            table.column("Ack User");
            table.column("Ack Time");
            for (OnmsAlarm alarm : alarmCollection) {
                table.addRow().addContent(alarm.getId(), alarm.getCounter(), alarm.getUei(), alarm.getSeverityLabel(), alarm.getLastEventTime(), alarm.getNodeLabel(), alarm.getAlarmAckUser(), alarm.getAlarmAckTime());
            }
            table.print(System.out);
        } catch (Exception e) {
            System.out.println(e.getMessage());
            e.printStackTrace(System.out);
        }

        return null;
    }

