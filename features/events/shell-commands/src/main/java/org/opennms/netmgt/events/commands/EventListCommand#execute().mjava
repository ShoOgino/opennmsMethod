    @Override
    public Object execute() {
        CriteriaBuilder criteriaBuilder = new CriteriaBuilder(OnmsEvent.class)
                .orderBy("eventTime").desc()
                .limit(limit)
                .alias("node",  "node", JoinType.LEFT_JOIN)
                .alias("serviceType", "serviceType", JoinType.LEFT_JOIN);
        
        if (! Strings.isNullOrEmpty(eventUeiMatch)) {
            criteriaBuilder.eq("eventUei", eventUeiMatch);
        }

        final OnmsEventCollection eventCollection = new OnmsEventCollection(eventDao.findMatching(criteriaBuilder.toCriteria()));
        eventCollection.setTotalCount(eventDao.countMatching(criteriaBuilder.toCriteria()));
        System.out.println(String.format("Found %d events, showing %d:", eventCollection.getTotalCount(), eventCollection.size()));
        try {
            ShellTable table = new ShellTable();
            table.column("ID");
            table.column("UEI");
            table.column("Severity");
            table.column("Time");
            table.column("Node Label");
            table.column("Interface");
            table.column("Service");
            for (OnmsEvent event : eventCollection) {
                String ipAddr = "";
                if (event.getIpAddr() != null) {
                    ipAddr = event.getIpAddr().getHostAddress();
                }
                String serviceName = "";
                if (event.getServiceType() != null) {
                    serviceName = event.getServiceType().getName();
                }
                table.addRow().addContent(event.getId(), event.getEventUei(), event.getSeverityLabel(), event.getEventTime(), event.getNodeLabel(), ipAddr, serviceName);
            }
            table.print(System.out);
        } catch (Exception e) {
            System.out.println(e.getMessage());
            e.printStackTrace(System.out);
        }

        return null;
    }

