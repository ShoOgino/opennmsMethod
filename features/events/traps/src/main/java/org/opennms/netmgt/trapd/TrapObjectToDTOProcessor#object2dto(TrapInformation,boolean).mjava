	public TrapDTO object2dto(TrapInformation trapInfo, boolean trapRawMessageFlag) {

		TrapDTO trapDTO = new TrapDTO();

		String version = trapInfo.getVersion();

		String id = m_distPollerDao.whoami().getId();
		String location = m_distPollerDao.whoami().getLocation();

		if (version.equalsIgnoreCase(SNMP_V1)) {

			Snmp4JTrapNotifier.Snmp4JV1TrapInformation v1Trap = (Snmp4JTrapNotifier.Snmp4JV1TrapInformation)trapInfo;
			String community = v1Trap.getCommunity();
			InetAddress trapAddress = v1Trap.getTrapAddress();
			PDUv1 pdu = v1Trap.getPdu();

			if(trapRawMessageFlag){
				try {
					byte[] byteArray = Snmp4JUtils.convertPduToBytes(trapAddress, 0, community, pdu);
					trapDTO.setBody(byteArray);
				} catch (Throwable e) {
					LOG.warn("Unable to convert PDU into bytes: {}", e.getMessage());
				}
			}

			trapDTO.setAgentAddress(v1Trap.getAgentAddress());
			trapDTO.setCommunity(community);
			trapDTO.setCreationTime(v1Trap.getCreationTime());
			trapDTO.setLocation(location);
			trapDTO.setPduLength(v1Trap.getPduLength());
			trapDTO.setSourceAddress(trapAddress);
			trapDTO.setSystemId(id);
			// NOTE: This value is an SNMP TimeTicks value, not an epoch timestamp
			trapDTO.setTimestamp(v1Trap.getTimeStamp());
			trapDTO.setVersion(version);
			trapDTO.setEnterpriseId(pdu.getEnterprise());
			trapDTO.setGeneric(pdu.getGenericTrap());
			trapDTO.setSpecific(pdu.getSpecificTrap());

			List<SnmpResult> results = new ArrayList<SnmpResult>();

			for (final VariableBinding varBind : pdu.getVariableBindings()) {
				final SnmpObjId oid = SnmpObjId.get(varBind.getOid().toString());
				final SnmpValue value = new Snmp4JValue(varBind.getVariable());
				final SnmpResult snmpResult = new SnmpResult(oid, null, value);
				results.add(snmpResult);
			}

			trapDTO.setResults(results);
		} else if (
			version.equalsIgnoreCase(SNMP_V2) ||
			version.equalsIgnoreCase(SNMP_V3)
		) {

			Snmp4JTrapNotifier.Snmp4JV2TrapInformation v2Trap = (Snmp4JTrapNotifier.Snmp4JV2TrapInformation)trapInfo;
			String community = v2Trap.getCommunity();
			InetAddress trapAddress = v2Trap.getTrapAddress();
			PDU pdu = v2Trap.getPdu();

			if(trapRawMessageFlag){
				try {
					byte[] byteArray = Snmp4JUtils.convertPduToBytes(trapAddress, 0, community, pdu);
					trapDTO.setBody(byteArray);
				} catch (Throwable e) {
					LOG.warn("Unable to convert PDU into bytes: {}", e.getMessage());
				}
			}

			trapDTO.setAgentAddress(v2Trap.getAgentAddress());
			trapDTO.setCommunity(community);
			trapDTO.setCreationTime(v2Trap.getCreationTime());
			trapDTO.setLocation(location);
			trapDTO.setPduLength(v2Trap.getPduLength());
			trapDTO.setSourceAddress(trapAddress);
			trapDTO.setSystemId(id);
			// NOTE: This value is an SNMP TimeTicks value, not an epoch timestamp
			trapDTO.setTimestamp(v2Trap.getTimeStamp());
			trapDTO.setVersion(version);

			BasicTrapProcessor trapsProcessor = (BasicTrapProcessor)v2Trap.getTrapProcessor();
			trapDTO.setEnterpriseId(new OID(trapsProcessor.getTrapIdentity().getEnterpriseId()));
			trapDTO.setGeneric(trapsProcessor.getTrapIdentity().getGeneric());
			trapDTO.setSpecific(trapsProcessor.getTrapIdentity().getSpecific());

			List<SnmpResult> results = new ArrayList<SnmpResult>();

			for (final VariableBinding varBind : pdu.getVariableBindings()) {
				final SnmpObjId oid = SnmpObjId.get(varBind.getOid().toString());
				final SnmpValue value = new Snmp4JValue(varBind.getVariable());
				final SnmpResult snmpResult = new SnmpResult(oid, null, value);
				results.add(snmpResult);
			}

			trapDTO.setResults(results);
		}

		return trapDTO;
	}

