	public TrapDTO object2dto(TrapInformation trapInfo, boolean trapRawMessageFlag) {

		TrapDTO trapDTO = new TrapDTO();

		String version = trapInfo.getVersion();

		String id = m_distPollerDao.whoami().getId();
		String location = m_distPollerDao.whoami().getLocation();

		if (version.equalsIgnoreCase(SNMP_V1)) {

			Snmp4JTrapNotifier.Snmp4JV1TrapInformation v1Trap = (Snmp4JTrapNotifier.Snmp4JV1TrapInformation)trapInfo;
			InetAddress agentAddress = v1Trap.getAgentAddress();
			String community = v1Trap.getCommunity();
			int pduLength = v1Trap.getPduLength();
			// String version = v1Trap.getVersion();
			InetAddress trapAddress = v1Trap.getTrapAddress();
			long timestamp = v1Trap.getTimeStamp();
			PDUv1 pdu = v1Trap.getPduv1();
			byte[] byteArray = null;
			try {
				byteArray = Snmp4JUtils.convertPduToBytes(trapAddress, 0, community, pdu);
			} catch (Throwable e) {
				LOG.warn("Unable to convert PDU into bytes: {}", e.getMessage());
			}

			trapDTO.setSystemId(id);
			trapDTO.setLocation(location);
			
			if(trapRawMessageFlag){
				trapDTO.setBody(byteArray);
			}
			trapDTO.setCommunity(community);
			trapDTO.setPduLength(Integer.toString(pduLength));
			trapDTO.setAgentAddress(agentAddress);
			trapDTO.setTimestamp(timestamp);
			trapDTO.setTrapAddress(trapAddress);
			trapDTO.setVersion(version);

			List<SnmpResult> results = new ArrayList<SnmpResult>();

			SnmpResult snmpResult = null;

			Vector<? extends VariableBinding> vector = pdu.getVariableBindings();
			for (int i = 0; i < vector.size(); i++) {
				VariableBinding varBind = (VariableBinding) vector.get(i);

				SnmpObjId oid = SnmpObjId.get(varBind.getOid().toString());
				SnmpValue value = new Snmp4JValue(varBind.getVariable());
				snmpResult = new SnmpResult(oid, null, value);
				results.add(snmpResult);
			}
			trapDTO.setResults(results);

		} else if (
			version.equalsIgnoreCase(SNMP_V2) ||
			version.equalsIgnoreCase(SNMP_V3)
		) {

			Snmp4JTrapNotifier.Snmp4JV2TrapInformation v2Trap = (Snmp4JTrapNotifier.Snmp4JV2TrapInformation)trapInfo;
			InetAddress agentAddress = v2Trap.getAgentAddress();
			String community = v2Trap.getCommunity();
			int pduLength = v2Trap.getPduLength();
			// String version = v2Trap.getVersion();
			InetAddress trapAddress = v2Trap.getTrapAddress();
			long timestamp = v2Trap.getTimeStamp();
			PDU pdu = v2Trap.getPdu();
			byte[] byteArray = null;
			try {
				byteArray = Snmp4JUtils.convertPduToBytes(trapAddress, 0, community, pdu);
			} catch (Throwable e) {
				LOG.warn("Unable to convert PDU into bytes: {}", e.getMessage());
			}

			trapDTO.setSystemId(id);
			trapDTO.setLocation(location);
			
			if(trapRawMessageFlag){
				trapDTO.setBody(byteArray);
			}
			trapDTO.setCommunity(community);
			trapDTO.setPduLength(Integer.toString(pduLength));
			trapDTO.setAgentAddress(agentAddress);
			trapDTO.setTimestamp(timestamp);
			trapDTO.setTrapAddress(trapAddress);
			trapDTO.setVersion(version);

			List<SnmpResult> results = new ArrayList<SnmpResult>();

			SnmpResult snmpResult = null;

			Vector<? extends VariableBinding> vector = pdu.getVariableBindings();
			for (int i = 0; i < vector.size(); i++) {
				VariableBinding varBind = (VariableBinding) vector.get(i);
				SnmpObjId oid = SnmpObjId.get(varBind.getOid().toString());
				SnmpValue value = new Snmp4JValue(varBind.getVariable());
				snmpResult = new SnmpResult(oid, null, value);
				results.add(snmpResult);
			}
			trapDTO.setResults(results);

		}

		return trapDTO;
	}

