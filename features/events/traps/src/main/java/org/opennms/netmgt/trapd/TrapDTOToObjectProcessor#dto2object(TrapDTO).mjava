	public static TrapNotification dto2object(TrapDTO trapDto) {
		if (SNMP_V1.equalsIgnoreCase(trapDto.getHeader(TrapDTO.VERSION))) {
			PDUv1 pdu = new PDUv1();
			pdu.setType(PDU.NOTIFICATION);
			pdu.setAgentAddress(new IpAddress(trapDto.getHeader(TrapDTO.SOURCE_ADDRESS)));
			pdu.setTimestamp(Long.parseLong(trapDto.getHeader(TrapDTO.TIMESTAMP)));

			// TODO: Fill in these values
			/*
			pdu.setEnterprise(enterprise);
			pdu.setGenericTrap(genericTrap);
			pdu.setSpecificTrap(specificTrap);
			*/

			for (SnmpResult snmpResult : trapDto.getResults()) {
				final int type = snmpResult.getValue().getType();
				final byte[] value = snmpResult.getValue().getBytes();
				final OID oid = new OID(snmpResult.getBase().toString());

				pdu.add(new VariableBinding(oid, ((Snmp4JValue)SnmpUtils.getValueFactory().getValue(type, value)).getVariable()));
			}

			TrapInformation retval = new Snmp4JTrapNotifier.Snmp4JV1TrapInformation(
				InetAddrUtils.addr(trapDto.getHeader(TrapDTO.AGENT_ADDRESS)),
				trapDto.getHeader(TrapDTO.COMMUNITY),
				pdu,
				null
			);
			retval.setCreationTime(Long.parseLong(trapDto.getHeader(TrapDTO.CREATION_TIME)));
			retval.setLocation(trapDto.getHeader(MinionDTO.LOCATION));
			retval.setSystemId(trapDto.getHeader(MinionDTO.SYSTEM_ID));
			return retval;
		} else if (
			SNMP_V2.equalsIgnoreCase(trapDto.getHeader(TrapDTO.VERSION)) ||
			SNMP_V3.equalsIgnoreCase(trapDto.getHeader(TrapDTO.VERSION))
		) {
			PDU pdu = new PDU();
			pdu.setType(PDU.NOTIFICATION);

			for (SnmpResult snmpResult : trapDto.getResults()) {
				final int type = snmpResult.getValue().getType();
				final byte[] value = snmpResult.getValue().getBytes();
				final OID oid = new OID(snmpResult.getBase().toString());

				pdu.add(new VariableBinding(oid, ((Snmp4JValue)SnmpUtils.getValueFactory().getValue(type, value)).getVariable()));
			}

			TrapInformation retval = new Snmp4JTrapNotifier.Snmp4JV2TrapInformation(
				InetAddrUtils.addr(trapDto.getHeader(TrapDTO.SOURCE_ADDRESS)),
				trapDto.getHeader(TrapDTO.COMMUNITY),
				pdu,
				null
			);
			retval.setCreationTime(Long.parseLong(trapDto.getHeader(TrapDTO.CREATION_TIME)));
			retval.setLocation(trapDto.getHeader(MinionDTO.LOCATION));
			retval.setSystemId(trapDto.getHeader(MinionDTO.SYSTEM_ID));
			return retval;
		} else {
			throw new IllegalArgumentException("Unrecognized trap version in DTO: " + trapDto.getHeader(TrapDTO.VERSION));
		}
	}

