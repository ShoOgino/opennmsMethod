    @Override
    public AggregationPolicy<TrapInformationWrapper, TrapLogDTO, TrapLogDTO> getAggregationPolicy() {
        return new AggregationPolicy<TrapInformationWrapper, TrapLogDTO, TrapLogDTO>() {
            @Override
            public int getCompletionSize() {
                return config.getBatchSize();
            }

            @Override
            public int getCompletionIntervalMs() {
                return config.getBatchIntervalMs();
            }

            @Override
            public Object key(TrapInformationWrapper message) {
                return message.getTrapAddress();
            }

            @Override
            public TrapLogDTO aggregate(TrapLogDTO accumulator, TrapInformationWrapper newMessage) {
                final TrapInformation trapInfo = newMessage.getTrapInformation();
                TrapDTO trapDTO;
                InetAddress trapAddress;
                if(trapInfo != null) {
                    trapDTO = transformTrapInfo(trapInfo);
                    trapAddress = TrapUtils.getEffectiveTrapAddress(trapInfo, config.shouldUseAddressFromVarbind());
                } else {
                    trapDTO = newMessage.getTrapDTO();
                    trapAddress = newMessage.getTrapAddress();
                }
                if (accumulator == null) { // no log created yet
                    accumulator = new TrapLogDTO(distPoller.getId(), distPoller.getLocation(), trapAddress);
                }
                accumulator.addMessage(trapDTO);
                return accumulator;
            }

            @Override
            public TrapLogDTO build(TrapLogDTO accumulator) {
                return accumulator;
            }
        };
    }

