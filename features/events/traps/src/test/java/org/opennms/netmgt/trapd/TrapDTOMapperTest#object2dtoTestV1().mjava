	@Test
	public void object2dtoTestV1() throws UnknownHostException {
		long testStartTime = new Date().getTime();

		PDUv1 snmp4JV1TrapPdu = new PDUv1();
		snmp4JV1TrapPdu.setType(PDU.V1TRAP);
		snmp4JV1TrapPdu.setEnterprise(new OID(".1.3.6.1.6.3.1.1.4.1.0"));
		snmp4JV1TrapPdu.setGenericTrap(10);
		snmp4JV1TrapPdu.setSpecificTrap(0);
		snmp4JV1TrapPdu.setTimestamp(5000);
		snmp4JV1TrapPdu.add(new VariableBinding(new OID("1.3.6.1.2.1.1.5.0"),
				new OctetString("mockhost")));
		snmp4JV1TrapPdu.add(new VariableBinding(new OID(".1.3.6.1.2.1.1.3"),
				new OctetString("mockhost")));
		snmp4JV1TrapPdu.add(new VariableBinding(new OID(
				".1.3.6.1.6.3.1.1.4.1.0"), new OctetString("mockhost")));

		InetAddress inetAddress= InetAddress.getByName("127.0.0.1");;
		TrapInformation snmp4JV1Trap = new Snmp4JTrapNotifier.Snmp4JV1TrapInformation(
				inetAddress, "public", snmp4JV1TrapPdu);
		
		OnmsDistPoller distPoller = new OnmsDistPoller();
		distPoller.setId(DistPollerDao.DEFAULT_DIST_POLLER_ID);
		distPoller.setLabel(DistPollerDao.DEFAULT_DIST_POLLER_ID);
		distPoller.setLocation("localhost");
		DistPollerDao distPollerDao = new DistPollerDaoMinion(distPoller);

		TrapInformation2TrapDtoMapper mapper = new TrapInformation2TrapDtoMapper(distPollerDao);

		TrapDTO trapDto = mapper.object2dto(snmp4JV1Trap);
		System.out.println("trapDto is : " + trapDto);
		System.out.println("trapDto.getBody() is : " + trapDto.getBody());
		System.out.println("trapDto.getCommunity() is : " + trapDto.getCommunity());

		TrapInformation snmp4JV1Trap1 = TrapDto2TrapInformationMapper.dto2object(trapDto);
		assertEquals(".1.3.6.1.6.3.1.1.4.1.0", snmp4JV1Trap1.getTrapIdentity().getEnterpriseId());
		assertEquals(10, snmp4JV1Trap1.getTrapIdentity().getGeneric());
		assertEquals(0, snmp4JV1Trap1.getTrapIdentity().getSpecific());
		assertEquals(InetAddressUtils.ONE_TWENTY_SEVEN, snmp4JV1Trap1.getAgentAddress());
		assertEquals("public", snmp4JV1Trap1.getCommunity());
		assertEquals("localhost", snmp4JV1Trap1.getLocation());
		assertEquals(DistPollerDao.DEFAULT_DIST_POLLER_ID, snmp4JV1Trap1.getSystemId());
		assertEquals(5000, snmp4JV1Trap1.getTimeStamp());
		// This is the "default" value from SNMP4J that indicates that the trap has not been forwarded
		assertEquals(InetAddressUtils.addr("0.0.0.0"), snmp4JV1Trap1.getTrapAddress());
		assertEquals("v1", snmp4JV1Trap1.getVersion());

		// Make sure that the message was created after the start of the test
		assertTrue(snmp4JV1Trap1.getCreationTime() >= testStartTime);
	}

