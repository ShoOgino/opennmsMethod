    @Test
    public void testTrapdReloadDaemon() throws Exception {
        String localhost = "127.0.0.1";
        InetAddress localAddr = InetAddressUtils.addr(localhost);
        SnmpObjId enterpriseId = SnmpObjId.get(".1.3.6.1.4.1.5813");
        SnmpObjId trapOID = SnmpObjId.get(enterpriseId, new SnmpInstId(1));
        SnmpTrapBuilder pdu = SnmpUtils.getV2TrapBuilder();
        pdu.addVarBind(SnmpObjId.get(".1.3.6.1.2.1.1.3.0"), SnmpUtils.getValueFactory().getTimeTicks(0));
        pdu.addVarBind(SnmpObjId.get(".1.3.6.1.6.3.1.1.4.1.0"), SnmpUtils.getValueFactory().getObjectId(trapOID));
        pdu.addVarBind(SnmpObjId.get(".1.3.6.1.6.3.1.1.4.3.0"), SnmpUtils.getValueFactory().getObjectId(enterpriseId));
        EventBuilder defaultTrapBuilder = new EventBuilder("uei.opennms.org/default/trap", "trapd");
        defaultTrapBuilder.setInterface(localAddr);
        defaultTrapBuilder.setSnmpVersion("v2c");
        m_eventMgr.getEventAnticipator().anticipateEvent(defaultTrapBuilder.getEvent());
        EventBuilder newSuspectBuilder = new EventBuilder(EventConstants.NEW_SUSPECT_INTERFACE_EVENT_UEI, "trapd");
        newSuspectBuilder.setInterface(localAddr);
        m_eventMgr.getEventAnticipator().anticipateEvent(newSuspectBuilder.getEvent());
        pdu.send(localhost, m_trapdConfig.getSnmpTrapPort(), "public");
        m_eventMgr.getEventAnticipator().verifyAnticipated(5000, 0, 0, 0, 0);
        m_eventMgr.getEventAnticipator().reset();

        // Verify reload by changing port in configuration to 1163  and new-suspect-on-trap = false;
        File opennmsHome = Paths.get("src", "test", "resources", "trapd").toFile();
        System.setProperty("opennms.home", opennmsHome.getAbsolutePath());
        EventBuilder eventBuilder = new EventBuilder(EventConstants.RELOAD_DAEMON_CONFIG_UEI, "trapd-reload-daemon-test");
        eventBuilder.addParam(EventConstants.PARM_DAEMON_NAME, m_trapd.getName());
        // Anticipate reload successful event
        EventBuilder reloadDaemonBuilder = new EventBuilder(EventConstants.RELOAD_DAEMON_CONFIG_SUCCESSFUL_UEI, m_trapd.getName());
        reloadDaemonBuilder.addParam(EventConstants.PARM_DAEMON_NAME, m_trapd.getName());
        m_eventMgr.getEventAnticipator().anticipateEvent(reloadDaemonBuilder.getEvent());
        // Send reload event to trapd
        m_trapd.handleReloadEvent(ImmutableMapper.fromMutableEvent(eventBuilder.getEvent()));
        m_eventMgr.getEventAnticipator().verifyAnticipated(5000, 0, 0, 0, 0);
        m_eventMgr.getEventAnticipator().reset();

        // Anticipate default trap event again by sending trap to the new port
        m_eventMgr.getEventAnticipator().anticipateEvent(defaultTrapBuilder.getEvent());
        pdu.send(localhost, SNMP_PORT_AFTER_RELOAD, "public");
        // The updated value of "new-suspect-on-trap = false" is not currently propagated to the TrapSinkConsumer
        // so we should continue to receive a newSuspectEvent
        m_eventMgr.getEventAnticipator().anticipateEvent(newSuspectBuilder.getEvent());
        m_eventMgr.getEventAnticipator().verifyAnticipated(5000, 0, 0, 0, 0);
        m_eventMgr.getEventAnticipator().reset();
    }

