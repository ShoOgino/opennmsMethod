	@Test
	public void testTrapd() throws Exception {
		Thread.sleep(10000);

		for (int i = 0; i < 3; i++) {
			LOG.info("Sending trap");
			try {
				SnmpTrapBuilder pdu = SnmpUtils.getV2TrapBuilder();
				pdu.addVarBind(SnmpObjId.get(".1.3.6.1.2.1.1.3.0"), SnmpUtils.getValueFactory().getTimeTicks(0));
				// warmStart
				pdu.addVarBind(SnmpObjId.get(".1.3.6.1.6.3.1.1.4.1.0"), SnmpUtils.getValueFactory().getObjectId(SnmpObjId.get(".1.3.6.1.6.3.1.1.5.2")));
				pdu.addVarBind(SnmpObjId.get(".1.3.6.1.6.3.1.1.4.3.0"), SnmpUtils.getValueFactory().getObjectId(SnmpObjId.get(".1.3.6.1.4.1.5813")));
				pdu.send(InetAddressUtils.str(InetAddressUtils.ONE_TWENTY_SEVEN), m_port, "public");
			} catch (Throwable e) {
				LOG.error(e.getMessage(), e);
			}
			LOG.info("Trap has been sent");
		}
		if (!m_handler.getLatch().await(30, TimeUnit.SECONDS)) {
			fail("Countdown latch failed");
		}
		
		TrapNotification notification = m_handler.getLast();
		notification.setTrapProcessor(new TrapProcessor() {

			@Override
			public void setSystemId(String systemId) {
				// TODO: Assert something?
			}

			@Override
			public void setLocation(String location) {
				// TODO: Assert something?
			}

			@Override
			public void setCommunity(String community) {
				LOG.info("Comparing community");
				assertEquals("public", community);
			}

			@Override
			public void setCreationTime(long creationTime) {
				// TODO: Assert something?
			}

			@Override
			public void setTimeStamp(long timeStamp) {
				// TODO: Assert something?
			}

			@Override
			public void setVersion(String version) {
				LOG.info("Comparing version");
				assertEquals("v2", version);
			}

			@Override
			public void setAgentAddress(InetAddress agentAddress) {
				LOG.info("Comparing agent address");
				assertEquals(InetAddressUtils.ONE_TWENTY_SEVEN, agentAddress);
			}

			@Override
			public void processVarBind(SnmpObjId name, SnmpValue value) {
			}

			@Override
			public void setTrapAddress(InetAddress trapAddress) {
				LOG.info("Comparing trap address");
				assertEquals(InetAddressUtils.ONE_TWENTY_SEVEN, trapAddress);
			}

			@Override
			public void setTrapIdentity(TrapIdentity trapIdentity) {
				LOG.info("Comparing trap identity");
				assertEquals(new TrapIdentity(SnmpObjId.get(".1.3.6.1.4.1.5813"), 1, 0).toString(), trapIdentity.toString());
			}
		});
		
		notification.getTrapProcessor();
	}

