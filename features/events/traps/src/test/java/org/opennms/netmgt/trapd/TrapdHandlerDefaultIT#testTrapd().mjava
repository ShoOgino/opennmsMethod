	@Test
	public void testTrapd() throws Exception {
		// Expect one TrapNotification message to be broadcast on the messaging channel
		JmsQueueNameFactory factory = new JmsQueueNameFactory("Trapd", "BroadcastTrap");
		MockEndpoint broadcastTrapd = getMockEndpoint("mock:queuingservice:" + factory.getName(), false);
		broadcastTrapd.setExpectedMessageCount(1);

		MockEndpoint trapHandler = getMockEndpoint("mock:seda:trapHandler", false);
		trapHandler.setExpectedMessageCount(1);

		// create a trap PDU
		PDU pdu = new PDU();

		OID oid = new OID(".1.3.6.1.2.1.1.3.0");
		pdu.add(new VariableBinding(SnmpConstants.sysUpTime, new TimeTicks(5000)));
		pdu.add(new VariableBinding(SnmpConstants.snmpTrapOID, new OID(oid)));
		pdu.add(new VariableBinding(SnmpConstants.snmpTrapAddress,
				new IpAddress("127.0.0.1")));

		pdu.add(new VariableBinding(new OID(oid), new OctetString("Major")));
		pdu.setType(PDU.NOTIFICATION);

		TrapInformation snmp4JV2cTrap = new Snmp4JTrapNotifier.Snmp4JV2TrapInformation(
				InetAddressUtils.ONE_TWENTY_SEVEN, "public",
				pdu, new BasicTrapProcessor());

		OnmsDistPoller distPoller = new OnmsDistPoller();
		distPoller.setId(DistPollerDao.DEFAULT_DIST_POLLER_ID);
		distPoller.setLabel(DistPollerDao.DEFAULT_DIST_POLLER_ID);
		distPoller.setLocation("localhost");
		DistPollerDao distPollerDao = new DistPollerDaoMinion(distPoller);

		TrapObjectToDTOProcessor mapper = new TrapObjectToDTOProcessor();
		mapper.setDistPollerDao(distPollerDao);

		// Send the TrapNotification
		template.sendBody("queuingservice:" + factory.getName() + "?disableReplyTo=true", JaxbUtils.marshal(
				mapper.object2dto(snmp4JV2cTrap, false)
		));

		assertMockEndpointsSatisfied();

		// Check that the input for the seda:trapHandler endpoint matches
		// the TrapQProcessor that we simulated via ActiveMQ
		String trapDtoXml = trapHandler.getReceivedExchanges().get(0).getIn().getBody(String.class);
		assertNotNull(trapDtoXml);
		TrapDTO trapDto = JaxbUtils.unmarshal(TrapDTO.class, trapDtoXml);
		TrapNotification result = TrapDTOToObjectProcessor.dto2object(trapDto);
		LOG.info("Result: " + result);

		// Assert that the trap's content is correct
		BasicTrapProcessor processor = (BasicTrapProcessor)result.getTrapProcessor();
		assertEquals("v2", processor.getVersion());

		// TODO: Use an EventAnticipator to assert that a trap event was created
	}

