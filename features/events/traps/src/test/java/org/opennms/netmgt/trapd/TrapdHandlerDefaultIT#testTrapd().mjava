	@Test
	public void testTrapd() throws Exception {
		// Expect one TrapNotification message to be broadcast on the messaging channel
		JmsQueueNameFactory factory = new JmsQueueNameFactory("Trapd", "BroadcastTrap");
		MockEndpoint broadcastTrapd = getMockEndpoint("mock:queuingservice:" + factory.getName(), false);
		broadcastTrapd.setExpectedMessageCount(1);

		MockEndpoint trapHandler = getMockEndpoint("mock:seda:trapHandler", false);
		trapHandler.setExpectedMessageCount(1);

		/*
		MockTrapdIpMgr m_cache=new MockTrapdIpMgr();

		m_cache.clearKnownIpsMap();
		m_cache.setNodeId("127.0.0.1", 1);
		*/

		// create instance of snmp4JV2cTrap
		PDU snmp4JV2cTrapPdu = new PDU();
		
		OID oid = new OID(".1.3.6.1.2.1.1.3.0");
		snmp4JV2cTrapPdu.add(new VariableBinding(SnmpConstants.sysUpTime, new TimeTicks(5000)));
		snmp4JV2cTrapPdu.add(new VariableBinding(SnmpConstants.snmpTrapOID, new OID(oid)));
		snmp4JV2cTrapPdu.add(new VariableBinding(SnmpConstants.snmpTrapAddress,
				new IpAddress("127.0.0.1")));

		snmp4JV2cTrapPdu.add(new VariableBinding(new OID(oid), new OctetString("Major")));
		snmp4JV2cTrapPdu.setType(PDU.NOTIFICATION);

		TrapNotification snmp4JV2cTrap = new Snmp4JTrapNotifier.Snmp4JV2TrapInformation(
				InetAddressUtils.ONE_TWENTY_SEVEN, new String("public"),
				snmp4JV2cTrapPdu, new BasicTrapProcessor());

		// Send the TrapNotification
		template.sendBody("queuingservice:" + factory.getName() + "?disableReplyTo=true", snmp4JV2cTrap);

		assertMockEndpointsSatisfied();

		// Check that the input for the seda:trapHandler endpoint matches
		// the TrapQProcessor that we simulated via ActiveMQ
		TrapNotification result = trapHandler.getReceivedExchanges().get(0).getIn().getBody(TrapNotification.class);
		LOG.info("Result: " + result);

		// Assert that the trap's content is correct
		BasicTrapProcessor processor = (BasicTrapProcessor)result.getTrapProcessor();
		assertEquals("v2", processor.getVersion());

		// TODO: Use an EventAnticipator to assert that a trap event was created
	}

