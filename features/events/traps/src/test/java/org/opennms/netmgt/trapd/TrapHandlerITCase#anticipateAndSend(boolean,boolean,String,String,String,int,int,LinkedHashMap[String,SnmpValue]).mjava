    /**
     * @param newSuspectOnTrap Will a new suspect event be triggered by the trap?
     * @param nodeKnown Is the node in the database?
     * @param event Event that is anticipated to result when the trap is processed
     * @param snmpTrapVersion SNMP version of trap, valid values: <code>v1</code>, <code>v2c</code>
     * @param enterprise Enterprise ID of the trap
     * @param varbinds Varbinds attached to the trap
     */
    public Collection<Event> anticipateAndSend(boolean newSuspectOnTrap, boolean nodeKnown,
            String event,
            String snmpTrapVersion, String enterprise,
            int generic, int specific, LinkedHashMap<String, SnmpValue> varbinds) throws Exception {
        TrapdConfigBean newConfig = new TrapdConfigBean(m_trapdConfig);
        newConfig.setNewSuspectOnTrap(newSuspectOnTrap);
        m_trapdConfig.update(newConfig);

        if (newSuspectOnTrap) {
            // Note: the nodeId will be zero because the node is not known
            anticipateEvent(EventConstants.NEW_SUSPECT_INTERFACE_EVENT_UEI, m_ip, 0);
        }

        if (event != null) {
            if (nodeKnown) {
                anticipateEvent(event);
            } else {
                /*
                 * If the node is unknown, the nodeId on the trap event
                 * will be zero.
                 */
                anticipateEvent(event, m_ip, 0);
            }
        }

        if (varbinds == null) {
            sendTrap(snmpTrapVersion, enterprise, generic, specific);
        } else {
            sendTrap(snmpTrapVersion, enterprise, generic, specific, varbinds);
        }

        return finishUp();
    }

