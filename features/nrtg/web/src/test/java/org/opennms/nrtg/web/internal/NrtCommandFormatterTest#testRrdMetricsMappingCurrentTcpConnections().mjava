    @Test
    public void testRrdMetricsMappingCurrentTcpConnections() {
        System.out.println("metrics mapping for Tcp Connections");

        String rawString = "--title='Current TCP Connections' --vertical-label='Current Connections' DEF:currEstab={rrd1}:tcpCurrEstab:AVERAGE DEF:minCurrEstab={rrd1}:tcpCurrEstab:MIN DEF:maxCurrEstab={rrd1}:tcpCurrEstab:MAX LINE2:currEstab#00ff00:'Current ' GPRINT:currEstab:AVERAGE:'Avg  \n: %8.2lf %s' GPRINT:currEstab:MIN:'Min  \n: %8.2lf %s' GPRINT:currEstab:MAX:'Max  \n: %8.2lf %s\n'";
        String expectedResult = "'.1.3.6.1.2.1.6.9.0': '{rrd1}:tcpCurrEstab'";

        String[] columns = new String[]{"tcpCurrEstab"};
        String[] metrics = new String[]{"SNMP_.1.3.6.1.2.1.6.9.0"};

        PrefabGraph prefabGraph = createMock(PrefabGraph.class);
        expect(prefabGraph.getCommand()).andReturn(rawString).anyTimes();
        expect(prefabGraph.getColumns()).andReturn(columns).anyTimes();
        expect(prefabGraph.getMetricIds()).andReturn(metrics).anyTimes();
        replay(prefabGraph);

        NrtRrdCommandFormatter commandFormatter = new NrtRrdCommandFormatter(prefabGraph);
        String mappingResult = commandFormatter.getRrdMetricsMapping();

        assertTrue(mappingResult.contains(".1.3.6.1.2.1.6.9.0"));
        assertTrue(mappingResult.contains("tcpCurrEstab"));
        assertFalse(mappingResult.contains("\n"));

        assertEquals(expectedResult, mappingResult);
    }

