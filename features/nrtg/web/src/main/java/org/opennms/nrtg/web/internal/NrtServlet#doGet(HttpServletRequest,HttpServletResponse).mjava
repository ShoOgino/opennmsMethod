    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {

        HttpSession httpSession = req.getSession(true);
        resp.setContentType("text/html");

        if (req.getParameter("nrtCollectionTaskId") != null) {
            m_controller.nrtCollectionJobTrigger(req.getParameter("nrtCollectionTaskId"), httpSession);

            if ("true".equals(req.getParameter("poll"))) {
                resp.getOutputStream().println(m_controller.getMeasurementSetsForDestination(req.getParameter("nrtCollectionTaskId")));
            }
        } else if (req.getParameter("resourceId") != null && req.getParameter("report") != null) {
            // Render JSON instead of HTML
            boolean useJson = (req.getHeader(HttpHeaders.ACCEPT) != null && req.getHeader(HttpHeaders.ACCEPT).contains("application/json"));
            if (useJson) {
                resp.setContentType(MediaType.JSON_UTF_8.toString());
            }

            ModelAndView modelAndView = m_controller.nrtStart(req.getParameter("resourceId"), req.getParameter("report"), httpSession, useJson);

            String template = getTemplateAsString(modelAndView.getViewName() + ".template");

            for (Entry<String, Object> entry : modelAndView.getModel().entrySet()) {
                template = template.replaceAll("\\$\\{" + entry.getKey() + "\\}", (entry.getValue() != null ? entry.getValue().toString() : "null"));
            }
            resp.getOutputStream().write(template.getBytes());
        } else {
            throw new ServletException("unrecognized servlet parameters");
        }
    }

