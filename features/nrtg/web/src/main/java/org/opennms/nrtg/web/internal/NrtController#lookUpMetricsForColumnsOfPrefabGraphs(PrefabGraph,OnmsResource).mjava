    /**
     * Adds the Metrics corresponding to the columns into the prefabGraph. Based on a meta file lookup. The files to check for
     * metric to column name mappings are provided by the filesToPromote. At the moment this method will check for the filenames
     * in the list and expects to file a file with this name and a .meta ending.
     */
    public PrefabGraph lookUpMetricsForColumnsOfPrefabGraphs(PrefabGraph prefabGraph, OnmsResource reportResource) {
        //Build a Hashmap with all columns to metrics from the files
        Map<String, String> columnsToMetrics = new HashMap<String, String>();

        //get all metrics to columns mappings from the files in to hashmap
        for (RrdGraphAttribute attr : getRequiredRrdGraphAttributes(reportResource, prefabGraph)) {
            String fileName = null;
            BufferedReader bf = null;
            try {
                fileName = m_resourceDao.getRrdDirectory() + File.separator + attr.getRrdRelativePath();

                //get meta files instead of rrd or jrb
                fileName = fileName.substring(0, fileName.lastIndexOf("."));
                fileName = fileName.concat(".meta");
                bf = new BufferedReader(new FileReader(fileName));

                String mappingLine = "";
                while (mappingLine != null) {
                    mappingLine = bf.readLine();
                    String metric = mappingLine.substring(0, mappingLine.lastIndexOf("="));
                    String column = mappingLine.substring(mappingLine.lastIndexOf("=") + 1);
                    columnsToMetrics.put(column, metric);
                }
            } catch (Exception ex) {
                logger.error("Problem by looking up metrics for cloumns in context of prefabgraphs from meta file '{}' '{}'", fileName, ex.getMessage());
            } finally {
                if (bf != null) {
                    try {
                        bf.close();
                    } catch (IOException ex) {
                        logger.warn("problem by reader close", ex);
                    }
                }
            }
        }
        /**
         * put the metrics from the columnsToMetrics map into the metrics array of the prefabGraph.
         */
        String[] metrics = new String[prefabGraph.getColumns().length];
        for (int i = 0; i < prefabGraph.getColumns().length; i++) {
            metrics[i] = columnsToMetrics.get(prefabGraph.getColumns()[i]);
        }
        prefabGraph.setMetricIds(metrics);

        return prefabGraph;
    }

