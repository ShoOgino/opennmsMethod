    /**
     * Provides a Map that provides Lists of MetricIds by protocols.
     *
     * @param reportResource
     * @param prefabGraph
     * @return
     */
    private Map<String, List<MetricTuple>> getMetricIdsByProtocol(OnmsResource reportResource, PrefabGraph prefabGraph) {
        Map<String, List<MetricTuple>> metricIdsByProtocol = new HashMap<String, List<MetricTuple>>();
        Set<RrdGraphAttribute> relevantRrdGraphAttributes = getRequiredRrdGraphAttributes(reportResource, prefabGraph);
        Map<String, String> rrdGraphAttributesMetaData = getMetaDataForReport(relevantRrdGraphAttributes);

        //Protocol_metricId=RrdGraphAttribute
        //SNMP_.1.3.6.1.2.1.5.7.0=icmpInRedirects
        for (Map.Entry<String, String> entry : rrdGraphAttributesMetaData.entrySet()) {
            String splitByUndescore[] = entry.getValue().split("_");
            String protocol = splitByUndescore[0];
            String splitByEqual[] = splitByUndescore[1].split("=");
            String metricId = splitByEqual[0];
            //String rrdGraphAttribute = splitByEqual[1];

            if (!metricIdsByProtocol.containsKey(protocol)) {
                metricIdsByProtocol.put(protocol, new ArrayList<MetricTuple>());
            }
            metricIdsByProtocol.get(protocol).add(new MetricTuple(metricId, entry.getKey()));
        }
        return metricIdsByProtocol;
    }

