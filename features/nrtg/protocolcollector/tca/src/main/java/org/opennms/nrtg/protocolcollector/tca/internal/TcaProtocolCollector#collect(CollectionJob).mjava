    @Override
    public CollectionJob collect(final CollectionJob collectionJob) {
        logger.info("TcaProtocolCollector is collecting collectionJob '{}'", collectionJob);

        SnmpAgentConfig snmpAgentConfig = SnmpAgentConfig.parseProtocolConfigurationString(collectionJob.getProtocolConfiguration());

        List<Collectable> trackers = new ArrayList<Collectable>();
        for (final String metricObjId : collectionJob.getAllMetrics()) {
            
            final String keyword = metricObjId.substring(metricObjId.lastIndexOf("_") + 1);
            final SnmpObjId requestOid = SnmpObjId.get(metricObjId.substring(0, metricObjId.lastIndexOf("_")));
            
            SnmpObjId base = requestOid.getPrefix(requestOid.length() - 1);
            int lastId = requestOid.getLastSubId();

            SingleInstanceTracker instanceTracker = new SingleInstanceTracker(base, new SnmpInstId(lastId)) {
                @Override
                protected void storeResult(SnmpResult result) {
                    logger.trace("Collected SnmpValue '{}'", result);
                    SnmpValue value = result.getValue();
                    String compositeResult = getCompositeValue(keyword, value.toDisplayString());
                    collectionJob.setMetricValue(metricObjId, "int32", compositeResult);
                }

                @Override
                public void setFailed(boolean failed) {
                    super.setFailed(failed);
                    logger.trace("Collection Failed for metricObjId '{}'", metricObjId);
                    collectionJob.setMetricValue(metricObjId, "unknown", null);
                }

                @Override
                public void setTimedOut(boolean timedOut) {
                    super.setTimedOut(timedOut);
                    logger.trace("Collection timedOut for metricObjId '{}'", metricObjId);
                    collectionJob.setMetricValue(metricObjId, "unknown", null);
                }
            };
            trackers.add(instanceTracker);
        }

        CollectionTracker tracker = new AggregateTracker(trackers);

        try(SnmpWalker walker = m_snmpStrategy.createWalker(snmpAgentConfig, "SnmpProtocolCollector for " + snmpAgentConfig.getAddress(), tracker)) {
            walker.start();
            try {
                walker.waitFor();
            } catch (InterruptedException e) {
                logger.error("Interuppted while waiting for collector. Results may be incomplete.", e);
            }
        }

        return collectionJob;
    }

