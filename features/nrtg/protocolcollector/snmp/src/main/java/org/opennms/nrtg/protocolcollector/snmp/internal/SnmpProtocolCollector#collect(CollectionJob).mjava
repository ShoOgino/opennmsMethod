    @Override
    public CollectionJob collect(final CollectionJob collectionJob) {
        LOG.info("SnmpProtocolCollector is collecting collectionJob '{}'", collectionJob.getId());

        SnmpAgentConfig snmpAgentConfig = SnmpAgentConfig.parseProtocolConfigurationString(collectionJob.getProtocolConfiguration());

        List<Collectable> trackers = new ArrayList<Collectable>();
        for (final String metricObjId : collectionJob.getAllMetrics()) {
        	
        	SnmpObjId requestOid = SnmpObjId.get(metricObjId);
        	SnmpObjId base = requestOid.getPrefix(requestOid.length()-1);
        	int lastId = requestOid.getLastSubId();
        	
        	SingleInstanceTracker instanceTracker = new SingleInstanceTracker(base, new SnmpInstId(lastId)) {

				@Override
				protected void storeResult(SnmpResult result) {
				    LOG.trace("Collected SnmpValue '{}'", result);
					SnmpValue value = result.getValue();
					String metricType = value == null ? "unknown" : typeToString(value.getType());
					collectionJob.setMetricValue(metricObjId, metricType, value == null ? null : value.toDisplayString());
				}

				@Override
				public void setFailed(boolean failed) {
					super.setFailed(failed);
					LOG.trace("Collection Failed for metricObjId '{}'", metricObjId);
					collectionJob.setMetricValue(metricObjId, "unknown", null);
				}

				@Override
				public void setTimedOut(boolean timedOut) {
					super.setTimedOut(timedOut);
					LOG.trace("Collection timedOut for metricObjId '{}'", metricObjId);
					collectionJob.setMetricValue(metricObjId, "unknown", null);
				}

        	};
			trackers.add(instanceTracker);
        	
        }

        // Attempt to determine the location name
        String locationName = null;
        OnmsNode node = m_nodeDao.get(collectionJob.getNodeId());
        if (node != null) {
            OnmsMonitoringLocation monitoringLocation = node.getLocation();
            if (monitoringLocation != null) {
                locationName = monitoringLocation.getLocationName();
            }
        }

        AggregateTracker tracker = new AggregateTracker(trackers);
        CompletableFuture<AggregateTracker> future = m_locationAwareSnmpClient.walk(snmpAgentConfig, tracker)
            .withDescription("NRTG")
            .withLocation(locationName)
            .execute();

        try {
            future.get();
		} catch (ExecutionException e) {
		    LOG.warn("Failed to collect SNMP metrics for {}.", snmpAgentConfig.getAddress(), e);
        } catch (InterruptedException e) {
            LOG.warn("Interupted while collectiong SNMP metrics for {}.", snmpAgentConfig.getAddress());
            Thread.interrupted();
        }
        return collectionJob;
    }

