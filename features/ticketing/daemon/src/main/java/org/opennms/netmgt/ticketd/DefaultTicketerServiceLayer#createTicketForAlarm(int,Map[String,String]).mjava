    /*
     * (non-Javadoc)
     * @see org.opennms.netmgt.ticketd.TicketerServiceLayer#createTicketForAlarm(int)
     */
    /** {@inheritDoc} */
    @Override
    @Transactional
    public void createTicketForAlarm(int alarmId, Map<String,String> attributes) {

        OnmsAlarm alarm = m_alarmDao.get(alarmId);
        if (alarm == null) {
            LOG.error("No alarm with id {} was found. No ticket will be created.", alarmId);
            return;
        }

        if (SKIP_CREATE_WHEN_CLEARED) {
            final OnmsSeverity currentSeverity = alarm.getSeverity();
            if (currentSeverity != null && currentSeverity.equals(OnmsSeverity.CLEARED)) {
                LOG.info("Alarm with id {} is currently cleared. No ticket will be created.", alarmId);
                return;
            }
        }

        Ticket ticket = createTicketFromAlarm(alarm, attributes);
        if (alarm.isSituation()) {
            ticket.setSituation(true);
            Set<OnmsAlarm> relatedAlarms = alarm.getRelatedAlarms();
            populateRelatedAlarmsForTicket(ticket, relatedAlarms);
        }

        try {
            m_ticketerPlugin.saveOrUpdate(ticket);
            alarm.setTTicketId(ticket.getId());
            alarm.setTTicketState(TroubleTicketState.OPEN);
        } catch (PluginException e) {
            alarm.setTTicketState(TroubleTicketState.CREATE_FAILED);
            LOG.error("Unable to create ticket for alarm: {}", e.getMessage(), e);
            m_eventIpcManager.sendNow(createEvent(e.getMessage()));
        }

        m_alarmDao.saveOrUpdate(alarm);
        updateNewTicketState(alarm, null);

    }

