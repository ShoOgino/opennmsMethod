    @Override
    public Ticket get(String ticketId) throws PluginException {

        SHSIMPINCQueryType queryType = new SHSIMPINCQueryType();
        SHSIMPINCQueryType.INCIDENT incidentQuery = new SHSIMPINCQueryType.INCIDENT();
        List<MXStringQueryType> ticketList = incidentQuery.getTICKETID();
        MXStringQueryType ticketQuery = new MXStringQueryType();
        ticketQuery.setValue(ticketId);
        ticketList.add(ticketQuery);
        queryType.setINCIDENT(incidentQuery);
        QuerySHSIMPINCType queryIncident = new QuerySHSIMPINCType();
        queryIncident.setSHSIMPINCQuery(queryType);

        QuerySHSIMPINCResponseType response = port.querySHSIMPINC(queryIncident);

        if (!CollectionUtils.isEmpty(response.getSHSIMPINCSet().getINCIDENT())) {

            // Response will only have one element in the list
            SHSIMPINCINCIDENTType incident = response.getSHSIMPINCSet().getINCIDENT().get(0);

            if (incident != null) {

                Ticket ticket = new Ticket();

                MXStringType affectedPerson = new MXStringType();
                affectedPerson = incident.getAFFECTEDPERSON();
                MXStringType assetNum = new MXStringType();
                assetNum = incident.getASSETNUM();
                MXStringType classId = new MXStringType();
                classId = incident.getCLASS();
                MXStringType classStructureId = new MXStringType();
                classStructureId = incident.getCLASSSTRUCTUREID();
                MXStringType description = new MXStringType();
                description = incident.getDESCRIPTION();
                MXStringType longDescription = new MXStringType();
                longDescription = incident.getDESCRIPTIONLONGDESCRIPTION();
                MXStringType location = new MXStringType();
                location = incident.getLOCATION();
                MXStringType ownerGroup = new MXStringType();
                ownerGroup = incident.getOWNERGROUP();
                MXStringType reportedBy = new MXStringType();
                reportedBy = incident.getREPORTEDBY();
                MXStringType shsCallerType = new MXStringType();
                shsCallerType = incident.getSHSCALLERTYPE();
                MXStringType shsReasonForOutage = new MXStringType();
                shsReasonForOutage = incident.getSHSREASONFOROUTAGE();
                MXStringType shsResolution = new MXStringType();
                shsResolution = incident.getSHSRESOLUTION();
                MXStringType shsRoomNumber = new MXStringType();
                shsRoomNumber = incident.getSHSROOMNUMBER();
                MXStringType siteId = new MXStringType();
                siteId = incident.getSITEID();
                MXStringType source = new MXStringType();
                source = incident.getSOURCE();
                MXBooleanType statusIface = new MXBooleanType();
                statusIface = incident.getSTATUSIFACE();
                MXStringType ticketIdFromIncident = new MXStringType();
                ticketIdFromIncident = incident.getTICKETID();

                if (ticketIdFromIncident == null) {
                    return null;
                }

                ticket.setId(ticketIdFromIncident.getValue());

                if (affectedPerson != null) {
                    ticket.addAttribute(AFFECTED_PERSON,
                                        affectedPerson.getValue());
                }
                if (assetNum != null) {
                    ticket.addAttribute(ASSET_NUM, assetNum.getValue());
                }
                if (classId != null) {
                    ticket.addAttribute(CLASS_ID, classId.getValue());
                }
                if (classStructureId != null) {
                    ticket.addAttribute(CLASS_STRUCTURE_ID,
                                        classStructureId.getValue());
                }
                if (description != null) {
                    ticket.setSummary(description.getValue());
                }
                if (longDescription != null) {
                    ticket.setDetails(longDescription.getValue());
                }
                if (location != null) {
                    ticket.addAttribute(LOCATION, location.getValue());
                }
                if (ownerGroup != null) {
                    ticket.addAttribute(OWNER_GROUP, ownerGroup.getValue());
                }
                if (reportedBy != null) {
                    ticket.setUser(reportedBy.getValue());
                }
                if (shsCallerType != null) {
                    ticket.addAttribute(SHS_CALLER_TYPE,
                                        shsCallerType.getValue());
                }
                if (shsReasonForOutage != null) {
                    ticket.addAttribute(SHS_REASON_FOR_OUTAGE,
                                        shsReasonForOutage.getValue());
                }
                if (shsResolution != null) {
                    ticket.addAttribute(SHS_RESOLUTION,
                                        shsResolution.getValue());
                }
                if (shsRoomNumber != null) {
                    ticket.addAttribute(SHS_ROOM_NUMBER,
                                        shsRoomNumber.getValue());
                }
                if (siteId != null) {
                    ticket.addAttribute(SITE_ID, siteId.getValue());
                }
                if (source != null) {
                    ticket.addAttribute(SOURCE, source.getValue());
                }

                MXStringType status = new MXStringType();
                status = incident.getSTATUS();
                try {
                    if ((status != null) && (status.getValue() != null)
                            && (status.getValue().equals(getProperties().getProperty("tsrm.status.open")))) {
                        ticket.setState(Ticket.State.OPEN);
                    } else if ((status != null) && (status.getValue() != null)
                            && (status.getValue().equals(getProperties().getProperty("tsrm.status.close")))) {
                        ticket.setState(Ticket.State.CLOSED);
                    }
                } catch (IOException e) {
                    LOG.error("Unable to load tsrm.status from properties ",
                              e);
                }

                if (statusIface != null) {
                    ticket.addAttribute(STATUS_IFACE,
                                        statusIface.isValue().toString());
                }
                return ticket;
            }
            return null;

        } else {
            return null;
        }

    }

