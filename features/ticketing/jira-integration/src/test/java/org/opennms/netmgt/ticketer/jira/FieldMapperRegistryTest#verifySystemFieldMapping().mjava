    // System fields
    @Test
    public void verifySystemFieldMapping() {
        // Issue Type
        Assert.assertEquals(ComplexIssueInputFieldValue.with("name", "Bug"),
                getValue(new FieldSchemaBuilder()
                        .withType("issuetype")
                        .withSystem("issuetype")
                        .build(), "Bug"));

        // Description
        Assert.assertEquals("My description",
                getValue(new FieldSchemaBuilder()
                        .withType("string")
                        .withSystem("description")
                        .build(), "My description"));

        // Project
        Assert.assertEquals(ComplexIssueInputFieldValue.with("key", "NMS"),
                getValue(new FieldSchemaBuilder()
                        .withType("project")
                        .withSystem("project")
                        .build(), "NMS"));

        // Fix Versions
        Assert.assertEquals(Lists.newArrayList(ComplexIssueInputFieldValue.with("name", "20.0.0"), ComplexIssueInputFieldValue.with("name", "21.0.0")),
                getValue(new FieldSchemaBuilder()
                    .withItems("version")
                    .withType("array")
                    .withSystem("fixVersions")
                    .build(), "20.0.0,21.0.0"));

        // Affected Versions
        Assert.assertEquals(Lists.newArrayList(ComplexIssueInputFieldValue.with("name", "20.0.0"), ComplexIssueInputFieldValue.with("name", "21.0.0")),
                getValue(new FieldSchemaBuilder()
                        .withItems("version")
                        .withType("array")
                        .withSystem("versions")
                        .build(), "20.0.0,21.0.0"));

        // Summary
        Assert.assertEquals("Dummy summary",
                getValue(new FieldSchemaBuilder()
                    .withType("string")
                    .withSystem("summary")
                    .build(), "Dummy summary"));

        // Reporter
        Assert.assertEquals(ComplexIssueInputFieldValue.with("name", "ulf"),
                getValue(new FieldSchemaBuilder()
                    .withType("user")
                    .withSystem("reporter")
                    .build(), "ulf"));

        // Assignee
        Assert.assertEquals(ComplexIssueInputFieldValue.with("name", "ulf"),
                getValue(new FieldSchemaBuilder()
                        .withType("user")
                        .withSystem("assignee")
                        .build(), "ulf"));

        // Priority
        Assert.assertEquals(ComplexIssueInputFieldValue.with("name", "Trivial"),
                getValue(new FieldSchemaBuilder()
                        .withType("priority")
                        .withSystem("priority")
                        .build(), "Trivial"));

        // Environment
        Assert.assertEquals("Dummy environment",
                getValue(new FieldSchemaBuilder()
                        .withType("string")
                        .withSystem("environment")
                        .build(), "Dummy environment"));

        // Duedate
        Assert.assertEquals("2017-01-31",
                getValue(new FieldSchemaBuilder()
                        .withType("date")
                        .withSystem("duedate")
                        .build(), "2017-01-31"));

        // Labels
        Assert.assertEquals(Lists.newArrayList("label1", "label2", "label with space"),
                getValue(new FieldSchemaBuilder()
                        .withItems("string")
                        .withType("array")
                        .withSystem("labels")
                        .build(), "label1,label2,label with space"));

        // Component
        Assert.assertEquals(
                Lists.newArrayList(
                        ComplexIssueInputFieldValue.with("name", "component1"),
                        ComplexIssueInputFieldValue.with("name", "component with space")
                ),
                getValue(new FieldSchemaBuilder()
                        .withType("array")
                        .withItems("component")
                        .withSystem("components")
                        .build(), "component1,component with space"));
    }

