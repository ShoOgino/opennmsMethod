    // Custom fields (one of each type)
    @Test
    public void verifyCustomFieldMapping() {
        // Date field
        Assert.assertEquals("2011-10-03",
                getValue(new FieldSchemaBuilder()
                        .withType("date")
                        .withCustom("com.atlassian.jira.plugin.system.customfieldtypes:datepicker")
                        .build(), "2011-10-03"));

        // Date time field
        Assert.assertEquals("2011-10-19T10:29:29.908+1100",
                getValue(new FieldSchemaBuilder()
                    .withType("datetime")
                        .withCustom("com.atlassian.jira.plugin.system.customfieldtypes:datetime")
                        .build(), "2011-10-19T10:29:29.908+1100"));
        // Number field
        Assert.assertEquals(3.1415,
                getValue(new FieldSchemaBuilder()
                    .withType("number")
                    .withCustom("com.atlassian.jira.plugin.system.customfieldtypes:float")
                    .build(), "3.1415"));

        // Text field (Single line)
        Assert.assertEquals("I am a single text line",
                getValue(new FieldSchemaBuilder()
                        .withType("string")
                        .withCustom("com.atlassian.jira.plugin.system.customfieldtypes:textfield")
                        .build(), "I am a single text line"));

        // Text field (Multi line)
        Assert.assertEquals("I am a \nmulti\nline\ntext",
                getValue(new FieldSchemaBuilder()
                        .withType("string")
                        .withCustom("com.atlassian.jira.plugin.system.customfieldtypes:textarea")
                        .build(), "I am a \nmulti\nline\ntext"));

        // URL
        Assert.assertEquals("http://www.opennms.org",
                getValue(new FieldSchemaBuilder()
                    .withType("string")
                    .withCustom("com.atlassian.jira.plugin.system.customfieldtypes:url")
                    .build(), "http://www.opennms.org"));

        // Labels
        Assert.assertEquals(Lists.newArrayList("label1", "label2", "label with space"),
                getValue(new FieldSchemaBuilder()
                    .withItems("string")
                    .withType("array")
                    .withCustom("com.atlassian.jira.plugin.system.customfieldtypes:labels")
                    .build(), "label1,label2,label with space"));

        // Project picker
        Assert.assertEquals(ComplexIssueInputFieldValue.with("key", "NMS"),
                getValue(new FieldSchemaBuilder()
                    .withType("project")
                    .withCustom("com.atlassian.jira.plugin.system.customfieldtypes:project")
                    .build(), "NMS"));

        // Radio button
        Assert.assertEquals(ComplexIssueInputFieldValue.with("value", "red"),
                getValue(new FieldSchemaBuilder()
                    .withType("string")
                    .withCustom("com.atlassian.jira.plugin.system.customfieldtypes:radiobuttons")
                    .build(), "red"));

        // Single select
        Assert.assertEquals(ComplexIssueInputFieldValue.with("value", "blue"),
                getValue(new FieldSchemaBuilder()
                        .withType("string")
                        .withCustom("com.atlassian.jira.plugin.system.customfieldtypes:select")
                        .build(), "blue"));

        // Multi select
        Assert.assertEquals(
                Lists.newArrayList(
                    ComplexIssueInputFieldValue.with("value", "red"),
                    ComplexIssueInputFieldValue.with("value", "blue"),
                    ComplexIssueInputFieldValue.with("value", "item with space")
                ),
                getValue(new FieldSchemaBuilder()
                        .withItems("string")
                        .withType("array")
                        .withCustom("com.atlassian.jira.plugin.system.customfieldtypes:multiselect")
                        .build(), "red,blue,item with space"));

        // Checkboxes
        Assert.assertEquals(
                Lists.newArrayList(
                    ComplexIssueInputFieldValue.with("value", "red"), ComplexIssueInputFieldValue.with("value", "item with space!")
                ),
                getValue(new FieldSchemaBuilder()
                        .withItems("string")
                        .withType("array")
                        .withCustom("com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes")
                        .build(), "red,item with space!"));

        // Cascading Select
        Assert.assertEquals(new ComplexIssueInputFieldValue(
                ImmutableMap.<String, Object>builder()
                    .put("value", "parent value")
                    .put("child", ComplexIssueInputFieldValue.with("value", "child value"))
                    .build()),
                getValue(new FieldSchemaBuilder()
                    .withType("array")
                    .withItems("string")
                    .withCustom("com.atlassian.jira.plugin.system.customfieldtypes:cascadingselect")
                    .build(), "parent value,child value"));

        // Group picker (single)
        Assert.assertEquals(ComplexIssueInputFieldValue.with("name", "jira-users"),
                getValue(new FieldSchemaBuilder()
                        .withType("group")
                        .withCustom("com.atlassian.jira.plugin.system.customfieldtypes:grouppicker")
                        .build(), "jira-users"));


        // Group picker (multi)
        Assert.assertEquals(
                Lists.newArrayList(
                    ComplexIssueInputFieldValue.with("name", "jira-users"),
                    ComplexIssueInputFieldValue.with("name", "jira-developers"),
                    ComplexIssueInputFieldValue.with("name", "jira-administrators")
                ),
                getValue(new FieldSchemaBuilder()
                        .withType("array")
                        .withItems("group")
                        .withCustom("com.atlassian.jira.plugin.system.customfieldtypes:multigrouppicker")
                        .build(), "jira-users,jira-developers,jira-administrators"));

        // Version picker (single)
        Assert.assertEquals(ComplexIssueInputFieldValue.with("name", "20.0.0"),
                getValue(new FieldSchemaBuilder()
                        .withType("version")
                        .withCustom("com.atlassian.jira.plugin.system.customfieldtypes:version")
                        .build(), "20.0.0"));


        // Version picker (multiple)
        Assert.assertEquals(
                Lists.newArrayList(
                        ComplexIssueInputFieldValue.with("name", "18.0.0"),
                        ComplexIssueInputFieldValue.with("name", "18.0.1"),
                        ComplexIssueInputFieldValue.with("name", "19.0.0")),
                getValue(new FieldSchemaBuilder()
                        .withType("array")
                        .withItems("version")
                        .withCustom("com.atlassian.jira.plugin.system.customfieldtypes:multiversion")
                        .build(), "18.0.0,18.0.1,19.0.0"));

        // User picker (single)
        Assert.assertEquals(ComplexIssueInputFieldValue.with("name", "ulf"),
                getValue(new FieldSchemaBuilder()
                        .withType("user")
                        .withCustom("com.atlassian.jira.plugin.system.customfieldtypes:userpicker")
                        .build(), "ulf"));


        // User picker (multiple)
        Assert.assertEquals(
                Lists.newArrayList(
                    ComplexIssueInputFieldValue.with("name", "mvr"),
                    ComplexIssueInputFieldValue.with("name", "ulf")
                ),
                getValue(new FieldSchemaBuilder()
                        .withType("array")
                        .withItems("user")
                        .withCustom("com.atlassian.jira.plugin.system.customfieldtypes:multiuserpicker")
                        .build(), "mvr,ulf"));

    }

