    public FieldMapperRegistry(Properties properties) {
        Objects.requireNonNull(properties);
        Map<String, String> lookupMap = buildLookupMap(properties);

        // Each function maps a field by its type to the JIRA ReST API representation (ComplexInputFieldValue in most cases)
        functionMap.put("number", input -> Long.valueOf(input));
        functionMap.put("group", input -> createComplexInputFieldValue(lookupMap, "group", "name", input));
        functionMap.put("user", input -> createComplexInputFieldValue(lookupMap, "user", "name", input));
        functionMap.put("issuetype", input -> createComplexInputFieldValue(lookupMap, "issuetype", "name", input));
        functionMap.put("priority", input -> createComplexInputFieldValue(lookupMap, "priority", "name", input));
        functionMap.put("version", input -> createComplexInputFieldValue(lookupMap, "version", "name", input));
        functionMap.put("component", input -> createComplexInputFieldValue(lookupMap, "component", "name", input));
        functionMap.put("option", input -> createComplexInputFieldValue(lookupMap, "option", "value", input));
        functionMap.put("project", input -> createComplexInputFieldValue(lookupMap, "project", "key", input));

        // option-with-child values can be null, empty, "value" or "value1,value2".
        functionMap.put("option-with-child", input -> {
            if (!Strings.isNullOrEmpty(input)) {
                final String[] split = input.split(","); // split by ","
                if (split != null && split.length >= 1) { // we have at least one value
                    final Map<String, Object> parentValueMap = new HashMap<>();
                    parentValueMap.put("value", split[0]); // set first value
                    final ComplexIssueInputFieldValue parentValue = new ComplexIssueInputFieldValue(parentValueMap);
                    if (split.length >= 2) { // if we have a 2nd value, set it as child of value 1
                        parentValue.getValuesMap().put("child", ComplexIssueInputFieldValue.with("value", split[1]));
                    }
                    return parentValue;
                }
            }
            return null;
        });
    }

