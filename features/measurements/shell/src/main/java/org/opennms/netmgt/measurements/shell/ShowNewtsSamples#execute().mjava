    @Override
    public Object execute() {
        if (sampleRepository == null) {
            System.out.println("Newts must be enabled to use this command.");
            return null;
        }

        final ResourceId resourceIdd = ResourceId.fromString(resourceId);
        final OnmsResource resource = resourceDao.getResourceById(resourceIdd);
        if (resource == null) {
            System.out.printf("No resource with ID '%s' found.\n", resourceId);
            return null;
        }
        // Jim, we found the resource.

        // What attributes i.e. ifHCInOctets are associated with this resource?
        final Map<String, RrdGraphAttribute> attrsByName = resource.getRrdGraphAttributes();
        System.out.printf("Resource with ID '%s' has attributes: %s\n", resourceId, attrsByName.keySet());

        // Filter the attribute name if 1+ were passed in as options
        Set<String> filteredAttrNames = attrsByName.keySet();
        if (attributesSelected != null && !attributesSelected.isEmpty()) {
            filteredAttrNames = attrsByName.keySet().stream()
                    .filter(a -> attributesSelected.contains(a))
                    .collect(Collectors.toSet());
            System.out.printf("Limiting attributes to: %s\n", filteredAttrNames);
        }

        // The attributes for these resources may be spread across many Newts resource
        // Gather this list, so we may process each of these individually
        final Set<String> newtsResourceIds = filteredAttrNames.stream()
                .map(attrsByName::get)
                .map(attr -> {
                    // The Newts Resource ID is stored in the rrdFile attribute
                    String newtsResourceId = attr.getRrdRelativePath();
                    // Remove the file separator prefix, added by the RrdGraphAttribute class
                    if (newtsResourceId.startsWith(File.separator)) {
                        newtsResourceId = newtsResourceId.substring(File.separator.length());
                    }
                    return newtsResourceId;
                })
                .collect(Collectors.toSet());

        for (String newtsResourceId : newtsResourceIds) {
            System.out.printf("Fetching samples for Newts resource ID '%s'...\n", newtsResourceId);
            final Results<Sample> samples = sampleRepository.select(Context.DEFAULT_CONTEXT,
                    new Resource(newtsResourceId),
                    Optional.of(Timestamp.fromEpochMillis(start)),
                    Optional.of(Timestamp.fromEpochMillis(end)));

            // Render the samples
            for (Results.Row<Sample> sampleRow : samples.getRows()) {
                for (Sample sample : sampleRow.getElements()) {
                    if (!filteredAttrNames.contains(sample.getName())) {
                        continue;
                    }
                    final Date date = sample.getTimestamp().asDate();
                    System.out.printf("%s,%s,%.4f\n", rawTimestamps ? date.getTime() : date, sample.getName(), sample.getValue().doubleValue());
                }
            }
        }

        return null;
    }

