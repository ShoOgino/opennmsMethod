    @Test
    public void canFilterOutliers() throws Exception {
        FilterDef filterDef = new FilterDef("OutlierFilter",
                "inputColumn", "Y");

        // Use constant values for the Y column
        RowSortedTable<Long, String, Double> table = TreeBasedTable.create();
        for (long i = 0; i < 100; i++) {
            table.put(i, "X", (double)i);
            table.put(i, "Y", 1.0d);
        }

        // Add an outlier to the first and last elements
        table.put(0L, "Y", 9999.0d);
        table.put(99L, "Y", 9999.0d);

        // Add another one near the middle of the series
        table.put(42L, "Y", 9999.0d);

        // Apply the filter
        getFilterEngine().filter(filterDef, table);

        // The Y column should be constant - no outliers
        for (long i = 1; i < 99; i++) {
            Assert.assertEquals((double) i, table.get(i, "X"), 0.0001);
            Assert.assertEquals(1.0d, table.get(i, "Y"), 0.0001);
        }

        // Outliers at the beginning and end of the series should be replaced with
        // NaN, since these can't be properly interpolated
        Assert.assertTrue(Double.isNaN(table.get(0L, "Y")));
        Assert.assertTrue(Double.isNaN(table.get(99L, "Y")));
    }

