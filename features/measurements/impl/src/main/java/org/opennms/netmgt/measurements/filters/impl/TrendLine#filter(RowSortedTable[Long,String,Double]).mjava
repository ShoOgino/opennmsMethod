    @Override
    public void filter(RowSortedTable<Long, String, Double> table) throws RScriptException {
        Preconditions.checkArgument(table.containsColumn(TIMESTAMP_COLUMN_NAME), String.format("Data source must have a '%s' column.", Filter.TIMESTAMP_COLUMN_NAME));

        // Determine the index of the first and last non-NaN values
        // Assume the values between these are contiguous
        TableLimits limits = Utils.getRowsWithValues(table, m_inputColumn);

        // Make sure we have some samples
        long numSampleRows = limits.lastRowWithValues - limits.firstRowWithValues;
        if (numSampleRows < 1) {
            LOG.error("Insufficient values in column for trending. Excluding trend from data source.");
            return;
        }

        // Determine the step size
        Date lastTimestamp = new Date(table.get(limits.lastRowWithValues, TIMESTAMP_COLUMN_NAME).longValue());
        long stepInMs = (long)(table.get(limits.lastRowWithValues, TIMESTAMP_COLUMN_NAME) - table.get(limits.lastRowWithValues-1, Filter.TIMESTAMP_COLUMN_NAME));

        // Num steps ahead
        int numStepsAhead = (int)Math.floor(m_secondsAhead * 1000 / stepInMs);
        numStepsAhead = Math.max(1, numStepsAhead);

        // Script arguments
        Map<String, Object> arguments = Maps.newHashMap();
        arguments.put("inputColumn", m_inputColumn);
        arguments.put("polynomialOrder", m_polynomialOrder);
        // Array indices in R start at 1
        arguments.put("firstIndex", limits.firstRowWithValues+1);
        arguments.put("lastIndex", limits.lastRowWithValues+1);

        // Calculate the trend line/curve
        RScriptExecutor executor = new RScriptExecutor();
        RScriptOutput output = executor.exec(PATH_TO_R_SCRIPT, new RScriptInput(table, arguments));
        ImmutableTable<Long, String, Double> outputTable = output.getTable();

        // Convert the result to a polynomial
        Polynomial poly = new Polynomial(outputTable.column("x").values().toArray(new Double[0]));

        // Calculate the value of the polynomial for all of the samples
        // and the requested number of steps ahead
        for (long i = limits.firstRowWithValues; i <= (limits.lastRowWithValues + numStepsAhead); i++) {
            if (i >= limits.lastRowWithValues) {
                table.put(i, TIMESTAMP_COLUMN_NAME, (double)new Date(lastTimestamp.getTime() + stepInMs * (i-limits.lastRowWithValues)).getTime());
            }
            double x = table.get(i, TIMESTAMP_COLUMN_NAME);
            table.put(i, m_outputColumn, poly.eval(x));
        }
    }

