    @Override
    public void filter(RowSortedTable<Long, String, Double> qrAsTable) {
        // Extract the values of the input column as a primitive array
        final Map<Long, Double> column = qrAsTable.column(m_inputColumn);
        final double values[] = new double[column.size()];
        int k = 0;
        for (Double value : column.values()) {
            values[k++] = value;
        }

        // Calculate the percentile
        org.apache.commons.math3.stat.descriptive.rank.Percentile percentileCalculator = new org.apache.commons.math3.stat.descriptive.rank.Percentile();
        Double nthPercentile = percentileCalculator.evaluate(values, 100 * m_quantile);

        // Replace values greater than the percentile with NaNs
        for (Entry<Long, Double> entry : column.entrySet()) {
            if (!entry.getValue().isNaN() && entry.getValue() > nthPercentile) {
                entry.setValue(Double.NaN);
            }
        }

        // Perform linear interpolation on missing values
        linearInterpolation(qrAsTable);
    }

