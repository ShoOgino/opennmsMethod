    /**
     * Validates the query request, in order to avoid triggering
     * internal server errors for invalid input.
     *
     * @throws WebApplicationException if validation fails.
     */
    private static void validateQueryRequest(final QueryRequest request) {
        final Map<String,String> labels = new HashMap<String,String>();

        if (request.getEnd() < 0) {
            throw getException(Status.BAD_REQUEST, "Query end must be >= 0: {}", request.getEnd());
        }
        if (request.getStep() <= 0) {
            throw getException(Status.BAD_REQUEST, "Query step must be > 0: {}", request.getStep());
        }
        for (final Source source : request.getSources()) {
            if (source.getResourceId() == null
                    || source.getAttribute() == null
                    || source.getLabel() == null
                    || source.getAggregation() == null) {
                throw getException(Status.BAD_REQUEST, "Query source fields must be set: {}", source);
            }
            if (labels.containsKey(source.getLabel())) {
                throw getException(Status.BAD_REQUEST, "Query source label '" + source.getLabel() + "' conflict: source with that label is already defined.");
            } else {
                labels.put(source.getLabel(), "source");
            }
        }
        for (final Expression expression : request.getExpressions()) {
            if (expression.getExpression() == null
                    || expression.getLabel() == null) {
                throw getException(Status.BAD_REQUEST, "Query expression fields must be set: {}", expression);
            }
            if (labels.containsKey(expression.getLabel())) {
                final String type = labels.get(expression.getLabel());
                throw getException(Status.BAD_REQUEST, "Query expression label '" + expression.getLabel() + "' conflict: " + type + " with that label is already defined.");
            } else {
                labels.put(expression.getLabel(), "expression");
            }
        }
        List<FilterDef> filters = request.getFilters();
        if (filters.size() > 0) {
            for (FilterDef filter : filters) {
                if (filter.getName() == null) {
                    throw getException(Status.BAD_REQUEST, "Filter name must be set: {}", filter);
                }
            }
        }
    }

