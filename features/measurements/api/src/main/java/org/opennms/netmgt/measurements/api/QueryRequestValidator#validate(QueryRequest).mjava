    public void validate(QueryRequest request) throws ValidationException {
        if (request.getEnd() < 0) {
            throw new ValidationException("Query end must be >= 0: {}", request.getEnd());
        }
        if (request.getStep() <= 0) {
            throw new ValidationException("Query step must be > 0: {}", request.getStep());
        }
        if ((request.getHeartbeat() == null && request.getInterval() != null)
                || (request.getHeartbeat() != null && request.getInterval() == null)) {
            throw new ValidationException("If either the heartbeat or the interval are set, then both must be set.");
        }
        if (request.getHeartbeat() != null && request.getInterval() != null) {
            if (request.getHeartbeat() <= 0) {
                throw new ValidationException("Heartbeat must be positive: {}", request.getHeartbeat());
            }
            if (request.getInterval() <= 0) {
                throw new ValidationException("Interval must be positive: {}", request.getInterval());
            }

            if (request.getStep() % request.getInterval() != 0) {
                throw new ValidationException("Step must be a multiple of the interval. Step: {}, Interval: {}",
                        request.getStep(), request.getInterval());
            }

            if (request.getHeartbeat() % request.getInterval() != 0) {
                throw new ValidationException("Heartbeat must be a multiple of the interval. Interval: {} Heartbeat: {}",
                        request.getInterval(), request.getHeartbeat());
            }
        }

        final Map<String,String> labels = new HashMap<>();
        for (final Source source : request.getSources()) {
            if (source.getResourceId() == null
                    || source.getAttribute() == null
                    || source.getLabel() == null
                    || source.getAggregation() == null) {
                throw new ValidationException("Query source fields must be set: {}", source);
            }
            if (labels.containsKey(source.getLabel())) {
                throw new ValidationException("Query source label '{}' conflict: source with that label is already defined.", source.getLabel());
            } else {
                labels.put(source.getLabel(), "source");
            }
        }
        for (final Expression expression : request.getExpressions()) {
            if (expression.getExpression() == null
                    || expression.getLabel() == null) {
                throw new ValidationException("Query expression fields must be set: {}", expression);
            }
            if (labels.containsKey(expression.getLabel())) {
                final String type = labels.get(expression.getLabel());
                throw new ValidationException("Query expression label '{}' conflict: {} with that label is already defined.", expression.getLabel(), type);
            } else {
                labels.put(expression.getLabel(), "expression");
            }
        }
        List<FilterDef> filters = request.getFilters();
        if (filters.size() > 0) {
            for (FilterDef filter : filters) {
                if (filter.getName() == null) {
                    throw new ValidationException("Filter name must be set: {}", filter);
                }
            }
        }
    }

