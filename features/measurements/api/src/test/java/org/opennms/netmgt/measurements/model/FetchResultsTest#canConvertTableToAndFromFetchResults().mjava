    @Test
    public void canConvertTableToAndFromFetchResults() {
        final double delta = 0.0000001;

        // Simple table with 3 columns and 3 rows
        RowSortedTable<Long, String, Double> table = TreeBasedTable.create();
        table.put(0L, Filter.TIMESTAMP_COLUMN_NAME, 0d);
        table.put(0L, "x", 1d);

        table.put(1L, Filter.TIMESTAMP_COLUMN_NAME, 100d);
        table.put(1L, "x", 1d);
        
        // Don't add values for x, but add a value for y in the last row
        table.put(2L, Filter.TIMESTAMP_COLUMN_NAME, 200d);
        table.put(2L, "y", 99d);

        // Create the fetch results using the table
        FetchResults results = new FetchResults(table, 300, new HashMap<String,Object>(), null);

        // Verify
        Map<String, double[]> columns = results.getColumns();
        assertArrayEquals(columns.get("x"), new double[]{1d, 1d, Double.NaN}, delta);
        assertArrayEquals(columns.get("y"), new double[]{Double.NaN, Double.NaN, 99d}, delta);

        // Convert back to a table
        table = results.asRowSortedTable();

        // Verify
        assertEquals(3, table.columnKeySet().size());
        assertTrue(table.columnKeySet().containsAll(Lists.newArrayList(Filter.TIMESTAMP_COLUMN_NAME, "x", "y")));

        assertEquals(0d, table.get(0L, Filter.TIMESTAMP_COLUMN_NAME), delta);
        assertEquals(100d, table.get(1L, Filter.TIMESTAMP_COLUMN_NAME), delta);
        assertEquals(200d, table.get(2L, Filter.TIMESTAMP_COLUMN_NAME), delta);

        assertEquals(1d, table.get(0L, "x"), delta);
        assertEquals(1d, table.get(1L, "x"), delta);
        assertEquals(Double.NaN, table.get(2L, "x"), delta);

        assertEquals(Double.NaN, table.get(0L, "y"), delta);
        assertEquals(Double.NaN, table.get(1L, "y"), delta);
        assertEquals(99d, table.get(2L, "y"), delta);
    }

