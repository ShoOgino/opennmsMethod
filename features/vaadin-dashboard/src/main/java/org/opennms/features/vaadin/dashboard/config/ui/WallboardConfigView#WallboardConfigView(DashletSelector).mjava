    /**
     * The constructor used for instantiating new objects.
     *
     * @param dashletSelector the {@link DashletSelector} to be used
     */
    public WallboardConfigView(DashletSelector dashletSelector) {
        /**
         * Setting the member fields
         */
        m_dashletSelector = dashletSelector;

        /**
         * Setting up the layout components and the {@link TabSheet}
         */
        setSizeFull();

        m_tabSheet = new WallboardTabSheet() {
            @Override
            protected void addNewTabComponent() {
                WallboardConfigView.this.addNewTabComponent();
            }
        };

        m_tabSheet.setSizeFull();

        /**
         * Adding the {@link WallboardOverview}
         */
        m_dashboardOverview = new WallboardOverview(this);

        m_overviewTab = m_tabSheet.addTab(m_dashboardOverview, "Overview");

        m_overviewTab.setClosable(false);

        m_tabSheet.setSelectedTab(m_overviewTab);
        m_tabSheet.setCloseHandler(this);

        addComponent(m_tabSheet);

        dashletSelector.addServiceListChangedListener(this);

        /**
         * Adding the listeners
         */
        WallboardProvider.getInstance().getBeanContainer().addItemSetChangeListener(new Container.ItemSetChangeListener() {
            public void containerItemSetChange(Container.ItemSetChangeEvent itemSetChangeEvent) {
                List<Wallboard> wallboardsToRemove = new ArrayList<Wallboard>();
                List<TabSheet.Tab> tabsToRemove = new ArrayList<TabSheet.Tab>();
                for (Map.Entry<Wallboard, TabSheet.Tab> entry : m_wallboardEditorMap.entrySet()) {
                    WallboardEditor wallboardEditor = (WallboardEditor) entry.getValue().getComponent();
                    if (!WallboardProvider.getInstance().containsWallboard(wallboardEditor.getWallboard())) {
                        wallboardsToRemove.add(wallboardEditor.getWallboard());
                        tabsToRemove.add(entry.getValue());
                    }
                }
                for (TabSheet.Tab tab : tabsToRemove) {
                    m_tabSheet.removeTab(tab);
                }
                for (Wallboard wallboard : wallboardsToRemove) {
                    m_wallboardEditorMap.remove(wallboard);
                }
            }
        });
    }

