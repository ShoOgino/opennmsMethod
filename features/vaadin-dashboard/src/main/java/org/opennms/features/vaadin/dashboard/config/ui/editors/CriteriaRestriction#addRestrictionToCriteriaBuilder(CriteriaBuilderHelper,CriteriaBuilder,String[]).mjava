    /**
     * This method adds a given criteria to a {@link CriteriaBuilder}.
     *
     * @param criteriaBuilderHelper the {@link CriteriaBuilderHelper} to be used
     * @param criteriaBuilder       the {@link CriteriaBuilder} to be used
     * @param values                the values of this criteria
     */
    public void addRestrictionToCriteriaBuilder(CriteriaBuilderHelper criteriaBuilderHelper, CriteriaBuilder criteriaBuilder, String[] values) {
        List<Object> listOfObjects = new ArrayList<Object>();

        int i = 0;

        String property = null;

        for (CriteriaEntry entry : getEntries()) {
            switch (entry) {
                case Property: {
                    property = values[i];
                    listOfObjects.add(values[i]);
                    break;
                }
                case Value: {
                    Class clazz = criteriaBuilderHelper.getTypeOfProperty(property);

                    Object object = criteriaBuilderHelper.parseCriteriaValue(clazz, values[i]);

                    if (object == null) {
                        LoggerFactory.getLogger(CriteriaBuilderHelper.class).warn("Cannot parse value '" + values[i] + "' for class " + clazz.getSimpleName());
                        return;
                    } else {
                        listOfObjects.add(object);
                    }
                    break;
                }
                case IntegerValue: {
                    Class clazz = Integer.class;

                    Object object = criteriaBuilderHelper.parseCriteriaValue(clazz, values[i]);

                    if (object == null) {
                        LoggerFactory.getLogger(CriteriaBuilderHelper.class).warn("Cannot parse value '" + values[i] + "' for class " + clazz.getSimpleName());
                        return;
                    } else {
                        listOfObjects.add(object);
                    }
                    break;
                }
                case StringValue: {
                    Class clazz = String.class;

                    Object object = criteriaBuilderHelper.parseCriteriaValue(clazz, values[i]);

                    if (object == null) {
                        LoggerFactory.getLogger(CriteriaBuilderHelper.class).warn("Cannot parse value '" + values[i] + "' for class " + clazz.getSimpleName());
                        return;
                    } else {
                        listOfObjects.add(object);
                    }
                    break;
                }
                default: {
                    break;
                }
            }
            i++;
        }

        addRestriction(property, criteriaBuilderHelper, criteriaBuilder, listOfObjects.toArray());
    }

