    /**
     * This method updates the criteria components.
     */
    private void renderComponents() {
        m_criteriaLayout.removeAllComponents();

        boolean isFirst = true;
        boolean isLast;

        for (int i = 0; i < m_criteriaRestrictionComponents.size(); i++) {
            final CriteriaRestrictionComponent criteriaRestrictionComponent = m_criteriaRestrictionComponents.get(i);
            final int index = i;

            isLast = (i == m_criteriaRestrictionComponents.size() - 1);

            criteriaRestrictionComponent.getRightLayout().removeAllComponents();

            Button plusButton = new Button();
            plusButton.setStyleName("small");
            plusButton.setIcon(new ThemeResource("../runo/icons/16/document-add.png"));

            Button minusButton = new Button();
            minusButton.setStyleName("small");
            minusButton.setIcon(new ThemeResource("../runo/icons/16/document-delete.png"));

            Button upButton = new Button();
            upButton.setStyleName("small");
            upButton.setIcon(new ThemeResource("../runo/icons/16/arrow-up.png"));

            Button downButton = new Button();
            downButton.setStyleName("small");
            downButton.setIcon(new ThemeResource("../runo/icons/16/arrow-down.png"));

            criteriaRestrictionComponent.getRightLayout().addComponent(upButton);
            criteriaRestrictionComponent.getRightLayout().addComponent(downButton);
            criteriaRestrictionComponent.getRightLayout().addComponent(plusButton);
            criteriaRestrictionComponent.getRightLayout().addComponent(minusButton);

            if (m_criteriaRestrictionComponents.size() == 1) {
                minusButton.setEnabled(false);
                upButton.setEnabled(false);
                downButton.setEnabled(false);
            } else {
                if (isFirst) {
                    upButton.setEnabled(false);
                }

                if (isLast) {
                    downButton.setEnabled(false);
                }
            }

            upButton.addClickListener(new Button.ClickListener() {
                @Override
                public void buttonClick(Button.ClickEvent clickEvent) {
                    Collections.swap(m_criteriaRestrictionComponents, index, index - 1);
                    renderComponents();
                }
            });

            downButton.addClickListener(new Button.ClickListener() {
                @Override
                public void buttonClick(Button.ClickEvent clickEvent) {
                    Collections.swap(m_criteriaRestrictionComponents, index, index + 1);
                    renderComponents();
                }
            });

            minusButton.addClickListener(new Button.ClickListener() {
                public void buttonClick(Button.ClickEvent clickEvent) {
                    m_criteriaRestrictionComponents.remove(criteriaRestrictionComponent);
                    renderComponents();
                }
            });

            plusButton.addClickListener(new Button.ClickListener() {
                public void buttonClick(Button.ClickEvent clickEvent) {
                    m_criteriaRestrictionComponents.add(index + 1, new CriteriaRestrictionComponent(m_criteriaBuilderHelper, "Limit(10)"));
                    renderComponents();
                }
            });

            isFirst = false;

            m_criteriaLayout.addComponent(criteriaRestrictionComponent);
        }
    }

