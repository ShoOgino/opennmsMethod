    /**
     * Constructor for instantiating a {@link PropertiesWindow} for a given {@link DashletSpec}.
     *
     * @param dashletSpec     the {@link DashletSpec} to edit
     * @param dashletSelector the {@link DashletSelector} for querying the property data
     */
    public PropertiesWindow(final DashletSpec dashletSpec, final DashletSelector dashletSelector) {
        super("Properties");
        /**
         * Setting up this window instance
         */
        setModal(true);
        setClosable(false);
        setResizable(false);
        setWidth("60%");

        /**
         * Using a vertical layout for content
         */
        VerticalLayout verticalLayout = new VerticalLayout();
        verticalLayout.setMargin(true);

        /**
         * Setting up the table object for displaying the parameters
         */
        final Table table = new Table();

        table.setTableFieldFactory(new DefaultFieldFactory() {
            @Override
            public Field createField(Container container, Object itemId, Object propertyId, Component uiContext) {
                Field field = super.createField(container, itemId, propertyId, uiContext);
                if (propertyId.equals("Key")) {
                    field.setReadOnly(true);
                } else {
                    field.setSizeFull();
                }
                return field;
            }
        });

        table.setEditable(true);
        table.setSizeFull();
        table.setImmediate(true);

        table.addContainerProperty("Key", String.class, "");
        table.addContainerProperty("Value", String.class, "");

        /**
         * Filling the date with parameter data
         */
        final Map<String, String> requiredParameters = dashletSelector.getDashletFactoryForName(dashletSpec.getDashletName()).getRequiredParameters();

        for (Map.Entry<String, String> entry : requiredParameters.entrySet()) {
            if (dashletSpec.getParameters().containsKey(entry.getKey())) {
                table.addItem(new Object[]{entry.getKey(), dashletSpec.getParameters().get(entry.getKey())}, entry.getKey());
            } else {
                table.addItem(new Object[]{entry.getKey(), entry.getValue()}, entry.getKey());
            }
        }

        table.setColumnWidth("Key", 100);
        table.setColumnWidth("Value", -1);

        verticalLayout.addComponent(table);

        /**
         * Using an additional {@link HorizontalLayout} for layouting the buttons
         */
        HorizontalLayout horizontalLayout = new HorizontalLayout();

        horizontalLayout.setMargin(true);
        horizontalLayout.setSpacing(true);
        horizontalLayout.setWidth("100%");

        /**
         * Adding the cancel button...
         */
        Button cancel = new Button("Cancel");
        cancel.addClickListener(new Button.ClickListener() {
            @Override
            public void buttonClick(Button.ClickEvent event) {
                close();
            }
        });

        cancel.setClickShortcut(ShortcutAction.KeyCode.ESCAPE, null);
        horizontalLayout.addComponent(cancel);
        horizontalLayout.setExpandRatio(cancel, 1);
        horizontalLayout.setComponentAlignment(cancel, Alignment.TOP_RIGHT);

        /**
         * ...and the OK button
         */
        Button ok = new Button("Save");

        ok.addClickListener(new Button.ClickListener() {
            @Override
            public void buttonClick(Button.ClickEvent event) {
                for (Map.Entry<String, String> entry : requiredParameters.entrySet()) {
                    String newValue = table.getItem(entry.getKey()).getItemProperty("Value").getValue().toString();
                    dashletSpec.getParameters().put(entry.getKey(), newValue);
                }

                WallboardProvider.getInstance().save();
                ((WallboardConfigUI) getUI()).notifyMessage("Data saved", "Duration");

                close();
            }
        });

        ok.setClickShortcut(ShortcutAction.KeyCode.ENTER, null);
        horizontalLayout.addComponent(ok);

        /**
         * Adding the layout and setting the content
         */
        verticalLayout.addComponent(horizontalLayout);
        setContent(verticalLayout);
    }

