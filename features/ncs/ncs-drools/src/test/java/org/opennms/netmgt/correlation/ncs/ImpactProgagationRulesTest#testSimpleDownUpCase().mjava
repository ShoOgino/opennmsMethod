    @Test
    @DirtiesContext
    public void testSimpleDownUpCase() throws Exception {

		// 1. Assert empty workspace
        resetFacts();
        verifyFacts();
        
        
        // 2. verify Impact on ComponentDownEvent
        resetFacts();
        resetEvents();
        
        // component to request dependencies for
        Component c = createComponent("ServiceElementComponent", "NA-SvcElemComp", "9876,jnxVpnPw-vcid(50)");
        Event downEvent = createVpnPwDownEvent(17, m_pe2NodeId, "10.1.1.1", "5", "ge-3/1/4.50");
        
        ComponentDownEvent cde = new ComponentDownEvent(c, downEvent);
        
        anticipateFacts(cde, new ComponentImpacted(c, cde), new DependenciesNeeded(c, cde), new ImpactEventSent(c, cde));
        
        anticipateEvent(createComponentImpactedEvent("ServiceElementComponent", "jnxVpnPw-vcid(50)", "NA-SvcElemComp", "9876,jnxVpnPw-vcid(50)", 17));
        
        // pretend to be a using rule that inserts the DependenciesNeeded fact
		insertFactAndFireRules(cde);
        
		verifyFacts();
		verifyEvents();
		
		
		// 3. Verify resolution and memory clean up on ComponentUpEvent
		resetFacts();
		resetEvents();
		
		anticipateEvent(createComponentResolvedEvent("ServiceElementComponent", "jnxVpnPw-vcid(50)", "NA-SvcElemComp", "9876,jnxVpnPw-vcid(50)", 17));
		
		// expect all facts to be resolved
		anticipateFacts();
		
        Event upEvent = createVpnPwUpEvent(17, m_pe2NodeId, "10.1.1.1", "5", "ge-3/1/4.50");
        ComponentUpEvent cue = new ComponentUpEvent(c, upEvent);
        
        insertFactAndFireRules(cue);
		
		verifyFacts();
		verifyEvents();
	
    }

