    @Test
    @DirtiesContext
    public void testTwoOutagesCase() throws Exception {
        // Test what happens to the parent when there are two children impacted one is resolved

        // Get engine
        DroolsCorrelationEngine engine = findEngineByName("dependencyRules");

        // Anticipate 1st down event
        getAnticipator().reset();
        anticipate(  createComponentImpactedEvent( findSubcomponent (m_svc, "NA-SvcElemComp", "8765:jnxVpnPw-vcid(50)"), 17 ) );
        anticipate(  createComponentImpactedEvent( findSubcomponent (m_svc, "NA-ServiceElement", "8765"), 17 ) );
        anticipate(  createComponentImpactedEvent(findSubcomponent (m_svc, "NA-Service", "123"), 17 ) );

        // Generate down event
        System.err.println("SENDING VpnPwDown EVENT!!");
        engine.correlate( createVpnPwDownEvent( 17, m_pe1NodeId, "10.1.1.1", "5", "ge-1/0/2.50" ) );

        // Check down event
        getAnticipator().verifyAnticipated();

        // Anticipate 2nd down event
        getAnticipator().reset();
        anticipate(  createComponentImpactedEvent( findSubcomponent (m_svc, "NA-SvcElemComp", "9876:jnxVpnPw-vcid(50)"), 18 ) );
        anticipate(  createComponentImpactedEvent( findSubcomponent (m_svc, "NA-ServiceElement", "9876"), 18 ) );
        
        // Should we get this?
        //anticipate(  createComponentImpactedEvent( "Service", "CokeP2P", "NA-Service", "123", 18 ) );

        // Generate another down event for the other PE
        System.err.println("SENDING 2nd VpnPwDown EVENT!!");
        engine.correlate( createVpnPwDownEvent( 18, m_pe2NodeId, "10.1.1.2", "5", "ge-3/1/4.50" ) );

        // Check 2nd down event
        getAnticipator().verifyAnticipated();

        // Anticipate up event
        getAnticipator().reset();
        anticipate(  createComponentResolvedEvent( findSubcomponent (m_svc, "NA-SvcElemComp", "8765:jnxVpnPw-vcid(50)"), 17 ) );
        anticipate(  createComponentResolvedEvent( findSubcomponent (m_svc, "NA-ServiceElement", "8765"), 17 ) );

        // Generate up event
        System.err.println("SENDING VpnPwUp EVENT!!");
        engine.correlate( createVpnPwUpEvent( 19, m_pe1NodeId, "10.1.1.1", "5", "ge-1/0/2.50" ) );

        // Check up event
        getAnticipator().verifyAnticipated();

        // Anticipate 2nd up event
        getAnticipator().reset();
        anticipate(  createComponentResolvedEvent( findSubcomponent (m_svc, "NA-SvcElemComp", "9876:jnxVpnPw-vcid(50)"), 18 ) );
        anticipate(  createComponentResolvedEvent( findSubcomponent (m_svc, "NA-ServiceElement", "9876"), 18 ) );

        anticipate(  createComponentResolvedEvent( findSubcomponent (m_svc, "NA-Service", "123"), 18 ) );
        

        // Generate up event
        System.err.println("SENDING VpnPwUp EVENT!!");
        engine.correlate( createVpnPwUpEvent( 20, m_pe2NodeId, "10.1.1.2", "5", "ge-3/1/4.50" ) );

        // Check up event
        getAnticipator().verifyAnticipated();

        
        // Memory should be clean!
        assertEquals( 0, engine.getMemorySize() );

    }

