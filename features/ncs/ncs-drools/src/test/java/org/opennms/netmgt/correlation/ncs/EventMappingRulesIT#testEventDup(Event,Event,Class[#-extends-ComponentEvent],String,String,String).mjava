	private void testEventDup(Event event, Event event2, Class<? extends ComponentEvent> componentEventClass,	String componentType, String componentForeignSource, String componentForeignId) {
		// Get engine
        DroolsCorrelationEngine engine = findEngineByName("eventMappingRules");
        
		assertEquals("Expected nothing but got " + engine.getKieSessionObjects(), 0, engine.getKieSessionObjects().size());
        
		engine.correlate( event );
		
		Collection<? extends Object> memObjects = engine.getKieSessionObjects();

		assertEquals("Unexpected size of workingMemory " + memObjects, 1, memObjects.size());

		Object eventObj = Iterables.getFirst(memObjects, null);

		assertTrue( componentEventClass.isInstance(eventObj) );
		assertTrue( eventObj instanceof ComponentEvent );
		
		ComponentEvent c = (ComponentEvent) eventObj;
		
		assertSame(event, c.getEvent());
		
		Component component = c.getComponent();
		assertEquals(componentType, component.getType());
		assertEquals(componentForeignSource, component.getForeignSource());
		assertEquals(componentForeignId, component.getForeignId());
		
		// Adding a copy of the event should not add to working memory
		engine.correlate( event2 );

		memObjects = engine.getKieSessionObjects();

		assertEquals("Unexpected size of workingMemory " + memObjects, 1, memObjects.size());

		eventObj = Iterables.getFirst(memObjects, null);

		assertTrue( componentEventClass.isInstance(eventObj) );
		assertTrue( eventObj instanceof ComponentEvent );
		
		c = (ComponentEvent) eventObj;
		
		assertSame(event, c.getEvent());
		
		component = c.getComponent();
		assertEquals(componentType, component.getType());
		assertEquals(componentForeignSource, component.getForeignSource());
		assertEquals(componentForeignId, component.getForeignId());
		
		
		
	}

