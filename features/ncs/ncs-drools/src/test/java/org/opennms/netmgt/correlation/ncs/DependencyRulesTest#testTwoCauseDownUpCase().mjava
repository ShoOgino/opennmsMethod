    @Test
    @DirtiesContext
    public void testTwoCauseDownUpCase() throws Exception {

        // Get engine
        DroolsCorrelationEngine engine = findEngineByName("dependencyRules");

        // Antecipate down event
        getAnticipator().reset();
        
        anticipate( transform( findPathToSubcomponent(m_svc,  "NA-SvcElemComp", "9876,jnxVpnPw-vcid(50)" ), toComponentImpactedEvent(17) ) );

        // Generate down event
        System.err.println("SENDING VpnPwDown EVENT!!");
        engine.correlate( createVpnPwDownEvent( 17, m_pe2NodeId, "10.1.1.1", "5", "ge-3/1/4.50" ) ); //  "NA-SvcElemComp", "9876,jnxVpnPw-vcid(50)"

        // Check down event
        getAnticipator().verifyAnticipated();
        getAnticipator().reset();

        // Second outage
        anticipate( transform( singleton( findSubcomponent(m_svc, "NA-SvcElemComp", "9876,jnxVpnIf") ), toComponentImpactedEvent(18) ) );
        
        System.err.println("SENDING VpnIfDown EVENT!!");
        engine.correlate( createVpnIfDownEvent(18, m_pe2NodeId, "10.1.1.1", "5", "ge-3/1/4.50" ) );
        
        
        getAnticipator().verifyAnticipated();
        getAnticipator().reset();

        // expect only the resolved subelement to come back up
        anticipate( transform( singleton( findSubcomponent(m_svc, "NA-SvcElemComp", "9876,jnxVpnPw-vcid(50)") ), toComponentResolvedEvent(17) ) );
        
        // Generate up event
        System.err.println("SENDING VpnPwUp EVENT!!");
        engine.correlate( createVpnPwUpEvent( 19, m_pe2NodeId, "10.1.1.1", "5", "ge-3/1/4.50" ) );
        
        // Check up event
        getAnticipator().verifyAnticipated();
        getAnticipator().reset();

        anticipate( transform( findPathToSubcomponent(m_svc,  "NA-SvcElemComp", "9876,jnxVpnIf" ), toComponentResolvedEvent(18) ) );
        
        System.err.println("SENDING VpnIfUp EVENT!!");
        engine.correlate( createVpnIfUpEvent(20, m_pe2NodeId, "10.1.1.1", "5", "ge-3/1/4.50" ) );
        
        getAnticipator().verifyAnticipated();
        
        // Memory should be clean!
        assertEquals( 0, engine.getMemorySize() );

    }

