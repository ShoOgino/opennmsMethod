	@Test
    @DirtiesContext
    public void testSimpleALLRulesPropagation() throws Exception {
		// 1. Assert empty workspace
        resetFacts();
        verifyFacts();
        
        
        // 2. verify Impact on ComponentDownEvent
        resetFacts();
        resetEvents();
        
        // component to request dependencies for
        Component c = createComponent("ServiceElementComponent", "NA-SvcElemComp", "9876:jnxVpnPw-vcid(50)");
        Event downEvent = createVpnPwDownEvent(17, m_pe2NodeId, "10.1.1.1", "5", "ge-3/1/4.50");
        
        ComponentDownEvent cde = new ComponentDownEvent(c, downEvent);
        
        // this component depends on c
        Component parent = createComponent("ServiceElement", "NA-ServiceElement", "9876");
        
        DependsOn dep = new DependsOn( parent, c );
        ComponentImpacted componentImpacted = new ComponentImpacted(c, cde);
        ImpactEventSent eventSent = new ImpactEventSent( c, cde);
        
		anticipateFacts( dep, componentImpacted, eventSent, new ComponentImpacted( parent, cde ), new DependenciesNeeded(parent, cde), new ImpactEventSent(parent, cde));
        
        anticipateEvent(createComponentImpactedEvent("ServiceElement", "PE2:SE1", "NA-SvcElement", "9876", 17));
        
        // Insert facts and fire rules
		FactHandle impactHandle = m_engine.getWorkingMemory().insert( componentImpacted );
		FactHandle depHandle = m_engine.getWorkingMemory().insert( dep );
		FactHandle eventSentHandle = m_engine.getWorkingMemory().insert( eventSent );
		m_engine.getWorkingMemory().fireAllRules();
        
        // pretend to be a using rule that inserts the DependenciesNeeded fact
		verifyFacts();
		verifyEvents();
		
		
		// 3. Verify resolution and memory clean up on ComponentUpEvent
		resetFacts();
		resetEvents();
		
		//anticipateEvent(createComponentResolvedEvent("ServiceElementComponent", "jnxVpnPw-vcid(50)", "NA-SvcElemComp", "9876:jnxVpnPw-vcid(50)", 17));
		anticipateEvent(createComponentResolvedEvent("ServiceElement", "PE2:SE1", "NA-SvcElement", "9876", 17));
		
		// expect all facts to be resolved
		anticipateFacts();
		
        Event upEvent = createVpnPwUpEvent(18, m_pe2NodeId, "10.1.1.1", "5", "ge-3/1/4.50");
        ComponentUpEvent cue = new ComponentUpEvent(c, upEvent);
        
        m_engine.getWorkingMemory().retract(impactHandle);
        m_engine.getWorkingMemory().retract(depHandle);
        m_engine.getWorkingMemory().retract(eventSentHandle);
        m_engine.getWorkingMemory().insert(new ComponentEventResolved(cde, cue) );
        
        m_engine.getWorkingMemory().fireAllRules();
        
       // insertFactAndFireRules(cue);
		
		verifyFacts();
		verifyEvents();
		

	}

