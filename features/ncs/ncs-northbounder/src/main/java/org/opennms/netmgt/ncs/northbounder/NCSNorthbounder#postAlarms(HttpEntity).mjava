    private void postAlarms(HttpEntity entity) {
        //Need a configuration bean for these

        int connectionTimeout = 3000;
        int socketTimeout = 3000;
        Integer retryCount = 3;

        HttpVersion httpVersion = determineHttpVersion(m_config.getHttpVersion());        

        URI uri = m_config.getURI();
        System.err.println("uri = " + uri);

        final HttpClientWrapper clientWrapper = HttpClientWrapper.create()
                .setSocketTimeout(socketTimeout)
                .setConnectionTimeout(connectionTimeout)
                .setRetries(retryCount)
                .useBrowserCompatibleCookies()
                .dontReuseConnections();

        if ("https".equals(uri.getScheme())) {
            try {
                clientWrapper.useRelaxedSSL("https");
            } catch (final GeneralSecurityException e) {
                throw new NorthbounderException("Failed to configure Relaxed SSL handling.", e);
            }
        }

        final HttpEntityEnclosingRequestBase method = m_config.getMethod().getRequestMethod(uri);

        if (m_config.getVirtualHost() != null && !m_config.getVirtualHost().trim().isEmpty()) {
            method.setHeader(HTTP.TARGET_HOST, m_config.getVirtualHost());
        }
        if (m_config.getUserAgent() != null && !m_config.getUserAgent().trim().isEmpty()) {
            method.setHeader(HTTP.USER_AGENT, m_config.getUserAgent());
        }
        method.setProtocolVersion(httpVersion);
        method.setEntity(entity);

        CloseableHttpResponse response = null;
        try {
            System.err.println("execute: " + method);
            response = clientWrapper.execute(method);
        } catch (ClientProtocolException e) {
            throw new NorthbounderException(e);
        } catch (IOException e) {
            throw new NorthbounderException(e);
        } finally {
            IOUtils.closeQuietly(clientWrapper);
        }

        if (response != null) {
            try {
                int code = response.getStatusLine().getStatusCode();
                final HttpResponseRange range = new HttpResponseRange("200-399");
                if (!range.contains(code)) {
                    LOG.warn("response code out of range for uri: {}.  Expected {} but received {}", uri, range, code);
                    throw new NorthbounderException("response code out of range for uri:" + uri + ".  Expected " + range + " but received " + code);
                }
            } finally {
                IOUtils.closeQuietly(clientWrapper);
            }
        }

        LOG.debug(response != null ? response.getStatusLine().getReasonPhrase() : "Response was null");
    }

