    /**
     * <p>getNodes</p>
     *
     * @return a {@link org.opennms.netmgt.model.OnmsNodeList} object.
     */
    @POST
    @Produces({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})
    @Path("{type}/{foreignSource}:{foreignId}")
    public NCSComponent addComponent(@QueryParam("deleteOrphans") final boolean deleteOrphans, @PathParam("type") String type, @PathParam("foreignSource") String foreignSource, @PathParam("foreignId") String foreignId, NCSComponent subComponent) {
        afterPropertiesSet();
        writeLock();
        try {
            LOG.debug("addComponent: type = {}, foreignSource = {}, foreignId = {} (deleteOrphans={})", type, foreignSource, foreignId, Boolean.valueOf(deleteOrphans));

            if (m_componentService == null) {
                throw getException(Status.INTERNAL_SERVER_ERROR, "Component service is null");
            }
            if (type == null) {
                throw getException(Status.BAD_REQUEST, "Type cannot be null");
            }
            if (foreignSource == null) {
                throw getException(Status.BAD_REQUEST, "Foreign Source cannot be null");
            }
            if (foreignId == null) {
                throw getException(Status.BAD_REQUEST, "Foreign ID cannot be null");
            }
            if (subComponent == null) {
                throw getException(Status.BAD_REQUEST, "Sub-component cannot be null");
            }

            return m_componentService.addSubcomponent(type, foreignSource, foreignId, subComponent, deleteOrphans);
        } finally {
            writeUnlock();
        }
    }

