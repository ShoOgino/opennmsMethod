	@Override
	@Transactional
	public void deleteComponent(final String type, final String foreignSource, final String foreignId) {
		final NCSComponent component = getComponent(type, foreignSource, foreignId);
    	
        if (component == null) {
            throw new WebApplicationException(Status.BAD_REQUEST);
        }

        for(final NCSComponent parent : m_componentDao.findComponentsThatDependOn(component))
        {
            parent.getSubcomponents().remove(component);
        }

        m_componentDao.delete(component);

        final OnmsCriteria eventCriteria = new OnmsCriteria(OnmsEvent.class)
        .add(Restrictions.like("eventParms", "%componentForeignSource=" + foreignSource +"%"))
        .add(Restrictions.like("eventParms", "%componentForeignId=" + foreignId +"%"));

        for(final OnmsEvent event : m_eventDao.findMatching(eventCriteria)) {
            m_eventDao.delete(event);
        }

        m_eventDao.flush();

        final OnmsCriteria alarmCriteria = new OnmsCriteria(OnmsAlarm.class)
        .add(Restrictions.like("eventParms", "%componentForeignSource=" + foreignSource +"%"))
        .add(Restrictions.like("eventParms", "%componentForeignId=" + foreignId +"%"));

        for(final OnmsAlarm alarm : m_alarmDao.findMatching(alarmCriteria)) {
            m_alarmDao.delete(alarm);
        }

        m_alarmDao.flush();
        
        try {
			sendComponentDeleted(component);
		} catch (final EventProxyException e) {
			throw new RecoverableDataAccessException("update completed, but unable to send componentDeleted event", e);
		}
	}

