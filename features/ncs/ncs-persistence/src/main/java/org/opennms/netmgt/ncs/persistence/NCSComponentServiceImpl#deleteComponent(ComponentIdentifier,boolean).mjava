	private void deleteComponent(final ComponentIdentifier id, final boolean deleteOrphans) {
		final NCSComponent component = getComponent(id);

        if (component == null) {
            throw new WebApplicationException(Status.BAD_REQUEST);
        }

        if (deleteOrphans) {
        	for (final ComponentIdentifier subId : getIdentifiers(component.getSubcomponents())) {
	        	deleteComponent(subId, deleteOrphans);
	        }
        }

        for(final NCSComponent parent : m_componentDao.findComponentsThatDependOn(component)) {
            parent.getSubcomponents().remove(component);
            m_componentDao.update(parent);
        }

        m_componentDao.delete(component);

        deleteEvents(id.getForeignSource(), id.getForeignId());
        deleteAlarms(id.getForeignSource(), id.getForeignId());
        
        try {
			sendComponentDeleted(component);
		} catch (final EventProxyException e) {
			throw new RecoverableDataAccessException("update completed, but unable to send componentDeleted event", e);
		}
	}

