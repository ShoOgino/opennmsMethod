	@Override
	@Transactional
	public NCSComponent addOrUpdateComponents(final NCSComponent component) {
		LogUtils.debugf(this, "addOrUpdateComponents: %s", component);

		final Set<NCSComponent> subcomponents = new LinkedHashSet<NCSComponent>();

		for (final NCSComponent subcomponent : component.getSubcomponents()) {
			subcomponents.add(addOrUpdateComponents(subcomponent));
		}

		final NCSComponent existing = getComponent(component.getType(), component.getForeignSource(), component.getForeignId());

		if (existing == null) {
			component.setSubcomponents(subcomponents);
			m_componentDao.save(component);
			try {
				sendComponentAdded(component);
			} catch (final EventProxyException e) {
				throw new RecoverableDataAccessException("update completed, but unable to send componentAdded event", e);
			}
			return component;
		} else {
			existing.setName(component.getName());
			existing.setVersion(component.getVersion());
			existing.setDependenciesRequired(component.getDependenciesRequired());
			existing.setNodeIdentification(component.getNodeIdentification());
			existing.setUpEventUei(component.getUpEventUei());
			existing.setDownEventUei(component.getDownEventUei());
			existing.setAttributes(component.getAttributes());
			existing.setSubcomponents(subcomponents);
			m_componentDao.update(existing);
			try {
				sendComponentUpdated(existing);
			} catch (final EventProxyException e) {
				throw new RecoverableDataAccessException("update completed, but unable to send componentUpdated event", e);
			}
			return existing;
		}
	}

