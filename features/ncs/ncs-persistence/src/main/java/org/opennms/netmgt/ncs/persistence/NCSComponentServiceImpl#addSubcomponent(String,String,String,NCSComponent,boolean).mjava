	@Override
	@Transactional
	public NCSComponent addSubcomponent(final String type, final String foreignSource, final String foreignId, final NCSComponent subComponent, final boolean deleteOrphans) {
		final ComponentIdentifier id = new ComponentIdentifier(type, foreignSource, foreignId);

		LogUtils.debugf(this, "addSubcomponent: %s - %s (deleteOrphans=%s)", id, subComponent, Boolean.toString(deleteOrphans));

		final NCSComponent component = getComponent(id);

		if (component == null) {
			throw new ObjectRetrievalFailureException(NCSComponent.class, "Unable to locate component with type=" + type + ", foreignSource=" + foreignSource + ", foreignId=" + foreignId);
		}
		LogUtils.debugf(this, "found component: %s", component);

		final NCSComponent updatedSubComponent = addOrUpdateComponents(getIdentifier(subComponent), subComponent, deleteOrphans);
		
		LogUtils.debugf(this, "adding subcomponent: %s", updatedSubComponent);
		component.addSubcomponent(updatedSubComponent);
		
		LogUtils.debugf(this, "saving");
		m_componentDao.update(component);

		try {
			sendComponentUpdated(component);
		} catch (final EventProxyException e) {
			throw new RecoverableDataAccessException("update completed, but unable to send componentUpdated event", e);
		}

		return getComponent(id);
	}

