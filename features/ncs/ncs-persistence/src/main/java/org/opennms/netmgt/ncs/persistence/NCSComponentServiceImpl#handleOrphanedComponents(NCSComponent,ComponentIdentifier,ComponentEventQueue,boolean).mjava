	private void handleOrphanedComponents(final NCSComponent parent, final ComponentIdentifier child, final ComponentEventQueue ceq, final boolean deleteOrphans) {
		final ComponentIdentifier parentId = getIdentifier(parent);
		final NCSComponent childComponent = getComponent(child);

		final Set<ComponentIdentifier> childChildren = getIdentifiers(childComponent.getSubcomponents());
		final Set<ComponentIdentifier> childParents  = getIdentifiers(childComponent.getParentComponents());

		LOG.trace("handleOrphanedComponents: parent: {}", parentId);
		LOG.trace("handleOrphanedComponents: child: {}", child);
		LOG.trace("handleOrphanedComponents: child's children: {}", childChildren);
		LOG.trace("handleOrphanedComponents: child's parents: {}", childParents);

		if (childParents.size() == 1) {
			final ComponentIdentifier childParent = childParents.iterator().next();
			if (childParent.equals(parentId)) {
				LOG.trace("handleOrphanedComponents: child ({}) has only one parent ({}) and it's being deleted.", child, childParent);
				deleteComponent(child, ceq, deleteOrphans);
			} else {
				LOG.trace("handleOrphanedComponents: child ({}) has only one parent ({}) but it's not the one we expected. This is weird.", child, childParent);
				ceq.componentUpdated(childParent);
			}
		} else {
			LOG.trace("handleOrphanedComponents: child ({}) has more than one parent, sending updates for remaining parents.", child);
			for (final ComponentIdentifier childParent : childParents) {
				ceq.componentUpdated(childParent);
			}
		}
	}

