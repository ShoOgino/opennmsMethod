    @DELETE
    @Path("{type}/{foreignSource}:{foreignId}")
    public Response deleteComponent(@PathParam("type") String type, @PathParam("foreignSource") String foreignSource, @PathParam("foreignId") String foreignId) {
        s_log.info(String.format("deleteComponent: Deleting component of type %s and foreignIdentity %s:%s", type, foreignSource, foreignId));

        NCSComponent component = m_componentRepo.findByTypeAndForeignIdentity(type, foreignSource, foreignId);


        if (component == null) {
            throw new WebApplicationException(Status.BAD_REQUEST);
        }

        List<NCSComponent> parents = m_componentRepo.findComponentsThatDependOn(component);

        for(NCSComponent parent : parents)
        {
            parent.getSubcomponents().remove(component);
        }

        m_componentRepo.delete(component);

        OnmsCriteria criteria = new OnmsCriteria(OnmsEvent.class)
        .add(Restrictions.like("eventParms", "%componentForeignSource=" + foreignSource +"%"))
        .add(Restrictions.like("eventParms", "%componentForeignId=" + foreignId +"%"));

        List<OnmsEvent> events = m_eventDao.findMatching(criteria);

        for(OnmsEvent event : events) {
            m_eventDao.delete(event);
        }

        m_eventDao.flush();

        OnmsCriteria alarmCriteria = new OnmsCriteria(OnmsAlarm.class)
        .add(Restrictions.like("eventParms", "%componentForeignSource=" + foreignSource +"%"))
        .add(Restrictions.like("eventParms", "%componentForeignId=" + foreignId +"%"));

        List<OnmsAlarm> alarms = m_alarmDao.findMatching(alarmCriteria);

        for(OnmsAlarm alarm : alarms) {
            m_alarmDao.delete(alarm);
        }

        m_alarmDao.flush();

        return Response.ok().build();
    }

