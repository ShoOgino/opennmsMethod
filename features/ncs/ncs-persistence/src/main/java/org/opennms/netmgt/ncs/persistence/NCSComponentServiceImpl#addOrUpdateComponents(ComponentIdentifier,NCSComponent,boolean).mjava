	private NCSComponent addOrUpdateComponents(final ComponentIdentifier id, final NCSComponent component, final boolean deleteOrphans) {
		LogUtils.debugf(this, "addOrUpdateComponents: %s (deletOrphans=%s)", id, deleteOrphans);

		final Set<NCSComponent> subcomponents = new LinkedHashSet<NCSComponent>();
		
		for (final NCSComponent subcomponent : component.getSubcomponents()) {
			final NCSComponent updatedComponent = addOrUpdateComponents(getIdentifier(subcomponent), subcomponent, deleteOrphans);
			subcomponents.add(updatedComponent);
		}

		final NCSComponent existing = new UpsertTemplate<NCSComponent, NCSComponentDao>(m_transactionManager, m_componentDao) {
			@Override
			protected NCSComponent query() {
				return getComponent(id);
			}

			@Override
			protected NCSComponent doInsert() {
				component.setSubcomponents(subcomponents);
				m_componentDao.save(component);
				try {
					sendComponentAdded(component);
				} catch (final EventProxyException e) {
					throw new RecoverableDataAccessException("update completed, but unable to send componentAdded event", e);
				}
				return component;
			}
			
			@Override
			protected NCSComponent doUpdate(final NCSComponent dbObj) {
				if (deleteOrphans) deleteOrphanedComponents(getIdentifiers(dbObj.getSubcomponents()), getIdentifiers(subcomponents));

				dbObj.setName(component.getName());
				dbObj.setVersion(component.getVersion());
				dbObj.setDependenciesRequired(component.getDependenciesRequired());
				dbObj.setNodeIdentification(component.getNodeIdentification());
				dbObj.setUpEventUei(component.getUpEventUei());
				dbObj.setDownEventUei(component.getDownEventUei());
				dbObj.setAttributes(component.getAttributes());
				dbObj.setSubcomponents(subcomponents);
				m_componentDao.update(dbObj);
				try {
					sendComponentUpdated(dbObj);
				} catch (final EventProxyException e) {
					throw new RecoverableDataAccessException("update completed, but unable to send componentUpdated event", e);
				}
				return dbObj;
			}

		}.execute();

		return existing;
	}

