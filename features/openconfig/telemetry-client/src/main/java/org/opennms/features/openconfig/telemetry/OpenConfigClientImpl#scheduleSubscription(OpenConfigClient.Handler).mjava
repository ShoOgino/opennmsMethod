    private void scheduleSubscription(OpenConfigClient.Handler handler) {
        if (scheduled.get()) {
            // Task is already scheduled.
            return;
        }
        scheduled.set(true);
        // Try at least once.
        boolean succeeded = trySubscribing(handler);
        if (succeeded) {
            scheduled.set(false);
            return;
        }

        // If it's not subscribed, schedule this to run after configured timeout
        this.paramList.stream().filter(entry -> entry.get(INTERVAL) != null)
                .findFirst().ifPresent(entry ->
                this.interval = StringUtils.parseInt(entry.get(INTERVAL), DEFAULT_INTERVAL_IN_SEC));
        // When retries is null or <= 0, scheduling will happen indefinitely until it succeeds.
        this.paramList.stream().filter(entry -> entry.get(RETRIES) != null)
                .findFirst().ifPresent(entry ->
                this.retries = StringUtils.parseInt(entry.get(RETRIES), null));

        Integer retries = this.retries;
        while (!closed.get()) {
            ScheduledFuture<Boolean> future = scheduledExecutor.schedule(() -> trySubscribing(handler), this.interval, TimeUnit.SECONDS);
            try {
                succeeded = future.get();
                if (succeeded) {
                    scheduled.set(false);
                    break;
                }
            } catch (InterruptedException | ExecutionException e) {
                LOG.warn("Exception while scheduling subscription at host `{}` ", InetAddressUtils.str(host), e);
            }
            if (retries != null && retries > 0) {
                retries--;
                if (retries == 0) {
                    scheduled.set(false);
                    break;
                }
            }
        }
    }

