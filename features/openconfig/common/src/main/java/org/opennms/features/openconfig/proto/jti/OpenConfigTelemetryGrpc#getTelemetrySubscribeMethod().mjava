  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "telemetrySubscribe",
      requestType = org.opennms.features.openconfig.proto.jti.Telemetry.SubscriptionRequest.class,
      responseType = org.opennms.features.openconfig.proto.jti.Telemetry.OpenConfigData.class,
      methodType = io.grpc.MethodDescriptor.MethodType.SERVER_STREAMING)
  public static io.grpc.MethodDescriptor<org.opennms.features.openconfig.proto.jti.Telemetry.SubscriptionRequest,
      org.opennms.features.openconfig.proto.jti.Telemetry.OpenConfigData> getTelemetrySubscribeMethod() {
    io.grpc.MethodDescriptor<org.opennms.features.openconfig.proto.jti.Telemetry.SubscriptionRequest, org.opennms.features.openconfig.proto.jti.Telemetry.OpenConfigData> getTelemetrySubscribeMethod;
    if ((getTelemetrySubscribeMethod = OpenConfigTelemetryGrpc.getTelemetrySubscribeMethod) == null) {
      synchronized (OpenConfigTelemetryGrpc.class) {
        if ((getTelemetrySubscribeMethod = OpenConfigTelemetryGrpc.getTelemetrySubscribeMethod) == null) {
          OpenConfigTelemetryGrpc.getTelemetrySubscribeMethod = getTelemetrySubscribeMethod =
              io.grpc.MethodDescriptor.<org.opennms.features.openconfig.proto.jti.Telemetry.SubscriptionRequest, org.opennms.features.openconfig.proto.jti.Telemetry.OpenConfigData>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.SERVER_STREAMING)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "telemetrySubscribe"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  org.opennms.features.openconfig.proto.jti.Telemetry.SubscriptionRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  org.opennms.features.openconfig.proto.jti.Telemetry.OpenConfigData.getDefaultInstance()))
              .setSchemaDescriptor(new OpenConfigTelemetryMethodDescriptorSupplier("telemetrySubscribe"))
              .build();
        }
      }
    }
    return getTelemetrySubscribeMethod;
  }

