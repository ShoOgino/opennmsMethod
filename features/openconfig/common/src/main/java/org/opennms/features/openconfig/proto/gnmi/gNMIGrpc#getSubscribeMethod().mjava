  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "Subscribe",
      requestType = org.opennms.features.openconfig.proto.gnmi.Gnmi.SubscribeRequest.class,
      responseType = org.opennms.features.openconfig.proto.gnmi.Gnmi.SubscribeResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.BIDI_STREAMING)
  public static io.grpc.MethodDescriptor<org.opennms.features.openconfig.proto.gnmi.Gnmi.SubscribeRequest,
      org.opennms.features.openconfig.proto.gnmi.Gnmi.SubscribeResponse> getSubscribeMethod() {
    io.grpc.MethodDescriptor<org.opennms.features.openconfig.proto.gnmi.Gnmi.SubscribeRequest, org.opennms.features.openconfig.proto.gnmi.Gnmi.SubscribeResponse> getSubscribeMethod;
    if ((getSubscribeMethod = gNMIGrpc.getSubscribeMethod) == null) {
      synchronized (gNMIGrpc.class) {
        if ((getSubscribeMethod = gNMIGrpc.getSubscribeMethod) == null) {
          gNMIGrpc.getSubscribeMethod = getSubscribeMethod =
              io.grpc.MethodDescriptor.<org.opennms.features.openconfig.proto.gnmi.Gnmi.SubscribeRequest, org.opennms.features.openconfig.proto.gnmi.Gnmi.SubscribeResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.BIDI_STREAMING)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "Subscribe"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  org.opennms.features.openconfig.proto.gnmi.Gnmi.SubscribeRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  org.opennms.features.openconfig.proto.gnmi.Gnmi.SubscribeResponse.getDefaultInstance()))
              .setSchemaDescriptor(new gNMIMethodDescriptorSupplier("Subscribe"))
              .build();
        }
      }
    }
    return getSubscribeMethod;
  }

