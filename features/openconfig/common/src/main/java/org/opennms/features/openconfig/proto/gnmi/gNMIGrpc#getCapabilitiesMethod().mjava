  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "Capabilities",
      requestType = org.opennms.features.openconfig.proto.gnmi.Gnmi.CapabilityRequest.class,
      responseType = org.opennms.features.openconfig.proto.gnmi.Gnmi.CapabilityResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<org.opennms.features.openconfig.proto.gnmi.Gnmi.CapabilityRequest,
      org.opennms.features.openconfig.proto.gnmi.Gnmi.CapabilityResponse> getCapabilitiesMethod() {
    io.grpc.MethodDescriptor<org.opennms.features.openconfig.proto.gnmi.Gnmi.CapabilityRequest, org.opennms.features.openconfig.proto.gnmi.Gnmi.CapabilityResponse> getCapabilitiesMethod;
    if ((getCapabilitiesMethod = gNMIGrpc.getCapabilitiesMethod) == null) {
      synchronized (gNMIGrpc.class) {
        if ((getCapabilitiesMethod = gNMIGrpc.getCapabilitiesMethod) == null) {
          gNMIGrpc.getCapabilitiesMethod = getCapabilitiesMethod =
              io.grpc.MethodDescriptor.<org.opennms.features.openconfig.proto.gnmi.Gnmi.CapabilityRequest, org.opennms.features.openconfig.proto.gnmi.Gnmi.CapabilityResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "Capabilities"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  org.opennms.features.openconfig.proto.gnmi.Gnmi.CapabilityRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  org.opennms.features.openconfig.proto.gnmi.Gnmi.CapabilityResponse.getDefaultInstance()))
              .setSchemaDescriptor(new gNMIMethodDescriptorSupplier("Capabilities"))
              .build();
        }
      }
    }
    return getCapabilitiesMethod;
  }

