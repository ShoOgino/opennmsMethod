    /**
     * Executes a configured trigger set with a given String value.
     *
     * @param ifTttConfig           the IFTTT config instance
     * @param categoryFilter        the category filter
     * @param name                  the event name
     * @param variableNameExpansion the VariableNameExpansion to be used
     */
    protected void fireIfTttTriggerSet(final IfTttConfig ifTttConfig, final String categoryFilter, final String name, final VariableNameExpansion variableNameExpansion) {
        if (ifTttConfig == null) {
            return;
        }

        final TriggerPackage triggerPackage = ifTttConfig.getTriggerPackageForCategoryFilter(categoryFilter);

        if (triggerPackage != null) {

            final TriggerSet triggerSet = triggerPackage.getTriggerSetForName(name);

            if (triggerSet != null) {
                for (final Trigger trigger : triggerSet.getTriggers()) {

                    new IfTttTrigger()
                            .key(ifTttConfig.getKey())
                            .event(trigger.getEventName())
                            .value1(variableNameExpansion.replace(trigger.getValue1()))
                            .value2(variableNameExpansion.replace(trigger.getValue2()))
                            .value3(variableNameExpansion.replace(trigger.getValue3()))
                            .trigger();

                    try {
                        Thread.sleep(trigger.getDelay());
                    } catch (InterruptedException e) {
                        LOG.error("Error triggering IFTTT event: ", e);
                    }
                }
            } else {
                LOG.debug("No trigger-set with name '{}' defined.", name);
            }
        } else {
            LOG.error("Error retrieving trigger package for category filter{}.", categoryFilter);
        }
    }

