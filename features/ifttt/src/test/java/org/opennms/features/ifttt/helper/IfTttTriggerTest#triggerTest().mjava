    @Test
    public void triggerTest() throws IOException {
        final IfTttTrigger ifTttTrigger = new IfTttTrigger();
        final CloseableHttpResponse closeableHttpResponse = mock(CloseableHttpResponse.class);

        when(closeableHttpResponse.getStatusLine()).thenReturn(new BasicStatusLine(HttpVersion.HTTP_1_1, 200, "OK"));

        final CloseableHttpClient closeableHttpClient = mock(CloseableHttpClient.class);

        when(closeableHttpClient.execute(anyObject())).thenAnswer(new Answer<Object>() {
            @Override
            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
                HttpPost httpPost = invocationOnMock.getArgument(0);
                Assert.assertEquals("POST https://maker.ifttt.com/trigger/" + TEST_EVENT + "/with/key/" + TEST_KEY + " HTTP/1.1", httpPost.getRequestLine().toString());
                Assert.assertEquals("{\"value1\":\"abc1\",\"value2\":\"abc2\",\"value3\":\"abc3\"}", IOUtils.toString(httpPost.getEntity().getContent()));
                return closeableHttpResponse;
            }
        });

        mockStatic(HttpClients.class);
        when(HttpClients.createDefault()).thenReturn(closeableHttpClient);

        ifTttTrigger.key(TEST_KEY).event(TEST_EVENT).value1("abc1").value2("will-be-overwritten").value2("abc2").value3("abc3").trigger();
    }

