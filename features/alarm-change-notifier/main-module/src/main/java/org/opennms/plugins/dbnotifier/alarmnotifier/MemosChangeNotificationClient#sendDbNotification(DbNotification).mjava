	@Override
	public void sendDbNotification(DbNotification dbNotification) {
		try{
			String payload = dbNotification.getPayload();

			JSONObject memoJsonObject=null;
			JSONObject alarmIdJsonObject=null;
			String alarmId=null;
			String body=null;
			String author=null;
			String reductionkey=null;

			try {
				JSONParser parser = new JSONParser();
				Object obj;
				obj = parser.parse(payload);
				
				JSONArray jsonArray = (JSONArray) obj;
				if (LOG.isDebugEnabled()) LOG.debug("payload memo jsonArray.toString():" + jsonArray.toString());
				memoJsonObject = (JSONObject) jsonArray.get(0);
				memoJsonObject = jsonMemoTimeNormaliser(memoJsonObject);
				
				alarmIdJsonObject = (JSONObject) jsonArray.get(1);
				alarmId= (alarmIdJsonObject.get("alarmid")==null) ? null : alarmIdJsonObject.get("alarmid").toString();
				body= (memoJsonObject.get("body")==null) ? null : memoJsonObject.get("body").toString();
				author= (memoJsonObject.get("author")==null) ? null : memoJsonObject.get("author").toString();
				reductionkey= (memoJsonObject.get("reductionkey")==null) ? null : memoJsonObject.get("reductionkey").toString();
				
			} catch (ParseException e1) {
				throw new RuntimeException("cannot parse notification payload to json object. payload="+ payload, e1);
			}

			if (! memoJsonObject.isEmpty() ){
				// received a memo update
				// sticky note event
				if("Memo".equals(memoJsonObject.get("type").toString())) {
					if (LOG.isDebugEnabled()) LOG.debug("sticky memo updated="+memoJsonObject.get("id"));
					EventBuilder eb= new EventBuilder( AlarmChangeEventConstants.STICKY_MEMO_EVENT, EVENT_SOURCE_NAME);

					//copy in all values as json in params
					eb.addParam(AlarmChangeEventConstants.MEMO_VALUES_PARAM,memoJsonObject.toString());
					eb.addParam(AlarmChangeEventConstants.MEMO_ALARMID_PARAM, alarmId );
					eb.addParam(AlarmChangeEventConstants.MEMO_BODY_PARAM, body );
					eb.addParam(AlarmChangeEventConstants.MEMO_AUTHOR_PARAM, author );

					sendEvent(eb.getEvent());
				} else if("ReductionKeyMemo".equals(memoJsonObject.get("type").toString())) {
					if (LOG.isDebugEnabled()) LOG.debug("reduction key memo updated="+memoJsonObject.get("id"));
					EventBuilder eb= new EventBuilder(AlarmChangeEventConstants.JOURNAL_MEMO_EVENT, EVENT_SOURCE_NAME);

					//copy in all values as json in params
					eb.addParam(AlarmChangeEventConstants.MEMO_VALUES_PARAM,memoJsonObject.toString());
					eb.addParam(AlarmChangeEventConstants.MEMO_ALARMID_PARAM, alarmId );
					eb.addParam(AlarmChangeEventConstants.MEMO_BODY_PARAM, body );
					eb.addParam(AlarmChangeEventConstants.MEMO_AUTHOR_PARAM, author );
					eb.addParam(AlarmChangeEventConstants.MEMO_REDUCTIONKEY_PARAM, reductionkey );

					sendEvent(eb.getEvent());
				}
			}

		} catch (Exception e){
			LOG.error("problem creating opennms alarm change event from database notification", e);
		}

	}

