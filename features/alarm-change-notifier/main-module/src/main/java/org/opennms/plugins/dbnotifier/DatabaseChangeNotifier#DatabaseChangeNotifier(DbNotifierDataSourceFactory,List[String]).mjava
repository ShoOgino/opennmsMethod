	/**
	 * Constructor sets up database connections and listeners
	 * @param dataSource 
	 * @param paramList
	 * @throws Throwable
	 */
	public DatabaseChangeNotifier(DbNotifierDataSourceFactory dsFactory, List<String> paramList) throws Throwable {

		DataSource dataSource=dsFactory.getPGDataSource();
		
		if(LOG.isDebugEnabled()) {
			String s="DatabaseChangeNotifier Paramaters: ";

			for(String param : paramList){
				s=s+param+" ";
			}
			LOG.debug(s);
			LOG.debug("setting up connection - be patient this is quite slow");
		}

		if (paramList.contains(NOTIFY_ALARM_CHANGES)) listenForAlarms=true;	
		if (paramList.contains(NOTIFY_EVENT_CHANGES)) listenForEvents=true;
		if (paramList.contains(NOTIFY_MEMOS_CHANGES)) listenForMemos=true;

		pgConnection = (PGConnection) dataSource.getConnection();

		LOG.debug("setting up connection listener");

		// pgListner is set up outside pgConnection to give hard reference so not garbage collected
		// see http://stackoverflow.com/questions/37916489/listen-notify-pgconnection-goes-down-java
		pgListener = new PGNotificationListener() {
			Logger LOG = LoggerFactory.getLogger(DatabaseChangeNotifier.class);

			@Override
			public void notification(int processId, String channelName, String payload) {

				DbNotification dbn = new DbNotification(processId, channelName, payload);
				
				if(LOG.isDebugEnabled()) {
					LOG.debug("notification received from database - sending to registered clients :\n processId:"+processId
							+ "\n channelName:"+channelName
							+ "\n payload:"+payload);
				}

				// send notifications to registered clients - note each client must return quickly
				synchronized(dbNotificationClientList) {
					Iterator<DbNotificationClient> i = dbNotificationClientList.iterator(); // Must be in synchronized block
					while (i.hasNext()){
						i.next().sendDbNotification(dbn);
					}         
				}


			}
		};

		pgConnection.addNotificationListener(pgListener);

	}

