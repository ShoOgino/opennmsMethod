  /**
   * Parse a string and return a timestamp representing its value.
   *
   * @param s      The ISO formated date string to parse.
   *
   * @return null if s is null or a timestamp of the parsed string s.
   *
   * @throws SQLException if there is a problem parsing s.
   **/
  public Timestamp toTimestamp(Calendar calParameter, String s) throws SQLException {
    if (s == null)
      return null;

    int slen = s.length();

    // convert postgres's infinity values to internal infinity magic value
    if (slen == 8 && s.equals("infinity")) {
      return FutureInfiniteInstant.INSTANCE.toTimestamp();
    }

    if (slen == 9 && s.equals("-infinity")) {
      return PastInfiniteInstant.INSTANCE.toTimestamp();
    }

    Calendar cal = getLocalCalendar(calParameter);

    ParsedTimestamp ts = loadCalendar(cal, s, "timestamp");
    Calendar useCal = (ts.tz == null ? cal : ts.tz);
    useCal.set(Calendar.ERA,          ts.era);
    useCal.set(Calendar.YEAR,         ts.year);
    useCal.set(Calendar.MONTH,        ts.month - 1);
    useCal.set(Calendar.DAY_OF_MONTH, ts.day);
    useCal.set(Calendar.HOUR_OF_DAY,  ts.hour);
    useCal.set(Calendar.MINUTE,       ts.minute);
    useCal.set(Calendar.SECOND,       ts.second);
    useCal.set(Calendar.MILLISECOND,  0);

    Timestamp result = new Timestamp(useCal.getTime().getTime());
    result.setNanos(ts.nanos);
    showParse("timestamp", s, cal, result, useCal);
    return result;
  }

