    @Test
    public void canRetrieveMeasurementsFromJrb() {
        QueryRequest request = new QueryRequest();
        request.setStart(1414602000000L);
        request.setEnd(1417046400000L);
        request.setStep(1000L);
        request.setMaxRows(700);

        // Average
        Source ifInOctetsAvg = new Source();
        ifInOctetsAvg.setResourceId("node[1].interfaceSnmp[eth0-04013f75f101]");
        ifInOctetsAvg.setAttribute("ifInOctets");
        ifInOctetsAvg.setAggregation("AVERAGE");
        ifInOctetsAvg.setLabel("ifInOctetsAvg");

        // Min
        Source ifInOctetsMin = new Source();
        ifInOctetsMin.setResourceId("node[1].interfaceSnmp[eth0-04013f75f101]");
        ifInOctetsMin.setAttribute("ifInOctets");
        ifInOctetsMin.setAggregation("MIN");
        ifInOctetsMin.setLabel("ifInOctetsMin");

        // Max
        Source ifInOctetsMax = new Source();
        ifInOctetsMax.setResourceId("node[1].interfaceSnmp[eth0-04013f75f101]");
        ifInOctetsMax.setAttribute("ifInOctets");
        ifInOctetsMax.setAggregation("MAX");
        ifInOctetsMax.setLabel("ifInOctetsMax");

        request.setSources(Lists.newArrayList(
                ifInOctetsAvg,
                ifInOctetsMin,
                ifInOctetsMax
                ));

        // Perform the query
        QueryResponse response = m_svc.query(request);

        // Validate the results
        long timestamps[] = response.getTimestamps();
        final Map<String, double[]> columns = response.columnsWithLabels();

        assertEquals(3600000L, response.getStep());
        assertEquals(680, timestamps.length);

        // Verify the values at an arbitrary index
        final int idx = 8;
        assertEquals(1414630800000L, timestamps[idx]);
        assertEquals(270.66140826873385, columns.get("ifInOctetsAvg")[idx], 0.0001);
        assertEquals(259.54086378737543, columns.get("ifInOctetsMin")[idx], 0.0001);
        assertEquals(67872.22455490529, columns.get("ifInOctetsMax")[idx], 0.0001);
    }

