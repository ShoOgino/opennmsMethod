    /*
     * LIMIT
     * 
     * Pops two elements from the stack and uses them to define a range.
     * Then it pops another element and if it falls inside the range, it is
     * pushed back. If not, an unknown is pushed. The range defined includes
     * the two boundaries (so: a number equal to one of the boundaries will be
     * pushed back). If any of the three numbers involved is either unknown or
     * infinite this function will always return an unknown
     * 
     * Example: CDEF:a=alpha,0,100,LIMIT will return unknown if alpha is
     * lower than 0 or if it is higher than 100.
     */
    @Test
    public void canPerformLimit() throws ExpressionException {
        final String limitExpression = "( ( (A == __inf) || (A == __neg_inf) || (B == __inf) || (B == __neg_inf) || (C == __inf) || (C == __neg_inf) || (C < A) || (C > B) ) ? NaN : C )";

        // a = min, b = max, c = value
        final double a = 0.0;
        final double b = 0.14290626;
        final double withinRange = 0.1;
        final Map<String,Object> entries = Maps.newHashMap();

        // value is within the range (value)
        entries.put("A", a);
        entries.put("B", b);
        entries.put("C", 0.01);
        double results[] = performExpression(limitExpression, entries);
        assertEquals(0.01, results[0], DELTA);

        // value is equal to minimum (value)
        entries.put("A", a);
        entries.put("B", b);
        entries.put("C", a);
        results = performExpression(limitExpression, entries);
        assertEquals(a, results[0], DELTA);

        // value is less than minimum (unknown)
        entries.put("A", a);
        entries.put("B", b);
        entries.put("C", a - 1.0);
        results = performExpression(limitExpression, entries);
        assertEquals(Double.NaN, results[0], DELTA);

        // value is equal to maximum (value)
        entries.put("A", a);
        entries.put("B", b);
        entries.put("C", b);
        results = performExpression(limitExpression, entries);
        assertEquals(b, results[0], DELTA);

        // value is greater than maximum (unknown)
        entries.put("A", a);
        entries.put("B", b);
        entries.put("C", b + 1.0);
        results = performExpression(limitExpression, entries);
        assertEquals(Double.NaN, results[0], DELTA);

        // value is -infinity (unknown)
        entries.put("A", a);
        entries.put("B", b);
        entries.put("C", Double.NEGATIVE_INFINITY);
        results = performExpression(limitExpression, entries);
        assertEquals(Double.NaN, results[0], DELTA);

        // minimum is -infinity (unknown)
        entries.put("A", Double.NEGATIVE_INFINITY);
        entries.put("B", b);
        entries.put("C", withinRange);
        results = performExpression(limitExpression, entries);
        assertEquals(Double.NaN, results[0], DELTA);

        // minimum is infinity (unknown)
        entries.put("A", Double.POSITIVE_INFINITY);
        entries.put("B", b);
        entries.put("C", withinRange);
        results = performExpression(limitExpression, entries);
        assertEquals(Double.NaN, results[0], DELTA);

        // maximum is -infinity (unknown)
        entries.put("A", a);
        entries.put("B", Double.NEGATIVE_INFINITY);
        entries.put("C", withinRange);
        results = performExpression(limitExpression, entries);
        assertEquals(Double.NaN, results[0], DELTA);

        // maximum is infinity (unknown)
        entries.put("A", a);
        entries.put("B", Double.POSITIVE_INFINITY);
        entries.put("C", withinRange);
        results = performExpression(limitExpression, entries);
        assertEquals(Double.NaN, results[0], DELTA);
    }

