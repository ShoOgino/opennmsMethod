    @Test
    public void canRetrieveMeasurementsFromRrd(){
        QueryRequest request = new QueryRequest();
        request.setStart(1414602000000L);
        request.setEnd(1417046400000L);
        request.setStep(1000L);
        request.setMaxRows(350);

        Source ifInOctets = new Source();
        ifInOctets.setResourceId("node[1].interfaceSnmp[eth0-04013f75f101]");
        ifInOctets.setAttribute("ifInOctets");
        ifInOctets.setAggregation("AVERAGE");
        ifInOctets.setLabel("octetsIn");
        request.setSources(Lists.newArrayList(ifInOctets));

        Expression eightAsConstant = new Expression();
        eightAsConstant.setLabel("eight");
        eightAsConstant.setExpression("8");
        eightAsConstant.setTransient(true);

        Expression octetsToBytes = new Expression();
        octetsToBytes.setLabel("bitsIn");
        octetsToBytes.setExpression("octetsIn * eight");
        request.setExpressions(Lists.newArrayList(eightAsConstant, octetsToBytes));

        QueryResponse response = m_svc.query(request);

        // Validate the results
        long timestamps[] = response.getTimestamps();
        final Map<String, double[]> columns = response.columnsWithLabels();

        assertEquals(7200000L, response.getStep());
        assertEquals(341, timestamps.length);

        // Verify the values at an arbitrary index
        final int idx = 1;
        assertEquals(1414612800000L, timestamps[idx]);
        assertEquals(4455.846126, columns.get("octetsIn")[idx], 0.0001);
        assertEquals(4455.846126 * 8, columns.get("bitsIn")[idx], 0.0001);
        assertFalse("Transient values should be excluded.", columns.containsKey("eight"));
    }

