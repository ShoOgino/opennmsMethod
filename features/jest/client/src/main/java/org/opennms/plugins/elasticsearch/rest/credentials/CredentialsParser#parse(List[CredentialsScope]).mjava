    public Map<AuthScope, Credentials> parse(final List<CredentialsScope> credentialsScopes) {
        final Map<AuthScope, Credentials> credentialsMap = new HashMap<>();
        if (credentialsScopes != null) {
            for (CredentialsScope scope : credentialsScopes) {
                // Verify username/password
                if (Strings.isNullOrEmpty(scope.getUsername()) || Strings.isNullOrEmpty(scope.getPassword())) {
                    LOG.warn("Found incomplete credentials (username={}, password={}) for host {}. Username or password is empty/null. Ignoring.",
                            scope.getUsername(),
                            scope.getPassword() != null ? scope.getPassword().isEmpty() ? "" : "******" : null, // Censor password if provided
                            scope.getUrl());
                    continue;
                }
                // Verify URL
                if (Strings.isNullOrEmpty(scope.getUrl())) {
                    LOG.warn("No url specified. Ignoring.");
                    continue;
                }

                // Try parsing url
                final String urlString = fixUrl(scope.getUrl());
                try {
                    final URL url = new URL(urlString);
                    final HttpHost httpHost = new HttpHost(url.getHost(), url.getPort(), url.getProtocol());
                    credentialsMap.put(
                            new AuthScope(httpHost),
                            new UsernamePasswordCredentials(scope.getUsername(), scope.getPassword()));
                } catch (MalformedURLException ex) {
                    LOG.error("Defined url is invalid: {}", ex.getMessage());
                }
            }
        }
        return credentialsMap;
    }

