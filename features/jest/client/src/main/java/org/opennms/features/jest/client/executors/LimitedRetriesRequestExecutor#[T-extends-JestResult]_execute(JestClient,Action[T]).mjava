    /**
     * Perform the REST operation and retry in case of exceptions.
     */
    @Override
    public <T extends JestResult> T execute(JestClient client, Action<T> clientRequest) throws IOException {
        // 'strict-timeout' will enforce that the timeout time elapses between subsequent
        // attempts even if the operation returns more quickly than the timeout
        final Map<String,Object> params = new HashMap<>();
        params.put("strict-timeout", Boolean.TRUE);

        final TimeoutTracker timeoutTracker = new TimeoutTracker(params, retryCount, timeout);
        for (timeoutTracker.reset(); timeoutTracker.shouldRetry(); timeoutTracker.nextAttempt()) {
            timeoutTracker.startAttempt();
            try {
                T result = client.execute(clientRequest);
                return result;
            } catch (Exception exception) {
                // In case the connection pool was shut down, bail. See NMS-10697 for more details
                if (exception instanceof IllegalStateException && exception.getMessage().equals("Connection pool shut down")) {
                    LOG.error("Connection pool shut down. Nothing we can do. Bailing");
                    throw new ConnectionPoolShutdownException(exception.getMessage(), exception);
                }

                // shouldRetry would return true because nextAttempt has not yet been invoked.
                // Therefore we manually verify instead of calling shouldRetry()
                if (timeoutTracker.getAttempt() + 1 <= retryCount) {
                    LOG.warn("Exception while trying to execute REST operation (attempt {}/{}). Retrying.", timeoutTracker.getAttempt() + 1, retryCount + 1, exception);
                } else {
                    // we are out of retries, forward exception
                    throw new IOException("Could not perform request. Tried " + (timeoutTracker.getAttempt() + 1) + " times and gave up", exception);
                }
            }
        }

        // In order to proper handle error cases, we must bail in this case, as m_delegate was never invoked.
        // In theory this should never happen.
        throw new IllegalStateException("The request never produced a valid result. This should not have happened. Bailing.");
    }

