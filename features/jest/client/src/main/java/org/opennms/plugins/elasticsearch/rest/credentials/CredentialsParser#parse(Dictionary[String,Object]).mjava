    public List<CredentialsDTO> parse(Dictionary<String, Object> properties) {
        if (properties.isEmpty()) {
            return Collections.emptyList();
        }

        final List<CredentialsDTO> credentialsList = new ArrayList<>();
        final List<String> keys = Collections.list(properties.keys());
        for (String originalKey : keys) {
            // Flatten key
            final String flattenedKey = flattenKey(originalKey);

            // Retrieve value
            Object object = properties.get(originalKey);
            if (object == null || !(object instanceof String)) {
                LOG.warn("Detected non string property for key '{}'. Skipping.", originalKey);
                continue;
            }
            final String value = (String) object;

            // Parse properties
            final String[] usernamePassword = value.split(":");
            final String[] hostPort = flattenedKey.split(":");

            // Verify correct format
            if (usernamePassword.length != 2) {
                LOG.warn("Could not determine username:password from value '{}' for key '{}'. Ignoring", value, originalKey);
                continue;
            }
            if (hostPort.length != 2) {
                LOG.warn("could not determine host:port from key '{}'", originalKey);
                continue;
            }

            // Finally set it
            try {
                // Try parsing port
                final int port = Integer.parseInt(hostPort[1]);

                // Set credentials
                final CredentialsDTO credentials = new CredentialsDTO(
                        new AuthScope(hostPort[0], port),
                        new UsernamePasswordCredentials(usernamePassword[0], usernamePassword[1])
                );

                credentialsList.add(credentials);
            } catch (NumberFormatException ex) {
                LOG.error("Defined port " + hostPort[1] + " is not a valid number. Skipping username:password definition for " + originalKey, ex);
                continue;
            }
        }

        return credentialsList;
    }

