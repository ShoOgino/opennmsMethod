    @Test
    public void verifyParsing() {
        final ElasticCredentials configuration = new ElasticCredentials(){};

        // Valid
        configuration.withCredentials(new CredentialsScope("192.168.0.1:9200", "ulf", "ulf"));
        configuration.withCredentials(new CredentialsScope("http://192.168.0.2:9200", "ulf", "ulf2"));
        configuration.withCredentials(new CredentialsScope("https://192.168.0.3:9300", "ulf", "ulf3"));

        // Invalid
        configuration.withCredentials(new CredentialsScope("http://192.168.0.1:x", "ulf", "ulf"));
        configuration.withCredentials(new CredentialsScope("192.168.0.1", "ulf", null));

        final Map<AuthScope, Credentials> credentials = new CredentialsParser().parse(configuration.getCredentialsScopes());

        // Verify
        assertThat(credentials.size(), is(3));
        assertThat(credentials, Matchers.hasEntry(new AuthScope(new HttpHost("192.168.0.1", 9200, "http")), new UsernamePasswordCredentials("ulf", "ulf")));
        assertThat(credentials, Matchers.hasEntry(new AuthScope(new HttpHost("192.168.0.2", 9200,"http")), new UsernamePasswordCredentials("ulf", "ulf2")));
        assertThat(credentials, Matchers.hasEntry(new AuthScope(new HttpHost("192.168.0.3", 9300, "https")), new UsernamePasswordCredentials("ulf", "ulf3")));
    }

