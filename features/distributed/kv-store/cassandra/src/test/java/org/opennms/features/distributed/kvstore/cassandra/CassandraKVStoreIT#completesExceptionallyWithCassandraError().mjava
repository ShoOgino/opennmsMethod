    @Test
    public void completesExceptionallyWithCassandraError() throws InterruptedException, IOException {
        KeyValueStore exceptionalKvStore = new CassandraKVStore(() -> new CassandraSession() {
            @Override
            public PreparedStatement prepare(String statement) {
                return null;
            }

            @Override
            public PreparedStatement prepare(RegularStatement statement) {
                return null;
            }

            @Override
            public ResultSetFuture executeAsync(Statement statement) {
                throw new DriverException("test");
            }

            @Override
            public ResultSet execute(Statement statement) {
                throw new DriverException("test");
            }

            @Override
            public ResultSet execute(String statement) {
                throw new DriverException("test");
            }

            @Override
            public Future<Void> shutdown() {
                return null;
            }
        }, () -> (schema) -> {});
        serializingKeyValueStore = new SerializingKeyValueStore<>(exceptionalKvStore, String::getBytes, String::new);
        cassandraUnit.getSession().close();

        try {
            serializingKeyValueStore.putAsync("test", "test", "completesExceptionallyWithCassandraError").get();
            fail("Should have triggered an ExecutionException");
        } catch (ExecutionException e) {
        }

        try {
            serializingKeyValueStore.getAsync("test", "completesExceptionallyWithCassandraError").get();
            fail("Should have triggered an ExecutionException");
        } catch (ExecutionException e) {
        }
    }

