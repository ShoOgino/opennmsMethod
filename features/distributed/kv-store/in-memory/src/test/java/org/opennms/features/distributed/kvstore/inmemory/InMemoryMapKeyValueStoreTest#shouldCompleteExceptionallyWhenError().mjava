    @Test
    public void shouldCompleteExceptionallyWhenError() {
        AtomicBoolean caughtException = new AtomicBoolean(false);

        kvStore.putAsync("test", new byte[0], "test").exceptionally(t -> {
            if (t.getCause() instanceof TestException) {
                caughtException.set(true);
            }

            return null;
        });
        await().atMost(1, TimeUnit.SECONDS).until(caughtException::get);

        caughtException.set(false);
        kvStore.getAsync("test", "test").exceptionally(t -> {
            if (t.getCause() instanceof TestException) {
                caughtException.set(true);
            }

            return Optional.empty();
        });
        await().atMost(1, TimeUnit.SECONDS).until(caughtException::get);

        caughtException.set(false);
        kvStore.getLastUpdatedAsync("test", "test").exceptionally(t -> {
            if (t.getCause() instanceof TestException) {
                caughtException.set(true);
            }

            return OptionalLong.empty();
        });
        await().atMost(1, TimeUnit.SECONDS).until(caughtException::get);
    }

