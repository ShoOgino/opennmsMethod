    @Override
    public Optional<Optional<T>> getIfStale(String key, String context, long timestamp) {
        Objects.requireNonNull(key);
        Objects.requireNonNull(context);

        // Note that the below is intentionally not acting atomically as the caller shouldn't be sensitive to the change
        // between the getLastUpdated and get

        OptionalLong lastUpdated = getLastUpdated(key, context);

        // There was no entry
        if (!lastUpdated.isPresent()) {
            return Optional.empty();
        }

        // Entry existed but caller's copy is not stale
        if (timestamp >= lastUpdated.getAsLong()) {
            return Optional.of(Optional.empty());
        }

        // Entry existed and caller's copy is stale
        Optional<T> value = get(key, context);

        // The value was removed between checking last updated and now
        if (!value.isPresent()) {
            return Optional.empty();
        }

        return Optional.of(value);
    }

