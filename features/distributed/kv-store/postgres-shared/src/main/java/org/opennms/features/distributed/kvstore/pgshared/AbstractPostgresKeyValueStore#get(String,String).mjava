    @Override
    public Optional<T> get(String key, String context) {
        Objects.requireNonNull(key);
        Objects.requireNonNull(context);

        return withStatement(this::getSelectStatement, selectStatement -> {
            selectStatement.setString(1, key);
            selectStatement.setString(2, context);

            try (ResultSet resultSet = selectStatement.executeQuery()) {
                if (!resultSet.next()) {
                    return Optional.empty();
                }

                // Return an empty result if we find an expired record
                if (isExpired(resultSet)) {
                    return Optional.empty();
                }

                return Optional.of(getValueTypeFromSQLType(resultSet, VALUE_COLUMN));
            }
        });
    }

