    @Override
    public OptionalLong getLastUpdated(String key, String context) {
        Objects.requireNonNull(key);
        Objects.requireNonNull(context);

        return withStatement(this::getLastUpdatedStatement, lastUpdatedStatement -> {
            lastUpdatedStatement.setString(1, key);
            lastUpdatedStatement.setString(2, context);

            try (ResultSet resultSet = lastUpdatedStatement.executeQuery()) {
                if (!resultSet.next()) {
                    return OptionalLong.empty();
                }

                // Return an empty result if we find an expired record
                if (isExpired(resultSet)) {
                    return OptionalLong.empty();
                }

                return OptionalLong.of(resultSet.getTimestamp(LAST_UPDATED_COLUMN).getTime());
            }
        });
    }

