    // Verify that all fields can be handled if they were maxed out.
    // This ensures that all fields are converted correctly.
    // For example if a 2 byte unsigned field's value were FFFF, it must be converted to an integer instead of a short.
    // NOTE: This is purely theoretically and does not reflect a REAL WORLD netflow package.
    @Test
    public void canHandleMaxValuesNetflow5() {
        // Generate minimal netflow package with 1 netflow record but maximum values (theoretical values only)
        final String string = Strings.padStart("", 72 * 2, 'F');
        byte[] bytes = new byte[string.length() / 2];
        for (int i=0, a=0; i<string.length(); i+=2, a++) {
            byte firstNibble = Byte.parseByte(string.substring(i, i+1), 16);
            byte secondNibble = Byte.parseByte(string.substring(i+1, i+2), 16);
            byte theByte = (byte)((secondNibble) | (firstNibble << 4 )); // bit-operations only with numbers, not bytes.
            bytes[a] = theByte;
        }

        // Parse and Verify
        NetflowPackage netflowPackage = new NetflowPackage(ByteBuffer.wrap(bytes));
        netflowPackage.isValid();

        // Verify Header
        assertThat(netflowPackage.getHeader().getVersion(), is(65536 - 1)); // 2^16-1
        assertThat(netflowPackage.getHeader().getCount(), is(65536 - 1)); // 2^16-1
        assertThat(netflowPackage.getHeader().getSysUptime(), is(1024L * 1024L * 1024L * 4l - 1)); // 2^32-1
        assertThat(netflowPackage.getHeader().getUnixSecs(), is(1024L * 1024L * 1024L * 4 - 1)); // 2^32-1
        assertThat(netflowPackage.getHeader().getUnixNsecs(), is(1024L * 1024L * 1024L * 4 - 1)); // 2^32-1
        assertThat(netflowPackage.getHeader().getFlowSequence(), is(1024L * 1024L * 1024L * 4 - 1)); // 2^32-1
        assertThat(netflowPackage.getHeader().getEngineType(), is(255)); // 2^8-1
        assertThat(netflowPackage.getHeader().getEngineId(), is(255)); // 2^8-1
        assertThat(netflowPackage.getHeader().getSamplingInterval(), is(65536 - 1)); // 2^16-1

        // Verify Body
        assertThat(netflowPackage.getRecord(0).getSrcAddr(), is("255.255.255.255")); // quadruple: (2^8-1, 2^8-1, 2^8-1, 2^8-1)
        assertThat(netflowPackage.getRecord(0).getDstAddr(), is("255.255.255.255")); // quadruple: (2^8-1, 2^8-1, 2^8-1, 2^8-1)
        assertThat(netflowPackage.getRecord(0).getNextHop(), is("255.255.255.255")); // quadruple: (2^8-1, 2^8-1, 2^8-1, 2^8-1)
        assertThat(netflowPackage.getRecord(0).getInput(), is(65536 - 1)); // 2^16-1
        assertThat(netflowPackage.getRecord(0).getOutput(), is(65536 - 1)); // 2^16-1
        assertThat(netflowPackage.getRecord(0).getDPkts(), is(1024L * 1024L * 1024L * 4 - 1)); // 2^32-1
        assertThat(netflowPackage.getRecord(0).getDOctets(), is(1024L * 1024L * 1024L * 4 - 1)); // 2^32-1
        assertThat(netflowPackage.getRecord(0).getFirst(), is(1024L * 1024L * 1024L * 4 - 1)); // 2^32-1
        assertThat(netflowPackage.getRecord(0).getLast(), is(1024L * 1024L * 1024L * 4 - 1)); // 2^32-1
        assertThat(netflowPackage.getRecord(0).getSrcPort(), is(65536 - 1)); // 2^16-1
        assertThat(netflowPackage.getRecord(0).getDstPort(), is(65536 - 1)); // 2^16-1
        assertThat(netflowPackage.getRecord(0).getTcpFlags(), is(255)); // 2^8-1
        assertThat(netflowPackage.getRecord(0).getProt(), is(255)); // 2^8-1
        assertThat(netflowPackage.getRecord(0).getTOS(), is(255)); // 2^8-1
        assertThat(netflowPackage.getRecord(0).getSrcAs(), is(65536 - 1)); // 2^16-1
        assertThat(netflowPackage.getRecord(0).getDstAs(), is(65536 - 1)); // 2^16-1
        assertThat(netflowPackage.getRecord(0).getSrcMask(), is(255)); // 2^8-1
        assertThat(netflowPackage.getRecord(0).getDstMask(), is(255)); // 2^8-1
    }

