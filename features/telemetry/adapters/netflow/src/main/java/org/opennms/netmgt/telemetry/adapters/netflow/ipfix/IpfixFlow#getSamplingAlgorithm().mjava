    @Override
    public Flow.SamplingAlgorithm getSamplingAlgorithm() {
        final Integer deprecatedSamplingAlgorithm = first(
                getInt64(this.document, "samplingAlgorithm"),
                getInt64(this.document, "samplerMode"))
                .map(Long::intValue).orElse(null);

        if (deprecatedSamplingAlgorithm != null) {
            if (deprecatedSamplingAlgorithm == 1) {
                return Flow.SamplingAlgorithm.SystematicCountBasedSampling;
            }
            if (deprecatedSamplingAlgorithm == 2) {
                return Flow.SamplingAlgorithm.RandomNoutOfNSampling;
            }
        }

        final Integer selectorAlgorithm = getInt64(this.document, "selectorAlgorithm").map(Long::intValue).orElse(null);

        if (selectorAlgorithm != null) {
            switch (selectorAlgorithm) {
                case 0:
                    return SamplingAlgorithm.Unassigned;
                case 1:
                    return SamplingAlgorithm.SystematicCountBasedSampling;
                case 2:
                    return SamplingAlgorithm.SystematicTimeBasedSampling;
                case 3:
                    return SamplingAlgorithm.RandomNoutOfNSampling;
                case 4:
                    return SamplingAlgorithm.UniformProbabilisticSampling;
                case 5:
                    return SamplingAlgorithm.PropertyMatchFiltering;
                case 6:
                case 7:
                case 8:
                    return SamplingAlgorithm.HashBasedFiltering;
                case 9:
                    return SamplingAlgorithm.FlowStateDependentIntermediateFlowSelectionProcess;
                default:
                    LOG.warn("Unknown selector algorithm: {}", selectorAlgorithm);
            }
        }

        return Flow.SamplingAlgorithm.Unassigned;
    }

