    public NetflowPacket(ByteBuffer data) {
        // Check that at least the header can be read
        if (data.array().length < HEADER_SIZE) {
            throw new IllegalArgumentException("A netflow packet must contain at least " + HEADER_SIZE + " bytes, but only " + data.remaining() + " have been provided.");
        }

        // Parse header
        this.version =  Utils.getInt(0, 1, data, 0);
        this.count = Utils.getInt(2, 3, data, 0);
        this.sysUptime = Utils.getLong(4, 7, data, 0);
        this.unixSecs = Utils.getLong(8, 11, data, 0);
        this.unixNSecs = Utils.getLong(12, 15, data, 0);
        this.flowSequence = Utils.getLong(16, 19, data, 0);
        this.engineType =  Utils.getShort(20, 20, data, 0); 
        this.engineId =  Utils.getShort(21, 21, data, 0);
        this.samplingAlgorithm = Utils.getInt(22, 23, data, 0) & 0b11000000;
        this.samplingInterval = Utils.getInt(22, 23, data, 0) & 0b00111111;

        // Parse body
        // determine how many records are there, as this.count could be wrong
        int theoreticallyRecordCount = (data.array().length - HEADER_SIZE) / BODY_SIZE;
        int readRecordCount = Math.min(this.count, theoreticallyRecordCount);
        for (int i = 0; i < readRecordCount; i++) {
            final int offset = i * BODY_SIZE + HEADER_SIZE;
            final NetflowRecord record = new NetflowRecord(data, offset);
            this.records.add(record);
        }
    }

