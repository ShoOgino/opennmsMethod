    /**
     * This test is used to validate that we can process many packets in parallel.
     *
     * We do this by blocking the reverse DNS lookup calls and verifying that the expected
     * number of threads are locked.
     *
     * @throws Exception on error
     */
    @Test
    public void canProcessManyPacketsInParallel() throws Exception {
        final int NUM_THREADS = 100;

        EventForwarder eventForwarder = mock(EventForwarder.class);
        Identity identity = mock(Identity.class);

        ThreadLocker threadLocker = new ThreadLocker();
        CompletableFuture<Integer> future = threadLocker.waitForThreads(NUM_THREADS);
        DnsResolver dnsResolver = new DnsResolver() {
            @Override
            public CompletableFuture<Optional<InetAddress>> lookup(String hostname) {
                threadLocker.park();
                return CompletableFuture.completedFuture(Optional.empty());
            }

            @Override
            public CompletableFuture<Optional<String>> reverseLookup(InetAddress inetAddress) {
                threadLocker.park();
                return CompletableFuture.completedFuture(Optional.empty());
            }
        };

        int udpPort = SocketUtils.findAvailableUdpPort();
        Netflow5UdpParser parser = new Netflow5UdpParser("FLOW", this, eventForwarder, identity, dnsResolver, new MetricRegistry());
        parser.setThreads(NUM_THREADS);
        UdpListener listener = new UdpListener("FLOW", Collections.singletonList(parser), new MetricRegistry());
        listener.setPort(udpPort);
        listener.start();

        sendNetflow5Packets(udpPort, NUM_THREADS * 2);

        // Wait until the expected number of threads are locked
        future.get(1, TimeUnit.MINUTES);
        // Wait a little longer and make sure that no extra threads are locked too
        Thread.sleep(500);
        assertThat(threadLocker.getNumExtraThreadsWaiting(), equalTo(0));
        // Open the gates
        threadLocker.release();
    }

