    @Test
    public void canTriggerThresholds() throws Exception {
        // Use our custom configuration
        updateDaoWithConfig(getConfig(port));

        // Start the daemon
        telemetryd.start();

        long ifInOctets = 124827820;
        long ifOutOctets = 194503622;

        // Load custom threshd configuration
        initThreshdFactories("/threshd-configuration.xml", "/thresholds.xml");
        ThreshdConfigFactory.getInstance().rebuildPackageIpListMap();
        mockEventIpcManager.addEventListener((EventListener) thresholdingService, ThresholdingServiceImpl.UEI_LIST);

        EventAnticipator eventAnticipator = mockEventIpcManager.getEventAnticipator();

        // Send an initial message
        sendTelemetryMessage("192.0.2.1", "ge_0_0_3", ifInOctets, ifOutOctets, 0);

        // There should be no thresholding Events
        assertEquals(0, eventAnticipator.getUnanticipatedEvents().size());

        // Send another message
        ifInOctets += 10000000;
        ifOutOctets += 10000000;
        sendTelemetryMessage("192.0.2.1", "ge_0_0_3", ifInOctets, ifOutOctets, 5);
        // There should still be no thresholding Events
        assertEquals(0, eventAnticipator.getUnanticipatedEvents().size());

        EventBuilder threshBldr = new EventBuilder(EventConstants.HIGH_THRESHOLD_EVENT_UEI, "Test");
        threshBldr.setNodeid(1);
        threshBldr.setInterface(addr("192.0.2.1"));
        threshBldr.setService("JTI-GPB");
        eventAnticipator.anticipateEvent(threshBldr.getEvent());

        // Send another message - this time with ifIn1SecPkts > threshold
        ifInOctets += 10000000;
        ifOutOctets += 10000000;
        sendTelemetryMessage("192.0.2.1", "ge_0_0_3", ifInOctets, ifOutOctets, 20);

        // Wait until our threshold was triggered - the anticipator will remove the event from the list once received
        await().atMost(60, TimeUnit.SECONDS).until(eventAnticipator::getAnticipatedEvents, hasSize(0));

        // There should be no unexpected Thresholding Events
        assertEquals(0, eventAnticipator.getUnanticipatedEvents().size());

    }

