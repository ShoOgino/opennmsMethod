    @Test
    public void testScriptFileReload() throws Exception {
        final int port = 50001;

        // Use our custom configuration
        updateDaoWithConfig(getConfig(port));

        // Start the daemon
        telemetryd.start();

        String content = new String(Files.readAllBytes(scriptFile.toPath()), StandardCharsets.UTF_8);
        Assert.assertThat(content, containsString("ifOutOctets"));

        // Send a JTI payload via a UDP socket
        final byte[] jtiMsgBytes = Resources.toByteArray(Resources.getResource("jti_15.1F4_ifd_ae_40000.raw"));
        InetAddress address = InetAddressUtils.getLocalHostAddress();
        DatagramPacket packet = new DatagramPacket(jtiMsgBytes, jtiMsgBytes.length, address, port);
        try (DatagramSocket socket = new DatagramSocket();) {
            socket.send(packet);
        }

        // Wait until the JRB archive is created
        await().atMost(30, TimeUnit.SECONDS).until(() -> rrdBaseDir.toPath()
                .resolve(Paths.get("1", "ge_0_0_3", "ifOutOctets.jrb")).toFile().canRead(), equalTo(true));

        // now change script file
        content = content.replaceAll("ifOutOctets", "FooBar");
        Files.write(scriptFile.toPath(), content.getBytes(StandardCharsets.UTF_8));
        //Files.setLastModifiedTime(newFile.toPath(), FileTime.fromMillis(System.currentTimeMillis()));

        await().pollDelay(1, TimeUnit.SECONDS).atMost(30, TimeUnit.SECONDS).until(() -> {
            final InetAddress newAddress = InetAddressUtils.getLocalHostAddress();
            final DatagramPacket newPacket = new DatagramPacket(jtiMsgBytes, jtiMsgBytes.length, newAddress, port);
            try (final DatagramSocket newSocket = new DatagramSocket();) {
                newSocket.send(newPacket);
            }

            return rrdBaseDir.toPath()
                    .resolve(Paths.get("1", "ge_0_0_3", "FooBar.jrb"))
                    .toFile()
                    .canRead();
        }, equalTo(true));
    }

