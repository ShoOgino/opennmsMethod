    public Packet(final TemplateManager templateManager,
                  final Header header,
                  final ByteBuffer buffer) throws InvalidPacketException {
        this.header = Objects.requireNonNull(header);

        final List<Set<TemplateRecord>> templateSets = new LinkedList<>();
        final List<Set<OptionsTemplateRecord>> optionTemplateSets = new LinkedList<>();
        final List<Set<DataRecord>> dataSets = new LinkedList<>();

        while (buffer.hasRemaining()) {
            final ByteBuffer headerBuffer = BufferUtils.slice(buffer, SetHeader.SIZE);
            final SetHeader setHeader = new SetHeader(headerBuffer);

            final ByteBuffer payloadBuffer = BufferUtils.slice(buffer, setHeader.length - SetHeader.SIZE);
            switch (setHeader.getType()) {
                case TEMPLATE_SET: {
                    final Set<TemplateRecord> templateSet = new Set<>(setHeader, TemplateRecord.parser(), payloadBuffer);

                    for (final TemplateRecord record : templateSet) {
                        if (record.header.fieldCount == 0) {
                            // Empty template means revocation
                            if (record.header.templateId == SetHeader.TEMPLATE_SET_ID) {
                                // Remove all templates
                                templateManager.removeAll(this.header.observationDomainId, Template.Type.TEMPLATE);

                            } else if (record.header.fieldCount == 0) {
                                // Empty template means revocation
                                templateManager.remove(this.header.observationDomainId, record.header.templateId);
                            }

                        } else {
                            templateManager.add(this.header.observationDomainId,
                                    record.header.templateId,
                                    Template.builder()
                                            .withType(Template.Type.TEMPLATE)
                                            .withFields(Lists.transform(record.fields, f -> f.specifier))
                                            .build());
                        }
                    }

                    templateSets.add(templateSet);
                    break;
                }

                case OPTIONS_TEMPLATE_SET: {
                    final Set<OptionsTemplateRecord> optionsTemplateSet = new Set<>(setHeader, OptionsTemplateRecord.parser(), payloadBuffer);

                    for (final OptionsTemplateRecord record : optionsTemplateSet) {
                        if (record.header.fieldCount == 0) {
                            // Empty template means revocation
                            if (record.header.templateId == SetHeader.OPTIONS_TEMPLATE_SET_ID) {
                                // Remove all templates
                                templateManager.removeAll(this.header.observationDomainId, Template.Type.OPTIONS_TEMPLATE);

                            } else if (record.header.fieldCount == 0) {
                                // Empty template means revocation
                                templateManager.remove(this.header.observationDomainId, record.header.templateId);
                            }

                        } else {
                            templateManager.add(this.header.observationDomainId,
                                    record.header.templateId,
                                    Template.builder()
                                            .withType(Template.Type.OPTIONS_TEMPLATE)
                                            .withScopeFieldsCount(record.header.scopeFieldCount)
                                            .withFields(Lists.transform(record.fields, f -> f.specifier))
                                            .build());
                        }
                    }

                    optionTemplateSets.add(optionsTemplateSet);
                    break;
                }

                case DATA_SET: {
                    final TemplateManager.TemplateResolver templateResolver = templateManager.getResolver(header.observationDomainId);
                    final Template template = templateResolver.lookup(setHeader.setId)
                                .orElseThrow(() -> new InvalidPacketException(buffer, "Unknown Template ID: %d", setHeader.setId));

                    final Set<DataRecord> dataSet = new Set<>(setHeader, DataRecord.parser(template, templateResolver), payloadBuffer);

                    dataSets.add(dataSet);
                    break;
                }

                default: {
                    throw new InvalidPacketException(buffer, "Invalid Set ID: %d", setHeader.setId);
                }
            }
        }

        this.templateSets = Collections.unmodifiableList(templateSets);
        this.optionTemplateSets = Collections.unmodifiableList(optionTemplateSets);
        this.dataSets = Collections.unmodifiableList(dataSets);
    }

