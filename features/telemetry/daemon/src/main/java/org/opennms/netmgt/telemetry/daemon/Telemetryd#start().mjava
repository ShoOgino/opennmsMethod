    @Override
    public synchronized void start() throws Exception {
        if (consumers.size() > 0) {
            throw new IllegalStateException(NAME + " is already started.");
        }
        LOG.info("{} is starting.", NAME);
        final TelemetrydConfiguration config = telemetrydConfigDao.getContainer().getObject();
        final AutowireCapableBeanFactory beanFactory = applicationContext.getAutowireCapableBeanFactory();

        for (Protocol protocol : config.getProtocols()) {
            if (!protocol.getEnabled()) {
                LOG.debug("Skipping disabled protocol: {}", protocol.getName());
                continue;
            }
            LOG.debug("Setting up protocol: {}", protocol.getName());

            // Create a Sink module using the protocol definition.
            // This allows for protocol to each have their respective queues and thread
            // related settings to help limit the impact of one protocol on another.
            final TelemetrySinkModule sinkModule = new TelemetrySinkModule(protocol);
            beanFactory.autowireBean(sinkModule);
            beanFactory.initializeBean(sinkModule, "sinkModule");

            // Create the consumer, but don't start it yet
            final TelemetryMessageConsumer consumer = new TelemetryMessageConsumer(protocol, sinkModule);
            beanFactory.autowireBean(consumer);
            beanFactory.initializeBean(consumer, "consumer");
            consumers.add(consumer);

            // Build the dispatcher, and all of
            final AsyncDispatcher<TelemetryMessage> dispatcher = messageDispatcherFactory.createAsyncDispatcher(sinkModule);
            dispatchers.add(dispatcher);
            for (org.opennms.netmgt.telemetry.config.model.Listener listenerDef : protocol.getListeners()) {
                listeners.add(ListenerFactory.buildListener(listenerDef, dispatcher));
            }
        }

        // Start the consumers
        for (TelemetryMessageConsumer consumer : consumers) {
            LOG.info("Starting consumer for {} protocol.", consumer.getProtocol().getName());
            messageConsumerManager.registerConsumer(consumer);
        }

        // Start the listeners
        for (Listener listener : listeners) {
            LOG.info("Starting {} listener.", listener.getName());
            listener.start();
        }

        LOG.info("{} is started.", NAME);
    }

