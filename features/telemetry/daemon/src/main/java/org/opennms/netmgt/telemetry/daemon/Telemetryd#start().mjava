    @Override
    public synchronized void start() throws Exception {
        if (consumers.size() > 0) {
            throw new IllegalStateException(NAME + " is already started.");
        }
        LOG.info("{} is starting.", NAME);
        final TelemetrydConfig config = telemetrydConfigDao.getContainer().getObject();
        final AutowireCapableBeanFactory beanFactory = applicationContext.getAutowireCapableBeanFactory();

        // First we create the queues as parsers may reference them
        for (final QueueConfig queueConfig : config.getQueues()) {
            // Create a Sink module using the queue definition.
            // This allows for queue to have their respective queues and thread
            // related settings to help limit the impact of one adapter on another.
            final TelemetrySinkModule sinkModule = new TelemetrySinkModule(queueConfig);
            beanFactory.autowireBean(sinkModule);
            beanFactory.initializeBean(sinkModule, "sinkModule");

            // Create the consumer of there are any adapters, but don't start it yet
            final List<AdapterConfig> enabledAdapters = queueConfig.getAdapters().stream().filter(AdapterConfig::isEnabled).collect(Collectors.toList());
            if (!enabledAdapters.isEmpty()) {
                final TelemetryMessageConsumer consumer = new TelemetryMessageConsumer(queueConfig, enabledAdapters, sinkModule);
                beanFactory.autowireBean(consumer);
                beanFactory.initializeBean(consumer, "consumer");
                consumers.add(consumer);
            } else {
                LOG.debug("Skipping consumer for queue: {} (no adapters enabled/defined)", queueConfig.getName());
            }

            // Build the dispatcher
            final AsyncDispatcher<TelemetryMessage> dispatcher = messageDispatcherFactory.createAsyncDispatcher(sinkModule);
            telemetryRegistry.registerDispatcher(queueConfig.getName(), dispatcher);
        }

        // Create listeners AND parsers
        for (final ListenerConfig listenerConfig : config.getListeners()) {
            if (!listenerConfig.isEnabled()) {
                LOG.debug("Skipping disabled listener: {}", listenerConfig.getName());
                continue;
            }
            if (listenerConfig.getParsers().isEmpty()) {
                LOG.debug("Skipping listener with no parsers: {}", listenerConfig.getName());
                continue;
            }
            final Listener listener = telemetryRegistry.getListener(listenerConfig);
            listeners.add(listener);
        }

        // Start the consumers
        for (TelemetryMessageConsumer consumer : consumers) {
            LOG.info("Starting consumer for {} adapter.", consumer.getQueue().getName());
            messageConsumerManager.registerConsumer(consumer);
        }

        // Start the listeners
        for (Listener listener : listeners) {
            LOG.info("Starting {} listener.", listener.getName());
            listener.start();
        }

        // Start the connectors
        if (!config.getConnectors().isEmpty()) {
            LOG.info("Starting connectors.");
            connectorManager.start(config);
        }

        LOG.info("{} is started.", NAME);
    }

