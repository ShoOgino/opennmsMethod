    /**
     * Create a new {@link PropertyTree} from the given {@link Map}.
     * The keys of the map are handled as full-qualified dot-separated paths.
     *
     * @param map the path / value mapping used to create the property tree
     * @return a new {@link PropertyTree} instance
     */
    public static PropertyTree from(final Map<String, String> map) {
        final Node root = new Node(Optional.empty());

        // We sort here so that a comes before a.a and the node with the value is created before it's child nodes
        map.entrySet().stream()
                .sorted(Comparator.comparing(Map.Entry::getKey))
                .forEachOrdered(e -> {
                    final List<String> path = Splitter.on('.').splitToList(e.getKey());
                    final Node node = ensure(root, path.subList(0, path.size() - 1));
                    node.children.put(path.get(path.size() - 1), new Node(Optional.of(e.getValue())));
                });

        return new PropertyTree(root);
    }

