    @Test
    public void test() {
        final PropertyTree props = PropertyTree.from(ImmutableMap.<String, String>builder()
                .put("a", "1")
                .put("b.a", "2")
                .put("b.b", "3")
                .put("b.b.a", "4")
                .put("b.b.b", "5")
                .put("b.c.a", "6")
                .put("b.c.b", "7")
                .put("x.y.z.a.b", "0")
                .put("x.y.z.a.b.c", "1")
                .put("x.y.z.a.b.d", "2")
                .build());

        assertEquals(Optional.of("1"), props.find("a").flatMap(PropertyTree.Node::getValue));

        assertEquals(Optional.empty(), props.find("b").flatMap(PropertyTree.Node::getValue));
        assertEquals(Optional.of("2"), props.find("b", "a").flatMap(PropertyTree.Node::getValue));
        assertEquals(Optional.of("3"), props.find("b", "b").flatMap(PropertyTree.Node::getValue));
        assertEquals(Optional.of("4"), props.find("b", "b", "a").flatMap(PropertyTree.Node::getValue));
        assertEquals(Optional.empty(), props.find("b", "b", "a", "a").flatMap(PropertyTree.Node::getValue));
        assertEquals(Optional.of("5"), props.find("b", "b", "b").flatMap(PropertyTree.Node::getValue));
        assertEquals(Optional.empty(), props.find("b", "b", "c").flatMap(PropertyTree.Node::getValue));
        assertEquals(Optional.empty(), props.find("b", "c").flatMap(PropertyTree.Node::getValue));
        assertEquals(Optional.of("6"), props.find("b", "c", "a").flatMap(PropertyTree.Node::getValue));
        assertEquals(Optional.of("7"), props.find("b", "c", "b").flatMap(PropertyTree.Node::getValue));
        assertEquals(Optional.empty(), props.find("b", "c", "c").flatMap(PropertyTree.Node::getValue));
        assertEquals(Optional.of("1"), props.find("x", "y", "z", "a", "b", "c").flatMap(PropertyTree.Node::getValue));

        assertEquals("1", props.getRequiredString("a"));
        assertEquals("7", props.getRequiredString("b", "c", "b"));

        assertEquals(Optional.of(4), props.getOptionalInteger("b", "b", "a"));
        assertEquals(Optional.empty(), props.getOptionalInteger("b", "b", "x"));
        assertEquals(Optional.empty(), props.getOptionalInteger("b", "b", "y", "z"));

        assertEquals(ImmutableMap.of("a", "6", "b", "7"), props.getMap("b", "c"));
        assertEquals(ImmutableMap.of("a.b", "0", "a.b.c", "1", "a.b.d", "2"), props.getFlatMap("x", "y", "z"));
        assertEquals(Collections.emptyMap(), props.getMap("b", "x"));
        assertEquals(Collections.emptyMap(), props.getMap("b", "y", "z"));

        assertEquals(3, props.getSubTrees("b").size());
    }

