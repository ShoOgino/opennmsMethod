    @Override
    public void updated(String pid, Dictionary<String, ?> properties) {
        final TelemetryMessageConsumer existingConsumer = consumersById.get(pid);
        if (existingConsumer != null) {
            LOG.info("Updating existing consumer for pid: {}", pid);
            deleted(pid);
        } else {
            LOG.info("Creating new consumer for pid: {}", pid);
        }

        // Convert the dictionary to a map
        final Map<String, String> parameters = MapUtils.fromDict(properties);

        // Build the protocol and listener definitions
        final Protocol protocolDef = new MapBasedProtocolDef(parameters);
        final Adapter adapterDef = new MapBasedAdapterDef(parameters);

        final TelemetrySinkModule sinkModule = new TelemetrySinkModule(protocolDef);
        sinkModule.setDistPollerDao(distPollerDao);

        try {
            final TelemetryMessageConsumer consumer = new TelemetryMessageConsumer(protocolDef, Lists.newArrayList(adapterDef), sinkModule);
            consumer.setAdapterRegistry(telemetryAdapterRegistry);
            consumer.init();
            messageConsumerManager.registerConsumer(consumer);
            consumersById.put(pid, consumer);
        } catch (Exception e) {
            LOG.error("Failed to create {}", TelemetryMessageConsumer.class, e);
        }
    }

