    @Override
    public void updated(String pid, Dictionary<String, ?> properties) {
        final Listener existingListener = listenersByPid.get(pid);
        if (existingListener != null) {
            LOG.info("Updating existing listener/dispatcher for pid: {}", pid);
            deleted(pid);
        } else {
            LOG.info("Creating new listener/dispatcher for pid: {}", pid);
        }

        // Convert the dictionary to a map
        final Map<String, String> parameters = MapUtils.fromDict(properties);

        // Build the protocol and listener definitions
        final MapBasedProtocolDef protocolDef = new MapBasedProtocolDef(parameters);
        final MapBasedListenerDef listenerDef = new MapBasedListenerDef(parameters);

        final TelemetrySinkModule sinkModule = new TelemetrySinkModule(protocolDef);
        sinkModule.setDistPollerDao(distPollerDao);
        final AsyncDispatcher<TelemetryMessage> dispatcher = messageDispatcherFactory.createAsyncDispatcher(sinkModule);

        try {
            final Listener listener = ListenerFactory.buildListener(listenerDef, dispatcher);
            listener.start();
            listenersByPid.put(pid, listener);
            dispatchersByPid.put(pid, dispatcher);
        } catch (Exception e) {
            LOG.error("Failed to build listener.", e);
            try {
                dispatcher.close();
            } catch (Exception ee) {
                LOG.error("Failed to close dispatcher.", e);
            }
        }

        LOG.info("Successfully started listener/dispatcher for pid: {}", pid);
    }

