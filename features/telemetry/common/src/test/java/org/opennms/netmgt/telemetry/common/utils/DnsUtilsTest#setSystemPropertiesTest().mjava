    @Test
    public void setSystemPropertiesTest() throws Exception {
        final List<String> addresses1 = getServers(DnsUtils.getResolver());
        Assert.assertEquals(true, addresses1.size() > 0);

        this.bundleContext.properties.setProperty(DnsUtils.DNS_ENABLE, "true");
        this.bundleContext.properties.setProperty(DnsUtils.DNS_PRIMARY_SERVER, "1.1.1.1");
        this.bundleContext.properties.setProperty(DnsUtils.DNS_SECONDARY_SERVER, "8.8.8.8");
        DnsUtils.reverseLookup("1.1.1.1");

        final List<String> addresses2 = getServers(DnsUtils.getResolver());
        Assert.assertEquals(2, addresses2.size());
        Assert.assertEquals(true, addresses2.contains("1.1.1.1"));
        Assert.assertEquals(true, addresses2.contains("8.8.8.8"));

        this.bundleContext.properties.clear();
        this.bundleContext.properties.setProperty(DnsUtils.DNS_ENABLE, "true");
        this.bundleContext.properties.setProperty(DnsUtils.DNS_PRIMARY_SERVER, "8.8.4.4");
        DnsUtils.reverseLookup("1.1.1.1");

        final List<String> addresses3 = getServers(DnsUtils.getResolver());
        Assert.assertEquals(1, addresses3.size());
        Assert.assertEquals(true, addresses3.contains("8.8.4.4"));

        this.bundleContext.properties.clear();
        this.bundleContext.properties.setProperty(DnsUtils.DNS_ENABLE, "false");
        DnsUtils.reverseLookup("1.1.1.1");

        final List<String> addresses4 = getServers(DnsUtils.getResolver());
        Assert.assertEquals(true, addresses4.size() > 0);
    }

