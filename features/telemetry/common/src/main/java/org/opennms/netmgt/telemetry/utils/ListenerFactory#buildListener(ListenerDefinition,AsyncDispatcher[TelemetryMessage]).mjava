    public static Listener buildListener(ListenerDefinition listenerDef, AsyncDispatcher<TelemetryMessage> dispatcher) throws Exception {
        // Instantiate the associated class
        final Object listenerInstance;
        try {
            final Class<?> clazz = Class.forName(listenerDef.getClassName());
            final Constructor<?> ctor = clazz.getConstructor();
            listenerInstance = ctor.newInstance();
        } catch (Exception e) {
            throw new RuntimeException(String.format("Failed to instantiate listener with class name '%s'.",
                    listenerDef.getClassName()), e);
        }

        // Cast
        if (!(listenerInstance instanceof Listener)) {
            throw new IllegalArgumentException(String.format("%s must implement %s", listenerDef.getClassName(), Listener.class.getCanonicalName()));
        }
        final Listener listener = (Listener)listenerInstance;

        // Apply the parameters
        final BeanWrapper wrapper = PropertyAccessorFactory.forBeanPropertyAccess(listener);
        wrapper.setPropertyValues(listenerDef.getParameterMap());

        // Update the name
        // The one given in the definition wins over any that may be set by the parameters
        listener.setName(listenerDef.getName());

        // Use the given dispatcher
        listener.setDispatcher(dispatcher);

        return listener;
    }

