    private static void checkSystemProperties() {
        if (bundleContext == null) {
            return;
        }

        final String primaryServer = bundleContext.getProperty(DNS_PRIMARY_SERVER);
        final String secondaryServer = bundleContext.getProperty(DNS_SECONDARY_SERVER);
        final boolean enable = Boolean.parseBoolean(bundleContext.getProperty(DNS_ENABLE));

        if (enable != DnsUtils.enable || !Objects.equals(primaryServer, DnsUtils.primaryServer) || !Objects.equals(secondaryServer, DnsUtils.secondaryServer)) {
            DnsUtils.enable = enable;
            DnsUtils.primaryServer = primaryServer;
            DnsUtils.secondaryServer = secondaryServer;
            setDnsServers(DnsUtils.primaryServer, DnsUtils.secondaryServer);
        }

        final int cacheCount = Optional.ofNullable(bundleContext.getProperty(DNS_CACHE_COUNT)).map(Integer::parseInt).orElse(DNS_CACHE_COUNT_DEFAULT);
        final int cacheMaxTTL = Optional.ofNullable(bundleContext.getProperty(DNS_CACHE_MAX_TTL)).map(Integer::parseInt).orElse(-1);

        if (cacheCount != DnsUtils.cacheCount || cacheMaxTTL != DnsUtils.cacheMaxTTL) {
            DnsUtils.cacheCount = cacheCount;
            DnsUtils.cacheMaxTTL = cacheMaxTTL;

            DnsUtils.cache = new Cache();
            DnsUtils.cache.setMaxEntries(DnsUtils.cacheCount);
            DnsUtils.cache.setMaxCache(DnsUtils.cacheMaxTTL);
            DnsUtils.cache.setMaxNCache(DnsUtils.cacheMaxTTL);
        }
    }

