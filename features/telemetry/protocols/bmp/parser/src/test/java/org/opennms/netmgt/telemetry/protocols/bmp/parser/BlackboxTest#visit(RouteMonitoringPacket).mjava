    @Override
    public void visit(RouteMonitoringPacket packet) {
        assertThat(packet.peerHeader.type, is(PeerHeader.Type.GLOBAL_INSTANCE));
        assertThat(packet.peerHeader.flags.addressVersion, is(PeerFlags.AddressVersion.IP_V4));
        assertThat(packet.peerHeader.flags.policy, is(PeerFlags.Policy.PRE_POLICY));
        assertThat(packet.peerHeader.flags.legacyASPath, is(false));
        assertThat(packet.peerHeader.distinguisher, is(UnsignedLong.ZERO));
        assertThat(packet.peerHeader.address, is(InetAddressUtils.addr("10.0.255.5")));
        assertThat(packet.peerHeader.as, is(64512L));
        assertThat(packet.peerHeader.id, is(InetAddressUtils.addr("192.168.10.5")));
        assertThat(packet.peerHeader.timestamp, either(is(Instant.ofEpochSecond(1574257996L))).or(is(Instant.ofEpochSecond(1574257061L))));

        assertThat(packet.updateMessage.get().header.length, either(is(27)).or(is(47)));
        assertThat(packet.updateMessage.get().header.type, is(org.opennms.netmgt.telemetry.protocols.bmp.parser.proto.bgp.Header.Type.UPDATE));

        if (!packet.updateMessage.get().withdrawRoutes.isEmpty()) {
            assertThat(packet.updateMessage.get().reachableRoutes, is(empty()));
            assertThat(packet.updateMessage.get().withdrawRoutes.get(0).length, is(24));
            assertThat(packet.updateMessage.get().withdrawRoutes.get(0).prefix, is(InetAddressUtils.addr("192.168.254.0")));
        } else {
            assertThat(packet.updateMessage.get().withdrawRoutes, is(empty()));
            assertThat(packet.updateMessage.get().reachableRoutes.get(0).length, is(24));
            assertThat(packet.updateMessage.get().reachableRoutes.get(0).prefix, is(InetAddressUtils.addr("192.168.255.0")));
        }

        assertThat(packet.updateMessage.get().pathAttributes.size(), either(is(0)).or(is(3)));

        if (packet.updateMessage.get().pathAttributes.size() > 0) {
            assertThat(packet.updateMessage.get().pathAttributes.get(0).optional, is(false));
            assertThat(packet.updateMessage.get().pathAttributes.get(0).transitive, is(true));
            assertThat(packet.updateMessage.get().pathAttributes.get(0).partial, is(false));
            assertThat(packet.updateMessage.get().pathAttributes.get(0).extended, is(false));
            assertThat(packet.updateMessage.get().pathAttributes.get(0).type, is(UpdatePacket.PathAttribute.Type.ORIGIN));
            assertThat(packet.updateMessage.get().pathAttributes.get(0).length, is(1));
            packet.updateMessage.get().pathAttributes.get(0).attribute.accept(new AttributeVisitorAdapter() {
                @Override
                public void visit(Origin origin) {
                    assertThat(origin.value, is(Origin.Value.INCOMPLETE));
                }
            });

            assertThat(packet.updateMessage.get().pathAttributes.get(1).optional, is(false));
            assertThat(packet.updateMessage.get().pathAttributes.get(1).transitive, is(true));
            assertThat(packet.updateMessage.get().pathAttributes.get(1).partial, is(false));
            assertThat(packet.updateMessage.get().pathAttributes.get(1).extended, is(false));
            assertThat(packet.updateMessage.get().pathAttributes.get(1).type, is(UpdatePacket.PathAttribute.Type.AS_PATH));
            assertThat(packet.updateMessage.get().pathAttributes.get(1).length, is(6));
            packet.updateMessage.get().pathAttributes.get(1).attribute.accept(new AttributeVisitorAdapter() {
                @Override
                public void visit(AsPath asPath) {
                    assertThat(asPath.segments.size(), is(1));
                    assertThat(asPath.segments.get(0).type, is(AsPath.Segment.Type.AS_SEQUENCE));
                    assertThat(asPath.segments.get(0).path, hasItem(64512L));
                }
            });

            assertThat(packet.updateMessage.get().pathAttributes.get(2).optional, is(false));
            assertThat(packet.updateMessage.get().pathAttributes.get(2).transitive, is(true));
            assertThat(packet.updateMessage.get().pathAttributes.get(2).partial, is(false));
            assertThat(packet.updateMessage.get().pathAttributes.get(2).extended, is(false));
            assertThat(packet.updateMessage.get().pathAttributes.get(2).type, is(UpdatePacket.PathAttribute.Type.NEXT_HOP));
            assertThat(packet.updateMessage.get().pathAttributes.get(2).length, is(4));
            packet.updateMessage.get().pathAttributes.get(2).attribute.accept(new AttributeVisitorAdapter() {
                @Override
                public void visit(NextHop nextHop) {
                    assertThat(nextHop.address, is(InetAddressUtils.addr("10.0.255.5")));
                }
            });
        }
    }

