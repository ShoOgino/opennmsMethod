    @Override
    public void visit(PeerUpPacket packet) {
        assertThat(packet.peerHeader.type, is(PeerHeader.Type.GLOBAL_INSTANCE));
        assertThat(packet.peerHeader.flags.addressVersion, is(PeerFlags.AddressVersion.IP_V4));
        assertThat(packet.peerHeader.flags.policy, is(PeerFlags.Policy.PRE_POLICY));
        assertThat(packet.peerHeader.flags.legacyASPath, is(false));
        assertThat(packet.peerHeader.distinguisher, is(UnsignedLong.ZERO));
        assertThat(packet.peerHeader.address, is(InetAddressUtils.addr("10.0.255.5")));
        assertThat(packet.peerHeader.as, is(64512L));
        assertThat(packet.peerHeader.id, is(InetAddressUtils.addr("192.168.10.5")));
        assertThat(packet.peerHeader.timestamp, is(Instant.ofEpochSecond(1574257049L)));
        assertThat(packet.localAddress, is(InetAddressUtils.addr("10.0.255.7")));
        assertThat(packet.localPort, is(179));
        assertThat(packet.remotePort, is(49103));
        assertThat(packet.sendOpenMessage.header.length, is(45));
        assertThat(packet.sendOpenMessage.header.type, is(org.opennms.netmgt.telemetry.protocols.bmp.parser.proto.bgp.Header.Type.OPEN));
        assertThat(packet.sendOpenMessage.version, is(4));
        assertThat(packet.sendOpenMessage.as, is(65002));
        assertThat(packet.sendOpenMessage.id, is(InetAddressUtils.addr("192.168.10.7")));
        assertThat(packet.sendOpenMessage.holdTime, is(90));
        assertThat(packet.recvOpenMessage.header.length, is(45));
        assertThat(packet.recvOpenMessage.header.type, is(org.opennms.netmgt.telemetry.protocols.bmp.parser.proto.bgp.Header.Type.OPEN));
        assertThat(packet.recvOpenMessage.version, is(4));
        assertThat(packet.recvOpenMessage.as, is(64512));
        assertThat(packet.recvOpenMessage.id, is(InetAddressUtils.addr("192.168.10.5")));
        assertThat(packet.recvOpenMessage.holdTime, is(90));
        assertThat(packet.information.size(), is(0));
    }

