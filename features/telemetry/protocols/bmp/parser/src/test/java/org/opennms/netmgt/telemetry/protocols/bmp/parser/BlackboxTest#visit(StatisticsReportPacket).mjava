    @Override
    public void visit(StatisticsReportPacket packet) {
        assertThat(packet.peerHeader.type, is(PeerHeader.Type.GLOBAL_INSTANCE));
        assertThat(packet.peerHeader.flags.addressVersion, is(PeerFlags.AddressVersion.IP_V4));
        assertThat(packet.peerHeader.flags.postPolicy, is(false));
        assertThat(packet.peerHeader.flags.legacyASPath, is(false));
        assertThat(packet.peerHeader.distinguisher, is(UnsignedLong.ZERO));
        assertThat(packet.peerHeader.address, is(InetAddressUtils.addr("10.0.255.5")));
        assertThat(packet.peerHeader.as, is(64512L));
        assertThat(packet.peerHeader.id, is(3232238085L));
        assertThat(packet.peerHeader.timestamp, is(Instant.ofEpochSecond(1574257732L)));

        assertThat(packet.statistics.size(), is(4));
        assertThat(packet.statistics.get(0).length, is(8));
        assertThat(packet.statistics.get(0).type, is(StatisticsReportPacket.Element.Type.ADJ_RIB_IN));
        packet.statistics.get(0).value.accept(new MetricVisitorAdapter() {
            @Override
            public void visit(AdjRibIn adjRibIn) {
                assertThat(adjRibIn.gauge, is(UnsignedLong.ONE));
            }
        });
        assertThat(packet.statistics.get(1).length, is(8));
        assertThat(packet.statistics.get(1).type, is(StatisticsReportPacket.Element.Type.LOC_RIB));
        packet.statistics.get(1).value.accept(new MetricVisitorAdapter() {
            @Override
            public void visit(LocRib locRib) {
                assertThat(locRib.gauge, is(UnsignedLong.ONE));
            }
        });
        assertThat(packet.statistics.get(2).length, is(4));
        assertThat(packet.statistics.get(2).type, is(StatisticsReportPacket.Element.Type.UPDATE_TREAT_AS_WITHDRAW));
        packet.statistics.get(2).value.accept(new MetricVisitorAdapter() {
            @Override
            public void visit(UpdateTreatAsWithdraw updateTreatAsWithdraw) {
                assertThat(updateTreatAsWithdraw.counter, is(0L));
            }
        });
        assertThat(packet.statistics.get(3).length, is(4));
        assertThat(packet.statistics.get(3).type, is(StatisticsReportPacket.Element.Type.PREFIX_TREAT_AS_WITHDRAW));
        packet.statistics.get(3).value.accept(new MetricVisitorAdapter() {
            @Override
            public void visit(PrefixTreatAsWithdraw prefixTreatAsWithdraw) {
                assertThat(prefixTreatAsWithdraw.counter, is(0L));
            }
        });
    }

