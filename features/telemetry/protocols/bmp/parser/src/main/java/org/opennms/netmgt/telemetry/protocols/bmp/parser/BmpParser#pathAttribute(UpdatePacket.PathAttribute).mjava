    private static Transport.RouteMonitoringPacket.PathAttribute.Builder pathAttribute(UpdatePacket.PathAttribute attribute) {
        final Transport.RouteMonitoringPacket.PathAttribute.Builder attributesBuilder = Transport.RouteMonitoringPacket.PathAttribute.newBuilder();
        attributesBuilder.setOptional(attribute.optional)
                .setTransitive(attribute.transitive)
                .setPartial(attribute.partial)
                .setExtended(attribute.extended);

        attribute.attribute.accept(new Attribute.Visitor() {
            @Override
            public void visit(final Aggregator aggregator) {
                attributesBuilder.getAggregatorBuilder()
                        .setAs(aggregator.as)
                        .setAddress(address(aggregator.address));
            }

            @Override
            public void visit(final AsPath asPath) {
                final Transport.RouteMonitoringPacket.PathAttribute.AsPath.Builder asPathBuilder = attributesBuilder.getAsPathBuilder();
                for (final AsPath.Segment segment : asPath.segments) {
                    final Transport.RouteMonitoringPacket.PathAttribute.AsPath.Segment.Builder segmentBuilder = asPathBuilder.addSegmentsBuilder();
                    segmentBuilder.setType(segment.type.map(t -> {
                        switch (t) {
                            case AS_SET:
                                return Transport.RouteMonitoringPacket.PathAttribute.AsPath.Segment.Type.AS_SET;
                            case AS_SEQUENCE:
                                return Transport.RouteMonitoringPacket.PathAttribute.AsPath.Segment.Type.AS_SEQUENCE;
                            case UNKNOWN:
                                return Transport.RouteMonitoringPacket.PathAttribute.AsPath.Segment.Type.UNRECOGNIZED;
                            default:
                                throw new IllegalStateException();
                        }
                    }));
                    for (final long as : segment.path) {
                        segmentBuilder.addPaths((int) as);
                    }
                }
            }

            @Override
            public void visit(final AtomicAggregate atomicAggregate) {
                attributesBuilder.getAtomicAggregateBuilder();
            }

            @Override
            public void visit(final LocalPref localPref) {
                attributesBuilder.getLocalPrefBuilder()
                        .setPreference((int) localPref.preference);
            }

            @Override
            public void visit(final MultiExistDisc multiExistDisc) {
                attributesBuilder.getMultiExitDiscBuilder()
                        .setDiscriminator((int) multiExistDisc.discriminator);
            }

            @Override
            public void visit(final NextHop nextHop) {
                attributesBuilder.getNextHopBuilder()
                        .setAddress(address(nextHop.address));
            }

            @Override
            public void visit(final Origin origin) {
                attributesBuilder.setOrigin(origin.value.map(v -> {
                    switch (v) {
                        case IGP:
                            return Transport.RouteMonitoringPacket.PathAttribute.Origin.IGP;
                        case EGP:
                            return Transport.RouteMonitoringPacket.PathAttribute.Origin.EGP;
                        case INCOMPLETE:
                            return Transport.RouteMonitoringPacket.PathAttribute.Origin.INCOMPLETE;
                        case UNKNOWN:
                            return Transport.RouteMonitoringPacket.PathAttribute.Origin.UNRECOGNIZED;
                        default:
                            throw new IllegalStateException();
                    }
                }));
            }

            @Override
            public void visit(Community community) {
                attributesBuilder.setCommunity((int) community.community);
            }

            @Override
            public void visit(OriginatorId originatorId) {
                attributesBuilder.setOriginatorId((int) originatorId.originatorId);
            }

            @Override
            public void visit(ClusterList clusterList) {
                Transport.RouteMonitoringPacket.PathAttribute.ClusterList.Builder clusterListBuilder = Transport.RouteMonitoringPacket.PathAttribute.ClusterList.newBuilder();
                for (InetAddress clusterId : clusterList.clusterIds) {
                    clusterListBuilder.addClusterId(address(clusterId));
                }
                attributesBuilder.setClusterList(clusterListBuilder);
            }

            @Override
            public void visit(ExtendedCommunities extendedCommunities) {
                Transport.RouteMonitoringPacket.PathAttribute.ExtendedCommunities.Builder extendedCommunitiesBuilder = Transport.RouteMonitoringPacket.PathAttribute.ExtendedCommunities.newBuilder();
                for (ExtendedCommunities.ExtendedCommunity extendedCommunity : extendedCommunities.extendedCommunities) {
                    final Transport.RouteMonitoringPacket.PathAttribute.ExtendedCommunity.Builder builder = extendedCommunitiesBuilder.addExtendedCommunitiesBuilder()
                            .setHighType(extendedCommunity.highType)
                            .setLowType(extendedCommunity.lowType)
                            .setAuthoritative(extendedCommunity.authoritative)
                            .setTransitive(extendedCommunity.transitive);
                    // Value will be null for unkown types - guard against this
                    if (extendedCommunity.value != null) {
                        builder.setType(extendedCommunity.value.type)
                                .setValue(extendedCommunity.value.value);
                    }
                }
                attributesBuilder.setExtendedCommunities(extendedCommunitiesBuilder);
            }

            @Override
            public void visit(ExtendedV6Communities extendedV6Communities) {
                Transport.RouteMonitoringPacket.PathAttribute.ExtendedV6Communities.Builder extendedV6CommunitiesBuilder = Transport.RouteMonitoringPacket.PathAttribute.ExtendedV6Communities.newBuilder();
                for (ExtendedV6Communities.ExtendedV6Community extendedCommunity : extendedV6Communities.extendedCommunities) {
                    extendedV6CommunitiesBuilder.addExtendedCommunitiesBuilder()
                                                .setHighType(extendedCommunity.highType)
                                                .setLowType(extendedCommunity.lowType)
                                                .setAuthoritative(extendedCommunity.authoritative)
                                                .setTransitive(extendedCommunity.transitive)
                                                .setType(extendedCommunity.value.type)
                                                .setValue(extendedCommunity.value.value);
                }
                attributesBuilder.setExtendedV6Communities(extendedV6CommunitiesBuilder);
            }

            @Override
            public void visit(Connector connector) {
                attributesBuilder.setConnector(connector.connector);
            }

            @Override
            public void visit(AsPathLimit asPathLimit) {
                attributesBuilder.setAsPathLimit(Transport.RouteMonitoringPacket.PathAttribute.AsPathLimit.newBuilder()
                        .setUpperBound(asPathLimit.upperBound)
                        .setAs((int) asPathLimit.as)
                        .build());
            }

            @Override
            public void visit(LargeCommunities largeCommunities) {
                Transport.RouteMonitoringPacket.PathAttribute.LargeCommunities.Builder largeCommunitiesBuilder = Transport.RouteMonitoringPacket.PathAttribute.LargeCommunities.newBuilder();
                for (LargeCommunities.LargeCommunity largeCommunity : largeCommunities.largeCommunities) {
                    largeCommunitiesBuilder.addLargeCommunitiesBuilder()
                            .setGlobalAdministrator((int) largeCommunity.globalAdministrator)
                            .setLocalDataPart1((int) largeCommunity.localDataPart1)
                            .setLocalDataPart2((int) largeCommunity.localDataPart2);
                }
                attributesBuilder.setLargeCommunities(largeCommunitiesBuilder);
            }

            @Override
            public void visit(AttrSet attrSet) {
                Transport.RouteMonitoringPacket.PathAttribute.AttrSet.Builder attrSetBuilder = Transport.RouteMonitoringPacket.PathAttribute.AttrSet.newBuilder()
                        .setOriginAs((int) attrSet.originAs);
                for (UpdatePacket.PathAttribute attribute : attrSet.pathAttributes) {
                    attrSetBuilder.addPathAttributes(pathAttribute(attribute));
                }
                attributesBuilder.setAttrSet(attrSetBuilder);
            }

            @Override
            public void visit(org.opennms.netmgt.telemetry.protocols.bmp.parser.proto.bgp.packets.pathattr.Unknown unknown) {
            }

            @Override
            public void visit(final MultiprotocolReachableNlri multiprotocolReachableNrli) {
                final Transport.RouteMonitoringPacket.PathAttribute.MultiprotocolReachableNrli mpReachNrli = Transport.RouteMonitoringPacket.PathAttribute.MultiprotocolReachableNrli.newBuilder()
                        .addAllAdvertised(multiprotocolReachableNrli.advertised.stream().map(r -> {
                            return Transport.RouteMonitoringPacket.Route.newBuilder()
                                    .setLabels(r.labels != null ? r.labels : "")
                                    .setLength(r.length)
                                    .setPathId(r.pathId)
                                    .setPrefix(address(r.prefix))
                                    .build();
                        }).collect(Collectors.toList()))
                        .addAllVpnAdvertised(multiprotocolReachableNrli.vpnAdvertised.stream().map(r -> {
                            return Transport.RouteMonitoringPacket.Route.newBuilder()
                                    .setLabels(r.labels != null ? r.labels : "")
                                    .setLength(r.length)
                                    .setPathId(r.pathId)
                                    .setPrefix(address(r.prefix))
                                    .build();
                        }).collect(Collectors.toList()))
                        .setAfi(multiprotocolReachableNrli.afi)
                        .setSafi(multiprotocolReachableNrli.safi)
                        .setNextHop(address(multiprotocolReachableNrli.nextHop))
                        .build();

                attributesBuilder.setMpReachNrli(mpReachNrli);
            }

            @Override
            public void visit(final MultiprotocolUnreachableNlri multiprotocolUnreachableNlri) {
                final Transport.RouteMonitoringPacket.PathAttribute.MultiprotocolUnreachableNrli mpReachNrli = Transport.RouteMonitoringPacket.PathAttribute.MultiprotocolUnreachableNrli.newBuilder()
                        .addAllWithdrawn(multiprotocolUnreachableNlri.withdrawn.stream().map(r -> {
                            return Transport.RouteMonitoringPacket.Route.newBuilder()
                                    .setLabels(r.labels != null ? r.labels : "")
                                    .setLength(r.length)
                                    .setPathId(r.pathId)
                                    .setPrefix(address(r.prefix))
                                    .build();
                        }).collect(Collectors.toList()))
                        .addAllVpnWithdrawn(multiprotocolUnreachableNlri.vpnWithdrawn.stream().map(r -> {
                            return Transport.RouteMonitoringPacket.Route.newBuilder()
                                    .setLabels(r.labels != null ? r.labels : "")
                                    .setLength(r.length)
                                    .setPathId(r.pathId)
                                    .setPrefix(address(r.prefix))
                                    .build();
                        }).collect(Collectors.toList()))
                        .setAfi(multiprotocolUnreachableNlri.afi)
                        .setSafi(multiprotocolUnreachableNlri.safi)
                        .setNextHop(address(multiprotocolUnreachableNlri.nextHop))
                        .build();

                attributesBuilder.setMpUnreachNrli(mpReachNrli);
            }
        });
        return attributesBuilder;
    }

