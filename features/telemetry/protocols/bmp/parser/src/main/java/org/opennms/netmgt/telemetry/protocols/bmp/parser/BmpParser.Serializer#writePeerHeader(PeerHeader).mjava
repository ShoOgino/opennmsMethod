        private void writePeerHeader(final PeerHeader peerHeader) {
            this.writer.writeStartDocument("peer");

            this.writer.writeString("type", peerHeader.type.name());

            this.writer.writeInt32("ip_version", peerHeader.flags.addressVersion.map(v -> {switch(v) {
                case IP_V4: return 4;
                case IP_V6: return 6;
                default: throw new IllegalStateException();
            }}));
            this.writer.writeBoolean("post_policy", peerHeader.flags.postPolicy);
            this.writer.writeBoolean("legacy_as_path", peerHeader.flags.legacyASPath);

            this.writer.writeInt64("distinguisher", peerHeader.distinguisher.longValue());
            this.writer.writeString("address", peerHeader.address.getHostAddress());
            this.writer.writeInt64("as", peerHeader.as);
            this.writer.writeInt64("id", peerHeader.id);

            this.writer.writeStartDocument("timestamp");
            this.writer.writeInt64("epoch", peerHeader.timestamp.getEpochSecond());
            if (peerHeader.timestamp.getNano() != 0) {
                this.writer.writeInt64("nanos", peerHeader.timestamp.getNano());
            }
            this.writer.writeEndDocument();

            this.writer.writeEndDocument();
        }

