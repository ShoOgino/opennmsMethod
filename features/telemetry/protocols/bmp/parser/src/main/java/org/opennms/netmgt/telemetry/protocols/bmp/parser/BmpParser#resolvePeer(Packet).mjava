    private Function<Transport.Message.Builder, CompletableFuture<Transport.Message.Builder>> resolvePeer(final Packet packet) {
        return message -> packet.map(new Packet.Mapper.Adapter<CompletableFuture<Transport.Message.Builder>>(CompletableFuture.completedFuture(message)) {

            private CompletableFuture<Transport.Message.Builder> resolvePeer(final PeerHeader peerHeader,
                                                                             final Transport.Peer.Builder builder) {
                return BmpParser.this.dnsResolver.reverseLookup(peerHeader.address)
                        .thenApply(hostname -> {
                            hostname.ifPresent(builder::setHostname);
                            return message;
                        });
            }

            @Override
            public CompletableFuture<Transport.Message.Builder> map(final PeerUpPacket packet) {
                return resolvePeer(packet.peerHeader, message.getPeerUpBuilder().getPeerBuilder());
            }

            @Override
            public CompletableFuture<Transport.Message.Builder> map(final PeerDownPacket packet) {
                return resolvePeer(packet.peerHeader, message.getPeerDownBuilder().getPeerBuilder());
            }

            @Override
            public CompletableFuture<Transport.Message.Builder> map(final StatisticsReportPacket packet) {
                return resolvePeer(packet.peerHeader, message.getStatisticsReportBuilder().getPeerBuilder());
            }

            @Override
            public CompletableFuture<Transport.Message.Builder> map(final RouteMonitoringPacket packet) {
                return resolvePeer(packet.peerHeader, message.getRouteMonitoringBuilder().getPeerBuilder());
            }
        });
    }

