    @Override
    public Handler accept(final InetSocketAddress remoteAddress,
                          final InetSocketAddress localAddress) {
        return buffer -> {
            buffer.markReaderIndex();

            final Header header;
            if (buffer.isReadable(Header.SIZE)) {
                header = new Header(slice(buffer, Header.SIZE));
            } else {
                buffer.resetReaderIndex();
                return Optional.empty();
            }

            final Packet packet;
            if (buffer.isReadable(header.payloadLength())) {
                packet = header.parsePayload(slice(buffer, header.payloadLength()));
            } else {
                buffer.resetReaderIndex();
                return Optional.empty();
            }

            LOG.trace("Got packet: {}", packet);

            final Transport.Message.Builder message = Transport.Message.newBuilder()
                                                                       .setVersion(header.version);

            packet.accept(new Serializer(message));

            final CompletableFuture<AsyncDispatcher.DispatchStatus> dispatched = dispatcher.send(new TelemetryMessage(remoteAddress, ByteBuffer.wrap(message.build().toByteArray())));
            this.recordsDispatched.mark();

            return Optional.of(dispatched);
        };
    }

