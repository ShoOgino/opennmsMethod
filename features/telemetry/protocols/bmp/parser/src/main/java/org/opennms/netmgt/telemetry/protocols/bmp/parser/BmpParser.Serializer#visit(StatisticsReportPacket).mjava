        @Override
        public void visit(final StatisticsReportPacket packet) {
            this.writePeerHeader(packet.peerHeader);

            for (final StatisticsReportPacket.Element statistic : packet.statistics) {
                statistic.value.accept(new Metric.Visitor() {
                    @Override
                    public void visit(final DuplicatePrefix duplicatePrefix) {
                        this.writeCounter("duplicate_prefix", duplicatePrefix.counter);
                    }

                    @Override
                    public void visit(final DuplicateWithdraws duplicateWithdraws) {
                        this.writeCounter("duplicate_withdraws", duplicateWithdraws.counter);
                    }

                    @Override
                    public void visit(final AdjRibIn adjRibIn) {
                        this.writeGauge("adj_rib_in", adjRibIn.gauge);
                    }

                    @Override
                    public void visit(final AdjRibOut adjRibOut) {
                        this.writeGauge("adj_rib_out", adjRibOut.gauge);
                    }

                    @Override
                    public void visit(final ExportRib exportRib) {
                        this.writeGauge("export_rib", exportRib.gauge);
                    }

                    @Override
                    public void visit(final InvalidUpdateDueToAsConfedLoop invalidUpdateDueToAsConfedLoop) {
                        this.writeCounter("invalid_update_due_to_as_confed_loop", invalidUpdateDueToAsConfedLoop.counter);
                    }

                    @Override
                    public void visit(final InvalidUpdateDueToAsPathLoop invalidUpdateDueToAsPathLoop) {
                        this.writeCounter("invalid_update_due_to_as_path_loop", invalidUpdateDueToAsPathLoop.counter);
                    }

                    @Override
                    public void visit(final InvalidUpdateDueToClusterListLoop invalidUpdateDueToClusterListLoop) {
                        this.writeCounter("invalid_update_due_to_cluster_list_loop", invalidUpdateDueToClusterListLoop.counter);
                    }

                    @Override
                    public void visit(final InvalidUpdateDueToOriginatorId invalidUpdateDueToOriginatorId) {
                        this.writeCounter("invalid_update_due_to_originator_id", invalidUpdateDueToOriginatorId.counter);
                    }

                    @Override
                    public void visit(final PerAfiAdjRibIn perAfiAdjRibIn) {
                        final String name = new StringJoiner(":")
                                .add("per_afi_adj_rib_in")
                                .add(Integer.toString(perAfiAdjRibIn.afi))
                                .add(Integer.toString(perAfiAdjRibIn.safi))
                                .toString();
                        this.writeGauge(name, perAfiAdjRibIn.gauge);
                    }

                    @Override
                    public void visit(final PerAfiLocRib perAfiLocRib) {
                        final String name = new StringJoiner(":")
                            .add("per_afi_loc_rib")
                                .add(Integer.toString(perAfiLocRib.afi))
                                .add(Integer.toString(perAfiLocRib.safi))
                                .toString();
                        this.writeGauge(name, perAfiLocRib.gauge);
                    }

                    @Override
                    public void visit(final PrefixTreatAsWithdraw prefixTreatAsWithdraw) {
                        this.writeCounter("prefix_treat_as_withdraw", prefixTreatAsWithdraw.counter);
                    }

                    @Override
                    public void visit(final UpdateTreatAsWithdraw updateTreatAsWithdraw) {
                        this.writeCounter("update_treat_as_withdraw", updateTreatAsWithdraw.counter);
                    }

                    @Override
                    public void visit(final LocRib locRib) {
                        this.writeGauge("loc_rib", locRib.gauge);
                    }

                    @Override
                    public void visit(final DuplicateUpdate duplicateUpdate) {
                        this.writeCounter("duplicate_update", duplicateUpdate.counter);
                    }

                    @Override
                    public void visit(final Rejected rejected) {
                        this.writeCounter("rejected", rejected.counter);
                    }

                    private void writeCounter(final String name, final long counter) {
                        Serializer.this.writer.writeStartDocument(name);
                        Serializer.this.writer.writeInt64("counter", counter);
                        Serializer.this.writer.writeEndDocument();
                    }

                    private void writeGauge(final String name, final UnsignedLong gauge) {
                        Serializer.this.writer.writeStartDocument(name);
                        Serializer.this.writer.writeInt64("gauge", gauge.longValue());
                        Serializer.this.writer.writeEndDocument();
                    }
                });
            }
        }

