        @Override
        public void visit(final StatisticsReportPacket packet) {
            this.writePeerHeader(packet.peerHeader);

            this.writer.writeStartDocument("stats");
            for (final StatisticsReportPacket.Element statistic : packet.statistics) {
                statistic.value.accept(new Metric.Visitor() {
                    @Override
                    public void visit(final DuplicatePrefix duplicatePrefix) {
                        this.writeCounter(BmpParser.METRIC_DUPLICATE_PREFIX, duplicatePrefix.counter);
                    }

                    @Override
                    public void visit(final DuplicateWithdraw duplicateWithdraw) {
                        this.writeCounter(BmpParser.METRIC_DUPLICATE_WITHDRAW, duplicateWithdraw.counter);
                    }

                    @Override
                    public void visit(final AdjRibIn adjRibIn) {
                        this.writeGauge(BmpParser.METRIC_ADJ_RIB_IN, adjRibIn.gauge);
                    }

                    @Override
                    public void visit(final AdjRibOut adjRibOut) {
                        this.writeGauge(BmpParser.METRIC_ADJ_RIB_OUT, adjRibOut.gauge);
                    }

                    @Override
                    public void visit(final ExportRib exportRib) {
                        this.writeGauge(BmpParser.METRIC_EXPORT_RIB, exportRib.gauge);
                    }

                    @Override
                    public void visit(final InvalidUpdateDueToAsConfedLoop invalidUpdateDueToAsConfedLoop) {
                        this.writeCounter(BmpParser.METRIC_INVALID_UPDATE_DUE_TO_AS_CONFED_LOOP, invalidUpdateDueToAsConfedLoop.counter);
                    }

                    @Override
                    public void visit(final InvalidUpdateDueToAsPathLoop invalidUpdateDueToAsPathLoop) {
                        this.writeCounter(BmpParser.METRIC_INVALID_UPDATE_DUE_TO_AS_PATH_LOOP, invalidUpdateDueToAsPathLoop.counter);
                    }

                    @Override
                    public void visit(final InvalidUpdateDueToClusterListLoop invalidUpdateDueToClusterListLoop) {
                        this.writeCounter(BmpParser.METRIC_INVALID_UPDATE_DUE_TO_CLUSTER_LIST_LOOP, invalidUpdateDueToClusterListLoop.counter);
                    }

                    @Override
                    public void visit(final InvalidUpdateDueToOriginatorId invalidUpdateDueToOriginatorId) {
                        this.writeCounter(BmpParser.METRIC_INVALID_UPDATE_DUE_TO_ORIGINATOR_ID, invalidUpdateDueToOriginatorId.counter);
                    }

                    @Override
                    public void visit(final PerAfiAdjRibIn perAfiAdjRibIn) {
                        final String name = new StringJoiner(":")
                                .add(BmpParser.METRIC_PER_AFI_ADJ_RIB_IN)
                                .add(Integer.toString(perAfiAdjRibIn.afi))
                                .add(Integer.toString(perAfiAdjRibIn.safi))
                                .toString();
                        this.writeGauge(name, perAfiAdjRibIn.gauge);
                    }

                    @Override
                    public void visit(final PerAfiLocRib perAfiLocRib) {
                        final String name = new StringJoiner(":")
                            .add(BmpParser.METRIC_PER_AFI_LOC_RIB)
                                .add(Integer.toString(perAfiLocRib.afi))
                                .add(Integer.toString(perAfiLocRib.safi))
                                .toString();
                        this.writeGauge(name, perAfiLocRib.gauge);
                    }

                    @Override
                    public void visit(final PrefixTreatAsWithdraw prefixTreatAsWithdraw) {
                        this.writeCounter(BmpParser.METRIC_PREFIX_TREAT_AS_WITHDRAW, prefixTreatAsWithdraw.counter);
                    }

                    @Override
                    public void visit(final UpdateTreatAsWithdraw updateTreatAsWithdraw) {
                        this.writeCounter(BmpParser.METRIC_UPDATE_TREAT_AS_WITHDRAW, updateTreatAsWithdraw.counter);
                    }

                    @Override
                    public void visit(final LocRib locRib) {
                        this.writeGauge(BmpParser.METRIC_LOC_RIB, locRib.gauge);
                    }

                    @Override
                    public void visit(final DuplicateUpdate duplicateUpdate) {
                        this.writeCounter(BmpParser.METRIC_DUPLICATE_UPDATE, duplicateUpdate.counter);
                    }

                    @Override
                    public void visit(final Rejected rejected) {
                        this.writeCounter(BmpParser.METRIC_REJECTED, rejected.counter);
                    }

                    private void writeCounter(final String name, final long counter) {
                        Serializer.this.writer.writeStartDocument(name);
                        Serializer.this.writer.writeInt64("counter", counter);
                        Serializer.this.writer.writeEndDocument();
                    }

                    private void writeGauge(final String name, final UnsignedLong gauge) {
                        Serializer.this.writer.writeStartDocument(name);
                        Serializer.this.writer.writeInt64("gauge", gauge.longValue());
                        Serializer.this.writer.writeEndDocument();
                    }
                });
            }
            this.writer.writeEndDocument();
        }

