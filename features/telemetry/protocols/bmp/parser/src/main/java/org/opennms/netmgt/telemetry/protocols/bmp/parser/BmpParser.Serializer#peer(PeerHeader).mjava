        private static Transport.Peer peer(final PeerHeader peerHeader) {
            final Transport.Peer.Builder peer = Transport.Peer.newBuilder();

            peer.setType(peerHeader.type.map(v -> {
                switch (v) {
                    case GLOBAL_INSTANCE:
                        return Transport.Peer.Type.GLOBAL_INSTANCE;
                    case RD_INSTANCE:
                        return Transport.Peer.Type.RD_INSTANCE;
                    case LOCAL_INSTANCE:
                        return Transport.Peer.Type.LOCAL_INSTANCE;
                    default:
                        throw new IllegalStateException();
                }
            }));

            if (peerHeader.type == PeerHeader.Type.LOC_RIB_INSTANCE) {
                final Transport.Peer.LocRibFlags.Builder locRibFlags = peer.getLocRibFlagsBuilder();
                locRibFlags.setFiltered(peerHeader.locRibFlags.filtered);
                peer.setLocRibFlags(locRibFlags.build());
            } else {
                final Transport.Peer.PeerFlags.Builder peerFlags = peer.getPeerFlagsBuilder();
                peerFlags.setIpVersion(peerHeader.flags.addressVersion.map(v -> {
                    switch (v) {
                        case IP_V4:
                            return Transport.Peer.PeerFlags.IpVersion.IP_V4;
                        case IP_V6:
                            return Transport.Peer.PeerFlags.IpVersion.IP_V6;
                        default:
                            throw new IllegalStateException();
                    }
                }));
                peerFlags.setPolicy(peerHeader.flags.policy.map(v -> {
                    switch (v) {
                        case PRE_POLICY:
                            return Transport.Peer.PeerFlags.Policy.PRE_POLICY;
                        case POST_POLICY:
                            return Transport.Peer.PeerFlags.Policy.POST_POLICY;
                        default:
                            throw new IllegalStateException();
                    }
                }));
                peerFlags.setLegacyAsPath(peerHeader.flags.legacyASPath);
                peerFlags.setAdjIn(peerHeader.flags.adjIn);
                peer.setPeerFlags(peerFlags.build());
            }

            peer.setDistinguisher(peerHeader.distinguisher.longValue());
            peer.setAddress(address(peerHeader.address));
            peer.setAs((int) peerHeader.as);
            peer.setId(address(peerHeader.id));

            peer.getTimestampBuilder()
                .setSeconds(peerHeader.timestamp.getEpochSecond())
                .setNanos(peerHeader.timestamp.getNano());

            return peer.build();
        }

