        @Override
        public void visit(final PeerUpPacket packet) {
            this.writePeerHeader(packet.peerHeader);

            this.writer.writeString("local_address", packet.localAddress.getHostAddress());
            this.writer.writeInt64("local_port", packet.localPort);
            this.writer.writeInt64("remote_port", packet.remotePort);

            this.writer.writeStartDocument("send_open_msg");
            this.writer.writeInt64("version", packet.sendOpenMessage.version);
            this.writer.writeInt64("as", packet.sendOpenMessage.as);
            this.writer.writeInt64("holdTime", packet.sendOpenMessage.holdTime);
            this.writer.writeInt64("id", packet.sendOpenMessage.id);
            this.writer.writeEndDocument();

            this.writer.writeStartDocument("recv_open_msg");
            this.writer.writeInt64("version", packet.recvOpenMessage.version);
            this.writer.writeInt64("as", packet.recvOpenMessage.as);
            this.writer.writeInt64("holdTime", packet.recvOpenMessage.holdTime);
            this.writer.writeInt64("id", packet.recvOpenMessage.id);
            this.writer.writeEndDocument();

            packet.information.first(InformationElement.Type.SYS_NAME)
                    .ifPresent(v -> this.writer.writeString("sys_name", v));

            final String sysDescr = packet.information.all(InformationElement.Type.SYS_DESCR)
                    .collect(Collectors.joining("\n"));
            if (!sysDescr.isEmpty()) {
                this.writer.writeString("sys_desc", sysDescr);
            }

            final String message = packet.information.all(InformationElement.Type.STRING)
                    .collect(Collectors.joining("\n"));
            if (!message.isEmpty()) {
                this.writer.writeString("message", message);
            }
        }

