        @Override
        public void visit(final PeerUpPacket packet) {
            final Transport.PeerUpPacket.Builder message = this.message.getPeerUpBuilder();
            message.setPeer(peer(packet.peerHeader));

            message.setLocalAddress(address(packet.localAddress));
            message.setLocalPort(packet.localPort);
            message.setRemotePort(packet.remotePort);

            Transport.PeerUpPacket.CapabilityList.Builder sendCapabilitiesBuilder = Transport.PeerUpPacket.CapabilityList.newBuilder();
            packet.sendOpenMessage.ifPresent(sendOpenMessage -> {
                for (final Capability capability : sendOpenMessage.capabilities) {
                    sendCapabilitiesBuilder.addCapability(Transport.PeerUpPacket.Capability.newBuilder()
                                                                                           .setCode(capability.getCode())
                                                                                           .setLength(capability.getLength())
                                                                                           .setValue(capability.getValue())
                                                                                           .build());
                }

                message.getSendMsgBuilder()
                       .setVersion(sendOpenMessage.version)
                       .setAs(sendOpenMessage.as)
                       .setHoldTime(sendOpenMessage.holdTime)
                       .setId(address(sendOpenMessage.id))
                       .setCapabilities(sendCapabilitiesBuilder.build());
            });

            packet.recvOpenMessage.ifPresent(recvOpenMessage -> {
            Transport.PeerUpPacket.CapabilityList.Builder recvCapabilitiesBuilder = Transport.PeerUpPacket.CapabilityList.newBuilder();
                for (final Capability capability : recvOpenMessage.capabilities) {
                    recvCapabilitiesBuilder.addCapability(Transport.PeerUpPacket.Capability.newBuilder()
                            .setCode(capability.getCode())
                            .setLength(capability.getLength())
                            .setValue(capability.getValue())
                            .build());
                }

                message.getRecvMsgBuilder()
                        .setVersion(recvOpenMessage.version)
                        .setAs(recvOpenMessage.as)
                        .setHoldTime(recvOpenMessage.holdTime)
                        .setId(address(recvOpenMessage.id))
                        .setCapabilities(recvCapabilitiesBuilder.build());
            });

            message.setSysName(packet.information.first(InformationElement.Type.SYS_NAME)
                    .orElse(""));
            message.setTableName(packet.information.first(InformationElement.Type.VRF_TABLE_NAME)
                    .orElse(""));
            message.setSysDesc(packet.information.all(InformationElement.Type.SYS_DESCR)
                    .collect(Collectors.joining("\n")));
            message.setMessage(packet.information.all(InformationElement.Type.STRING)
                    .collect(Collectors.joining("\n")));
        }

