    default Optional<PeerHeader> getPeerHeader() {
        return this.map(new Mapper<Optional<PeerHeader>>() {

            @Override
            public Optional<PeerHeader> map(final InitiationPacket packet) {
                return Optional.empty();
            }

            @Override
            public Optional<PeerHeader> map(final TerminationPacket packet) {
                return Optional.empty();
            }

            @Override
            public Optional<PeerHeader> map(final PeerUpPacket packet) {
                return Optional.of(packet.peerHeader);
            }

            @Override
            public Optional<PeerHeader> map(final PeerDownPacket packet) {
                return Optional.of(packet.peerHeader);
            }

            @Override
            public Optional<PeerHeader> map(final StatisticsReportPacket packet) {
                return Optional.of(packet.peerHeader);
            }

            @Override
            public Optional<PeerHeader> map(final RouteMonitoringPacket packet) {
                return Optional.of(packet.peerHeader);
            }

            @Override
            public Optional<PeerHeader> map(final RouteMirroringPacket packet) {
                return Optional.of(packet.peerHeader);
            }

            @Override
            public Optional<PeerHeader> map(final UnknownPacket packet) {
                return Optional.empty();
            }
        });
    }

