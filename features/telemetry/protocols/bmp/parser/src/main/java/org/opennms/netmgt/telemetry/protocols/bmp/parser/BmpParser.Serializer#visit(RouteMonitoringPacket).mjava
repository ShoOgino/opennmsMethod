        @Override
        public void visit(final RouteMonitoringPacket packet) {
            final Transport.RouteMonitoringPacket.Builder message = this.message.getRouteMonitoringBuilder();
            message.setPeer(peer(packet.peerHeader));

            for (final UpdatePacket.Prefix prefix : packet.updateMessage.withdrawRoutes) {
                message.addWithdrawBuilder()
                       .setPrefix(address(prefix.prefix))
                       .setLength(prefix.length);
            }

            for (final UpdatePacket.Prefix prefix : packet.updateMessage.reachableRoutes) {
                message.addReachableBuilder()
                       .setPrefix(address(prefix.prefix))
                       .setLength(prefix.length);
            }

            for (final UpdatePacket.PathAttribute attribute : packet.updateMessage.pathAttributes) {
                final Transport.RouteMonitoringPacket.PathAttribute.Builder attributesBuilder = message.addAttributesBuilder();
                attributesBuilder.setOptional(attribute.optional)
                                 .setTransitive(attribute.transitive)
                                 .setPartial(attribute.partial)
                                 .setExtended(attribute.extended);

                attribute.attribute.accept(new Attribute.Visitor() {
                    @Override
                    public void visit(final Aggregator aggregator) {
                        attributesBuilder.getAggregatorBuilder()
                                         .setAs(aggregator.as)
                                         .setAddress(address(aggregator.address));
                    }

                    @Override
                    public void visit(final AsPath asPath) {
                        final Transport.RouteMonitoringPacket.PathAttribute.AsPath.Builder asPathBuilder = attributesBuilder.getAsPathBuilder();
                        for (final AsPath.Segment segment : asPath.segments) {
                            final Transport.RouteMonitoringPacket.PathAttribute.AsPath.Segment.Builder segmentBuilder = asPathBuilder.addSegmentsBuilder();
                            segmentBuilder.setType(segment.type.map(t -> {
                                switch (t) {
                                    case AS_SET:
                                        return Transport.RouteMonitoringPacket.PathAttribute.AsPath.Segment.Type.AS_SET;
                                    case AS_SEQUENCE:
                                        return Transport.RouteMonitoringPacket.PathAttribute.AsPath.Segment.Type.AS_SEQUENCE;
                                    default:
                                        throw new IllegalStateException();
                                }
                            }));
                            for (final long as : segment.path) {
                                segmentBuilder.addPath((int) as);
                            }
                        }
                    }

                    @Override
                    public void visit(final AtomicAggregate atomicAggregate) {
                        attributesBuilder.getAtomicAggregateBuilder();
                    }

                    @Override
                    public void visit(final LocalPref localPref) {
                        attributesBuilder.getLocalPrefBuilder()
                                         .setPreference((int) localPref.preference);
                    }

                    @Override
                    public void visit(final MultiExistDisc multiExistDisc) {
                        attributesBuilder.getMultiExitDiscBuilder()
                                         .setDiscriminator((int) multiExistDisc.discriminator);
                    }

                    @Override
                    public void visit(final NextHop nextHop) {
                        attributesBuilder.getNextHopBuilder()
                                         .setAddress(address(nextHop.address));
                    }

                    @Override
                    public void visit(final Origin origin) {
                        attributesBuilder.setOrigin(origin.value.map(v -> {
                            switch (v) {
                                case IGP:
                                    return Transport.RouteMonitoringPacket.PathAttribute.Origin.IGP;
                                case EGP:
                                    return Transport.RouteMonitoringPacket.PathAttribute.Origin.EGP;
                                case INCOMPLETE:
                                    return Transport.RouteMonitoringPacket.PathAttribute.Origin.INCOMPLETE;
                                default:
                                    throw new IllegalStateException();
                            }
                        }));
                    }
                });
            }
        }

