        @Override
        public void visit(final RouteMonitoringPacket packet) {
            this.writePeerHeader(packet.peerHeader);

            this.writer.writeStartArray("withdraw");
            for (final UpdatePacket.Prefix prefix : packet.updateMessage.withdrawRoutes) {
                this.writer.writeStartDocument();
                this.writer.writeInt64("length", prefix.length);
                this.writer.writeString("prefix", prefix.prefix.getHostAddress());
                this.writer.writeEndDocument();
            }
            this.writer.writeEndArray();

            this.writer.writeStartArray("reachable");
            for (final UpdatePacket.Prefix prefix : packet.updateMessage.reachableRoutes) {
                this.writer.writeStartDocument();
                this.writer.writeInt64("length", prefix.length);
                this.writer.writeString("prefix", prefix.prefix.getHostAddress());
                this.writer.writeEndDocument();
            }
            this.writer.writeEndArray();

            this.writer.writeStartArray("path_attributes");
            for (final UpdatePacket.PathAttribute attribute : packet.updateMessage.pathAttributes) {
                this.writer.writeStartDocument();
                this.writer.writeBoolean("optional", attribute.optional);
                this.writer.writeBoolean("transitive", attribute.transitive);
                this.writer.writeBoolean("partial", attribute.partial);
                this.writer.writeBoolean("extended", attribute.extended);

                this.writer.writeString("type", attribute.type.name());

                attribute.attribute.accept(new Attribute.Visitor() {
                    @Override
                    public void visit(final Aggregator aggregator) {
                        Serializer.this.writer.writeInt64("as", aggregator.as);
                        Serializer.this.writer.writeString("address", aggregator.address.getHostAddress());
                    }

                    @Override
                    public void visit(final AsPath asPath) {
                        Serializer.this.writer.writeStartArray("segments");
                        for (final AsPath.Segment segment : asPath.segments) {
                            Serializer.this.writer.writeStartDocument();
                            Serializer.this.writer.writeString("type", segment.type.name());
                            Serializer.this.writer.writeStartArray("path");
                            for (final long as : segment.path) {
                                Serializer.this.writer.writeInt64(as);
                            }
                            Serializer.this.writer.writeEndArray();
                            Serializer.this.writer.writeEndDocument();
                        }
                        Serializer.this.writer.writeEndArray();
                    }

                    @Override
                    public void visit(final AtomicAggregate atomicAggregate) {
                        // No data
                    }

                    @Override
                    public void visit(final LocalPref localPref) {
                        Serializer.this.writer.writeInt64("preference", localPref.preference);
                    }

                    @Override
                    public void visit(final MultiExistDisc multiExistDisc) {
                        Serializer.this.writer.writeInt64("discriminator", multiExistDisc.discriminator);
                    }

                    @Override
                    public void visit(final NextHop nextHop) {
                        Serializer.this.writer.writeString("address", nextHop.address.getHostAddress());
                    }

                    @Override
                    public void visit(final Origin origin) {
                        Serializer.this.writer.writeString("value", origin.value.name());
                    }
                });

                this.writer.writeEndDocument();
            }
            this.writer.writeEndArray();
        }

