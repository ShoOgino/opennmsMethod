      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + OPTIONAL_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getOptional());
        hash = (37 * hash) + TRANSITIVE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getTransitive());
        hash = (37 * hash) + PARTIAL_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getPartial());
        hash = (37 * hash) + EXTENDED_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getExtended());
        switch (valueCase_) {
          case 5:
            hash = (37 * hash) + ORIGIN_FIELD_NUMBER;
            hash = (53 * hash) + getOriginValue();
            break;
          case 6:
            hash = (37 * hash) + ASPATH_FIELD_NUMBER;
            hash = (53 * hash) + getAsPath().hashCode();
            break;
          case 7:
            hash = (37 * hash) + NEXTHOP_FIELD_NUMBER;
            hash = (53 * hash) + getNextHop().hashCode();
            break;
          case 8:
            hash = (37 * hash) + MULTIEXITDISC_FIELD_NUMBER;
            hash = (53 * hash) + getMultiExitDisc().hashCode();
            break;
          case 9:
            hash = (37 * hash) + LOCALPREF_FIELD_NUMBER;
            hash = (53 * hash) + getLocalPref().hashCode();
            break;
          case 10:
            hash = (37 * hash) + ATOMICAGGREGATE_FIELD_NUMBER;
            hash = (53 * hash) + getAtomicAggregate().hashCode();
            break;
          case 11:
            hash = (37 * hash) + AGGREGATOR_FIELD_NUMBER;
            hash = (53 * hash) + getAggregator().hashCode();
            break;
          case 0:
          default:
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

