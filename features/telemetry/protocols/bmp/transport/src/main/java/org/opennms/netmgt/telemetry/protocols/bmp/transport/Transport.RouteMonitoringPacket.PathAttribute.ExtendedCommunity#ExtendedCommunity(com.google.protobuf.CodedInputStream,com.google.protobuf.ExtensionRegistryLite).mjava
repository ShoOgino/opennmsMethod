        private ExtendedCommunity(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          this();
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          com.google.protobuf.UnknownFieldSet.Builder unknownFields =
              com.google.protobuf.UnknownFieldSet.newBuilder();
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 8: {

                  highType_ = input.readUInt32();
                  break;
                }
                case 16: {

                  lowType_ = input.readUInt32();
                  break;
                }
                case 24: {

                  authoritative_ = input.readBool();
                  break;
                }
                case 32: {

                  transitive_ = input.readBool();
                  break;
                }
                case 42: {
                  java.lang.String s = input.readStringRequireUtf8();

                  type_ = s;
                  break;
                }
                case 50: {
                  java.lang.String s = input.readStringRequireUtf8();

                  value_ = s;
                  break;
                }
                default: {
                  if (!parseUnknownField(
                      input, unknownFields, extensionRegistry, tag)) {
                    done = true;
                  }
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(
                e).setUnfinishedMessage(this);
          } finally {
            this.unknownFields = unknownFields.build();
            makeExtensionsImmutable();
          }
        }

