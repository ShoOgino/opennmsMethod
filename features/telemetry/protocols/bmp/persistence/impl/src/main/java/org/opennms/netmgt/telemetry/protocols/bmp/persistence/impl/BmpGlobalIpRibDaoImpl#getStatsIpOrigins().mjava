    @Override
    public List<StatsIpOrigins> getStatsIpOrigins() {
        return getHibernateTemplate().execute(session -> (List<StatsIpOrigins>) session.createSQLQuery(
                "SELECT to_timestamp((cast((extract(epoch from now())) as bigint)/900)*900)," +
                        " recv_origin_as," +
                        " sum(case when family(inet(prefix)) = 4 THEN 1 ELSE 0 END) as v4_prefixes, " +
                        " sum(case when family(inet(prefix)) = 6 THEN 1 ELSE 0 END) as v6_prefixes, " +
                        " sum(case when rpki_origin_as > 0 and family(inet(prefix)) = 4 THEN 1 ELSE 0 END) as v4_with_rpki," +
                        " sum(case when rpki_origin_as > 0 and family(inet(prefix)) = 6 THEN 1 ELSE 0 END) as v6_with_rpki," +
                        " sum(case when irr_origin_as > 0 and family(inet(prefix)) = 4 THEN 1 ELSE 0 END) as v4_with_irr," +
                        " sum(case when irr_origin_as > 0 and family(inet(prefix)) = 6 THEN 1 ELSE 0 END) as v6_with_irr" +
                        " FROM bmp_global_ip_ribs " +
                        " GROUP BY recv_origin_as "
        ).setResultTransformer(new ResultTransformer() {
            @Override
            public Object transformTuple(Object[] tuple, String[] aliases) {
                return new StatsIpOrigins((Date) tuple[0], (BigInteger) tuple[1],
                        (BigInteger) tuple[2], (BigInteger) tuple[3], (BigInteger) tuple[4], (BigInteger) tuple[5], (BigInteger) tuple[6], (BigInteger) tuple[7]);
            }

            @SuppressWarnings("rawtypes")
            @Override
            public List transformList(List collection) {
                return collection;
            }
        }).list());
    }

