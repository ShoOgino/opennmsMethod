    public static void handleBmpMessage(TelemetryMessageLogEntry messageLogEntry, TelemetryMessageLog messageLog,
                                        BmpMessageHandler messageHandler, final AtomicLong sequence) {
        LOG.trace("Parsing packet: {}", messageLogEntry);
        final Transport.Message message;
        try {
            message = Transport.Message.parseFrom(messageLogEntry.getByteArray());
        } catch (final InvalidProtocolBufferException e) {
            LOG.error("Invalid message", e);
            return;
        }

        final String collectorHashId = Record.hash(messageLog.getSystemId());
        final String routerHashId = Record.hash(messageLog.getSourceAddress());
        final Context context = new Context(messageLog.getSystemId(),
                collectorHashId,
                routerHashId,
                Instant.ofEpochMilli(messageLogEntry.getTimestamp()),
                InetAddressUtils.addr(messageLog.getSourceAddress()),
                messageLog.getSourcePort(), messageLog.getLocation());

        switch(message.getPacketCase()) {
            case HEARTBEAT:
                handleHeartbeatMessage(messageHandler, message, message.getHeartbeat(), context, sequence);
                break;
            case INITIATION:
                handleInitiationMessage(messageHandler, message, message.getInitiation(), context, sequence);
                break;
            case TERMINATION:
                handleTerminationMessage(messageHandler, message, message.getTermination(), context, sequence);
                break;
            case PEER_UP:
                handlePeerUpNotification(messageHandler, message, message.getPeerUp(), context, sequence);
                break;
            case PEER_DOWN:
                handlePeerDownNotification(messageHandler, message, message.getPeerDown(), context, sequence);
                break;
            case STATISTICS_REPORT:
                handleStatisticReport(messageHandler, message, message.getStatisticsReport(), context, sequence);
                break;
            case ROUTE_MONITORING:
                handleRouteMonitoringMessage(messageHandler, message, message.getRouteMonitoring(), context, sequence);
                break;
            case PACKET_NOT_SET:
                break;
        }

    }

