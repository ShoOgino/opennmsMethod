    private UnicastPrefix toUnicastPrefixRecord(final Transport.RouteMonitoringPacket routeMonitoring,
                                                final Transport.RouteMonitoringPacket.Route route,
                                                final BaseAttribute baseAttr,
                                                final Context context) {
        final Transport.Peer peer = routeMonitoring.getPeer();

        final UnicastPrefix unicastPrefix = new UnicastPrefix();
        unicastPrefix.sequence = this.sequence.incrementAndGet();
        unicastPrefix.routerHash = context.getRouterHash();
        unicastPrefix.routerIp = context.sourceAddress;
        unicastPrefix.peerHash = Record.hash(peer.getAddress(), peer.getDistinguisher(), unicastPrefix.routerHash);
        unicastPrefix.peerIp = address(peer.getAddress());
        unicastPrefix.peerAsn = uint32(peer.getAs());
        unicastPrefix.timestamp = context.timestamp;
        unicastPrefix.prefix = address(route.getPrefix());
        unicastPrefix.length = route.getLength();
        unicastPrefix.ipv4 = isV4(route.getPrefix());
        // TODO: Populate path id and labels attributes - see NMS-12560
        unicastPrefix.pathId = 0;
        unicastPrefix.labels = null;
        unicastPrefix.prePolicy = Transport.Peer.Flags.Policy.PRE_POLICY.equals(peer.getFlags().getPolicy());
        unicastPrefix.adjIn = peer.getFlags().getAdjIn();

        // Augment with base attributes if present
        if (baseAttr != null) {
            unicastPrefix.baseAttrHash = baseAttr.hash;
            unicastPrefix.origin = baseAttr.origin;
            unicastPrefix.asPath = baseAttr.asPath;
            unicastPrefix.asPathCount = baseAttr.asPathCount;
            unicastPrefix.originAs = baseAttr.originAs;
            unicastPrefix.nextHop = baseAttr.nextHop;
            unicastPrefix.med = baseAttr.med;
            unicastPrefix.localPref = baseAttr.localPref;
            unicastPrefix.aggregator = baseAttr.aggregator;
            unicastPrefix.communityList = baseAttr.communityList;
            unicastPrefix.extCommunityList = baseAttr.extCommunityList;
            unicastPrefix.clusterList = baseAttr.clusterList;
            unicastPrefix.atomicAgg = baseAttr.atomicAgg;
            unicastPrefix.nextHopIpv4 = baseAttr.nextHopIpv4;
            unicastPrefix.originatorId = baseAttr.originatorId;
            unicastPrefix.largeCommunityList = baseAttr.largeCommunityList;
        }

        //  Hash of fields [ prefix, prefix length, peer hash, path_id, 1 if has label(s) ]
        unicastPrefix.hash = Record.hash(InetAddressUtils.str(unicastPrefix.prefix),
                                         Integer.toString(unicastPrefix.length),
                                         unicastPrefix.peerHash,
                                         Integer.toString(unicastPrefix.pathId),
                                         Strings.isNullOrEmpty(unicastPrefix.labels) ? "0" : "1");

        return unicastPrefix;
    }

