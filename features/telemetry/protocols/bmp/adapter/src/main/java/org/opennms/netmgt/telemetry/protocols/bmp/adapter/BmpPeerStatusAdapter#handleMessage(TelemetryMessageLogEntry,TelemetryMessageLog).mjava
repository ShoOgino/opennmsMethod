    @Override
    public void handleMessage(final TelemetryMessageLogEntry messageLogEntry,
                              final TelemetryMessageLog messageLog) {
        LOG.trace("Parsing packet: {}", messageLogEntry);
        final Transport.Message message;
        try {
            message = Transport.Message.parseFrom(messageLogEntry.getByteArray());
        } catch (final InvalidProtocolBufferException e) {
            LOG.error("Invalid message", e);
            return;
        }

        // This adapter only cares about peer up/down packets
        final Transport.PeerUpPacket peerUp = message.hasPeerUp() ? message.getPeerUp() : null;
        final Transport.PeerDownPacket peerDown = message.hasPeerDown() ? message.getPeerDown() : null;
        if (peerUp == null && peerDown == null) {
            return;
        }

        // Find the node for the router who has exported the peer status notification
        final InetAddress exporterAddress = InetAddressUtils.getInetAddress(messageLog.getSourceAddress());
        final Optional<Integer> exporterNodeId = this.interfaceToNodeCache.getFirstNodeId(messageLog.getLocation(), exporterAddress);
        if (!exporterNodeId.isPresent()) {
            LOG.warn("Unable to find node for exporter: {}", exporterAddress);
            return;
        }

        final String uei = peerUp != null
                           ? EventConstants.BMP_PEER_UP
                           : EventConstants.BMP_PEER_DOWN;

        final Transport.Peer peer = peerUp != null
                                    ? peerUp.getPeer()
                                    : peerDown.getPeer();

        final Instant timestamp = Instant.ofEpochSecond(peer.getTimestamp().getSeconds(), peer.getTimestamp().getNanos());

        final EventBuilder event = new EventBuilder(uei, "telemetryd:" + this.adapterConfig.getName(), Date.from(timestamp));
        event.setNodeid(exporterNodeId.get());
        event.setInterface(exporterAddress);

        // Extract peer details
        event.addParam("distinguisher", peer.getDistinguisher());
        event.addParam("address", InetAddressUtils.str(address(peer.getAddress())));
        event.addParam("as", Long.toString(peer.getAs()));
        event.addParam("id", InetAddressUtils.str(address(peer.getId())));

        // Extract error details
        if (peerDown != null) {
            switch (peerDown.getReasonCase()) {
                case LOCAL_BGP_NOTIFICATION:
                    event.addParam("error", "Local disconnect: " + peerDown.getLocalBgpNotification());
                    break;

                case LOCAL_NO_NOTIFICATION:
                    event.addParam("error", "Local disconnect without notification: code = " + peerDown.getLocalNoNotification());
                    break;

                case REMOTE_BGP_NOTIFICATION:
                    event.addParam("error", "Remote disconnect: " + peerDown.getRemoteBgpNotification());
                    break;

                case REMOTE_NO_NOTIFICATION:
                    event.addParam("error", "Remote disconnect without notification");
                    break;
            }
        }

        this.eventForwarder.sendNow(event.getEvent());
    }

