    private void handleRouteMonitoringMessage(final Transport.Message message,
                                              final Transport.RouteMonitoringPacket routeMonitoring,
                                              final Context context) {
        final List<Record> unicastPrefixRecords = new ArrayList<>(routeMonitoring.getWithdrawsCount() + routeMonitoring.getReachablesCount());

        // Handle withdraws
        for (org.opennms.netmgt.telemetry.protocols.bmp.transport.Transport.RouteMonitoringPacket.Route route : routeMonitoring.getWithdrawsList()) {
            final UnicastPrefix unicastPrefix = toUnicastPrefixRecord(routeMonitoring, route, null, context);
            unicastPrefix.action = UnicastPrefix.Action.DELETE;

            unicastPrefixRecords.add(unicastPrefix);
        }

        final BaseAttribute baseAttr;
        if (routeMonitoring.getReachablesCount() > 0) {
            // Generate base attribute record - the same attributes apply to all reachables in the packet
            baseAttr = toBaseAttributeRecord(routeMonitoring, context);

            // Handle reachables
            for (org.opennms.netmgt.telemetry.protocols.bmp.transport.Transport.RouteMonitoringPacket.Route route : routeMonitoring.getReachablesList()) {
                final UnicastPrefix unicastPrefix = toUnicastPrefixRecord(routeMonitoring, route, baseAttr, context);
                unicastPrefix.action = UnicastPrefix.Action.ADD;
                unicastPrefixRecords.add(unicastPrefix);
            }
        } else {
            baseAttr = null;
        }

        // Forward the messages to the handler
        if (baseAttr != null) {
            this.handler.handle(new Message(context.collectorHashId, Type.BASE_ATTRIBUTE, ImmutableList.of(baseAttr)));
        }

        this.handler.handle(new Message(context.collectorHashId, Type.UNICAST_PREFIX, unicastPrefixRecords));
    }

