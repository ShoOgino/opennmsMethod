    List<BmpAsnPathAnalysis> buildBmpAsnPath(String asnPath) {

        List<BmpAsnPathAnalysis> bmpAsnPathAnalyses = new ArrayList<>();
        String[] asnStringArray = asnPath.split(" ");
        long[] asnArray = getLongArrayFromStringArray(asnStringArray);
        if (asnArray.length == 0) {
            return new ArrayList<>();
        }
        Long leftAsn = 0L;
        Long rightAsn = 0L;
        Long asn = 0L;
        for (int i = 0; i < asnArray.length; i++) {

            asn = asnArray[i];
            if (asn > 0) {
                if (i + 1 < asnArray.length) {

                    rightAsn = asnArray[i + 1];

                    if (rightAsn.equals(asn)) {
                        continue;
                    }
                    Boolean isPeeringAsn = (i == 0 || i == 1) ? TRUE : FALSE;
                    BmpAsnPathAnalysis bmpAsnPathAnalysis = bmpAsnPathAnalysisDao.findByAsnPath(asn, leftAsn, rightAsn, isPeeringAsn);
                    if (bmpAsnPathAnalysis == null) {
                        bmpAsnPathAnalysis = new BmpAsnPathAnalysis();
                        bmpAsnPathAnalysis.setAsn(asn);
                        bmpAsnPathAnalysis.setAsnLeft(leftAsn);
                        bmpAsnPathAnalysis.setAsnRight(rightAsn);
                        bmpAsnPathAnalysis.setAsnLeftPeering(isPeeringAsn);
                    }
                    bmpAsnPathAnalysis.setLastUpdated(Date.from(Instant.now()));
                    bmpAsnPathAnalyses.add(bmpAsnPathAnalysis);
                } else {
                    // No more left in path - Origin ASN
                    BmpAsnPathAnalysis bmpAsnPathAnalysis = bmpAsnPathAnalysisDao.findByAsnPath(asn, leftAsn, 0L, false);
                    if (bmpAsnPathAnalysis == null) {
                        bmpAsnPathAnalysis = new BmpAsnPathAnalysis();
                        bmpAsnPathAnalysis.setAsn(asn);
                        bmpAsnPathAnalysis.setAsnLeft(leftAsn);
                        bmpAsnPathAnalysis.setAsnRight(0L);
                        bmpAsnPathAnalysis.setAsnLeftPeering(false);
                    }
                    bmpAsnPathAnalysis.setLastUpdated(Date.from(Instant.now()));
                    bmpAsnPathAnalyses.add(bmpAsnPathAnalysis);
                    break;
                }

                leftAsn = asn;
            }
        }
        return bmpAsnPathAnalyses;
    }

