    @Override
    public void handleMessage(final TelemetryMessageLogEntry messageLogEntry,
                              final TelemetryMessageLog messageLog) {
        LOG.trace("Parsing packet: {}", messageLogEntry);
        final Transport.Message message;
        try {
            message = Transport.Message.parseFrom(messageLogEntry.getByteArray());
        } catch (final InvalidProtocolBufferException e) {
            LOG.error("Invalid message", e);
            return;
        }

        final String collectorHashId = Record.hash(messageLog.getSystemId());
        final String routerHashId = Record.hash(messageLog.getSourceAddress(), Integer.toString(messageLog.getSourcePort()), collectorHashId);
        final Context context = new Context(messageLog.getSystemId(),
                                            collectorHashId,
                                            routerHashId,
                                            Instant.ofEpochMilli(messageLogEntry.getTimestamp()),
                                            InetAddressUtils.addr(messageLog.getSourceAddress()),
                                            messageLog.getSourcePort());

        switch(message.getPacketCase()) {
            case HEARTBEAT:
                handleHeartbeatMessage(message, message.getHeartbeat(), context);
                break;
            case INITIATION:
                handleInitiationMessage(message, message.getInitiation(), context);
                break;
            case TERMINATION:
                handleTerminationMessage(message, message.getTermination(), context);
                break;
            case PEER_UP:
                handlePeerUpNotification(message, message.getPeerUp(), context);
                break;
            case PEER_DOWN:
                handlePeerDownNotification(message, message.getPeerDown(), context);
                break;
            case STATISTICS_REPORT:
                handleStatisticReport(message, message.getStatisticsReport(), context);
                break;
            case ROUTE_MONITORING:
                handleRouteMonitoringMessage(message, message.getRouteMonitoring(), context);
                break;
            case PACKET_NOT_SET:
                break;
        }
    }

