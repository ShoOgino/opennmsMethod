    @Override
    public Stream<CollectionSetWithAgent> handleMessage(final TelemetryMessageLogEntry message,
                                                        final TelemetryMessageLog messageLog) {
        LOG.debug("Received {} telemetry messages", messageLog.getMessageList().size());

        LOG.trace("Parsing packet: {}", message);
        final BsonDocument document = new RawBsonDocument(message.getByteArray());
        if (document == null) {
            return Stream.empty();
        }

        // This adapter only cares about statistic packets
        if (!getString(document, "@type")
                .map(type -> type.equals("STATISTICS_REPORT"))
                .orElse(false)) {
            return Stream.empty();
        }

        // Find the node for the router who has exported the stats and build a collection agent for it
        final InetAddress exporterAddress = InetAddressUtils.getInetAddress(messageLog.getSourceAddress());
        final Optional<Integer> exporterNodeId = this.interfaceToNodeCache.getFirstNodeId(messageLog.getLocation(), exporterAddress);
        if (!exporterNodeId.isPresent()) {
            LOG.warn("Unable to find node and interface for agent address: {}", exporterAddress);
            return Stream.empty();
        }
        final CollectionAgent agent = this.collectionAgentFactory.createCollectionAgent(Integer.toString(exporterNodeId.get()), exporterAddress);

        // Extract peer details
        final String peerAddress = getString(document, "peer", "address").get();
        final Instant timestamp = Instant.ofEpochSecond(getInt64(document, "peer", "timestamp", "epoch").get(),
                                                        getInt64(document, "peer", "timestamp", "nanos").orElse(0L));
        final String as = Long.toString(getInt64(document, "peer", "as").get());
        final String id = Long.toString(getInt64(document, "peer", "id").get());

        // Build resource for the peer
        final NodeLevelResource nodeResource = new NodeLevelResource(agent.getNodeId());
        final DeferredGenericTypeResource peerResource = new DeferredGenericTypeResource(nodeResource, "bmp", peerAddress);

        // Build the collection set for the peer
        final CollectionSetBuilder builder = new CollectionSetBuilder(agent);
        builder.withTimestamp(Date.from(timestamp));
        builder.withStringAttribute(peerResource, "bmp", "address", peerAddress);
        builder.withStringAttribute(peerResource, "bmp", "as", as);
        builder.withStringAttribute(peerResource, "bmp", "id", id);

        final BsonDocument stats = document.getDocument("stats");
        for (final String key : stats.keySet()) {
            final BsonDocument metric = stats.getDocument(key);

            final String identifier = String.format("bmp_%s_%s", peerAddress, key);

            getInt64(metric, "counter").ifPresent(counter -> {
                Optional.ofNullable(METRIC_ATTRIBUTE_MAP.get(key)).ifPresent(name -> {
                    builder.withIdentifiedNumericAttribute(peerResource, "bmp", name, counter, AttributeType.COUNTER, identifier);
                });
            });
            getInt64(metric, "gauge").ifPresent(gauge -> {
                Optional.ofNullable(METRIC_ATTRIBUTE_MAP.get(key)).ifPresent(name -> {
                    builder.withIdentifiedNumericAttribute(peerResource, "bmp", name, gauge, AttributeType.GAUGE, identifier);
                });
            });
        }

        return Stream.of(new CollectionSetWithAgent(agent, builder.build()));
    }

