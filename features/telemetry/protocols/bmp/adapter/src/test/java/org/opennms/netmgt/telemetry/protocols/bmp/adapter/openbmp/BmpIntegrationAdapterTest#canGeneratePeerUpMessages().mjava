    @Test
    public void canGeneratePeerUpMessages() {
        final Transport.PeerUpPacket.Builder peerUpPacket = Transport.PeerUpPacket.newBuilder();
        peerUpPacket.getPeerBuilder()
                    .setType(Transport.Peer.Type.GLOBAL_INSTANCE)
                    .setFlags(Transport.Peer.Flags.newBuilder()
                                                  .setIpVersion(Transport.Peer.Flags.IpVersion.IP_V4)
                                                  .setLegacyAsPath(false)
                                                  .setPolicy(Transport.Peer.Flags.Policy.PRE_POLICY)
                                                  .build())
                    .setDistinguisher(0)
                    .setAddress(Transport.IpAddress.newBuilder()
                                                   .setV4(ByteString.copyFrom(InetAddressUtils.toIpAddrBytes("192.168.0.5")))
                                                   .build())
                    .setAs(UnsignedInteger.valueOf(4200000000L).intValue())
                    .setId(Transport.IpAddress.newBuilder()
                                              .setV4(ByteString.copyFrom(InetAddressUtils.toIpAddrBytes("9.9.9.9")))
                                              .build())
                    .setTimestamp(Timestamp.newBuilder()
                                           .setSeconds(1234567890L)
                                           .setNanos(987654321)
                                           .build());
        peerUpPacket.setLocalAddress(Transport.IpAddress.newBuilder()
                                                        .setV4(ByteString.copyFrom(InetAddressUtils.toIpAddrBytes("192.168.0.4")))
                                                        .build())
                    .setLocalPort(179)
                    .setRemotePort(117799);
        peerUpPacket.getSendMsgBuilder()
                    .setVersion(4)
                    .setAs(UnsignedInteger.valueOf(4200000023L).intValue())
                    .setHoldTime(200)
                    .setId(Transport.IpAddress.newBuilder()
                                              .setV4(ByteString.copyFrom(InetAddressUtils.toIpAddrBytes("1.1.1.1")))
                                              .build());
        peerUpPacket.getRecvMsgBuilder()
                    .setVersion(4)
                    .setAs(UnsignedInteger.valueOf(4200000000L).intValue())
                    .setHoldTime(100)
                    .setId(Transport.IpAddress.newBuilder()
                                              .setV4(ByteString.copyFrom(InetAddressUtils.toIpAddrBytes("9.9.9.9")))
                                              .build());
        peerUpPacket.setSysName("router1")
                    .setSysDesc("My little router")
                    .setMessage("No router - no cry!");

        Transport.Message peerUpMessage = Transport.Message.newBuilder()
                                                     .setVersion(3)
                                                     .setPeerUp(peerUpPacket)
                                                     .build();
        send(peerUpMessage.toByteString());

        List<Peer> peerMessages = getHandledRecordsOfType(Type.PEER);
        assertThat(peerMessages, hasSize(1));

        // Verify
        Peer peer = peerMessages.get(0);
        assertThat(peer.action, equalTo(Peer.Action.UP));
        assertThat(peer.sequence, equalTo(0L));
        assertThat(peer.name, equalTo("192.168.0.5"));

        assertThat(peer.remoteBgpId, is(InetAddressUtils.addr("9.9.9.9")));
        assertThat(peer.routerIp, is(InetAddressUtils.addr("10.10.10.10")));
        assertThat(peer.timestamp, is(Instant.ofEpochSecond(1234567890L, 987654321)));
        assertThat(peer.remoteAsn, is(4200000000L));
        assertThat(peer.remoteIp, is(InetAddressUtils.addr("192.168.0.5")));
        assertThat(peer.peerRd, is("0:0"));
        assertThat(peer.remotePort, is(117799));
        assertThat(peer.localAsn, is(4200000023L));
        assertThat(peer.localIp, is(InetAddressUtils.addr("192.168.0.4")));
        assertThat(peer.localPort, is(179));
        assertThat(peer.localBgpId, is(InetAddressUtils.addr("1.1.1.1")));
        assertThat(peer.infoData, is("No router - no cry!"));
        assertThat(peer.advertisedCapabilities, is(""));
        assertThat(peer.receivedCapabilities, is(""));
        assertThat(peer.remoteHolddown, is(100L));
        assertThat(peer.advertisedHolddown, is(200L));
        assertThat(peer.bmpReason, is(nullValue()));
        assertThat(peer.bgpErrorCode, is(nullValue()));
        assertThat(peer.bgpErrorSubcode, is(nullValue()));
        assertThat(peer.errorText, is(nullValue()));
        assertThat(peer.l3vpn, is(false));
        assertThat(peer.prePolicy, is(true));
        assertThat(peer.ipv4, is(true));
//        assertThat(peer.locRib, is(""));
//        assertThat(peer.locRibFiltered, is(""));
//        assertThat(peer.tableName, is(""));
    }

