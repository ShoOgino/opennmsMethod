    @Test
    public void testAsnPath() {

        BmpMessagePersister bmpMessagePersister = new BmpMessagePersister();
        BmpAsnPathAnalysisDao bmpAsnPathAnalysisDao = Mockito.mock(BmpAsnPathAnalysisDao.class);
        // Mock that no data returned from Dao
        Mockito.when(bmpAsnPathAnalysisDao.findByAsnPath(Mockito.anyLong(), Mockito.anyLong(), Mockito.anyLong(), Mockito.anyBoolean())).thenReturn(null);
        bmpMessagePersister.setBmpAsnPathAnalysisDao(bmpAsnPathAnalysisDao);

        List<BmpAsnPathAnalysis> bmpAsnPathAnalysisList = bmpMessagePersister.buildBmpAsnPath("8319 33891 1299 2914 2907 2907 ");
        assertThat(bmpAsnPathAnalysisList, Matchers.hasSize(5));

        BmpAsnPathAnalysis bmpAsnPathAnalysis = bmpAsnPathAnalysisList.get(0);
        assertEquals(8319L, bmpAsnPathAnalysis.getAsn().longValue());
        assertEquals(0L, bmpAsnPathAnalysis.getAsnLeft().longValue());
        assertEquals(33891L, bmpAsnPathAnalysis.getAsnRight().longValue());
        assertEquals(true, bmpAsnPathAnalysis.isAsnLeftPeering());

        bmpAsnPathAnalysis = bmpAsnPathAnalysisList.get(2);
        assertEquals(1299L, bmpAsnPathAnalysis.getAsn().longValue());
        assertEquals(33891L, bmpAsnPathAnalysis.getAsnLeft().longValue());
        assertEquals(2914L, bmpAsnPathAnalysis.getAsnRight().longValue());
        assertEquals(false, bmpAsnPathAnalysis.isAsnLeftPeering());

        bmpAsnPathAnalysis = bmpAsnPathAnalysisList.get(4);
        assertEquals(2907L, bmpAsnPathAnalysis.getAsn().longValue());
        assertEquals(2914L, bmpAsnPathAnalysis.getAsnLeft().longValue());
        assertEquals(0L, bmpAsnPathAnalysis.getAsnRight().longValue());
        assertEquals(false, bmpAsnPathAnalysis.isAsnLeftPeering());
        // Check Invalid path
        bmpAsnPathAnalysisList = bmpMessagePersister.buildBmpAsnPath("8319 33891A 1299 2914 2907 2907 ");
        assertThat(bmpAsnPathAnalysisList, Matchers.empty());
    }

