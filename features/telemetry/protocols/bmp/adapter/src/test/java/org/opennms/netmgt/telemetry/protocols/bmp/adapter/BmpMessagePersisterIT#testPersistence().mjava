    @Test
    public void testPersistence() {

        Context context = mock(Context.class);
        when(context.getLocation()).thenReturn(LocationUtils.DEFAULT_LOCATION_NAME);
        // Persist collector
        final Collector collector = getCollector();
        Message msg = new Message("91e3a7ff9f5676ed6ae6fcd8a6b455ec", Type.COLLECTOR, ImmutableList.of(collector));
        bmpMessageHandler.handle(msg, context);
        List<BmpCollector> collectors = bmpCollectorDao.findAll();
        Assert.assertFalse(collectors.isEmpty());
        BmpCollector bmpCollector = collectors.get(0);
        Assert.assertEquals(State.UP, bmpCollector.getState());

        // Persist router.
        final Router router1 = getRouter1();
        final Router router2 = getRouter2();
        msg = new Message("91e3a7ff9f5676ed6ae6fcd8a6b455ec", Type.ROUTER, ImmutableList.of(router1, router2));
        bmpMessageHandler.handle(msg, context);
        List<BmpRouter> routers = bmpRouterDao.findAll();
        Assert.assertEquals(2, routers.size());
        BmpRouter bmpRouter = routers.get(0);
        Assert.assertEquals(bmpRouter.getCollectorHashId(), "91e3a7ff9f5676ed6ae6fcd8a6b455ec");

        // Change collector state to stop and persist collector again. Routers should be down when collector is stopped.
        collector.action = Collector.Action.STOPPED;
        msg = new Message("91e3a7ff9f5676ed6ae6fcd8a6b455ec", Type.COLLECTOR, ImmutableList.of(collector));
        bmpMessageHandler.handle(msg, context);
        collectors = bmpCollectorDao.findAll();
        Assert.assertFalse(collectors.isEmpty());
        bmpCollector = collectors.get(0);
        Assert.assertEquals(State.DOWN, bmpCollector.getState());

        // Persist peer.
        Peer peer = getPeer();
        msg = new Message("91e3a7ff9f5676ed6ae6fcd8a6b455ec", Type.PEER, ImmutableList.of(peer));
        bmpMessageHandler.handle(msg, context);
        List<BmpPeer> peers = bmpPeerDao.findAll();
        Assert.assertFalse(peers.isEmpty());

        //Set Router state to TERM and then again INIT which should update Peers state to Down.
        router1.action = Router.Action.TERM;
        msg = new Message("91e3a7ff9f5676ed6ae6fcd8a6b455ec", Type.ROUTER, ImmutableList.of(router1));
        bmpMessageHandler.handle(msg, context);
        router1.action = Router.Action.INIT;
        router1.timestamp = Instant.now();
        msg = new Message("91e3a7ff9f5676ed6ae6fcd8a6b455ec", Type.ROUTER, ImmutableList.of(router1));
        bmpMessageHandler.handle(msg, context);
        peers = bmpPeerDao.findAll();
        Assert.assertTrue(peers.size() == 1);
        BmpPeer bmpPeer = peers.get(0);
        Assert.assertEquals(State.DOWN, bmpPeer.getState());

        UnicastPrefix unicastPrefix = getUnicastPrefix();
        msg = new Message("91e3a7ff9f5676ed6ae6fcd8a6b455ec", Type.UNICAST_PREFIX, ImmutableList.of(unicastPrefix));
        bmpMessageHandler.handle(msg, context);
        List<BmpUnicastPrefix> prefixList = bmpUnicastPrefixDao.findAll();
        Assert.assertFalse(prefixList.isEmpty());

        List<BmpIpRibLog> ipRibLogs = bmpIpRibLogDao.findAll();
        Assert.assertFalse(ipRibLogs.isEmpty());

        //New Peer message should remove all previous prefixes.
        peer.action = Peer.Action.DOWN;
        peer.timestamp = Instant.now();
        msg = new Message("91e3a7ff9f5676ed6ae6fcd8a6b455ec", Type.PEER, ImmutableList.of(peer));
        bmpMessageHandler.handle(msg, context);
        prefixList = bmpUnicastPrefixDao.findAll();
        Assert.assertTrue(prefixList.isEmpty());

        //Persist BMP Base attributes.
        BaseAttribute baseAttribute = getBmpBaseAttribute();
        msg = new Message("91e3a7ff9f5676ed6ae6fcd8a6b455ec", Type.BASE_ATTRIBUTE, ImmutableList.of(baseAttribute));
        bmpMessageHandler.handle(msg, context);
        List<BmpBaseAttribute> bmpBaseAttributes = bmpBaseAttributeDao.findAll();
        Assert.assertFalse(bmpBaseAttributes.isEmpty());

    }

