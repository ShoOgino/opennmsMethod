    @VisibleForTesting
    List<RpkiInfo> parseRpkiInfoFromResponse(String jsonResponse) {
        List<RpkiInfo> rpkiInfos = new ArrayList<>();
        try {
            JsonParser parser = new JsonParser();
            JsonObject jsonObject = parser.parse(jsonResponse).getAsJsonObject();
            JsonArray jsonArray = jsonObject.getAsJsonArray("roas");

            for (JsonElement jsonElement : jsonArray) {
                try {
                    RpkiInfo rpkiInfo = new RpkiInfo();
                    JsonObject roa = jsonElement.getAsJsonObject();
                    JsonElement asnElement = roa.get("asn");
                    if (asnElement == null) {
                        continue;
                    }
                    Long asn = StringUtils.parseLong(asnElement.getAsString(), null);
                    if (asn == null) {
                        continue;
                    }
                    rpkiInfo.setAsn(asn);
                    JsonElement maxLengthElement = roa.get("maxLength");
                    if (maxLengthElement == null) {
                        continue;
                    }
                    rpkiInfo.setPrefixMaxLen(maxLengthElement.getAsInt());
                    JsonElement prefixElement = roa.get("prefix");
                    if (prefixElement == null) {
                        continue;
                    }
                    String prefixString = prefixElement.getAsString();
                    if (prefixString.contains("/")) {
                        String[] prefixArray = prefixString.split("/", 2);
                        if (isValidIpAddress(prefixArray[0])) {
                            rpkiInfo.setPrefix(prefixArray[0]);
                        }
                        Integer prefixLen = StringUtils.parseInt(prefixArray[1], null);
                        if (prefixLen != null) {
                            rpkiInfo.setPrefixLen(prefixLen);
                        }
                    }
                    rpkiInfos.add(rpkiInfo);
                } catch (Exception e) {
                    // skip element.
                    LOG.warn("Exception while parsing Rpki element {}", jsonElement, e);
                }
            }
        } catch (Exception e) {
            LOG.error("Exception while parsing Rpki Info from json response {}", jsonResponse, e);
        }
        return rpkiInfos;
    }

