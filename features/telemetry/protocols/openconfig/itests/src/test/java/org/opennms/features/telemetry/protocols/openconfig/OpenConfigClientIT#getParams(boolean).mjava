    private List<Map<String, String>> getParams(boolean jti) {
        List<Map<String, String>> params = new ArrayList<>();
        List<Parameter> parameterList = new ArrayList<>();
        if(jti) {
            parameterList.add(new Parameter("mode", "jti"));
        }
        parameterList.add(new Parameter("port", "50052"));
        parameterList.add(new Parameter("group1", "frequency", "2000"));
        parameterList.add(new Parameter("group1", "paths", "/interfaces"));
        parameterList.add(new Parameter("group1", "interval", "3"));
        parameterList.add(new Parameter("group2", "frequency", "3000"));
        parameterList.add(new Parameter("group2", "paths",
                "/network-instances/network-instance[instance-name='master']"));
        parameterList.add(new Parameter("group3", "paths", "/protocols/protocol/bgp"));
        parameterList.add(new Parameter("group3", "frequency", "4000"));
        Map<String, Map<String, String>> parmsWithGroup = parameterList.stream()
                .filter(parameter -> !Strings.isNullOrEmpty(parameter.getGroup()))
                .collect(Collectors.groupingBy(Parameter::getGroup, Collectors.toMap(Parameter::getKey, Parameter::getValue)));

        Map<String, String> parmsWithoutGroup = parameterList.stream()
                .filter(parameter -> Strings.isNullOrEmpty(parameter.getGroup()))
                .collect(Collectors.toMap(
                        Parameter::getKey,
                        Parameter::getValue
                ));
        parmsWithGroup.forEach((group, map) -> {
            params.add(map);
        });
        params.add(parmsWithoutGroup);
        return params;
    }

