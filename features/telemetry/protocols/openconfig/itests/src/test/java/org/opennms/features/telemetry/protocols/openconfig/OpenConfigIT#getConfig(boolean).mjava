    private TelemetrydConfig getConfig(boolean jti) throws IOException {
        TelemetrydConfig telemetrydConfig = new TelemetrydConfig();

        QueueConfig openConfigQueue = new QueueConfig();
        openConfigQueue.setName("OpenConfig");
        telemetrydConfig.getQueues().add(openConfigQueue);

        ConnectorConfig connectorConfig = new ConnectorConfig();
        connectorConfig.setName("OpenConfig-Connector");
        connectorConfig.setClassName(OpenConfigConnector.class.getCanonicalName());
        connectorConfig.setEnabled(true);
        connectorConfig.setServiceName("OpenConfig");
        connectorConfig.setQueue(openConfigQueue);
        telemetrydConfig.getConnectors().add(connectorConfig);

        PackageConfig connectorPackage = new PackageConfig();
        connectorPackage.setName("OpenConfig-Default");
        connectorPackage.setFilter(new PackageConfig.Filter("IPADDR != '0.0.0.0'"));
        if (jti) {
            connectorPackage.getParameters().add(new Parameter("mode", "JTI"));
        }
        connectorPackage.getParameters().add(new Parameter("port", "50052"));
        connectorPackage.getParameters().add(new Parameter("group1","paths", "/interfaces"));
        connectorPackage.getParameters().add(new Parameter("group1", "frequency", "5000"));
        connectorConfig.getPackages().add(connectorPackage);

        if(jti) {
            Files.copy(
                    Paths.get(System.getProperty("opennms.home"),
                            "etc",
                            "telemetryd-adapters",
                            "openconfig-jti-telemetry.groovy"),
                    scriptFile.toPath(),
                    StandardCopyOption.REPLACE_EXISTING
            );
        } else {
            Files.copy(
                    Paths.get(System.getProperty("opennms.home"),
                            "etc",
                            "telemetryd-adapters",
                            "openconfig-gnmi-telemetry.groovy"),
                    scriptFile.toPath(),
                    StandardCopyOption.REPLACE_EXISTING
            );
        }

        assertTrue("Can't read: " + scriptFile.getAbsolutePath(), scriptFile.canRead());

        AdapterConfig openConfigAdapter = new AdapterConfig();
        openConfigAdapter.setEnabled(true);
        openConfigAdapter.setName("OpenConfig-Adapter");
        openConfigAdapter.setClassName(OpenConfigAdapter.class.getCanonicalName());
        openConfigAdapter.getParameters().add(new Parameter("script", scriptFile.getAbsolutePath()));
        if (jti) {
            openConfigAdapter.getParameters().add(new Parameter("mode", "JTI"));
        }
        openConfigQueue.getAdapters().add(openConfigAdapter);

        PackageConfig packageConfig = new PackageConfig();
        packageConfig.setName("OpenConfig-Default");
        packageConfig.setFilter(new PackageConfig.Filter("IPADDR != '0.0.0.0'"));
        openConfigAdapter.getPackages().add(packageConfig);

        PackageConfig.Rrd rrd = new PackageConfig.Rrd();
        rrd.setStep(300);
        rrd.setBaseDir(rrdBaseDir.getAbsolutePath());
        rrd.getRras().add("RRA:AVERAGE:0.5:1:2016");
        packageConfig.setRrd(rrd);

        return telemetrydConfig;
    }

