    @Override
    public List<Flow> convert(final BsonDocument packet) {
        final List<Flow> result = Lists.newLinkedList();

        final SFlow.Header header = new SFlow.Header(packet);

        for (final BsonValue sample : getArray(packet, "data", "samples").orElseThrow(SFlowConverter::invalidDocument)) {
            final BsonDocument sampleDocument = sample.asDocument();

            final String format = getString(sampleDocument, "format").orElseThrow(SFlowConverter::invalidDocument);
            if ("0:1".equals(format) || "0:3".equals(format)) {
                // Handle only (expanded) flow samples

                if (first(get(sampleDocument, "data", "flows", "0:1"),
                           get(sampleDocument, "data", "flows", "0:3"),
                           get(sampleDocument, "data", "flows", "0:4")).isPresent()) {
                    // Handle only flows containing IP related records
                    result.add(new SFlow(header, getDocument(sampleDocument, "data").orElseThrow(SFlowConverter::invalidDocument)));
                }
            }
        }

        return result;
    }

