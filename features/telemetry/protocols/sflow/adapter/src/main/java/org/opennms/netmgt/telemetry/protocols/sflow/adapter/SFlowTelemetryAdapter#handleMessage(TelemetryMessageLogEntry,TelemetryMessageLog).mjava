    @Override
    public Stream<CollectionSetWithAgent> handleMessage(final TelemetryMessageLogEntry message,
                                                        final TelemetryMessageLog messageLog) {
        LOG.debug("Received {} telemetry messages", messageLog.getMessageList().size());

        LOG.trace("Parsing packet: {}", message);
        final BsonDocument document = new RawBsonDocument(message.getByteArray()).getDocument("data");
        if (document == null) {
            return Stream.empty();
        }

        final String address = first(
                getString(document, "agent_address", "ipv6", "address"),
                getString(document, "agent_address", "ipv4", "address"))
                .orElseThrow(() -> new IllegalStateException("Incomplete document"));

        final InetAddress inetAddress;
        try {
            inetAddress = InetAddress.getByName(address);
        } catch (UnknownHostException e) {
            LOG.warn("Failed to resolve agent address: {}", address);
            return Stream.empty();
        }

        final Optional<Integer> nodeId = interfaceToNodeCache.getFirstNodeId(messageLog.getLocation(), inetAddress);

        final CollectionAgent agent;
        if (nodeId.isPresent()) {
            agent = collectionAgentFactory.createCollectionAgent(Integer.toString(nodeId.get()), inetAddress);

        } else {
            LOG.warn("Unable to find node and interface for agent address: {}", address);
            return Stream.empty();
        }
        final ScriptedCollectionSetBuilder builder = getCollectionBuilder();
        if (builder == null) {
            LOG.error("Error compiling script '{}'. See logs for details.", this.getScript());
            return Stream.empty();
        }

        return document.getArray("samples").stream()
                .map(BsonValue::asDocument)
                .flatMap(sampleDocument -> {
                    if ("0:2".equals(sampleDocument.get("format").asString().getValue()) ||
                        "0:4".equals(sampleDocument.get("format").asString().getValue())) {
                        // Handle only (expanded) counter samples
                        try {
                            Long timestamp = null;
                            if (sampleDocument.containsKey("time")) {
                                timestamp = sampleDocument.getInt64("time").getValue();
                            }
                            final CollectionSet collectionSet = builder.build(agent,
                                    sampleDocument.get("data").asDocument(), timestamp);
                            return Stream.of(new CollectionSetWithAgent(agent, collectionSet));
                        } catch (final ScriptException e) {
                            LOG.error("Error while running script: {}", e.getMessage());
                            return Stream.empty();
                        }
                    } else {
                        return Stream.empty();
                    }
                });
    }

