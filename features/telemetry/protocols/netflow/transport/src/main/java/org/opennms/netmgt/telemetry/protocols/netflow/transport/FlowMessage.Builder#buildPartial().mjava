    @java.lang.Override
    public org.opennms.netmgt.telemetry.protocols.netflow.transport.FlowMessage buildPartial() {
      org.opennms.netmgt.telemetry.protocols.netflow.transport.FlowMessage result = new org.opennms.netmgt.telemetry.protocols.netflow.transport.FlowMessage(this);
      result.timestamp_ = timestamp_;
      if (numBytesBuilder_ == null) {
        result.numBytes_ = numBytes_;
      } else {
        result.numBytes_ = numBytesBuilder_.build();
      }
      result.direction_ = direction_;
      result.dstAddress_ = dstAddress_;
      result.dstHostname_ = dstHostname_;
      if (dstAsBuilder_ == null) {
        result.dstAs_ = dstAs_;
      } else {
        result.dstAs_ = dstAsBuilder_.build();
      }
      if (dstMaskLenBuilder_ == null) {
        result.dstMaskLen_ = dstMaskLen_;
      } else {
        result.dstMaskLen_ = dstMaskLenBuilder_.build();
      }
      if (dstPortBuilder_ == null) {
        result.dstPort_ = dstPort_;
      } else {
        result.dstPort_ = dstPortBuilder_.build();
      }
      if (engineIdBuilder_ == null) {
        result.engineId_ = engineId_;
      } else {
        result.engineId_ = engineIdBuilder_.build();
      }
      if (engineTypeBuilder_ == null) {
        result.engineType_ = engineType_;
      } else {
        result.engineType_ = engineTypeBuilder_.build();
      }
      if (deltaSwitchedBuilder_ == null) {
        result.deltaSwitched_ = deltaSwitched_;
      } else {
        result.deltaSwitched_ = deltaSwitchedBuilder_.build();
      }
      if (firstSwitchedBuilder_ == null) {
        result.firstSwitched_ = firstSwitched_;
      } else {
        result.firstSwitched_ = firstSwitchedBuilder_.build();
      }
      if (lastSwitchedBuilder_ == null) {
        result.lastSwitched_ = lastSwitched_;
      } else {
        result.lastSwitched_ = lastSwitchedBuilder_.build();
      }
      if (numFlowRecordsBuilder_ == null) {
        result.numFlowRecords_ = numFlowRecords_;
      } else {
        result.numFlowRecords_ = numFlowRecordsBuilder_.build();
      }
      if (numPacketsBuilder_ == null) {
        result.numPackets_ = numPackets_;
      } else {
        result.numPackets_ = numPacketsBuilder_.build();
      }
      if (flowSeqNumBuilder_ == null) {
        result.flowSeqNum_ = flowSeqNum_;
      } else {
        result.flowSeqNum_ = flowSeqNumBuilder_.build();
      }
      if (inputSnmpIfindexBuilder_ == null) {
        result.inputSnmpIfindex_ = inputSnmpIfindex_;
      } else {
        result.inputSnmpIfindex_ = inputSnmpIfindexBuilder_.build();
      }
      if (outputSnmpIfindexBuilder_ == null) {
        result.outputSnmpIfindex_ = outputSnmpIfindex_;
      } else {
        result.outputSnmpIfindex_ = outputSnmpIfindexBuilder_.build();
      }
      if (ipProtocolVersionBuilder_ == null) {
        result.ipProtocolVersion_ = ipProtocolVersion_;
      } else {
        result.ipProtocolVersion_ = ipProtocolVersionBuilder_.build();
      }
      result.nextHopAddress_ = nextHopAddress_;
      result.nextHopHostname_ = nextHopHostname_;
      if (protocolBuilder_ == null) {
        result.protocol_ = protocol_;
      } else {
        result.protocol_ = protocolBuilder_.build();
      }
      result.samplingAlgorithm_ = samplingAlgorithm_;
      if (samplingIntervalBuilder_ == null) {
        result.samplingInterval_ = samplingInterval_;
      } else {
        result.samplingInterval_ = samplingIntervalBuilder_.build();
      }
      result.srcAddress_ = srcAddress_;
      result.srcHostname_ = srcHostname_;
      if (srcAsBuilder_ == null) {
        result.srcAs_ = srcAs_;
      } else {
        result.srcAs_ = srcAsBuilder_.build();
      }
      if (srcMaskLenBuilder_ == null) {
        result.srcMaskLen_ = srcMaskLen_;
      } else {
        result.srcMaskLen_ = srcMaskLenBuilder_.build();
      }
      if (srcPortBuilder_ == null) {
        result.srcPort_ = srcPort_;
      } else {
        result.srcPort_ = srcPortBuilder_.build();
      }
      if (tcpFlagsBuilder_ == null) {
        result.tcpFlags_ = tcpFlags_;
      } else {
        result.tcpFlags_ = tcpFlagsBuilder_.build();
      }
      if (tosBuilder_ == null) {
        result.tos_ = tos_;
      } else {
        result.tos_ = tosBuilder_.build();
      }
      result.netflowVersion_ = netflowVersion_;
      if (vlanBuilder_ == null) {
        result.vlan_ = vlan_;
      } else {
        result.vlan_ = vlanBuilder_.build();
      }
      result.nodeIdentifier_ = nodeIdentifier_;
      onBuilt();
      return result;
    }

