    @Test
    public void canValidateIpFixFlowsWithJsonOutput() {
        // Generate flows from existing packet payloads
        ipFixConverter = new NetflowConverter();
        List<Flow> flows = getFlowsForPayloadsInSession("/flows/ipfix_test_1.dat",
                "/flows/ipfix_test_2.dat");
        assertThat(flows, hasSize(8));
        Utils.JsonConverter jsonConverter = new Utils.JsonConverter();
        List<String> jsonStrings = jsonConverter.getJsonStringFromResources("/flows/ipfix_test_1.json",
                "/flows/ipfix_test_2.json");
        List<Flow> jsonData = jsonConverter.convert(jsonStrings);
        assertThat(jsonData, hasSize(8));
        for (int i = 0; i < 8; i++) {
            Assert.assertEquals(flows.get(i).getFlowSeqNum(), jsonData.get(i).getFlowSeqNum());
            Assert.assertEquals(flows.get(i).getFlowRecords(), jsonData.get(i).getFlowRecords());
            Assert.assertEquals(flows.get(i).getTimestamp(), jsonData.get(i).getTimestamp());
            Assert.assertEquals(flows.get(i).getBytes(), jsonData.get(i).getBytes());
            Flow.Direction direction = jsonData.get(i).getDirection() != null ? jsonData.get(i).getDirection() : Flow.Direction.INGRESS;
            Assert.assertEquals(flows.get(i).getDirection(), direction);
            Assert.assertEquals(flows.get(i).getFirstSwitched(), jsonData.get(i).getFirstSwitched());
            Assert.assertEquals(flows.get(i).getLastSwitched(), jsonData.get(i).getLastSwitched());
            Assert.assertEquals(flows.get(i).getDeltaSwitched(), jsonData.get(i).getDeltaSwitched());
            Assert.assertEquals(flows.get(i).getDstAddr(), jsonData.get(i).getDstAddr());
            Assert.assertEquals(flows.get(i).getDstAs(), jsonData.get(i).getDstAs());
            Assert.assertEquals(flows.get(i).getDstPort(), jsonData.get(i).getDstPort());
            Assert.assertEquals(flows.get(i).getDstMaskLen(), jsonData.get(i).getDstMaskLen());
            Assert.assertEquals(flows.get(i).getDstAddrHostname(), jsonData.get(i).getDstAddrHostname());
            Assert.assertEquals(flows.get(i).getSrcAddr(), jsonData.get(i).getSrcAddr());
            Assert.assertEquals(flows.get(i).getSrcAs(), jsonData.get(i).getSrcAs());
            Assert.assertEquals(flows.get(i).getSrcPort(), jsonData.get(i).getSrcPort());
            Assert.assertEquals(flows.get(i).getSrcAddrHostname(), jsonData.get(i).getSrcAddrHostname());
            Assert.assertEquals(flows.get(i).getSrcMaskLen(), jsonData.get(i).getSrcMaskLen());
            Assert.assertEquals(flows.get(i).getNextHop(), jsonData.get(i).getNextHop());
            Assert.assertEquals(flows.get(i).getInputSnmp(), jsonData.get(i).getInputSnmp());
            Assert.assertEquals(flows.get(i).getOutputSnmp(), jsonData.get(i).getOutputSnmp());
            Assert.assertEquals(flows.get(i).getNetflowVersion(), jsonData.get(i).getNetflowVersion());
            Assert.assertEquals(flows.get(i).getTcpFlags(), jsonData.get(i).getTcpFlags());
            Assert.assertEquals(flows.get(i).getProtocol(), jsonData.get(i).getProtocol());
            Assert.assertEquals(flows.get(i).getTos(), jsonData.get(i).getTos());
            Assert.assertEquals(flows.get(i).getEngineId(), jsonData.get(i).getEngineId());
            Assert.assertEquals(flows.get(i).getEngineType(), jsonData.get(i).getEngineType());
            Assert.assertEquals(flows.get(i).getPackets(), jsonData.get(i).getPackets());
            Assert.assertEquals(flows.get(i).getSamplingAlgorithm(), jsonData.get(i).getSamplingAlgorithm());
            Assert.assertEquals(flows.get(i).getSamplingInterval(), jsonData.get(i).getSamplingInterval());
            Assert.assertEquals(flows.get(i).getIpProtocolVersion(), jsonData.get(i).getIpProtocolVersion());
            Assert.assertEquals(flows.get(i).getVlan(), jsonData.get(i).getVlan());
            Assert.assertEquals(flows.get(i).getNodeIdentifier(), jsonData.get(i).getNodeIdentifier());

        }
    }

