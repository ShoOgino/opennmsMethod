    @Test
    public void canValidateNetflow9FlowsWithJsonOutput() {
        // Generate flows from existing packet payloads
        nf9Converter = new NetflowConverter();
        List<Flow> flows = getFlowsForPayloadsInSession("/flows/netflow9.dat",
                "/flows/netflow9_template.dat",
                "/flows/netflow9_records.dat");

        assertThat(flows, hasSize(12));
        Utils.JsonConverter jsonConverter = new Utils.JsonConverter();
        List<String> jsonStrings = jsonConverter.getJsonStringFromResources("/flows/netflow9.json",
                "/flows/netflow9_1.json");
        List<Flow> jsonFlows = jsonConverter.convert(jsonStrings);
        assertThat(jsonFlows, hasSize(12));
        for (int i = 0; i < 12; i++) {
            Assert.assertEquals(flows.get(i).getFlowSeqNum(), jsonFlows.get(i).getFlowSeqNum());
            Assert.assertEquals(flows.get(i).getFlowRecords(), jsonFlows.get(i).getFlowRecords());
            Assert.assertEquals(flows.get(i).getTimestamp(), jsonFlows.get(i).getTimestamp());
            Assert.assertEquals(flows.get(i).getBytes(), jsonFlows.get(i).getBytes());
            Flow.Direction direction = jsonFlows.get(i).getDirection() != null ? jsonFlows.get(i).getDirection() : Flow.Direction.INGRESS;
            Assert.assertEquals(flows.get(i).getDirection(), direction);
            Assert.assertEquals(flows.get(i).getFirstSwitched(), jsonFlows.get(i).getFirstSwitched());
            Assert.assertEquals(flows.get(i).getLastSwitched(), jsonFlows.get(i).getLastSwitched());
            Assert.assertEquals(flows.get(i).getDeltaSwitched(), jsonFlows.get(i).getDeltaSwitched());
            Assert.assertEquals(flows.get(i).getDstAddr(), jsonFlows.get(i).getDstAddr());
            Assert.assertEquals(flows.get(i).getDstAs(), jsonFlows.get(i).getDstAs());
            Assert.assertEquals(flows.get(i).getDstPort(), jsonFlows.get(i).getDstPort());
            Assert.assertEquals(flows.get(i).getDstMaskLen(), jsonFlows.get(i).getDstMaskLen());
            Assert.assertEquals(flows.get(i).getDstAddrHostname(), jsonFlows.get(i).getDstAddrHostname());
            Assert.assertEquals(flows.get(i).getSrcAddr(), jsonFlows.get(i).getSrcAddr());
            Assert.assertEquals(flows.get(i).getSrcAs(), jsonFlows.get(i).getSrcAs());
            Assert.assertEquals(flows.get(i).getSrcPort(), jsonFlows.get(i).getSrcPort());
            Assert.assertEquals(flows.get(i).getSrcAddrHostname(), jsonFlows.get(i).getSrcAddrHostname());
            Assert.assertEquals(flows.get(i).getSrcMaskLen(), jsonFlows.get(i).getSrcMaskLen());
            Assert.assertEquals(flows.get(i).getNextHop(), jsonFlows.get(i).getNextHop());
            Assert.assertEquals(flows.get(i).getInputSnmp(), jsonFlows.get(i).getInputSnmp());
            Assert.assertEquals(flows.get(i).getOutputSnmp(), jsonFlows.get(i).getOutputSnmp());
            Assert.assertEquals(flows.get(i).getNetflowVersion(), jsonFlows.get(i).getNetflowVersion());
            Assert.assertEquals(flows.get(i).getTcpFlags(), jsonFlows.get(i).getTcpFlags());
            Assert.assertEquals(flows.get(i).getProtocol(), jsonFlows.get(i).getProtocol());
            Assert.assertEquals(flows.get(i).getTos(), jsonFlows.get(i).getTos());
            Assert.assertEquals(flows.get(i).getEngineId(), jsonFlows.get(i).getEngineId());
            Assert.assertEquals(flows.get(i).getEngineType(), jsonFlows.get(i).getEngineType());
            Assert.assertEquals(flows.get(i).getPackets(), jsonFlows.get(i).getPackets());
            Assert.assertEquals(flows.get(i).getSamplingAlgorithm(), jsonFlows.get(i).getSamplingAlgorithm());
            Assert.assertEquals(flows.get(i).getSamplingInterval(), jsonFlows.get(i).getSamplingInterval());
            Assert.assertEquals(flows.get(i).getIpProtocolVersion(), jsonFlows.get(i).getIpProtocolVersion());
            Assert.assertEquals(flows.get(i).getVlan(), jsonFlows.get(i).getVlan());
            Assert.assertEquals(flows.get(i).getNodeIdentifier(), jsonFlows.get(i).getNodeIdentifier());

        }
    }

