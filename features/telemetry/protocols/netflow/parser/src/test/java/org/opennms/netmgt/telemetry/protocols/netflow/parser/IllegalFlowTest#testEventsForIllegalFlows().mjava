    @Test
    public void testEventsForIllegalFlows() throws Exception {

        final EventForwarder eventForwarder = new EventForwarder() {
            @Override
            public void sendNow(Event event) {
                System.out.println("Sending event: " + event);
                eventCount.incrementAndGet();
            }

            @Override
            public void sendNow(Log eventLog) {
                Assert.fail();
            }

            @Override
            public void sendNowSync(Event event) {
                Assert.fail();
            }

            @Override
            public void sendNowSync(Log eventLog) {
                Assert.fail();
            }
        };

        final Identity identity = mock(Identity.class);

        final DnsResolver dnsResolver = new DnsResolver() {
            @Override
            public CompletableFuture<Optional<InetAddress>> lookup(String hostname) {
                return CompletableFuture.completedFuture(Optional.empty());
            }

            @Override
            public CompletableFuture<Optional<String>> reverseLookup(InetAddress inetAddress) {
                return CompletableFuture.completedFuture(Optional.empty());
            }
        };

        final int udpPort = SocketUtils.findAvailableUdpPort();

        // setting up nf9 parser

        final Netflow9UdpParser parser = new Netflow9UdpParser("FLOW", new AsyncDispatcher<TelemetryMessage>() {
            @Override
            public CompletableFuture<DispatchStatus> send(TelemetryMessage message) {
                messagesSent.incrementAndGet();
                return CompletableFuture.completedFuture(DispatchStatus.DISPATCHED);
            }

            @Override
            public int getQueueSize() {
                return 0;
            }

            @Override
            public void close()  {
            }
        }, eventForwarder, identity, dnsResolver, new MetricRegistry());

        // setting up listener

        final UdpListener listener = new UdpListener("FLOW", Collections.singletonList(parser), new MetricRegistry());

        listener.setPort(udpPort);
        listener.start();

        // send template

        sendTemplate(udpPort);

        // check that event is delivered only once

        parser.setIllegalFlowEventRate(3600);
        sendValid(udpPort);
        await().pollDelay(250, TimeUnit.MILLISECONDS).atMost(2, TimeUnit.SECONDS).until(() -> eventCount.get(), is(0));
        await().pollDelay(250, TimeUnit.MILLISECONDS).atMost(2, TimeUnit.SECONDS).until(() -> messagesSent.get(), is(5));
        sendIllegal(udpPort);
        await().pollDelay(250, TimeUnit.MILLISECONDS).atMost(2, TimeUnit.SECONDS).until(() -> eventCount.get(), is(1));
        await().pollDelay(250, TimeUnit.MILLISECONDS).atMost(2, TimeUnit.SECONDS).until(() -> messagesSent.get(), is(8));
        sendIllegal(udpPort);
        await().pollDelay(250, TimeUnit.MILLISECONDS).atMost(2, TimeUnit.SECONDS).until(() -> eventCount.get(), is(1));
        await().pollDelay(250, TimeUnit.MILLISECONDS).atMost(2, TimeUnit.SECONDS).until(() -> messagesSent.get(), is(11));

        // reset counter

        eventCount.set(0);
        messagesSent.set(0);

        // check that event is delivered again after delay

        parser.setIllegalFlowEventRate(2);
        sendValid(udpPort);
        await().pollDelay(250, TimeUnit.MILLISECONDS).atMost(2, TimeUnit.SECONDS).until(() -> eventCount.get(), is(0));
        await().pollDelay(250, TimeUnit.MILLISECONDS).atMost(2, TimeUnit.SECONDS).until(() -> messagesSent.get(), is(5));

        sendIllegal(udpPort);
        await().pollDelay(250, TimeUnit.MILLISECONDS).atMost(2, TimeUnit.SECONDS).until(() -> eventCount.get(), is(1));
        await().pollDelay(250, TimeUnit.MILLISECONDS).atMost(2, TimeUnit.SECONDS).until(() -> messagesSent.get(), is(8));

        sendIllegal(udpPort);
        await().pollDelay(250, TimeUnit.MILLISECONDS).atMost(2, TimeUnit.SECONDS).until(() -> eventCount.get(), is(1));
        await().pollDelay(250, TimeUnit.MILLISECONDS).atMost(2, TimeUnit.SECONDS).until(() -> messagesSent.get(), is(11));

        sendIllegal(udpPort);
        await().pollDelay(250, TimeUnit.MILLISECONDS).atMost(2, TimeUnit.SECONDS).until(() -> eventCount.get(), is(1));
        await().pollDelay(250, TimeUnit.MILLISECONDS).atMost(2, TimeUnit.SECONDS).until(() -> messagesSent.get(), is(14));

        Thread.sleep(2000);

        sendIllegal(udpPort);
        await().pollDelay(250, TimeUnit.MILLISECONDS).atMost(2, TimeUnit.SECONDS).until(() -> eventCount.get(), is(2));
        await().pollDelay(250, TimeUnit.MILLISECONDS).atMost(2, TimeUnit.SECONDS).until(() -> messagesSent.get(), is(17));
    }

