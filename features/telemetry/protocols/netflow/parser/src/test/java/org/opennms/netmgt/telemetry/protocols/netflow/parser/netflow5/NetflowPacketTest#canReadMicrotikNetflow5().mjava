    @Test
    public void canReadMicrotikNetflow5() throws InvalidPacketException {
        execute("/flows/netflow5_test_microtik.dat", flowPacket -> {

            // Verify Header
            assertThat(flowPacket.header.versionNumber, is(0x0005));
            assertThat(flowPacket.header.count, is(30));
            assertThat(flowPacket.header.sysUptime, is(27361640L)); // Hex: 0x01A18168
            assertThat(flowPacket.header.unixSecs, is(1469109117L)); // Hex: 0x5790D37D
            assertThat(flowPacket.header.unixNSecs, is(514932000L)); // Hex: 0x1EB13D20
            assertThat(flowPacket.header.flowSequence, is(8140050L));
            assertThat(flowPacket.header.engineId, is(0));
            assertThat(flowPacket.header.engineType, is(0));
            assertThat(flowPacket.header.samplingInterval, is(0));
            assertThat(flowPacket.header.samplingAlgorithm, is(0));

            // Verify Last Flow Record
            assertThat(flowPacket.records, hasSize(30));
            assertThat(flowPacket.records.get(29).srcAddr.getHostAddress(), is("10.0.8.1"));
            assertThat(flowPacket.records.get(29).dstAddr.getHostAddress(), is("192.168.0.1"));
            assertThat(flowPacket.records.get(29).nextHop.getHostAddress(), is("192.168.0.1"));
            assertThat(flowPacket.records.get(29).srcPort, is(80));
            assertThat(flowPacket.records.get(29).dstPort, is(51826));
            assertThat(flowPacket.records.get(29).tos, is(40));
            assertThat(flowPacket.records.get(29).input, is(13));
            assertThat(flowPacket.records.get(29).output, is(46));
            assertThat(flowPacket.records.get(29).dPkts, is(13L));
            assertThat(flowPacket.records.get(29).dOctets, is(11442L));
            assertThat(flowPacket.records.get(29).first, is(27346380L)); // Hex: 0x01A145CC
            assertThat(flowPacket.records.get(29).last, is(27346380L)); // Hex: 0x01A145CC
            assertThat(flowPacket.records.get(29).tcpFlags, is(82));
            assertThat(flowPacket.records.get(29).proto, is(6));
            assertThat(flowPacket.records.get(29).srcAs, is(0));
            assertThat(flowPacket.records.get(29).dstAs, is(0));
            assertThat(flowPacket.records.get(29).srcMask, is(0));
            assertThat(flowPacket.records.get(29).dstMask, is(0));
            assertThat(flowPacket.records.get(29).egress, is(false));
        });
    }

