    @Test
    public void canReadJuniperMX80Netflow5() throws InvalidPacketException {
        execute("/flows/netflow5_test_juniper_mx80.dat", flowPacket -> {

            // Verify Flow Header
            assertThat(flowPacket.header.versionNumber, is(0x0005));
            assertThat(flowPacket.header.count, is(29));
            assertThat(flowPacket.header.sysUptime, is(190649064L)); // Hex: 0x0B5D12E8
            assertThat(flowPacket.header.unixSecs, is(1469109172L)); // Hex: 0x5790D3B4
            assertThat(flowPacket.header.unixNSecs, is(00000000L)); // Hex: 0x00000000
            assertThat(flowPacket.header.flowSequence, is(528678L));
            assertThat(flowPacket.header.engineId, is(0));
            assertThat(flowPacket.header.engineType, is(0));
            assertThat(flowPacket.header.samplingInterval, is(1000));
            assertThat(flowPacket.header.samplingAlgorithm, is(0));

            // Verify Last Flow Record
            assertThat(flowPacket.records, hasSize(29));
            assertThat(flowPacket.records.get(28).srcAddr.getHostAddress(), is("66.249.92.75"));
            assertThat(flowPacket.records.get(28).dstAddr.getHostAddress(), is("192.168.0.1"));
            assertThat(flowPacket.records.get(28).nextHop.getHostAddress(), is("192.168.0.1"));
            assertThat(flowPacket.records.get(28).srcPort, is(37387));
            assertThat(flowPacket.records.get(28).dstPort, is(80));
            assertThat(flowPacket.records.get(28).srcAs, is(15169));
            assertThat(flowPacket.records.get(28).dstAs, is(64496));
            assertThat(flowPacket.records.get(28).tos, is(0));
            assertThat(flowPacket.records.get(28).input, is(542));
            assertThat(flowPacket.records.get(28).output, is(536));
            assertThat(flowPacket.records.get(28).dPkts, is(2L));
            assertThat(flowPacket.records.get(28).dOctets, is(104L));
            assertThat(flowPacket.records.get(28).first, is(190631000L)); // Hex: 0x0B5CCC58
            assertThat(flowPacket.records.get(28).last, is(190631000L)); // Hex: 0x0B5CCC58
            assertThat(flowPacket.records.get(28).tcpFlags, is(16));
            assertThat(flowPacket.records.get(28).proto, is(6));
            assertThat(flowPacket.records.get(28).srcAs, is(15169));
            assertThat(flowPacket.records.get(28).dstAs, is(64496));
            assertThat(flowPacket.records.get(28).srcMask, is(19));
            assertThat(flowPacket.records.get(28).dstMask, is(24));
            assertThat(flowPacket.records.get(28).egress, is(false));
        });
    }

