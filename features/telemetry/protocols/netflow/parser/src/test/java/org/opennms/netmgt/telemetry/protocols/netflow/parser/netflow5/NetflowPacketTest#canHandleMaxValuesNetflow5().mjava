    // Verify that all fields can be handled if they were maxed out.
    // This ensures that all fields are converted correctly.
    // For example if a 2 byte unsigned field's value were FFFF, it must be converted to an integer instead of a short.
    // NOTE: This is purely theoretically and does not reflect a REAL WORLD netflow packet.
    @Test
    public void canHandleMaxValuesNetflow5() throws InvalidPacketException {
        // Generate minimal netflow packet with 1 netflow record but maximum values (theoretical values only)
        byte[] bytes = new byte[Header.SIZE + Record.SIZE];
        Arrays.fill(bytes, (byte) 0xFF);
        bytes[0] = 0x00;
        bytes[1] = 0x05;
        bytes[2] = 0x00;
        bytes[3] = 0x01;

        // Parse and Verify
        final ByteBuf buffer = Unpooled.wrappedBuffer(bytes);

        final Header header = new Header(buffer);
        final Packet packet = new Packet(header, buffer);

        // Verify Header
        assertThat(packet.header.sysUptime, is(1024L * 1024L * 1024L * 4L - 1)); // 2^32-1
        assertThat(packet.header.unixSecs, is(1024L * 1024L * 1024L * 4L - 1)); // 2^32-1
        assertThat(packet.header.unixNSecs, is(1024L * 1024L * 1024L * 4L - 1)); // 2^32-1
        assertThat(packet.header.flowSequence, is(1024L * 1024L * 1024L * 4L - 1)); // 2^32-1
        assertThat(packet.header.engineType, is(255)); // 2^8-1
        assertThat(packet.header.engineId, is(255)); // 2^8-1
        assertThat(packet.header.samplingAlgorithm, is(4 - 1)); // 2^2-1
        assertThat(packet.header.samplingInterval, is(16384 - 1)); // 2^14-1

        // Verify Body
        assertThat(packet.records, hasSize(1));
        assertThat(packet.records.get(0).srcAddr.getHostAddress(), is("255.255.255.255")); // quadruple: (2^8-1, 2^8-1, 2^8-1, 2^8-1)
        assertThat(packet.records.get(0).dstAddr.getHostAddress(), is("255.255.255.255")); // quadruple: (2^8-1, 2^8-1, 2^8-1, 2^8-1)
        assertThat(packet.records.get(0).nextHop.getHostAddress(), is("255.255.255.255")); // quadruple: (2^8-1, 2^8-1, 2^8-1, 2^8-1)
        assertThat(packet.records.get(0).input, is(65536 - 1)); // 2^16-1
        assertThat(packet.records.get(0).output, is(65536 - 1)); // 2^16-1
        assertThat(packet.records.get(0).dPkts, is(1024L * 1024L * 1024L * 4 - 1)); // 2^32-1
        assertThat(packet.records.get(0).dOctets, is(1024L * 1024L * 1024L * 4 - 1)); // 2^32-1
        assertThat(packet.records.get(0).first, is(1024L * 1024L * 1024L * 4 - 1)); // 2^32-1
        assertThat(packet.records.get(0).last, is(1024L * 1024L * 1024L * 4 - 1)); // 2^32-1
        assertThat(packet.records.get(0).srcPort, is(65536 - 1)); // 2^16-1
        assertThat(packet.records.get(0).dstPort, is(65536 - 1)); // 2^16-1
        assertThat(packet.records.get(0).tcpFlags, is(255)); // 2^8-1
        assertThat(packet.records.get(0).proto, is(255)); // 2^8-1
        assertThat(packet.records.get(0).tos, is(255)); // 2^8-1
        assertThat(packet.records.get(0).srcAs, is(65536 - 1)); // 2^16-1
        assertThat(packet.records.get(0).dstAs, is(65536 - 1)); // 2^16-1
        assertThat(packet.records.get(0).srcMask, is(255)); // 2^8-1
        assertThat(packet.records.get(0).dstMask, is(255)); // 2^8-1
        assertThat(packet.records.get(0).egress, is(false));
    }

