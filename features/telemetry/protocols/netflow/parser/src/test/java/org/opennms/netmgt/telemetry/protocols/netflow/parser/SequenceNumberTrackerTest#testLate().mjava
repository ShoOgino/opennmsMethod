    @Test
    public void testLate() {
        final SequenceNumberTracker tracker = new SequenceNumberTracker(32);

        // Start with first elements
        assertTrue(tracker.verify(95));
        assertTrue(tracker.verify(96));
        assertTrue(tracker.verify(97));
        assertTrue(tracker.verify(98));
        assertTrue(tracker.verify(99));

        // Skip the 100 and insert more elements to barely adhere to the patience
        for (int x = 1; x < tracker.getPatience(); x++) {
            assertTrue(tracker.verify(100 + x));
        }

        // 100 has not been seen and considered late
        assertFalse(tracker.verify(100 + tracker.getPatience()));

        // Followings are there, again
        for (int x = 1; x < tracker.getPatience(); x++) {
            assertTrue(tracker.verify(100 + tracker.getPatience() + x));
        }
    }

