    @Test
    public void canReadValidNetflow5() throws InvalidPacketException {
        execute("/flows/netflow5.dat", flowPacket -> {

            // Verify Header
            assertThat(flowPacket.header.versionNumber, is(0x0005));
            assertThat(flowPacket.header.count, is(2));
            assertThat(flowPacket.header.sysUptime, is(3381L)); // Hex: 0x00000D35
            assertThat(flowPacket.header.unixSecs, is(1430591888L)); // Hex: 0x55451990
            assertThat(flowPacket.header.unixNSecs, is(280328000L)); // Hex: 0x10B57740
            assertThat(flowPacket.header.flowSequence, is(0L));
            assertThat(flowPacket.header.engineId, is(0));
            assertThat(flowPacket.header.engineType, is(0));
            assertThat(flowPacket.header.samplingInterval, is(0));
            assertThat(flowPacket.header.samplingAlgorithm, is(0));

            assertThat(flowPacket.records, hasSize(2));

            assertThat(flowPacket.records.get(0).srcAddr.getHostAddress(), is("10.0.2.2"));
            assertThat(flowPacket.records.get(0).dstAddr.getHostAddress(), is("10.0.2.15"));
            assertThat(flowPacket.records.get(0).nextHop.getHostAddress(), is("0.0.0.0"));
            assertThat(flowPacket.records.get(0).srcPort, is(54435));
            assertThat(flowPacket.records.get(0).dstPort, is(22));
            assertThat(flowPacket.records.get(0).tcpFlags, is(16));
            assertThat(flowPacket.records.get(0).input, is(0));
            assertThat(flowPacket.records.get(0).output, is(0));
            assertThat(flowPacket.records.get(0).dPkts, is(5L));
            assertThat(flowPacket.records.get(0).dOctets, is(230L));
            assertThat(flowPacket.records.get(0).first, is(1024L * 1024L * 1024L * 4L - 1)); // Hex: 0xFFFFFFFF
            assertThat(flowPacket.records.get(0).last, is(2577L)); // Hex: 0x00000A11
            assertThat(flowPacket.records.get(0).proto, is(6));
            assertThat(flowPacket.records.get(0).tos, is(0));
            assertThat(flowPacket.records.get(0).srcAs, is(0));
            assertThat(flowPacket.records.get(0).dstAs, is(0));
            assertThat(flowPacket.records.get(0).srcMask, is(0));
            assertThat(flowPacket.records.get(0).dstMask, is(0));
            assertThat(flowPacket.records.get(0).egress, is(false));

            assertThat(flowPacket.records.get(1).srcAddr.getHostAddress(), is("10.0.2.15"));
            assertThat(flowPacket.records.get(1).dstAddr.getHostAddress(), is("10.0.2.2"));
            assertThat(flowPacket.records.get(1).nextHop.getHostAddress(), is("0.0.0.0"));
            assertThat(flowPacket.records.get(1).srcPort, is(22));
            assertThat(flowPacket.records.get(1).dstPort, is(54435));
            assertThat(flowPacket.records.get(1).tcpFlags, is(24));
            assertThat(flowPacket.records.get(1).input, is(0));
            assertThat(flowPacket.records.get(1).output, is(0));
            assertThat(flowPacket.records.get(1).dPkts, is(4L));
            assertThat(flowPacket.records.get(1).dOctets, is(304L));
            assertThat(flowPacket.records.get(1).first, is(1024L * 1024L * 1024L * 4L - 1)); // Hex: 0xFFFFFFFF
            assertThat(flowPacket.records.get(1).last, is(2577L)); // Hex: 0x00000A11
            assertThat(flowPacket.records.get(1).proto, is(6));
            assertThat(flowPacket.records.get(1).tos, is(0));
            assertThat(flowPacket.records.get(1).srcAs, is(0));
            assertThat(flowPacket.records.get(1).dstAs, is(0));
            assertThat(flowPacket.records.get(1).srcMask, is(0));
            assertThat(flowPacket.records.get(1).dstMask, is(0));
            assertThat(flowPacket.records.get(1).egress, is(true));
        });
    }

