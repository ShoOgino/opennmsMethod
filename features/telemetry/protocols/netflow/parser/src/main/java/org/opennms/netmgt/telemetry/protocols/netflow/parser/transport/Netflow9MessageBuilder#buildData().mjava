    public byte[] buildData() throws IllegalFlowException {

        values.forEach(this::addField);

        long timeStampInMsecs = this.unixSecs != null ? this.unixSecs * 1000 : 0;
        builder.setTimestamp(timeStampInMsecs);

        long bootTime = timeStampInMsecs - this.sysUpTime;

        if (this.firstSwitched != null) {
            builder.setFirstSwitched(setLongValue(this.firstSwitched + bootTime));
        }
        if(this.lastSwitched != null) {
            builder.setLastSwitched(setLongValue(this.lastSwitched + bootTime));
        }

        // Set Destination address and host name.
        first(ipv6DstAddress, ipv4DstAddress).ifPresent(inetAddress -> {
            enrichment.getHostnameFor(inetAddress).ifPresent(builder::setDstHostname);
            builder.setDstAddress(inetAddress.getHostAddress());
        });

        // dst mask
        first(ipv6DstMask, dstMask).ifPresent(dstMaskLen ->
            builder.setDstMaskLen(setIntValue(dstMaskLen.intValue())));

        // Set Source address and host name.
        first(ipv6SrcAddress, ipv4SrcAddress).ifPresent(inetAddress -> {
            enrichment.getHostnameFor(inetAddress).ifPresent(builder::setSrcHostname);
            builder.setSrcAddress(inetAddress.getHostAddress());
        });
        // src mask
        first(ipv6SrcMask, srcMask).ifPresent(srcMaskLen -> builder.setSrcMaskLen(setIntValue(srcMaskLen.intValue())));

        // Set next hop address, hostname.
        first(ipv6NextHop, ipv4NextHop, bgpIpv6NextHop, bgpIpv4NextHop).ifPresent(inetAddress -> {
            enrichment.getHostnameFor(inetAddress).ifPresent(builder::setNextHopHostname);
            builder.setNextHopAddress(inetAddress.getHostAddress());
        });

        if (builder.getFirstSwitched().getValue() > builder.getLastSwitched().getValue()) {
            throw new IllegalFlowException(
                    String.format("lastSwitched must be greater than firstSwitched: srcAddress=%s, dstAddress=%s, firstSwitched=%d, lastSwitched=%d, duration=%d",
                            builder.getSrcAddress(),
                            builder.getDstAddress(),
                            builder.getFirstSwitched().getValue(),
                            builder.getLastSwitched().getValue(),
                            builder.getLastSwitched().getValue() - builder.getFirstSwitched().getValue()));
        }

        // set vlan
        first(srcVlan, dstVlan).ifPresent( vlan -> builder.setVlan(setIntValue(vlan.intValue())));

        Long firstSwitched = builder.hasFirstSwitched() ? builder.getFirstSwitched().getValue() : null;
        Long lastSwitched = builder.hasLastSwitched() ? builder.getLastSwitched().getValue() : null;

        Timeout timeout = new Timeout(flowActiveTimeout, flowInActiveTimeout);
        timeout.setFirstSwitched(firstSwitched);
        timeout.setLastSwitched(lastSwitched);
        timeout.setNumBytes(this.numBytes);
        timeout.setNumPackets(this.numPackets);
        Long deltaSwitched = timeout.getDeltaSwitched();
        getUInt64Value(deltaSwitched).ifPresent(builder::setDeltaSwitched);

        builder.setNetflowVersion(NetflowVersion.V9);
        return builder.build().toByteArray();
    }

