    private void addField(Value<?> value) {
        switch (value.getName()) {

            case "@count":
                getUInt32Value(value).ifPresent(builder::setNumFlowRecords);
                break;
            case "@unixSecs":
                unixSecs = getLongValue(value);
                break;
            case "@unixNSecs":
                unixNSecs = getLongValue(value);
                break;
            case "@sysUptime":
                sysUpTime = getLongValue(value);
                break;
            case "@flowSequence":
                getUInt64Value(value).ifPresent(builder::setFlowSeqNum);
                break;
            case "@engineType":
                getUInt32Value(value).ifPresent(builder::setEngineType);
                break;
            case "@engineId":
                getUInt32Value(value).ifPresent(builder::setEngineId);
                break;
            case "@samplingAlgorithm":
                Long saValue = getLongValue(value);
                SamplingAlgorithm samplingAlgorithm = SamplingAlgorithm.UNASSIGNED;
                if (saValue != null) {
                    switch (saValue.intValue()) {
                        case 1:
                            samplingAlgorithm = SamplingAlgorithm.SYSTEMATIC_COUNT_BASED_SAMPLING;
                            break;
                        case 2:
                            samplingAlgorithm = SamplingAlgorithm.RANDOM_N_OUT_OF_N_SAMPLING;
                            break;
                    }
                }
                builder.setSamplingAlgorithm(samplingAlgorithm);
                break;
            case "@samplingInterval":
                getDoubleValue(value).ifPresent(builder::setSamplingInterval);
                break;

            case "srcAddr":
                srcAddr = getInetAddress(value);
                break;
            case "dstAddr":
                dstAddr = getInetAddress(value);
                break;
            case "nextHop":
                nextHop = getInetAddress(value);
                break;
            case "input":
                getUInt32Value(value).ifPresent(builder::setInputSnmpIfindex);
                break;
            case "output":
                getUInt32Value(value).ifPresent(builder::setOutputSnmpIfindex);
                break;
            case "dPkts":
                getUInt64Value(value).ifPresent(builder::setNumPackets);
                break;
            case "dOctets":
                getUInt64Value(value).ifPresent(builder::setNumBytes);
                break;
            case "first":
                first = getLongValue(value);
                break;
            case "last":
                last = getLongValue(value);
                break;
            case "srcPort":
                getUInt32Value(value).ifPresent(builder::setSrcPort);
                break;
            case "dstPort":
                getUInt32Value(value).ifPresent(builder::setDstPort);
                break;
            case "tcpFlags":
                getUInt32Value(value).ifPresent(builder::setTcpFlags);
                break;
            case "proto":
                getUInt32Value(value).ifPresent(builder::setProtocol);
                break;
            case "srcAs":
                getUInt64Value(value).ifPresent(builder::setSrcAs);
                break;
            case "dstAs":
                getUInt64Value(value).ifPresent(builder::setDstAs);
                break;
            case "tos":
                getUInt32Value(value).ifPresent(builder::setTos);
                break;
            case "srcMask":
                getUInt32Value(value).ifPresent(builder::setSrcMaskLen);
                break;
            case "dstMask":
                getUInt32Value(value).ifPresent(builder::setDstMaskLen);
                break;
            case "egress":
                Boolean egress = getBooleanValue(value);
                Direction direction = egress ? Direction.EGRESS : Direction.INGRESS;
                builder.setDirection(direction);
                break;
        }
    }

