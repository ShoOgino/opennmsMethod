    private void addField(Value<?> value) {

        switch (value.getName()) {
            // Header
            case "@recordCount":
                getUInt32Value(value).ifPresent(builder::setNumFlowRecords);
                break;
            case "@sequenceNumber":
                getUInt64Value(value).ifPresent(builder::setFlowSeqNum);
                break;
            case "@sourceId":
                getUInt64Value(value).ifPresent(srcId ->
                        builder.setNodeIdentifier(String.valueOf(srcId.getValue())));
                break;
            case "@sysUpTime":
                sysUpTime = getLongValue(value);
                break;
            case "@unixSecs":
                unixSecs = getLongValue(value);
                break;
            case "IN_BYTES":
                getUInt64Value(value).ifPresent(bytes -> {
                    numBytes = bytes.getValue();
                    builder.setNumBytes(bytes);
                });
                break;
            case "DIRECTION":
                Long directionValue = getLongValue(value);
                Direction direction = Direction.UNRECOGNIZED;
                if (directionValue != null) {
                    switch (directionValue.intValue()) {
                        case 0:
                            direction = Direction.INGRESS;
                            break;
                        case 1:
                            direction = Direction.EGRESS;
                            break;
                    }
                }
                if (!direction.equals(Direction.UNRECOGNIZED)) {
                    this.builder.setDirection(direction);
                }
                break;
            case "IPV4_DST_ADDR":
                ipv4DstAddress = getInetAddress(value);
                break;
            case "IPV6_DST_ADDR":
                ipv6DstAddress = getInetAddress(value);
                break;
            case "DST_AS":
                getUInt64Value(value).ifPresent(builder::setDstAs);
                break;
            case "IPV6_DST_MASK":
                ipv6DstMask = getLongValue(value);
                break;
            case "DST_MASK":
                dstMask = getLongValue(value);
                break;
            case "L4_DST_PORT":
                getUInt32Value(value).ifPresent(builder::setDstPort);
                break;
            case "ENGINE_ID":
                getUInt32Value(value).ifPresent(builder::setEngineId);
                break;
            case "ENGINE_TYPE":
                getUInt32Value(value).ifPresent(builder::setEngineType);
                break;
            case "FIRST_SWITCHED":
                firstSwitched = getLongValue(value);
                break;
            case "LAST_SWITCHED":
                lastSwitched = getLongValue(value);
                break;
            case "INPUT_SNMP":
                getUInt32Value(value).ifPresent(builder::setInputSnmpIfindex);
                break;
            case "IP_PROTOCOL_VERSION":
                getUInt32Value(value).ifPresent(builder::setIpProtocolVersion);
                break;
            case "OUTPUT_SNMP":
                getUInt32Value(value).ifPresent(builder::setOutputSnmpIfindex);
                break;
            case "IPV6_NEXT_HOP":
                ipv6NextHop = getInetAddress(value);
                break;
            case "IPV4_NEXT_HOP":
                ipv4NextHop = getInetAddress(value);
                break;
            case "BPG_IPV6_NEXT_HOP":
                bgpIpv6NextHop = getInetAddress(value);
                break;
            case "BPG_IPV4_NEXT_HOP":
                bgpIpv4NextHop = getInetAddress(value);
                break;
            case "IN_PKTS":
                getUInt64Value(value).ifPresent(numPackets -> {
                    this.numPackets = numPackets.getValue();
                    builder.setNumPackets(numPackets);
                });
                break;
            case "PROTOCOL":
                getUInt32Value(value).ifPresent(builder::setProtocol);
                break;
            case "SAMPLING_ALGORITHM":
                Long saValue = getLongValue(value);
                SamplingAlgorithm samplingAlgorithm = SamplingAlgorithm.UNASSIGNED;
                if (saValue != null) {
                    if (saValue.intValue() == 1) {
                        samplingAlgorithm = SamplingAlgorithm.SYSTEMATIC_COUNT_BASED_SAMPLING;
                    }
                    if (saValue.intValue() == 2) {
                        samplingAlgorithm = SamplingAlgorithm.RANDOM_N_OUT_OF_N_SAMPLING;
                    }
                }
                builder.setSamplingAlgorithm(samplingAlgorithm);
                break;
            case "SAMPLING_INTERVAL":
                getDoubleValue(value).ifPresent(builder::setSamplingInterval);
                break;
            case "IPV6_SRC_ADDR":
                ipv6SrcAddress = getInetAddress(value);
                break;
            case "IPV4_SRC_ADDR":
                ipv4SrcAddress = getInetAddress(value);
                break;
            case "IPV6_SRC_MASK":
                ipv6SrcMask = getLongValue(value);
                break;
            case "SRC_MASK":
                srcMask = getLongValue(value);
                break;
            case "SRC_AS":
                getUInt64Value(value).ifPresent(builder::setSrcAs);
                break;
            case "L4_SRC_PORT":
                getUInt32Value(value).ifPresent(builder::setSrcPort);
                break;
            case "TCP_FLAGS":
                getUInt32Value(value).ifPresent(builder::setTcpFlags);
                break;
            case "TOS":
                getUInt32Value(value).ifPresent(builder::setTos);
                break;
            case "SRC_VLAN":
                srcVlan = getLongValue(value);
                break;
            case "DST_VLAN":
                dstVlan = getLongValue(value);
                break;
            case "FLOW_ACTIVE_TIMEOUT":
                flowActiveTimeout = getLongValue(value);
                break;
            case "FLOW_INACTIVE_TIMEOUT":
                flowInActiveTimeout = getLongValue(value);
                break;
            case "flowStartMilliseconds":
                flowStartMilliseconds = getLongValue(value);
                break;
            case "flowEndMilliseconds":
                flowEndMilliseconds = getLongValue(value);
                break;
        }

    }

