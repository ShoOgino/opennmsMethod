    private void addField(Value<?> value) {
        switch (value.getName()) {
            case "@exportTime":
                exportTime = getLongValue(value);
                break;
            case "octetDeltaCount":
                octetDeltaCount = getLongValue(value);
                break;
            case "postOctetDeltaCount":
                postOctetDeltaCount = getLongValue(value);
                break;
            case "layer2OctetDeltaCount":
                layer2OctetDeltaCount = getLongValue(value);
                break;
            case "postLayer2OctetDeltaCount":
                postLayer2OctetDeltaCount = getLongValue(value);
                break;
            case "transportOctetDeltaCount":
                transportOctetDeltaCount = getLongValue(value);
                break;
            case "flowDirection":
                Long directionValue = getLongValue(value);
                Direction direction = Direction.UNRECOGNIZED;
                if (directionValue != null) {
                    switch (directionValue.intValue()) {
                        case 0:
                            direction = Direction.INGRESS;
                            break;
                        case 1:
                            direction = Direction.EGRESS;
                            break;
                    }
                }
                if (!direction.equals(Direction.UNRECOGNIZED)) {
                    this.builder.setDirection(direction);
                }
                break;
            case "destinationIPv6Address":
                destinationIPv6Address = getInetAddress(value);
                break;
            case "destinationIPv4Address":
                destinationIPv4Address = getInetAddress(value);
                break;
            case "bgpDestinationAsNumber":
                getUInt64Value(value).ifPresent(builder::setDstAs);
                break;
            case "destinationIPv6PrefixLength":
                destinationIPv6PrefixLength = getLongValue(value);
                break;
            case "destinationIPv4PrefixLength":
                destinationIPv4PrefixLength = getLongValue(value);
                break;
            case "destinationTransportPort":
                getUInt32Value(value).ifPresent(builder::setDstPort);
                break;
            case "engineId":
                getUInt32Value(value).ifPresent(builder::setEngineId);
                break;
            case "engineType":
                getUInt32Value(value).ifPresent(builder::setEngineType);
                break;
            case "@recordCount":
                getUInt32Value(value).ifPresent(builder::setNumFlowRecords);
                break;
            case "@sequenceNumber":
                getUInt64Value(value).ifPresent(builder::setFlowSeqNum);
                break;
            case "ingressInterface":
                getUInt32Value(value).ifPresent(builder::setInputSnmpIfindex);
                break;
            case "ipVersion":
                Long ipVersion = getLongValue(value);
                if (ipVersion != null) {
                    builder.setIpProtocolVersion(setIntValue(ipVersion.intValue()));
                }
                break;
            case "egressInterface":
                getUInt32Value(value).ifPresent( builder::setOutputSnmpIfindex);
                break;
            case "protocolIdentifier":
                getUInt32Value(value).ifPresent(builder::setProtocol);
                break;
            case "tcpControlBits":
                getUInt32Value(value).ifPresent(builder::setTcpFlags);
                break;
            case "ipClassOfService":
                getUInt32Value(value).ifPresent(builder::setTos);
                break;
            case "@observationDomainId":
                Long observationDomainId = getLongValue(value);
                if (observationDomainId != null) {
                    builder.setNodeIdentifier(String.valueOf(observationDomainId));
                }
                break;

            case "flowStartSeconds":
                flowStartSeconds = getTime(value);
                break;
            case "flowStartMilliseconds":
                flowStartMilliseconds = getTime(value);
                break;
            case "flowStartMicroseconds":
                flowStartMicroseconds = getTime(value);
                break;
            case "flowStartNanoseconds":
                flowStartNanoseconds = getTime(value);
                break;
            case "flowStartDeltaMicroseconds":
                flowStartDeltaMicroseconds = getLongValue(value);
                break;
            case "flowStartSysUpTime":
                flowStartSysUpTime = getLongValue(value);
                break;
            case "systemInitTimeMilliseconds":
                systemInitTimeMilliseconds = getTime(value);
                break;
            case "flowEndSeconds":
                flowEndSeconds = getTime(value);
                break;
            case "flowEndMilliseconds":
                flowEndMilliseconds = getTime(value);
                break;
            case "flowEndMicroseconds":
                flowEndMicroseconds = getTime(value);
                break;
            case "flowEndNanoseconds":
                flowEndNanoseconds = getTime(value);
            case "flowEndDeltaMicroseconds":
                flowEndDeltaMicroseconds = getLongValue(value);
                break;
            case "flowEndSysUpTime":
                flowEndSysUpTime = getLongValue(value);
                break;
            case "ipNextHopIPv6Address":
                ipNextHopIPv6Address = getInetAddress(value);
                break;
            case "ipNextHopIPv4Address":
                ipNextHopIPv4Address = getInetAddress(value);
                break;
            case "bgpNextHopIPv6Address":
                bgpNextHopIPv6Address = getInetAddress(value);
                break;
            case "bgpNextHopIPv4Address":
                bgpNextHopIPv4Address = getInetAddress(value);
                break;
            case "packetDeltaCount":
                packetDeltaCount = getLongValue(value);
                break;
            case "postPacketDeltaCount":
                postPacketDeltaCount = getLongValue(value);
                break;
            case "transportPacketDeltaCount":
                transportPacketDeltaCount = getLongValue(value);
                break;
            case "samplingAlgorithm":
                samplingAlgorithm = getLongValue(value);
                break;
            case "samplerMode":
                samplerMode = getLongValue(value);
                break;
            case "selectorAlgorithm":
                selectorAlgorithm = getLongValue(value);
                break;
            case "samplingInterval":
                samplingInterval = getLongValue(value);
                break;
            case "samplerRandomInterval":
                samplerRandomInterval = getLongValue(value);
                break;
            case "samplingFlowInterval":
                samplingFlowInterval = getLongValue(value);
                break;
            case "samplingFlowSpacing":
                samplingFlowSpacing = getLongValue(value);
                break;
            case "flowSamplingTimeInterval":
                flowSamplingTimeInterval = getLongValue(value);
                break;
            case "flowSamplingTimeSpacing":
                flowSamplingTimeSpacing = getLongValue(value);
                break;
            case "samplingSize":
                samplingSize = getLongValue(value);
                break;
            case "samplingPopulation":
                samplingPopulation = getLongValue(value);
                break;
            case "samplingProbability":
                samplingProbability = getLongValue(value);
                break;
            case "hashSelectedRangeMin":
                hashSelectedRangeMin = getLongValue(value);
                break;
            case "hashSelectedRangeMax":
                hashSelectedRangeMax = getLongValue(value);
                break;
            case "hashOutputRangeMin":
                hashOutputRangeMin = getLongValue(value);
                break;
            case "hashOutputRangeMax":
                hashOutputRangeMax = getLongValue(value);
                break;
            case "sourceIPv6Address":
                sourceIPv6Address = getInetAddress(value);
                break;
            case "sourceIPv4Address":
                sourceIPv4Address = getInetAddress(value);
                break;
            case "sourceIPv6PrefixLength":
                sourceIPv6PrefixLength = getLongValue(value);
                break;
            case "sourceIPv4PrefixLength":
                sourceIPv4PrefixLength = getLongValue(value);
                break;
            case "sourceTransportPort":
                getUInt32Value(value).ifPresent(builder::setSrcPort);
                break;
            case "vlanId":
                vlanId = getLongValue(value);
                break;
            case "postVlanId":
                postVlanId = getLongValue(value);
                break;
            case "dot1qVlanId":
                dot1qVlanId = getLongValue(value);
                break;
            case "dot1qCustomerVlanId":
                dot1qCustomerVlanId = getLongValue(value);
                break;
            case "postDot1qVlanId":
                postDot1qVlanId = getLongValue(value);
                break;
            case "postDot1qCustomerVlanId":
                postDot1qCustomerVlanId = getLongValue(value);
                break;
            case "flowActiveTimeout":
                flowActiveTimeout = getLongValue(value);
                break;
            case "flowInactiveTimeout":
                flowInactiveTimeout = getLongValue(value);
                break;
        }
    }

