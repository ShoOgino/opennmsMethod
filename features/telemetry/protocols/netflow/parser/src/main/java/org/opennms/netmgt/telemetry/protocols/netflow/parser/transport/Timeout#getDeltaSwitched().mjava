    public Long getDeltaSwitched() {
        if (flowActiveTimeout != null && flowInActiveTimeout != null) {
            long active = flowActiveTimeout * 1000;
            long inActive = flowInActiveTimeout * 1000;
            long numBytes = this.numBytes != null ? this.numBytes : 0;
            long numPackets = this.numPackets != null ? this.numPackets : 0;
            long firstSwitched = this.firstSwitched != null ? this.firstSwitched: 0;
            long lastSwitched = this.lastSwitched != null ? this.lastSwitched : 0;
            return Optional.of(this)
                    .map(timeoutValue -> (numBytes > 0 || numPackets > 0) ? active : inActive)
                    .map(timeoutValue -> lastSwitched - timeoutValue)
                    .map(t -> Math.max(firstSwitched, t)).orElse(firstSwitched);
        }
        return firstSwitched;
    }

