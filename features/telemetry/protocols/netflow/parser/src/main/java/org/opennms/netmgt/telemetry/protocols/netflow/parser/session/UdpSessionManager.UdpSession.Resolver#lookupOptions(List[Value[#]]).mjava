            @Override
            public List<Value<?>> lookupOptions(final List<Value<?>> values) {
                final LinkedHashMap<String, Value<?>> options = new LinkedHashMap<>();

                final Set<String> scoped = values.stream().map(Value::getName).collect(Collectors.toSet());

                for (final Map.Entry<TemplateKey, Map<Set<Value<?>>, List<Value<?>>>> e : Iterables.filter(UdpSessionManager.this.options.entrySet(),
                                                                                                   e -> Objects.equals(e.getKey().domain.sessionKey, UdpSession.this.sessionKey) &&
                                                                                                        Objects.equals(e.getKey().domain.observationDomainId, this.observationDomainId))) {
                    final Template template = UdpSessionManager.this.templates.get(e.getKey()).template;

                    if (scoped.containsAll(template.scopeNames)) {
                        // Found option template where scoped fields is subset of actual data fields

                        final Set<Value<?>> scopeValues = values.stream()
                                .filter(s -> template.scopeNames.contains(s.getName()))
                                .collect(Collectors.toSet());

                        for (final Value<?> value : e.getValue().getOrDefault(scopeValues, Collections.emptyList())) {
                            options.put(value.getName(), value);
                        }
                    }
                }

                return new ArrayList<>(options.values());
            }

