    /*
     *  Test the behaviour when a new controller is added after the daemon has started.
     *  
     *  Verify:
     *  	That the proper events are sent by the daemon.
     */
    @Test
    @JUnitSnmpAgents(value={
            @JUnitSnmpAgent(host="10.1.0.2", port=161, resource=SNMP_DATA_PATH + "10.1.0.2-walk.txt"),
            @JUnitSnmpAgent(host="10.1.1.2", port=161, resource=SNMP_DATA_PATH + "10.1.1.2-walk.txt")
    })
    public void testAddControllerToPackage() throws Exception {
    	// Add AP1 and AP2 to the default package
    	addNewAccessPoint("ap1", AP1_MAC, "default");
    	addNewAccessPoint("ap2", AP2_MAC, "default");
    	
    	// Add a single controller to the default package
    	addNewController("amc1", "10.1.0.2", "default");
    	
    	// Set the access point state
    	setOidValueForAccessPoint("10.1.0.2", AP1_MAC, 1);
    	setOidValueForAccessPoint("10.1.0.2", AP2_MAC, 0);
    	
    	setOidValueForAccessPoint("10.1.1.2", AP1_MAC, 0);
    	setOidValueForAccessPoint("10.1.1.2", AP2_MAC, 1);

    	// Anticipate the events
    	anticipateApStatusEvent(AP1_MAC, "UP");
    	anticipateApStatusEvent(AP2_MAC, "DOWN");
    	
    	// Initialize and start the daemon
    	initApmdWithConfig(getMultiControllerClusteredConfig());
        m_apm.start();

        // Verify the events
        verifyAnticipated(POLLING_INTERVAL_DELTA);

    	// Anticipate the events
    	anticipateApStatusEvent(AP1_MAC, "UP");
    	anticipateApStatusEvent(AP2_MAC, "UP");
    	
        // Add the second controller
        addNewController("amc2", "10.1.1.2", "default");

        // Verify the events
        verifyAnticipated(POLLING_INTERVAL_DELTA);
    }

