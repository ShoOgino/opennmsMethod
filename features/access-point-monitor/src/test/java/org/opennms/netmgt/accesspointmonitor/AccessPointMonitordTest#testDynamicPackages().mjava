    @Test
    public void testDynamicPackages() throws Exception {
    	// A package name that matches the mask
    	addNewAccessPoint("ap1", AP1_MAC, "dynamic-pkg-1");
    	
    	initApmdWithConfig(getDynamicPackageConfig());
    	m_apm.start();
    	sleep(PACKAGE_SCAN_INTERVAL*2);
    	assertEquals(1, m_apm.getActivePackageNames().size());
    	
    	// Another package name that matches the mask
    	addNewAccessPoint("ap2", AP2_MAC, "dynamic-pkg-2");
    	
    	// A package name that does not match the mask
    	addNewAccessPoint("ap3", AP3_MAC, "default");
    	
    	sleep(PACKAGE_SCAN_INTERVAL*2);
    	assertEquals(2, m_apm.getActivePackageNames().size());
    	
    	// Change the package name for AP1 - the package should be unscheduled
    	OnmsAccessPoint ap1 = m_accessPointDao.findByPhysAddr(AP1_MAC);
    	ap1.setPollingPackage("default");
    	m_accessPointDao.update(ap1);
    	m_accessPointDao.flush();
    	
    	List<String> packageNames = m_accessPointDao.findDistinctPackagesLike("dynamic-pkg-%");
    	assertEquals(1, packageNames.size());
    	
    	sleep(PACKAGE_SCAN_INTERVAL*2);
    	assertEquals(1, m_apm.getActivePackageNames().size());
    	
    	// Change the package name for AP1 - the package should be unscheduled
    	ap1.setPollingPackage("dynamic-pkg-2");
    	m_accessPointDao.update(ap1);
    	m_accessPointDao.flush();
    	
    	sleep(PACKAGE_SCAN_INTERVAL*2);
    	assertEquals(1, m_apm.getActivePackageNames().size());
    	
    	// Reload the daemon
    	updateConfigAndReloadDaemon(getDynamicPackageConfig(), true);
    	
    	sleep(PACKAGE_SCAN_INTERVAL*2);
    	
    	assertEquals(1, m_apm.getActivePackageNames().size());
    }

