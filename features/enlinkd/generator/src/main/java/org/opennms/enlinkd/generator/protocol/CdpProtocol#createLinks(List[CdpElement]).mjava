    private List<CdpLink> createLinks(List<CdpElement> cdpElements) {
        PairGenerator<CdpElement> pairs = createPairGenerator(cdpElements);
        List<CdpLink> links = new ArrayList<>();
        for (int i = 0; i < topologySettings.getAmountLinks() / 2; i++) {

            // We create 2 links that reference each other, see also LinkdToplologyProvider.matchCdpLinks()
            Pair<CdpElement, CdpElement> pair = pairs.next();
            CdpElement sourceElement = pair.getLeft();
            CdpElement targetElement = pair.getRight();

            int sourceIfIndex = nodeIfIndexes.get(sourceElement.getNode().getId());
            int targetIfIndex = nodeIfIndexes.get(targetElement.getNode().getId());

            CdpLink sourceLink = createCdpLink(sourceElement.getNode(), UUID.randomUUID().toString(),
                    UUID.randomUUID().toString(), targetElement.getCdpGlobalDeviceId(), sourceIfIndex);
            links.add(sourceLink);

            String targetCdpCacheDevicePort = sourceLink.getCdpInterfaceName();
            String targetCdpInterfaceName = sourceLink.getCdpCacheDevicePort();
            String targetCdpGlobalDeviceId = sourceElement.getCdpGlobalDeviceId();
            CdpLink targetLink = createCdpLink(targetElement.getNode(), targetCdpInterfaceName,
                    targetCdpCacheDevicePort, targetCdpGlobalDeviceId, targetIfIndex);
            links.add(targetLink);
            context.currentProgress(String.format("Linked node %s with node %s", sourceElement.getNode().getLabel(),
                    targetElement.getNode().getLabel()));
        }
        return links;
    }

