    @Override
    protected void createAndPersistProtocolSpecificEntities(List<OnmsNode> nodes) {

        context.currentProgress("Version 7"); // TODO: delete later just for testing purpose

        // Call with: enlinkd:generate-topology --protocol bridgeBridge --nodes 10 --snmpinterfaces 0 --ipinterfaces 0
        //      here is complete example of bridge topology
       // 4 nodes are bridges: nodeBridgeA, nodeBridgeB, nodeBridgeC, nodeBridgeD
       //              B
       //           --------  
       //           |      |
       //           A      C
       //         -----
       //           |
       //           D 
       // 6 nodes are hosts: nodeHostE, nodeHostF, nodeHostG, nodeHostH, nodeHostI, nodeHostL 
       // generate 4 ipnettomedia without a corresponding node  
       // consider also that on port 1 of C is connected an HUB with a group of hosts connected
       // the hub has no snmp agent and therefore we are not to explore his mab forwarding table 
        
        OnmsNode nodeBridgeA =  nodes.get(0);
        OnmsNode nodeBridgeB =  nodes.get(1);
        OnmsNode nodeBridgeC =  nodes.get(2);
        OnmsNode nodeBridgeD =  nodes.get(3);

        // create bridge element
        BridgeElement bridgeA = createBridgeElement(nodeBridgeA, 1 ,"default");
        BridgeElement bridgeB = createBridgeElement(nodeBridgeB, 1 ,"default");
        BridgeElement bridgeC = createBridgeElement(nodeBridgeC, 1 ,"default");
        BridgeElement bridgeD = createBridgeElement(nodeBridgeD, 1 ,"default");

        this.context.getTopologyPersister().persist(bridgeA,bridgeB,bridgeC,bridgeD);
        
        //First persist bridge topology
        // nodeBridgeB:port24 connected to nodeBridgeA port4
        // save snmpinterface and bridgebridgelink
        context.getTopologyPersister().persist(createSnmpInterface(4, nodeBridgeA), 
                                               createSnmpInterface(24, nodeBridgeB));
        context.getTopologyPersister().persist(createBridgeBridgeLink(nodeBridgeA, nodeBridgeB, 4, 24,1));

        // nodeBridgeB:port23 connected to nodeBridgeC port3
        // save snmpinterface and bridgebridgelink
        context.getTopologyPersister().persist(createSnmpInterface(23, nodeBridgeB), createSnmpInterface(3, nodeBridgeC));
        context.getTopologyPersister().persist(createBridgeBridgeLink(nodeBridgeC, nodeBridgeB, 3, 23,1));

        // nodeBridgeD:port1 connected to nodeBridgeA port11
        // save snmpinterface and bridgebridgelink
        context.getTopologyPersister().persist(createSnmpInterface(1, nodeBridgeD), createSnmpInterface(11, nodeBridgeA));
        context.getTopologyPersister().persist(createBridgeBridgeLink(nodeBridgeD, nodeBridgeA, 1, 11,1));
        
        //generate host topology
        // here ip addresses are needed

        // nodeHostE port 1 is connected on port 5 of nodeBridgeA
        // ipinterface -> nodeHostE - 192.168.0.11
        OnmsNode nodeHostE =  nodes.get(4);
        String macE=macGenerator.next();
        OnmsSnmpInterface snmpInterfaceE = createSnmpInterface(1, nodeHostE);
        context.getTopologyPersister().persist(createSnmpInterface(5, nodeBridgeA),snmpInterfaceE);
        OnmsIpInterface ipInterfaceE = createIpInterface(snmpInterfaceE, inetGenerator.next());
        context.getTopologyPersister().persist(ipInterfaceE);
        context.getTopologyPersister().persist(
           createIpNetToMedia(nodeHostE, snmpInterfaceE.getIfIndex(), snmpInterfaceE.getIfName(),macE, ipInterfaceE.getIpAddress(), nodeBridgeA)
                );
        context.getTopologyPersister().persist(createBridgeMacLink(nodeBridgeA, 5, 1, macE));
        
        // nodeHostF port 1 is connected on port 5 of nodeBridgeA
        // ipinterface -> nodeHostF - 192.168.0.12
        OnmsNode nodeHostF =  nodes.get(5);
        String macF=macGenerator.next();
        OnmsSnmpInterface snmpInterfaceF = createSnmpInterface(1, nodeHostF);
        context.getTopologyPersister().persist(createSnmpInterface(6, nodeBridgeA),snmpInterfaceF);
        OnmsIpInterface ipInterfaceF = createIpInterface(snmpInterfaceF, inetGenerator.next());
        context.getTopologyPersister().persist(ipInterfaceF);
        context.getTopologyPersister().persist(
           createIpNetToMedia(nodeHostF, snmpInterfaceF.getIfIndex(), snmpInterfaceF.getIfName(),macF, ipInterfaceF.getIpAddress(), nodeBridgeA)
                );
        context.getTopologyPersister().persist(createBridgeMacLink(nodeBridgeA, 5, 1, macF));
        

        // nodeHostG port 10 is connected on port 10 of nodeBridgeC
        // ipinterface -> nodeHostF - 192.168.0.13
        OnmsNode nodeHostG =  nodes.get(6);
        String macG=macGenerator.next();
        OnmsSnmpInterface snmpInterfaceG = createSnmpInterface(10, nodeHostG);
        context.getTopologyPersister().persist(createSnmpInterface(10, nodeBridgeC),snmpInterfaceG);
        OnmsIpInterface ipInterfaceG = createIpInterface(snmpInterfaceG, inetGenerator.next());
        context.getTopologyPersister().persist(ipInterfaceG);
        context.getTopologyPersister().persist(
           createIpNetToMedia(nodeHostG, snmpInterfaceG.getIfIndex(), snmpInterfaceG.getIfName(),macG, ipInterfaceG.getIpAddress(), nodeBridgeA)
                );
        context.getTopologyPersister().persist(createBridgeMacLink(nodeBridgeC, 10, 1, macG));

        // nodeHostH port 11 is connected on port 11 of nodeBridgeD
        // ipinterface -> nodeHostH - 192.168.0.14
        OnmsNode nodeHostH =  nodes.get(7);
        String macH=macGenerator.next();
        OnmsSnmpInterface snmpInterfaceH = createSnmpInterface(11, nodeHostH);
        context.getTopologyPersister().persist(createSnmpInterface(11, nodeBridgeD),snmpInterfaceH);
        OnmsIpInterface ipInterfaceH = createIpInterface(snmpInterfaceH, inetGenerator.next());
        context.getTopologyPersister().persist(ipInterfaceH);
        context.getTopologyPersister().persist(
           createIpNetToMedia(nodeHostH, snmpInterfaceH.getIfIndex(), snmpInterfaceH.getIfName(),macH, ipInterfaceH.getIpAddress(), nodeBridgeA)
                );
        context.getTopologyPersister().persist(createBridgeMacLink(nodeBridgeD, 11, 1, macH));
 
        // nodeHostI  is connected on port 12 of nodeBridgeD
        // ipinterface -> nodeHostI - 192.168.0.15
        OnmsNode nodeHostI =  nodes.get(8);
        String macI=macGenerator.next();
        context.getTopologyPersister().persist(createSnmpInterface(12, nodeBridgeD));
        OnmsIpInterface ipInterfaceI = createIpInterface(null, inetGenerator.next());
        ipInterfaceI.setNode(nodeHostI);
        context.getTopologyPersister().persist(ipInterfaceI);
        context.getTopologyPersister().persist(
           createIpNetToMedia(nodeHostI, null, null,macI, ipInterfaceI.getIpAddress(), nodeBridgeA)
                );
        context.getTopologyPersister().persist(createBridgeMacLink(nodeBridgeD, 12, 1, macI));

        // nodeHostL  is connected on port 13 of nodeBridgeD
        // ipinterface -> nodeHostI - 192.168.0.16
        OnmsNode nodeHostL =  nodes.get(9);
        String macL=macGenerator.next();
        context.getTopologyPersister().persist(createSnmpInterface(13, nodeBridgeD));
        OnmsIpInterface ipInterfaceL = createIpInterface(null, inetGenerator.next());
        ipInterfaceL.setNode(nodeHostL);
        context.getTopologyPersister().persist(ipInterfaceL);
        context.getTopologyPersister().persist(
           createIpNetToMedia(nodeHostL, null, null,macL, ipInterfaceL.getIpAddress(), nodeBridgeA)
                );
        context.getTopologyPersister().persist(createBridgeMacLink(nodeBridgeD, 13, 1, macL));

        // adding some mac addresses and ip on a cloud on port 23 bridge B ---
        for (int i=0; i<5;i++) {
            String nextMac = macGenerator.next();
            context.getTopologyPersister().persist(
                   createIpNetToMedia(null, null, null,nextMac, inetGenerator.next(), nodeBridgeA)
                    );
            context.getTopologyPersister().persist(createBridgeMacLink(nodeBridgeB, 23, 1, nextMac));
        }
        
        // you can also have mac addresses without an ip address associated
        for (int i=0; i<10;i++) {
            context.getTopologyPersister().persist(createBridgeMacLink(nodeBridgeB, 23, 1, macGenerator.next()));
        }
    }

