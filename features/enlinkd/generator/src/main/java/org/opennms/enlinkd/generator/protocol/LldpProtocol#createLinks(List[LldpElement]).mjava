    private List<LldpLink> createLinks(List<LldpElement> elements) {
        PairGenerator<LldpElement> pairs = createPairGenerator(elements);
        List<LldpLink> links = new ArrayList<>();
        for (int i = 0; i < topologySettings.getAmountLinks() / 2; i++) {

            // We create 2 links that reference each other, see also LinkdToplologyProvider.match...Links()
            Pair<LldpElement, LldpElement> pair = pairs.next();
            LldpElement sourceElement = pair.getLeft();
            LldpElement targetElement = pair.getRight();

            LldpUtils.LldpPortIdSubType portIdSubType = LldpUtils.LldpPortIdSubType.LLDP_PORTID_SUBTYPE_MACADDRESS;
            LldpUtils.LldpPortIdSubType portIdSubTypeRemote =
                    LldpUtils.LldpPortIdSubType.LLDP_PORTID_SUBTYPE_MACADDRESS;

            int sourceIfIndex = nodeIfIndexes.get(sourceElement.getNode().getId());
            int targetIfIndex = nodeIfIndexes.get(targetElement.getNode().getId());
            String portId = sourceElement.getNode().getId() + "-" + sourceIfIndex;
            String portIdRemote = sourceElement.getNode().getId() + "-" + sourceIfIndex;

            LldpLink sourceLink = createLink(sourceElement.getNode(), portId, portIdSubType, portIdRemote,
                    portIdSubTypeRemote, targetElement.getLldpChassisId(), sourceIfIndex);
            links.add(sourceLink);

            LldpLink targetLink = createLink(targetElement.getNode(), portIdRemote, portIdSubTypeRemote, portId,
                    portIdSubType, sourceElement.getLldpChassisId(), targetIfIndex);
            links.add(targetLink);

            context.currentProgress(String.format("Linked node %s with node %s", sourceElement.getNode().getLabel(),
                    targetElement.getNode().getLabel()));
        }
        return links;
    }

