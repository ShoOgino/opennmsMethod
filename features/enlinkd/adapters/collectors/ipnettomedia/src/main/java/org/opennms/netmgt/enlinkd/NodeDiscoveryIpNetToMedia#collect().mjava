    protected void collect() {

    	final Date now = new Date(); 

        IpNetToMediaTableTracker ipNetToMediaTableTracker = new IpNetToMediaTableTracker() {
            public void processIpNetToMediaRow(final IpNetToMediaRow row) {
                IpNetToMedia macep = row.getIpNetToMedia();

                if (LOG.isDebugEnabled()) {
                    LOG.debug("processIpNetToMediaRow: node [{}], {}:{}:{}. ",
                          getNodeId(),
                          macep.getPhysAddress(),
                          str(macep.getNetAddress()),
                          macep.getIpNetToMediaType());
                }
                
                if (macep.getPhysAddress() == null
                        || macep.getNetAddress() == null
                        || macep.getIpNetToMediaType() == null
                        || macep.getIpNetToMediaType() == IpNetToMediaType.IPNETTOMEDIA_TYPE_INVALID) {
                    return;
                }
                m_ipNetToMediaTopologyService.store(getNodeId(), macep);
            }
        };
		
        SnmpAgentConfig peer = getSnmpAgentConfig();
        try {
            getLocationAwareSnmpClient().walk(peer,
                                                      ipNetToMediaTableTracker).withDescription("ipNetToMedia").withLocation(getLocation()).execute().get();
        } catch (ExecutionException e) {
            LOG.debug("run: node [{}]: ExecutionException: {}", 
                     getNodeId(), e.getMessage());
            return;
        } catch (final InterruptedException e) {
            LOG.debug("run: node [{}]: InterruptedException: {}",
                     getNodeId(),e.getMessage());
            return;       
        }

        m_ipNetToMediaTopologyService.reconcile(getNodeId(), now);
    }

