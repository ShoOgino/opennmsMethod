    @Override
    public OnmsTopology buildTopology() {
        final OnmsTopology topology = new OnmsTopology();

        // Load all of the UDLs
        final List<UserDefinedLink> udls = udlTopologyService.findAllUserDefinedLinks();

        // Determine the set of nodes that are referenced by the UDLs
        final Set<Integer> referencedNodes = new HashSet<>();
        // Sources
        referencedNodes.addAll(udls.stream()
                .map(UserDefinedLink::getNodeIdA)
                .collect(Collectors.toSet()));
        // Targets
        referencedNodes.addAll(udls.stream()
                .map(UserDefinedLink::getNodeIdZ)
                .collect(Collectors.toSet()));

        // Add vertices for all of the nodes
        final Map<Integer, NodeTopologyEntity> nodeMap = getNodeMap();
        final Map<Integer, IpInterfaceTopologyEntity> ipMap = getIpPrimaryMap();
        final Map<Integer, OnmsTopologyVertex> nodeVertexMap = new LinkedHashMap<>();
        for (Integer nodeId: referencedNodes) {
            final OnmsTopologyVertex nodeVertex = create(nodeMap.get(nodeId), ipMap.get(nodeId));
            nodeVertexMap.put(nodeId, nodeVertex);
            topology.addVertex(nodeVertex);
        }

        // Now create the edges
        for (UserDefinedLink udl : udls) {
            final String uniqueLinkId = Integer.toString(udl.getDbId());
            final OnmsTopologyPort sourcePort = OnmsTopologyPort.create(uniqueLinkId + "|A", nodeVertexMap.get(udl.getNodeIdA()), null);
            sourcePort.setToolTipText(udl.getComponentLabelA());

            final OnmsTopologyPort targetPort = OnmsTopologyPort.create(uniqueLinkId + "|Z", nodeVertexMap.get(udl.getNodeIdZ()), null);
            targetPort.setToolTipText(udl.getComponentLabelZ());

            final OnmsTopologyEdge edge = OnmsTopologyEdge.create(uniqueLinkId, sourcePort, targetPort);
            edge.setToolTipText(udl.getLinkLabel());
            topology.addEdge(edge);
        }

        return topology;
    }

