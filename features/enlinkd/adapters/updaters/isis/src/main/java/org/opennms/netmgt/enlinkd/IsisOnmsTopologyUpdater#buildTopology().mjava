    @Override
    public OnmsTopology buildTopology() {
        Map<Integer, NodeTopologyEntity> nodeMap= getNodeMap();
        Map<Integer, IpInterfaceTopologyEntity> ipMap= getIpPrimaryMap();
        Table<Integer, Integer,SnmpInterfaceTopologyEntity> nodeToOnmsSnmpTable = getSnmpInterfaceTable();

        OnmsTopology topology = new OnmsTopology();
        for ( IsIsElementTopologyEntity element: m_isisTopologyService.findAllIsIsElements()) {
            topology.getVertices().add(create(nodeMap.get(element.getNodeId()),ipMap.get(element.getNodeId())));
        }
        
    for(TopologyConnection<IsIsLinkTopologyEntity, IsIsLinkTopologyEntity> pair : m_isisTopologyService.match()){
        topology.getEdges().add(
                                OnmsTopologyEdge.create(
                                                            Topology.getDefaultEdgeId(pair.getLeft().getId(), pair.getRight().getId()),
                                                            create(topology.getVertex(pair.getLeft().getNodeIdAsString()), 
                                                                   pair.getLeft(), 
                                                                   pair.getRight(),
                                                                   nodeToOnmsSnmpTable.get(pair.getLeft().getNodeId(), pair.getLeft().getIsisCircIfIndex())
                                                                   ), 
                                                            create(topology.getVertex(pair.getRight().getNodeIdAsString()), 
                                                                   pair.getRight(), 
                                                                   pair.getLeft(),
                                                                   nodeToOnmsSnmpTable.get(pair.getRight().getNodeId(), pair.getRight().getIsisCircIfIndex())
                                                                   )
                                                            )
                                );
       }
        
        return topology;
    }

