    @Override
    public void runDiscovery() {
        LOG.info("run: calculate topology on broadcast domains. Start");
        
        Map<Integer, Map<Integer, Set<BridgeForwardingTableEntry>>> nodeondomainbft 
            = new HashMap<Integer, Map<Integer, Set<BridgeForwardingTableEntry>>>();

        Map<Integer, Set<BridgeForwardingTableEntry>> nodeBft 
            = new HashMap<Integer, Set<BridgeForwardingTableEntry>>();
        Map<Integer, Set<String>> nodeMacs 
        = new HashMap<Integer, Set<String>>();

        Set<Integer> nodeids 
        = new HashSet<Integer>(
                m_bridgeTopologyService.getUpdateBftMap().keySet());
        
        LOG.debug("run: nodes with updated bft {}", nodeids);

        for (Integer nodeid : nodeids) {
            Set<BridgeForwardingTableEntry> links = m_bridgeTopologyService.useBridgeTopologyUpdateBFT(nodeid);

            if (links == null || links.size() == 0) {
                LOG.warn("run: node:[{}]. no updated bft. Return", nodeid);
                continue;
            }
            nodeBft.put(nodeid, links);
            Set<String> macs = new HashSet<String>();
            for (BridgeForwardingTableEntry link : links) {
                macs.add(link.getMacAddress());
            }
            LOG.debug("run: node:[{}]. macs:{}", nodeid, macs);
            nodeMacs.put(nodeid, macs);
        }

        Set<Integer> parsed = new HashSet<Integer>();

        for (Integer nodeidA : nodeBft.keySet()) {
            if (parsed.contains(nodeidA)) {
                continue;
            }
            nodeondomainbft.put(nodeidA,
                                new HashMap<Integer, Set<BridgeForwardingTableEntry>>());
            nodeondomainbft.get(nodeidA).put(nodeidA, nodeBft.get(nodeidA));
            parsed.add(nodeidA);
            for (Integer nodeidB : nodeBft.keySet()) {
                if (parsed.contains(nodeidB)) {
                    continue;
                }
                if (BroadcastDomain.checkMacSets(nodeMacs.get(nodeidA),
                                                 nodeMacs.get(nodeidB))) {
                    nodeondomainbft.get(nodeidA).put(nodeidB,
                                                     nodeBft.get(nodeidB));
                    parsed.add(nodeidB);
                }
            }
        }

        List<Callable<String>> taskList = new ArrayList<Callable<String>>();
        for (Integer nodeid : nodeondomainbft.keySet()) {
            LOG.debug("run: nodes are on same domain {}",nodeondomainbft.get(nodeid).keySet());
            try {
                BroadcastDomain domain = find(nodeondomainbft.get(nodeid).keySet(),
                                              nodeMacs.get(nodeid));
                DiscoveryBridgeTopology nodebridgetopology = new DiscoveryBridgeTopology(domain);
                
                synchronized (domain) {
                    for (Integer bridgeId : nodeondomainbft.get(nodeid).keySet()) {
                        nodebridgetopology.addUpdatedBFT(bridgeId,
                                                         nodeondomainbft.get(nodeid).get(bridgeId));
                        m_bridgeTopologyService.updateBridgeOnDomain(domain,bridgeId);
                    }
                }
                                
                Callable<String> task = () -> {
                    synchronized (domain) {
                        
                        Date now = new Date();
                        LOG.debug("run: calculate start"); 
                        nodebridgetopology.calculate();
                        LOG.debug("run: calculate end"); 
                    
                        LOG.debug("run: save start");
                        try {
                            m_bridgeTopologyService.store(domain, now);
                        } catch (BridgeTopologyException e) {
                            LOG.error("run: saving topology failed: {}. {}", 
                                      e.getMessage(),
                                      e.printTopology());
                        } catch (ConcurrentModificationException e) {
                            LOG.error("run: bridge:[{}], saving topology failed: {}. {}", 
                                      e.getMessage(),
                                      domain.printTopology());
                        }
                        LOG.debug("run: save end");
                    }
                    return "executed Task: " + nodebridgetopology.getInfo();
                };
                taskList.add(task);
                LOG.info("run: added Task {}", nodebridgetopology.getInfo());
            } catch (BridgeTopologyException e) {
                LOG.error("run: node: [{}], getting broadcast domain. Failed {}",
                          nodeid, e.getMessage());
                continue;
            }
        }

        int n = taskList.size();
        if (n > m_maxthreads) {
            n = m_maxthreads;
        }

        if (n > 0) {
            LOG.debug("run: creating executorService with {} Threads", n);
            ExecutorService executorService = Executors.newFixedThreadPool(n);
            LOG.debug("run: created executorService with {} Threads", n);

            try {
                for (Future<String> future : executorService.invokeAll(taskList)) {
                    LOG.info("run: {}", future.get());
                }
            } catch (InterruptedException | ExecutionException e) {
                LOG.error("run: executing task {}", e.getMessage(), e);
            }
            executorService.shutdown();
        } else {
            LOG.info("run: no updates on broadcast domains");
        }
        LOG.info("run: calculate topology on broadcast domains. End");

    }

