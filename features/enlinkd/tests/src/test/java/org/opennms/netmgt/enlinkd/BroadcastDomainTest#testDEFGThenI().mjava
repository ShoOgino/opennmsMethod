    @Test 
    public void testDEFGThenI() throws BridgeTopologyException {
        DEFGHILTopology topology = new DEFGHILTopology();

        BroadcastDomain domain = new BroadcastDomain();
        Bridge.create(domain,topology.nodeDId);
        Bridge.create(domain,topology.nodeEId);
        Bridge.create(domain,topology.nodeFId);
        Bridge.create(domain,topology.nodeGId);
        Bridge.create(domain,topology.nodeIId);
        setBridgeElements(domain,topology.elemlist);

        DiscoveryBridgeTopology ndbt= new DiscoveryBridgeTopology(domain);
        
        ndbt.addUpdatedBFT((topology.nodeDId),topology.bftD);
        ndbt.addUpdatedBFT((topology.nodeEId),topology.bftE);
        ndbt.addUpdatedBFT((topology.nodeFId),topology.bftF);
        ndbt.addUpdatedBFT((topology.nodeGId),topology.bftG);
        ndbt.calculate();
        
        topology.checkDEFG(ndbt.getDomain());
        
        ndbt.addUpdatedBFT((topology.nodeIId),topology.bftI);
        ndbt.calculate();
        
        for (BridgeForwardingTableEntry bftentry: BroadcastDomain.calculateBFT(domain, domain.getBridge(topology.nodeIId))) {
            assertEquals(topology.nodeIId.intValue(), bftentry.getNodeId().intValue());
            if (bftentry.getMacAddress().equals(topology.mac1)) {
                assertEquals(topology.portII.intValue(), bftentry.getBridgePort().intValue());
            } else if (bftentry.getMacAddress().equals(topology.mac2)) {
                assertEquals(topology.portII.intValue(), bftentry.getBridgePort().intValue());
            } else if (bftentry.getMacAddress().equals(topology.mac3)) {
                assertEquals(topology.portI3.intValue(), bftentry.getBridgePort().intValue());
            } else if (bftentry.getMacAddress().equals(topology.mac4)) {
                assertEquals(topology.portI4.intValue(), bftentry.getBridgePort().intValue());
            } else if (bftentry.getMacAddress().equals(topology.mac5)) {
                assertEquals(topology.portII.intValue(), bftentry.getBridgePort().intValue());
            } else if (bftentry.getMacAddress().equals(topology.mac6)) {
                assertEquals(topology.portII.intValue(), bftentry.getBridgePort().intValue());
            } else if (bftentry.getMacAddress().equals(topology.mac7)) {
                assertEquals(topology.portII.intValue(), bftentry.getBridgePort().intValue());
            } else if (bftentry.getMacAddress().equals(topology.mac8)) {
                assertEquals(topology.portII.intValue(), bftentry.getBridgePort().intValue());
            } else {
                assertEquals(0, 1);
            }
        }

        for (BridgeForwardingTableEntry bftentry: BroadcastDomain.calculateBFT(domain, domain.getBridge(topology.nodeGId))) {
            assertEquals(topology.nodeGId.intValue(), bftentry.getNodeId().intValue());
            if (bftentry.getMacAddress().equals(topology.mac1)) {
                assertEquals(topology.portGD.intValue(), bftentry.getBridgePort().intValue());
            } else if (bftentry.getMacAddress().equals(topology.mac2)) {
                assertEquals(topology.portGD.intValue(), bftentry.getBridgePort().intValue());
            } else if (bftentry.getMacAddress().equals(topology.mac3)) {
                assertEquals(topology.portGF.intValue(), bftentry.getBridgePort().intValue());
            } else if (bftentry.getMacAddress().equals(topology.mac4)) {
                assertEquals(topology.portGF.intValue(), bftentry.getBridgePort().intValue());
            } else if (bftentry.getMacAddress().equals(topology.mac5)) {
                assertEquals(topology.portGE.intValue(), bftentry.getBridgePort().intValue());
            } else if (bftentry.getMacAddress().equals(topology.mac6)) {
                assertEquals(topology.portGE.intValue(), bftentry.getBridgePort().intValue());
            } else if (bftentry.getMacAddress().equals(topology.mac7)) {
                assertEquals(topology.portG7.intValue(), bftentry.getBridgePort().intValue());
            } else if (bftentry.getMacAddress().equals(topology.mac8)) {
                assertEquals(topology.portG8.intValue(), bftentry.getBridgePort().intValue());
            } else {
                assertEquals(0, 1);
            }
        }


    }

