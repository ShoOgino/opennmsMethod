        public void checkBcalcBC(SharedSegment segment) throws BridgeTopologyException {
            assertEquals(nodeBId, segment.getDesignatedBridge().intValue());
            switch (segment.getDesignatedPort().getBridgePort().intValue()) {
            case 1:
                assertEquals(1, segment.getBridgePortsOnSegment().size());
                assertEquals(0, SharedSegment.getBridgeBridgeLinks(segment).size());
                assertEquals(3, segment.getMacsOnSegment().size());
                assertEquals(3, SharedSegment.getBridgeMacLinks(segment).size());
                break;
            case 2:
                assertEquals(2, segment.getBridgePortsOnSegment().size());
                assertEquals(2, segment.getBridgePort(nodeBId).getBridgePort().intValue());
                assertEquals(11, segment.getBridgePort(nodeCId).getBridgePort().intValue());
                assertEquals(macsOnWirelessSegment.length+forwardersABCD.length+macsonEport23.length, segment.getMacsOnSegment().size());
                for (String mac: macsOnWirelessSegment) {
                    assertTrue(segment.containsMac(mac));
                }
                for (String mac: forwardersABCD) {
                    assertTrue(segment.containsMac(mac));
                }
                for (String mac: macsonEport23) {
                    assertTrue(segment.containsMac(mac));
                }
                assertEquals(macsOnWirelessSegment.length+forwardersABCD.length+macsonEport23.length, SharedSegment.getBridgeMacLinks(segment).size());
                assertEquals(1, SharedSegment.getBridgeBridgeLinks(segment).size());
                BridgeBridgeLink blink = SharedSegment.getBridgeBridgeLinks(segment).iterator().next();  
                assertEquals(nodeBId, blink.getDesignatedNode().getId().intValue());
                assertEquals(2, blink.getDesignatedPort().intValue());
                assertEquals(11, blink.getBridgePort().intValue());
                break;
            case 3:
                assertEquals(1, segment.getBridgePortsOnSegment().size());
                assertEquals(macsonBport3.length, segment.getMacsOnSegment().size());
                for (String mac: macsonBport3) {
                    assertTrue(segment.containsMac(mac));
                }
                break;
            case 4:
                assertEquals(1, segment.getBridgePortsOnSegment().size());
                assertEquals(macsonBport4.length, segment.getMacsOnSegment().size());
                for (String mac: macsonBport4) {
                    assertTrue(segment.containsMac(mac));
                }
                break;

            default:
                assertTrue(false);
                break;
            }
            
        }

