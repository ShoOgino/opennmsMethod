    @Test
    @JUnitSnmpAgents(value={
            @JUnitSnmpAgent(host=PE01_IP, port=161, resource=PE01_SNMP_RESOURCE)
    })
    public void testNms7918PE01Collection() throws Exception {
        final OnmsNode pe01 = m_nodeDao.findByForeignId("linkd", PE01_NAME);
        final OnmsNode asw01 = m_nodeDao.findByForeignId("linkd", ASW01_NAME);
        final OnmsNode ospess01 = m_nodeDao.findByForeignId("linkd", OSPESS01_NAME);
        final OnmsNode ospwl01 = m_nodeDao.findByForeignId("linkd", OSPWL01_NAME);
        final OnmsNode samasw01 = m_nodeDao.findByForeignId("linkd", SAMASW01_NAME);
        final OnmsNode stcasw01 = m_nodeDao.findByForeignId("linkd", STCASW01_NAME);
        m_linkdConfig.getConfiguration().setUseBridgeDiscovery(true);
        m_linkdConfig.getConfiguration().setUseCdpDiscovery(false);
        m_linkdConfig.getConfiguration().setUseOspfDiscovery(false);
        m_linkdConfig.getConfiguration().setUseLldpDiscovery(false);
        m_linkdConfig.getConfiguration().setUseIsisDiscovery(false);

        assertTrue(!m_linkdConfig.useLldpDiscovery());
        assertTrue(!m_linkdConfig.useCdpDiscovery());
        assertTrue(!m_linkdConfig.useOspfDiscovery());
        assertTrue(m_linkdConfig.useBridgeDiscovery());
        assertTrue(!m_linkdConfig.useIsisDiscovery());
        
        assertTrue(m_linkd.scheduleNodeCollection(pe01.getId()));

        assertEquals(0,m_bridgeBridgeLinkDao.countAll());
        assertEquals(0,m_bridgeMacLinkDao.countAll());
        assertEquals(0,m_ipNetToMediaDao.countAll());
        
        assertTrue(m_linkd.runSingleSnmpCollection(pe01.getId()));
        assertEquals(0,m_bridgeBridgeLinkDao.countAll());
        assertEquals(0,m_bridgeMacLinkDao.countAll());
        assertEquals(113,m_ipNetToMediaDao.countAll());
        m_ipNetToMediaDao.findAll().stream().forEach(ntm -> System.err.println(ntm.toString()));
        
        assertNull(m_linkd.getBridgeTopologyService().useBridgeTopologyUpdateBFT(pe01.getId()));
              
        List<MacPort> mps = m_bridgeTopologyService.getMacPorts();
        assertEquals(37, mps.size());
        System.err.println("-----------------------");
        mps.stream().filter(mp -> mp.getMacPortMap().containsKey(pe01macaddress)).forEach(mp -> {
            assertEquals(1, mp.getMacPortMap().size());
            Set<InetAddress> ips = mp.getMacPortMap().get(pe01macaddress);
            assertEquals(45, ips.size());
            ips.contains(InetAddressUtils.addr(PE01_IP));
            ips.contains(InetAddressUtils.addr("10.27.19.1"));
            assertEquals(pe01.getId() ,mp.getNodeId());
            assertEquals(-1,mp.getIfIndex().intValue());
            assertNull(mp.getMacPortName());
            System.err.println(mp.printTopology());
            System.err.println(mp.getPortMacInfo());
   });
        System.err.println("-----------------------");
        
        System.err.println("-----------------------");
        mps.stream().filter(mp -> mp.getMacPortMap().containsKey(asw01mac01)).forEach(mp -> {
            assertEquals(1, mp.getMacPortMap().size());
            Set<InetAddress> ips = mp.getMacPortMap().get(asw01mac01);
            assertEquals(1, ips.size());
            ips.contains(InetAddressUtils.addr(ASW01_IP));
            assertEquals(asw01.getId() ,mp.getNodeId());
            assertEquals(-1,mp.getIfIndex().intValue());
            assertNull(mp.getMacPortName());
            System.err.println(mp.printTopology());
            System.err.println(mp.getPortMacInfo());
   });
        System.err.println("-----------------------");

        System.err.println("-----------------------");
        mps.stream().filter(mp -> mp.getMacPortMap().containsKey(ospess01mac)).forEach(mp -> {
            assertEquals(1, mp.getMacPortMap().size());
            Set<InetAddress> ips = mp.getMacPortMap().get(ospess01mac);
            assertEquals(5, ips.size());
            ips.contains(InetAddressUtils.addr(OSPESS01_IP));
            assertEquals(ospess01.getId() ,mp.getNodeId());
            assertEquals(-1,mp.getIfIndex().intValue());
            assertNull(mp.getMacPortName());
            System.err.println(mp.printTopology());
            System.err.println(mp.getPortMacInfo());
   });
        System.err.println("-----------------------");

        System.err.println("-----------------------");
        mps.stream().filter(mp -> mp.getMacPortMap().containsKey(ospedalewl01mac)).forEach(mp -> {
            assertEquals(1, mp.getMacPortMap().size());
            Set<InetAddress> ips = mp.getMacPortMap().get(ospedalewl01mac);
            assertEquals(1, ips.size());
            ips.contains(InetAddressUtils.addr(OSPWL01_IP));
            assertEquals(ospwl01.getId() ,mp.getNodeId());
            assertEquals(-1,mp.getIfIndex().intValue());
            assertNull(mp.getMacPortName());
            System.err.println(mp.printTopology());
            System.err.println(mp.getPortMacInfo());
   });
        System.err.println("-----------------------");

        System.err.println("-----------------------");
        mps.stream().filter(mp -> mp.getMacPortMap().containsKey(samasw01mac)).forEach(mp -> {
            assertEquals(1, mp.getMacPortMap().size());
            Set<InetAddress> ips = mp.getMacPortMap().get(samasw01mac);
            assertEquals(2, ips.size());
            ips.contains(InetAddressUtils.addr(SAMASW01_IP));
            assertEquals(samasw01.getId() ,mp.getNodeId());
            assertEquals(-1,mp.getIfIndex().intValue());
            assertNull(mp.getMacPortName());
            System.err.println(mp.printTopology());
            System.err.println(mp.getPortMacInfo());
   });
        System.err.println("-----------------------");

        System.err.println("-----------------------");
        mps.stream().filter(mp -> mp.getMacPortMap().containsKey(stcasw01mac)).forEach(mp -> {
            assertEquals(1, mp.getMacPortMap().size());
            Set<InetAddress> ips = mp.getMacPortMap().get(stcasw01mac);
            assertEquals(1, ips.size());
            ips.contains(InetAddressUtils.addr(STCASW01_IP));
            assertEquals(stcasw01.getId() ,mp.getNodeId());
            assertEquals(-1,mp.getIfIndex().intValue());
            assertNull(mp.getMacPortName());
            System.err.println(mp.printTopology());
            System.err.println(mp.getPortMacInfo());
   });
        System.err.println("-----------------------");

    }

