    @Test
    @JUnitSnmpAgents(value={
            @JUnitSnmpAgent(host=SWITCH1_IP, port=161, resource=SWITCH1_SNMP_RESOURCE),
            @JUnitSnmpAgent(host=SWITCH2_IP, port=161, resource=SWITCH2_SNMP_RESOURCE),
            @JUnitSnmpAgent(host=SWITCH3_IP, port=161, resource=SWITCH3_SNMP_RESOURCE)
    })
    public void testNetwork17216LldpTopology() throws Exception {
        m_nodeDao.save(builder.getSwitch1());
        m_nodeDao.save(builder.getSwitch2());
        m_nodeDao.save(builder.getSwitch3());
        
        m_nodeDao.flush();

        m_linkdConfig.getConfiguration().setUseBridgeDiscovery(false);
        m_linkdConfig.getConfiguration().setUseCdpDiscovery(false);
        m_linkdConfig.getConfiguration().setUseOspfDiscovery(false);
        m_linkdConfig.getConfiguration().setUseLldpDiscovery(true);
        m_linkdConfig.getConfiguration().setUseIsisDiscovery(false);

        assertTrue(m_linkdConfig.useLldpDiscovery());
        assertTrue(!m_linkdConfig.useCdpDiscovery());
        assertTrue(!m_linkdConfig.useOspfDiscovery());
        assertTrue(!m_linkdConfig.useBridgeDiscovery());
        assertTrue(!m_linkdConfig.useIsisDiscovery());
        
        // reload daemon and support only: LLDP updates
        m_linkd.reload();
        assertTrue(getSupportedProtocolsAsProtocolSupported().contains(ProtocolSupported.NODES));
        assertEquals(3, getSupportedProtocolsAsProtocolSupported().size());
        assertTrue(!getSupportedProtocolsAsProtocolSupported().contains(ProtocolSupported.BRIDGE));
        assertTrue(!getSupportedProtocolsAsProtocolSupported().contains(ProtocolSupported.CDP));
        assertTrue(!getSupportedProtocolsAsProtocolSupported().contains(ProtocolSupported.ISIS));
        assertTrue(getSupportedProtocolsAsProtocolSupported().contains(ProtocolSupported.LLDP));
        assertTrue(!getSupportedProtocolsAsProtocolSupported().contains(ProtocolSupported.OSPF));
        assertTrue(getSupportedProtocolsAsProtocolSupported().contains(ProtocolSupported.USERDEFINED));

        final OnmsNode switch1 = m_nodeDao.findByForeignId("linkd", SWITCH1_NAME);
        final OnmsNode switch2 = m_nodeDao.findByForeignId("linkd", SWITCH2_NAME);
        final OnmsNode switch3 = m_nodeDao.findByForeignId("linkd", SWITCH3_NAME);

        assertTrue(m_linkd.scheduleNodeCollection(switch1.getId()));
        assertTrue(m_linkd.scheduleNodeCollection(switch2.getId()));
        assertTrue(m_linkd.scheduleNodeCollection(switch3.getId()));

        assertTrue(m_linkd.runSingleSnmpCollection(switch1.getId()));
        assertEquals(4, m_lldpLinkDao.countAll());
        assertTrue(m_lldpTopologyService.hasUpdates());
        
        assertTrue(m_linkd.runSingleSnmpCollection(switch2.getId()));
        assertEquals(10, m_lldpLinkDao.countAll());
        assertTrue(m_lldpTopologyService.hasUpdates());
                
        LldpOnmsTopologyUpdater lldptopology = m_linkd.getLldpTopologyUpdater();
        assertNotNull(lldptopology);
        OnmsTopology topology = lldptopology.buildTopology();
        assertEquals(2, topology.getVertices().size());
        assertEquals(4, topology.getEdges().size());
        
        OnmsTopologyLogger tl = createAndSubscribe(
                  ProtocolSupported.LLDP.name());
        assertEquals("LLDP:Consumer:Logger", tl.getName());
                
        System.err.println("--------Printing new start----------");
        m_linkd.runTopologyUpdater(ProtocolSupported.LLDP);
        System.err.println("--------Printing new end----------");
        assertEquals(6, tl.getQueue().size());

        OnmsTopology lldptopo2 = m_topologyDao.getTopology(ProtocolSupported.LLDP.name());
        assertEquals(2, lldptopo2.getVertices().size());
        assertEquals(4, lldptopo2.getEdges().size());

        assertTrue(m_linkd.runSingleSnmpCollection(switch3.getId()));
        assertEquals(3, m_lldpElementDao.countAll());
        assertEquals(12, m_lldpLinkDao.countAll());
        assertTrue(m_lldpTopologyService.hasUpdates());
        System.err.println("-------- updates start----------");
        m_linkd.runTopologyUpdater(ProtocolSupported.LLDP);
        System.err.println("-------- updates end----------");
        assertEquals(9, tl.getQueue().size());
        int vertices = 0;
        int edges = 0;
        for (OnmsTopologyMessage m: tl.getQueue()) {
            assertEquals(TopologyUpdater.create(ProtocolSupported.LLDP), m.getProtocol());
            assertEquals(TopologyMessageStatus.UPDATE, m.getMessagestatus());
            if (m.getMessagebody() instanceof OnmsTopologyVertex) {
                OnmsTopologyVertex vertex = (OnmsTopologyVertex) m.getMessagebody();
                assertNotNull(vertex.getId());
                assertNotNull(vertex.getNodeid());
                assertNotNull(vertex.getLabel());
                assertNotNull(vertex.getAddress());
                assertNotNull(vertex.getIconKey());
                assertNotNull(vertex.getToolTipText());
                vertices++;
            } else if (m.getMessagebody() instanceof OnmsTopologyEdge ) {
                OnmsTopologyEdge edge = (OnmsTopologyEdge) m.getMessagebody();
                assertNotNull(edge.getId());
                assertNotNull(edge.getSource().getVertex());
                assertNotNull(edge.getTarget().getVertex());
                edges++;
            } else {
                assertTrue(false);
            }
        }
        assertEquals(3, vertices);
        assertEquals(6, edges);

        OnmsTopology lldptopo3 = m_topologyDao.getTopology(ProtocolSupported.LLDP.name());
        assertEquals(3, lldptopo3.getVertices().size());
        assertEquals(6, lldptopo3.getEdges().size());
    }

