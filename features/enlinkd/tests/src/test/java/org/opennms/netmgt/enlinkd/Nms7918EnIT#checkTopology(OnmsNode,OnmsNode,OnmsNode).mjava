    private void checkTopology(OnmsNode  asw01, OnmsNode stcasw01, OnmsNode samasw01)    {
        //the final size of bridgemaclink is 
        // 76 =
        // 21 = 21 (21 mac are learned on the common shared and entry for each port, the ports are 3 
        //+ 5 = macs learned on port 1 of asw01
        //+ 1 = mac learned on port 3 of asw01
        //+ 4 = mac learned on port 4 of asw01
        //+ 1 = mac learned on port 23 of sam
        //+ 1 = mac learned on port 19 of stc
        //+ 1 = mac learned on port 24 of stc
        //=34 bridge link
        //+3 forwarders
        //+6 double forwarders
        //=49
        for (BridgeBridgeLink bblink : m_bridgeBridgeLinkDao.findAll()) {
            assertNotNull(bblink);
            assertEquals(asw01.getId(), bblink.getDesignatedNode().getId());
            assertEquals(2, bblink.getDesignatedPort().intValue());
            assertEquals(1002, bblink.getDesignatedPortIfIndex().intValue());
            if (stcasw01.getId().intValue() ==  bblink.getNode().getId().intValue()) {
                assertEquals(11, bblink.getBridgePort().intValue());
                assertEquals(1011, bblink.getBridgePortIfIndex().intValue());
            } else if (samasw01.getId().intValue() ==  bblink.getNode().getId().intValue()) {
                assertEquals(3, bblink.getBridgePort().intValue());
                assertEquals(3, bblink.getBridgePortIfIndex().intValue());
            } else {
                assertTrue(false);
            }
        }
        int count=0;

        for (String mac: asw01port2forwarders) {
            List<BridgeMacLink>links = m_bridgeMacLinkDao.findByMacAddress(mac);
            assertEquals(1, links.size());
            for (BridgeMacLink link:  links) {
                assertEquals(asw01.getId(), link.getNode().getId());
                assertEquals(mac, link.getMacAddress());
                assertEquals(2, link.getBridgePort().intValue());
                assertEquals(1002, link.getBridgePortIfIndex().intValue());
                assertEquals(BridgeMacLinkType.BRIDGE_FORWARDER, link.getLinkType());
            }
        }
        count+=asw01port2forwarders.length;

        for (String mac: stcport11forwarders) {
            List<BridgeMacLink>links = m_bridgeMacLinkDao.findByMacAddress(mac);
            assertEquals(1, links.size());
            for (BridgeMacLink link:  links) {
                assertEquals(stcasw01.getId(), link.getNode().getId());
                assertEquals(mac, link.getMacAddress());
                assertEquals(11, link.getBridgePort().intValue());
                assertEquals(1011, link.getBridgePortIfIndex().intValue());
                assertEquals(BridgeMacLinkType.BRIDGE_FORWARDER, link.getLinkType());
            }
        }
        count+=stcport11forwarders.length;

        for (String mac: asw01port1) {
            List<BridgeMacLink>links = m_bridgeMacLinkDao.findByMacAddress(mac);
            assertEquals(1, links.size());
            BridgeMacLink link = links.iterator().next();
            assertEquals(asw01.getId(), link.getNode().getId());
            assertEquals(1, link.getBridgePort().intValue());
            assertEquals(1001, link.getBridgePortIfIndex().intValue());
            assertEquals(mac, link.getMacAddress());
            assertEquals(BridgeMacLinkType.BRIDGE_LINK, link.getLinkType());
        }
        count+=asw01port1.length;
        
        for (String mac: asw01port3) {
            List<BridgeMacLink>links = m_bridgeMacLinkDao.findByMacAddress(mac);
            assertEquals(1, links.size());
            BridgeMacLink link = links.iterator().next();
            assertEquals(asw01.getId(), link.getNode().getId());
            assertEquals(3, link.getBridgePort().intValue());
            assertEquals(1003, link.getBridgePortIfIndex().intValue());
            assertEquals(mac, link.getMacAddress());
            assertEquals(BridgeMacLinkType.BRIDGE_LINK, link.getLinkType());
        }
        count+=asw01port3.length;
        
        for (String mac: asw01port4) {
            List<BridgeMacLink>links = m_bridgeMacLinkDao.findByMacAddress(mac);
            assertEquals(1, links.size());
            BridgeMacLink link = links.iterator().next();
            assertEquals(asw01.getId(), link.getNode().getId());
            assertEquals(4, link.getBridgePort().intValue());
            assertEquals(1004, link.getBridgePortIfIndex().intValue());
            assertEquals(mac, link.getMacAddress());
            assertEquals(BridgeMacLinkType.BRIDGE_LINK, link.getLinkType());
        }
        count+=asw01port4.length;

        for (String mac: samport23) {
            List<BridgeMacLink>links = m_bridgeMacLinkDao.findByMacAddress(mac);
            assertEquals(1, links.size());
            BridgeMacLink link = links.iterator().next();
            assertEquals(samasw01.getId(), link.getNode().getId());
            assertEquals(23, link.getBridgePort().intValue());
            assertEquals(23, link.getBridgePortIfIndex().intValue());
            assertEquals(mac, link.getMacAddress());
            assertEquals(BridgeMacLinkType.BRIDGE_LINK, link.getLinkType());
        }
        count+=samport23.length;

        for (String mac: stcport19) {
            List<BridgeMacLink>links = m_bridgeMacLinkDao.findByMacAddress(mac);
            assertEquals(1, links.size());
            BridgeMacLink link = links.iterator().next();
            assertEquals(stcasw01.getId(), link.getNode().getId());
            assertEquals(19, link.getBridgePort().intValue());
            assertEquals(1019, link.getBridgePortIfIndex().intValue());
            assertEquals(mac, link.getMacAddress());
            assertEquals(BridgeMacLinkType.BRIDGE_LINK, link.getLinkType());
        }
        count+=stcport19.length;
        
        for (String mac: stcport24) {
            List<BridgeMacLink>links = m_bridgeMacLinkDao.findByMacAddress(mac);
            assertEquals(1, links.size());
            BridgeMacLink link = links.iterator().next();
            assertEquals(stcasw01.getId(), link.getNode().getId());
            assertEquals(24, link.getBridgePort().intValue());
            assertEquals(1024, link.getBridgePortIfIndex().intValue());
            assertEquals(mac, link.getMacAddress());
            assertEquals(BridgeMacLinkType.BRIDGE_LINK, link.getLinkType());
        }
        count+=stcport24.length;


        for (String mac: samasw01shared) {
            List<BridgeMacLink>links = m_bridgeMacLinkDao.findByMacAddress(mac);
            for (BridgeMacLink link: links) {
                assertEquals(mac, link.getMacAddress());
                assertEquals(BridgeMacLinkType.BRIDGE_FORWARDER, link.getLinkType());
                if (link.getNode().getId() == samasw01.getId()) {
                    assertEquals(3, link.getBridgePort().intValue());
                    assertEquals(3, link.getBridgePortIfIndex().intValue());
                } else if (link.getNode().getId() == asw01.getId()) {
                    assertEquals(2, link.getBridgePort().intValue());
                    assertEquals(1002, link.getBridgePortIfIndex().intValue());                    
                } else {
                    assertEquals(0, 1);
                }
            }
        }
        count+=samasw01shared.length;
        count+=samasw01shared.length;

        for (String mac: stcasw01shared) {
            List<BridgeMacLink>links = m_bridgeMacLinkDao.findByMacAddress(mac);
            assertEquals(2, links.size());
            for (BridgeMacLink link: links) {
                assertEquals(mac, link.getMacAddress());
                assertEquals(BridgeMacLinkType.BRIDGE_FORWARDER, link.getLinkType());
                if (link.getNode().getId() == stcasw01.getId()) {
                    assertEquals(11, link.getBridgePort().intValue());
                    assertEquals(1011, link.getBridgePortIfIndex().intValue());
                } else if (link.getNode().getId() == asw01.getId()) {
                    assertEquals(2, link.getBridgePort().intValue());
                    assertEquals(1002, link.getBridgePortIfIndex().intValue());                                        
                } else {
                    assertEquals(0, 1);
                }
            }
        }
        count+=stcasw01shared.length;
        count+=stcasw01shared.length;

        for (String mac: stcsamshared) {
            List<BridgeMacLink>links = m_bridgeMacLinkDao.findByMacAddress(mac);
            assertEquals(2, links.size());
            for (BridgeMacLink link: links) {
                assertEquals(mac, link.getMacAddress());
                assertEquals(BridgeMacLinkType.BRIDGE_FORWARDER, link.getLinkType());
                if (link.getNode().getId() == stcasw01.getId()) {
                    assertEquals(11, link.getBridgePort().intValue());
                    assertEquals(1011, link.getBridgePortIfIndex().intValue());                    
                } else if (link.getNode().getId() == samasw01.getId()) {
                    assertEquals(3, link.getBridgePort().intValue());
                    assertEquals(3, link.getBridgePortIfIndex().intValue());                    
                } else {
                    assertEquals(0, 1);
                }
            }
        }
        count+=stcsamshared.length;
        count+=stcsamshared.length;

        for (String mac: shared) {
            List<BridgeMacLink>links = m_bridgeMacLinkDao.findByMacAddress(mac);
            assertEquals(1, links.size());
            for (BridgeMacLink link:  links) {
                assertEquals(asw01.getId(), link.getNode().getId());
                assertEquals(mac, link.getMacAddress());
                assertEquals(2, link.getBridgePort().intValue());
                assertEquals(1002, link.getBridgePortIfIndex().intValue());
                assertEquals(BridgeMacLinkType.BRIDGE_LINK, link.getLinkType());
            }
        }
        count+=shared.length;
        assertEquals(count,m_bridgeMacLinkDao.countAll());
    }

