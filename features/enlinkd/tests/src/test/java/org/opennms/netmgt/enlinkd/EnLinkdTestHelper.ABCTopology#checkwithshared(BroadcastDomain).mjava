        public void checkwithshared(BroadcastDomain domain) throws BridgeTopologyException {
            assertEquals(0, domain.getForwarders(nodeAId).size());
            assertEquals(0, domain.getForwarders(nodeCId).size());
            assertEquals(1, domain.getForwarders(nodeBId).size());
            BridgePortWithMacs forwentry = domain.getForwarders(nodeBId).iterator().next();
            assertEquals(nodeBId.intValue(), forwentry.getPort().getNodeId().intValue());
            assertEquals(portBA.intValue(), forwentry.getPort().getBridgePort().intValue());
            assertEquals(1, forwentry.getMacs().size());
            assertEquals(macA, forwentry.getMacs().iterator().next());
            List<SharedSegment> shsegms = domain.getSharedSegments();
            assertEquals(5, shsegms.size());
            for (SharedSegment shared: shsegms) {
                List<BridgeMacLink> links = SharedSegment.getBridgeMacLinks(shared);
                List<BridgeBridgeLink> bblinks = SharedSegment.getBridgeBridgeLinks(shared);
                if (shared.noMacsOnSegment()) {
                    assertEquals(2, shared.getBridgeIdsOnSegment().size());
                    assertEquals(0, links.size());
                    assertEquals(1, bblinks.size());
                    BridgeBridgeLink bblink = bblinks.iterator().next();
                    if (bblink.getDesignatedNode().getId() == nodeAId) {
                        assertEquals(nodeAId, bblink.getDesignatedNode().getId());
                        assertEquals(nodeBId, bblink.getNode().getId());
                        assertEquals(portBA, bblink.getBridgePort());
                        assertEquals(portAB, bblink.getDesignatedPort());
                     } else {
                        assertEquals(false, true);
                     }
               } else if (shared.getMacsOnSegment().contains(shar)) {
                   assertEquals(2, shared.getBridgeIdsOnSegment().size());
                   assertEquals(1, links.size());
                   assertEquals(1, bblinks.size());
                   assertEquals(1, shared.getMacsOnSegment().size());
                   BridgeBridgeLink bblink = bblinks.iterator().next();
                   assertEquals(nodeCId, bblink.getNode().getId());
                   assertEquals(nodeBId, bblink.getDesignatedNode().getId());
                   assertEquals(portCB, bblink.getBridgePort());
                   assertEquals(portBC, bblink.getDesignatedPort());
                   
                   BridgeMacLink link = links.iterator().next();
                   assertEquals(nodeBId, link.getNode().getId());
                   assertEquals(portBC,link.getBridgePort());
                   assertEquals(shar, link.getMacAddress());
                   assertEquals(BridgeMacLinkType.BRIDGE_LINK, link.getLinkType());
                   
               } else if (shared.getMacsOnSegment().contains(mac1)) {
                    assertEquals(1, shared.getBridgeIdsOnSegment().size());
                    assertEquals(1, links.size());
                    assertEquals(0, bblinks.size());
                    assertEquals(nodeAId, shared.getDesignatedBridge());
                    assertEquals(portA,shared.getDesignatedPort().getBridgePort());
                    assertTrue(!shared.noMacsOnSegment());
                    BridgeMacLink link = links.iterator().next();
                    assertEquals(nodeAId, link.getNode().getId());
                    assertEquals(portA,link.getBridgePort());
                    assertEquals(mac1, link.getMacAddress());
                    assertEquals(BridgeMacLinkType.BRIDGE_LINK, link.getLinkType());
                } else if (shared.getMacsOnSegment().contains(mac2)) {
                    assertEquals(1, shared.getBridgeIdsOnSegment().size());
                    assertEquals(1, links.size());
                    assertEquals(0, bblinks.size());
                    assertEquals(nodeBId, shared.getDesignatedBridge());
                    assertEquals(portB,shared.getDesignatedPort().getBridgePort());
                    assertTrue(!shared.noMacsOnSegment());
                    BridgeMacLink link = links.iterator().next();
                    assertEquals(nodeBId, link.getNode().getId());
                    assertEquals(portB,link.getBridgePort());
                    assertEquals(mac2, link.getMacAddress());
                    assertEquals(BridgeMacLinkType.BRIDGE_LINK, link.getLinkType());
                } else if (shared.getMacsOnSegment().contains(mac3)) {
                    assertEquals(1, shared.getBridgeIdsOnSegment().size());
                    assertEquals(1, links.size());
                    assertEquals(0, bblinks.size());
                    assertEquals(nodeCId, shared.getDesignatedBridge());
                    assertEquals(portC,shared.getDesignatedPort().getBridgePort());
                    assertTrue(!shared.noMacsOnSegment());
                    BridgeMacLink link = links.iterator().next();
                    assertEquals(nodeCId, link.getNode().getId());
                    assertEquals(portC,link.getBridgePort());
                    assertEquals(mac3, link.getMacAddress());
                    assertEquals(BridgeMacLinkType.BRIDGE_LINK, link.getLinkType());
                } else {
                    assertEquals(false, true);
                }
            }
        }

