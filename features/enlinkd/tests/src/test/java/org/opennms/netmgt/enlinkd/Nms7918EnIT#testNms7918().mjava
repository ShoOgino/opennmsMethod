    @Test
    @JUnitSnmpAgents(value={
            @JUnitSnmpAgent(host=ASW01_IP, port=161, resource=ASW01_SNMP_RESOURCE),
            @JUnitSnmpAgent(host=SAMASW01_IP, port=161, resource=SAMASW01_SNMP_RESOURCE),
            @JUnitSnmpAgent(host=STCASW01_IP, port=161, resource=STCASW01_SNMP_RESOURCE)
    })
    public void testNms7918() throws Exception {
        final OnmsNode stcasw01 = m_nodeDao.findByForeignId("linkd", STCASW01_NAME);
        final OnmsNode samasw01 = m_nodeDao.findByForeignId("linkd", SAMASW01_NAME);
        final OnmsNode asw01 = m_nodeDao.findByForeignId("linkd", ASW01_NAME);
        m_linkdConfig.getConfiguration().setUseBridgeDiscovery(true);
        m_linkdConfig.getConfiguration().setUseCdpDiscovery(false);
        m_linkdConfig.getConfiguration().setUseOspfDiscovery(false);
        m_linkdConfig.getConfiguration().setUseLldpDiscovery(false);
        m_linkdConfig.getConfiguration().setUseIsisDiscovery(false);
        m_linkdConfig.getConfiguration().setMaxBft(3);
        assertTrue(!m_linkdConfig.useLldpDiscovery());
        assertTrue(!m_linkdConfig.useCdpDiscovery());
        assertTrue(!m_linkdConfig.useOspfDiscovery());
        assertTrue(m_linkdConfig.useBridgeDiscovery());
        assertTrue(!m_linkdConfig.useIsisDiscovery());

        assertTrue(m_linkd.scheduleNodeCollection(asw01.getId()));
        assertTrue(m_linkd.scheduleNodeCollection(samasw01.getId()));
        assertTrue(m_linkd.scheduleNodeCollection(stcasw01.getId()));

        assertEquals(0,m_ipNetToMediaDao.countAll());
        assertEquals(0,m_bridgeElementDao.countAll());
        assertEquals(0,m_bridgeStpLinkDao.countAll());
        assertEquals(0,m_bridgeBridgeLinkDao.countAll());
        assertEquals(0,m_bridgeMacLinkDao.countAll());
        assertEquals(0,m_bridgeTopologyService.getMacPorts().size());

        assertTrue(m_linkd.runSingleSnmpCollection(asw01.getId()));
        assertTrue(m_linkd.runSingleSnmpCollection(samasw01.getId()));
        assertTrue(m_linkd.runSingleSnmpCollection(stcasw01.getId()));
        assertEquals(2,m_ipNetToMediaDao.countAll());
        assertEquals(3,m_bridgeElementDao.countAll());
        assertEquals(0,m_bridgeStpLinkDao.countAll());
        assertEquals(0,m_bridgeBridgeLinkDao.countAll());
        assertEquals(0,m_bridgeMacLinkDao.countAll());
        assertEquals(1,m_bridgeTopologyService.getMacPorts().size());
        m_ipNetToMediaDao.findAll().stream().forEach(ntm -> System.err.println(ntm.toString()));
        
        m_linkd.runDiscoveryBridgeDomains();
        assertEquals(2,m_ipNetToMediaDao.countAll());
        assertEquals(3,m_bridgeElementDao.countAll());
        assertEquals(0,m_bridgeStpLinkDao.countAll());
        assertEquals(2,m_bridgeBridgeLinkDao.countAll());
        assertEquals(49,m_bridgeMacLinkDao.countAll());
        assertEquals(1,m_bridgeTopologyService.getMacPorts().size());
        checkTopology(asw01,stcasw01,samasw01);
        
        //Another cycle to verify that run works fine with 2 of 3
        assertTrue(m_linkd.runSingleSnmpCollection(asw01.getId()));
        m_linkd.runDiscoveryBridgeDomains();
        assertEquals(2,m_ipNetToMediaDao.countAll());
        assertEquals(3,m_bridgeElementDao.countAll());
        assertEquals(0,m_bridgeStpLinkDao.countAll());
        assertEquals(2,m_bridgeBridgeLinkDao.countAll());
        assertEquals(49,m_bridgeMacLinkDao.countAll());
        assertEquals(1,m_bridgeTopologyService.getMacPorts().size());
        checkTopology(asw01,stcasw01,samasw01);

        assertTrue(m_linkd.runSingleSnmpCollection(samasw01.getId()));
        assertTrue(m_linkd.runSingleSnmpCollection(stcasw01.getId()));
        m_linkd.runDiscoveryBridgeDomains();
        assertEquals(2,m_ipNetToMediaDao.countAll());
        assertEquals(3,m_bridgeElementDao.countAll());
        assertEquals(0,m_bridgeStpLinkDao.countAll());
        assertEquals(2,m_bridgeBridgeLinkDao.countAll());
        assertEquals(49,m_bridgeMacLinkDao.countAll());
        assertEquals(1,m_bridgeTopologyService.getMacPorts().size());
        checkTopology(asw01,stcasw01,samasw01);

        assertTrue(m_linkd.runSingleSnmpCollection(asw01.getId()));
        m_linkd.runDiscoveryBridgeDomains();
        assertEquals(2,m_ipNetToMediaDao.countAll());
        assertEquals(3,m_bridgeElementDao.countAll());
        assertEquals(0,m_bridgeStpLinkDao.countAll());
        assertEquals(2,m_bridgeBridgeLinkDao.countAll());
        assertEquals(49,m_bridgeMacLinkDao.countAll());
        assertEquals(1,m_bridgeTopologyService.getMacPorts().size());
        checkTopology(asw01,stcasw01,samasw01);

        assertTrue(m_linkd.runSingleSnmpCollection(stcasw01.getId()));
        m_linkd.runDiscoveryBridgeDomains();
        assertEquals(2,m_ipNetToMediaDao.countAll());
        assertEquals(3,m_bridgeElementDao.countAll());
        assertEquals(0,m_bridgeStpLinkDao.countAll());
        assertEquals(2,m_bridgeBridgeLinkDao.countAll());
        assertEquals(49,m_bridgeMacLinkDao.countAll());
        assertEquals(1,m_bridgeTopologyService.getMacPorts().size());
        checkTopology(asw01,stcasw01,samasw01);
        
    }

