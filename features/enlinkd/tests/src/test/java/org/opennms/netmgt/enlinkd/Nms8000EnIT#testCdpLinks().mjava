    /* 
     * nmmr1 GigabitEthernet0/0                 ---> nmmr3   GigabitEthernet0/1
     * nmmr1 GigabitEthernet0/1                 ---> nmmsw1  FastEthernet0/1
     * nmmr1 GigabitEthernet0/2                 ---> nmmsw2  FastEthernet0/2
     * 
     * nmmr2 GigabitEthernet0/0                 ---> nmmr3   GigabitEthernet0/2
     * nmmr2 GigabitEthernet0/1                 ---> nmmsw2  FastEthernet0/1
     * nmmr2 GigabitEthernet0/2                 ---> nmmsw1  FastEthernet0/2
     * 
     * nmmr3 GigabitEthernet0/0                 ---> netlabSW03   GigabitEthernet2/0/18
     * nmmr3 GigabitEthernet0/1                 ---> nmmr1  GigabitEthernet0/0
     * nmmr3 GigabitEthernet0/2                 ---> nmmr2  GigabitEthernet0/0
     * 
     * nmmsw1  FastEthernet0/1                  ---> nmmr1 GigabitEthernet0/1
     * nmmsw1  FastEthernet0/2                  ---> nmmr2 GigabitEthernet0/2
     * 
     * nmmsw2  FastEthernet0/1                  ---> nmmr2 GigabitEthernet0/1
     * nmmsw2  FastEthernet0/2                  ---> nmmr1 GigabitEthernet0/2
     */
    @Test
    @JUnitSnmpAgents(value={
            @JUnitSnmpAgent(host=NMMR1_IP, port=161, resource=NMMR1_SNMP_RESOURCE),
            @JUnitSnmpAgent(host=NMMR2_IP, port=161, resource=NMMR2_SNMP_RESOURCE),
            @JUnitSnmpAgent(host=NMMR3_IP, port=161, resource=NMMR3_SNMP_RESOURCE),
            @JUnitSnmpAgent(host=NMMSW1_IP, port=161, resource=NMMSW1_SNMP_RESOURCE),
            @JUnitSnmpAgent(host=NMMSW2_IP, port=161, resource=NMMSW2_SNMP_RESOURCE)
    })
    public void testCdpLinks() throws Exception {
        m_nodeDao.save(builder.getNMMR1());
        m_nodeDao.save(builder.getNMMR2());
        m_nodeDao.save(builder.getNMMR3());
        m_nodeDao.save(builder.getNMMSW1());
        m_nodeDao.save(builder.getNMMSW2());

        m_nodeDao.flush();

        m_linkdConfig.getConfiguration().setUseBridgeDiscovery(false);
        m_linkdConfig.getConfiguration().setUseCdpDiscovery(true);
        m_linkdConfig.getConfiguration().setUseOspfDiscovery(false);
        m_linkdConfig.getConfiguration().setUseLldpDiscovery(false);
        m_linkdConfig.getConfiguration().setUseIsisDiscovery(false);

        assertTrue(!m_linkdConfig.useLldpDiscovery());
        assertTrue(m_linkdConfig.useCdpDiscovery());
        assertTrue(!m_linkdConfig.useOspfDiscovery());
        assertTrue(!m_linkdConfig.useBridgeDiscovery());
        assertTrue(!m_linkdConfig.useIsisDiscovery());

        final OnmsNode nmmr1 = m_nodeDao.findByForeignId("linkd", NMMR1_NAME);
        final OnmsNode nmmr2 = m_nodeDao.findByForeignId("linkd", NMMR2_NAME);
        final OnmsNode nmmr3 = m_nodeDao.findByForeignId("linkd", NMMR3_NAME);
        final OnmsNode nmmsw1 = m_nodeDao.findByForeignId("linkd",NMMSW1_NAME);
        final OnmsNode nmmsw2 = m_nodeDao.findByForeignId("linkd",NMMSW2_NAME);
        
        assertTrue(m_linkd.scheduleNodeCollection(nmmr1.getId()));
        assertTrue(m_linkd.scheduleNodeCollection(nmmr2.getId()));
        assertTrue(m_linkd.scheduleNodeCollection(nmmr3.getId()));
        assertTrue(m_linkd.scheduleNodeCollection(nmmsw1.getId()));
        assertTrue(m_linkd.scheduleNodeCollection(nmmsw2.getId()));
        

        assertTrue(m_linkd.runSingleSnmpCollection(nmmr1.getId()));
        assertEquals(3, m_cdpLinkDao.countAll());
        
        assertTrue(m_linkd.runSingleSnmpCollection(nmmr2.getId()));
        assertEquals(6, m_cdpLinkDao.countAll());
       
        assertTrue(m_linkd.runSingleSnmpCollection(nmmr3.getId()));
        assertEquals(9, m_cdpLinkDao.countAll());

        assertTrue(m_linkd.runSingleSnmpCollection(nmmsw1.getId()));
        assertEquals(11, m_cdpLinkDao.countAll());

        assertTrue(m_linkd.runSingleSnmpCollection(nmmsw2.getId()));
        assertEquals(13, m_cdpLinkDao.countAll());

        for (final CdpElement node: m_cdpElementDao.findAll()) {
            printCdpElement(node);
        }
        
        for (CdpLink link: m_cdpLinkDao.findAll()) {
            printCdpLink(link);
            assertEquals(CiscoNetworkProtocolType.ip, link.getCdpCacheAddressType());
        }
        
    }

