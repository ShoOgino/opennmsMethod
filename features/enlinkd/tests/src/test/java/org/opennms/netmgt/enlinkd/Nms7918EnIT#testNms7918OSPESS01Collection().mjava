    @Test
    @JUnitSnmpAgents(value={
            @JUnitSnmpAgent(host=OSPESS01_IP, port=161, resource= OSPESS01_SNMP_RESOURCE)
    })
    public void testNms7918OSPESS01Collection() throws Exception {
        final OnmsNode ospess01 = m_nodeDao.findByForeignId("linkd", OSPESS01_NAME);
        final OnmsNode pe01 = m_nodeDao.findByForeignId("linkd", PE01_NAME);
        m_linkdConfig.getConfiguration().setUseBridgeDiscovery(true);
        m_linkdConfig.getConfiguration().setUseCdpDiscovery(false);
        m_linkdConfig.getConfiguration().setUseOspfDiscovery(false);
        m_linkdConfig.getConfiguration().setUseLldpDiscovery(false);
        m_linkdConfig.getConfiguration().setUseIsisDiscovery(false);

        assertTrue(!m_linkdConfig.useLldpDiscovery());
        assertTrue(!m_linkdConfig.useCdpDiscovery());
        assertTrue(!m_linkdConfig.useOspfDiscovery());
        assertTrue(m_linkdConfig.useBridgeDiscovery());
        assertTrue(!m_linkdConfig.useIsisDiscovery());
        
        assertTrue(m_linkd.scheduleNodeCollection(ospess01.getId()));

        assertEquals(0,m_bridgeBridgeLinkDao.countAll());
        assertEquals(0,m_bridgeMacLinkDao.countAll());
        assertEquals(0,m_ipNetToMediaDao.countAll());
        
        assertTrue(m_linkd.runSingleSnmpCollection(ospess01.getId()));
        assertEquals(0,m_bridgeBridgeLinkDao.countAll());
        assertEquals(0,m_bridgeMacLinkDao.countAll());
        assertEquals(5,m_ipNetToMediaDao.countAll());
        m_ipNetToMediaDao.findAll().stream().forEach(ntm -> System.err.println(ntm.toString()));
        
        System.err.println("-----------------------");
        IpNetToMedia inmpe01 = m_ipNetToMediaDao.findByNetAddress(InetAddressUtils.addr(PE01_IP)).iterator().next();
        System.err.println("-----------------------");
        assertEquals(pe01.getId(), inmpe01.getNode().getId());
        assertEquals(pe01macaddress, inmpe01.getPhysAddress());

        assertNull(m_bridgeTopologyService.useBridgeTopologyUpdateBFT(ospess01.getId()));

        List<MacPort> mps = m_bridgeTopologyService.getMacPorts();
        assertEquals(4, mps.size());
        System.err.println("-----------------------");
        mps.stream().filter(mp -> !mp.getMacPortMap().containsKey(pe01macaddress) ).forEach(
             mp -> {
                 assertEquals(1, mp.getMacPortMap().size());
                 String mac = mp.getMacPortMap().keySet().iterator().next();
                 assertEquals(1, mp.getMacPortMap().get(mac).size());
                 assertNull(mp.getNodeId());
                 assertNull(mp.getIfIndex());
                 assertNull(mp.getMacPortName());
                 System.err.println(mp.printTopology());
                 System.err.println(mp.getPortMacInfo());
                                     }
        );
        System.err.println("-----------------------");
        System.err.println("-----------------------");
        mps.stream().filter(mp -> mp.getMacPortMap().containsKey(pe01macaddress)).forEach(mp -> {
            assertEquals(1, mp.getMacPortMap().size());
            Set<InetAddress> ips = mp.getMacPortMap().get(pe01macaddress);
            assertEquals(2, ips.size());
            ips.contains(InetAddressUtils.addr(PE01_IP));
            ips.contains(InetAddressUtils.addr("10.27.19.1"));
            assertEquals(pe01.getId() ,mp.getNodeId());
            assertEquals(-1,mp.getIfIndex().intValue());
            assertNull(mp.getMacPortName());
            System.err.println(mp.printTopology());
            System.err.println(mp.getPortMacInfo());
   });
        System.err.println("-----------------------");
        
    }

