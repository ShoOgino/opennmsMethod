    /* 
     * only two node topology
     * switch1 GigabitEthernet 0/9 0/10 0/11 0/12 <---> switch2 GigabitEthernet 0/1 0/2 0/3 0/4
     *
     */
    @Test
    @JUnitSnmpAgents(value={
            @JUnitSnmpAgent(host=SWITCH1_IP, port=161, resource=SWITCH1_SNMP_RESOURCE),
            @JUnitSnmpAgent(host=SWITCH2_IP, port=161, resource=SWITCH2_SNMP_RESOURCE)

    })
    public void testNetwork17216CdpTopology() throws Exception {
        m_nodeDao.save(builder.getSwitch1());
        m_nodeDao.save(builder.getSwitch2());
        
        m_nodeDao.flush();

        m_linkdConfig.getConfiguration().setUseBridgeDiscovery(false);
        m_linkdConfig.getConfiguration().setUseCdpDiscovery(true);
        m_linkdConfig.getConfiguration().setUseOspfDiscovery(false);
        m_linkdConfig.getConfiguration().setUseLldpDiscovery(false);
        m_linkdConfig.getConfiguration().setUseIsisDiscovery(false);

        assertTrue(!m_linkdConfig.useLldpDiscovery());
        assertTrue(m_linkdConfig.useCdpDiscovery());
        assertTrue(!m_linkdConfig.useOspfDiscovery());
        assertTrue(!m_linkdConfig.useBridgeDiscovery());
        assertTrue(!m_linkdConfig.useIsisDiscovery());

        //update configuration to support only CDP updates
        //need to reload daemon
        m_linkd.reload();
        assertEquals(2, m_topologyDao.getSupportedProtocols().size());
        assertTrue(m_topologyDao.getSupportedProtocols().contains(ProtocolSupported.NODES.name()));               
        assertTrue(!m_topologyDao.getSupportedProtocols().contains(ProtocolSupported.BRIDGE.name()));
        assertTrue(m_topologyDao.getSupportedProtocols().contains(ProtocolSupported.CDP.name()));
        assertTrue(!m_topologyDao.getSupportedProtocols().contains(ProtocolSupported.ISIS.name()));
        assertTrue(!m_topologyDao.getSupportedProtocols().contains(ProtocolSupported.LLDP.name()));
        assertTrue(!m_topologyDao.getSupportedProtocols().contains(ProtocolSupported.OSPF.name()));

        final OnmsNode switch1 = m_nodeDao.findByForeignId("linkd", SWITCH1_NAME);
        final OnmsNode switch2 = m_nodeDao.findByForeignId("linkd", SWITCH2_NAME);

        assertTrue(m_linkd.scheduleNodeCollection(switch1.getId()));
        assertTrue(m_linkd.scheduleNodeCollection(switch2.getId()));

        assertTrue(m_linkd.runSingleSnmpCollection(switch1.getId()));
        assertEquals(5, m_cdpLinkDao.countAll());
        assertTrue(m_cdpTopologyService.hasUpdates());
        
        assertTrue(m_linkd.runSingleSnmpCollection(switch2.getId()));
        assertEquals(11, m_cdpLinkDao.countAll());
        assertTrue(m_cdpTopologyService.hasUpdates());
        
        m_cdpTopologyService.updatesAvailable();
        assertEquals(2, m_nodeTopologyService.findAllSnmpNode().size());
        assertEquals(2, m_nodeTopologyService.findAllNode().size());
        assertEquals(6, m_nodeTopologyService.findAllIp().size());
        
        m_nodeTopologyService.findAllNode().stream().forEach( node -> {
            System.err.println(node);
            assertNotNull(node.getId());
            assertNotNull(node.getLabel());
        });

        m_nodeTopologyService.findAllIp().stream().forEach( ip -> {
            System.err.println(ip);
            assertNotNull(ip.getId());
            assertNotNull(ip.getIpAddress());
            assertNotNull(ip.getIsSnmpPrimary());
            assertTrue(ip.isManaged());
        });

        CdpOnmsTopologyUpdater cdptopology = m_linkd.getCdpTopologyUpdater();
        assertNotNull(cdptopology);
        //Test buildTopology method, just 
        // build the topology but no updates
        OnmsTopology topology = cdptopology.buildTopology();
        assertEquals(2, topology.getVertices().size());
        assertEquals(4, topology.getEdges().size());
        
        //Testing updates
        OnmsTopologyLogger tl = createAndSubscribe(
                  ProtocolSupported.CDP.name());
        assertEquals("CDP:Consumer:Logger", tl.getName());
        //No updates not yet runned 
        assertEquals(0, tl.getQueue().size());        
        assertTrue(m_cdpTopologyService.hasUpdates());
        System.err.println("--------Printing new start----------");
        m_linkd.runTopologyUpdater(ProtocolSupported.CDP);
        System.err.println("--------Printing new end----------");
        assertTrue(!m_cdpTopologyService.hasUpdates());
        assertTrue(!m_cdpTopologyService.parseUpdates());
        assertEquals(6, tl.getQueue().size());
        for (OnmsTopologyMessage m: tl.getQueue()) {
            assertEquals(TopologyUpdater.create(ProtocolSupported.CDP), m.getProtocol());
            assertEquals(TopologyMessageStatus.UPDATE, m.getMessagestatus());
            if (m.getMessagebody() instanceof OnmsTopologyVertex) {
                OnmsTopologyVertex vertex = (OnmsTopologyVertex) m.getMessagebody();
                assertNotNull(vertex.getId());
                assertNotNull(vertex.getNodeid());
                assertNotNull(vertex.getLabel());
                assertNotNull(vertex.getAddress());
                assertNotNull(vertex.getIconKey());
                assertNotNull(vertex.getToolTipText());
            } else if (m.getMessagebody() instanceof OnmsTopologyEdge ) {
                OnmsTopologyEdge edge = (OnmsTopologyEdge) m.getMessagebody();
                assertNotNull(edge.getId());
                assertNotNull(edge.getSource().getVertex());
                assertNotNull(edge.getTarget().getVertex());
            } else {
                assertTrue(false);
            }
        }
        System.err.println("--------no updates start----------");
        m_linkd.runTopologyUpdater(ProtocolSupported.CDP);
        System.err.println("--------no updates end----------");
        m_cdpTopologyService.updatesAvailable();
        assertTrue(m_cdpTopologyService.parseUpdates());
        assertTrue(!m_cdpTopologyService.hasUpdates());
        assertEquals(6, tl.getQueue().size());
    }

