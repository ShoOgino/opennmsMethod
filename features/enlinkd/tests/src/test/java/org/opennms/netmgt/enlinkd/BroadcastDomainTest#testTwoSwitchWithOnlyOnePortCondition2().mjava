    @Test
    public void testTwoSwitchWithOnlyOnePortCondition2() throws Exception {
        Integer portAB = 16;
        Integer portBA = 24;

        String mac1 = "000daaaa0001"; // port AB ---port BA
        String mac2 = "000daaaa0002"; // port AB ---port BA
        String maca = "000daaaa000a"; // port AB ---port BA
        String macb = "000daaaa000b"; // port AB ---port BA
        Integer nodeAId  = 1100011;
        Integer nodeBId  = 2200022;
        OnmsNode nodeA= new OnmsNode();
        OnmsNode nodeB= new OnmsNode();
        BridgeElement elementA = new BridgeElement();
        BridgeElement elementB = new BridgeElement();
        Set<BridgeForwardingTableEntry> bftA = new HashSet<BridgeForwardingTableEntry>();
        Set<BridgeForwardingTableEntry> bftB = new HashSet<BridgeForwardingTableEntry>();
        List<BridgeElement> elemlist = new ArrayList<BridgeElement>();

        nodeA.setId(nodeAId);
        elementA.setNode(nodeA);
        elementA.setBaseBridgeAddress(maca);
        elemlist.add(elementA);

        nodeB.setId(nodeBId);
        elementB.setNode(nodeB);
        elementB.setBaseBridgeAddress(macb);
        elemlist.add(elementB);

        bftA.add(addBridgeForwardingTableEntry(nodeA,portAB, mac1));
        bftA.add(addBridgeForwardingTableEntry(nodeA,portAB, mac2));
        bftA.add(addBridgeForwardingTableEntry(nodeA,portAB, maca));

        bftB.add(addBridgeForwardingTableEntry(nodeB,portBA, mac1));
        bftB.add(addBridgeForwardingTableEntry(nodeB,portBA, mac2));
        bftB.add(addBridgeForwardingTableEntry(nodeB,portBA, maca));
        bftB.add(addBridgeForwardingTableEntry(nodeB,portBA, macb));


        BroadcastDomain domain = new BroadcastDomain();
        Bridge.create(domain,nodeAId);
        Bridge.create(domain,nodeBId);
        setBridgeElements(domain,elemlist);
        
        DiscoveryBridgeTopology ndbt= new DiscoveryBridgeTopology(domain);
        
        ndbt.addUpdatedBFT((nodeAId),bftA);
        ndbt.addUpdatedBFT((nodeBId),bftB);
        ndbt.calculate();
        
        assertEquals(1,domain.getSharedSegments().size());
        SharedSegment shared = domain.getSharedSegments().iterator().next();
        assertEquals(2,shared.getBridgePortsOnSegment().size());
        assertEquals(2,shared.getMacsOnSegment().size());
        assertTrue(shared.containsMac(mac1));
        assertTrue(shared.containsMac(mac2));
        assertEquals(1, domain.getForwarding().size());
        assertEquals(1, domain.getForwarders(nodeBId).size());
        BridgePortWithMacs forwarder = domain.getForwarders(nodeBId).iterator().next();
        assertEquals(1, forwarder.getMacs().size());
        assertEquals(maca, forwarder.getMacs().iterator().next());
        assertEquals(portBA, forwarder.getPort().getBridgePort());
        assertEquals(nodeBId, forwarder.getPort().getNodeId());
    }

