    public static final VlanType get(Integer code) {
        if (code == null)
            return VlanType.UNKNOWN;
        switch (code) {
            case VLAN_TYPE_UNKNOWN:
                return UNKNOWN;
            case VLAN_TYPE_VTP_ETHERNET:
                return CISCO_VTP_ETHERNET;
            case VLAN_TYPE_VTP_FDDI:
                return CISCO_VTP_FDDI;
            case VLAN_TYPE_VTP_TOKENRING:
                return CISCO_VTP_TOKENRING;
            case VLAN_TYPE_VTP_FDDINET:
                return CISCO_VTP_FDDINET;
            case VLAN_TYPE_VTP_TRNET:
                return CISCO_VTP_TRNET;
            case VLAN_TYPE_VTP_DEPRECATED:
                return CISCO_VTP_DEPRECATED;
            case VLAN_TYPE_EXTREME_LAYERTWO:
                return EXTREME_LAYER2;
            case VLAN_TYPE_THREECOM_vlanLayer2:
                return THREECOM_vlanLayer2;
            case VLAN_TYPE_THREECOM_vlanUnspecifiedProtocols:
                return THREECOM_vlanUnspecifiedProtocols;
            case VLAN_TYPE_THREECOM_vlanIPProtocol:
                return THREECOM_vlanIPProtocol;
            case VLAN_TYPE_THREECOM_vlanIPXProtocol:
                return THREECOM_vlanIPXProtocol;
            case VLAN_TYPE_THREECOM_vlanAppleTalkProtocol:
                return THREECOM_vlanAppleTalkProtocol;
            case VLAN_TYPE_THREECOM_vlanXNSProtocol:
                return THREECOM_vlanXNSProtocol;
            case VLAN_TYPE_THREECOM_vlanISOProtocol:
                return THREECOM_vlanISOProtocol;
            case VLAN_TYPE_THREECOM_vlanDECNetProtocol:
                return THREECOM_vlanDECNetProtocol;
            case VLAN_TYPE_THREECOM_vlanNetBIOSProtocol:
                return THREECOM_vlanNetBIOSProtocol;
            case VLAN_TYPE_THREECOM_vlanSNAProtocol:
                return THREECOM_vlanSNAProtocol;
            case VLAN_TYPE_THREECOM_vlanVINESProtocol:
                return THREECOM_vlanVINESProtocol;
            case VLAN_TYPE_THREECOM_vlanX25Protocol:
                return THREECOM_vlanX25Protocol;
            case VLAN_TYPE_THREECOM_vlanIGMPProtocol:
                return THREECOM_vlanIGMPProtocol;
            case VLAN_TYPE_THREECOM_vlanSessionLayer:
                return THREECOM_vlanSessionLayer;
            case VLAN_TYPE_THREECOM_vlanNetBeui:
                return THREECOM_vlanNetBeui;
            case VLAN_TYPE_THREECOM_vlanLayeredProtocols:
                return THREECOM_vlanLayeredProtocols;
            case VLAN_TYPE_THREECOM_vlanIPXIIProtocol:
                return THREECOM_vlanIPXIIProtocol;
            case VLAN_TYPE_THREECOM_vlanIPX8022Protocol:
                return THREECOM_vlanIPX8022Protocol;
            case VLAN_TYPE_THREECOM_vlanIPX8023Protocol:
                return THREECOM_vlanIPX8023Protocol;
            case VLAN_TYPE_THREECOM_vlanIPX8022SNAPProtocol:
                return THREECOM_vlanIPX8022SNAPProtocol;
            default:
                throw new IllegalArgumentException("Cannot create vlanType from code " + code);
        }
    }

