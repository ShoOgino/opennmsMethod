    @Before
    public void setUp() {
        MockLogAppender.setupLogging();
        nodes = createNodes(6);
        isiselements = Arrays.asList(
                                     createIsIsElement(0,nodes.get(0), "nomatch0"),
                                     createIsIsElement(1,nodes.get(1), "1.3"),
                                     createIsIsElement(2,nodes.get(2), "nomatch1"),
                                     createIsIsElement(3,nodes.get(3), "1.2"),
                                     createIsIsElement(4,nodes.get(4), "2.3"),
                                     createIsIsElement(5,nodes.get(5), "2.2")
                                 );
        isisLinks = Arrays.asList(
                                  createIsIsLink(6, "nomatch2", 100, nodes.get(0)),
                                  createIsIsLink(7, "1.2", 11, nodes.get(1)),
                                  createIsIsLink(8, "nomatch3", 101, nodes.get(2)),
                                  createIsIsLink(9, "1.3", 11, nodes.get(3)),
                                  createIsIsLink(10, "2.2", 22, nodes.get(4)),
                                  createIsIsLink(11, "2.3", 22, nodes.get(5))
                          );
        
        cdpelements = Arrays.asList(
                                    createCdpElement(12,nodes.get(0), "Element0"),
                                    createCdpElement(13,nodes.get(1), "match1.4"),
                                    createCdpElement(14,nodes.get(2), "Element2"),
                                    createCdpElement(15,nodes.get(3), "match1.3"),
                                    createCdpElement(16,nodes.get(4), "match2.4"),
                                    createCdpElement(17,nodes.get(5), "match2.3")
                            );
        
        cdpLinks = Arrays.asList(
                                 createCdpLink(18, nodes.get(0), "nomatch1", "nomatch2", "nomatch3"),
                                 createCdpLink(19, nodes.get(1), "match1.3", "match1.1", "match1.2"),
                                 createCdpLink(20, nodes.get(2), "nomatch4", "nomatch5", "nomatch6"),
                                 createCdpLink(21, nodes.get(3), "match1.4", "match1.2", "match1.1"),
                                 createCdpLink(22, nodes.get(4), "match2.3", "match2.1", "match2.2"),
                                 createCdpLink(23, nodes.get(5), "match2.4", "match2.2", "match2.1")
                         );


        List<InetAddress> addresses = createInetAddresses(6);

        ospfLinks = Arrays.asList(
                createOspfLink(24, nodes.get(0), addresses.get(0), addresses.get(5)),
                createOspfLink(25, nodes.get(1), addresses.get(1), addresses.get(3)),
                createOspfLink(26, nodes.get(2), addresses.get(2), addresses.get(3)),
                createOspfLink(27, nodes.get(3), addresses.get(3), addresses.get(1)),
                createOspfLink(28, nodes.get(4), addresses.get(4), addresses.get(5)),
                createOspfLink(29, nodes.get(5), addresses.get(5), addresses.get(4))
        );

        lldpelements = Arrays.asList(
        createLldpElement(30,nodes.get(0), "Element0"),
        createLldpElement(31,nodes.get(1), "match1.1"),
        createLldpElement(32,nodes.get(2), "Element2"),
        createLldpElement(33,nodes.get(3), "match1.2"),
        createLldpElement(34,nodes.get(4), "match2.1"),
        createLldpElement(35,nodes.get(5), "match2.2"));

        lldpLinks = Arrays.asList(
           createLldpLink(0, nodes.get(0), "nomatch1", LldpUtils.LldpPortIdSubType.LLDP_PORTID_SUBTYPE_PORTCOMPONENT,  "nomatch2", LldpUtils.LldpPortIdSubType.LLDP_PORTID_SUBTYPE_PORTCOMPONENT, "nomatch3"),
                createLldpLink(1, nodes.get(1), "match1.5", LldpUtils.LldpPortIdSubType.LLDP_PORTID_SUBTYPE_INTERFACENAME,  "match1.3", LldpUtils.LldpPortIdSubType.LLDP_PORTID_SUBTYPE_MACADDRESS, "match1.2"),
                createLldpLink(2, nodes.get(2), "nomatch4", LldpUtils.LldpPortIdSubType.LLDP_PORTID_SUBTYPE_PORTCOMPONENT,  "nomatch5", LldpUtils.LldpPortIdSubType.LLDP_PORTID_SUBTYPE_PORTCOMPONENT, "nomatch6"),
                createLldpLink(3, nodes.get(3), "match1.3", LldpUtils.LldpPortIdSubType.LLDP_PORTID_SUBTYPE_MACADDRESS,  "match1.5", LldpUtils.LldpPortIdSubType.LLDP_PORTID_SUBTYPE_INTERFACENAME, "match1.1"),
                createLldpLink(4, nodes.get(4), "match2.5", LldpUtils.LldpPortIdSubType.LLDP_PORTID_SUBTYPE_AGENTCIRCUITID,  "match2.3", LldpUtils.LldpPortIdSubType.LLDP_PORTID_SUBTYPE_INTERFACEALIAS, "match2.2"),
                createLldpLink(5, nodes.get(5), "match2.3", LldpUtils.LldpPortIdSubType.LLDP_PORTID_SUBTYPE_INTERFACEALIAS,  "match2.5", LldpUtils.LldpPortIdSubType.LLDP_PORTID_SUBTYPE_AGENTCIRCUITID, "match2.1")
        );

        EasyMock.expect(topologyEntityCache.getCdpLinkTopologyEntities()).andReturn(cdpLinks).anyTimes();
        EasyMock.expect(topologyEntityCache.getCdpElementTopologyEntities()).andReturn(cdpelements).anyTimes();

        EasyMock.expect(topologyEntityCache.getLldpElementTopologyEntities()).andReturn(lldpelements).anyTimes();
        EasyMock.expect(topologyEntityCache.getLldpLinkTopologyEntities()).andReturn(lldpLinks).anyTimes();

        EasyMock.expect(topologyEntityCache.getIsIsElementTopologyEntities()).andReturn(isiselements).anyTimes();
        EasyMock.expect(topologyEntityCache.getIsIsLinkTopologyEntities()).andReturn(isisLinks).anyTimes();

        EasyMock.expect(topologyEntityCache.getOspfLinkTopologyEntities()).andReturn(ospfLinks).anyTimes();
        

        EasyMock.replay(topologyEntityCache);
     }

