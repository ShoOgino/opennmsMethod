    @Override
    public void store(BroadcastDomain domain, Date now) throws BridgeTopologyException {
        for (SharedSegment segment : domain.getSharedSegments()) {
            segment.getDesignatedPort();
        }
        for (SharedSegment segment : domain.getSharedSegments()) {
            for (BridgeBridgeLink link : SharedSegment.getBridgeBridgeLinks(segment)) {
                link.setBridgeBridgeLinkLastPollTime(new Date());
                    saveBridgeBridgeLink(link);
            }
            for (BridgeMacLink link : SharedSegment.getBridgeMacLinks(segment)) {
                link.setBridgeMacLinkLastPollTime(new Date());
                saveBridgeMacLink(link);
            }
        }
        
        domain.getForwarding().stream().filter(forward -> forward.getMacs().size() > 0).
            forEach( forward -> {
                for ( BridgeMacLink link : BridgeForwardingTableEntry.create(forward, BridgeMacLinkType.BRIDGE_FORWARDER)) {
                    link.setBridgeMacLinkLastPollTime(new Date());
                    saveBridgeMacLink(link);
                }
            });
        
        for (Integer nodeid: domain.getBridgeNodesOnDomain()) {
            m_bridgeMacLinkDao.deleteByNodeIdOlderThen(nodeid, now);
            m_bridgeBridgeLinkDao.deleteByNodeIdOlderThen(nodeid, now);
            m_bridgeBridgeLinkDao.deleteByDesignatedNodeIdOlderThen(nodeid, now);
        }
       
        try {
            m_bridgeMacLinkDao.flush();
        } catch (Exception e) {
            LOG.error("BridgeMacLinkDao: {}", e.getMessage(),e );
        }
        try {
            m_bridgeBridgeLinkDao.flush();
        } catch (Exception e) {
            LOG.error("BridgeBridgeLinkDao: {}", e.getMessage(),e );
        }

        updatesAvailable();
    }

