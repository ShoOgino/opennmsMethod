    @Override
    public List<MacPort> getMacPorts() {
        final Map<String,MacPort> macToMacPortMap = new HashMap<>();
        final Table<Integer, Integer, MacPort> nodeIfindexToMacPortTable = HashBasedTable.create();
        m_ipNetToMediaDao.
                findAll().
                stream().forEach(m -> {
                    if (LOG.isDebugEnabled()) {
                        LOG.debug("getMacPorts: parsing: {}",m);
                    }
                    if (m.getNode() != null ) {
                        if (nodeIfindexToMacPortTable.contains(m.getNode().getId(), m.getIfIndex())) {
                            MacPort.merge(m, nodeIfindexToMacPortTable.get(m.getNode().getId(), m.getIfIndex()));
                        } else {
                            nodeIfindexToMacPortTable.put(m.getNode().getId(), m.getIfIndex(), MacPort.create(m));
                        }
                    } else {
                        if (macToMacPortMap.containsKey(m.getPhysAddress())) {
                            MacPort.merge(m, macToMacPortMap.get(m.getPhysAddress()));
                        } else {
                            macToMacPortMap.put(m.getPhysAddress(), MacPort.create(m));
                        }
                    }
                });
       List<MacPort> ports = nodeIfindexToMacPortTable.values().stream().collect(Collectors.toList(
                    ));
       ports.stream().forEach(mp -> {
           mp.getMacPortMap().keySet().stream().filter(mac -> macToMacPortMap.containsKey(mac)).forEach(mac -> {
                   mp.getMacPortMap().get(mac).addAll(macToMacPortMap.remove(mac).getMacPortMap().get(mac));
           });
       });
       ports.addAll(macToMacPortMap.values());
       return ports;
    }

