        public void checkAC(BroadcastDomain domain) throws BridgeTopologyException {
            assertEquals(0, domain.getForwarders(nodeAId).size());
            assertEquals(0, domain.getForwarders(nodeCId).size());
            List<SharedSegment> shsegms = domain.getSharedSegments();        	
            assertEquals(3, shsegms.size());

            for (SharedSegment shared: shsegms) {
                List<BridgeMacLink> links = SharedSegment.getBridgeMacLinks(shared);
                List<BridgeBridgeLink> bblinks = SharedSegment.getBridgeBridgeLinks(shared);
                if (shared.getMacsOnSegment().contains(mac1)) {
                    assertEquals(0, bblinks.size());
                    assertEquals(1, shared.getBridgeIdsOnSegment().size());
                    assertEquals(1, links.size());
                    assertEquals(nodeAId, shared.getDesignatedBridge());
                    assertEquals(portA,shared.getDesignatedPort().getBridgePort());
                    assertTrue(!shared.noMacsOnSegment());
                    BridgeMacLink link = links.iterator().next();
                    assertEquals(nodeAId, link.getNode().getId());
                    assertEquals(portA,link.getBridgePort());
                    assertEquals(mac1, link.getMacAddress());
                    assertEquals(BridgeMacLinkType.BRIDGE_LINK, link.getLinkType());
                } else if (shared.getMacsOnSegment().contains(mac2)) {
                    assertEquals(1, bblinks.size());
                    assertEquals(2, shared.getBridgeIdsOnSegment().size());
                    assertEquals(1, links.size());
                    assertTrue(!shared.noMacsOnSegment());
                    BridgeMacLink link = links.iterator().next();
                    assertEquals(mac2, link.getMacAddress());
                    assertEquals(nodeAId,link.getNode().getId());
                    assertEquals(portAB,link.getBridgePort());
                    assertEquals(BridgeMacLinkType.BRIDGE_LINK, link.getLinkType());
                } else if (shared.getMacsOnSegment().contains(mac3)) {
                    assertEquals(0, bblinks.size());
                    assertEquals(1, shared.getBridgeIdsOnSegment().size());
                    assertEquals(1, links.size());
                    assertEquals(nodeCId, shared.getDesignatedBridge());
                    assertEquals(portC,shared.getDesignatedPort().getBridgePort());
                    assertTrue(!shared.noMacsOnSegment());
                    BridgeMacLink link = links.iterator().next();
                    assertEquals(nodeCId, link.getNode().getId());
                    assertEquals(portC,link.getBridgePort());
                    assertEquals(mac3, link.getMacAddress());
                    assertEquals(BridgeMacLinkType.BRIDGE_LINK, link.getLinkType());
                } else {
                    assertEquals(false, true);
                }
            }
        }

