    private void checkTopologyDlink1(OnmsNode dlink1) {
//      port: 1—>1
//      port: 2—>2
//      port: 3—>1
//      port: 4—>8
//      port: 5—>2
//      port: 6—>14
//      port: 24—>30
      assertEquals(0,m_bridgeBridgeLinkDao.countAll());
      /*
       * deleteDuplicatedMac: mac:[64168dfa8d48], duplicated [64168dfa8d48, bridge:[1], bridgeport:2, ifindex:2, vlan:null, status:learned]
       * deleteDuplicatedMac: mac:[64168dfa8d48], duplicated [64168dfa8d48, bridge:[1], bridgeport:5, ifindex:5, vlan:null, status:learned]
       * deleteDuplicatedMac: mac:[64168dfa8d48] saved [64168dfa8d48, bridge:[1], bridgeport:2, ifindex:2, vlan:null
       * WHEN SUPPORTING DUPLICATED MACS...NOW REMOVE ON PORT 5 and 2 FROM 2 ONLY 1 IS FOUND
       */
      assertEquals(1, m_bridgeMacLinkDao.findByNodeIdBridgePort(dlink1.getId(), 1).size());
      assertEquals(1, m_bridgeMacLinkDao.findByNodeIdBridgePort(dlink1.getId(), 2).size()); //1 duplicated
      assertEquals(1, m_bridgeMacLinkDao.findByNodeIdBridgePort(dlink1.getId(), 3).size());
      assertEquals(8, m_bridgeMacLinkDao.findByNodeIdBridgePort(dlink1.getId(), 4).size());
      assertEquals(1, m_bridgeMacLinkDao.findByNodeIdBridgePort(dlink1.getId(), 5).size()); //1 duplicated
      assertEquals(14, m_bridgeMacLinkDao.findByNodeIdBridgePort(dlink1.getId(), 6).size());
      assertEquals(30, m_bridgeMacLinkDao.findByNodeIdBridgePort(dlink1.getId(), 24).size());

      assertEquals(56,m_bridgeMacLinkDao.countAll()); 

      for (BridgeMacLink maclink: m_bridgeMacLinkDao.findAll()) {
              System.err.println(maclink.printTopology());
              assertNotNull(maclink.getBridgePortIfIndex());
              assertNotNull(maclink.getBridgePort());
              assertNotNull(maclink.getNode());
              assertNotNull(maclink.getMacAddress());
              assertEquals(BridgeMacLinkType.BRIDGE_LINK, maclink.getLinkType());
      }

    }

