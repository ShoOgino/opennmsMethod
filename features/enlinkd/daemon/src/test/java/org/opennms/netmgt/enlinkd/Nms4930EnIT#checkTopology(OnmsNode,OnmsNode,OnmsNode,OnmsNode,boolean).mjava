    private void checkTopology(OnmsNode dlink1, OnmsNode dlink2, OnmsNode nodeonlink1dport6,
    		OnmsNode nodebetweendlink1dlink2, boolean reverse) {
        
        /*
         *  
         * INTEGER: 1—>1
         * INTEGER: 2—>2 -1 duplicated
         * INTEGER: 3—>1
         * INTEGER: 4—>8
         * INTEGER: 5—>2 -1 duplicated
         * INTEGER: 6—>14
         * INTEGER: 24—>30 Backbone port
         */
        assertEquals(1, m_bridgeMacLinkDao.findByNodeIdBridgePort(dlink1.getId(), 1).size());
        assertEquals(1, m_bridgeMacLinkDao.findByNodeIdBridgePort(dlink1.getId(), 2).size());
        assertEquals(1, m_bridgeMacLinkDao.findByNodeIdBridgePort(dlink1.getId(), 3).size());
        assertEquals(8, m_bridgeMacLinkDao.findByNodeIdBridgePort(dlink1.getId(), 4).size());
        assertEquals(1, m_bridgeMacLinkDao.findByNodeIdBridgePort(dlink1.getId(), 5).size());
        assertEquals(14, m_bridgeMacLinkDao.findByNodeIdBridgePort(dlink1.getId(), 6).size());

        /*
         *  
         *         INTEGER: 1     35
         *         INTEGER: 2     71 -1 duplicated
         *         INTEGER: 3     29
         *         INTEGER: 5    142
         *         INTEGER: 6     47
         *         INTEGER: 7      5
         *         INTEGER: 8    123 -1 duplicated
         *         INTEGER: 10   362 Backbone port
         *         INTEGER: 12   163
         *         */
        
/*
 *   
 *   deleteDuplicatedMac: mac:[002155321580], duplicated [002155321580, bridge:[2], bridgeport:8, ifindex:8, vlan:null, status:learned]
 *   deleteDuplicatedMac: mac:[002155321580], duplicated [002155321580, bridge:[2], bridgeport:2, ifindex:2, vlan:null, status:learned]
 *   deleteDuplicatedMac: mac:[002155321580] saved [002155321580, bridge:[2], bridgeport:8, ifindex:8, vlan:null, status:learned]
 */
        assertEquals(35, m_bridgeMacLinkDao.findByNodeIdBridgePort(dlink2.getId(), 1).size());
        assertEquals(70, m_bridgeMacLinkDao.findByNodeIdBridgePort(dlink2.getId(), 2).size()); //was 71
        assertEquals(29, m_bridgeMacLinkDao.findByNodeIdBridgePort(dlink2.getId(), 3).size());
        assertEquals(142, m_bridgeMacLinkDao.findByNodeIdBridgePort(dlink2.getId(), 5).size());
        assertEquals(47, m_bridgeMacLinkDao.findByNodeIdBridgePort(dlink2.getId(), 6).size());
        assertEquals(5, m_bridgeMacLinkDao.findByNodeIdBridgePort(dlink2.getId(), 7).size());
        assertEquals(122, m_bridgeMacLinkDao.findByNodeIdBridgePort(dlink2.getId(), 8).size());
        assertEquals(163, m_bridgeMacLinkDao.findByNodeIdBridgePort(dlink2.getId(), 12).size());

        if (reverse) {
            assertEquals(4, m_bridgeMacLinkDao.findByNodeIdBridgePort(dlink1.getId(), 24).size());
            assertEquals(342, m_bridgeMacLinkDao.findByNodeIdBridgePort(dlink2.getId(), 10).size());
        } else {
            assertEquals(12, m_bridgeMacLinkDao.findByNodeIdBridgePort(dlink1.getId(), 24).size());
            assertEquals(334, m_bridgeMacLinkDao.findByNodeIdBridgePort(dlink2.getId(), 10).size());            
        } // 8 common 4 forwarders on dlink1 and 334 forwarders on dlink2
        assertEquals(985,m_bridgeMacLinkDao.countAll());

        assertEquals(1,m_bridgeBridgeLinkDao.countAll());        
        // we have 2 that links "real mac nodes" to bridge.
        // we have 8 macs on bridge cloud between dlink1 and dlink2

        for (BridgeMacLink link: m_bridgeMacLinkDao.findAll()) {
            assertNotNull(link.getNode());
            assertNotNull(link.getBridgePort());
            assertNotNull(link.getBridgePortIfIndex());
            assertNotNull(link.getMacAddress());
        }
        
        for (String mac: macsonbbport) {
        	List<BridgeMacLink> maclinks = m_bridgeMacLinkDao.findByMacAddress(mac);
        	assertEquals(1,maclinks.size());
        	for (BridgeMacLink link: maclinks) {
        	    assertEquals(BridgeMacLinkType.BRIDGE_LINK, link.getLinkType());
        	    assertEquals(mac, link.getMacAddress());
            	if (reverse) {
                    assertEquals(10, link.getBridgePort().intValue());
                    assertEquals(10, link.getBridgePortIfIndex().intValue());
                    assertEquals(dlink2.getId().intValue(), link.getNode().getId().intValue());
            	    
            	} else {
                        assertEquals(24, link.getBridgePort().intValue());
                        assertEquals(24, link.getBridgePortIfIndex().intValue());
                        assertEquals(dlink1.getId().intValue(), link.getNode().getId().intValue());
            	}
                }
        }

        for (String mac: forwardersdlink1on24bbport) {
            List<BridgeMacLink> maclinks = m_bridgeMacLinkDao.findByMacAddress(mac);
            assertEquals(1,maclinks.size());
            for (BridgeMacLink link: maclinks) {
                assertEquals(BridgeMacLinkType.BRIDGE_FORWARDER, link.getLinkType());
                assertEquals(mac, link.getMacAddress());
                assertEquals(24, link.getBridgePort().intValue());
                assertEquals(24, link.getBridgePortIfIndex().intValue());
                assertEquals(dlink1.getId().intValue(), link.getNode().getId().intValue());
            }
        }

        for (String mac: forwardersdlink2on10bbport) {
            List<BridgeMacLink> maclinks = m_bridgeMacLinkDao.findByMacAddress(mac);
            assertEquals(1,maclinks.size());
            for (BridgeMacLink link: maclinks) {
                assertEquals(BridgeMacLinkType.BRIDGE_FORWARDER, link.getLinkType());
                assertEquals(mac, link.getMacAddress());
                assertEquals(10, link.getBridgePort().intValue());
                assertEquals(10, link.getBridgePortIfIndex().intValue());
                assertEquals(dlink2.getId().intValue(), link.getNode().getId().intValue());
            }
        }

    }

