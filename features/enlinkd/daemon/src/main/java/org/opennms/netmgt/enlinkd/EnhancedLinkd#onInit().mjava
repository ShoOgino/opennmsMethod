    /**
     * <p>
     * onInit
     * </p>
     */
    protected void onInit() {
        BeanUtils.assertAutowiring(this);

        // Create a scheduler
        //
        try {
            LOG.info("init: Creating EnhancedLinkd scheduler");
            m_scheduler = new LegacyScheduler("EnhancedLinkd", m_linkdConfig.getThreads());
        } catch (RuntimeException e) {
            LOG.error("init: Failed to create EnhancedLinkd scheduler", e);
            throw e;
        }

        LOG.debug("init: Loading nodes.....");
        for (final Node node : m_queryMgr.findAllSnmpNode()) {
            m_nodes.put(node.getNodeId(), scheduleCollectionForNode(node));
        }
        LOG.debug("init: Nodes loaded.");
        LOG.debug("init: Loading Bridge Topology.....");
        m_bridgeTopologyService.load();
        LOG.debug("init: Bridge Topology loaded.");

        scheduleAndRegisterOnmsTopologyUpdater(m_nodesTopologyUpdater);
        scheduleAndRegisterOnmsTopologyUpdater(m_userDefinedLinkTopologyUpdater);

        if (m_linkdConfig.useBridgeDiscovery()) {
            scheduleDiscoveryBridgeDomain();
            scheduleAndRegisterOnmsTopologyUpdater(m_bridgeTopologyUpdater);
        }

        if (m_linkdConfig.useCdpDiscovery()) {
            scheduleAndRegisterOnmsTopologyUpdater(m_cdpTopologyUpdater);
            
        }

        if (m_linkdConfig.useLldpDiscovery()) {
            scheduleAndRegisterOnmsTopologyUpdater(m_lldpTopologyUpdater);
       }

        if (m_linkdConfig.useIsisDiscovery()) {
            scheduleAndRegisterOnmsTopologyUpdater(m_isisTopologyUpdater);
        }
        
        if (m_linkdConfig.useOspfDiscovery()) {
            scheduleAndRegisterOnmsTopologyUpdater(m_ospfTopologyUpdater);
        }

    }

