    protected  void calculate() {
        Assert.notNull(m_bridgeFtMapUpdate);
        if (LOG.isDebugEnabled()) {
            LOG.debug("calculate: domain\n{}", 
                      m_domain.printTopology());
        }
        m_parsed = new HashSet<Integer>();
        m_failed = new HashSet<Integer>();
        Bridge electedRoot;
        try {
            electedRoot = electRootBridge();
        } catch (BridgeTopologyException e) {
            LOG.error("calculate: {}, topology:\n{}",
                      e.getMessage(),
                      e.printTopology(),
                      e);
            m_failed.addAll(m_bridgeFtMapUpdate.keySet());
            return;
        }
        
        Map<Integer, BridgeForwardingTable> bridgeFtMapCalcul = new HashMap<Integer, BridgeForwardingTable>();
        
        if (m_bridgeFtMapUpdate.keySet().equals(m_domain.getBridgeNodesOnDomain())) {
            m_domain.clearTopology();
            if (LOG.isDebugEnabled()) {
                LOG.debug("calculate: domain cleaned ->\n{}", 
                          m_domain.printTopology());
            }
        } else {
            for (Integer bridgeId: m_bridgeFtMapUpdate.keySet()) {
                if (m_domain.getBridge(bridgeId).isNewTopology()) {
                    LOG.debug("calculate: bridge:[{}] is 'new'. skip clean topology   ", 
                                bridgeId);
                    continue;
                }
                
                try {
                    BroadcastDomain.clearTopologyForBridge(m_domain,bridgeId);
                    if (LOG.isDebugEnabled()) {
                        LOG.debug("calculate: bridge:[{}] cleaned ->\n{}", 
                                  bridgeId,
                                  m_domain.printTopology());
                    }
                } catch (BridgeTopologyException e) {
                    LOG.warn("calculate: bridge:[{}], {}, \n{}", bridgeId, e.getMessage(),e.printTopology());
                    m_failed.add(bridgeId);
                }
            }
            
            for (Bridge bridge: m_domain.getBridges()) {
                if (m_bridgeFtMapUpdate.containsKey(bridge.getNodeId())) {
                    continue;
                }
                if (bridge.isNewTopology()) {
                    LOG.warn("calculate: bridge:[{}] is new without update bft",
                              bridge.getNodeId());
                    continue;
                }
                try {
                    bridgeFtMapCalcul.put(bridge.getNodeId(),
                                          BridgeForwardingTable.create(bridge,
                                                                       BroadcastDomain.calculateBFT(m_domain,
                                                                                                    bridge)));
                    if (LOG.isDebugEnabled()) {
                        LOG.debug("calculate: bft from domain\n{}", 
                                  bridgeFtMapCalcul.get(bridge.getNodeId()).printTopology());
                    }
                } catch (BridgeTopologyException e) {
                    LOG.warn("calculate: bridge:[{}] clear topology. no calculated bft: {} ->\n{}",
                             bridge.getNodeId(), e.getMessage(),
                             e.printTopology());
                    m_domain.clearTopology();
                    calculate();
                }
            }
        }
        
        BridgeForwardingTable rootBft = 
                m_bridgeFtMapUpdate.get(electedRoot.getNodeId());
        
        if ( rootBft != null ) {
            try {
                root(rootBft, bridgeFtMapCalcul);
                m_parsed.add(rootBft.getNodeId());
            } catch (BridgeTopologyException e) {
                LOG.error("calculate: bridge:[{}], {}, \n{}", rootBft.getNodeId(), e.getMessage(),e.printTopology());
                m_failed.addAll(m_bridgeFtMapUpdate.keySet());
                return;
            }
        } 
        
        if (rootBft == null) {
            rootBft = bridgeFtMapCalcul.get(electedRoot.getNodeId());
        }
        
        if (m_domain.getRootBridge() != null && m_domain.getRootBridge().getNodeId() != electedRoot.getNodeId()) {
            try {
                BroadcastDomain.hierarchySetUp(m_domain,electedRoot);
                LOG.debug("calculate: bridge:[{}] elected is new [root] ->\n{}",
                          electedRoot.getNodeId(), 
                          m_domain.printTopology());
            } catch (BridgeTopologyException e) {
                LOG.error("calculate: bridge:[{}], {}, \n{}", electedRoot.getNodeId(), e.getMessage(),e.printTopology());
                m_failed.addAll(m_bridgeFtMapUpdate.keySet());
                m_failed.add(electedRoot.getNodeId());
                return;
            }
        }
        
        Set<Integer> postprocessing = new HashSet<Integer>();
        for (Integer bridgeid: m_bridgeFtMapUpdate.keySet()) {
            if (m_parsed.contains(bridgeid) || m_failed.contains(bridgeid)) {
                continue;
            }
            BridgeForwardingTable bridgeFT = m_bridgeFtMapUpdate.get(bridgeid);
            if (bridgeFT.getPorttomac().size() == 1) {
                Integer bridgeFTrootPort = bridgeFT.getPorttomac().iterator().next().getPort().getBridgePort();
                bridgeFT.setRootPort(bridgeFTrootPort);
                postprocessing.add(bridgeid);
                LOG.debug("calculate: bridge:[{}] only one port:[{}] set to root. Postprocessing",
                          bridgeid, bridgeFTrootPort);
                continue;
            }
            BridgeSimpleConnection upsimpleconn;
                    

            try {
                  upsimpleconn= BridgeSimpleConnection.createAndRun(rootBft, bridgeFT);
                  if (LOG.isDebugEnabled()) {
                           LOG.debug("calculate: level: 1, bridge:[{}] -> {}", 
                                    bridgeFT.getNodeId(),
                                    upsimpleconn.printTopology());
                   }
                   bridgeFT.setRootPort(upsimpleconn.getSecondBridgePort());
                   LOG.debug("calculate: level: 1, bridge:[{}]. set root port:[{}]", 
                                bridgeFT.getNodeId(),
                                upsimpleconn.getSecondBridgePort());
            } catch (BridgeTopologyException e) {
                LOG.warn("calculate: bridge:[{}], no root port found. {}, \n{}", bridgeid, e.getMessage(),e.printTopology());
                m_failed.add(bridgeid);
                continue;
            }                
            
            try {
                down(rootBft, m_bridgeFtMapUpdate.get(bridgeid),upsimpleconn,bridgeFtMapCalcul,0);
                m_parsed.add(bridgeid);
            } catch (BridgeTopologyException e) {
                LOG.warn("calculate: bridge:[{}], no topology found. {}, \n{}", bridgeid, e.getMessage(),e.printTopology());
                m_failed.add(bridgeid);
            }                
        }  

        for (Integer failedbridgeid: new HashSet<Integer>(m_failed)) {
            BridgeForwardingTable failedBridgeFT = m_bridgeFtMapUpdate.get(failedbridgeid);
            try {
                postprocess(failedBridgeFT, rootBft,bridgeFtMapCalcul, new HashSet<Integer>(m_parsed));
            } catch (BridgeTopologyException e) {
                LOG.warn("calculate: bridge:[{}], first iteration on failed. no topology found. {}, \n{}", failedbridgeid, e.getMessage(),e.printTopology());
                continue;
            }
            m_parsed.add(failedbridgeid);
            m_failed.remove(failedbridgeid);
        }        

        for (Integer failedbridgeid: new HashSet<Integer>(m_failed)) {
            BridgeForwardingTable failedBridgeFT = m_bridgeFtMapUpdate.get(failedbridgeid);
            try {
                postprocess(failedBridgeFT,rootBft, bridgeFtMapCalcul, new HashSet<Integer>(m_parsed));
            } catch (BridgeTopologyException e) {
                LOG.warn("calculate: bridge:[{}], second iteration on failed. no topology found. {}, \n{}", failedbridgeid, e.getMessage(),e.printTopology());
                continue;
            }
            m_parsed.add(failedbridgeid);
            m_failed.remove(failedbridgeid);
        }        

        for (Integer postprocessbridgeid: new HashSet<Integer>(postprocessing)) {
            BridgeForwardingTable postprocessBridgeFT = m_bridgeFtMapUpdate.get(postprocessbridgeid);
            try {
                down(rootBft, postprocessBridgeFT, BridgeSimpleConnection.createAndRun(rootBft, postprocessBridgeFT), bridgeFtMapCalcul,
                     0);
            } catch (BridgeTopologyException e) {
                LOG.warn("calculate: bridge:[{}], no topology found for single port node. {}, \n{}", postprocessbridgeid, e.getMessage(),e.printTopology());
                m_failed.add(postprocessbridgeid);
                continue;
            }
            m_parsed.add(postprocessbridgeid);
        }        

        for (Integer failedbridgeid: new HashSet<Integer>(m_failed)) {
            BridgeForwardingTable failedBridgeFT = m_bridgeFtMapUpdate.get(failedbridgeid);
            try {
                postprocess(failedBridgeFT,rootBft, bridgeFtMapCalcul, new HashSet<Integer>(m_parsed));
            } catch (BridgeTopologyException e) {
                LOG.warn("calculate: bridge:[{}], third iteration on failed. no topology found. {}, \n{}", failedbridgeid, e.getMessage(),e.printTopology());
                continue;
            }
            m_parsed.add(failedbridgeid);
            m_failed.remove(failedbridgeid);
        }        

        m_bridgeFtMapUpdate.values().stream().
            filter(ft -> m_parsed.contains(ft.getNodeId())).
                forEach(ft -> BroadcastDomain.addforwarders(m_domain, ft));
        
        bridgeFtMapCalcul.values().stream().
            forEach(ft -> BroadcastDomain.addforwarders(m_domain, ft));

        if (LOG.isDebugEnabled()) {
            LOG.debug("calculate: domain\n{}", 
                      m_domain.printTopology());
        }
    }

