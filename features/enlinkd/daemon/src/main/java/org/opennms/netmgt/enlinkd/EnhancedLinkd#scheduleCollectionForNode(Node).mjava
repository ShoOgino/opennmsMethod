    /**
     * This method schedules a {@link SnmpCollection} for node for each
     * package. Also schedule discovery link on package when not still
     * activated.
     * 
     * @param node
     */
    private List<NodeCollector> scheduleCollectionForNode(final Node node) {

        List<NodeCollector> colls = new ArrayList<>();
        
        if (m_linkdConfig.useLldpDiscovery()) {
            LOG.debug("getSnmpCollections: adding Lldp: {}",
                    node);
            colls.add(new NodeDiscoveryLldp(m_lldpTopologyService,
                                            m_locationAwareSnmpClient, 
                                            m_linkdConfig.getRescanInterval(),
                                            m_linkdConfig.getInitialSleepTime(),
                                             node));
        }
        
        if (m_linkdConfig.useCdpDiscovery()) {
            LOG.debug("getSnmpCollections: adding Cdp: {}",
                    node);
             colls.add(new NodeDiscoveryCdp(m_cdpTopologyService,
                                            m_locationAwareSnmpClient, 
                                            m_linkdConfig.getRescanInterval(),
                                            m_linkdConfig.getInitialSleepTime(),
                                            node));       
        }
        
        if (m_linkdConfig.useBridgeDiscovery()) {
                LOG.debug("getSnmpCollections: adding IpNetToMedia: {}",
                    node);
                colls.add(new NodeDiscoveryIpNetToMedia(m_ipNetToMediaTopologyService,
                                                        m_locationAwareSnmpClient, 
                                                        m_linkdConfig.getRescanInterval(),
                                                        m_linkdConfig.getInitialSleepTime(),
                                                        node));
                
                LOG.debug("getSnmpCollections: adding Bridge: {}",
                    node);
                colls.add(new NodeDiscoveryBridge(m_bridgeTopologyService,
                                                  m_linkdConfig.getMaxBft(),
                                                  m_locationAwareSnmpClient, 
                                                  m_linkdConfig.getRescanInterval(),
                                                  m_linkdConfig.getInitialSleepTime(),
                                                  node));
        }

        if (m_linkdConfig.useOspfDiscovery()) {
            LOG.debug("getSnmpCollections: adding Ospf: {}",
                    node);
                colls.add(new NodeDiscoveryOspf(m_ospfTopologyService,
                                                m_locationAwareSnmpClient, 
                                                m_linkdConfig.getRescanInterval(),
                                                m_linkdConfig.getInitialSleepTime(),
                                                node));
        }

        if (m_linkdConfig.useIsisDiscovery()) {
            LOG.debug("getSnmpCollections: adding Is-Is: {}",
                    node);
                colls.add(new NodeDiscoveryIsis(m_isisTopologyService,
                                                m_locationAwareSnmpClient, 
                                                m_linkdConfig.getRescanInterval(),
                                                m_linkdConfig.getInitialSleepTime(), 
                                                node));
        }
       
        for (final NodeCollector coll : colls ){
            LOG.debug("ScheduleCollectionForNode: Scheduling {}",
                coll.getInfo());
            coll.setScheduler(m_scheduler);
            coll.schedule();
        }
        
        return colls;
    }

