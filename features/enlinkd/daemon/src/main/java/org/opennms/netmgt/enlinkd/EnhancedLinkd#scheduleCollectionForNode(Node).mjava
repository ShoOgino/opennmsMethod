    /**
     * This method schedules a {@link SnmpCollection} for node for each
     * package. Also schedule discovery link on package when not still
     * activated.
     * 
     * @param node
     */
    private void scheduleCollectionForNode(final Node node) {

        List<NodeDiscovery> colls = new ArrayList<>();
        
        if (m_linkdConfig.useLldpDiscovery()) {
            LOG.debug("getSnmpCollections: adding Lldp Discovery: {}",
                    node);
            colls.add(new NodeDiscoveryLldp(this, node));
        }
        
        if (m_linkdConfig.useCdpDiscovery()) {
            LOG.debug("getSnmpCollections: adding Cdp Discovery: {}",
                    node);
             colls.add(new NodeDiscoveryCdp(this, node));       
        }
        
        if (m_linkdConfig.useBridgeDiscovery()) {
                LOG.debug("getSnmpCollections: adding IpNetToMedia Discovery: {}",
                    node);
                colls.add(new NodeDiscoveryIpNetToMedia(this, node));
                
                LOG.debug("getSnmpCollections: adding Bridge Discovery: {}",
                    node);
                colls.add(new NodeDiscoveryBridge(this, node));
        }

        if (m_linkdConfig.useOspfDiscovery()) {
            LOG.debug("getSnmpCollections: adding Ospf Discovery: {}",
                    node);
                colls.add(new NodeDiscoveryOspf(this, node));
        }

        if (m_linkdConfig.useIsisDiscovery()) {
            LOG.debug("getSnmpCollections: adding Is-Is Discovery: {}",
                    node);
                colls.add(new NodeDiscoveryIsis(this, node));
        }
       
        for (final NodeDiscovery coll : colls ){
            LOG.debug("ScheduleCollectionForNode: Scheduling {}",
                coll.getInfo());
            coll.setScheduler(m_scheduler);
            coll.schedule();
        }
        
        synchronized (m_nodes) {
            LOG.debug("scheduleNodeCollection: adding node {} to the collection", node);
            m_nodes.put(node.getNodeId(),colls);
        }
    }

