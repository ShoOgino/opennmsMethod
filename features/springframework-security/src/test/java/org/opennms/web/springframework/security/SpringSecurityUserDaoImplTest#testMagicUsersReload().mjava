    @Test
    @DirtiesContext
    public void testMagicUsersReload() throws Exception {
        final OnmsUser newUser = new OnmsUser("dashboard");
        newUser.setPassword("DC7161BE3DBF2250C8954E560CC35060");
        m_userManager.save(newUser);

        /*
         * We're not going to use the anticipator functionality, but it's
         * handy for handling temporary directories.
         */
        FileAnticipator fa = new FileAnticipator();
        
        try {
            File users = fa.tempFile("users.xml");
            File magicUsers = fa.tempFile("magic-users.properties");
            
            writeTemporaryFile(users, getUsersXmlContents());
            writeTemporaryFile(magicUsers, getMagicUsersContents());

            ((SpringSecurityUserDaoImpl) m_springSecurityDao).setUsersConfigurationFile(users.getAbsolutePath());
            ((SpringSecurityUserDaoImpl) m_springSecurityDao).setMagicUsersConfigurationFile(magicUsers.getAbsolutePath());

            OnmsUser user;
            GrantedAuthority[] authorities;
            
            user = ((SpringSecurityUserDaoImpl) m_springSecurityDao).getByUsername("dashboard");
            assertNotNull("dashboard user should exist and the object should not be null", user);
            authorities = user.getAuthorities(); 
            assertNotNull("user GrantedAuthorities[] object should not be null", authorities);
            assertEquals("user GrantedAuthorities[] object should have only one entry", 1, authorities.length);
            assertEquals("user GrantedAuthorities[0]", "ROLE_DASHBOARD", authorities[0].getAuthority());

            /*
             *  On UNIX, the resolution of the last modified time is 1 second,
             *  so we need to wait at least that long before rewriting the
             *  file to ensure that we have crossed over into the next second.
             *  At least we're not crossing over with John Edward.
             */
            Thread.sleep(1100);

            writeTemporaryFile(magicUsers, getMagicUsersContents().replace("role.dashboard.users=dashboard", "role.dashboard.users="));

            user = ((SpringSecurityUserDaoImpl) m_springSecurityDao).getByUsername("dashboard");
            assertNotNull("dashboard user should exist and the object should not be null", user);
            authorities = user.getAuthorities(); 
            assertNotNull("user GrantedAuthorities[] object should not be null", authorities);
            assertEquals("user GrantedAuthorities[] object should have only one entry", 1, authorities.length);
            assertEquals("user GrantedAuthorities[0]", "ROLE_USER", authorities[0].getAuthority());
        } finally {
            fa.deleteExpected();
            fa.tearDown();
        }
    }

