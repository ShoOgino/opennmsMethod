    /**
     * Convenience method for parsing the users.xml file.
     * <p/>
     * <p>This method is synchronized so only one thread at a time
     * can parse the users.xml file and create the <code>principal</code>
     * instance variable.</p>
     */
    private void parseUsers() throws DataRetrievalFailureException {
        final HashMap<String, OnmsUser> users = new HashMap<String, OnmsUser>();

        try {
            UserFactory.init();
        } catch (Exception e) {
            throw new DataRetrievalFailureException("Unable to initialize user factory.", e);
        }

        final UserManager manager = UserFactory.getInstance();
        long lastModified = manager.getLastModified();
        
        final Map<String, User> castorUsers;
        try {
            castorUsers = manager.getUsers();
        } catch (final Exception e) {
            throw new DataRetrievalFailureException("Unable to get user list.", e);
        }

        for (final User user : castorUsers.values()) {
            OnmsUser newUser = new OnmsUser();
            newUser.setUsername(user.getUserId());
            newUser.setPassword(user.getPassword());

            users.put(user.getUserId(), newUser);
        }

        log().debug("Loaded the users.xml file with " + users.size() + " users");


        m_usersLastModified = lastModified; 
        m_users = users;
    }

