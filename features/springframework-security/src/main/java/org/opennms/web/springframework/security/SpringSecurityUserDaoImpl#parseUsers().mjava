    /**
     * Parses the users.
     * 
     * <p>Convenience method for parsing the users.xml file.</p>
     * <p>This method is synchronized so only one thread at a time
     * can parse the users.xml file and create the <code>principal</code>
     * instance variable.</p>
     *
     * @throws DataRetrievalFailureException the data retrieval failure exception
     */
    private void parseUsers() throws DataRetrievalFailureException {
        final HashMap<String, OnmsUser> users = new HashMap<String, OnmsUser>();
        final Map<String, List<GrantedAuthority>> roles = new HashMap<String, List<GrantedAuthority>>();

        try {
            for (final OnmsUser user : m_userManager.getOnmsUserList()) {
                final String username = user.getUsername();
                users.put(username, user);
                if (!roles.containsKey(username)) {
                    roles.put(username, new LinkedList<GrantedAuthority>());
                }
                for (final String role : user.getRoles()) {
                    if (Authentication.isValidRole(role)) {
                        roles.get(username).add(getAuthority(role));
                        if (Authentication.ROLE_ADMIN.equals(role)) {
                            roles.get(username).add(getAuthority(Authentication.ROLE_USER));
                        }
                    }
                }
            }
        } catch (final Throwable t) {
            throw new DataRetrievalFailureException("Unable to get user list.", t);
        }

        LOG.debug("Loaded the users.xml file with {} users", users.size());

        m_usersLastModified = m_userManager.getLastModified();
        m_users = users;
        m_roles = roles;
    }

