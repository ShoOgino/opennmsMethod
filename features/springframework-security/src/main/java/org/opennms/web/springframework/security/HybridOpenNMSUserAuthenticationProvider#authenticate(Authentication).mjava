    @Override
    public Authentication authenticate(final Authentication authentication) throws AuthenticationException {
        final String username = authentication.getPrincipal().toString();
        final String password = authentication.getCredentials().toString();
        final OnmsUser user = m_userDao.getByUsername(username);

        boolean hasUser = false;

        if (user == null) {
            throw new BadCredentialsException("Bad credentials");
        }

        try {
            hasUser = m_userManager.hasUser(user.getUsername());
        } catch (final Exception e) {
            throw new AuthenticationServiceException("An error occurred while checking for " + username + " in the UserManager", e);
        }
        if (hasUser) {
            if (!m_userManager.comparePasswords(username, password)) {
                throw new BadCredentialsException("Bad credentials");
            }
        } else {
            if (!m_userManager.checkSaltedPassword(password, user.getPassword())) {
                throw new BadCredentialsException("Bad credentials");
            }
        }

        if (user.getAuthorities().size() == 0) {
            user.addAuthority(SpringSecurityUserDao.ROLE_USER);
        }

        final AbstractAuthenticationToken token = new AbstractAuthenticationToken(user.getAuthorities()) {
            private static final long serialVersionUID = 3659409846867741010L;

            @Override
            public Object getPrincipal() {
                return user.getUsername();
            }

            @Override
            public Object getCredentials() {
                return user.getPassword();
            }
        };
        token.setAuthenticated(true);

        return token;
    }

