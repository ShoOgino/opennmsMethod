    @Test
    @Transactional
    public void verifyCRUD() {
        // Nothing created yet
        Assert.assertEquals(0, layoutDao.countAll());
        Assert.assertEquals(0, layoutDao.countMatching(new Criteria(VertexPositionEntity.class)));

        // Create dummy
        LayoutEntity layout = new LayoutEntity();
        layout.setId("hash");
        layout.setCreated(new Date());
        layout.setCreator("mvrueden");
        layout.setUpdated(layout.getCreated());
        layout.setUpdator(layout.getCreator());
        layout.addVertexPosition(createVertexPosition("dummy", "1", 0, 0));
        layout.addVertexPosition(createVertexPosition("dummy", "2", 1, 1));

        // create and verify creation
        layoutDao.saveOrUpdate(layout);
        Assert.assertEquals(1, layoutDao.countAll());
        Assert.assertEquals(2, layoutDao.countMatching(new Criteria(VertexPositionEntity.class)));

        // Update
        // Remove Vertex
        layout.getVertexPositions().remove(0);
        layoutDao.update(layout);
        Assert.assertEquals(1, layoutDao.countAll());
        Assert.assertEquals(1, layoutDao.countMatching(new Criteria(VertexPositionEntity.class)));

        // Add Vertex
        layout.addVertexPosition(createVertexPosition("dummy", "3", 2,2));
        layoutDao.update(layout);
        Assert.assertEquals(1, layoutDao.countAll());
        Assert.assertEquals(2, layoutDao.countMatching(new Criteria(VertexPositionEntity.class)));

        // Update layout
        layout.setUpdated(new Date());
        layout.setUpdator("ulf");
        Assert.assertEquals(1, layoutDao.countAll());
        Assert.assertEquals(2, layoutDao.countMatching(new Criteria(VertexPositionEntity.class)));

        // Delete
        layoutDao.delete(layout);
        Assert.assertEquals(0, layoutDao.countAll());
        Assert.assertEquals(0, layoutDao.countMatching(new Criteria(VertexPositionEntity.class)));
    }

