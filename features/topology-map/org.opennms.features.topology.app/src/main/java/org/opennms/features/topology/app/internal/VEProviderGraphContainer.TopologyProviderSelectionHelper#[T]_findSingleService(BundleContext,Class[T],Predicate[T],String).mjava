        /**
         * Finds a service registered with the OSGI Service Registry of type <code>clazz</code>.
         * If a <code>bundleContextFilter</code> is provided, it is used to query for the service, e.g. "(operation.label=My Label*)".
         * In addition each clazz of type T found in the OSGI Service Registry must afterwards pass the provided <code>postFilter</code>.
         *
         * If multiple services are found, only the first one is returned.
         *
         * @return A object of type <code>clazz</code> or null.
         */
        private <T> T findSingleService(BundleContext bundleContext, Class<T> clazz, Predicate<T> postFilter, String bundleContextFilter) {
            List<T> providers = findServices(bundleContext, clazz, bundleContextFilter);
            Stream<T> stream = providers.stream();
            if (postFilter != null) { // filter may be null
                stream = stream.filter(postFilter);
            }
            providers = stream.collect(Collectors.toList());
            if (providers.size() > 1) {
                LOG.warn("Found more than one {}s. This is not supported. Using 1st one in list.", clazz.getSimpleName());
            }
            if (!providers.isEmpty()) {
                return providers.iterator().next();
            }
            return null;
        }

