	public void setDataSource(GraphContainer dataSource) {
		if(dataSource == m_dataSource) {
			return;
		}
		
		m_dataSource = (SimpleGraphContainer) dataSource;
		
		m_vertexHolder = new ElementHolder<TopoVertex>(m_dataSource.getVertexContainer(), "tcV") {

            @Override
            List<TopoVertex> getElements() {
                return super.getElements();
            }

            @Override
			protected TopoVertex update(TopoVertex element) {
				Object groupId = m_dataSource.getParentId(element.getItemId());
				String groupKey = groupId == null ? null : getKeyForItemId(groupId);
				
				element.setGroupId(groupId);
				element.setGroupKey(groupKey);
				return element;
			}

			@Override
			protected TopoVertex make(String key, Object itemId, Item item) {
				Object groupId = m_dataSource.getParentId(itemId);
				String groupKey = groupId == null ? null : getKeyForItemId(groupId);
				// System.out.println("Graph Make Call :: Parent of itemId: " + itemId + " groupId: " + groupId);
				return new TopoVertex(m_dataSource, key, itemId, groupKey, groupId);
			}

		};
		
		m_edgeHolder = new ElementHolder<TopoEdge>(m_dataSource.getEdgeContainer(), "tcE") {

			@Override
			protected TopoEdge make(String key, Object itemId, Item item) {

				List<Object> endPoints = new ArrayList<Object>(m_dataSource.getEndPointIdsForEdge(itemId));

				if (endPoints.size() < 2) {
				    return null;
				}

				Object sourceId = endPoints.get(0);
				Object targetId = endPoints.get(1);
				
				TopoVertex source = m_vertexHolder.getElementByItemId(sourceId);
				TopoVertex target = m_vertexHolder.getElementByItemId(targetId);

				return new TopoEdge(m_dataSource, key, itemId, item, sourceId, source, targetId, target);
			}

		};
		
		
	}

