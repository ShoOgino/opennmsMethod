	private Handler<GWTVertex> vertexDragEndHandler() {
		return new Handler<GWTVertex>() {

                        @Override
			public void call(GWTVertex vertex, int index) {
			    if(D3.getEvent().getButton() != NativeEvent.BUTTON_RIGHT) {
			    
    			    final List<String> values = new ArrayList<String>();
    			    final String[] vertexIds = m_dragObject.getDraggedVertices();
    			    D3.d3().selectAll(GWTVertex.VERTEX_CLASS_NAME).each(new Handler<GWTVertex>() {
    
                        @Override
                        public void call(GWTVertex vertex, int index) {
                            for(String id : vertexIds) {
                                if(vertex.getId().equals(id)) {
                                    values.add("id," + vertex.getId() + "|x," + vertex.getX() + "|y," + vertex.getY() + "|selected,"+ vertex.isSelected());
                                }
                            }
                        }
                    });
    			    
    			    if(m_dragObject.getDraggableElement().getAttribute("class").equals("vertex")) {
    			        //if(!D3.getEvent().getShiftKey()) {
    			        //    deselectAllItems(false);
    			        //}
    			    }
    			    
    			    m_client.updateVariable(getPaintableId(), "updateVertices", values.toArray(new String[] {}), false);
    			    m_client.sendPendingVariableChanges();
    			    
    				D3.getEvent().preventDefault();
    				D3.getEvent().stopPropagation();
			    }
			}

		};
	}

