	public SimpleGraphContainer(GraphProvider topologyProvider) {
		m_selectionManager = new DefaultSelectionManager();
		
		m_vertexHolder = new ElementHolder<GVertex>("gcV") {
			
            @Override
            protected void remove(GVertex element) {
                
            }

            @Override
            protected GVertex update(GVertex element) {
                Object groupId = m_graphProvider.getParent(element.getItemId());
                String groupKey = groupId == null ? null : getKeyForItemId(groupId);
                
                element.setGroupId(groupId);
                element.setGroupKey(groupKey);
                
                return element;
            }

            @Override
            protected GVertex make(String key, Object itemId, Item item) {
                Object groupId = m_graphProvider.getParent(itemId);
                String groupKey = groupId == null ? null : getKeyForItemId(groupId);
                //System.err.printf("GVertex Make Call :: Parent of itemId: %s with key %s groupId: %s groupKey %s\n" + key, itemId, key, groupId, groupKey);
                GVertex gVertex = new GVertex(key, itemId, item, groupKey, groupId);
                return gVertex;
            }
		};
		
        m_edgeHolder = new ElementHolder<GEdge>("gcE") {

            @Override
            protected GEdge make(String key, Object itemId, Item item) {

                Iterator<?> endPoints = m_graphProvider.getEndPointIdsForEdge((String)itemId).iterator();

                Object sourceId = endPoints.next();
                Object targetId = endPoints.next();
                
                GVertex source = m_vertexHolder.getElementByItemId(sourceId);
                GVertex target = m_vertexHolder.getElementByItemId(targetId);

                return new GEdge(key, itemId, item, source, target);
            }

        };


		m_vertexContainer = new GVertexContainer();
		m_edgeContainer = new GEdgeContainer();
	}

