    public void updateGraph(ApplicationConnection applicationConnection, TopologyComponentState componentState) {
	    
		GWTGraph graph = GWTGraph.create();
		
		m_client = applicationConnection;
        
		for(SharedVertex sharedVertex : componentState.getVertices()) {
		    
		    GWTVertex vertex = GWTVertex.create(sharedVertex.getKey(), sharedVertex.getX(), sharedVertex.getY());
            
            vertex.setInitialX(sharedVertex.getInitialX());
            vertex.setInitialY(sharedVertex.getInitialY());
            
            boolean selected = sharedVertex.getSelected();
            vertex.setSelected(selected);

            vertex.setSVGIconId(sharedVertex.getSVGIconId());

            vertex.setLabel(sharedVertex.getLabel());
            
            vertex.setStatus(sharedVertex.getStatus());

            vertex.setStatusCount(sharedVertex.getStatusCount());

			vertex.setTargets(sharedVertex.isTargets());

            vertex.setTooltipText(sharedVertex.getTooltipText());

            vertex.setStyleName(sharedVertex.getStyleName());

            vertex.setEdgePathOffset(sharedVertex.getEdgePathOffset());

            graph.addVertex(vertex);
		}

		for(SharedEdge sharedEdge : componentState.getEdges()) {
			String edgeKey = sharedEdge.getKey();
            String sourceKey = sharedEdge.getSourceKey();
            String targetKey = sharedEdge.getTargetKey();
            
            GWTVertex source = graph.findVertexById(sourceKey);
            GWTVertex target = graph.findVertexById( targetKey );
            GWTEdge edge = GWTEdge.create(edgeKey, source, target);
            boolean selected = sharedEdge.getSelected();
            String cssClass = sharedEdge.getCssClass();
            edge.setSelected(selected);
            edge.setCssClass(cssClass);
            String ttText = sharedEdge.getTooltipText();
            edge.setTooltipText(ttText);
            edge.setStatus(sharedEdge.getStatus());
			edge.setAdditionalStyling(JavaScriptHelper.toJavaScriptObject(sharedEdge.getAdditionalStyling()));
            graph.addEdge(edge);
		}
		
		JsArray<GWTEdge> edges = graph.getEdges();
		sortEdges(edges);
		consoleLog(edges);

		// Determine edges with same source/target and set link num/count accordingly
		List<GWTEdge> sameEdges = new ArrayList<>();
		for(int i = 1; i < edges.length(); i++) {
			GWTEdge edge1 = edges.get(i-1);
			GWTEdge edge2 = edges.get(i);

			String edge1Source = minEndPoint(edge1);
			String edge2Source = minEndPoint(edge2);
			String edge1Target = maxEndPoint(edge1);
			String edge2Target = maxEndPoint(edge2);

			consoleLog(i + ". Comparing " + edge1 + " and " + edge2 + " resulted in edge1Source/edge2Source, edge1Target/edge1Target: "
					+ edge1Source + "/" + edge2Source + ", " + edge1Target + "/" + edge2Target);

			if((edge1Source.equals(edge2Source) && edge1Target.equals(edge2Target))) {
				if (!sameEdges.contains(edge1)) {
					sameEdges.add(edge1);
				}
				if (!sameEdges.contains(edge2)) {
					sameEdges.add(edge2);
				}
			} else {
				updateEdges(sameEdges);
				sameEdges.clear();
			}
		}
		updateEdges(sameEdges);

        int x = componentState.getBoundX();
        int y = componentState.getBoundY();
        int width = componentState.getBoundWidth();
        int height = componentState.getBoundHeight();
        
        GWTBoundingBox oldBBox = m_graph.getBoundingBox();
        graph.setBoundingBox(GWTBoundingBox.create(x, y, width, height));
		setGraph(graph, oldBBox);
	}

