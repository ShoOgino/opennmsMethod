    /**
     * Creates a criteria that provides <VertexRefs> matching the Alarm query from the users query
     * stored in the <SearchResult> that was created by this class during the query method.  The SearchResult 
     * and the Criterion use the AlarmID as the ID for dereferencing in the container.
     */
	@Override
	public void addVertexHopCriteria(SearchResult searchResult, GraphContainer container) {
	    LOG.debug("SearchProvider->addVertexHopCriteria: called with search result: '{}'", searchResult);

	    CriteriaBuilder builder = new CriteriaBuilder(OnmsAlarm.class);
	    builder.eq("id", Integer.valueOf(searchResult.getId()));
	    List<OnmsAlarm> alarms = m_AlarmDao.findMatching(builder.toCriteria());
	    
	    OnmsAlarm alarm = alarms.get(0);

	    AlarmSearchResult result = new AlarmSearchResult(searchResult);
	    
	    result.setAlarmId(Integer.valueOf(searchResult.getId()));
	    result.setNodeId(alarm.getNodeId());
	    result.setAlarmQuery(searchResult.getLabel());
	    result.setNodeLabel(searchResult.getLabel());

	    AlarmHopCriteria criterion = m_alarmHopFactory.createCriteria(result);

	    container.addCriteria(criterion);

	    LOG.debug("SearchProvider->addVertexHop: adding hop criteria {}.", criterion);

	    logCriteriaInContainer(container);

	}

