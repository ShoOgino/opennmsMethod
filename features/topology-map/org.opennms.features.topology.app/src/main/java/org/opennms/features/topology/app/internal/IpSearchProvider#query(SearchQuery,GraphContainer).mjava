    @Override
    public List<SearchResult> query(SearchQuery searchQuery, GraphContainer graphContainer) {
    	
    	CriteriaBuilder bldr = new CriteriaBuilder(OnmsIpInterface.class);
		bldr.iplike("ipAddress", searchQuery.getQueryString()).orderBy("ipAddress", true);
		Criteria dbQueryCriteria = bldr.toCriteria();
		List<OnmsIpInterface> ips = m_ipInterfaceDao.findMatching(dbQueryCriteria);
		
		org.opennms.features.topology.api.topo.Criteria[] criteria = graphContainer.getCriteria();
		

        List<SearchResult> results = new ArrayList<SearchResult>();
        IPLOOP: for (OnmsIpInterface ip : ips) {
        	
        	for (org.opennms.features.topology.api.topo.Criteria criterion : criteria) {
				if (criterion.getNamespace().equals(getSearchProviderNamespace())) {
					String ipInterfaceId = ((IpLikeHopCriteria) criterion).getId();
					if (ipInterfaceId.equals(String.valueOf(ip.getId()))) {
						continue IPLOOP;
					}
				}
			}
        	
        	//Important here that the search result use the OnmsIpInterface.id as the ID for the search result object.
        	String ipInterfaceId = ip.getId().toString();
			SearchResult result = new SearchResult("IP", ipInterfaceId, ip.getIpAddress().getHostAddress());

        	result.setCollapsible(true);
        	
        	results.add(result);
        }
        return results;
    }

