	/**
	 * Changes the base topology to {@link #m_metaTopologyProvider} and optionally resets all criteria and sets the szl to 1.
	 * @param container The GraphContainer.
	 * @param resetCriteriaAndSzl Defines if the criteria and szl is reset.
     */
	private void execute(GraphContainer container, boolean resetCriteriaAndSzl) {
	    LOG.debug("Active provider is: {}", m_metaTopologyProvider);

        // only change if provider changed
	    final MetaTopologyProvider currentMetaTopologyProvider = container.getMetaTopologyProvider();
        if(currentMetaTopologyProvider == null || !currentMetaTopologyProvider.equals(m_metaTopologyProvider)) {
            container.setMetaTopologyProvider(m_metaTopologyProvider);

            // Grab the default topology provider
            final GraphProvider defaultTopologyProvider = m_metaTopologyProvider.getDefaultGraphProvider();
            final String preferredLayout = m_metaTopologyProvider.getPreferredLayout(defaultTopologyProvider);

            // We automatically set status providers if there are any
			StatusProvider vertexStatusProvider = findVertexStatusProvider(defaultTopologyProvider);
			EdgeStatusProvider edgeStatusProvider = findEdgeStatusProvider(defaultTopologyProvider);
			LayoutAlgorithm layoutAlgorithm = findLayoutAlgorithm(preferredLayout);

            // Refresh the topology provider, triggering the vertices to load  if they have not yet loaded
			defaultTopologyProvider.refresh();
			container.setEdgeStatusProvider(edgeStatusProvider);
			container.setVertexStatusProvider(vertexStatusProvider);
			if (layoutAlgorithm != null) {
				container.setLayoutAlgorithm(layoutAlgorithm);
			}
            container.setBaseTopology(defaultTopologyProvider);
			if (resetCriteriaAndSzl) {
				container.clearCriteria(); // remove all criteria
				container.setSemanticZoomLevel(1); // reset to 1
				container.addCriteria(container.getBaseTopology().getDefaultCriteria());
			}
            container.redoLayout();
        }
    }

