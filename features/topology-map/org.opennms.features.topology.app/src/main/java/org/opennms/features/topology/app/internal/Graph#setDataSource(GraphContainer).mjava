	public void setDataSource(GraphContainer dataSource) {
		if(dataSource == m_dataSource) {
			return;
		}
		
		m_dataSource = dataSource;
		
		m_vertexHolder = new ElementHolder<Vertex>(m_dataSource.getVertexContainer()) {

            @Override
            List<Vertex> getElements() {
                String toast = "toast";
                return super.getElements();
            }

            @Override
			protected Vertex update(Vertex element) {
				Object groupId = m_dataSource.getVertexContainer().getParent(element.getKey());
				String groupKey = groupId == null ? null : getKeyForItemId(groupId);
				
				element.setGroupId(groupId);
				element.setGroupKey(groupKey);
				return element;
			}

			@Override
			protected Vertex make(String key, Object itemId, Item item) {
				Object groupId = m_dataSource.getVertexContainer().getParent(key);
				String groupKey = groupId == null ? null : getKeyForItemId(groupId);
				System.out.println("Parent of itemId: " + itemId + " groupId: " + groupId);
				return new Vertex(key, itemId, item, groupKey, groupId);
			}

		};
		
		m_edgeHolder = new ElementHolder<Edge>(m_dataSource.getEdgeContainer()) {

			@Override
			protected Edge make(String key, Object itemId, Item item) {

				List<Object> endPoints = new ArrayList<Object>(m_dataSource.getEndPointIdsForEdge(itemId));

				Object sourceId = endPoints.get(0);
				Object targetId = endPoints.get(1);
				
				Vertex source = m_vertexHolder.getElementByItemId(sourceId);
				Vertex target = m_vertexHolder.getElementByItemId(targetId);

				return new Edge(key, itemId, item, source, target);
			}

		};
		
		
	}

