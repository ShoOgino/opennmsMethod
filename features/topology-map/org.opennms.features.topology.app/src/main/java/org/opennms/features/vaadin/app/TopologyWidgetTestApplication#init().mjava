    @Override
    public void init() {
        //This timer is a hack at the moment to disable and enable menuItems
        m_timer.scheduleAtFixedRate(new TimerTask() {

            @Override
            public void run() {
                List<MenuItem> items = m_menuBar.getItems();
                for(MenuItem item : items) {
                    if(item.getText().equals("Device")) {
                        List<MenuItem> children = item.getChildren();
                        for(MenuItem child : children) {
                            if(m_graphContainer.getSelectedVertexIds().size() > 0) {
                                if(!child.isEnabled()) {
                                    child.setEnabled(true);
                                }
                            }else {
                                if(child.isEnabled()) {
                                    child.setEnabled(false);
                                }
                                
                            }
                        }
                        
                        
                    }
                }
            }
        }, 1000, 1000);
        
        m_commandManager.addCommand(new RedoLayout("Redo Layout", null, null), true);
        
        m_commandManager.addCommand(new OpenCommand("Open", null, null), false, "File");
        
        m_commandManager.addCommand(new SaveCommand("Save", null, null), false, "File");
        
        m_commandManager.addCommand(new AddVertexCommand("Add Vertex", null, null), true, "File");
        
        m_commandManager.addCommand(new AddSwitchVertexCommand("Add Switch Vertex", null, null), true);
        
        m_commandManager.addCommand(new RemoveVertexCommand("Remove Vertex", null, null), true, "File");
        
        m_commandManager.addCommand(new ConnectCommand("Connect", null, null), true, "File");
        m_commandManager.addCommand(new CreateGroupCommand("Create Group", null, null), true, "Edit");
        
        m_commandManager.addCommand(new ManualLayoutCommand("Manual Layout", null, null), false, "Edit|Layout");

        m_commandManager.addCommand(new BalloonLayoutCommand("Balloon Layout", null, null), false, "Edit|Layout|JUNG");
        
        m_commandManager.addCommand(new CircleLayoutCommand("Circle Layout", null, null), false, "Edit|Layout|JUNG");

        m_commandManager.addCommand(new DAGLayoutCommand("DAG Layout", null, null), false, "Edit|Layout|JUNG");

        m_commandManager.addCommand(new RadialTreeLayoutCommand("Radial Tree Layout", null, null), false, "Edit|Layout|JUNG");
        m_commandManager.addCommand(new TreeLayoutCommand("Tree Layout", null, null), false, "Edit|Layout|JUNG");

        m_commandManager.addCommand(new SimpleLayoutCommand("Simple Layout", null, null), false, "Edit|Layout");

        m_commandManager.addCommand(new SpringLayoutCommand("Spring Layout", null, null), false, "Edit|Layout|JUNG");
        
        m_commandManager.addCommand(new KKLayoutCommand("KK Layout", null, null), false, "Edit|Layout|JUNG");
        m_commandManager.addCommand(new ISOMLayoutCommand("ISOM Layout", null, null), false, "Edit|Layout|JUNG");
        m_commandManager.addCommand(new FRLayoutCommand("FR Layout", null, null), false, "Edit|Layout|JUNG");
        
        m_commandManager.addCommand(new OtherLayoutCommand("Other Layout", null, null), false, "Edit|Layout");
        
        m_commandManager.addCommand(new ResetCommand("Reset", null, null), false, null);
        
        m_commandManager.addCommand(new HistoryCommand("History", null, null), false, null);
        
        m_commandManager.addCommand(new ShowMapCommand("Show Map", null, null), false, "View");
        
        m_commandManager.addCommand(new GetInfoCommand("Get Info", null, null), true, "Device");
        
        
        AbsoluteLayout layout = new AbsoluteLayout();
        layout.setSizeFull();
        
        m_window = new Window("Topology Widget Test");
        m_window.setContent(layout);
        setMainWindow(m_window);
        
        m_graphContainer.addGroup(ROOT_GROUP_ID, GROUP_ICON);
        m_graphContainer.addVertex(CENTER_VERTEX_ID, 50, 50, SERVER_ICON);
        m_graphContainer.getVertexContainer().setParent(CENTER_VERTEX_ID, ROOT_GROUP_ID);
        m_graphContainer.setLayoutAlgorithm(new KKLayoutAlgorithm());
        
        
        m_topologyComponent = new TopologyComponent(m_graphContainer);
        m_commandManager.addActionHandlers(m_topologyComponent);
        m_topologyComponent.setSizeFull();
        
        final Property scale = m_graphContainer.getProperty("scale");
        final Slider slider = new Slider(1, 4);
        slider.setResolution(2);
        slider.setHeight("300px");
        slider.setOrientation(Slider.ORIENTATION_VERTICAL);
        
        slider.addListener(new ValueChangeListener(){

			public void valueChange(ValueChangeEvent event) {
				scale.setValue((Double) slider.getValue());
			}
		});
        
        slider.setImmediate(true);
        
        m_tree = createTree();
        Label semanticZoomLabel = new Label();
        final Property zoomLevel = m_graphContainer.getProperty("semanticZoomLevel");
		semanticZoomLabel.setPropertyDataSource(zoomLevel);
        
        Button zoomInBtn = new Button("Zoom In");
        zoomInBtn.addListener(new ClickListener() {

			public void buttonClick(ClickEvent event) {
				int szl = (Integer) zoomLevel.getValue();
				szl++;
				zoomLevel.setValue(szl);
				m_graphContainer.redoLayout();
			}
		});
        
        Button zoomOutBtn = new Button("Zoom Out");
        zoomOutBtn.addListener(new ClickListener() {

			public void buttonClick(ClickEvent event) {
				int szl = (Integer) zoomLevel.getValue();
				szl--;
				zoomLevel.setValue(szl);
				m_graphContainer.redoLayout();
			}
		});
        
        
        VerticalLayout vLayout = new VerticalLayout();
        vLayout.setWidth("100%");
        vLayout.setHeight("100%");
        vLayout.addComponent(m_tree);
        
        AbsoluteLayout mapLayout = new AbsoluteLayout();
        
        mapLayout.addComponent(m_topologyComponent, "top:0px; left: 0px; right: 0px; bottom: 0px;");
        mapLayout.addComponent(slider, "top: 20px; left: 20px; z-index:1000;");
        mapLayout.addComponent(semanticZoomLabel, "bottom: 10px; right: 10px; z-index: 2000;");
        mapLayout.setSizeFull();
        
        HorizontalSplitPanel treeMapSplitPanel = new HorizontalSplitPanel();
        treeMapSplitPanel.setFirstComponent(vLayout);
        treeMapSplitPanel.setSecondComponent(mapLayout);
        treeMapSplitPanel.setSplitPosition(100, Sizeable.UNITS_PIXELS);
        treeMapSplitPanel.setSizeFull();
        
        
        VerticalSplitPanel bottomLayoutBar = new VerticalSplitPanel();
        bottomLayoutBar.setFirstComponent(treeMapSplitPanel);
        
        VerticalLayout zoomLayout = new VerticalLayout();
        zoomLayout.addComponent(zoomInBtn);
        zoomLayout.addComponent(zoomOutBtn);
        
		bottomLayoutBar.setSecondComponent(zoomLayout);
        bottomLayoutBar.setSplitPosition(80, Sizeable.UNITS_PERCENTAGE);
        bottomLayoutBar.setSizeFull();
        
        m_menuBar = m_commandManager.getMenuBar();
        m_menuBar.setWidth("100%");
        layout.addComponent(m_menuBar, "top: 0px; left: 0px; right:0px;");
        layout.addComponent(bottomLayoutBar, "top: 23px; left: 0px; right:0px; bottom:0px;");
        
    }

