    /**
     * This method processes the <SearchQuery> that the user has typed and returns a <SearchResult> list
     * of matching IP addresses as well as the query string itself, which is collapsible, to act
     * as a subnet container.
     * 
     */
    @Override
    public List<SearchResult> query(SearchQuery searchQuery, GraphContainer graphContainer) {
    	//LOG.debug("SearchProvider->query: called with search query: '{}'", searchQuery);

        List<SearchResult> results = new ArrayList<SearchResult>();
        
		String queryString = searchQuery.getQueryString();
		if (!isIpLikeQuery(queryString)) {
			//LOG.debug("SearchProvider->query: query not IPLIKE compatible.");
			return results;
		}
    	
    	CriteriaBuilder bldr = new CriteriaBuilder(OnmsIpInterface.class);
    	
		bldr.iplike("ipAddress", queryString).orderBy("ipAddress", true);
		Criteria dbQueryCriteria = bldr.toCriteria();
		List<OnmsIpInterface> ips = m_ipInterfaceDao.findMatching(dbQueryCriteria);
		//LOG.info("SearchProvider->query: found: '{}' IP interfaces.", ips.size());
		

		if (ips.size() == 0) {
			return results;
		} else {
			if (isIpLikeQuery(queryString)) {
				//LOG.debug("SearchProvider->query: adding IPLIKE search spec '{}' to the search results.", queryString);
				SearchResult searchResult = new SearchResult(getSearchProviderNamespace(), queryString, queryString);
				searchResult.setCollapsed(false);
				searchResult.setCollapsible(true);
				results.add(searchResult);
			}
		}

		Set<String> ipAddrs = new HashSet<String>();
		
		//LOG.info("SearchProvider->query: creating IP address set.");
		for (OnmsIpInterface ip : ips) {
			String hostAddress = ip.getIpAddress().getHostAddress();
            //LOG.debug("SearchProvider->query: adding '{}' to set of IPs.", hostAddress);
			ipAddrs.add(hostAddress);
		}
		
		//LOG.info("SearchProvider->query: building search result from set of IPs.");
		IPLOOP: for (String ip : ipAddrs) {
			
			if (findCriterion(ip, graphContainer) != null) {
				continue IPLOOP;

			} else {
				results.add(createSearchResult(ip));

			}
		}
		
		//LOG.info("SearchProvider->query: built search result with {} results.", results.size());
		
        return results;
    }

