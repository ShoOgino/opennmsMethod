	private void setDataSource(TopologyProvider topologyProvider) {
	    if (m_topologyProvider == topologyProvider) return;
	    
	    m_topologyProvider = topologyProvider;
	    
        m_vertexHolder = new ElementHolder<GVertex>(m_topologyProvider.getVertexContainer(), "gcV") {

            @Override
            protected void remove(GVertex element) {
                
            }

            @Override
            protected GVertex update(GVertex element) {
                Object groupId = m_topologyProvider.getVertexContainer().getParent(element.getItemId());
                String groupKey = groupId == null ? null : getKeyForItemId(groupId);
                
                element.setGroupId(groupId);
                element.setGroupKey(groupKey);
                
                return element;
            }

            @Override
            protected GVertex make(String key, Object itemId, Item item) {
                Object groupId = m_topologyProvider.getVertexContainer().getParent(itemId);
                String groupKey = groupId == null ? null : getKeyForItemId(groupId);
                System.out.println("Parent of itemId: " + itemId + " groupId: " + groupId);
                GVertex gVertex = new GVertex(key, itemId, item, groupKey, groupId);
                return gVertex;
            }

        };
        
        m_edgeHolder = new ElementHolder<GEdge>(m_topologyProvider.getEdgeContainer(), "gcE") {

            @Override
            protected GEdge make(String key, Object itemId, Item item) {

                List<Object> endPoints = new ArrayList<Object>(m_topologyProvider.getEndPointIdsForEdge(itemId));

                Object sourceId = endPoints.get(0);
                Object targetId = endPoints.get(1);
                
                GVertex source = m_vertexHolder.getElementByItemId(sourceId);
                GVertex target = m_vertexHolder.getElementByItemId(targetId);

                return new GEdge(key, itemId, item, source, target);
            }

        };
	    
	}

