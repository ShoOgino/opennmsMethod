    Result resolve(Collection<Integer> nodeIds) {
        // Fetch the nodes
        final Criteria idCriteria = new CriteriaBuilder(OnmsNode.class).in("id", nodeIds).toCriteria();
        final List<OnmsNode> nodes = nodeDao.findMatching(idCriteria);

        // Separate nodes with longitude/latitude already set, and addresses without longitude/latitude
        final List<OnmsNode> nodesWithGeoLocation = nodes.stream()
                .filter(node -> geoLocation(node) != null)
                .collect(Collectors.toList());
        final List<OnmsNode> nodesWithLongLat = nodesWithGeoLocation.stream()
                .filter(node -> {
                    OnmsGeolocation geoLocation = geoLocation(node);
                    return geoLocation != null && geoLocation.getLatitude() != null && geoLocation.getLongitude() != null;
                })
                .collect(Collectors.toList());
        final List<OnmsNode> nodesWithAddress = nodesWithGeoLocation.stream()
                .filter(node -> !Strings.isNullOrEmpty(geoLocation(node).asAddressString()))
                .collect(Collectors.toList());

        // Retrieve coordinates
        Map<Integer, Coordinates> nodeIdToCoordinateMapping = nodesWithAddress.stream().collect(Collectors.toMap(eachNode -> eachNode.getId(),
                eachNode -> {
                    final String addressString = geoLocation(eachNode).asAddressString();
                    try {
                        org.opennms.features.geocoder.Coordinates coordinates = geocoderService.getCoordinates(addressString);
                        if (coordinates != null) {
                            return new Coordinates(coordinates.getLongitude(), coordinates.getLatitude());
                        }
                    } catch (GeocoderException e) {
                        LOG.warn("Couldn't resolve address '%s' for node id: %s, label: %s'", addressString, eachNode.getId(), eachNode.getLabel(), e);
                    }
                    return null;
                }));

        // Convert nodesWithLongLat
        nodesWithLongLat.forEach(eachNode -> {
            OnmsGeolocation geoLocation = geoLocation(eachNode);
            nodeIdToCoordinateMapping.put(eachNode.getId(), new Coordinates(geoLocation.getLongitude(), geoLocation.getLatitude()));
        });
        return new Result(nodeIdToCoordinateMapping, nodesWithGeoLocation.stream().collect(Collectors.toMap(node -> node.getId(), node -> geoLocation(node))));
    }

