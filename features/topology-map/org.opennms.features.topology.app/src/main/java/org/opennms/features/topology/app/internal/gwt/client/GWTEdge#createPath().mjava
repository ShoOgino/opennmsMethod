    protected static Func<String, GWTEdge> createPath() {
        return new Func<String, GWTEdge>(){

            @Override
            public String call(GWTEdge edge, int index) {
                final GWTVertex source = edge.getSource();
				final GWTVertex target = edge.getTarget();
				final int dx = Math.abs(target.getX() - source.getX());
                final int dy = Math.abs(target.getY() - source.getY());
                // The distance of two points is a^2 + b^2 = c^2 -> c = SQRT(dx^2 + dy^2)
                final double distance =  Math.sqrt(dx * dx + dy * dy);
                // The minimal radius therefore is distance / 2
                final double minRadius = distance / 2;
                final double step = Math.max((int) distance, 300); // Minimal Step size is 300
                // A guessed maxRadius
                final double maxRadius = distance * 4;
                int direction = edge.getLinkNum() % 2 == 0  ? 0 : 1;

                // By default we draw an arc
                int rx = (int) Math.max(maxRadius - (edge.getLinkNum() / 2 * step), minRadius);
                if (edge.getLinkCount() % 2 == 1 && edge.getLinkNum() == edge.getLinkCount() -1 ) {
                    rx = 0; // if uneven link count, the last edge is always straight
                }
                consoleLog(edge.getId() + " Distance: " + distance);
                consoleLog(edge.getId() + " MaxRadius: " + maxRadius);
                consoleLog(edge.getId() + " MinRadius: " + minRadius);
                consoleLog(edge.getId() + " Step: " + step);
                consoleLog(edge.getId() + " rx: " + rx);
                consoleLog("-----");

                return "M" + source.getX() + "," + source.getY() +
                       " A" + rx + "," + rx + " 0 0, " + direction + " " + target.getX() + "," + target.getY();
            }

        };
    }

