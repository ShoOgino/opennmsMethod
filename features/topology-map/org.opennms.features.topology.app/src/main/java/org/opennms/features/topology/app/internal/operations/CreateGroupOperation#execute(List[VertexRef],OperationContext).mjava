	@Override
	public void execute(final List<VertexRef> targets, final OperationContext operationContext) {
		if (targets == null || targets.isEmpty()) {
			return;
		}

		final GraphContainer graphContainer = operationContext.getGraphContainer();

		final UI window = operationContext.getMainWindow();

		final Window groupNamePrompt = new GroupWindow("Create Group", "300px", "200px");

		// Define the fields for the form
		final PropertysetItem item = new PropertysetItem();
		item.addItemProperty("Group Label", new ObjectProperty<String>("", String.class) {
			private static final long serialVersionUID = -7904501088179818863L;

			@Override
			public void setValue(String newValue) throws ReadOnlyException, ConversionException {
				if (newValue == null) {
					super.setValue(newValue);
				} else {
					super.setValue(newValue.trim());
				}
			}

			@Override
			public String getValue() {
				String value = super.getValue();
				if (value != null) return value.trim();
				return value;
			}
		});		    

		final Form promptForm = new Form() {

			private static final long serialVersionUID = 8938663493202118574L;

			@Override
			public void commit() {
				// Trim the form value
				Field<String> field = getField("Group Label");
				String groupLabel = field.getValue();
				if (groupLabel == null) {
					throw new InvalidValueException("Group label cannot be null.");
				}
				getField("Group Label").setValue(groupLabel.trim());
				super.commit();
				createGroup(graphContainer, (String)getField("Group Label").getValue(), targets);
			}

			private void createGroup(final GraphContainer graphContainer, final String groupLabel, final List<VertexRef> targets) {

				// Add the new group
				VertexRef groupId = graphContainer.getBaseTopology().addGroup(groupLabel, GROUP_ICON_KEY);

				// Find a common parent group. If none can be found, then link the group to the
				// top of the topology
				Vertex parentGroup = null;
				for(VertexRef vertexRef : targets) {
					Vertex parent = graphContainer.getBaseTopology().getParent(vertexRef);
					if (parentGroup == null) {
						parentGroup = parent;
					} else if (!parentGroup.equals(parent)) {
						// If there are multiple parents present then attach the new group 
						// to the top level of the hierarchy
						parentGroup = null;
						break;
					}
				}

				// Link all targets to the newly-created group
				for(VertexRef vertexRef : targets) {
					graphContainer.getBaseTopology().setParent(vertexRef, groupId);
				}

				// Set the parent of the new group to the selected top-level parent
				graphContainer.getBaseTopology().setParent(groupId, parentGroup);

				// Save the topology
				operationContext.getGraphContainer().getBaseTopology().save();

				graphContainer.redoLayout();
			}
		};

		// Buffer changes to the datasource
		promptForm.setBuffered(true);
		// Bind the item to create all of the fields
		promptForm.setItemDataSource(item);
		promptForm.setDescription("Please Enter the Name of the Group");
		// Add validators to the fields
		addValidators(promptForm, graphContainer);

		// Footer
		Button ok = new Button("OK");
		ok.addClickListener(new ClickListener() {

			private static final long serialVersionUID = 7388841001913090428L;

			@Override
			public void buttonClick(ClickEvent event) {
				try {
					promptForm.validate();
					promptForm.commit();
					window.removeWindow(groupNamePrompt); // Close the prompt window
				} catch (InvalidValueException exception) {
					promptForm.setComponentError(new UserError(exception.getMessage(), ContentMode.TEXT, ErrorLevel.WARNING));
				}
			}
		});

		Button cancel = new Button("Cancel");
		cancel.addClickListener(new ClickListener() {

			private static final long serialVersionUID = 8780989646038333243L;

			@Override
			public void buttonClick(ClickEvent event) {
				window.removeWindow(groupNamePrompt); // Close the prompt window
			}
		});

		promptForm.setFooter(new HorizontalLayout());
		promptForm.getFooter().addComponent(ok);
		promptForm.getFooter().addComponent(cancel);

		groupNamePrompt.setContent(promptForm);

		window.addWindow(groupNamePrompt);
	}

