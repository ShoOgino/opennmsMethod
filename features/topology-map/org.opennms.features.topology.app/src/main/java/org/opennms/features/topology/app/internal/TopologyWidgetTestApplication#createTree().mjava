	private Tree createTree() {
	    final FilterableHierarchicalContainer container = new FilterableHierarchicalContainer(m_graphContainer.getVertexContainer());	    
	    
		final Tree tree = new Tree();
		tree.setMultiSelect(true);
		tree.setContainerDataSource(container);
        
		tree.setImmediate(true);
		tree.setItemCaptionPropertyId(Vertex.LABEL_PROPERTY);
		for (Iterator<?> it = tree.rootItemIds().iterator(); it.hasNext();) {
			tree.expandItemsRecursively(it.next());
		}
		
		tree.addListener(new ValueChangeListener() {
            
            @Override
            public void valueChange(ValueChangeEvent event) {
                Collection<Object> selectedList = (Collection<Object>) event.getProperty().getValue();
                Set<Object> completeSelectionList = new HashSet<Object>();
                completeSelectionList.addAll(selectedList);
                
                for( Object itemId : selectedList) {
                    if(container.hasChildren(itemId)) {
                        
                        Collection<?> children = container.getChildren(itemId);
                        completeSelectionList.addAll(children);
                        
                        for(Object childId : children) {
                            tree.select(childId);
                        }
                    }
                }
                
                m_topologyComponent.selectVerticesByItemId(completeSelectionList);
            }
        });
		
		
		return tree;
	}

