    /**
     * Updates the current layout by extracting the containers graph and then perform a (x,y) transformation
     * of all vertices.
     *
     * @param graphContainer The container of the current graph. Contains all relevant information to perform the transformation
     *                       of the {@link org.opennms.features.topology.api.Graph} by changing its {@link org.opennms.features.topology.api.Layout}
     */
    @Override
    public void updateLayout(GraphContainer graphContainer) {
        final Graph graph = graphContainer.getGraph();
        final Layout graphLayout = graph.getLayout();

        // Sort the vertices
        final List<Vertex> sortedVertices = graph.getDisplayVertices().stream().sorted(new Comparator<Vertex>() {
            @Override
            public int compare(Vertex v1, Vertex v2) {
                return ComparisonChain.start()
                        .compare(getIndex(v1), getIndex(v2))
                        .compare(v1.getLabel(), v2.getLabel())
                        .compare(v1.getId(), v2.getId())
                        .result();
            }
        }).collect(Collectors.toList());

        // Find the smallest rectangle (grid) that will fit all the vertices
        // while attempting to preserve the aspect ration of the view port
        final int numberOfVertices = sortedVertices.size();
        final BoundingBox layoutBounds = graphLayout.getBounds();
        final BoundingBox grid = calculateGrid(numberOfVertices, layoutBounds.getWidth(), layoutBounds.getHeight());

        // Layout the (sorted) vertices in the grid
        int k = 0;
        for (int y = 0; y < grid.getHeight(); y++) {
            for (int x = 0; x < grid.getWidth(); x++) {
                if (k >= numberOfVertices) {
                    break;
                }
                graphLayout.setLocation(sortedVertices.get(k++), new Point(x * ELBOW_ROOM * 2, y * ELBOW_ROOM * 2));
            }
        }
    }

