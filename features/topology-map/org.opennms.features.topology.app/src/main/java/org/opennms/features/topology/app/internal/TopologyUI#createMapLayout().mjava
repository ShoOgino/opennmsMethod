    private AbsoluteLayout createMapLayout() {
        final Property<Double> scale = m_graphContainer.getScaleProperty();

        m_topologyComponent = new TopologyComponent(m_graphContainer, m_iconRepositoryManager, this);
        m_topologyComponent.setSizeFull();
        m_topologyComponent.addMenuItemStateListener(this);
        m_topologyComponent.addVertexUpdateListener(this);

        final Slider slider = new Slider(0, 1);

        slider.setPropertyDataSource(scale);
        slider.setResolution(1);
        slider.setHeight("300px");
        slider.setOrientation(SliderOrientation.VERTICAL);

        slider.setImmediate(true);

        final Button zoomInBtn = new Button();
        zoomInBtn.setIcon(new ThemeResource("images/plus.png"));
        zoomInBtn.setDescription("Expand Semantic Zoom Level");
        zoomInBtn.setStyleName("semantic-zoom-button");
        zoomInBtn.addClickListener(new ClickListener() {

            @Override
            public void buttonClick(ClickEvent event) {
                int szl = (Integer) m_graphContainer.getSemanticZoomLevel();
                szl++;
                m_graphContainer.setSemanticZoomLevel(szl);
                setSemanticZoomLevel(szl);
                saveHistory();
            }
        });

        Button zoomOutBtn = new Button();
        zoomOutBtn.setIcon(new ThemeResource("images/minus.png"));
        zoomOutBtn.setDescription("Collapse Semantic Zoom Level");
        zoomOutBtn.setStyleName("semantic-zoom-button");
        zoomOutBtn.addClickListener(new ClickListener() {
            @Override
            public void buttonClick(ClickEvent event) {
                int szl = (Integer) m_graphContainer.getSemanticZoomLevel();
                if(szl > 0) {
                    szl--;
                    m_graphContainer.setSemanticZoomLevel(szl);
                    setSemanticZoomLevel(szl);
                    saveHistory();
                }

            }
        });


        final Button panBtn = new Button();
        panBtn.setIcon(new ThemeResource("images/cursor_drag_arrow.png"));
        panBtn.setDescription("Pan Tool");
        panBtn.setStyleName("toolbar-button down");

        final Button selectBtn = new Button();
        selectBtn.setIcon(new ThemeResource("images/selection.png"));
        selectBtn.setDescription("Selection Tool");
        selectBtn.setStyleName("toolbar-button");
        selectBtn.addClickListener(new ClickListener() {

            @Override
            public void buttonClick(ClickEvent event) {
                selectBtn.setStyleName("toolbar-button down");
                panBtn.setStyleName("toolbar-button");
                m_topologyComponent.setActiveTool("select");
            }
        });

        panBtn.addClickListener(new ClickListener() {

            @Override
            public void buttonClick(ClickEvent event) {
                panBtn.setStyleName("toolbar-button down");
                selectBtn.setStyleName("toolbar-button");
                m_topologyComponent.setActiveTool("pan");
            }
        });

        final Button historyBackBtn = new Button("<<");
        historyBackBtn.setDescription("Click to go back");
        historyBackBtn.addClickListener(new ClickListener() {
            @Override
            public void buttonClick(ClickEvent event) {
                com.vaadin.ui.JavaScript.getCurrent().execute("window.history.back()");
            }
        });

        final Button historyForwardBtn = new Button(">>");
        historyForwardBtn.setDescription("Click to go forward");
        historyForwardBtn.addClickListener(new ClickListener() {
            @Override
            public void buttonClick(ClickEvent event) {
                com.vaadin.ui.JavaScript.getCurrent().execute("window.history.forward()");
            }
        });

        VerticalLayout toolbar = new VerticalLayout();
        toolbar.setWidth("31px");
        toolbar.addComponent(panBtn);
        toolbar.addComponent(selectBtn);

        HorizontalLayout historyButtonLayout = new HorizontalLayout();
        historyButtonLayout.addComponent(historyBackBtn);
        historyButtonLayout.addComponent(historyForwardBtn);

        HorizontalLayout semanticLayout = new HorizontalLayout();

        semanticLayout.addComponent(zoomInBtn);
        semanticLayout.addComponent(m_zoomLevelLabel);
        semanticLayout.addComponent(zoomOutBtn);
        semanticLayout.setComponentAlignment(m_zoomLevelLabel, Alignment.MIDDLE_CENTER);

        AbsoluteLayout mapLayout = new AbsoluteLayout();

        mapLayout.addComponent(m_topologyComponent, "top:0px; left: 0px; right: 0px; bottom: 0px;");
        mapLayout.addComponent(slider, "top: 5px; left: 20px; z-index:1000;");
        mapLayout.addComponent(toolbar, "top: 324px; left: 12px;");
        mapLayout.addComponent(semanticLayout, "top: 380px; left: 2px;");
        mapLayout.addComponent(historyButtonLayout, "top: 5px; right: 10px;");
        mapLayout.setSizeFull();

        return mapLayout;

    }

