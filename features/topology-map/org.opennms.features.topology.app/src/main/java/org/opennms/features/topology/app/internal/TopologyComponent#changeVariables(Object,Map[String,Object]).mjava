    /**
     * Main vaadin method for receiving communication from the Front End
     * 
     */
	@SuppressWarnings("unchecked")
	@Override
    public void changeVariables(Object source, Map<String, Object> variables) {
        if(variables.containsKey("graph")) {
            String graph = (String) variables.get("graph");
            getApplication().getMainWindow().showNotification("" + graph);
            
        }
        
        if(variables.containsKey("clickedEdge")) {
            String edgeId = (String) variables.get("clickedEdge");
            selectEdge(edgeId);
        }
        
        if(variables.containsKey("clickedBackground")) {
            getSelectionManager().deselectAll();
        }
        
        if(variables.containsKey("clickedVertex")) {
            String vertexKey = (String) variables.get("clickedVertex");
            if((variables.containsKey("shiftKeyPressed") && (Boolean) variables.get("shiftKeyPressed") == true) 
                    || variables.containsKey("metaKeyPressed") && (Boolean) variables.get("metaKeyPressed") == true
                    || (variables.containsKey("ctrlKeyPressed") && (Boolean) variables.get("ctrlKeyPressed") == true  && !(((String)variables.get("platform")).indexOf("Mac") > 0)  )) {
        	    addVerticesToSelection(vertexKey);
        	}else {
        	    selectVertices(vertexKey);
        	}
            
        }
        
        if(variables.containsKey("marqueeSelection")) {
            String[] vertexKeys = (String[]) variables.get("marqueeSelection");
            if(variables.containsKey("shiftKeyPressed") && (Boolean) variables.get("shiftKeyPressed") == true) {
            	addVerticesToSelection(vertexKeys);
            } else {
            	selectVertices(vertexKeys);
            }
            
        }
        
        if(variables.containsKey("updateVertices")) {
            String[] vertices = (String[]) variables.get("updateVertices");
            for(String vUpdate : vertices) {
                updateVertex(vUpdate);
            }
            
            fireVertexUpdated();
            if(vertices.length > 0) {
                requestRepaint();
            }
            
        }
        
        if(variables.containsKey("scrollWheel")) {
            Map<String, Object> props = (Map<String, Object>) variables.get("scrollWheel");
            int x = (Integer) props.get("x");
            int y = (Integer) props.get("y");
            double scrollVal = (Double) props.get("scrollVal");
            getViewManager().zoomToPoint(getViewManager().getScale() + scrollVal, new Point(x, y));
        }
        
        if(variables.containsKey("clientCenterPoint")) {
            Map<String, Object> props = (Map<String, Object>) variables.get("clientCenterPoint");
            int x = (Integer) props.get("x");
            int y = (Integer) props.get("y"); 
            getViewManager().setCenter(new Point(x, y));
            
        }
        
        if(variables.containsKey("contextMenu")) {
            Map<String, Object> props = (Map<String, Object>) variables.get("contextMenu");
            
            
            int x = (Integer) props.get("x");
            int y = (Integer) props.get("y");
            
            String type = (String) props.get("type");

            Object target = null;
            if (type.toLowerCase().equals("vertex")) {
            	String targetKey = (String)props.get("target");
            	target = getGraph().getVertexByKey(targetKey);
            	getSelectionManager().setSelectedVertexRefs(Arrays.asList((Vertex) target));
            } else if (type.toLowerCase().equals("edge")) {
            	String targetKey = (String)props.get("target");
            	target = getGraph().getEdgeByKey(targetKey);
            }

            getContextMenuHandler().show(target, x, y);
        }
        
        if(variables.containsKey("mapPhysicalBounds")) {
            Map<String, Object> bounds = (Map<String, Object>) variables.get("mapPhysicalBounds");
            Integer width = (Integer)bounds.get("width");
            Integer height = (Integer)bounds.get("height");
            
            getViewManager().setViewPort(width, height);
            
        }
        
        if(variables.containsKey("doubleClick")) {
            Map<String, Object> props = (Map<String, Object>) variables.get("doubleClick");
            int x = (Integer) props.get("x");
            int y = (Integer) props.get("y");
            
            double scale = getViewManager().getScale() + 0.25;
            getViewManager().zoomToPoint(scale, new Point(x, y));
        }
        
        updateMenuItems();
    }

