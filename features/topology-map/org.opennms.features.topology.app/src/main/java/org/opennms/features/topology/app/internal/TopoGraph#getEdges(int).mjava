	public List<TopoEdge> getEdges(int semanticZoomLevel) {
		List<TopoEdge> visible = new ArrayList<TopoEdge>();
		List<TopoEdge> edges = getEdges();
		
		for(TopoEdge edge : edges) {
			Object sourceId = edge.getSource().getItemId();
			Object targetId = edge.getTarget().getItemId();
			Object displaySourceId = getGraphContainer().getDisplayVertexId(sourceId, semanticZoomLevel);
			Object displayTargetId = getGraphContainer().getDisplayVertexId(targetId, semanticZoomLevel);
			
			if(displaySourceId.equals(displayTargetId)) {
				//skip this one
			}else if(displaySourceId.equals(sourceId) && displayTargetId.equals(targetId)) {
				visible.add(edge);
			}else {
				TopoVertex displaySource = m_vertexHolder.getElementByItemId(displaySourceId);
				TopoVertex displayTarget = m_vertexHolder.getElementByItemId(displayTargetId);
				TopoEdge displayEdge = new TopoEdge(m_dataSource, "bogus:"+displaySourceId+":"+displayTargetId, null, displaySourceId, displaySource, displayTargetId, displayTarget);
				visible.add(displayEdge);
			}
		}
		
		return visible;
	}

