    /**
     * Updates the current layout by extracting the containers graph and then perform a (x,y) tranformation
     * of all vertices.
     *
     * @param graph The container of the current graph. Contains all relevant information to perform the transformation
     *                       of the {@link Graph} by changing its {@link Layout}
     */
    @Override
    public void updateLayout(final Graph graph) {
        final Layout graphLayout = graph.getLayout();

        // Only apply if fully level aware.
        // This should fix rendering if selected "Hierarchical Layout" is already selected, but the graph is not
        // fully level aware. See NMS-8703
        if (isFullyLevelAware(graph)) {
            final edu.uci.ics.jung.algorithms.layout.Layout<VertexRef, Edge> treeLayout = createTreeLayout(graph);
            applyLayoutPositions(graph.getDisplayVertices(), treeLayout, graphLayout);
        } else {
            // SEE NMS-8703
            LOG.warn("The selected graph is not fully level aware. Cannot layout hierarchical. Falling back to D3 Layout");
            new D3TopoLayoutAlgorithm().updateLayout(graph);
        }
    }

