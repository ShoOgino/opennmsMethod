    public boolean isPersistedLayoutEqualToCurrentLayout(Graph graph) {
        LayoutEntity layoutEntity = loadLayout(graph);
        if (layoutEntity != null) {
            // If we have a layout persisted, we verify if it is equal.
            final Map<VertexRef, Point> persistedLocations = layoutEntity.getVertexPositions()
                    .stream()
                    .collect(Collectors.toMap((Function<VertexPositionEntity, VertexRef>) vertexPositionEntity -> {
                        VertexRefEntity vertexRefEntity = vertexPositionEntity.getVertexRef();
                        return new DefaultVertexRef(vertexRefEntity.getNamespace(), vertexRefEntity.getId());
                    }, vertexPositionEntity -> {
                        PointEntity position = vertexPositionEntity.getPosition();
                        return new Point(position.getX(), position.getY());
                    }));

            // The locations may contain elements currently not visible, we filter them
            final Map<VertexRef, Point> manualLocations = new HashMap<>();
            graph.getLayout().getLocations().forEach((key, value) -> {
                if (persistedLocations.containsKey(key)) {
                    // layoutEntity stores int coordinates, but manualLocations are stored as double.
                    // Convert to int to make it comparable.
                    manualLocations.put(key, new Point((int) value.getX(), (int) value.getY()));
                }
            });
            final boolean layoutIsEqual = manualLocations.equals(persistedLocations);
            return layoutIsEqual;
        }
        return false; // We don't have anything persisted, so they are not equal
    }

