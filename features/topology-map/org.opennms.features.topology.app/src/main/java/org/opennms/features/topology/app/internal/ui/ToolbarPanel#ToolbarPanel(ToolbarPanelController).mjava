    public ToolbarPanel(final ToolbarPanelController controller) {
        addStyleName(Styles.TOOLBAR);
        this.layoutManager = controller.getLayoutManager();

        final Property<Double> scale = controller.getScaleProperty();
        final Boolean[] eyeClosed = new Boolean[] {false};
        final Button showFocusVerticesBtn = new Button();
        showFocusVerticesBtn.setIcon(FontAwesome.EYE);
        showFocusVerticesBtn.setDescription("Toggle Highlight Focus Nodes");
        showFocusVerticesBtn.addClickListener(new Button.ClickListener() {
            @Override
            public void buttonClick(Button.ClickEvent event) {
                if(eyeClosed[0]) {
                    showFocusVerticesBtn.setIcon(FontAwesome.EYE);
                } else {
                    showFocusVerticesBtn.setIcon(FontAwesome.EYE_SLASH);
                }
                eyeClosed[0] = !eyeClosed[0]; // toggle
                controller.toggleHighlightFocus();
            }
        });

        final Button magnifyBtn = new Button();
        magnifyBtn.setIcon(FontAwesome.PLUS);
        magnifyBtn.setDescription("Magnify");
        magnifyBtn.addClickListener((Button.ClickListener) event -> scale.setValue(Math.min(1, scale.getValue() + 0.25)));

        final Button demagnifyBtn = new Button();
        demagnifyBtn.setIcon(FontAwesome.MINUS);
        demagnifyBtn.setDescription("Demagnify");
        demagnifyBtn.addClickListener((Button.ClickListener) event -> scale.setValue(Math.max(0, scale.getValue() - 0.25)));

        m_szlOutBtn = new Button();
        m_szlOutBtn.setId("szlOutBtn");
        m_szlOutBtn.setIcon(FontAwesome.ANGLE_DOWN);
        m_szlOutBtn.setDescription("Decrease Semantic Zoom Level");
        m_szlOutBtn.setEnabled(controller.getSemanticZoomLevel() > 0);
        m_szlOutBtn.addClickListener(new Button.ClickListener() {
            @Override
            public void buttonClick(Button.ClickEvent event) {
                int szl = controller.getSemanticZoomLevel();
                if (szl > 0) {
                    setSemanticZoomLevel(controller, szl - 1);
                    controller.saveHistory();
                }
            }
        });

        final Button szlInBtn = new Button();
        szlInBtn.setId("szlInBtn");
        szlInBtn.setIcon(FontAwesome.ANGLE_UP);
        szlInBtn.setDescription("Increase Semantic Zoom Level");
        szlInBtn.addClickListener(new Button.ClickListener() {

            @Override
            public void buttonClick(Button.ClickEvent event) {
                setSemanticZoomLevel(controller, controller.getSemanticZoomLevel() + 1);
                controller.saveHistory();
            }
        });

        m_zoomLevelLabel.setId("szlInputLabel");

        m_panBtn = new Button();
        m_panBtn.setIcon(FontAwesome.ARROWS);
        m_panBtn.setDescription("Pan Tool");
        m_panBtn.addStyleName(Styles.SELECTED);

        m_selectBtn = new Button();
        m_selectBtn.setIcon(IonicIcons.ANDROID_EXPAND);
        m_selectBtn.setDescription("Selection Tool");
        m_selectBtn.setStyleName("toolbar-button");
        m_selectBtn.addClickListener(new Button.ClickListener() {

            @Override
            public void buttonClick(Button.ClickEvent event) {
                m_selectBtn.addStyleName(Styles.SELECTED);
                m_panBtn.removeStyleName(Styles.SELECTED);
                controller.setActiveTool(ActiveTool.select);
            }
        });

        m_panBtn.addClickListener(new Button.ClickListener() {

            @Override
            public void buttonClick(Button.ClickEvent event) {
                m_panBtn.addStyleName(Styles.SELECTED);
                m_selectBtn.removeStyleName(Styles.SELECTED);
                controller.setActiveTool(ActiveTool.pan);
            }
        });

        Button showAllMapBtn = new Button();
        showAllMapBtn.setId("showEntireMapBtn");
        showAllMapBtn.setIcon(FontAwesome.GLOBE);
        showAllMapBtn.setDescription("Show Entire Map");
        showAllMapBtn.addClickListener((Button.ClickListener) event -> controller.showAllMap());

        Button centerSelectionBtn = new Button();
        centerSelectionBtn.setIcon(FontAwesome.LOCATION_ARROW);
        centerSelectionBtn.setDescription("Center On Selection");
        centerSelectionBtn.addClickListener((Button.ClickListener) event -> controller.centerMapOnSelection());

        Button shareButton = new Button("", FontAwesome.SHARE_SQUARE_O);
        shareButton.setDescription("Share");
        shareButton.addClickListener((x) -> {
            // create the share link
            String fragment = getUI().getPage().getLocation().getFragment();
            String url = getUI().getPage().getLocation().toString().replace("#" + getUI().getPage().getLocation().getFragment(), "");
            String shareLink = String.format("%s?%s=%s", url, TopologyUI.TopologyUIRequestHandler.PARAMETER_HISTORY_FRAGMENT, fragment);

            // Create the Window
            Window shareWindow = new Window();
            shareWindow.setCaption("Share Link");
            shareWindow.setModal(true);
            shareWindow.setClosable(true);
            shareWindow.setResizable(false);
            shareWindow.setWidth(400, Sizeable.Unit.PIXELS);

            TextArea shareLinkField = new TextArea();
            shareLinkField.setValue(shareLink);
            shareLinkField.setReadOnly(true);
            shareLinkField.setRows(3);
            shareLinkField.setWidth(100, Sizeable.Unit.PERCENTAGE);

            // Close Button
            Button close = new Button("Close");
            close.setClickShortcut(ShortcutAction.KeyCode.ESCAPE, null);
            close.addClickListener(event -> shareWindow.close());

            // Layout for Buttons
            HorizontalLayout buttonLayout = new HorizontalLayout();
            buttonLayout.setMargin(true);
            buttonLayout.setSpacing(true);
            buttonLayout.setWidth("100%");
            buttonLayout.addComponent(close);
            buttonLayout.setComponentAlignment(close, Alignment.BOTTOM_RIGHT);

            // Content Layout
            VerticalLayout verticalLayout = new VerticalLayout();
            verticalLayout.setMargin(true);
            verticalLayout.setSpacing(true);
            verticalLayout.addComponent(new Label("Please use the following link to share the current view with others."));
            verticalLayout.addComponent(shareLinkField);
            verticalLayout.addComponent(buttonLayout);

            shareWindow.setContent(verticalLayout);

            getUI().addWindow(shareWindow);
        });

        // Refresh Button
        Button refreshButton = new Button();
        refreshButton.setIcon(FontAwesome.REFRESH);
        refreshButton.setDescription("Refresh Now");
        refreshButton.addClickListener((event) -> controller.refreshUI());

        // Layer Layout
        layerLayout = new VerticalLayout();
        layerLayout.setId("layerComponent");
        layerLayout.setSpacing(true);
        layerLayout.setMargin(true);

        // Layer Button
        layerButton = new Button();
        layerButton.setId("layerToggleButton");
        layerButton.setIcon(FontAwesome.BARS);
        layerButton.setDescription("Layers");
        layerButton.addClickListener((event) -> {
            boolean isCollapsed = layerButton.getStyleName().contains(Styles.EXPANDED);
            setLayerLayoutVisible(!isCollapsed);
        });

        // Save button
        layerSaveButton = new Button();
        layerSaveButton.setId("saveLayerButton");
        layerSaveButton.setIcon(FontAwesome.FLOPPY_O);
        layerSaveButton.addClickListener((event) -> controller.saveLayout());

        // Actual Layout for the Toolbar
        CssLayout contentLayout = new CssLayout();
        contentLayout.addStyleName("toolbar-component");
        contentLayout.addComponent(createGroup(szlInBtn, m_zoomLevelLabel, m_szlOutBtn));
        contentLayout.addComponent(createGroup(refreshButton, centerSelectionBtn, showAllMapBtn, layerButton, showFocusVerticesBtn));
        contentLayout.addComponent(createGroup(m_panBtn, m_selectBtn));
        contentLayout.addComponent(createGroup(magnifyBtn, demagnifyBtn));
        contentLayout.addComponent(createGroup(shareButton));
        contentLayout.addComponent(createGroup(layerSaveButton));

        // Toolbar
        addComponent(contentLayout);
    }

