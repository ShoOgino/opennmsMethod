	public void updateFromUIDL(UIDL uidl, ApplicationConnection client) {
	    
		if(client.updateComponent(this, uidl, true)) {
			return;
		}
		
		GWTGraph graph = GWTGraph.create();
		
		m_client = client;
		m_paintableId = uidl.getId();
		setActiveTool(uidl.getStringAttribute("activeTool"));
        
		UIDL graphUIDL = uidl.getChildByTagName("graph");
		Iterator<?> children = graphUIDL.getChildIterator();
		
		GWTVertex.setBackgroundImage(client.translateVaadinUri("theme://images/vertex_circle_selector.png"));
		while(children.hasNext()) {
			UIDL child = (UIDL) children.next();

			if(child.getTag().equals("vertex")) {
				String vertexKey = child.getStringAttribute("key");

				GWTVertex vertex = GWTVertex.create(vertexKey, child.getIntAttribute("x"), child.getIntAttribute("y"));
				
				vertex.setInitialX(child.getIntAttribute("initialX"));
				vertex.setInitialY(child.getIntAttribute("initialY"));
				
				boolean selected = child.getBooleanAttribute("selected");
				vertex.setSelected(selected);

				vertex.setIconUrl(client.translateVaadinUri(child.getStringAttribute("iconUrl")));

				if (child.hasAttribute("label")) {
					vertex.setLabel(child.getStringAttribute("label"));
				}

				graph.addVertex(vertex);

				if(m_client != null) {
					TooltipInfo ttInfo = new TooltipInfo(child.getStringAttribute("tooltipText"));
					m_client.registerTooltip(this, vertex, ttInfo);
				}
				
			}else if(child.getTag().equals("edge")) {
				String edgeKey = child.getStringAttribute("key");
				String sourceKey = child.getStringAttribute("source");
				String targetKey = child.getStringAttribute("target");
				
				GWTVertex source = graph.findVertexById(sourceKey);
				GWTVertex target = graph.findVertexById( targetKey );
				GWTEdge edge = GWTEdge.create(edgeKey, source, target);
				boolean selected = child.getBooleanAttribute("selected");
				String cssClass = child.getStringAttribute("cssClass");
				edge.setSelected(selected);
				edge.setCssClass(cssClass);
				String ttText = child.getStringAttribute("tooltipText");
				edge.setTooltipText(ttText);
				graph.addEdge(edge);

			}
		}
		
		JsArray<GWTEdge> edges = graph.getEdges();
		sortEdges(edges);
		
		
        for( int i = 0; i < edges.length(); i++) {
            if(i != 0) {
		        GWTEdge edge1 = edges.get(i-1);
		        GWTEdge edge2 = edges.get(i);
		        
		        String edge1Source = minEndPoint(edge1);
		        String edge2Source = minEndPoint(edge2);
		        String edge1Target = maxEndPoint(edge1);
		        String edge2Target = maxEndPoint(edge2);
		        
		        if((edge1Source.equals(edge2Source) && edge1Target.equals(edge2Target))) {
		            edge2.setLinkNum(edge1.getLinkNum() + 1);
		        }else {
		            edge2.setLinkNum(1);
		        }
		    }
		}
        
        int x = uidl.getIntAttribute("boundX");
        int y = uidl.getIntAttribute("boundY");
        int width = uidl.getIntAttribute("boundWidth");
        int height = uidl.getIntAttribute("boundHeight");
        
        graph.setScale(uidl.getDoubleAttribute("scale"));
        graph.setOldScale(m_graph.getScale());
        graph.setClientX(uidl.getIntAttribute("clientX"));
        graph.setClientY(uidl.getIntAttribute("clientY"));
        //graph.setPanToSelection(uidl.getBooleanAttribute("panToSelection"));
        graph.setFitToView(uidl.getBooleanAttribute("fitToView"));
        graph.setBoundingBox(GWTBoundingBox.create(x, y, width, height));
        consoleLog("Bounding box :: x: " + graph.getBoundingBox().getX() + " y: " + graph.getBoundingBox().getY() + " width: " + graph.getBoundingBox().getWidth() + " height: " + graph.getBoundingBox().getHeight());
		setGraph(graph);
        
		
	}

