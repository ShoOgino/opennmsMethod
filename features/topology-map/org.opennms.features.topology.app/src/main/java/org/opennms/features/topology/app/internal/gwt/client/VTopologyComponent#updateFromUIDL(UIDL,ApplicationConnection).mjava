	public void updateFromUIDL(UIDL uidl, ApplicationConnection client) {

		if(client.updateComponent(this, uidl, true)) {
			return;
		}

		m_client = client;
		m_paintableId = uidl.getId();

		setScale(uidl.getDoubleAttribute("scale"), uidl.getIntAttribute("clientX"), uidl.getIntAttribute("clientY"));
		setSemanticZoomLevel(uidl.getIntAttribute("semanticZoomLevel"));
		setPanToSelection(uidl.getBooleanAttribute("panToSelection"));
		setFitToView(uidl.getBooleanAttribute("fitToView"));
		setActiveTool(uidl.getStringAttribute("activeTool"));

		UIDL graph = uidl.getChildByTagName("graph");
		Iterator<?> children = graph.getChildIterator();

		GWTGraph graphConverted = GWTGraph.create();
		GWTVertex.setBackgroundImage(client.translateVaadinUri("theme://images/vertex_circle_selector.png"));
		while(children.hasNext()) {
			UIDL child = (UIDL) children.next();

			if(child.getTag().equals("group")) {
				GWTGroup group = GWTGroup.create(child.getStringAttribute("key"), child.getIntAttribute("x"), child.getIntAttribute("y"));
				boolean booleanAttribute = child.getBooleanAttribute("selected");

				group.setSelected(booleanAttribute);
				group.setIcon(client.translateVaadinUri(child.getStringAttribute("iconUrl")));
				group.setSemanticZoomLevel(child.getIntAttribute("semanticZoomLevel"));

				if (child.hasAttribute("label")) {
					group.setLabel(child.getStringAttribute("label"));
				}
				graphConverted.addGroup(group);

				if(m_client != null) {
					TooltipInfo ttInfo = new TooltipInfo(child.getStringAttribute("tooltipText"));
					m_client.registerTooltip(this, group, ttInfo);
				}

			}else if(child.getTag().equals("vertex")) {

				GWTVertex vertex = GWTVertex.create(child.getStringAttribute("key"), child.getIntAttribute("x"), child.getIntAttribute("y"));
				boolean selected = child.getBooleanAttribute("selected");
				vertex.setSemanticZoomLevel(child.getIntAttribute("semanticZoomLevel"));

				if(child.hasAttribute("groupKey")) {
					String groupKey = child.getStringAttribute("groupKey");
					GWTGroup group = graphConverted.getGroup(groupKey);
					vertex.setParent(group);
				}

				vertex.setSelected(selected);
				vertex.setIcon(client.translateVaadinUri(child.getStringAttribute("iconUrl")));

				if (child.hasAttribute("label")) {
					vertex.setLabel(child.getStringAttribute("label"));
				}

				graphConverted.addVertex(vertex);

				if(m_client != null) {
					TooltipInfo ttInfo = new TooltipInfo(child.getStringAttribute("tooltipText"));
					m_client.registerTooltip(this, vertex, ttInfo);
				}
				
			}else if(child.getTag().equals("edge")) {
				GWTVertex source = graphConverted.findVertexById(child.getStringAttribute("source"));
				GWTEdge edge = GWTEdge.create(child.getStringAttribute("key"), source, graphConverted.findVertexById( child.getStringAttribute("target") ));
				boolean selected = child.getBooleanAttribute("selected");
				String cssClass = child.getStringAttribute("cssClass");
				edge.setSelected(selected);
				edge.setCssClass(cssClass);
				String ttText = child.getStringAttribute("tooltipText");
				edge.setTooltipText(ttText);
				graphConverted.addEdge(edge);

			}else if(child.getTag().equals("groupParent")) {
				String groupKey = child.getStringAttribute("key");
				String parentKey = child.getStringAttribute("parentKey");
				GWTGroup group = graphConverted.getGroup(groupKey);
				GWTGroup parentGroup = graphConverted.getGroup(parentKey);

				group.setParent(parentGroup);

			}else if(child.getTag().equals("vertexParent")) {
				String vertexKey = child.getStringAttribute("key");
				String parentKey = child.getStringAttribute("parentKey");
				GWTVertex vertex = graphConverted.getVertex(vertexKey);
				GWTGroup parentGroup = graphConverted.getGroup(parentKey);

				vertex.setParent(parentGroup);
			}
		}

		setGraph(graphConverted);
		
	}

