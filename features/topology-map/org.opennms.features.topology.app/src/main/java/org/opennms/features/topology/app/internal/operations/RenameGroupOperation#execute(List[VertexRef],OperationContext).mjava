	@Override
	public Undoer execute(final List<VertexRef> targets, final OperationContext operationContext) {
		if (targets == null || targets.isEmpty() || targets.size() != 1) {
			return null;
		}

		final GraphContainer graphContainer = operationContext.getGraphContainer();

		final Window window = operationContext.getMainWindow();

		final Window groupNamePrompt = new Window("Rename Group");
		groupNamePrompt.setModal(true);
		groupNamePrompt.setResizable(false);
		groupNamePrompt.setHeight("220px");
		groupNamePrompt.setWidth("300px");

		// Define the fields for the form
		final PropertysetItem item = new PropertysetItem();
		item.addItemProperty("Group Label", new ObjectProperty<String>("", String.class));

		final Form promptForm = new Form() {

			private static final long serialVersionUID = 9202531175744361407L;

			@Override
			public void commit() {
				// Trim the form value
				getField("Group Label").setValue(((String)getField("Group Label").getValue()).trim());
				super.commit();
				String groupLabel = (String)getField("Group Label").getValue();

				//Object parentKey = targets.get(0);
				//Object parentId = graphContainer.getVertexItemIdForVertexKey(parentKey);
				VertexRef parentId = targets.get(0);
				Vertex parentVertex = parentId == null ? null : graphContainer.getBaseTopology().getVertex(parentId);
				Item parentItem = parentVertex == null ? null : parentVertex.getItem();

				if (parentItem != null) {

					Property property = parentItem.getItemProperty("label");
					if (property != null && !property.isReadOnly()) {
						property.setValue(groupLabel);

						// Save the topology
						graphContainer.getBaseTopology().save(null);

						graphContainer.redoLayout();
					}
				}
			}
		};
		// Buffer changes to the datasource
		promptForm.setWriteThrough(false);
		// Bind the item to create all of the fields
		promptForm.setItemDataSource(item);
		// Add validators to the fields
		promptForm.getField("Group Label").setRequired(true);
		promptForm.getField("Group Label").setRequiredError("Group label cannot be blank.");
		promptForm.getField("Group Label").addValidator(new StringLengthValidator("Label must be at least one character long.", 1, -1, false));
		promptForm.getField("Group Label").addValidator(new AbstractValidator("A group with label \"{0}\" already exists.") {

			private static final long serialVersionUID = 79618011585921224L;

			@Override
			public boolean isValid(Object value) {
				try {
					final Collection<? extends Vertex> vertexIds = graphContainer.getBaseTopology().getVertices();
					final Collection<String> groupLabels = new ArrayList<String>();
					for (Vertex vertexId : vertexIds) {
						if (vertexId.isGroup()) {
							groupLabels.add(vertexId.getLabel());
						}
					}

					for (String label : groupLabels) {
						LoggerFactory.getLogger(this.getClass()).debug("Comparing {} to {}", value, label);
						if (label.equals(value)) {
							return false;
						}
					}
					return true;
				} catch (Throwable e) {
					LoggerFactory.getLogger(this.getClass()).error(e.getMessage(), e);
					return false;
				}
			}
		});

		Button ok = new Button("OK");
		ok.addListener(new ClickListener() {

			private static final long serialVersionUID = 7388841001913090428L;

			@Override
			public void buttonClick(ClickEvent event) {
				promptForm.commit();
				// Close the prompt window
				window.removeWindow(groupNamePrompt);
			}
		});
		promptForm.getFooter().addComponent(ok);

		Button cancel = new Button("Cancel");
		cancel.addListener(new ClickListener() {

			private static final long serialVersionUID = 8780989646038333243L;

			@Override
			public void buttonClick(ClickEvent event) {
				// Close the prompt window
				window.removeWindow(groupNamePrompt);
			}
		});
		promptForm.getFooter().addComponent(cancel);

		groupNamePrompt.addComponent(promptForm);

		window.addWindow(groupNamePrompt);

		return null;
	}

