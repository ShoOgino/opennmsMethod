    /**
     * Returns the child of <code>vertex</code> at position <code>index</code> 
     * in this tree, or <code>null</code> if it has no child at that position.
     * @param vertex the vertex to query
     * @return the child of <code>vertex</code> at position <code>index</code> 
     * in this tree, or <code>null</code> if it has no child at that position
     * @throws ArrayIndexOutOfBoundsException if <code>index</code> is not in 
     * the range {@code [0, order-1]}
     */
    public V getChild(V vertex, int index)
    {
        if (index < 0 || index >= order)
            throw new ArrayIndexOutOfBoundsException(index + " is not in [0, order-1]");
        if (!containsVertex(vertex))
            return null;
        List<E> edges = vertex_data.get(vertex).child_edges;
        if (edges == null)
        	return null;
        E edge = edges.get(index);
        return edge == null ? null : edge_vpairs.get(edge).getSecond();
    }

