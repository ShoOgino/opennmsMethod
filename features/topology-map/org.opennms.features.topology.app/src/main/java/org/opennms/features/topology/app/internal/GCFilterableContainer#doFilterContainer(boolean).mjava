	 /*
	  * Overridden to provide filtering for root & children items.
	  * 
	  * (non-Javadoc)
	  * 
	  * @see com.vaadin.data.util.IndexedContainer#updateContainerFiltering()
	  */
	 @Override
	 protected boolean doFilterContainer(boolean hasFilters) {
		 if (!hasFilters) {
			 // All filters removed
			 filteredRoots = null;
			 filteredChildren = null;
			 filteredParent = null;

			 return super.doFilterContainer(hasFilters);
		 }

		 // Reset data structures
		 filteredRoots = new LinkedList<Object>();
		 filteredChildren = new HashMap<Object, LinkedList<Object>>();
		 filteredParent = new HashMap<Object, Object>();

		 if (includeParentsWhenFiltering) {
			 // Filter so that parents for items that match the filter are also
			 // included
			 HashSet<Object> includedItems = new HashSet<Object>();
			 for (Object rootId : m_graphContainer.getRootGroup()) {
				 if (filterIncludingParents(rootId, includedItems)) {
					 filteredRoots.add(rootId);
					 addFilteredChildrenRecursively(rootId, includedItems);
				 }
			 }
			 // includedItemIds now contains all the item ids that should be
			 // included. Filter IndexedContainer based on this
			 filterOverride = includedItems;
			 super.doFilterContainer(hasFilters);
			 filterOverride = null;

			 return true;
		 } else {
			 // Filter by including all items that pass the filter and make items
			 // with no parent new root items

			 // Filter IndexedContainer first so getItemIds return the items that
			 // match
			 super.doFilterContainer(hasFilters);

			 LinkedHashSet<Object> filteredItemIds = new LinkedHashSet<Object>(
					 getItemIds());

			 for (Object itemId : filteredItemIds) {
				 Object itemParent = m_graphContainer.getParent(vRef(itemId));
				 if (itemParent == null || !filteredItemIds.contains(itemParent)) {
					 // Parent is not included or this was a root, in both cases
					 // this should be a filtered root
					 filteredRoots.add(itemId);
				 } else {
					 // Parent is included. Add this to the children list (create
					 // it first if necessary)
					 addFilteredChild(itemParent, itemId);
				 }
			 }

			 return true;
		 }
	 }

