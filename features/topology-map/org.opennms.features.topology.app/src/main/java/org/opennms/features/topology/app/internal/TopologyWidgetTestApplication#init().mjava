	@SuppressWarnings("serial")
	@Override
	public void init() {
	    setTheme("topo_default");
	    HttpSession session = ((WebApplicationContext) this.getContext()).getHttpSession();
        m_graphContainer.setSessionId(session.getId());
	    
		// See if the history manager has an existing fragment stored for
		// this user. Do this before laying out the UI because the history
	    // may change during layout.
		String fragment = m_historyManager.getHistoryForUser((String)this.getUser());

	    m_rootLayout = new AbsoluteLayout();
	    m_rootLayout.setSizeFull();
	    
	    m_window = new Window("OpenNMS Topology");
        m_window.setContent(m_rootLayout);
        setMainWindow(m_window);
        
        m_uriFragUtil = new UriFragmentUtility();
        m_window.addComponent(m_uriFragUtil);
        m_uriFragUtil.addListener(this);
        
		m_layout = new AbsoluteLayout();
		m_layout.setSizeFull();
		m_rootLayout.addComponent(m_layout);
		
		if(m_showHeader) {
		    HEADER_HEIGHT = 100;
            m_rootLayout.addComponent(createHeader(), "top: 0px; left: 0px; right:0px;");
		} else {
		    HEADER_HEIGHT = 0;
		}
        
		Refresher refresher = new Refresher();
		refresher.setRefreshInterval(5000);
		getMainWindow().addComponent(refresher);

		m_graphContainer.setLayoutAlgorithm(new FRLayoutAlgorithm());

		m_topologyComponent = new TopologyComponent(m_graphContainer, m_iconRepositoryManager, this);
		m_topologyComponent.setSizeFull();
		m_topologyComponent.addMenuItemStateListener(this);
		m_topologyComponent.addVertexUpdateListener(this);
		
		final Property scale = m_graphContainer.getScaleProperty();
		final Slider slider = new Slider(0, 1);
		slider.setPropertyDataSource(scale);
		slider.setResolution(1);
		slider.setHeight("300px");
		slider.setOrientation(Slider.ORIENTATION_VERTICAL);
		slider.setImmediate(true);

		final Button zoomInBtn = new Button();
		zoomInBtn.setIcon(new ThemeResource("images/plus.png"));
		zoomInBtn.setDescription("Expand Semantic Zoom Level");
		zoomInBtn.setStyleName("semantic-zoom-button");
		zoomInBtn.addListener(new ClickListener() {

            @Override
            public void buttonClick(ClickEvent event) {
				int szl = (Integer) m_graphContainer.getSemanticZoomLevel();
				szl++;
				m_graphContainer.setSemanticZoomLevel(szl);
				setSemanticZoomLevel(szl);
				saveHistory();
			}
		});

		Button zoomOutBtn = new Button();
		zoomOutBtn.setIcon(new ThemeResource("images/minus.png"));
		zoomOutBtn.setDescription("Collapse Semantic Zoom Level");
		zoomOutBtn.setStyleName("semantic-zoom-button");
		zoomOutBtn.addListener(new ClickListener() {

                        @Override
			public void buttonClick(ClickEvent event) {
				int szl = (Integer) m_graphContainer.getSemanticZoomLevel();
				if(szl > 0) {
				    szl--;
				    m_graphContainer.setSemanticZoomLevel(szl);
				    setSemanticZoomLevel(szl);
				    saveHistory();
				} 
				
			}
		});
		
		
		final Button panBtn = new Button();
		panBtn.setIcon(new ThemeResource("images/cursor_drag_arrow.png"));
		panBtn.setDescription("Pan Tool");
		panBtn.setStyleName("toolbar-button down");
		
		final Button selectBtn = new Button();
		selectBtn.setIcon(new ThemeResource("images/selection.png"));
		selectBtn.setDescription("Selection Tool");
		selectBtn.setStyleName("toolbar-button");
		selectBtn.addListener(new ClickListener() {

            @Override
            public void buttonClick(ClickEvent event) {
                selectBtn.setStyleName("toolbar-button down");
                panBtn.setStyleName("toolbar-button");
                m_topologyComponent.setActiveTool("select");
            }
        });
		
		panBtn.addListener(new ClickListener() {

            @Override
            public void buttonClick(ClickEvent event) {
                panBtn.setStyleName("toolbar-button down");
                selectBtn.setStyleName("toolbar-button");
                m_topologyComponent.setActiveTool("pan");
            }
        });
		
		VerticalLayout toolbar = new VerticalLayout();
		toolbar.setWidth("31px");
		toolbar.addComponent(panBtn);
		toolbar.addComponent(selectBtn);
		
		HorizontalLayout semanticLayout = new HorizontalLayout();
		semanticLayout.addComponent(zoomInBtn);
		semanticLayout.addComponent(m_zoomLevelLabel);
		semanticLayout.addComponent(zoomOutBtn);
		semanticLayout.setComponentAlignment(m_zoomLevelLabel, Alignment.MIDDLE_CENTER);
		
		AbsoluteLayout mapLayout = new AbsoluteLayout();

		mapLayout.addComponent(m_topologyComponent, "top:0px; left: 0px; right: 0px; bottom: 0px;");
		mapLayout.addComponent(slider, "top: 5px; left: 20px; z-index:1000;");
		mapLayout.addComponent(toolbar, "top: 324px; left: 12px;");
		mapLayout.addComponent(semanticLayout, "top: 380px; left: 2px;");
		mapLayout.setSizeFull();

		m_treeMapSplitPanel = new HorizontalSplitPanel();
		m_treeMapSplitPanel.setFirstComponent(createWestLayout());
		m_treeMapSplitPanel.setSecondComponent(mapLayout);
		m_treeMapSplitPanel.setSplitPosition(222, Sizeable.UNITS_PIXELS);
		m_treeMapSplitPanel.setSizeFull();

		m_commandManager.addCommandUpdateListener(this);

		menuBarUpdated(m_commandManager);
		if(m_widgetManager.widgetCount() != 0) {
		    updateWidgetView(m_widgetManager);
		} else {
		    m_layout.addComponent(m_treeMapSplitPanel, getBelowMenuPosition());
		}
		
		if(m_treeWidgetManager.widgetCount() != 0) {
		    updateAccordionView(m_treeWidgetManager);
		}

		// If there was existing history, then restore that history snapshot.
		if (fragment != null) {
			LoggerFactory.getLogger(this.getClass()).info("Restoring history for user {}: {}", (String)this.getUser(), fragment);
			m_uriFragUtil.setFragment(fragment);
		}
	}

