	@Override
	public Undoer execute(final List<VertexRef> targets, final OperationContext operationContext) {
		if (targets == null || targets.isEmpty() || targets.size() != 1) {
			return null;
		}

		final Logger log = LoggerFactory.getLogger(this.getClass());

		final GraphContainer graphContainer = operationContext.getGraphContainer();

		final VertexRef currentGroup = targets.get(0);
		final String currentGroupId = currentGroup.getId();
		final Collection<? extends Vertex> children = graphContainer.getBaseTopology().getChildren(currentGroup);
		for (Vertex child : children) {
			log.debug("Child ID: {}", child.getId());
		}

		final Window window = operationContext.getMainWindow();

		final Window groupNamePrompt = new Window("Remove Item From Group");
		groupNamePrompt.setModal(true);
		groupNamePrompt.setResizable(false);
		groupNamePrompt.setHeight("180px");
		groupNamePrompt.setWidth("300px");

		// Define the fields for the form
		final PropertysetItem item = new PropertysetItem();
		item.addItemProperty("Item", new ObjectProperty<String>(null, String.class));

		FormFieldFactory fieldFactory = new FormFieldFactory() {
			public Field createField(Item item, Object propertyId, Component uiContext) {
				// Identify the fields by their Property ID.
				String pid = (String) propertyId;
				if ("Item".equals(pid)) {
					Select select = new Select("Item");
					for (Vertex child : children) {
						log.debug("Adding child: {}, {}", child.getId(), child.getLabel());
						select.addItem(child.getId());
						select.setItemCaption(child.getId(), child.getLabel());
					}
					select.setNewItemsAllowed(false);
					select.setNullSelectionAllowed(false);
					return select;
				}

				return null; // Invalid field (property) name.
			}
		};

		// TODO Add validator for name value

		final Form promptForm = new Form() {

			private static final long serialVersionUID = 2067414790743946906L;

			@Override
			public void commit() {
				super.commit();

				String childId = (String)getField("Item").getValue();
				log.debug("Field value: {}", childId);

				LoggerFactory.getLogger(this.getClass()).debug("Removing item from group: {}", childId);

				Vertex grandParent = graphContainer.getParent(currentGroup);

				GraphProvider topologyProvider = graphContainer.getBaseTopology();

				// Relink the child to the grandparent group (or null if it is null)
				topologyProvider.setParent(childId, grandParent);

				// Save the topology
				topologyProvider.save(null);

				graphContainer.redoLayout();
			}
		};
		// Buffer changes to the datasource
		promptForm.setWriteThrough(false);
		// You must set the FormFieldFactory before you set the data source
		promptForm.setFormFieldFactory(fieldFactory);
		promptForm.setItemDataSource(item);

		Button ok = new Button("OK");
		ok.addListener(new ClickListener() {

			private static final long serialVersionUID = 7388841001913090428L;

			@Override
			public void buttonClick(ClickEvent event) {
				promptForm.commit();
				// Close the prompt window
				window.removeWindow(groupNamePrompt);
			}
		});
		promptForm.getFooter().addComponent(ok);

		Button cancel = new Button("Cancel");
		cancel.addListener(new ClickListener() {

			private static final long serialVersionUID = 8780989646038333243L;

			@Override
			public void buttonClick(ClickEvent event) {
				// Close the prompt window
				window.removeWindow(groupNamePrompt);
			}
		});
		promptForm.getFooter().addComponent(cancel);

		groupNamePrompt.addComponent(promptForm);

		window.addWindow(groupNamePrompt);

		return null;
	}

