		public void draw(GWTGraph graph, final TopologyView<TopologyViewRenderer> topologyView, GWTBoundingBox oldBBox) {
			D3 edgeSelection = getEdgeSelection(graph, topologyView);

			D3 vertexSelection = getVertexSelection(graph, topologyView);
			
			vertexSelection.enter().create(GWTVertex.create()).call(setupEventHandlers())
			.attr("transform", new Func<String, GWTVertex>() {

				public String call(GWTVertex vertex, int index) {
					return "translate(" + vertex.getInitialX() + "," +  vertex.getInitialY() + ")";
				}

			}).attr("opacity", 1);

			
			//Exits
			edgeSelection.exit().remove();
			vertexSelection.exit().with(new D3Behavior() {

				@Override
				public D3 run(D3 selection) {
					return selection.transition().delay(0).duration(500);
				}
			}).attr("transform", new Func<String, GWTVertex>(){

				public String call(GWTVertex vertex, int index) {
					return "translate(" + vertex.getInitialX() + "," +  vertex.getInitialY() + ")";
				}

			}).attr("opacity", 0).remove();


			//Updates
			edgeSelection.call(GWTEdge.draw()).attr("opacity", 1);
			
			vertexSelection.with(updateTransition()).call(GWTVertex.draw()).attr("opacity", 1);

			//Enters
			edgeSelection.enter().create(GWTEdge.create()).call(setupEdgeEventHandlers());
			
            //Scaling and Fit to Zoom transitions
			SVGMatrix transform = topologyView.calculateNewTransform(graph.getBoundingBox());
            
			int width = topologyView.getSVGElement().getParentElement().getOffsetWidth() - 50;
			int height = topologyView.getSVGElement().getParentElement().getOffsetHeight();
            //D3.d3().select(topologyView.getSVGViewPort())
            //.attrTweenZoom("transform", graph.getBoundingBox(), oldBBox, width, height);
            //.attr("transform", matrixTransform(transform) );
			
			D3 selection = D3.d3().select(topologyView.getSVGViewPort());
			D3Transform tform = D3.getTransform(selection.attr("transform"));
			
            JsArrayInteger p0 = (JsArrayInteger) JsArrayInteger.createArray();
            p0.push((int) ((width/2 - tform.getX()) / tform.getScaleX()));
            p0.push( (int) ((height/2 - tform.getY()) / tform.getScaleY()) );
            p0.push((int) (width / tform.getScaleX()));
            p0.push((int) (height / tform.getScaleY()));
            
            JsArrayInteger p1 = (JsArrayInteger) JsArrayInteger.createArray();
            p1.push(graph.getBoundingBox().getX() + graph.getBoundingBox().getWidth()/2);
            p1.push(graph.getBoundingBox().getY() + graph.getBoundingBox().getHeight()/2);
            p1.push(graph.getBoundingBox().getWidth());
            p1.push(graph.getBoundingBox().getHeight());
            
            
			D3.d3().zoomTransition(selection, width, height, p0, p1);
            
            D3.d3().selectAll(GWTEdge.SVG_EDGE_ELEMENT).style("stroke-width", GWTEdge.EDGE_WIDTH/transform.getA() + "px").transition().delay(750).duration(500).attr("opacity", "1").transition();
            
		}

