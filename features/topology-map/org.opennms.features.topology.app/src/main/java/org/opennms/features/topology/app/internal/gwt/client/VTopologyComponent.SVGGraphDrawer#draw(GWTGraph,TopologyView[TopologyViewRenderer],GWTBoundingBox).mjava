                @Override
		public void draw(GWTGraph graph, final TopologyView<TopologyViewRenderer> topologyView, GWTBoundingBox oldBBox) {
			D3 edgeSelection = getEdgeSelection(graph, topologyView);
			D3 vertexSelection = getVertexSelection(graph, topologyView);

            vertexSelection
                    .enter()
                    .create(GWTVertex.create())
                    .call(setupEventHandlers())
                    .attr("transform", new Func<String, GWTVertex>() {
                            @Override
                            public String call(GWTVertex vertex, int index) {
                                return "translate(" + vertex.getInitialX() + "," +  vertex.getInitialY() + ")";
                            }
                        })
                    .attr("opacity", 1);

            //Exits
            edgeSelection.exit().remove();
            vertexSelection
                    .exit()
                    .with(new D3Behavior() {
                            @Override
                            public D3 run(D3 selection) {
                                return selection.transition().delay(0).duration(500);
                            }
                        })
                    .attr("transform", new Func<String, GWTVertex>(){
                            @Override
                            public String call(GWTVertex vertex, int index) {
                                    return "translate(" + vertex.getInitialX() + "," +  vertex.getInitialY() + ")";
                            }
                        })
                    .attr("opacity", 0).remove();

            //Updates
            edgeSelection.call(GWTEdge.draw()).attr("opacity", 1);

            vertexSelection.with(updateTransition()).call(GWTVertex.draw()).attr("opacity", 1);

            //Enters
            edgeSelection.enter().create(GWTEdge.create()).call(setupEdgeEventHandlers());

            //Scaling and Fit to Zoom transitions
            SVGMatrix transform = topologyView.calculateNewTransform(graph.getBoundingBox());

            int width = topologyView.getPhysicalWidth();
            int height = topologyView.getPhysicalHeight();
            D3 selection = D3.d3().select(topologyView.getSVGViewPort());
            String attr = selection.attr("transform");
            // Ugly hack; what is going on here?  Can't figure out how the viewport is ending up with NaN
            if (attr.contains("NaN")) {
                attr = "translate(0,0)";
            }
            D3Transform tform = D3.getTransform(attr);

            JsArrayInteger p0 = (JsArrayInteger) JsArrayInteger.createArray();
            int x = tform.getX();
            int oldCenterX = (int) Math.round(((width/2 - x) / tform.getScaleX()));
            int y = tform.getY();
            int oldCenterY = (int) Math.round(((height/2 - y) / tform.getScaleY()));
            p0.push(oldCenterX);
            p0.push( oldCenterY );
            p0.push((int) (width / tform.getScaleX()));
            p0.push((int) (height / tform.getScaleY()));

            JsArrayInteger p1 = (JsArrayInteger) JsArrayInteger.createArray();
            int newCenterX = graph.getBoundingBox().getX() + graph.getBoundingBox().getWidth()/2;
            int newCenterY = graph.getBoundingBox().getY() + graph.getBoundingBox().getHeight()/2;
            p1.push(newCenterX);
            p1.push(newCenterY);
            p1.push(graph.getBoundingBox().getWidth());
            p1.push(graph.getBoundingBox().getHeight());

            D3.d3().zoomTransition(selection, width, height, p0, p1);

            D3.d3().selectAll(GWTEdge.SVG_EDGE_ELEMENT)
                    .style("stroke-width", GWTEdge.EDGE_WIDTH/transform.getA() + "px")
                    .transition()
                    .delay(750)
                    .duration(500)
                    .attr("opacity", "1")
                    .transition();
		}

