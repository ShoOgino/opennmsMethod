	protected Set<Entry<String, Object>> getSortedSubmenuGroup(final String parentMenuName, Map<String, Object> value) {
	        
	        LinkedHashMap<String, Object> sortedList = new LinkedHashMap<String, Object>();
	        
	        List<String> keys = new ArrayList<String>(value.keySet());
	        Collections.sort(keys, new Comparator<String>() {
	
	            @Override
	            public int compare(String menuName1, String menuName2) {
	                final List<String> submenuOrder = m_submenuOrderMap.get(parentMenuName) == null && m_submenuOrderMap.containsKey("default") ? m_submenuOrderMap.get("default") : new ArrayList<String>();
	                
	                int index1 = -1;
	                int index2 = -1;
	                
	                String group1 = getGroupForLabel(menuName1);
	                if(submenuOrder.contains(menuName1.toLowerCase()) && group1 == null) {
	                    group1 = menuName1.toLowerCase();
	                }
	                
	                String group2 = getGroupForLabel(menuName2);
	                if(submenuOrder.contains(menuName2.toLowerCase()) && group2 == null) {
	                    group2 = menuName2.toLowerCase();
	                }
	                
	                if(submenuOrder.contains(group1)) {
	                    index1 = submenuOrder.indexOf(group1);
	                }else {
	                    if(submenuOrder.contains("additions".toLowerCase())) {
	                        index1 = submenuOrder.indexOf("additions".toLowerCase());
	                    }else {
	                        index1 = submenuOrder.size();
	                    }
	                }
	                
	                if(submenuOrder.contains(group2)) {
	                    index2 = submenuOrder.indexOf(group2);
	                }else {
	                    if(submenuOrder.contains("additions")) {
	                        index2 = submenuOrder.indexOf("additions");
	                    }else {
	                        index2 = submenuOrder.size();
	                    }
	                }
	                
	                return index1 == index2 ? menuName1.compareTo(menuName2) : index1 - index2;
	            }
	        });
	        
	        String prevGroup = null;
	        for(String key : keys) {
	            if(prevGroup != null && !prevGroup.equals(getGroupForLabel(key))) {
	                sortedList.put("separator", null);
	            }
	           
	            Object command = value.get(key);
	//            if(key.contains("?")) {
	//                sortedList.put(key.substring(0, key.indexOf("?")), command);
	//            }else {
	//                
	//            }
	            sortedList.put(key, command);
	            
	            prevGroup = getGroupForLabel(key);
	        }
	        
	        return sortedList.entrySet();
	    }

