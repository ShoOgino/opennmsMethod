	@Override
    protected void init(final VaadinRequest request) {
        FontAwesomeIcons.load(new ThemeResource("font-awesome/css/font-awesome.min.css"));

        try {
            m_headerHtml = getHeader(((VaadinServletRequest) request).getHttpServletRequest());
        } catch (final Exception e) {
            LOG.error("failed to get header HTML for request " + request.getPathInfo(), e.getCause());
        }

        //create VaadinApplicationContext
        m_applicationContext = m_serviceManager.createApplicationContext(new VaadinApplicationContextCreator() {
            @Override
            public VaadinApplicationContext create(OnmsServiceManager manager) {
                VaadinApplicationContextImpl context = new VaadinApplicationContextImpl();
                context.setSessionId(request.getWrappedSession().getId());
                context.setUiId(getUIId());
                context.setUsername(request.getRemoteUser());
                return context;
            }
        });
        m_verticesUpdateManager = new OsgiVerticesUpdateManager(m_serviceManager, m_applicationContext);
        m_serviceManager.getEventRegistry().addPossibleEventConsumer(this, m_applicationContext);

        // Set the algorithm last so that the criteria and SZLs are
        // in place before we run the layout algorithm.
        m_graphContainer.setSessionId(m_applicationContext.getSessionId());
        m_graphContainer.setLayoutAlgorithm(new TopoFRLayoutAlgorithm());

        createLayouts();
        setupErrorHandler(); // Set up an error handler for UI-level exceptions
        setupAutoRefresher(); // Add an auto refresh handler to the GraphContainer

        loadUserSettings();
        // the layout must be created BEFORE loading the hop criteria and the semantic zoom level
        TopologyUIRequestHandler handler = new TopologyUIRequestHandler();
        getSession().addRequestHandler(handler); // Add a request handler that parses incoming focusNode and szl query parameters
        handler.handleRequestParameter(request); // deal with those in init case

        // Add the default criteria if we do not have already a criteria set
        if (getWrappedVertexHopCriteria(m_graphContainer).isEmpty() && noAdditionalFocusCriteria()) {
            m_graphContainer.addCriteria(m_graphContainer.getBaseTopology().getDefaultCriteria()); // set default
        }

        // We set the listeners at the end, to not fire them all the time when initializing the UI
        setupListeners();

        // We force a reload of the topology provider as it may not have been initialized
        m_graphContainer.getBaseTopology().refresh();

        // We force a reload to trigger a fireGraphChanged()
        m_graphContainer.setDirty(true);
        m_graphContainer.redoLayout();

        // Trigger a selectionChanged
        m_selectionManager.selectionChanged(m_selectionManager);
    }

