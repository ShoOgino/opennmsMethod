	@Override
    protected void init(final VaadinRequest request) {
        m_headerHtml =  getHeader(new HttpServletRequestVaadinImpl(request));
        m_graphContainer.setLayoutAlgorithm(new FRLayoutAlgorithm());

        //create VaadinApplicationContext
        m_applicationContext = m_serviceManager.createApplicationContext(new VaadinApplicationContextCreator() {
            @Override
            public VaadinApplicationContext create(OnmsServiceManager manager) {
                VaadinApplicationContextImpl context = new VaadinApplicationContextImpl();
                context.setSessionId(request.getWrappedSession().getId());
                context.setUiId(getUIId());
                context.setUsername(request.getRemoteUser());
                return context;
            }
        });
        m_verticesUpdateManager = new OsgiVerticesUpdateManager(m_serviceManager, m_applicationContext);

        // add refresher to auto reload data
        Refresher refresher = new Refresher();
        refresher.setRefreshInterval(5000);
        refresher.addListener(new Refresher.RefreshListener() {
            @Override
            public void refresh(Refresher refresher) {
                if (autoRefreshEnabled) {
                    m_log.debug("Refresh UI");
                    getGraphContainer().getBaseTopology().refresh();
                    getGraphContainer().redoLayout();

                    TopologyUI.this.markAsDirtyRecursive();
                }
            }
        });
        addExtension(refresher);

        loadUserSettings(m_applicationContext);
        setupListeners();
        createLayouts();
        setupErrorHandler();

        // notifiy osgi-listeners, otherwise initialization would not work
        m_graphContainer.addChangeListener(m_verticesUpdateManager);
        m_selectionManager.addSelectionListener(m_verticesUpdateManager);
        m_verticesUpdateManager.selectionChanged(m_selectionManager);
        m_verticesUpdateManager.graphChanged(m_graphContainer);

        m_serviceManager.getEventRegistry().addPossibleEventConsumer(this, m_applicationContext);
    }

