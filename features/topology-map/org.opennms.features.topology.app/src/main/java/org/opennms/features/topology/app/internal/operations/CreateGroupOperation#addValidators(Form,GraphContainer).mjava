	private void addValidators(final Form promptForm, final GraphContainer graphContainer) {
		// Add validators to the fields
		((TextField)promptForm.getField("Group Label")).setNullRepresentation("");
		((TextField)promptForm.getField("Group Label")).setValidationVisible(false);
		promptForm.getField("Group Label").setRequired(true);
		promptForm.getField("Group Label").setRequiredError("You must specify a group label.");
		promptForm.getField("Group Label").addValidator(new StringLengthValidator("The group label must be at least one character long.", 1, -1, false));

		// null validator
		promptForm.getField("Group Label").addValidator(new AbstractValidator<String>("Group label cannot be blank.") {
			private static final long serialVersionUID = 1L;

			@Override
			protected boolean isValidValue(String value) {
				if (value == null) return false;
				return !value.trim().isEmpty();
			}

			@Override
			public Class<String> getType() {
				return String.class;
			}
		});

		// unique validator
		promptForm.getField("Group Label").addValidator(new AbstractValidator<String>("A group with label \"{0}\" already exists.") {
			private static final long serialVersionUID = -2351672151921474546L;

			@Override
			protected boolean isValidValue(String value) {
				try {
					final Collection<? extends Vertex> vertexIds = graphContainer.getBaseTopology().getVertices();
					final Collection<String> groupLabels = new ArrayList<String>();
					for (Vertex vertexId : vertexIds) {
						if (vertexId.isGroup()) {
							groupLabels.add(vertexId.getLabel());
						}
					}

					for (String label : groupLabels) {
						LoggerFactory.getLogger(this.getClass()).debug("Comparing {} to {}", value, label);
						if (label.equals(value)) {
							return false;
						}
					}
					return true;
				} catch (Throwable e) {
					LoggerFactory.getLogger(this.getClass()).error(e.getMessage(), e);
					return false;
				}
			}

			@Override
			public Class<String> getType() {
				return String.class;
			}
		});

	}

