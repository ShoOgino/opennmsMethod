    /**
     * This method processes the <SearchQuery> that the user has typed and returns a <SearchResult> list
     * of matching IP addresses as well as the query string itself, which is collapsible, to act
     * as a subnet container.
     * 
     */
    @Override
    public List<SearchResult> query(SearchQuery searchQuery, GraphContainer graphContainer) {
    	LOG.info("SearchProvider->query: called with search query: '{}'", searchQuery);

        final List<SearchResult> results = new ArrayList<SearchResult>();
        
		final String queryString = searchQuery.getQueryString();
		
		if (!isAlarmQuery(queryString)) {
			LOG.debug("SearchProvider->query: query not Alarm compatible.");
			return results;
		}
		
		List<OnmsAlarm> alarms = findAlarms(results, queryString);

		if (alarms.size() == 0) {
		    return results;
		}
		
		try {
            LOG.info("SearchProvider->query: building search result from set of alarms.");
		    Set<AlarmSearchResult> queryResults = buildResults(queryString, alarms);

		    //Put the alarm search results into a compatible result set for the graph container
		    IPLOOP: for (AlarmSearchResult result : queryResults) {

		        if (findCriterion(result, graphContainer) != null) {
		            continue IPLOOP;

		        } else {
		            results.add(result);
		            
		        }
		    }

		    LOG.info("SearchProvider->query: found: '{}' alarms.", alarms.size());

		} catch (Exception e) {
		    LOG.error("SearchProvider-query: caught exception during alarm query: {}", e);

		}

		LOG.info("SearchProvider->query: built search result with {} results.", results.size());
		return results;
    }

