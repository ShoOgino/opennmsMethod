		public void draw(GWTGraph graph, final TopologyView<TopologyViewRenderer> topologyView) {
			D3 edgeSelection = getEdgeSelection(graph, topologyView);

			D3 vertexSelection = getVertexSelection(graph, topologyView);
			
			vertexSelection.enter().create(GWTVertex.create()).call(setupEventHandlers())
			.attr("transform", new Func<String, GWTVertex>() {

				public String call(GWTVertex vertex, int index) {
					return "translate(" + vertex.getInitialX() + "," +  vertex.getInitialY() + ")";
				}

			}).attr("opacity", 1);

			
			//Exits
			edgeSelection.exit().remove();
			vertexSelection.exit().with(new D3Behavior() {

				@Override
				public D3 run(D3 selection) {
					return selection.transition().delay(0).duration(500);
				}
			}).attr("transform", new Func<String, GWTVertex>(){

				public String call(GWTVertex vertex, int index) {
					return "translate(" + vertex.getInitialX() + "," +  vertex.getInitialY() + ")";
				}

			}).attr("opacity", 0).remove();


			//Updates
			edgeSelection.call(GWTEdge.draw()).attr("opacity", 1);
			
			vertexSelection.with(updateTransition()).call(GWTVertex.draw()).attr("opacity", 1);

			//Enters
			edgeSelection.enter().create(GWTEdge.create()).call(setupEdgeEventHandlers());
			
            //Scaling and Fit to Zoom transitions
			SVGMatrix transform = topologyView.calculateNewTransform(graph.getBoundingBox());
            if(!graph.isFitToView() && !graph.isPanToSelection()) {
                
                D3.d3().select(topologyView.getSVGViewPort())
                .transition().duration(1000)
                .attr("transform", matrixTransform(transform) )
                .selectAll(GWTEdge.SVG_EDGE_ELEMENT).style("stroke-width", GWTEdge.EDGE_WIDTH/transform.getA() + "px").transition().delay(750).duration(500).attr("opacity", "1").transition();
            
            } else {
                
                final double scale = transform.getA();
                graph.setScale(scale);
                
                D3.d3().select(topologyView.getSVGViewPort()).transition().duration(2000).attr("transform", matrixTransform(transform)).each("end", new AnonymousFunc() {
                    
                    @Override
                    public void call() {
                        onScaleUpdate(scale);
                    }
                });
                
                //D3.d3().selectAll(GWTEdge.SVG_EDGE_ELEMENT).attr("opacity", "0").transition().delay(1000).duration(500).attr("opacity", "1").style("stroke-width", GWTEdge.EDGE_WIDTH / scale + "px");
                D3.d3().selectAll(GWTEdge.SVG_EDGE_ELEMENT).transition().delay(1000).duration(500).attr("opacity", "1").style("stroke-width", GWTEdge.EDGE_WIDTH / scale + "px");
            }
            
		}

