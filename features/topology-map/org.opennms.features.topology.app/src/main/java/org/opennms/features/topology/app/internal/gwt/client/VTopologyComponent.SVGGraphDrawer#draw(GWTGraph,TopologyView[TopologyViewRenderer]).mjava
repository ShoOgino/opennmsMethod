		public void draw(GWTGraph graph, final TopologyView<TopologyViewRenderer> topologyView) {
			D3 edgeSelection = getEdgeSelection(graph, topologyView);

			D3 vertexSelection = getVertexSelection(graph, topologyView);

			vertexSelection.enter().create(GWTVertex.create()).call(setupEventHandlers())
			.attr("transform", new Func<String, GWTVertex>() {

				public String call(GWTVertex vertex, int index) {
					GWTVertex displayVertex = vertex.getDisplayVertex(m_oldSemanticZoomLevel);

					return "translate(" + displayVertex.getX() + "," +  displayVertex.getY() + ")";
				}

			}).attr("opacity", 1);

			//Exits
			edgeSelection.exit().with(exitTransition()).remove();
			vertexSelection.exit().with(new D3Behavior() {

				@Override
				public D3 run(D3 selection) {
					return selection.transition().delay(0).duration(500);
				}
			}).attr("transform", new Func<String, GWTVertex>(){

				public String call(GWTVertex vertex, int index) {
					GWTVertex displayVertex = vertex.getDisplayVertex(m_semanticZoomLevel);

					return "translate(" + displayVertex.getX() + "," +  displayVertex.getY() + ")";
				}

			}).attr("opacity", 0).remove();


			//Updates
			edgeSelection.with(updateTransition()).call(GWTEdge.draw()).attr("opacity", 1);

			vertexSelection.with(updateTransition()).call(GWTVertex.draw()).attr("opacity", 1);


			//Enters
			edgeSelection.enter().create(GWTEdge.create()).call(setupEdgeEventHandlers()).with(enterTransition());

			//vertexSelection.enter().create(GWTVertex.create()).call(setupEventHandlers()).with(enterTransition());
			
			
			/****** Setup timer for all topology animations that are dependent on another property ******/
            D3.d3().timer(new BooleanFunc() {
                
                @Override
                public boolean call() {
                    D3 viewPort = D3.d3().select(topologyView.getSVGViewPort());
                    double scale = D3.getTransform(viewPort.attr("transform")).getScale().get(0);
                    final double strokeWidth = 5 * (1/scale);
                    
                    if(Double.parseDouble(D3.d3().selectAll(GWTEdge.SVG_EDGE_ELEMENT).style("stroke-width").split("px")[0]) != strokeWidth) {
                        D3.d3().selectAll(GWTEdge.SVG_EDGE_ELEMENT).style("stroke-width", "" + strokeWidth);
                    }else {
                        consoleLog("stroke Width == strokeWidth");
                    }
                    
                    return false;
                }
            });
		}

