    private Component createToolbar() {
        final Property<Double> scale = m_graphContainer.getScaleProperty();
        final Button showFocusVerticesBtn = new Button(FontAwesomeIcons.Icon.eye_open.variant());
        showFocusVerticesBtn.setDescription("Toggle Highlight Focus Nodes");
        showFocusVerticesBtn.setHtmlContentAllowed(true);
        showFocusVerticesBtn.addClickListener(new ClickListener() {
            @Override
            public void buttonClick(ClickEvent event) {
                if(showFocusVerticesBtn.getCaption().equals(FontAwesomeIcons.Icon.eye_close.variant())){
                    showFocusVerticesBtn.setCaption(FontAwesomeIcons.Icon.eye_open.variant());
                } else {
                    showFocusVerticesBtn.setCaption(FontAwesomeIcons.Icon.eye_close.variant());
                }
                m_topologyComponent.getState().setHighlightFocus(!m_topologyComponent.getState().isHighlightFocus());
                m_topologyComponent.updateGraph();
            }
        });

        final Button magnifyBtn = new Button();
        magnifyBtn.setIcon(FontAwesome.PLUS);
        magnifyBtn.setDescription("Magnify");
        magnifyBtn.addClickListener((ClickListener) event -> scale.setValue(Math.min(1, scale.getValue() + 0.25)));

        final Button demagnifyBtn = new Button();
        demagnifyBtn.setIcon(FontAwesome.MINUS);
        demagnifyBtn.setDescription("Demagnify");
        demagnifyBtn.addClickListener((ClickListener) event -> scale.setValue(Math.max(0, scale.getValue() - 0.25)));

        m_szlOutBtn = new Button();
        m_szlOutBtn.setIcon(FontAwesome.ANGLE_DOWN);
        m_szlOutBtn.setDescription("Decrease Semantic Zoom Level");
        m_szlOutBtn.setEnabled(m_graphContainer.getSemanticZoomLevel() > 0);
        m_szlOutBtn.addClickListener(new ClickListener() {
            @Override
            public void buttonClick(ClickEvent event) {
                int szl = m_graphContainer.getSemanticZoomLevel();
                if (szl > 0) {
                    setSemanticZoomLevel(szl - 1);
                    saveHistory();
                }
            }
        });

        final Button szlInBtn = new Button();
        szlInBtn.setIcon(FontAwesome.ANGLE_UP);
        szlInBtn.setDescription("Increase Semantic Zoom Level");
        szlInBtn.addClickListener(new ClickListener() {

            @Override
            public void buttonClick(ClickEvent event) {
                setSemanticZoomLevel(m_graphContainer.getSemanticZoomLevel() + 1);
                saveHistory();
            }
        });

        m_panBtn = new Button();
        m_panBtn.setIcon(FontAwesome.ARROWS);
        m_panBtn.setDescription("Pan Tool");
        m_panBtn.addStyleName("selected");

        m_selectBtn = new Button();
        m_selectBtn.setIcon(IonicIcons.ANDROID_EXPAND);
        m_selectBtn.setDescription("Selection Tool");
        m_selectBtn.setStyleName("toolbar-button");
        m_selectBtn.addClickListener(new ClickListener() {

            @Override
            public void buttonClick(ClickEvent event) {
                m_selectBtn.addStyleName("selected");
                m_panBtn.removeStyleName("selected");
                m_topologyComponent.setActiveTool("select");
            }
        });

        m_panBtn.addClickListener(new ClickListener() {

            @Override
            public void buttonClick(ClickEvent event) {
                m_panBtn.addStyleName("selected");
                m_selectBtn.removeStyleName("selected");
                m_topologyComponent.setActiveTool("pan");
            }
        });

        Button showAllMapBtn = new Button(FontAwesomeIcons.Icon.globe.variant());
        showAllMapBtn.setHtmlContentAllowed(true);
        showAllMapBtn.setDescription("Show Entire Map");
        showAllMapBtn.addClickListener((ClickListener) event -> m_topologyComponent.showAllMap());

        Button centerSelectionBtn = new Button(FontAwesomeIcons.Icon.location_arrow.variant());
        centerSelectionBtn.setHtmlContentAllowed(true);
        centerSelectionBtn.setDescription("Center On Selection");
        centerSelectionBtn.addClickListener((ClickListener) event -> m_topologyComponent.centerMapOnSelection());

        Button shareButton = new Button("", FontAwesome.SHARE_SQUARE_O);
        shareButton.setDescription("Share");
        shareButton.addClickListener((x) -> {
            // create the share link
            String fragment = getPage().getLocation().getFragment();
            String url = getPage().getLocation().toString().replace("#" + getPage().getLocation().getFragment(), "");
            String shareLink = String.format("%s?%s=%s", url, TopologyUIRequestHandler.PARAMETER_HISTORY_FRAGMENT, fragment);

            // Create the Window
            Window shareWindow = new Window();
            shareWindow.setCaption("Share Link");
            shareWindow.setModal(true);
            shareWindow.setClosable(true);
            shareWindow.setResizable(false);
            shareWindow.setWidth(400, Unit.PIXELS);

            TextArea shareLinkField = new TextArea();
            shareLinkField.setValue(shareLink);
            shareLinkField.setReadOnly(true);
            shareLinkField.setRows(3);
            shareLinkField.setWidth(100, Unit.PERCENTAGE);

            // Close Button
            Button close = new Button("Close");
            close.setClickShortcut(ShortcutAction.KeyCode.ESCAPE, null);
            close.addClickListener(event -> shareWindow.close());

            // Layout for Buttons
            HorizontalLayout buttonLayout = new HorizontalLayout();
            buttonLayout.setMargin(true);
            buttonLayout.setSpacing(true);
            buttonLayout.setWidth("100%");
            buttonLayout.addComponent(close);
            buttonLayout.setComponentAlignment(close, Alignment.BOTTOM_RIGHT);

            // Content Layout
            VerticalLayout verticalLayout = new VerticalLayout();
            verticalLayout.setMargin(true);
            verticalLayout.setSpacing(true);
            verticalLayout.addComponent(new Label("Please use the following link to share the current view with others."));
            verticalLayout.addComponent(shareLinkField);
            verticalLayout.addComponent(buttonLayout);

            shareWindow.setContent(verticalLayout);

            getUI().addWindow(shareWindow);
        });

        // Refresh Button
        Button refreshButton = new Button();
        refreshButton.setIcon(FontAwesome.REFRESH);
        refreshButton.setDescription("Refresh Now");
        refreshButton.addClickListener((event) -> new DynamicUpdateRefresher().refreshUI());

        //Vertical Layout for all tools on right side
        Button layerButton = new Button();

        // Actual Layout for the Toolbar
        CssLayout contentLayout = new CssLayout();
        contentLayout.addStyleName("toolbar-component");
        contentLayout.addComponent(createGroup(szlInBtn, m_zoomLevelLabel, m_szlOutBtn));
        contentLayout.addComponent(createGroup(refreshButton, centerSelectionBtn, showAllMapBtn, layerButton, showFocusVerticesBtn));
        contentLayout.addComponent(createGroup(m_panBtn, m_selectBtn));
        contentLayout.addComponent(createGroup(magnifyBtn, demagnifyBtn));
        contentLayout.addComponent(createGroup(shareButton));

        // Dummy Layer
        VerticalLayout layerLayout = new VerticalLayout();
        layerLayout.setSpacing(true);
        layerLayout.setMargin(true);
        layerLayout.addComponent(new Label("Layer Dummy 1"));
        layerLayout.addComponent(new Label("Layer Dummy 2"));
        layerLayout.addComponent(new Label("Layer Dummy 3"));

        // Toolbar
        CssLayout toolbarLayout = new CssLayout();
        toolbarLayout.addStyleName("toolbar");
        toolbarLayout.addComponent(contentLayout);

        // Layer Button behaviour
        layerButton.setIcon(FontAwesome.BARS);
        layerButton.addClickListener((event) -> {
            if (layerButton.getStyleName().contains("collapsed")) {
                layerButton.removeStyleName("collapsed");
                toolbarLayout.removeComponent(layerLayout);
            } else {
                layerButton.addStyleName("collapsed");
                toolbarLayout.addComponent(layerLayout);
            }
        });

        return toolbarLayout;
    }

