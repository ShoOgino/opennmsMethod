	@Test
	public void testContainerWithHopProvider() throws Exception {
		// Wrap the test GraphProvider in a VertexHopGraphProvider
		ProviderManager providerManager = new ProviderManager();
		providerManager.onEdgeProviderBind(m_edgeProvider);
		GraphContainer graphContainer = new VEProviderGraphContainer(new VertexHopGraphProvider(m_graphProvider), providerManager);
		graphContainer.setSemanticZoomLevel(0);

		m_graphContainer = graphContainer;

		// There should be zero vertices or edges if no focus vertices are set
		Graph graph = m_graphContainer.getGraph();
		assertEquals(0, graph.getDisplayVertices().size());
		assertEquals(0, graph.getDisplayEdges().size());

		// Add one focus vertex
		FocusNodeHopCriteria focusNodes = new FocusNodeHopCriteria();
		focusNodes.add(new AbstractVertexRef("nodes", "v1"));
		m_graphContainer.addCriteria(focusNodes);
		// This needs to be 2 because there is a SemanticZoomLevelCriteria in there also
		assertEquals(2, m_graphContainer.getCriteria().length);

		// Verify that a single vertex is in the graph
		graph = m_graphContainer.getGraph();
		assertEquals(1, graph.getDisplayVertices().size());
		assertEquals(0, graph.getDisplayEdges().size());

		expectVertex("nodes", "v1", "vertex");
		graph.visit(verifier());
		verify();
		verifyConnectedness(graph);
		reset();


		// Change SZL to 1
		m_graphContainer.setSemanticZoomLevel(1);

		// Focus vertex
		expectVertex("nodes", "v1", "vertex");

		expectVertex("nodes", "v2", "vertex");
		/*
			This is a problem with the VEProviderGraphContainer... it wraps a delegate GraphProvider
			in a MergingGraphProvider like so:

			VEProviderGraphContainer { MergingGraphProvider { VertexHopGraphProvider } } }

			But for the VertexHopProvider to calculate the SZL correctly, it needs to be aware of all
			edges, including those provided by the MergingGraphProvider. So we should rearrange things
			so that they are laid out like:

			VEProviderGraphContainer { VertexHopGraphProvider { MergingGraphProvider } } }

			We should decouple the MergingGraphProvider from the VEProviderGraphContainer and then just
			inject them in the correct order. When this problem is fixed, uncomment all of the lines that
			are commented out in this test.
		*/
		//expectVertex("nodes", "v3", "vertex");
		expectVertex("nodes", "v4", "vertex");
		
		expectEdge("nodes", "e1", "edge");
		//expectEdge("nodes", "e2", "edge");
		//expectEdge("nodes", "e3", "edge");
		expectEdge("nodes", "e4", "edge");
		//expectEdge("ncs", "ncs1", "ncs edge");
		expectEdge("ncs", "ncs2", "ncs edge");
		expectEdge("ncs", "ncs3", "ncs edge");
		
		graph = m_graphContainer.getGraph();
		assertEquals(3, graph.getDisplayVertices().size());
		assertEquals(4, graph.getDisplayEdges().size());

		graph.visit(verifier());
		verify();
		verifyConnectedness(graph);
		reset();


		// Add a collapsed criteria to the container
		m_graphContainer.addCriteria(new TestCollapsibleCriteria());
		assertEquals(3, m_graphContainer.getCriteria().length);

		assertEquals(3, m_graphContainer.getGraph().getDisplayVertices().size());
		assertEquals(3, m_graphContainer.getBaseTopology().getVertices(new TestCollapsibleCriteria()).size());

		/**
		 * TODO The set of edges returned here is problematic. See SPC-787 and SPC-791.
		 */
		expectVertex("nodes", "v1", "vertex");
		// WTF why is this here
		expectVertex("nodes", "v3", "vertex");
		expectVertex("nodes", "test", "test");
		expectEdge("ncs", "ncs1", "ncs edge");
		// WTF why is this not here
		//expectEdge("nodes", "e1", "edge");
		// WTF why is this here
		//expectEdge("nodes", "e2", "edge");
		// WTF why is this here
		//expectEdge("nodes", "e3", "edge");
		// WTF why is this not here
		//expectEdge("nodes", "e4", "edge");

		graph = m_graphContainer.getGraph();

		assertEquals(3, graph.getDisplayVertices().size());
		assertEquals(1, graph.getDisplayEdges().size());

		for (Edge edge : graph.getDisplayEdges()) {
			if (edge.getId().equals("e1")) {
				assertEquals("v1", edge.getSource().getVertex().getId());
				assertEquals("test", edge.getTarget().getVertex().getId());
			} else if (edge.getId().equals("e2")) {
				assertEquals("test", edge.getSource().getVertex().getId());
				assertEquals("v3", edge.getTarget().getVertex().getId());
			} else if (edge.getId().equals("e3")) {
				assertEquals("v3", edge.getSource().getVertex().getId());
				assertEquals("test", edge.getTarget().getVertex().getId());
			} else if (edge.getId().equals("e4")) {
				assertEquals("test", edge.getSource().getVertex().getId());
				assertEquals("v1", edge.getTarget().getVertex().getId());
			}
		}

		graph.visit(verifier());
		verify();
		verifyConnectedness(graph);
		reset();
	}

