    @Test
    public void testTopologyComponentGraphUpdate() throws PaintException {
        PaintTarget target = EasyMock.createMock(PaintTarget.class);
        
        mockInitialSetup(target);
        
        mockGraphTagStart(target);
        
        mockVertex(target);
        
        mockVertex(target);
        
        mockVertex(target);
        
        mockEdge(target);
        
        mockGraphTagEnd(target);
        
        SelectionManager selectionManager = EasyMock.createMock(SelectionManager.class);
        SelectionListener listener = EasyMock.anyObject();
        selectionManager.addSelectionListener(listener);
        EasyMock.expect(selectionManager.getSelectedVertexRefs()).andReturn(new ArrayList<VertexRef>()).anyTimes();
        EasyMock.expect(selectionManager.isVertexRefSelected(EasyMock.anyObject(VertexRef.class))).andReturn(false).anyTimes();
        EasyMock.expect(selectionManager.isEdgeRefSelected(EasyMock.anyObject(EdgeRef.class))).andReturn(false).anyTimes();
        
        EasyMock.replay(target, selectionManager);
        
        TestTopologyProvider topoProvider = new TestTopologyProvider("test");
        assertEquals(2, topoProvider.getVertices().size());
        assertEquals(1, topoProvider.getEdges().size());
        GraphContainer graphContainer = new VEProviderGraphContainer(topoProvider, new ProviderManager());
        TopologyComponent topoComponent = getTopologyComponent(graphContainer, selectionManager);
        
        AbstractVertex newVertex = topoProvider.addVertex(0, 0);
        newVertex.setLabel("New Vertex");
        assertEquals(3, topoProvider.getVertices().size());
        assertEquals(1, topoProvider.getEdges().size());
        /**
         * TODO This should not be necessary... the container should listen for vertex added events
         * and redo its own layout.
         */
        graphContainer.redoLayout();
        
        topoComponent.paintContent(target);
        
        EasyMock.verify(target);
        
    }

