	@Before
	public void setUp() {
		MockLogAppender.setupLogging();

		final BackendGraph graph = new SimpleGraphBuilder("nodes")
			.vertex("v1").vLabel("vertex1").vIconKey("server").vTooltip("tooltip").vStyleName("vertex")
			.vertex("v2").vLabel("vertex2").vIconKey("server").vTooltip("tooltip").vStyleName("vertex")
			.vertex("v3").vLabel("vertex3").vIconKey("server").vTooltip("tooltip").vStyleName("vertex")
			.vertex("v4").vLabel("vertex4").vIconKey("server").vTooltip("tooltip").vStyleName("vertex")
			.edge("e1", "v1", "v2").eStyleName("edge")
			.edge("e2", "v2", "v3").eStyleName("edge")
			.edge("e3", "v3", "v4").eStyleName("edge")
			.edge("e4", "v4", "v1").eStyleName("edge")
			.get();
		m_graphProvider = new SimpleGraphProvider(graph);

		final MetaTopologyProvider metaTopologyProvider = new SimpleMetaTopologyProvider(m_graphProvider);
		final DefaultTopologyService topologyService = new DefaultTopologyService();
		topologyService.setServiceLocator(new SimpleServiceLocator(metaTopologyProvider));
		topologyService.setTopologyEntityCache(EasyMock.niceMock(TopologyEntityCache.class));

        final VEProviderGraphContainer graphContainer = new VEProviderGraphContainer();
		graphContainer.setSemanticZoomLevel(0);
		graphContainer.setTopologyService(topologyService);
		graphContainer.setSelectedNamespace(m_graphProvider.getNamespace());
		graphContainer.setMetaTopologyId(m_graphProvider.getNamespace());

		m_graphContainer = graphContainer;
	}

