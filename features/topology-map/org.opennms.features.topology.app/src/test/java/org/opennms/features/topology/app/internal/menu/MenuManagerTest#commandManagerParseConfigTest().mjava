    @Test
    public void commandManagerParseConfigTest() {
        Dictionary<String,String> props = new Hashtable<String,String>();
        props.put("toplevelMenuOrder", "File,Edit,View,Additions,Help");
        props.put("submenu.File.groups", "start,new,close,save,print,open,import,additions,end");
        props.put("submenu.Edit.groups", "start,undo,cut,find,add,end,additions");
        props.put("submenu.View.groups", "start,additions,end");
        props.put("submenu.Help.groups", "start,main,tools,updates,end,additions");
        props.put("submenu.Default.groups", "start,main,end,additions");


        Map<String, List<String>> expected = new HashMap<String, List<String>>();
        expected.put("File", Lists.newArrayList("start", "new", "close", "save", "print", "open", "import", "additions", "end"));
        expected.put("Edit", Lists.newArrayList("start", "undo", "cut", "find", "add", "end","additions"));
        expected.put("View", Lists.newArrayList("start", "additions", "end"));
        expected.put("Help", Lists.newArrayList("start", "main", "tools", "updates", "end", "additions"));
        expected.put("Default", Lists.newArrayList("start", "main", "end", "additions"));

        MenuManager cmdManager = new MenuManager();
        cmdManager.updateMenuConfig(props);
        Map<String, List<String>> actual = cmdManager.getMenuOrderConfig();

        assertEquals(expected.get("File"), actual.get("File"));
        assertEquals(expected.get("Edit"), actual.get("Edit"));
        assertEquals(expected.get("View"), actual.get("View"));
        assertEquals(expected.get("Help"), actual.get("Help"));
        assertEquals(expected.get("Default"), actual.get("Default"));
    }

