    private D3TopoLayout<VertexRef, EdgeRef> runD3Layout(int count, Graph g, Layout graphLayout, List<Vertex> vertices) {
        D3TopoLayout<VertexRef, EdgeRef> layout = new D3TopoLayout<VertexRef, EdgeRef>(createJungGraph(g));
        Dimension size = selectLayoutSize(m_graphContainer);

        layout.setInitializer(initializer(graphLayout, size));
        layout.setSize(size);
        
        PrintWriter out = null;
        try {
            out = new PrintWriter(new FileWriter("data"+count+".js")) ;

            out.println("var gCenter = { x: " + size.getWidth()/2.0 + ", y: " + size.getHeight()/2.0 + "};");
           
            out.println("var data = [");
            while (!layout.done()) {
                out.println("[");

                for (int i = 0; i < vertices.size(); i++) {
                    Vertex v = vertices.get(i);
                    if (i + 1 == vertices.size()) {
                        out.println("{ x:" + layout.getX(v) + ", y:" + layout.getY(v) + " }");
                    } else {
                        out.println("{ x:" + layout.getX(v) + ", y:" + layout.getY(v) + " },");
                    }
                }

                layout.step();
                out.println("],");
            }
            out.println("];");
            System.out.println("/******** D3Layout Run **********/");
        
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } finally {
            if (out != null) out.close();
        }

        for (Vertex v : vertices) {
            graphLayout.setLocation(v, layout.getX(v) - size.getWidth()/2.0, layout.getY(v) - size.getHeight()/2.0);
            System.out.println("layout.getX(): " + layout.getX(v) + " layout.getY(): " + layout.getY(v));
        }
        System.out.println("/******** End D3Layout Run **********/");
        return layout;
    }

