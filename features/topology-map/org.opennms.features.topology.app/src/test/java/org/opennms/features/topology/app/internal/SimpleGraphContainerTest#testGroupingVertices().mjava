    @Test
    public void testGroupingVertices() {
        GraphProvider topologyProvider = topoProvider();
        
        Vertex groupId = topologyProvider.addGroup(this.getClass().getSimpleName(), "groupIcon.jpg");
        topologyProvider.setParent("v0", groupId);
        topologyProvider.setParent("v1", groupId);
        
        SimpleGraphContainer graphContainer = new SimpleGraphContainer(topologyProvider);
        graphContainer.setLayoutAlgorithm(new SimpleLayoutAlgorithm());
        graphContainer.setSemanticZoomLevel(0);
        
        Collection<? extends Vertex> gcIds = graphContainer.getBaseTopology().getVertices();
        assertEquals(3, gcIds.size());
        
        for(Object gcId : gcIds) {
            Item gcItem = graphContainer.getBaseTopology().getItem(gcId);
            Boolean leaf = (Boolean) gcItem.getItemProperty("leaf").getValue();
            System.out.println("Expecting gcItem: " + gcItem + " id: " + gcId + " leaf is true: " + leaf);
            if(leaf) {
                Object parentId = graphContainer.getBaseTopology().getParent(gcId);
                assertNotNull(parentId);
                
                Object semanticZoomLevel = gcItem.getItemProperty("semanticZoomLevel").getValue();
                assertEquals(1, semanticZoomLevel);
            }
        }
        
        
        TopoGraph graph = graphContainer.getCompleteGraph();
        
        List<TopoVertex> vertices = graph.getVertices();
        assertEquals(3, vertices.size());
        for(TopoVertex v : vertices) {
            if( graphContainer.getGroupId( v.getItemId() ) == null) {
                assertEquals(0, v.getSemanticZoomLevel());
            }else {
                assertEquals(1, v.getSemanticZoomLevel());
            }
        }
        
        List<TopoVertex> leafVertices = graph.getLeafVertices();
        assertEquals(2, leafVertices.size());
        for(TopoVertex v: leafVertices) {
            assertEquals(1, v.getSemanticZoomLevel());
        }
        
        List<TopoEdge> edges = graph.getEdges();
        assertEquals(1, edges.size());
    }

