    @Test
    public void testGraphContainerSendUpdateEvents() {
        final AtomicInteger eventsReceived = new AtomicInteger(0);
        
        GraphProvider topologyProvider = graphProvider();
        
        //Setup the graphcontainer
        SimpleGraphContainer graphContainer = new SimpleGraphContainer(topologyProvider);
        graphContainer.setLayoutAlgorithm(new SimpleLayoutAlgorithm());
        graphContainer.setSemanticZoomLevel(0);
        
        graphContainer.addVertexListener(new ItemSetChangeListener() {
            
            @Override
            public void containerItemSetChange(ItemSetChangeEvent event) {
                eventsReceived.incrementAndGet();
            }
        });
        
        
        
        //Add another vertex to the TopologyProvider
        Vertex vertId = topologyProvider.addVertex(0, 0);
        assertEquals(2, eventsReceived.get());
        eventsReceived.set(0);
        
        Vertex vertId2 = topologyProvider.addVertex(0, 0);
        assertEquals(2, eventsReceived.get());
        eventsReceived.set(0);
       
        Vertex groupId = topologyProvider.addGroup(this.getClass().getSimpleName(), "iconofgroup.jpg");
        assertEquals(5, graphContainer.getVertexIds().size());
        assertEquals(2, eventsReceived.get());
        eventsReceived.set(0);
        
        topologyProvider.setParent(vertId, groupId);
        //assertEquals(2, eventsReceived.get());
        assertEquals(1, eventsReceived.get());
        eventsReceived.set(0);
        
        topologyProvider.setParent(vertId2, groupId);
        //assertEquals(2, eventsReceived.get());
        assertEquals(1, eventsReceived.get());
        eventsReceived.set(0);
        
        Collection<Vertex> vertices = graphContainer.getBaseTopology().getVertices();
        for(Vertex vertex : vertices) {
            if(vertex.getId() == vertId.getId() || vertex.getId() == vertId2.getId()) {
                assertEquals(groupId, vertex.getGroupId());
                assertEquals(1, vertex.getSemanticZoomLevel());
            }else {
                assertEquals(0, vertex.getSemanticZoomLevel());
            }
        }
    }

