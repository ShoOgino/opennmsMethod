	@Test
	// We try to add a group to its own. This should fail!
	public void testAddGroupToItself() {
	    m_topologyProvider.resetContainer();
	    Vertex vertex1 = m_topologyProvider.addVertex(0, 0);
	    Vertex vertex2 = m_topologyProvider.addVertex(0, 0);
	    Vertex group1 = m_topologyProvider.addGroup("group1",  "group");
	    m_topologyProvider.setParent(vertex1,  group1);
        
	    // we try to add the group to itself. There is no selection
	    {
	        GraphContainer graphContainer = EasyMock.createNiceMock(GraphContainer.class);
    	    EasyMock.expect(graphContainer.getBaseTopology()).andReturn(m_topologyProvider).anyTimes();
    	    EasyMock.expect(graphContainer.getSelectionManager()).andReturn(EasyMock.createNiceMock(SelectionManager.class)).anyTimes();
            graphContainer.redoLayout();
            EasyMock.expectLastCall().anyTimes();
            EasyMock.replay(graphContainer);
    	    
            AddVertexToGroupOperation operation = new AddVertexToGroupOperation();
            OperationContext context = getOperationContext(graphContainer);
            operation.execute(Arrays.asList((VertexRef)group1), context);
    
            // Grab the window, put a value into the form field, and commit the form to complete
            // the operation.
            Form form = getForm(getPrompt(context));
            
            
            Field field = form.getField("Group");
            field.setValue(group1.getId());
            Assert.assertEquals(group1.getId(), field.getValue());         // Make sure that the value was set
            try {
                form.commit();
                fail("An " + InvalidValueException.class + " should have been thrown.");
            } catch (InvalidValueException ex) {
                LoggerFactory.getLogger(getClass()).info("Exception occured as expected.", ex);
            }
            EasyMock.verify(graphContainer);
	    }
        
    
        // we try to add the group to itself. There are multiple selections
	    {
            GraphContainer graphContainer = EasyMock.createNiceMock(GraphContainer.class);
            EasyMock.expect(graphContainer.getBaseTopology()).andReturn(m_topologyProvider).anyTimes();
            SelectionManager selectionManager = EasyMock.createNiceMock(SelectionManager.class);
            EasyMock.expect(selectionManager.isVertexRefSelected(EasyMock.anyObject(VertexRef.class))).andReturn(true).anyTimes();
            EasyMock.expect(selectionManager.getSelectedVertexRefs()).andReturn(Arrays.asList((VertexRef)vertex1, vertex2, group1)).anyTimes();
            EasyMock.expect(graphContainer.getSelectionManager()).andReturn(selectionManager).anyTimes();
            graphContainer.redoLayout();
            EasyMock.expectLastCall().anyTimes();
            EasyMock.replay(graphContainer);
            EasyMock.replay(selectionManager);
            
            AddVertexToGroupOperation operation = new AddVertexToGroupOperation();
            OperationContext context = getOperationContext(graphContainer);
            operation.execute(Arrays.asList((VertexRef)group1), context);
    
            // Grab the window, put a value into the form field, and commit the form to complete
            // the operation.
            Form form = getForm(getPrompt(context));
            
            // we try to add the group to itself. There is no selection
            Field field = form.getField("Group");
            field.setValue(group1.getId());
            Assert.assertEquals(group1.getId(), field.getValue());         // Make sure that the value was set
            form.commit();
            
            // v0 and v1 should be children of g0
            Assert.assertEquals(group1, vertex1.getParent()); //v0
            Assert.assertEquals(group1, vertex2.getParent()); //v1
            
            // g0 should not be a children of g0
            Assert.assertNull(group1.getParent());
            
            EasyMock.verify(graphContainer, selectionManager);
	    }
	
	}

