    @Override
    protected Object doExecute() throws Exception {

    	final Set<Operation> operations = new TreeSet<Operation>();
    	final Map<Operation,Map<String,Object>> properties = new HashMap<Operation,Map<String,Object>>();

    	final Collection<ServiceReference<Operation>> services = this.bundleContext.getServiceReferences(Operation.class, null);
        if (services == null) return null;

        for (final ServiceReference<Operation> sr : services) {
    		final Operation operation = this.bundleContext.getService(sr);
    		if (operation == null) continue;

    		operations.add(operation);

			final Map<String,Object> props = new TreeMap<String,Object>();
    		for (final String key : sr.getPropertyKeys()) {
    			props.put(key, sr.getProperty(key));
    		}
    		properties.put(operation, props);
    	}

    	for (final Operation operation : operations) {
    		final String operationClass = operation.getClass().getName();
			System.out.println("    " + operationClass);
    		System.out.println("    " + makeLine(operationClass));
    		System.out.println();
    		
    		System.out.println("    ID:    " + operation.getId());
    		//System.out.println("    Label: " + operation.getLabel());
    		System.out.println();

    		final Map<String,Object> props = properties.get(operation);

    		if (props.size() > 0) {
	    		System.out.println("    Service Properties:");
	    		System.out.println("    " + makeLine("Service Properties:"));
	    		System.out.println();
	    		
	    		for (final String key : props.keySet()) {
	    			final Object object = props.get(key);
	    			final String value = (object instanceof Object[])? Arrays.toString((Object[])object) : object.toString();
					System.out.println("        " + key + "=" + value);
	    		}
	    		
	    		System.out.println();
    		}
    	}

        return null;
    }

