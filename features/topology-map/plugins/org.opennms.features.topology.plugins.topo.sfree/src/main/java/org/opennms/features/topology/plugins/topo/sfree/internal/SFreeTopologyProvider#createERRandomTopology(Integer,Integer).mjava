	private void createERRandomTopology(Integer numberOfNodes, Integer averageNumberofNeighboors) {
		Map<Integer,SimpleLeafVertex> nodes = new HashMap<Integer, SimpleLeafVertex>();
		List<AbstractEdge> edges = new ArrayList<AbstractEdge>();
		for (Integer i=0; i< numberOfNodes ;i++) {
			SimpleLeafVertex vertex = new SimpleLeafVertex(TOPOLOGY_NAMESPACE_SFREE, Integer.toString(i), 0, 0);
			vertex.setIconKey("sfree:system");
			vertex.setLabel("ErdosReniyNode"+i);

			nodes.put(i,vertex);
		}

		Double z = 0.5*(numberOfNodes-1);
		//		Double p = averageNumberofNeighboors/z;

		Random r = new Random((new Date()).getTime());

		for (Integer start=0; start < numberOfNodes; start++) {
			for (Integer end = start+1; end<numberOfNodes;end++) {
				if (z*r.nextDouble()<averageNumberofNeighboors)  {
					String edgeId = "link:"+start+"-"+end;
					SimpleConnector source = new SimpleConnector(TOPOLOGY_NAMESPACE_SFREE, nodes.get(start).getId()+"-"+edgeId+"-connector", nodes.get(start));
					SimpleConnector target = new SimpleConnector(TOPOLOGY_NAMESPACE_SFREE, nodes.get(end).getId()+"-"+edgeId+"-connector", nodes.get(end));
					edges.add(new AbstractEdge(TOPOLOGY_NAMESPACE_SFREE, edgeId, source, target));
				}
			}
		}

		addVertices(nodes.values().toArray(new Vertex[] {}));
		addEdges(edges.toArray(new Edge[] {}));

	}

