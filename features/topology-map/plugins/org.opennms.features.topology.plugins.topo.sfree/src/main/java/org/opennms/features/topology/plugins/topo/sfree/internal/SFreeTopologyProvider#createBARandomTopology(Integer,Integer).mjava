	private void createBARandomTopology(Integer numberOfNodes, Integer averageNumberofNeighboors) {
		Map<Integer,SimpleLeafVertex> nodes = new HashMap<Integer, SimpleLeafVertex>();
		List<SimpleEdge> edges = new ArrayList<SimpleEdge>();

		for(int i=0; i<2*averageNumberofNeighboors; i++){
			int j=(i+1)%(2*averageNumberofNeighboors);
			SimpleLeafVertex vertexi = new SimpleLeafVertex(Integer.toString(i),0,0);
			vertexi.setIconKey("sfree:system");
			vertexi.setLabel("BarabasiAlbertNode"+i);
			SimpleLeafVertex vertexj = new SimpleLeafVertex(Integer.toString(j),0,0);
			vertexj.setIconKey("sfree:system");
			vertexj.setLabel("BarabasiAlbertNode"+j);
			nodes.put(i, vertexi);
			nodes.put(j, vertexj);
			System.err.println("Creating First Cluster: " + i);
			System.err.println("Creating First Cluster: " + j);
			edges.add(new SimpleEdge(TOPOLOGY_NAMESPACE_SFREE, "link:"+i+"-"+j, nodes.get(i), nodes.get(j)));
		}
		
		Random r = new Random((new Date()).getTime());
		for(int i=2*averageNumberofNeighboors;i<numberOfNodes;i++){
			SimpleLeafVertex vertexi = new SimpleLeafVertex(Integer.toString(i),0,0);
			vertexi.setIconKey("sfree:system");
			vertexi.setLabel("BarabasiAlbertNode"+i);
			nodes.put(i, vertexi);
			System.err.println("Adding Node: " + i);
			for(int times=0; times<averageNumberofNeighboors; times++){
				SimpleEdge edge;
				double d = r.nextDouble()*nodes.size(); // choose node to attach to
				System.err.println("Generated random position: " + d);
				Long j = (long)d;
				System.err.println("Try Adding edge: " + j + "--->" + i);
				edge = new SimpleEdge(TOPOLOGY_NAMESPACE_SFREE, "link:"+i+"-"+j, nodes.get(i), nodes.get(j.intValue()));
				if( i==j.intValue() ) continue;
				edges.add(edge);
			}// m links added
		}

		m_vertexContainer.addAll(nodes.values());
		m_edgeContainer.addAll(edges);

	}

