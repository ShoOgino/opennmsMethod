	@Override
	public Object generateCell(final Table source, final Object itemId, Object columnId) {
		final Property<Integer> idProperty = source.getContainerProperty(itemId, idPropertyName);
		Object cellValue = columnGenerator.generateCell(source, itemId, columnId);
		if (cellValue == null) {
			return null;
		} else {
			if (idProperty.getValue() == null) {
				return cellValue;
			} else {
				Button button = new Button(cellValue.toString());
				button.setStyleName(BaseTheme.BUTTON_LINK);
				button.setDescription(idProperty.getValue().toString());
				button.addClickListener(new Button.ClickListener() {
					@Override
					public void buttonClick(Button.ClickEvent event) {
							ApplicationCriteria applicationCriteria = graphContainer.findSingleCriteria(ApplicationCriteria.class);
							if (applicationCriteria == null) {
								applicationCriteria = new ApplicationCriteria();
								graphContainer.addCriteria(applicationCriteria);
							}
							if (!Objects.equals(applicationCriteria.getApplicationId(), String.valueOf(idProperty.getValue()))) {
								applicationCriteria.setApplicationId(String.valueOf(idProperty.getValue()));
								graphContainer.setDirty(true);
								graphContainer.redoLayout();
							}
					}
				});
				return button;
			}
		}
	}

