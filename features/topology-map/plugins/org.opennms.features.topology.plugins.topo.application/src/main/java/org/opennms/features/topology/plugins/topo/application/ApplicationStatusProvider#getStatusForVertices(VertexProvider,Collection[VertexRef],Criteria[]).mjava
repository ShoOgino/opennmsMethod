    @Override
    public Map<VertexRef, Status> getStatusForVertices(VertexProvider vertexProvider, Collection<VertexRef> vertices, Criteria[] criteria) {
        Map<VertexRef, Status> returnMap = new HashMap<>();
        Map<ApplicationStatusEntity.Key, Status> statusMap = new HashMap<>();

        List<ApplicationStatusEntity> result = applicationStatusDao.getAlarmStatus();
        for (ApplicationStatusEntity eachRow : result) {
            DefaultStatus status = createStatus(eachRow.getSeverity(), eachRow.getCount());
            statusMap.put(eachRow.getKey(), status);
        }

        // status for all known node ids
        Collection<VertexRef> vertexRefsForNamespace = getVertexRefsForNamespace(vertices);
        Collection<VertexRef> vertexRefsRoot = getRootElements(vertexRefsForNamespace);
        Collection<VertexRef> vertexRefs = new ArrayList<>(vertexRefsForNamespace);
        vertexRefs.removeAll(vertexRefsRoot);

        // calculate status for children
        for (VertexRef eachVertex : vertexRefs) {
            ApplicationVertex applicationVertex = (ApplicationVertex) eachVertex;
            Status alarmStatus = statusMap.get(createKey(applicationVertex));
            if (alarmStatus == null) {
                alarmStatus = createStatus(OnmsSeverity.NORMAL, 0);
            }
            returnMap.put(eachVertex, alarmStatus);
        }

        // calculate status for root
        for (VertexRef eachRoot : vertexRefsRoot) {
            ApplicationVertex eachRootApplication = (ApplicationVertex) eachRoot;
            OnmsSeverity maxSeverity = OnmsSeverity.NORMAL;
            int count = 0;
            for (VertexRef eachChild : eachRootApplication.getChildren()) {
                ApplicationVertex eachChildApplication = (ApplicationVertex) eachChild;
                ApplicationStatusEntity.Key childKey = createKey(eachChildApplication);
                Status childStatus = statusMap.get(childKey);
                if (childStatus != null && maxSeverity.isLessThan(createSeverity(childStatus.computeStatus()))) {
                    maxSeverity = createSeverity(childStatus.computeStatus());
                    count = Integer.parseInt(childStatus.getStatusProperties().get("statusCount"));
                }
            }
            returnMap.put(eachRoot, createStatus(maxSeverity, count));
        }

        return returnMap;
    }

