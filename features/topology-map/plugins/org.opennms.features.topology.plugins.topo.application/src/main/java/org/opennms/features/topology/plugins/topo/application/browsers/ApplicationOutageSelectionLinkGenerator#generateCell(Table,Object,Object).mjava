	@Override
	public Object generateCell(final Table source, Object itemId, Object columnId) {
		if (source == null) return null; // no source
		Property<Integer> idProperty = source.getContainerProperty(itemId,  idPropertyName);
		final Integer outageId = idProperty.getValue();
		if (outageId == null) return null; // no value

		// create Link
		Button button = new Button("" + outageId);
		button.setStyleName(BaseTheme.BUTTON_LINK);
		button.addClickListener(new Button.ClickListener() {
			private static final long serialVersionUID = 3698209256202413810L;

			@Override
			public void buttonClick(Button.ClickEvent event) {
				// try if outage is there, otherwise show information dialog
				OnmsOutage outage = outageDao.get(outageId);
				if (outage == null) {
					new DialogWindow(source.getUI(),
							"Outage does not exist!",
							"The outage information cannot be shown. \nThe outage does not exist anymore. \n\nPlease refresh the Outage Table.");
					return;
				}

				// outage still exists, show details
				final URI currentLocation = Page.getCurrent().getLocation();
				final String contextRoot = VaadinServlet.getCurrent().getServletContext().getContextPath();
				final String redirectFragment = contextRoot + "/outage/detail.htm?quiet=true&id=" + outageId;
				LOG.debug("outage {} clicked, current location = {}, uri = {}", outageId, currentLocation, redirectFragment);

				try {
					source.getUI().addWindow(
							new InfoWindow(new URL(currentLocation.toURL(), redirectFragment), () -> "Outage Info " + outageId));
				} catch (MalformedURLException e) {
					LOG.error(e.getMessage(), e);
				}
			}
		});
		return button;
	}

