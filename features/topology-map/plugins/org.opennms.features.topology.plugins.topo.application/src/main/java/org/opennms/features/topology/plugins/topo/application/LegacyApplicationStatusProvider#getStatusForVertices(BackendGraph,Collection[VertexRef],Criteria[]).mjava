    @Override
    public Map<VertexRef, Status> getStatusForVertices(BackendGraph graph, Collection<VertexRef> vertices, Criteria[] criteria) {
        Map<VertexRef, Status> returnMap = new HashMap<>();
        Map<String, Status> statusMap = new HashMap<>();

        List<MonitoredServiceStatusEntity> statusEntities = applicationDao.getAlarmStatus();
        for (MonitoredServiceStatusEntity entity : statusEntities) {
            DefaultStatus status = createStatus(entity.getSeverity(), entity.getCount());
            statusMap.put(toId(entity.getNodeId(), entity.getIpAddress().toString(), entity.getServiceTypeId()), status);
        }

        // status for all known node ids
        Collection<VertexRef> vertexRefsForNamespace = getVertexRefsForNamespace(vertices);
        Collection<VertexRef> vertexRefsRoot = getRootElements(vertexRefsForNamespace);
        Collection<VertexRef> vertexRefs = new ArrayList<>(vertexRefsForNamespace);
        vertexRefs.removeAll(vertexRefsRoot);

        // calculate status for children
        for (VertexRef eachVertex : vertexRefs) {
            LegacyApplicationVertex applicationVertex = (LegacyApplicationVertex) eachVertex;
            Status alarmStatus = statusMap.get(toId(applicationVertex));
            if (alarmStatus == null) {
                alarmStatus = createStatus(OnmsSeverity.NORMAL, 0);
            }
            returnMap.put(eachVertex, alarmStatus);
        }

        // calculate status for root
        for (VertexRef eachRoot : vertexRefsRoot) {
            LegacyApplicationVertex eachRootApplication = (LegacyApplicationVertex) eachRoot;
            OnmsSeverity maxSeverity = OnmsSeverity.NORMAL;
            int count = 0;
            boolean allChildrenHaveActiveAlarms = true;
            for (VertexRef eachChild : eachRootApplication.getChildren()) {
                LegacyApplicationVertex eachChildApplication = (LegacyApplicationVertex) eachChild;
                Status childStatus = statusMap.get(toId(eachChildApplication));
                Optional<OnmsSeverity> childSeverity = Optional.ofNullable(childStatus)
                        .map(Status::computeStatus)
                        .map(this::createSeverity);
                if (childSeverity.isPresent() && maxSeverity.isLessThan(childSeverity.get())) {
                    maxSeverity = createSeverity(childStatus.computeStatus());
                } else if(!childSeverity.isPresent() || OnmsSeverity.NORMAL.equals(childSeverity.get())) {
                    allChildrenHaveActiveAlarms = false; // at least one child has no active alarm
                }

                if(childStatus != null) {
                    count = count + Integer.parseInt(childStatus.getStatusProperties().get("statusCount"));
                }
            }

            if (allChildrenHaveActiveAlarms && maxSeverity.isLessThan(OnmsSeverity.MAJOR)) {
                maxSeverity = OnmsSeverity.MAJOR;
            }

            returnMap.put(eachRoot, createStatus(maxSeverity, count));
        }

        return returnMap;
    }

