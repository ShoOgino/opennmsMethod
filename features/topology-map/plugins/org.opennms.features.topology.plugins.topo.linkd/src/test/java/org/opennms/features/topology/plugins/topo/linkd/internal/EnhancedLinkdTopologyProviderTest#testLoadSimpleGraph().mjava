    @Test
    public void testLoadSimpleGraph() throws Exception {
        m_topologyProvider.refresh();
        assertEquals(8, m_topologyProvider.getCurrentGraph().getVertices().size());
        assertEquals(9, m_topologyProvider.getCurrentGraph().getEdges().size());

        LinkdVertex v1 = (LinkdVertex)m_topologyProvider.getCurrentGraph().getVertex("nodes", "1");
        assertEquals(true,v1.getProtocolSupported().contains(ProtocolSupported.LLDP));
        assertEquals(true,v1.getProtocolSupported().contains(ProtocolSupported.OSPF));
        assertEquals(false,v1.getProtocolSupported().contains(ProtocolSupported.CDP));
        assertEquals(false,v1.getProtocolSupported().contains(ProtocolSupported.ISIS));
        assertEquals(false,v1.getProtocolSupported().contains(ProtocolSupported.BRIDGE));
        LinkdVertex v2 = (LinkdVertex)m_topologyProvider.getCurrentGraph().getVertex("nodes", "2");
        assertEquals(true,v2.getProtocolSupported().contains(ProtocolSupported.LLDP));
        assertEquals(true,v2.getProtocolSupported().contains(ProtocolSupported.OSPF));
        assertEquals(false,v2.getProtocolSupported().contains(ProtocolSupported.CDP));
        assertEquals(false,v2.getProtocolSupported().contains(ProtocolSupported.ISIS));
        assertEquals(false,v2.getProtocolSupported().contains(ProtocolSupported.BRIDGE));
        LinkdVertex v3 = (LinkdVertex)m_topologyProvider.getCurrentGraph().getVertex("nodes", "3");
        assertEquals(true,v3.getProtocolSupported().contains(ProtocolSupported.LLDP));
        assertEquals(false,v3.getProtocolSupported().contains(ProtocolSupported.OSPF));
        assertEquals(false,v3.getProtocolSupported().contains(ProtocolSupported.CDP));
        assertEquals(false,v3.getProtocolSupported().contains(ProtocolSupported.ISIS));
        assertEquals(false,v3.getProtocolSupported().contains(ProtocolSupported.BRIDGE));
        LinkdVertex v4 = (LinkdVertex)m_topologyProvider.getCurrentGraph().getVertex("nodes", "4");
        LinkdVertex v5 = (LinkdVertex)m_topologyProvider.getCurrentGraph().getVertex("nodes", "5");
        LinkdVertex v6 = (LinkdVertex)m_topologyProvider.getCurrentGraph().getVertex("nodes", "6");
        assertEquals("node1", v1.getLabel());
        assertEquals("192.168.1.1", v1.getIpAddress());
        assertEquals(false, v1.isLocked());
        assertEquals(new Integer(1), v1.getNodeID());
        assertEquals(false, v1.isSelected());
        assertEquals(new Integer(0), v1.getX());
        assertEquals(new Integer(0), v1.getY());

        final CollapsibleGraph collapsibleGraph = new CollapsibleGraph(m_topologyProvider.getCurrentGraph());
        collapsibleGraph.getVertices();
        assertEquals(0, collapsibleGraph.getSemanticZoomLevel(v1));
        assertEquals(0, collapsibleGraph.getSemanticZoomLevel(v2));
        assertEquals(0, collapsibleGraph.getSemanticZoomLevel(v3));
        assertEquals(0, collapsibleGraph.getSemanticZoomLevel(v4));
        assertEquals(0, collapsibleGraph.getSemanticZoomLevel(v5));
        assertEquals(0, collapsibleGraph.getSemanticZoomLevel(v6));

        assertEquals(3, m_topologyProvider.getCurrentGraph().getEdgeIdsForVertex(v1).length);
        assertEquals(3, m_topologyProvider.getCurrentGraph().getEdgeIdsForVertex(v2).length);
        assertEquals(2, m_topologyProvider.getCurrentGraph().getEdgeIdsForVertex(v3).length);
        assertEquals(2, m_topologyProvider.getCurrentGraph().getEdgeIdsForVertex(v4).length);
        assertEquals(2, m_topologyProvider.getCurrentGraph().getEdgeIdsForVertex(v5).length);
        assertEquals(2, m_topologyProvider.getCurrentGraph().getEdgeIdsForVertex(v6).length);

        for (Vertex vertex : m_topologyProvider.getCurrentGraph().getVertices()) {
            assertEquals("nodes", vertex.getNamespace());
            //assertTrue(vertex.getIpAddress(), "127.0.0.1".equals(vertex.getIpAddress()) || "64.146.64.214".equals(vertex.getIpAddress()));
        }

        int countNODES = 0;
        int countLLDP = 0;
        int countOSPF = 0;
        int countCDP = 0;
        int countISIS = 0;
        int countBRIDGE = 0;
        for (Edge edge : m_topologyProvider.getCurrentGraph().getEdges()) {
            LinkdEdge linkdedge = (LinkdEdge) edge;
            switch (linkdedge.getDiscoveredBy()) {
                case NODES: countNODES++;break;
                case LLDP: countLLDP++;break;
                case OSPF: countOSPF++;break;
                case CDP: countCDP++;break;
                case ISIS: countISIS++;break;
                case BRIDGE: countBRIDGE++;break;
            }
        }
        assertEquals(8, countLLDP);
        assertEquals(1, countOSPF);
        assertEquals(0, countNODES);
        assertEquals(0, countCDP);
        assertEquals(0, countISIS);
        assertEquals(0, countBRIDGE);
    }

