    /**
     * Generates a ring topology and verifies that each Vertex is connected to it's neighbors.
     */
    private void testLinkingBetweenNodes(TopologyGenerator.Protocol protocol) {

        // 1.) Generate Topology
        TopologySettings settings = TopologySettings.builder()
                .protocol(protocol)
                .amountNodes(10) // use 10 so that the label names remain in the single digits => makes sorting easier
                .amountLinks(20) // one edge is composed of 2 links
                .topology(TopologyGenerator.Topology.ring) // deterministic behaviour: each node is connected to its neighbors
                .build();
        generateTopologyAndRefreshCaches(settings);
        assertEquals(settings.getAmountNodes(), linkdTopologyProvider.getCurrentGraph().getVertices().size());

        // 2.) sort the nodes by it's label name.
        List<Vertex> vertices = linkdTopologyProvider.getCurrentGraph().getVertices();
        Vertex[] verticesArray = vertices.toArray(new Vertex[vertices.size()]);
        Arrays.sort(verticesArray, Comparator.comparing(Vertex::getLabel).thenComparing(Vertex::getNodeID));
        vertices = Arrays.asList(verticesArray);

        // 3.) test the linking between each node and its next neighbor
        for(int i = 0; i < vertices.size(); i++){
            VertexRef left = vertices.get(i);
            VertexRef right = vertices.get(nextIndexInList(i, vertices.size()-1));
            verifyLinkingBetweenNodes(left, right);
        }
    }

