    /**
     * Tests that the Linkdprovider does load the information stored in the xml file 
     * correctly. So that all groups are loaded as expected and all groups have the expected
     * children as well.
     * @throws MalformedURLException
     * @throws JAXBException
     */
    @Test
    public void testAssignChildrenToParentsCorrectly() throws MalformedURLException, JAXBException {
        LinkdTopologyProvider topologyProvider = new LinkdTopologyProvider();

        DataLinkInterfaceDao datalinkIfDaoMock = EasyMock.createNiceMock(DataLinkInterfaceDao.class);
        EasyMock.expect(datalinkIfDaoMock.findAll()).andReturn(new ArrayList<DataLinkInterface>()).anyTimes();
        EasyMock.replay(datalinkIfDaoMock);
        
        topologyProvider.setDataLinkInterfaceDao(datalinkIfDaoMock);
        topologyProvider.setNodeDao(m_databasePopulator.getNodeDao());
        topologyProvider.setIpInterfaceDao(m_databasePopulator.getIpInterfaceDao());
        topologyProvider.setSnmpInterfaceDao(m_databasePopulator.getSnmpInterfaceDao());
        topologyProvider.setConfigurationFile(getClass().getResource("/saved-linkd-graph2.xml").getFile());
        topologyProvider.setAddNodeWithoutLink(true);
        topologyProvider.load(null); // simulate refresh
        
        // test if topology is loaded correctly results
        for (int i=0; i<topologyProvider.getGroups().size(); i++)  Assert.assertTrue(topologyProvider.containsVertexId("g" + i));
        Assert.assertFalse(topologyProvider.containsVertexId("g" + topologyProvider.getGroups().size()));
        for (int i=0; i<topologyProvider.getVerticesWithoutGroups().size(); i++) Assert.assertTrue(topologyProvider.containsVertexId("" + (i+1)));
        Assert.assertFalse(topologyProvider.containsVertexId("" + (topologyProvider.getVerticesWithoutGroups().size()+1)));
       
        // now check the parent stuff        
        final String namespace = topologyProvider.getVertexNamespace();
        check(topologyProvider.getVertex(namespace, "1"), m_databasePopulator.getNode1(), topologyProvider.getVertex(namespace, "g2"));
        check(topologyProvider.getVertex(namespace, "2"), m_databasePopulator.getNode2(), null);
        check(topologyProvider.getVertex(namespace, "3"), m_databasePopulator.getNode3(), topologyProvider.getVertex(namespace, "g2"));
        check(topologyProvider.getVertex(namespace, "4"), m_databasePopulator.getNode4(), null);

        // now we need to check the groups as well
        Assert.assertEquals(topologyProvider.getVertex(namespace, "g0").getParent(), null);
        Assert.assertEquals(topologyProvider.getVertex(namespace, "g1").getParent(), null);
        Assert.assertEquals(topologyProvider.getVertex(namespace, "g2").getParent(), topologyProvider.getVertex(namespace, "g1"));
        
    }

