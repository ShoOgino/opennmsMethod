    @Test
    public void test() throws Exception {
        m_topologyProvider.refresh();
        assertEquals(8, m_topologyProvider.getCurrentGraph().getVertices().size());

        // Add v0 vertex
        Vertex vertexA = new SimpleLeafVertex(m_topologyProvider.getNamespace(), "v0", 50, 100);
        m_topologyProvider.getCurrentGraph().addVertices(vertexA);
        assertEquals(9, m_topologyProvider.getCurrentGraph().getVertices().size());
        assertEquals("v0", vertexA.getId());
        //LoggerFactory.getLogger(this.getClass()).debug(m_topologyProvider.getVertices().get(0).toString());
        assertTrue(m_topologyProvider.getCurrentGraph().containsVertexId(vertexA));
        assertTrue(m_topologyProvider.getCurrentGraph().containsVertexId(new DefaultVertexRef("nodes", "v0",m_topologyProvider.getNamespace() + ":" + "v0")));
        assertFalse(m_topologyProvider.getCurrentGraph().containsVertexId(new DefaultVertexRef("nodes", "v1",m_topologyProvider.getNamespace() + ":" + "v1")));

        ((AbstractVertex)vertexA).setIpAddress("10.0.0.4");

        // Search by VertexRef
        VertexRef vertexAref = new DefaultVertexRef(m_topologyProvider.getNamespace(), "v0",m_topologyProvider.getNamespace() + ":" + "v0");
        VertexRef vertexBref = new DefaultVertexRef(m_topologyProvider.getNamespace(), "v1",m_topologyProvider.getNamespace() + ":" + "v1");
        assertEquals(1, m_topologyProvider.getCurrentGraph().getVertices(Collections.singletonList(vertexAref)).size());
        assertEquals(0, m_topologyProvider.getCurrentGraph().getVertices(Collections.singletonList(vertexBref)).size());

        // Add v1 vertex
        Vertex vertexB = new SimpleLeafVertex(m_topologyProvider.getNamespace(), "v1", 100, 50);
        m_topologyProvider.getCurrentGraph().addVertices(vertexB);
        assertEquals("v1", vertexB.getId());
        assertTrue(m_topologyProvider.getCurrentGraph().containsVertexId(vertexB));
        assertTrue(m_topologyProvider.getCurrentGraph().containsVertexId("v1"));
        assertEquals(1, m_topologyProvider.getCurrentGraph().getVertices(Collections.singletonList(vertexBref)).size());

        // Added 3 more vertices
        Vertex vertexC = new SimpleLeafVertex(m_topologyProvider.getNamespace(), "v3", 100, 150);
        Vertex vertexD = new SimpleLeafVertex(m_topologyProvider.getNamespace(), "v4", 150, 100);
        Vertex vertexE = new SimpleLeafVertex(m_topologyProvider.getNamespace(), "v5", 200, 200);
        m_topologyProvider.getCurrentGraph().addVertices(vertexC, vertexD, vertexE);
        assertEquals(13, m_topologyProvider.getCurrentGraph().getVertices().size());

        // Connect various vertices together
        m_topologyProvider.getCurrentGraph().connectVertices("e0", vertexA, vertexB);
        m_topologyProvider.getCurrentGraph().connectVertices("e1", vertexA, vertexC);
        m_topologyProvider.getCurrentGraph().connectVertices("e2", vertexB, vertexC);
        m_topologyProvider.getCurrentGraph().connectVertices("e3", vertexB, vertexD);
        m_topologyProvider.getCurrentGraph().connectVertices("e4", vertexC, vertexD);
        m_topologyProvider.getCurrentGraph().connectVertices("e5", vertexA, vertexE);
        m_topologyProvider.getCurrentGraph().connectVertices("e6", vertexD, vertexE);

        assertEquals(1, m_topologyProvider.getCurrentGraph().getVertices(Collections.singletonList(vertexAref)).size());
        assertEquals(1, m_topologyProvider.getCurrentGraph().getVertices(Collections.singletonList(vertexBref)).size());
        assertEquals(13, m_topologyProvider.getCurrentGraph().getVertices().size());
        assertEquals(3, m_topologyProvider.getCurrentGraph().getEdgeIdsForVertex(m_topologyProvider.getCurrentGraph().getVertex(vertexAref)).length);
        assertEquals(3, m_topologyProvider.getCurrentGraph().getEdgeIdsForVertex(m_topologyProvider.getCurrentGraph().getVertex(vertexBref)).length);

        m_topologyProvider.getCurrentGraph().resetContainer();

        // Ensure that the topology provider has been erased
        assertEquals(0, m_topologyProvider.getCurrentGraph().getVertices(Collections.singletonList(vertexAref)).size());
        assertEquals(0, m_topologyProvider.getCurrentGraph().getVertices(Collections.singletonList(vertexBref)).size());
        assertEquals(0, m_topologyProvider.getCurrentGraph().getVertices().size());
        assertEquals(0, m_topologyProvider.getCurrentGraph().getEdgeIdsForVertex(m_topologyProvider.getCurrentGraph().getVertex(vertexAref)).length);
        assertEquals(0, m_topologyProvider.getCurrentGraph().getEdgeIdsForVertex(m_topologyProvider.getCurrentGraph().getVertex(vertexBref)).length);

        m_topologyProvider.refresh();

        // Ensure that all of the content has been reloaded properly

        // Plain vertices should not be reloaded from the XML
        assertEquals(0, m_topologyProvider.getCurrentGraph().getVertices(Collections.singletonList(vertexAref)).size());
        assertEquals(0, m_topologyProvider.getCurrentGraph().getVertices(Collections.singletonList(vertexBref)).size());
        // Groups should not be reloaded, because they are not persisted
        assertEquals(8, m_topologyProvider.getCurrentGraph().getVertices().size());
        assertEquals(0, m_topologyProvider.getCurrentGraph().getEdgeIdsForVertex(m_topologyProvider.getCurrentGraph().getVertex(vertexAref)).length);
        assertEquals(0, m_topologyProvider.getCurrentGraph().getEdgeIdsForVertex(m_topologyProvider.getCurrentGraph().getVertex(vertexBref)).length);
    }

