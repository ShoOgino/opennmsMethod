    @Test
    public void testGetAlarmStatus() {
        Vertex vertex = createVertex(1);
        Vertex vertex2 = createVertex(2);
        Vertex vertex3 = createVertex(3);
        List<VertexRef> vertexList = Lists.newArrayList(vertex, vertex2, vertex3);

        EasyMock.expect(
                m_alarmDao.getNodeAlarmSummariesIncludeAcknowledgedOnes(EasyMock.anyObject())).andReturn(createNormalAlarmSummaryList());
        
        EasyMock.replay(m_alarmDao);
        
        Map<VertexRef, Status> statusMap = m_statusProvider.getStatusForVertices(m_vertexProvider, vertexList, new Criteria[0]);
        assertEquals(3, statusMap.size());
        assertEquals(vertex, statusMap.keySet().stream().sorted((v1, v2) -> v1.getId().compareTo(v2.getId())).collect(Collectors.toList()).get(0));
        assertEquals("major", statusMap.get(vertex).computeStatus()); // use defined status
        assertEquals("normal", statusMap.get(vertex2).computeStatus()); // fallback to normal
        assertEquals("indeterminate", statusMap.get(vertex3).computeStatus()); // use defined status
        
        EasyMock.verify(m_alarmDao);
    }

