    @SuppressWarnings("deprecation")
    public void check(GraphProvider topologyProvider) {
        String vertexNamespace = topologyProvider.getNamespace();
        Assert.assertEquals(8, topologyProvider.getVertices().size());

        Assert.assertEquals(9, topologyProvider.getEdges().size());

        Assert.assertTrue(topologyProvider.containsVertexId("1"));
        Assert.assertTrue(topologyProvider.containsVertexId("2"));
        Assert.assertTrue(topologyProvider.containsVertexId("3"));
        Assert.assertTrue(topologyProvider.containsVertexId("4"));
        Assert.assertTrue(topologyProvider.containsVertexId("5"));
        Assert.assertTrue(topologyProvider.containsVertexId("6"));
        Assert.assertTrue(topologyProvider.containsVertexId("7"));
        Assert.assertTrue(topologyProvider.containsVertexId("8"));
        Assert.assertTrue(!topologyProvider.containsVertexId("15"));

        Assert.assertEquals(3, topologyProvider.getEdgeIdsForVertex(new DefaultVertexRef(vertexNamespace, "1")).length);
        Assert.assertEquals(3, topologyProvider.getEdgeIdsForVertex(new DefaultVertexRef(vertexNamespace, "2")).length);
        Assert.assertEquals(2, topologyProvider.getEdgeIdsForVertex(new DefaultVertexRef(vertexNamespace, "3")).length);
        Assert.assertEquals(2, topologyProvider.getEdgeIdsForVertex(new DefaultVertexRef(vertexNamespace, "4")).length);
        Assert.assertEquals(2, topologyProvider.getEdgeIdsForVertex(new DefaultVertexRef(vertexNamespace, "5")).length);
        Assert.assertEquals(2, topologyProvider.getEdgeIdsForVertex(new DefaultVertexRef(vertexNamespace, "6")).length);
        Assert.assertEquals(2, topologyProvider.getEdgeIdsForVertex(new DefaultVertexRef(vertexNamespace, "7")).length);
        Assert.assertEquals(2, topologyProvider.getEdgeIdsForVertex(new DefaultVertexRef(vertexNamespace, "8")).length);

        /**
         * This is a little hokey because it relies on the fact that edges are only judged to be equal based
         * on the namespace and id tuple.
         */
        Vertex mockVertex = EasyMock.createMock(Vertex.class);
        EasyMock.expect(mockVertex.getId()).andReturn("v0").anyTimes();
        EasyMock.expect(mockVertex.getLabel()).andReturn(null).anyTimes();
        EasyMock.replay(mockVertex);
        AbstractEdge[] edgeidsforvertex1 = {
                LinkdEdge.create("10018|10081", mockVertex, mockVertex,ProtocolSupported.LLDP),
                LinkdEdge.create("10012|10021", mockVertex, mockVertex,ProtocolSupported.LLDP),
                LinkdEdge.create("10112|10121", mockVertex, mockVertex,ProtocolSupported.OSPF)
        };
        AbstractEdge[] edgeidsforvertex2 = {
                LinkdEdge.create("10023|10032", mockVertex, mockVertex,ProtocolSupported.LLDP),
                LinkdEdge.create("10012|10021", mockVertex, mockVertex,ProtocolSupported.LLDP),
                LinkdEdge.create("10112|10121", mockVertex, mockVertex,ProtocolSupported.OSPF)
        };
        AbstractEdge[] edgeidsforvertex3 = {
                LinkdEdge.create("10023|10032", mockVertex, mockVertex,ProtocolSupported.LLDP),
                LinkdEdge.create("10034|10043", mockVertex, mockVertex,ProtocolSupported.LLDP)
        };
        AbstractEdge[] edgeidsforvertex4 = {
                LinkdEdge.create("10045|10054", mockVertex, mockVertex,ProtocolSupported.LLDP),
                LinkdEdge.create("10034|10043", mockVertex, mockVertex,ProtocolSupported.LLDP)
        };
        AbstractEdge[] edgeidsforvertex5 = {
                LinkdEdge.create("10045|10054", mockVertex, mockVertex,ProtocolSupported.LLDP),
                LinkdEdge.create("10056|10065", mockVertex, mockVertex,ProtocolSupported.LLDP)
        };
        AbstractEdge[] edgeidsforvertex6 = {
                LinkdEdge.create("10056|10065", mockVertex, mockVertex,ProtocolSupported.LLDP),
                LinkdEdge.create("10067|10076", mockVertex, mockVertex,ProtocolSupported.LLDP)
        };
        AbstractEdge[] edgeidsforvertex7 = {
                LinkdEdge.create("10078|10087", mockVertex, mockVertex,ProtocolSupported.LLDP),
                LinkdEdge.create("10067|10076", mockVertex, mockVertex,ProtocolSupported.LLDP)
        };
        AbstractEdge[] edgeidsforvertex8 = {
                LinkdEdge.create("10018|10081", mockVertex, mockVertex,ProtocolSupported.LLDP),
                LinkdEdge.create("10078|10087", mockVertex, mockVertex,ProtocolSupported.LLDP)
        };
        OnmsAssert.assertArrayEqualsIgnoreOrder(topologyProvider.getEdgeIdsForVertex(new DefaultVertexRef(vertexNamespace, "1")), edgeidsforvertex1);
        OnmsAssert.assertArrayEqualsIgnoreOrder(topologyProvider.getEdgeIdsForVertex(new DefaultVertexRef(vertexNamespace, "2")), edgeidsforvertex2);
        OnmsAssert.assertArrayEqualsIgnoreOrder(topologyProvider.getEdgeIdsForVertex(new DefaultVertexRef(vertexNamespace, "3")), edgeidsforvertex3);
        OnmsAssert.assertArrayEqualsIgnoreOrder(topologyProvider.getEdgeIdsForVertex(new DefaultVertexRef(vertexNamespace, "4")), edgeidsforvertex4);
        OnmsAssert.assertArrayEqualsIgnoreOrder(topologyProvider.getEdgeIdsForVertex(new DefaultVertexRef(vertexNamespace, "5")), edgeidsforvertex5);
        OnmsAssert.assertArrayEqualsIgnoreOrder(topologyProvider.getEdgeIdsForVertex(new DefaultVertexRef(vertexNamespace, "6")), edgeidsforvertex6);
        OnmsAssert.assertArrayEqualsIgnoreOrder(topologyProvider.getEdgeIdsForVertex(new DefaultVertexRef(vertexNamespace, "7")), edgeidsforvertex7);
        OnmsAssert.assertArrayEqualsIgnoreOrder(topologyProvider.getEdgeIdsForVertex(new DefaultVertexRef(vertexNamespace, "8")), edgeidsforvertex8);
    }

