	@Test
	public void loadSavedGraphWithOnlyGroups() throws Exception {
		m_topologyProvider.setConfigurationFile("target/test-classes/saved-linkd-graph.xml");
		
		// Temporarily replace the DataLinkInterfaceDao with a mock empty impl
		DataLinkInterfaceDao dao = m_topologyProvider.getDataLinkInterfaceDao();
		DataLinkInterfaceDao mockDao = EasyMock.createMock(DataLinkInterfaceDao.class);
		EasyMock.expect(mockDao.findAll()).andReturn(new ArrayList<DataLinkInterface>()).anyTimes();
		EasyMock.replay(mockDao);
		m_topologyProvider.setDataLinkInterfaceDao(mockDao);
		
		m_topologyProvider.load(null);
		
		// Should have 8 groups
		assertEquals(8, m_topologyProvider.getVertices().size());
		// Ensure that all of the vertices are groups
		for (Vertex vertex : m_topologyProvider.getVertices()) {
			assertEquals(true, vertex.isGroup());
		}
		Vertex vert1 = m_topologyProvider.getVertex("nodes", "linkdg5");
		Vertex vert2 = m_topologyProvider.getVertex("nodes", "linkdg10");
		Vertex vert3 = m_topologyProvider.getVertex("nodes", "linkdg14");
		Vertex vert4 = m_topologyProvider.getVertex("nodes", "linkdg16");
		Vertex vert5 = m_topologyProvider.getVertex("nodes", "linkdg17");
		Vertex vert6 = m_topologyProvider.getVertex("nodes", "linkdg18");
		Vertex vert7 = m_topologyProvider.getVertex("nodes", "linkdg20");
		Vertex vert8 = m_topologyProvider.getVertex("nodes", "linkdg21");

		assertEquals("Almost Top Group", vert1.getLabel());
		assertEquals(vert1.getParent().toString() + " ?= " + vert7, 0, new RefComparator().compare(vert7, vert1.getParent()));
		assertEquals(1, m_topologyProvider.getSemanticZoomLevel(vert1));

		assertEquals("Group 32", vert2.getLabel());
		assertEquals(vert2.getParent().toString() + " ?= " + vert8, 0, new RefComparator().compare(vert8, vert2.getParent()));
		assertEquals(1, m_topologyProvider.getSemanticZoomLevel(vert2));

		assertEquals("FGHKDKL", vert3.getLabel());
		assertEquals(vert3.getParent().toString() + " ?= " + vert4, 0, new RefComparator().compare(vert4, vert3.getParent()));
		assertEquals(3, m_topologyProvider.getSemanticZoomLevel(vert3));

		assertEquals("Hello Again", vert4.getLabel());
		assertEquals(vert4.getParent().toString() + " ?= " + vert6, 0, new RefComparator().compare(vert6, vert4.getParent()));
		assertEquals(2, m_topologyProvider.getSemanticZoomLevel(vert4));

		assertEquals("Big Group", vert5.getLabel());
		assertEquals(vert5.getParent().toString() + " ?= " + vert2, 0, new RefComparator().compare(vert2, vert5.getParent()));
		assertEquals(2, m_topologyProvider.getSemanticZoomLevel(vert5));

		assertEquals("Smaller Group", vert6.getLabel());
		assertEquals(vert6.getParent().toString() + " ?= " + vert7, 0, new RefComparator().compare(vert7, vert6.getParent()));
		assertEquals(1, m_topologyProvider.getSemanticZoomLevel(vert6));

		assertEquals("Top Three", vert7.getLabel());
		assertEquals(null, vert7.getParent());
		assertEquals(0, m_topologyProvider.getSemanticZoomLevel(vert7));

		assertEquals("Bottom Four", vert8.getLabel());
		assertEquals(null, vert8.getParent());
		assertEquals(0, m_topologyProvider.getSemanticZoomLevel(vert8));

		// Reset the DataLinkInterfaceDao
		m_topologyProvider.setDataLinkInterfaceDao(dao);
	}

