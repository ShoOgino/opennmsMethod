    private List<Vertex> filterVertices(List<Vertex> vertices) {
        if(m_aclsEnabled){
            LOG.debug("filterVertices: aclEnabled filtering");
            //Get All nodes when called should filter with ACL
            List<OnmsNode> onmsNodes = m_nodeDao.findAll();

            //Transform the onmsNodes list to a list of Ids
            final Set<Integer> nodes = new HashSet<Integer>(Lists.transform(onmsNodes, new Function<OnmsNode, Integer>() {
                @Override
                public Integer apply(OnmsNode node) {
                    return node.getId();
                }
            }));

            //Filter out the nodes that are not viewable by the user.
            return Lists.newArrayList(Collections2.filter(vertices, new Predicate<Vertex>() {
                @Override
                public boolean apply(Vertex vertex) {
                    return vertex.getNamespace().equals(getNamespace()) ? nodes.contains(vertex.getNodeID()) : true;
                }
            }));
        }else{
            LOG.debug("filterVerices: aclDisabled");
            return vertices;
        }
    }

