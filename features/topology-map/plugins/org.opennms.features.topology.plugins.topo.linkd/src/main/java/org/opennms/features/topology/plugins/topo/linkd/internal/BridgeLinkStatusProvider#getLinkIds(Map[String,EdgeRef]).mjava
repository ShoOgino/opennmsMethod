    @Override
    protected Set<Integer> getLinkIds(Map<String, EdgeRef> mappedRefs) {
        
        Map<String, BridgeBridgeLink> mapA = new HashMap<String, BridgeBridgeLink>();
        for (BridgeBridgeLink link: m_bridgeBridgeLinkDao.findAll()) {
            String idKey = EdgeAlarmStatusSummary.getDefaultEdgeId(link.getId(), link.getId());
            LOG.debug("getLinkIds: parsing key {} bridgebridgelink: {} ", idKey, link.getId());
            if (mappedRefs.containsKey(idKey) ) {
                LOG.debug("getLinkIds: adding matched key {} bridgebridgelink: {} ", idKey, link.getId());
                mapA.put(idKey, link);
            }            
        }
        
        Map<String, BridgeMacTopologyLink> mapB =  new HashMap<String, BridgeMacTopologyLink>();
        for (BridgeMacTopologyLink link : m_bridgeMacLinkDao.getAllBridgeLinksToBridgeNodes()) {
            String idKey = EdgeAlarmStatusSummary.getDefaultEdgeId(link.getTargetId(), link.getTargetId());
            LOG.debug("getLinkIds: parsing key {} bridge bridgemaclink: {} ", idKey, link.getId());
            if (mappedRefs.containsKey(idKey) ) {
                LOG.debug("getLinkIds: adding matched key {} bridge bridgemaclink: {} ", idKey, link.getId());
                mapB.put(idKey, link);
            }
            idKey = EdgeAlarmStatusSummary.getDefaultEdgeId(link.getId(), link.getId());
            LOG.debug("getLinkIds: parsing key {} bridge bridgemaclink: {} ", idKey, link.getId());
            if (mappedRefs.containsKey(idKey) ) {
                LOG.debug("getLinkIds: adding matched key {} bridge bridgemaclink: {} ", idKey, link.getId());
                mapB.put(idKey, link);
            }
        }
        
        Map<String, BridgeMacTopologyLink> mapC =  new HashMap<String, BridgeMacTopologyLink>();
        for (BridgeMacTopologyLink link : m_bridgeMacLinkDao.getAllBridgeLinksToIpAddrToNodes()) {
            String idKey = String.valueOf(link.getId())+ "|" + String.valueOf(link.getTargetId());
            LOG.debug("getLinkIds: parsing key {} mac bridgemaclink: {} ", idKey, link.getId());
            if (mappedRefs.containsKey(idKey) ) {
                LOG.debug("getLinkIds: adding matched key {} mac bridgemaclink: {} ", idKey, link.getId());
                mapC.put(idKey, link);
            }
            idKey = EdgeAlarmStatusSummary.getDefaultEdgeId(link.getId(), link.getId());
            LOG.debug("getLinkIds: parsing key {} mac bridgemaclink: {} ", idKey, link.getId());
            if (mappedRefs.containsKey(idKey) ) {
                LOG.debug("getLinkIds: adding matched key {} mac bridgemaclink: {} ", idKey, link.getId());
                mapC.put(idKey, link);
            }
        }

        if(m_bridgeBridgeLinks == null){
            m_bridgeBridgeLinks = new HashMap<String, BridgeBridgeLink>();
        }
        m_bridgeBridgeLinks.clear();
        m_bridgeBridgeLinks.putAll(mapA);

        if(m_bridgeBridgeMacLinks == null){
            m_bridgeBridgeMacLinks = new HashMap<String, BridgeMacTopologyLink>();
        }
        m_bridgeBridgeMacLinks.clear();
        m_bridgeBridgeMacLinks.putAll(mapB);

        if(m_macBridgeMacLinks == null){
            m_macBridgeMacLinks = new HashMap<String, BridgeMacTopologyLink>();
        }
        m_macBridgeMacLinks.clear();
        m_macBridgeMacLinks.putAll(mapC);
        

        Set<Integer> ret_val = new HashSet<Integer>();
        for (BridgeBridgeLink link : mapA.values()) {
                    ret_val.add(link.getId());
        }

        for (BridgeMacTopologyLink link : mapB.values()) {
                ret_val.add(link.getId());
        }
        
        for (BridgeMacTopologyLink link : mapC.values()) {
                    ret_val.add(link.getId());
        }

        LOG.debug("getLinkIds {}", ret_val);
        return ret_val;
    }

