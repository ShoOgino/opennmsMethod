    private void getBridgeLinks(){

        Multimap<String, BridgeMacTopologyLink> multimap = HashMultimap.create();
        List<BridgeMacTopologyLink> macLinks = m_bridgeMacLinkDao.getAllBridgeLinksToIpAddrToNodes();
        if (macLinks != null && macLinks.size() > 0) {
            for (BridgeMacTopologyLink macLink : macLinks) {
                multimap.put(String.valueOf(macLink.getNodeId()) + "|" +String.valueOf(macLink.getBridgePort()), macLink);
            }
        }

        //if multimap entry has more than one item, check bridgeBridgeLink and add cloud vertex
        for (String key : multimap.keySet()){
            Collection<BridgeMacTopologyLink> links = multimap.get(key);
            if (links.size() > 1) {
                //process link with cloud
                processMultipleBridgeLinks(key, links);
            } else{
                //add single connection
                BridgeMacTopologyLink topoLink = links.iterator().next();
                String id = Math.min(topoLink.getNodeId(), topoLink.getTargetNodeId()) + "|" + Math.max(topoLink.getNodeId(), topoLink.getTargetNodeId());
                BridgeLinkDetail detail = new BridgeLinkDetail(id, EnhancedLinkdTopologyProvider.TOPOLOGY_NAMESPACE_LINKD,
                        getVertex(m_nodeDao.get(topoLink.getNodeId())), topoLink.getId(), getVertex(m_nodeDao.get(topoLink.getTargetNodeId())), topoLink.getId());

                AbstractEdge edge = connectVertices(detail.getId(), detail.getSource(), detail.getTarget(), BRIDGE_EDGE_NAMESPACE);
                //TODO: fix tooltip for bridge topology
                edge.setTooltipText(getEdgeTooltipText(detail));
            }

        }
        
        List<BridgeBridgeLink> links = m_bridgeBridgeLinkDao.findAll();
        if (links != null && links.size() > 0) {
            for (BridgeBridgeLink link : links) {
                String id = Math.min(link.getNode().getId(), link.getDesignatedNode().getId()) + "|" + Math.max(link.getNode().getId(), link.getDesignatedNode().getId());
                BridgeLinkDetail detail = new BridgeLinkDetail(id, EnhancedLinkdTopologyProvider.TOPOLOGY_NAMESPACE_LINKD,
                            getVertex(m_nodeDao.get(link.getNode().getId())), link.getId(), getVertex(m_nodeDao.get(link.getDesignatedNode().getId())), link.getId());
               AbstractEdge edge = connectVertices(detail.getId(), detail.getSource(), detail.getTarget(), BRIDGE_EDGE_NAMESPACE);
               edge.setTooltipText(getEdgeTooltipText(detail));
            }
        }
    }

