    private void getBridgeLinks(Map<Integer, OnmsNode> nodemap, Map<Integer, List<OnmsSnmpInterface>> nodesnmpmap,Map<String, List<OnmsIpInterface>> macToIpMap,Map<Integer, List<OnmsIpInterface>> ipmap, Map<Integer, OnmsIpInterface> ipprimarymap){
        int cloudindex = 0;
        for (BroadcastDomain domain: m_bridgeTopologyDao.getAllPersisted(m_bridgeBridgeLinkDao, m_bridgeMacLinkDao)) {
            for (SharedSegment segment: domain.getTopology()) {
                // bridge bridge link
                if (segment.noMacsOnSegment() && segment.getBridgeBridgeLinks().size() == 1) {
                    for (BridgeBridgeLink link : segment.getBridgeBridgeLinks()) {
                        Vertex source = getOrCreateVertex(nodemap.get(link.getNode().getId()), ipprimarymap.get(link.getNode().getId()));
                        Vertex target = getOrCreateVertex(nodemap.get(link.getDesignatedNode().getId()), ipprimarymap.get(link.getDesignatedNode().getId()));
                        BridgeLinkDetail detail = new BridgeLinkDetail(EnhancedLinkdTopologyProvider.TOPOLOGY_NAMESPACE_LINKD,source,link.getBridgePortIfIndex(),  target, link.getDesignatedPortIfIndex(), link.getBridgePort(), link.getDesignatedPort(), link.getId(),link.getId() );
                       AbstractEdge edge = connectVertices(detail.getId(), detail.getSource(), detail.getTarget(), BRIDGE_EDGE_NAMESPACE);
                       edge.setTooltipText(getEdgeTooltipText(detail,nodesnmpmap));
                    }
                    continue;
                } 
                // bridge mac link 
                if (segment.getBridgeMacLinks().size() == 1 && segment.getBridgeBridgeLinks().size() == 0) {
                    for (BridgeMacLink link: segment.getBridgeMacLinks()) {
                        if (macToIpMap.containsKey(link.getMacAddress()) && macToIpMap.get(link.getMacAddress()).size() > 0) {
                           List<OnmsIpInterface> targetInterfaces = macToIpMap.get(link.getMacAddress());
                           OnmsIpInterface targetIp = targetInterfaces.get(0);
                           Vertex source = getOrCreateVertex(nodemap.get(link.getNode().getId()), ipprimarymap.get(link.getNode().getId()));
                           Vertex target = getOrCreateVertex(nodemap.get(targetIp.getNode().getId()), ipprimarymap.get(targetIp.getNode().getId()));
                           AbstractEdge edge = connectVertices(Integer.toString(link.getId()), source, target, BRIDGE_EDGE_NAMESPACE);
                           edge.setTooltipText(getEdgeTooltipText(link.getMacAddress(),targetInterfaces));
                        }
                    }
                    continue;    
                }
                String cloudId = "Cloud:"+cloudindex;
                AbstractVertex cloudVertex = addVertex(cloudId, 0, 0);
                cloudVertex.setLabel("");
                cloudVertex.setIconKey("cloud");
                cloudVertex.setTooltipText("Shared Segment: designated bridge: " + nodemap.get(segment.getDesignatedBridge()) + " port: " + segment.getDesignatedPort());
                addVertices(cloudVertex);
                for (BridgePort link: segment.getBridgePortsOnSegment()) {
                    Vertex target = getOrCreateVertex(nodemap.get(link.getNode().getId()), ipprimarymap.get(link.getNode().getId()));
                    AbstractEdge edge = connectVertices(cloudVertex.getId()+link.getNode().getId(), cloudVertex, target, BRIDGE_EDGE_NAMESPACE);
                    edge.setTooltipText(getEdgeTooltipText(link,target,nodesnmpmap));
                }
                for (String mac: segment.getMacsOnSegment()) {
                    if (macToIpMap.containsKey(mac) && macToIpMap.get(mac).size() > 0) {
                        List<OnmsIpInterface> targetInterfaces = macToIpMap.get(mac);
                        OnmsIpInterface targetIp = targetInterfaces.get(0);
                        Vertex target = getOrCreateVertex(nodemap.get(targetIp.getNode().getId()), ipprimarymap.get(targetIp.getNode().getId()));
                        AbstractEdge edge = connectVertices(cloudVertex.getId()+mac, cloudVertex, target, BRIDGE_EDGE_NAMESPACE);
                        edge.setTooltipText(getEdgeTooltipText(mac,targetInterfaces));
                    }
                    cloudindex++;
                }
            }
        }
    }

