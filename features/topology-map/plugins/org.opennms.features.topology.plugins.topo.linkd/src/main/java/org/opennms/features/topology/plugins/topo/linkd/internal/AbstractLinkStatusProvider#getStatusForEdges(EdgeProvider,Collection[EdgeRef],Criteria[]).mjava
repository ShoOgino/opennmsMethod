    @Override
    public Map<EdgeRef, Status> getStatusForEdges(EdgeProvider edgeProvider, Collection<EdgeRef> edges, Criteria[] criteria) {
        Map<String, EdgeRef> mappedRefs = mapRefs(edges);
        Map<EdgeRef, Status> returnMap = initializeMap(edges);


        Set<Integer> linkIds = getLinkIds(mappedRefs);
        if(linkIds.size() > 0) {
            List<EdgeAlarmStatusSummary> edgeAlarmSummaries = getEdgeAlarmSummaries(new ArrayList<Integer>(linkIds));

            for (EdgeAlarmStatusSummary eSum : edgeAlarmSummaries) {
                String linkId = eSum.getId();
                EdgeRef edge = mappedRefs.get(linkId);

                final Status existingStatus = returnMap.get(edge);
                final Status edgeStatus = getLinkStatusForSummary(eSum);

                if (existingStatus != null) {
                    if ("unknown".equals(existingStatus.computeStatus())) {
                        returnMap.put(edge, edgeStatus);
                    } else if ("up".equals(existingStatus.computeStatus()) && "down".equals(edgeStatus.computeStatus())) {
                        returnMap.put(edge, edgeStatus);
                    }
                }
            }
        }

        //TODO: handle child edges
        return returnMap;
    }

