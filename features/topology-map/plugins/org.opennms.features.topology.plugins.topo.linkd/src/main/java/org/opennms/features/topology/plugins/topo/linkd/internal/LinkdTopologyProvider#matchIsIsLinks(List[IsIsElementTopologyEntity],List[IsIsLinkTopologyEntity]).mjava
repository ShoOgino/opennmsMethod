    List<Pair<IsIsLinkTopologyEntity, IsIsLinkTopologyEntity>> matchIsIsLinks(final List<IsIsElementTopologyEntity> elements, final List<IsIsLinkTopologyEntity> allLinks) {

        // 1.) create lookupMaps
        Map<Integer, IsIsElementTopologyEntity> elementmap = new HashMap<>();
        for (IsIsElementTopologyEntity element: elements) {
            elementmap.put(element.getNodeId(), element);
        }

        Map<CompositeKey, IsIsLinkTopologyEntity> targetLinkMap = new HashMap<>();
        for (IsIsLinkTopologyEntity targetLink : allLinks) {
          IsIsElementTopologyEntity targetElement = elementmap.get(targetLink.getNodeId());
            targetLinkMap.put(new CompositeKey(targetLink.getIsisISAdjIndex(),
                      targetElement.getIsisSysID(),
                      targetLink.getIsisISAdjNeighSysID()), targetLink);
        }

        // 2. iterate
        Set<Integer> parsed = new HashSet<Integer>();
        List<Pair<IsIsLinkTopologyEntity, IsIsLinkTopologyEntity>> results = new ArrayList<>();

        for (IsIsLinkTopologyEntity sourceLink : allLinks) {
            if (parsed.contains(sourceLink.getId())) {
                continue;
            }
            if (LOG.isDebugEnabled()) {
                LOG.debug("getIsIsLinks: source: {}", sourceLink);
            }
            IsIsElementTopologyEntity sourceElement = elementmap.get(sourceLink.getNodeId());
            IsIsLinkTopologyEntity targetLink = targetLinkMap.get(new CompositeKey(sourceLink.getIsisISAdjIndex(),
                    sourceLink.getIsisISAdjNeighSysID(),
                    sourceElement.getIsisSysID()));

            if (targetLink == null) {
                LOG.debug("getIsIsLinks: cannot found target for source: '{}'", sourceLink.getId());
                continue;
            }
            if (sourceLink.getId().intValue() == targetLink.getId().intValue()|| parsed.contains(targetLink.getId())) {
                continue;
            }
            if (LOG.isDebugEnabled()) {
                LOG.debug("getIsIsLinks: target: {}", targetLink);
            }
            results.add(Pair.of(sourceLink, targetLink));
            parsed.add(sourceLink.getId());
            parsed.add(targetLink.getId());
        }
        return results;
    }

