    private void getLldpLinks() {
        // Index the LLDP elements by node id
        Map<Integer, LldpElement> nodelldpelementidMap = new HashMap<Integer, LldpElement>();
        Map<Integer, LinkdVertex> nodeVertexMap = new HashMap<Integer, LinkdVertex>();
        for (LldpElement lldpelement: m_lldpElementDao.findAll()) {
            nodelldpelementidMap.put(lldpelement.getNode().getId(), lldpelement);
            LinkdVertex vertex = (LinkdVertex)getVertex(TOPOLOGY_NAMESPACE_LINKD, lldpelement.getNode().getNodeId());
            vertex.getProtocolSupported().add(ProtocolSupported.LLDP);
            nodeVertexMap.put(lldpelement.getNode().getId(), vertex);
            System.err.println(vertex.getId());
        }

        // Pull all of the LLDP links and index them by remote chassis id
        Map<String, List<LldpLink>> lldpRemoteIdLinksMap = new HashMap<>();
        List<LldpLink> allLinks = m_lldpLinkDao.findAll();
        for (LldpLink link : allLinks) {
            final String remoteChassisId = link.getLldpRemChassisId();
            if (!lldpRemoteIdLinksMap.containsKey(remoteChassisId)) {
                lldpRemoteIdLinksMap.put(remoteChassisId, new ArrayList<>());
            }
            lldpRemoteIdLinksMap.get(remoteChassisId).add(link);
        }

        Set<Integer> parsed = new HashSet<Integer>();
        for (LldpLink sourceLink : allLinks) {
            if (parsed.contains(sourceLink.getId())) {
                continue;
            }
            String sourceLldpChassisId = nodelldpelementidMap.get(sourceLink.getNode().getId()).getLldpChassisId();
            if (sourceLldpChassisId.equals(sourceLink.getLldpRemChassisId())) {
                if (LOG.isDebugEnabled()) {
                    LOG.debug("getLldpLinks: self link not adding source: {}",sourceLink.printTopology());
                }
                parsed.add(sourceLink.getId());
                continue;
            }
            if (LOG.isDebugEnabled()) {
                LOG.debug("getLldpLinks: source: {}",sourceLink.printTopology());
            }
            LldpLink targetLink = null;

            // Limit the candidate links by only choosing those have a remote chassis id matching the chassis id of the source link
            for (LldpLink link : lldpRemoteIdLinksMap.getOrDefault(sourceLldpChassisId, Collections.emptyList())) {
                if (parsed.contains(link.getId())) {
                    continue;
                }

                String targetchassisId = nodelldpelementidMap.get(link.getNode().getId()).getLldpChassisId();
                // Compare the chassis id on the other end of the link
                if (!sourceLink.getLldpRemChassisId().equals(targetchassisId)) {
                    continue;
                }
                boolean bool1 = sourceLink.getLldpRemPortId().equals(link.getLldpPortId()) && link.getLldpRemPortId().equals(sourceLink.getLldpPortId());
                boolean bool3 = sourceLink.getLldpRemPortIdSubType() == link.getLldpPortIdSubType() && link.getLldpRemPortIdSubType() == sourceLink.getLldpPortIdSubType();

                if (bool1 && bool3) {
                    targetLink=link;
                    if (LOG.isDebugEnabled()) {
                        LOG.debug("getLldpLinks: lldp: {} target: {}", targetchassisId, link.printTopology());
                    }
                    break;
                }
            }

            if (targetLink == null) {
                LOG.debug("getLldpLinks: cannot found target for source: '{}'", sourceLink.getId());
                continue;
            }
            parsed.add(sourceLink.getId());
            parsed.add(targetLink.getId());
            LinkdVertex source = nodeVertexMap.get(sourceLink.getNode().getId());
            LinkdVertex target = nodeVertexMap.get(targetLink.getNode().getId());
            OnmsSnmpInterface sourceSnmpInterface = getSnmpInterface(sourceLink.getNode().getId(), sourceLink.getLldpPortIfindex());
            OnmsSnmpInterface targetSnmpInterface = getSnmpInterface(targetLink.getNode().getId(), targetLink.getLldpPortIfindex());
            connectVertices(getDefaultEdgeId(sourceLink.getId(), targetLink.getId()),
                            source,target,
                            sourceSnmpInterface,targetSnmpInterface,
                            sourceLink.getLldpPortDescr(),targetLink.getLldpPortDescr(),
                            ProtocolSupported.LLDP);

        }

    }

