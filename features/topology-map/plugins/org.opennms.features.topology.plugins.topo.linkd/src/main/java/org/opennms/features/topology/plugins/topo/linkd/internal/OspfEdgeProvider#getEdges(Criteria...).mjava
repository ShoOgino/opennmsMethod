    @Override
    public List<Edge> getEdges(Criteria... criteria) {
        List<OspfLink> allLinks =  getOspfLinkDao().findAll();
        Set<Edge> combinedLinks = new HashSet<Edge>();
        for(OspfLink sourceLink : allLinks) {

            for (OspfLink targetLink : allLinks) {
                boolean ipAddrCheck = sourceLink.getOspfRemIpAddr().equals(targetLink.getOspfIpAddr()) && targetLink.getOspfRemIpAddr().equals(sourceLink.getOspfIpAddr());
                if(ipAddrCheck) {
                    String id = "ospf::" + Math.min(sourceLink.getId(), targetLink.getId()) + "||" + Math.max(sourceLink.getId(), targetLink.getId());
                    Vertex source = new AbstractVertex(AbstractLinkdTopologyProvider.TOPOLOGY_NAMESPACE_LINKD, sourceLink.getNode().getNodeId(), sourceLink.getNode().getLabel());
                    Vertex target = new AbstractVertex(AbstractLinkdTopologyProvider.TOPOLOGY_NAMESPACE_LINKD, targetLink.getNode().getNodeId(), targetLink.getNode().getLabel());
                    Edge edge = new AbstractEdge(getEdgeNamespace(), id, source, target);
                    combinedLinks.add(edge);
                }
            }
        }
        return Arrays.asList(combinedLinks.toArray(new Edge[0]));
    }

