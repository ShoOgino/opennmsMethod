    private void loadEdges() {

        Timer.Context context = m_loadLldpLinksTimer.time();
        try{
            loadTopology(ProtocolSupported.LLDP);
            LOG.info("loadEdges: LldpLink loaded");
        } catch (Exception e){
            LOG.error("Loading LldpLink failed", e);
        } finally {
            context.stop();
        }

        context = m_loadOspfLinksTimer.time();
        try{
            loadTopology(ProtocolSupported.OSPF);
            LOG.info("loadEdges: OspfLink loaded");
        } catch (Exception e){
            LOG.error("Loading OspfLink failed", e);
        } finally {
            context.stop();
        }

        context = m_loadCdpLinksTimer.time();
        try{
            loadTopology(ProtocolSupported.CDP);
            LOG.info("loadEdges: CdpLink loaded");
        }  catch (Exception e){
            LOG.error("Loading CdpLink failed", e);
        } finally {
            context.stop();
        }

        context = m_loadIsisLinksTimer.time();
        try{
            loadTopology(ProtocolSupported.ISIS);
            LOG.info("loadEdges: IsIsLink loaded");
        } catch (Exception e){
            LOG.error("Exception getting IsIs link", e);
        } finally {
            context.stop();
        }

        context = m_loadBridgeLinksTimer.time();
        try{
            loadTopology(ProtocolSupported.BRIDGE);
            LOG.info("loadEdges: BridgeLink loaded");
        } catch (Exception e){
            LOG.error("Loading BridgeLink failed", e);
        } finally {
            context.stop();
        }

        context = m_loadUserDefinedLinksTimer.time();
        try{
            loadTopology(ProtocolSupported.USERDEFINED);
            LOG.info("loadEdges: User defined loaded");
        } catch (Exception e){
            LOG.error("Loading user defined link failed", e);
        } finally {
            context.stop();
        }
    }

