    private void processMultipleBridgeLinks(String bridgeLinkKey, Collection<BridgeMacTopologyLink> topoLinks) {
        String[] keyParts = bridgeLinkKey.split("\\|");

        int parentNodeId = Integer.parseInt(keyParts[0]);
        String bridgePort = keyParts[1];


        Vertex parentVertex = getVertex(getVertexNamespace(), Integer.toString(parentNodeId));
        if (parentVertex == null) {
            for (BridgeMacTopologyLink topoLink : topoLinks) {
                parentVertex = getDefaultVertex(topoLink.getSrcNodeId(),
                               topoLink.getSrcSysoid(),
                               topoLink.getSrcLabel(),
                             topoLink.getSrcLocation(),
                             topoLink.getSrcNodeType());
                addVertices(parentVertex);
                break;
            }
        }

        AbstractVertex cloudVertex = addVertex(bridgeLinkKey, 0, 0);
        cloudVertex.setLabel("");
        cloudVertex.setIconKey("cloud");
        cloudVertex.setTooltipText(parentVertex.getLabel() + " bridge port: " + bridgePort);

        for (BridgeMacTopologyLink link : topoLinks) {
            if(link.getTargetNodeId() != null) {
                //Check to see if there are any edges with the cloudVertex, if not add it
                if (getEdgeIdsForVertex(cloudVertex).length == 0) {
                    Edge edge = connectVertices(bridgeLinkKey, cloudVertex, parentVertex, BRIDGE_EDGE_NAMESPACE);
                    edge.setTooltipText(getBridgeCloudTooltip(parentVertex, bridgePort));
                }

                String edgeId = Math.min(link.getSrcNodeId(), link.getTargetNodeId()) + "|" + Math.max(link.getSrcNodeId(), link.getTargetNodeId());
                Vertex target = getVertex(getVertexNamespace(), link.getTargetNodeId().toString());
                if (target == null) {
                    target = getDefaultVertex(link.getTargetNodeId(),
                                       link.getTargetSysoid(),
                                       link.getTargetLabel(),
                                     link.getTargetLocation(),
                                     link.getTargetNodeType());
                    addVertices(target);
                }
                AbstractEdge edge = connectVertices(edgeId, cloudVertex, target, BRIDGE_EDGE_NAMESPACE);


                //Creating just for tooltip text,
                AbstractVertex tooltipCloudVertex = new SimpleLeafVertex(TOPOLOGY_NAMESPACE_LINKD, null, 0,0);
                tooltipCloudVertex.setLabel(parentVertex.getLabel() + " bridge port: " + bridgePort);
                tooltipCloudVertex.setIpAddress("");

                BridgeLinkDetail detail = new BridgeLinkDetail(edgeId, EnhancedLinkdTopologyProvider.TOPOLOGY_NAMESPACE_LINKD,
                        tooltipCloudVertex, link.getId(), target, link.getId());

                edge.setTooltipText(getEdgeTooltipText(detail));
            }

        }



    }

