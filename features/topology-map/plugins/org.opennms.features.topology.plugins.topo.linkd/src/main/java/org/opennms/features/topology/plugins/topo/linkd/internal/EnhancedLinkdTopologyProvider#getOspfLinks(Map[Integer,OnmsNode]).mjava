    private void getOspfLinks(Map<Integer, OnmsNode> nodemap) {
        List<OspfLink> allLinks =  getOspfLinkDao().findAll();
        Set<OspfLinkDetail> combinedLinkDetails = new HashSet<OspfLinkDetail>();
        Set<Integer> parsed = new HashSet<Integer>();
        for(OspfLink sourceLink : allLinks) {
            if (parsed.contains(sourceLink.getId())) {
                LOG.debug("loadtopology: ospf link with id '{]' already parsed, skipping", sourceLink.getId());
                continue;
            }
            OnmsNode sourcenode = nodemap.get(sourceLink.getNode().getId());
            Vertex source = getVertex(getVertexNamespace(),sourcenode.getNodeId());
            if (source == null) {
                source = getDefaultVertex(sourceLink.getNode().getId(), sourcenode.getSysObjectId(), sourcenode.getLabel(), 
                                          sourcenode.getSysLocation(), sourcenode.getType());
                addVertices(source);
            }
            for (OspfLink targetLink : allLinks) {
                if (parsed.contains(targetLink.getId())) {
                    LOG.debug("loadtopology: ospf link with id '{]' already parsed, skipping", sourceLink.getId());
                    continue;
                }
                if(sourceLink.getOspfRemIpAddr().equals(targetLink.getOspfIpAddr()) && targetLink.getOspfRemIpAddr().equals(sourceLink.getOspfIpAddr())) {
                    OnmsNode targetnode = nodemap.get(targetLink.getNode().getId());
                    Vertex target = getVertex(getVertexNamespace(),targetnode.getNodeId());
                                       if (target == null) {
                        target = getDefaultVertex(targetnode.getId(), targetnode.getSysObjectId(), targetnode.getLabel(), 
                                                  targetnode.getSysLocation(), targetnode.getType());
                        addVertices(target);
                    }
                    OspfLinkDetail linkDetail = new OspfLinkDetail(
                            Math.min(sourceLink.getId(), targetLink.getId()) + "|" + Math.max(sourceLink.getId(), targetLink.getId()),
                            source, sourceLink, target, targetLink);
                    combinedLinkDetails.add(linkDetail);
                    parsed.add(sourceLink.getId());
                    parsed.add(targetLink.getId());
                    break;
                }
            }
        }

        for (OspfLinkDetail linkDetail : combinedLinkDetails) {
            AbstractEdge edge = connectVertices(linkDetail.getId(), linkDetail.getSource(), linkDetail.getTarget(), OSPF_EDGE_NAMESPACE);
            edge.setTooltipText(getEdgeTooltipText(linkDetail));
        }
    }

