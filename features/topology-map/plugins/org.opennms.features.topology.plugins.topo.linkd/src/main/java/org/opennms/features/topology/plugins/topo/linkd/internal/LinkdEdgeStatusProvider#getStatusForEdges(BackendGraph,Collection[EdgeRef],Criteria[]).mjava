    @Override
    public Map<EdgeRef, Status> getStatusForEdges(BackendGraph graph, Collection<EdgeRef> edges, Criteria[] criteria) {
        Map<EdgeRef, Status> retVal = new LinkedHashMap<EdgeRef, Status>();
EDGES:        for (EdgeRef edgeRef : edges) {
                LinkdEdge edge = (LinkdEdge) graph.getEdge(edgeRef);
                for (OnmsAlarm alarm: getLinkdEdgeDownAlarms()) {
                    if (alarm.getNode().getId() == null)
                        continue;
                    if (alarm.getIfIndex() == null)
                        continue;
                    int alarmnodeid = alarm.getNode().getId().intValue();
                    if ( edge.getSourcePort().getVertex().getNodeID() != null 
                            && edge.getSourcePort().getVertex().getNodeID().intValue() == alarmnodeid
                            && edge.getSourcePort().getIfIndex() != null
                            && edge.getSourcePort().getIfIndex().intValue() == alarm.getIfIndex().intValue()) {
                        retVal.put(edgeRef, new LinkdEdgeStatus(alarm));
                        continue EDGES;
                    }
                    if ( edge.getTargetPort().getVertex().getNodeID() != null 
                            && edge.getTargetPort().getVertex().getNodeID().intValue() == alarmnodeid
                            && edge.getTargetPort().getIfIndex() != null
                            && edge.getTargetPort().getIfIndex().intValue() == alarm.getIfIndex().intValue()) {
                        retVal.put(edgeRef, new LinkdEdgeStatus(alarm));
                        continue EDGES;
                    }                
              }
              retVal.put(edgeRef, new LinkdEdgeStatus("up"));
        }
        return retVal;
    }

