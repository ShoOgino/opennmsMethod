    /**
     * Gets the node ids from the given vertices. A node id can only be extracted from a vertex with a "nodes"' namespace.
     * For a vertex with namespace "node" the "getId()" method always returns the node id.
     *
     * @param vertices
     * @return
     */
    private List<Integer> extractNodeIds(Collection<VertexRef> vertices) {
        List<Integer> nodeIdList = new ArrayList<Integer>();
        for (VertexRef eachRef : vertices) {
            if ("nodes".equals(eachRef.getNamespace())) {
                try {
                    nodeIdList.add(Integer.valueOf(eachRef.getId()));
                } catch (NumberFormatException e) {
                    LoggerFactory.getLogger(this.getClass()).warn("Cannot filter nodes with ID: {}", eachRef.getId());
                }
            } else if( ((Vertex)eachRef).isGroup() && "category".equals(eachRef.getNamespace()) ){
                try{
                    GroupRef group = (GroupRef) eachRef;
                    nodeIdList.addAll(Collections2.transform(group.getChildren(), new Function<VertexRef, Integer>(){
                        @Override
                        public Integer apply(VertexRef input) {
                            return Integer.valueOf(input.getId());
                        }
                    }));
                } catch (ClassCastException e){
                    LoggerFactory.getLogger(this.getClass()).warn("Cannot filter category with ID: {} children: {}", eachRef.getId(), ((GroupRef) eachRef).getChildren());

                }
            }
        }
        return nodeIdList;
    }

