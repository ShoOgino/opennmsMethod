	@Test
	public void testWrite() {
		term.write("\u001b[r"); //enables scrolling of entire screen
		term.write("\u001b[T"); //scrolls screen down 1 line
		term.write("\u001b[S"); //scrolls screen up 1 line
		term.write("" + (char)10); //writing a newline char
		term.write("" + (char)13); //writing a carriage return
		term.write("\u001b[20h"); //on newline-mode
		term.write("" + (char)10); //writing a newline char
		term.write("" + (char)13); //writing a carriage return
		term.write("" + 'a'); //writing a normal char
		term.write("\u001b[" + (char)24); //writing parse-reset sequence
		term.write("\u001b[" + (char)25); //checking non-existent sequence between 24 and 26
		term.write("\u001b[" + (char)26); //writing parse-reset sequence
		term.write("\u001b[?3h"); //132 char mode on
		term.write("\u001b[?3l"); //80 char mode on
		term.write("\u001b[?40h"); //insert mode on
		term.write("\u001b[?3h"); //132 char mode on while insert mode is on
		term.write("\u001b[?3l"); //80 char mode on while insert mode is on
		term.write("\u001b[4h"); //insert/replace mode on
		term.write("\u001b[?6h"); //origin mode on
		term.write("\u001b[?6l"); //origin mode off
		term.write("\u001b[?7h"); //auto-wrap mode on
		term.write("\u001b[?25h"); //text-cursor enabled
		term.write("\u001b[?47h"); //graphic rotated print mode on
		term.write("\u001b[?68h"); //keyboard usage on
		term.write("\u001b#8"); //fill screen with E
		term.write("" + (char)14); //shift out
		term.write("" + (char)15); //shift in
		assertTrue(term.write("\u001b[!p")); //test passes if the term writes all the above lines successfully
	}

