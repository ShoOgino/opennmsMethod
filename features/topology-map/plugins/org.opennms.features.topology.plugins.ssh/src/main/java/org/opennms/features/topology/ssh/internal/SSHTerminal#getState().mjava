	@Override
	protected SSHTerminalState getState() {
	    return (SSHTerminalState) super.getState();
	}
	/** Paint (serialize) the component for the client. */
//	@Override
//	public synchronized void paintContent(PaintTarget target) throws PaintException {
//		// Superclass writes any common attributes in the paint target.
//		super.paintContent(target);
//
//		target.addVariable(this, "fromSSH", dumpContents);
//		target.addVariable(this, "update", forceUpdate);
//		target.addVariable(this, "focus", focus);
//		target.addVariable(this, "closeClient", closeClient);
//		forceUpdate = false;
//	}
//
//	/** Deserialize changes received from client. */
//	@Override
//	public synchronized void changeVariables(Object source, Map<String,Object> variables) {
//		if (variables.containsKey("isClosed")) {
//			isClosed = ((Boolean)variables.get("isClosed"));
//			if (isClosed){
//				channel.close(true);
//				getApplication().getMainWindow().removeWindow(sshWindow);
//				requestRepaint();
//			}
//		}
//		if (variables.containsKey("toSSH") && !isReadOnly()) {
//			final String bytesToSSH = (String) variables.get("toSSH");
//			try {
//				dumpContents = st.handle(bytesToSSH, true);
//				requestRepaint();
//			} catch (IOException e) { e.printStackTrace(); }
//		}
//		if (variables.containsKey("isFocused")) {
//			boolean isFocused = ((Boolean)variables.get("isFocused"));
//			focus = !isFocused;
//		}
//	}

