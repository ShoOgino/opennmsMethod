    @Override
    public void buttonClick(ClickEvent event) {
        String login = usernameField.getValue();
        String password = (String)passwordField.getValue();
        boolean validInput = false;
        try { 
            if (showOptions) {
                validInput = validateInput();
                if (!validInput) {
                    testString = "Port must be between 1 and 65535";
                    Notification.show("Port must be between 1 and 65535", Notification.Type.WARNING_MESSAGE);
                }
            } else validInput = true;
        } catch (NumberFormatException e) {
            testString = "Port must be an integer";
            Notification.show("Port must be an integer", Notification.Type.WARNING_MESSAGE);
        }
        if (validInput) {
            try {
                session = client.connect(m_host, m_port).await().getSession();

                int ret = ClientSession.WAIT_AUTH;
                if (session != null){
                    while ((ret & ClientSession.WAIT_AUTH) != 0) {
                        session.authPassword(login, password);
                        ret = session.waitFor(ClientSession.WAIT_AUTH | ClientSession.CLOSED | ClientSession.AUTHED, 0);
                    }
                    if ((ret & ClientSession.CLOSED) != 0) {
                        testString = "Failed to log in";
                        Notification.show("Failed to log in", Notification.Type.WARNING_MESSAGE);
                        return;
                    }
                    showSSHWindow();
                } 
            } catch (Exception e) {
                testString = "Failed to connect to host";
                Notification.show("Failed to connect to host", Notification.Type.WARNING_MESSAGE);
            }
        }
        
    }

