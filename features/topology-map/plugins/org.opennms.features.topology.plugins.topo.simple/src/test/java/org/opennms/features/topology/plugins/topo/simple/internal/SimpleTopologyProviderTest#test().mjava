	@Test
	public void test() {
		m_topologyProvider.resetContainer();

		assertTrue(m_topologyProvider.getVertices().size() == 0);

		Vertex vertexA = m_topologyProvider.addVertex(50, 100);
		assertTrue(m_topologyProvider.getVertices().size() == 1);
		//LoggerFactory.getLogger(this.getClass()).debug(m_topologyProvider.getVertices().get(0).toString());
		assertTrue(m_topologyProvider.containsVertexId(vertexA));
		assertTrue(m_topologyProvider.containsVertexId("v0"));
		assertFalse(m_topologyProvider.containsVertexId("v1"));
		VertexRef ref0 = new AbstractVertexRef(m_topologyProvider.getVertexNamespace(), "v0");
		VertexRef ref1 = new AbstractVertexRef(m_topologyProvider.getVertexNamespace(), "v1");
		assertTrue(m_topologyProvider.getVertices(Arrays.asList(new VertexRef[] {ref0})).size() == 1);
		assertTrue(m_topologyProvider.getVertices(Arrays.asList(new VertexRef[] {ref1})).size() == 0);

		Vertex vertexB = m_topologyProvider.addVertex(100, 50);
		assertTrue(m_topologyProvider.containsVertexId(vertexB));
		assertTrue(m_topologyProvider.containsVertexId("v1"));
		assertTrue(m_topologyProvider.getVertices(Arrays.asList(new VertexRef[] {ref1})).size() == 1);

		Vertex vertexC = m_topologyProvider.addVertex(100, 150);
		Vertex vertexD = m_topologyProvider.addVertex(150, 100);
		Vertex vertexE = m_topologyProvider.addVertex(200, 200);
		assertTrue(m_topologyProvider.getVertices().size() == 5);

		Vertex group1 = m_topologyProvider.addGroup("Group 1", Constants.GROUP_ICON_KEY);
		Vertex group2 = m_topologyProvider.addGroup("Group 2", Constants.GROUP_ICON_KEY);
		assertTrue(m_topologyProvider.getVertices().size() == 7);

		m_topologyProvider.setParent(vertexA, group1);
		m_topologyProvider.setParent(vertexB, group1);
		m_topologyProvider.setParent(vertexC, group2);
		m_topologyProvider.setParent(vertexD, group2);
		
		m_topologyProvider.connectVertices(vertexA, vertexB);
		m_topologyProvider.connectVertices(vertexA, vertexC);
		m_topologyProvider.connectVertices(vertexB, vertexC);
		m_topologyProvider.connectVertices(vertexB, vertexD);
		m_topologyProvider.connectVertices(vertexC, vertexD);
		m_topologyProvider.connectVertices(vertexA, vertexE);
		m_topologyProvider.connectVertices(vertexD, vertexE);
		
		m_topologyProvider.save("target/test-classes/test-graph.xml");
		
		m_topologyProvider.load("target/test-classes/test-graph.xml");
		
	}

