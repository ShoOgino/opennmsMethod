	private void load() {
		List<OnmsNode> nodes = nodeDao.findAll();

		this.sparseGraph = new DirectedSparseGraph();

		// Add vertices and edges to graph
		int edgeID = 0;
		for (OnmsNode node : nodes) {
			PathOutageVertex vertexChild = new PathOutageVertex(node);
			if (node.getParent() == null) {
				this.sparseGraph.addVertex(vertexChild);
			} else {
				PathOutageVertex vertexParent = new PathOutageVertex(node.getParent());
				vertexChild.setParent(vertexParent);
				this.sparseGraph.addVertex(vertexChild);
				this.sparseGraph.addVertex(vertexParent);
				this.sparseGraph.addEdge(new AbstractEdge(NAMESPACE, String.valueOf(edgeID), vertexParent, vertexChild),
						vertexParent, vertexChild, EdgeType.DIRECTED);
				edgeID++;
			}
		}

		// Index vertices, store indexed vertices in a separate list
		List<PathOutageVertex> tempVertices = new ArrayList<>();
		for (PathOutageVertex vertex : this.sparseGraph.getVertices()) {
			Collection<PathOutageVertex> predecessors = this.sparseGraph.getPredecessors(vertex);
			if (predecessors.isEmpty()) {
				vertex.setLevel(0);
				tempVertices.add(vertex);
				tempVertices.addAll(setLevel(this.sparseGraph, vertex, 1));
			}
		}

		// Initialize vertices and edges of a base topology provider
		graph.resetContainer();
		for (PathOutageVertex customVertex : tempVertices) {
			graph.addVertices(customVertex);
		}

		for (AbstractEdge abstractEdge : this.sparseGraph.getEdges()) {
			graph.addEdges(abstractEdge);
		}
	}

