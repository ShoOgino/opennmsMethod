	/**
	 * This factory works by using {@link NCSServiceCriteria} to construct edges based on
	 * connecting all of the ServiceElements that make up a Service to each other.
	 * 
	 * @param criteria An {@link NCSServiceCriteria} object
	 */
	@Override
	public List<? extends Edge> getEdges(Criteria criteria) {
		List<NCSEdge> retval = new ArrayList<NCSEdge>();
		NCSServiceCriteria crit = (NCSServiceCriteria)criteria;
		for (Long id : crit) {
			NCSComponent service = m_dao.get(id);
			if (service == null) {
				LoggerFactory.getLogger(this.getClass()).warn("NCSComponent not found for ID {}", id);
			} else {
				NCSComponent[] subs = service.getSubcomponents().toArray(new NCSComponent[0]);
				// Connect all of the ServiceElements to one another
				for (int i = 0; i < subs.length; i++) {
					for (int j = i + 1; j < subs.length; j++) {
						String foreignSource = null, foreignId = null;
						OnmsNode sourceNode = null, targetNode = null;
						NodeIdentification ident = subs[i].getNodeIdentification();
						if (ident != null) {
							foreignSource = ident.getForeignSource();
							foreignId = ident.getForeignId();
							sourceNode = m_nodeDao.findByForeignId(foreignSource, foreignId);
							if (sourceNode == null) {
								continue;
							}
						}
						ident = subs[j].getNodeIdentification();
						if (ident != null) {
							foreignSource = ident.getForeignSource();
							foreignId = ident.getForeignId();
							targetNode = m_nodeDao.findByForeignId(foreignSource, foreignId);
							if (targetNode == null) {
								continue;
							}
						}
						retval.add(new NCSEdge(service.getName(), new NCSVertex(String.valueOf(sourceNode.getId())), new NCSVertex(String.valueOf(targetNode.getId()))));
					}
				}
			}
		}
		return retval;
	}

