    @Override
    public Undoer execute(List<VertexRef> targets, final OperationContext operationContext) {
        //Get the current NCS criteria from here you can get the foreignIds foreignSource and deviceA and Z
        final NCSServiceCriteria criteria = (NCSServiceCriteria) operationContext.getGraphContainer().getCriteria(m_ncsEdgeProvider.getEdgeNamespace());
        if(criteria.size() > 0) {
            m_storedCriteria = criteria;
        }
        
        
        final VertexRef defaultVertRef = targets.get(0);
        final SelectionManager selectionManager = operationContext.getGraphContainer().getSelectionManager();
        final Collection<VertexRef> vertexRefs = selectionManager.getSelectedVertexRefs();
        
        final Window mainWindow = operationContext.getMainWindow();
        
        final Window ncsPathPrompt = new Window("Show NCS Path");
        ncsPathPrompt.setModal(true);
        ncsPathPrompt.setResizable(false);
        ncsPathPrompt.setWidth("300px");
        ncsPathPrompt.setHeight("220px");
        
        //Items used in form field
        final PropertysetItem item = new PropertysetItem();
        item.addItemProperty("Device A", new ObjectProperty<String>("", String.class));
        item.addItemProperty("Device Z", new ObjectProperty<String>("", String.class));
        
        
        FormFieldFactory fieldFactory = new FormFieldFactory() {
            private static final long serialVersionUID = 1L;

            @Override
            public Field createField(Item item, Object propertyId, Component uiContext) {
                String pid = (String) propertyId;

                Select select = new Select();
                for(VertexRef vertRef : vertexRefs) {
                    select.addItem(vertRef.getId());
                    select.setItemCaption(vertRef.getId(), vertRef.getLabel());
                }
                select.setNewItemsAllowed(false);
                select.setNullSelectionAllowed(false);
                select.setImmediate(true);
                select.setScrollToSelectedItem(true);
                
                if("Device A".equals(pid)) {
                    select.setCaption("Device A");
                } else {
                    select.setCaption("Device Z");
                    
                }
                
                return select;
            }
            
        };
        
        final Form promptForm = new Form() {

            @Override
            public void commit() {
                String deviceA = (String)getField("Device A").getValue();
                String deviceZ = (String)getField("Device Z").getValue();
                
                OnmsNode nodeA = m_nodeDao.get(Integer.valueOf(deviceA));
                String deviceANodeForeignId = nodeA.getForeignId();
                //Use nodeA's foreignSource, deviceZ should have the same foreignSource. It's an assumption
                // which might need to changed in the future. Didn't want to hard code it it "space" if they
                // change it in the future
                String nodeForeignSource = nodeA.getForeignSource();
                
                String deviceZNodeForeignId = m_nodeDao.get(Integer.valueOf(deviceZ)).getForeignId();
                
                NCSComponent ncsComponent = m_dao.get(m_storedCriteria.get(0));
                String foreignSource = ncsComponent.getForeignSource();
                String foreignId = ncsComponent.getForeignId();
                try {
                    NCSServicePath path = getNcsPathProvider().getPath(foreignId, foreignSource, deviceANodeForeignId, deviceZNodeForeignId, nodeForeignSource);
                    
                    operationContext.getGraphContainer().setCriteria(NCSEdgeProvider.createCriteria(Collections.<Long>emptyList()));
                    operationContext.getGraphContainer().setCriteria(new NCSServicePathCriteria(path.getEdges()));
                    
                    //Select only the vertices in the path
                    selectionManager.setSelectedVertexRefs(path.getVertices());
                    
                } catch (Exception e) {
                    LoggerFactory.getLogger(this.getClass()).warn("Exception Occurred while retreiving path {}", e);
                    mainWindow.showNotification("An error occurred while calculating the path please check the karaf.log file for the exception: \n" + e.getMessage(), Notification.TYPE_ERROR_MESSAGE);
                }
            }
            
        };
        
        promptForm.setWriteThrough(false);
        promptForm.setFormFieldFactory(fieldFactory);
        promptForm.setItemDataSource(item);
        
        Button ok = new Button("OK");
        ok.addListener(new ClickListener() {

            private static final long serialVersionUID = -2742886456007926688L;

            @Override
            public void buttonClick(ClickEvent event) {
                promptForm.commit();
                mainWindow.removeWindow(ncsPathPrompt);
            }
            
        });
        promptForm.getFooter().addComponent(ok);
        
        Button cancel = new Button("Cancel");
        cancel.addListener(new ClickListener(){
            private static final long serialVersionUID = -9026067481179449095L;

            @Override
            public void buttonClick(ClickEvent event) {
                mainWindow.removeWindow(ncsPathPrompt);
            }
            
        });
        promptForm.getFooter().addComponent(cancel);
        ncsPathPrompt.addComponent(promptForm);
        mainWindow.addWindow(ncsPathPrompt);
        promptForm.getField("Device A").setValue(defaultVertRef.getId());
        return null;
    }

