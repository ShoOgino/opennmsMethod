    @Override
    public Undoer execute(List<VertexRef> targets, OperationContext operationContext) {
    	
    	TopologyProvider topologyProvider = operationContext.getGraphContainer().getDataSource();
    	
		Map<Object, WrappedVertex> idMap = new HashMap<Object, WrappedVertex>();
		
		// first create all the vertices;
		List<WrappedVertex> vertices = new ArrayList<WrappedVertex>();
		for(Object vertexId : topologyProvider.getVertexIds()) {
			WrappedVertex wrappedVertex = WrappedVertex.create(topologyProvider.getVertexContainer().getItem(vertexId));
			vertices.add(wrappedVertex);
			idMap.put(vertexId, wrappedVertex);
		}
		
		// then set the parents for each
		for(Object vertexId : topologyProvider.getVertexIds()) {
			Object parentId = topologyProvider.getVertexContainer().getParent(vertexId);
			WrappedVertex vertex = idMap.get(vertexId);
			WrappedVertex parent = idMap.get(parentId);
			
			vertex.setParent((WrappedGroup)parent);
		}
		
		// then create the edges
		List<WrappedEdge> edges = new ArrayList<WrappedEdge>();
		for(Object edgeId : topologyProvider.getEdgeIds()) {
			
			Collection<?> vertexIds = topologyProvider.getEndPointIdsForEdge(edgeId);
			
			Iterator<?> it = vertexIds.iterator();
			
			Object sourceId = it.next();
			Object targetId = it.next();
			
			WrappedVertex source = idMap.get(sourceId);
			WrappedVertex target = idMap.get(targetId);
			
			edges.add(new WrappedEdge(topologyProvider.getEdgeContainer().getItem(edgeId), source, target));
			

		}
		
		WrappedGraph graph = new WrappedGraph(topologyProvider.getNamespace(), vertices, edges);
		
        JAXB.marshal(graph, new File("/tmp/saved-graph.xml"));

		
		return null;
    }

