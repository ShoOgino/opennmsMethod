  boolean decrypt_dss(){
    try{
      byte[] plain;
      if(encrypted){
	if(keytype==OPENSSH){
	  cipher.init(Cipher.DECRYPT_MODE, key, iv);
	  plain=new byte[encoded_data.length];
	  cipher.update(encoded_data, 0, encoded_data.length, plain, 0);
/*
for(int i=0; i<plain.length; i++){
System.err.print(Integer.toHexString(plain[i]&0xff)+":");
}
System.err.println("");
*/
	}
	else if(keytype==FSECURE){
	  for(int i=0; i<iv.length; i++)iv[i]=0;
	  cipher.init(Cipher.DECRYPT_MODE, key, iv);
	  plain=new byte[encoded_data.length];
	  cipher.update(encoded_data, 0, encoded_data.length, plain, 0);
	}
	else{
	  return false;
	}
      }
      else{
	if(P_array!=null) return true;
	plain=encoded_data;
      }

      if(keytype==FSECURE){              // FSecure   
	Buffer buf=new Buffer(plain);
        int foo=buf.getInt();
        if(plain.length!=foo+4){
          return false;
        }
	P_array=buf.getMPIntBits();
        G_array=buf.getMPIntBits();
	Q_array=buf.getMPIntBits();
	pub_array=buf.getMPIntBits();
	prv_array=buf.getMPIntBits();
        return true;
      }

      int index=0;
      int length=0;
      if(plain[index]!=0x30)return false;
      index++; // SEQUENCE
      length=plain[index++]&0xff;
      if((length&0x80)!=0){
        int foo=length&0x7f; length=0;
        while(foo-->0){ length=(length<<8)+(plain[index++]&0xff); }
      }
      if(plain[index]!=0x02)return false;
      index++; // INTEGER
      length=plain[index++]&0xff;
      if((length&0x80)!=0){
        int foo=length&0x7f; length=0;
        while(foo-->0){ length=(length<<8)+(plain[index++]&0xff); }
      }
      index+=length;

      index++;
      length=plain[index++]&0xff;
      if((length&0x80)!=0){
        int foo=length&0x7f; length=0;
        while(foo-->0){ length=(length<<8)+(plain[index++]&0xff); }
      }
      P_array=new byte[length];
      System.arraycopy(plain, index, P_array, 0, length);
      index+=length;

      index++;
      length=plain[index++]&0xff;
      if((length&0x80)!=0){
        int foo=length&0x7f; length=0;
        while(foo-->0){ length=(length<<8)+(plain[index++]&0xff); }
      }
      Q_array=new byte[length];
      System.arraycopy(plain, index, Q_array, 0, length);
      index+=length;

      index++;
      length=plain[index++]&0xff;
      if((length&0x80)!=0){
        int foo=length&0x7f; length=0;
        while(foo-->0){ length=(length<<8)+(plain[index++]&0xff); }
      }
      G_array=new byte[length];
      System.arraycopy(plain, index, G_array, 0, length);
      index+=length;

      index++;
      length=plain[index++]&0xff;
      if((length&0x80)!=0){
        int foo=length&0x7f; length=0;
        while(foo-->0){ length=(length<<8)+(plain[index++]&0xff); }
      }
      pub_array=new byte[length];
      System.arraycopy(plain, index, pub_array, 0, length);
      index+=length;

      index++;
      length=plain[index++]&0xff;
      if((length&0x80)!=0){
        int foo=length&0x7f; length=0;
        while(foo-->0){ length=(length<<8)+(plain[index++]&0xff); }
      }
      prv_array=new byte[length];
      System.arraycopy(plain, index, prv_array, 0, length);
      index+=length;
    }
    catch(Exception e){
      //System.err.println(e);
      //e.printStackTrace();
      return false;
    }
    return true;
  }

