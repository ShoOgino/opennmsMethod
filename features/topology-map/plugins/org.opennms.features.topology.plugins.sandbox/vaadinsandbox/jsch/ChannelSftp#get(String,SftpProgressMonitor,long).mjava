  public InputStream get(String src, final SftpProgressMonitor monitor, final long skip) throws SftpException{

    try{
      ((MyPipedInputStream)io_in).updateReadSide();

      src=remoteAbsolutePath(src);
      src=isUnique(src);

      byte[] srcb=Util.str2byte(src, fEncoding);

      SftpATTRS attr=_stat(srcb);
      if(monitor!=null){
        monitor.init(SftpProgressMonitor.GET, src, "??", attr.getSize());
      }

      sendOPENR(srcb);

      Header header=new Header();
      header=header(buf, header);
      int length=header.length;
      int type=header.type;

      fill(buf, length);

      if(type!=SSH_FXP_STATUS && type!=SSH_FXP_HANDLE){
	throw new SftpException(SSH_FX_FAILURE, "");
      }
      if(type==SSH_FXP_STATUS){
        int i=buf.getInt();
        throwStatusError(buf, i);
      }

      final byte[] handle=buf.getString();         // handle

      rq.init();

      java.io.InputStream in=new java.io.InputStream(){
           long offset=skip;
           boolean closed=false;
           int rest_length=0;
           byte[] _data=new byte[1];
           byte[] rest_byte=new byte[1024];
           Header header=new Header();
           int request_max=1;
           long request_offset=offset;

           public int read() throws java.io.IOException{
             if(closed)return -1;
             int i=read(_data, 0, 1);
             if (i==-1) { return -1; }
             else {
               return _data[0]&0xff;
             }
           }
           public int read(byte[] d) throws java.io.IOException{
             if(closed)return -1;
             return read(d, 0, d.length);
           }
           public int read(byte[] d, int s, int len) throws java.io.IOException{
             if(closed)return -1;
             if(d==null){throw new NullPointerException();}
             if(s<0 || len <0 || s+len>d.length){
               throw new IndexOutOfBoundsException();
             } 
             if(len==0){ return 0; }

             if(rest_length>0){
               int foo=rest_length;
               if(foo>len) foo=len;
               System.arraycopy(rest_byte, 0, d, s, foo);
               if(foo!=rest_length){
                 System.arraycopy(rest_byte, foo, 
                                  rest_byte, 0, rest_length-foo);
               }

               if(monitor!=null){
                 if(!monitor.count(foo)){
                   close();
                   return -1;
                 }
               }

               rest_length-=foo;
               return foo;
             }

             if(buf.buffer.length-13<len){
               len=buf.buffer.length-13;
             }
             if(server_version==0 && len>1024){
               len=1024; 
             }

             if(rq.count()==0) {
               int request_len = buf.buffer.length-13;
               if(server_version==0){ request_len=1024; }

               while(rq.count() < request_max){
                 try{
                   sendREAD(handle, request_offset, request_len, rq);
                 }
                 catch(Exception e){ throw new IOException("error"); }
                 request_offset += request_len;
               }
             }

             header=header(buf, header);
             rest_length=header.length;
             int type=header.type;
             int id=header.rid;

             RequestQueue.Request rr = rq.get(header.rid);

             if(type!=SSH_FXP_STATUS && type!=SSH_FXP_DATA){ 
               throw new IOException("error");
             }
             if(type==SSH_FXP_STATUS){
               fill(buf, rest_length);
               int i=buf.getInt();    
               rest_length=0;
               if(i==SSH_FX_EOF){
                 close();
                 return -1;
               }
               //throwStatusError(buf, i);
               throw new IOException("error");
             }

             buf.rewind();
             fill(buf.buffer, 0, 4);
             int length_of_data = buf.getInt(); rest_length-=4;

             /**
              Since sftp protocol version 6, "end-of-file" has been defined,
     
                byte   SSH_FXP_DATA
                uint32 request-id
                string data
                bool   end-of-file [optional]
     
              but some sftpd server will send such a field in the sftp protocol 3 ;-(
              */
             int optional_data = rest_length - length_of_data;

             offset += length_of_data;
             int foo = length_of_data;
             if(foo>0){
               int bar=foo;
               if(bar>len){
                 bar=len;
               }
               int i=io_in.read(d, s, bar);
               if(i<0){
                 return -1;
               }
               foo-=i;
               rest_length=foo;

               if(foo>0){
                 if(rest_byte.length<foo){
                   rest_byte=new byte[foo];
                 }
                 int _s=0;
                 int _len=foo;
                 int j;
                 while(_len>0){
                   j=io_in.read(rest_byte, _s, _len);
                   if(j<=0)break;
                   _s+=j;
                   _len-=j;
                 }
               }

               if(optional_data>0){
                 io_in.skip(optional_data);
               }

               if(length_of_data<rr.length){  //
                 rq.cancel(header, buf);
                 try {
                   sendREAD(handle,
                            rr.offset+length_of_data,
                            (int)(rr.length-length_of_data), rq);
                 }
                 catch(Exception e){ throw new IOException("error"); }
                 request_offset=rr.offset+rr.length;
               }

               if(request_max < rq.size()){
                 request_max++;
               }

               if(monitor!=null){
                 if(!monitor.count(i)){
                   close();
                   return -1;
                 }
               }

               return i;
             }
             return 0; // ??
           }
           public void close() throws IOException{
             if(closed)return;
             closed=true;
             if(monitor!=null)monitor.end();
             rq.cancel(header, buf);
             try{_sendCLOSE(handle, header);}
             catch(Exception e){throw new IOException("error");}
           }
         };
       return in;
     }
     catch(Exception e){
       if(e instanceof SftpException) throw (SftpException)e;
       if(e instanceof Throwable)
         throw new SftpException(SSH_FX_FAILURE, "", (Throwable)e);
       throw new SftpException(SSH_FX_FAILURE, "");
     }
   }

