  boolean decrypt_rsa(){
    byte[] p_array;
    byte[] q_array;
    byte[] dmp1_array;
    byte[] dmq1_array;
    byte[] iqmp_array;

    try{
      byte[] plain;
      if(encrypted){
	if(keytype==OPENSSH){
	  cipher.init(Cipher.DECRYPT_MODE, key, iv);
	  plain=new byte[encoded_data.length];
	  cipher.update(encoded_data, 0, encoded_data.length, plain, 0);
	}
	else if(keytype==FSECURE){
	  for(int i=0; i<iv.length; i++)iv[i]=0;
	  cipher.init(Cipher.DECRYPT_MODE, key, iv);
	  plain=new byte[encoded_data.length];
	  cipher.update(encoded_data, 0, encoded_data.length, plain, 0);
	}
	else{
	  return false;
	}
      }
      else{
	if(n_array!=null) return true;
	plain=encoded_data;
      }

      if(keytype==FSECURE){              // FSecure   
	Buffer buf=new Buffer(plain);
        int foo=buf.getInt();
        if(plain.length!=foo+4){
          return false;
        }
	e_array=buf.getMPIntBits();
        d_array=buf.getMPIntBits();
	n_array=buf.getMPIntBits();
	byte[] u_array=buf.getMPIntBits();
	p_array=buf.getMPIntBits();
	q_array=buf.getMPIntBits();
        return true;
      }

      int index=0;
      int length=0;

      if(plain[index]!=0x30)return false;
      index++; // SEQUENCE
      length=plain[index++]&0xff;
      if((length&0x80)!=0){
        int foo=length&0x7f; length=0;
        while(foo-->0){ length=(length<<8)+(plain[index++]&0xff); }
      }

      if(plain[index]!=0x02)return false;
      index++; // INTEGER
      length=plain[index++]&0xff;
      if((length&0x80)!=0){
        int foo=length&0x7f; length=0;
        while(foo-->0){ length=(length<<8)+(plain[index++]&0xff); }
      }
      index+=length;

//System.err.println("int: len="+length);
//System.err.print(Integer.toHexString(plain[index-1]&0xff)+":");
//System.err.println("");

      index++;
      length=plain[index++]&0xff;
      if((length&0x80)!=0){
        int foo=length&0x7f; length=0;
        while(foo-->0){ length=(length<<8)+(plain[index++]&0xff); }
      }
      n_array=new byte[length];
      System.arraycopy(plain, index, n_array, 0, length);
      index+=length;
/*
System.err.println("int: N len="+length);
for(int i=0; i<n_array.length; i++){
System.err.print(Integer.toHexString(n_array[i]&0xff)+":");
}
System.err.println("");
*/
      index++;
      length=plain[index++]&0xff;
      if((length&0x80)!=0){
        int foo=length&0x7f; length=0;
        while(foo-->0){ length=(length<<8)+(plain[index++]&0xff); }
      }
      e_array=new byte[length];
      System.arraycopy(plain, index, e_array, 0, length);
      index+=length;
/*
System.err.println("int: E len="+length);
for(int i=0; i<e_array.length; i++){
System.err.print(Integer.toHexString(e_array[i]&0xff)+":");
}
System.err.println("");
*/
      index++;
      length=plain[index++]&0xff;
      if((length&0x80)!=0){
        int foo=length&0x7f; length=0;
        while(foo-->0){ length=(length<<8)+(plain[index++]&0xff); }
      }
      d_array=new byte[length];
      System.arraycopy(plain, index, d_array, 0, length);
      index+=length;
/*
System.err.println("int: D len="+length);
for(int i=0; i<d_array.length; i++){
System.err.print(Integer.toHexString(d_array[i]&0xff)+":");
}
System.err.println("");
*/

      index++;
      length=plain[index++]&0xff;
      if((length&0x80)!=0){
        int foo=length&0x7f; length=0;
        while(foo-->0){ length=(length<<8)+(plain[index++]&0xff); }
      }
      p_array=new byte[length];
      System.arraycopy(plain, index, p_array, 0, length);
      index+=length;
/*
System.err.println("int: P len="+length);
for(int i=0; i<p_array.length; i++){
System.err.print(Integer.toHexString(p_array[i]&0xff)+":");
}
System.err.println("");
*/
      index++;
      length=plain[index++]&0xff;
      if((length&0x80)!=0){
        int foo=length&0x7f; length=0;
        while(foo-->0){ length=(length<<8)+(plain[index++]&0xff); }
      }
      q_array=new byte[length];
      System.arraycopy(plain, index, q_array, 0, length);
      index+=length;
/*
System.err.println("int: q len="+length);
for(int i=0; i<q_array.length; i++){
System.err.print(Integer.toHexString(q_array[i]&0xff)+":");
}
System.err.println("");
*/
      index++;
      length=plain[index++]&0xff;
      if((length&0x80)!=0){
        int foo=length&0x7f; length=0;
        while(foo-->0){ length=(length<<8)+(plain[index++]&0xff); }
      }
      dmp1_array=new byte[length];
      System.arraycopy(plain, index, dmp1_array, 0, length);
      index+=length;
/*
System.err.println("int: dmp1 len="+length);
for(int i=0; i<dmp1_array.length; i++){
System.err.print(Integer.toHexString(dmp1_array[i]&0xff)+":");
}
System.err.println("");
*/
      index++;
      length=plain[index++]&0xff;
      if((length&0x80)!=0){
        int foo=length&0x7f; length=0;
        while(foo-->0){ length=(length<<8)+(plain[index++]&0xff); }
      }
      dmq1_array=new byte[length];
      System.arraycopy(plain, index, dmq1_array, 0, length);
      index+=length;
/*
System.err.println("int: dmq1 len="+length);
for(int i=0; i<dmq1_array.length; i++){
System.err.print(Integer.toHexString(dmq1_array[i]&0xff)+":");
}
System.err.println("");
*/
      index++;
      length=plain[index++]&0xff;
      if((length&0x80)!=0){
        int foo=length&0x7f; length=0;
        while(foo-->0){ length=(length<<8)+(plain[index++]&0xff); }
      }
      iqmp_array=new byte[length];
      System.arraycopy(plain, index, iqmp_array, 0, length);
      index+=length;
/*
System.err.println("int: iqmp len="+length);
for(int i=0; i<iqmp_array.length; i++){
System.err.print(Integer.toHexString(iqmp_array[i]&0xff)+":");
}
System.err.println("");
*/
    }
    catch(Exception e){
      //System.err.println(e);
      return false;
    }
    return true;
  }

