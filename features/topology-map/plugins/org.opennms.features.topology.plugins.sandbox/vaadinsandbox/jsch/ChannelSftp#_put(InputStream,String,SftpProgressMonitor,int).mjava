  public void _put(InputStream src, String dst, 
                   SftpProgressMonitor monitor, int mode) throws SftpException{
    try{
      ((MyPipedInputStream)io_in).updateReadSide();

      byte[] dstb=Util.str2byte(dst, fEncoding);
      long skip=0;
      if(mode==RESUME || mode==APPEND){
	try{
	  SftpATTRS attr=_stat(dstb);
	  skip=attr.getSize();
	}
	catch(Exception eee){
	  //System.err.println(eee);
	}
      }
      if(mode==RESUME && skip>0){
	long skipped=src.skip(skip);
	if(skipped<skip){
	  throw new SftpException(SSH_FX_FAILURE, "failed to resume for "+dst);
	}
      }

      if(mode==OVERWRITE){ sendOPENW(dstb); }
      else{ sendOPENA(dstb); }

      Header header=new Header();
      header=header(buf, header);
      int length=header.length;
      int type=header.type;

      fill(buf, length);

      if(type!=SSH_FXP_STATUS && type!=SSH_FXP_HANDLE){
	throw new SftpException(SSH_FX_FAILURE, "invalid type="+type);
      }
      if(type==SSH_FXP_STATUS){
        int i=buf.getInt();
        throwStatusError(buf, i);
      }
      byte[] handle=buf.getString();         // handle
      byte[] data=null;

      boolean dontcopy=true;

      if(!dontcopy){  // This case will not work anymore.
        data=new byte[obuf.buffer.length
                      -(5+13+21+handle.length+Session.buffer_margin
                        )
        ];
      }

      long offset=0;
      if(mode==RESUME || mode==APPEND){
	offset+=skip;
      }

      int startid=seq;
      int ackcount=0;
      int _s=0;
      int _datalen=0;

      if(!dontcopy){  // This case will not work anymore.
        _datalen=data.length;
      }
      else{
        data=obuf.buffer;
        _s=5+13+21+handle.length;
        _datalen=obuf.buffer.length-_s-Session.buffer_margin;
      }

      int bulk_requests = rq.size();

      while(true){
        int nread=0;
        int count=0;
        int s=_s;
        int datalen=_datalen;

        do{
          nread=src.read(data, s, datalen);
          if(nread>0){
            s+=nread;
            datalen-=nread;
            count+=nread;
          }
        }
        while(datalen>0 && nread>0); 
        if(count<=0)break;

        int foo=count;
        while(foo>0){
          if((seq-1)==startid ||
             ((seq-startid)-ackcount)>=bulk_requests){
            while(((seq-startid)-ackcount)>=bulk_requests){
              if(this.rwsize>=foo) break;
              if(checkStatus(ackid, header)){
                int _ackid = ackid[0];
                if(startid>_ackid || _ackid>seq-1){
                  if(_ackid==seq){
                    System.err.println("ack error: startid="+startid+" seq="+seq+" _ackid="+_ackid);
                  } 
                  else{
                    throw new SftpException(SSH_FX_FAILURE, "ack error: startid="+startid+" seq="+seq+" _ackid="+_ackid);
                  }
                }
                ackcount++;
              }
              else{
                break;
              }
            }
          }
          foo-=sendWRITE(handle, offset, data, 0, foo);
        }
        offset+=count;
	if(monitor!=null && !monitor.count(count)){
          break;
	}
      }
      int _ackcount=seq-startid;
      while(_ackcount>ackcount){
        if(!checkStatus(null, header)){
          break;
        }
        ackcount++;
      }
      if(monitor!=null)monitor.end();
      _sendCLOSE(handle, header);
    }
    catch(Exception e){
      if(e instanceof SftpException) throw (SftpException)e;
      if(e instanceof Throwable)
        throw new SftpException(SSH_FX_FAILURE, e.toString(), (Throwable)e);
      throw new SftpException(SSH_FX_FAILURE, e.toString());
    }
  }

