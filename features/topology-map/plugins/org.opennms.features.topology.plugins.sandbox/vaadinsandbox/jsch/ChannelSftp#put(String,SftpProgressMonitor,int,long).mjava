  public OutputStream put(String dst, final SftpProgressMonitor monitor, final int mode, long offset) throws SftpException{
    try{
      ((MyPipedInputStream)io_in).updateReadSide();

      dst=remoteAbsolutePath(dst);
      dst=isUnique(dst);

      if(isRemoteDir(dst)){
	throw new SftpException(SSH_FX_FAILURE, dst+" is a directory");
      }

      byte[] dstb=Util.str2byte(dst, fEncoding);

      long skip=0;
      if(mode==RESUME || mode==APPEND){
	try{
	  SftpATTRS attr=_stat(dstb);
	  skip=attr.getSize();
	}
	catch(Exception eee){
	  //System.err.println(eee);
	}
      }

      if(mode==OVERWRITE){ sendOPENW(dstb); }
      else{ sendOPENA(dstb); }

      Header header=new Header();
      header=header(buf, header);
      int length=header.length;
      int type=header.type;

      fill(buf, length);

      if(type!=SSH_FXP_STATUS && type!=SSH_FXP_HANDLE){
	throw new SftpException(SSH_FX_FAILURE, "");
      }
      if(type==SSH_FXP_STATUS){
        int i=buf.getInt();
        throwStatusError(buf, i);
      }
      final byte[] handle=buf.getString();         // handle

      if(mode==RESUME || mode==APPEND){
	offset+=skip;
      }

      final long[] _offset=new long[1];
      _offset[0]=offset;
      OutputStream out = new OutputStream(){
        private boolean init=true;
        private boolean isClosed=false;
        private int[] ackid=new int[1];
        private int startid=0;
        private int _ackid=0;
        private int ackcount=0;
        private int writecount=0;
        private Header header=new Header();          

        public void write(byte[] d) throws java.io.IOException{
          write(d, 0, d.length);
        }

        public void write(byte[] d, int s, int len) throws java.io.IOException{
          if(init){
            startid=seq;
            _ackid=seq;
            init=false;
          }

          if(isClosed){
            throw new IOException("stream already closed");
          }

          try{
            int _len=len;
            while(_len>0){
              int sent=sendWRITE(handle, _offset[0], d, s, _len);
              writecount++;
              _offset[0]+=sent;
              s+=sent;
              _len-=sent;
              if((seq-1)==startid ||
                 io_in.available()>=1024){
                while(io_in.available()>0){
                  if(checkStatus(ackid, header)){
                    _ackid=ackid[0];
                    if(startid>_ackid || _ackid>seq-1){
                      throw new SftpException(SSH_FX_FAILURE, "");
                    }
                    ackcount++;
                  }
                  else{
                    break;
                  }
                }
              }
            }
    	    if(monitor!=null && !monitor.count(len)){
              close();
              throw new IOException("canceled");
	    }
          }
          catch(IOException e){ throw e; }
          catch(Exception e){ throw new IOException(e.toString());  }
        }

        byte[] _data=new byte[1];
        public void write(int foo) throws java.io.IOException{
          _data[0]=(byte)foo;
          write(_data, 0, 1);
        }

        public void flush() throws java.io.IOException{

          if(isClosed){
            throw new IOException("stream already closed");
          }

          if(!init){
            try{
              while(writecount>ackcount){
                if(!checkStatus(null, header)){
                  break;
                }
                ackcount++;
              }
            }
            catch(SftpException e){
              throw new IOException(e.toString());
            }
          }
        }

        public void close() throws java.io.IOException{
          if(isClosed){
            return;
          }
          flush();
          if(monitor!=null)monitor.end();
          try{ _sendCLOSE(handle, header); }
          catch(IOException e){ throw e; }
          catch(Exception e){
            throw new IOException(e.toString());
          }
          isClosed=true;
        }
      };
      return out;
    }
    catch(Exception e){
      if(e instanceof SftpException) throw (SftpException)e;
      if(e instanceof Throwable)
        throw new SftpException(SSH_FX_FAILURE, "", (Throwable)e);
      throw new SftpException(SSH_FX_FAILURE, "");
    }
  }

