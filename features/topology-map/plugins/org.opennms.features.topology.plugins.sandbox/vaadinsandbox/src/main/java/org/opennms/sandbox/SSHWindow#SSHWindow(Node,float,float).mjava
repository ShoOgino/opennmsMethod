    /**
     * The SSHWindow method constructs a sub-window instance that can be added to a main window
     * The sub-window contains a console component which uses an SSH client to access nodes
     * @param node Selected node
     * @param width Width of the main window
     * @param height Height of the main window
     */
	public SSHWindow(Node node, float width, float height) {
		
		/*Sets the browser and window size based on the main window size*/
        int browserWidth = (int)(sizePercentage * width), browserHeight = (int)(sizePercentage * height);
        int windowWidth = browserWidth + widthCushion, windowHeight = browserHeight + heightCushion;
        
        /*Sets the properties of the sub-window*/
        setCaption("SSH - " + node.getName());
        setImmediate(true);
        setResizable(false);
        setWidth("" + windowWidth + "px");
        setHeight("" + windowHeight + "px");
        setPositionX((int)((1.0 - windowWidth/width)/2.0 * width));
        setPositionY((int)((1.0 - windowHeight/height)/2.0 * height));
        
        /*Creates a console component and sets its properties*/
        Console console = new Console();
        console.setPs("}> ");
        console.setHeight("" + browserHeight + "px");
        console.setWidth("" + browserWidth + "px");
        console.setMaxBufferSize(20);
        console.setGreeting("Welcome to SSH Terminal that does nothing");
        console.reset();
        console.focus();
        
        Handler scriptHandler = new DefaultConsoleHandler() {
            private static final long serialVersionUID = -5733237166568671987L;

            @Override
            public void inputReceived(Console console, String lastInput) {

                // Check if there is registered command and use it by default
                int i = lastInput.indexOf(' ');
                String cmdName = lastInput.substring(0, i >= 0 ? i : lastInput.length());
                if (console.getCommand(cmdName) != null) {
                    super.inputReceived(console, lastInput);
                    return;
                }

                // Run the input in the engine
                try {
                    SSHWindow.doThatSSHThing(console, lastInput);
//                    Object r = engine.eval(lastInput);
                    { /*if (r != null) {*/
//                        console.print("" + r);
                    }
                } catch (Exception e) {
//                    console.print(e.getMessage());
                    e.printStackTrace();
                }
                console.prompt();
                return;
            }
        };

        console.setHandler(scriptHandler);
        
        /*Creates a layout and adds the console component to it*/
        VerticalLayout layout = new VerticalLayout();
        layout.addComponent(console);
        layout.setSizeFull();
        layout.setImmediate(true);
        
        addComponent(layout);
	}

