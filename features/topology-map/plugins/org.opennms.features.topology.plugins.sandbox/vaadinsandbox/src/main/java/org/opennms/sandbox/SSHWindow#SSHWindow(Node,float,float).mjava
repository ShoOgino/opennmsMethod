	/**
	 * The SSHWindow method constructs a sub-window instance that can be added to a main window
	 * The sub-window contains a console component which uses an SSH client to access nodes
	 * @param node Selected node
	 * @param width Width of the main window
	 * @param height Height of the main window
	 * @throws IOException 
	 */
	public SSHWindow(Node node, float width, float height) {

		/*Sets the browser and window size based on the main window size*/
		int browserWidth = (int)(sizePercentage * width), browserHeight = (int)(sizePercentage * height);
		int windowWidth = browserWidth + widthCushion, windowHeight = browserHeight + heightCushion;
		
		
		/*Sets the properties of the sub-window*/
		setCaption("SSH - " + node.getName());
		setImmediate(true);
		setResizable(false);
		setWidth("" + windowWidth + "px");
		setHeight("" + windowHeight + "px");
		setPositionX((int)((1.0 - windowWidth/width)/2.0 * width));
		setPositionY((int)((1.0 - windowHeight/height)/2.0 * height));
		
//		try {
//			m_sshOutputStream = new PipedOutputStream(){
//				
//				@Override
//				public void write(byte[] b, int off, int len){
//					doneWriting = false;
//					try {
//						super.write(b, off, len);
//					} catch (IOException e) {
//						e.printStackTrace();
//					}
//					doneWriting = true;
//				}
//			};
//			m_sshInputStream = new PipedInputStream(m_sshOutputStream);
//		} catch (IOException e1) {
//			e1.printStackTrace();
//		}
		
		HorizontalLayout loginForm = new HorizontalLayout();
		loginForm.setSpacing(true);
		loginForm.setMargin(false, false, true, false);
		Label usernameLabel = new Label("Username:   ");
		final TextField usernameTF = new TextField();
		Label passwordLabel = new Label("Password:   ");
		final PasswordField passwordField = new PasswordField();
		final Button loginButton = new Button("Login");
		loginButton.addListener(new ClickListener(){

			public void buttonClick(ClickEvent event) {
				if (event.getButton() == loginButton){
					username = (String)usernameTF.getValue();
					authorize((String)passwordField.getValue());
					if (!loginFlag){
						showNotification("Incorrect password, please try again.", Window.Notification.TYPE_WARNING_MESSAGE);
					}
				}
			}
			
		});
		loginForm.addComponent(usernameLabel);
		loginForm.addComponent(usernameTF);
		loginForm.addComponent(passwordLabel);
		loginForm.addComponent(passwordField);
		loginForm.addComponent(loginButton);
		
		/*Creates a console component and sets its properties*/

		console.setImmediate(true);
		console.setPs("}> ");
		console.setHeight("" + (browserHeight-50) + "px");
		console.setWidth("" + browserWidth + "px");
		console.setGreeting("Welcome to SSH Terminal that does nothing");
		console.prompt();
		console.reset();
		console.focus();

		Handler scriptHandler = new DefaultConsoleHandler() {
			private static final long serialVersionUID = -5733237166568671987L;

			@Override
			public void inputReceived(Console console, String lastInput) {

				try {
					lastInput += "\n";
					input.setBuffer(lastInput.getBytes());
				} catch (Exception e) {
					e.printStackTrace();
				}
				return;
			}
		};
		console.setHandler(scriptHandler);
		
		/*Creates a layout and adds the console component to it*/
		VerticalLayout layout = new VerticalLayout();
		layout.addComponent(loginForm);
		layout.addComponent(console);
		layout.setSizeFull();
		layout.setImmediate(true);

		addComponent(layout);
		initializeSession();
	}

