    private Optional<StatusProvider> buildStatusProvider(final GraphMLMetaTopologyProvider metaTopologyProvider,
                                                         final ScriptEngineManager scriptEngineManager,
                                                         final GraphMLTopologyProvider rawTopologyProvider) {
        switch (rawTopologyProvider.getVertexStatusProviderType()) {
            case NO_STATUS_PROVIDER:
                return Optional.empty();

            case DEFAULT_STATUS_PROVIDER:
                return Optional.of(new GraphMLDefaultVertexStatusProvider(
                        rawTopologyProvider.getVertexNamespace(),
                        (nodeIds) -> m_serviceAccessor.getAlarmDao().getNodeAlarmSummariesIncludeAcknowledgedOnes(nodeIds)));

            case SCRIPT_STATUS_PROVIDER:
                return Optional.of(new GraphMLScriptVertexStatusProvider(
                        rawTopologyProvider.getVertexNamespace(),
                        (nodeIds) -> m_serviceAccessor.getAlarmDao().getNodeAlarmSummariesIncludeAcknowledgedOnes(nodeIds),
                        scriptEngineManager,
                        m_serviceAccessor));

            case PROPAGATE_STATUS_PROVIDER:
                return Optional.of(new GraphMLPropagateVertexStatusProvider(
                        rawTopologyProvider.getVertexNamespace(),
                        metaTopologyProvider,
                        m_bundleContext));

            default:
                throw null;
        }
    }

