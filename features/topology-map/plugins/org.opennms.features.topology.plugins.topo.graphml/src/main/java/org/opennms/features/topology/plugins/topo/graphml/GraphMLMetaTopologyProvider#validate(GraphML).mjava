    private void validate(GraphML graphML) throws InvalidGraphException {
        final Set<String> graphIds = new HashSet<>();
        final Map<String, Set<String>> nodeIdsByNamespace = new HashMap<>();
        final Map<String, Set<String>> edgeIdsByNamespace = new HashMap<>();

        for (GraphMLGraph eachGraph : graphML.getGraphs()) {
            final String ns = eachGraph.getProperty(GraphMLProperties.NAMESPACE);
            if (Strings.isNullOrEmpty(ns)) {
                throw new InvalidGraphException("No namespace defined on graph with id " + eachGraph.getId());
            }

            if (graphIds.contains(eachGraph.getId())) {
                throw new InvalidGraphException("There already exists a graph with id " + eachGraph.getId());
            }
            graphIds.add(eachGraph.getId());

            for (GraphMLNode eachNode : eachGraph.getNodes()) {
                Set<String> nodeIdsInNs = nodeIdsByNamespace.get(ns);
                if (nodeIdsInNs == null) {
                    nodeIdsInNs = new HashSet<>();
                    nodeIdsByNamespace.put(ns, nodeIdsInNs);
                }

                if (nodeIdsInNs.contains(eachNode.getId())) {
                    throw new InvalidGraphException("There already exists a node with id " + eachNode.getId()
                        + " in namespace " + ns);
                }
                nodeIdsInNs.add(eachNode.getId());
            }

            for (GraphMLEdge eachEdge : eachGraph.getEdges()) {
                Set<String> edgeIdsInNs = edgeIdsByNamespace.get(ns);
                if (edgeIdsInNs == null) {
                    edgeIdsInNs = new HashSet<>();
                    edgeIdsByNamespace.put(ns, edgeIdsInNs);
                }

                if (edgeIdsInNs.contains(eachEdge.getId())) {
                    throw new InvalidGraphException("There already exists an edge with id " + eachEdge.getId()
                        + " in namespace " + ns);
                }
                edgeIdsInNs.add(eachEdge.getId());
            }
        }
    }

