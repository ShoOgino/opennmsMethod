    private S computeStatus(final List<StatusScript<S>> scripts,
                            final E element,
                            final Function<E, SimpleBindings> refBindingMapper) {
        return scripts.stream()
                      .flatMap(script -> {
                          final SimpleBindings bindings = refBindingMapper.apply(element);
                          final StringWriter writer = new StringWriter();
                          final ScriptContext context = new SimpleScriptContext();
                          context.setWriter(writer);
                          context.setBindings(bindings, ScriptContext.GLOBAL_SCOPE);
                          try {
                              LOG.debug("Executing script: {}", script);
                              final S status = script.eval(context);
                              if (status != null) {
                                  return Stream.of(status);
                              } else {
                                  return Stream.empty();
                              }
                          } catch (final ScriptException e) {
                              LOG.error("Failed to execute script: {}", e);
                              return Stream.empty();
                          } finally {
                              LOG.info(writer.toString());
                          }
                      })
                      .filter(Objects::nonNull)
                      .reduce(this.statusAccumulator)
                      .orElseGet(this.statusDefault);
    }

