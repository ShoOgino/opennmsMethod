    @Test
    public void testDefaultStatusProvider() throws InvalidGraphException {
        GraphML graphML = GraphMLReader.read(getClass().getResourceAsStream("/test-graph.xml"));
        GraphMLTopologyProvider topologyProvider = new GraphMLTopologyProvider(null, graphML.getGraphs().get(0), new GraphMLServiceAccessor());
        GraphMLDefaultVertexStatusProvider statusProvider = new GraphMLDefaultVertexStatusProvider(topologyProvider.getVertexNamespace(),
                                                                                                   this.alarmSummaryWrapper);

        List<VertexRef> vertices = topologyProvider.getVertices().stream().map(eachVertex -> (VertexRef) eachVertex).collect(Collectors.toList());
        Assert.assertEquals(4, vertices.size());
        Assert.assertEquals(topologyProvider.getVertexNamespace(), statusProvider.getNamespace());
        Assert.assertTrue(statusProvider.contributesTo(topologyProvider.getVertexNamespace()));

        Map<? extends VertexRef, ? extends Status> statusForVertices = statusProvider.getStatusForVertices(topologyProvider, vertices, new Criteria[0]);
        Assert.assertEquals(4, statusForVertices.size());
        Assert.assertEquals(ImmutableMap.of(
                createVertexRef(topologyProvider.getVertexNamespace(), "north"), createStatus(OnmsSeverity.WARNING, 1),
                createVertexRef(topologyProvider.getVertexNamespace(), "west"), createStatus(OnmsSeverity.MINOR, 2),
                createVertexRef(topologyProvider.getVertexNamespace(), "south"), createStatus(OnmsSeverity.MAJOR, 3),
                createVertexRef(topologyProvider.getVertexNamespace(), "east"), createStatus(OnmsSeverity.NORMAL, 0)), statusForVertices);
    }

