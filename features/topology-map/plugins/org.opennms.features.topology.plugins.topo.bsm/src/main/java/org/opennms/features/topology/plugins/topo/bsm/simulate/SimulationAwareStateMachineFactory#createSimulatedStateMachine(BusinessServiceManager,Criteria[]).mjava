    public static BusinessServiceStateMachine createSimulatedStateMachine(BusinessServiceManager manager, Criteria[] criteria) {
        // Gather the statuses and group them by reduction key
        final Map<String, Status> statusByReductionKey = Arrays.stream(criteria)
                .filter(c -> c instanceof SetStatusToCriteria)
                .map(c -> (SetStatusToCriteria)c)
                .filter(c -> c.getStatus() != null)
                .collect(Collectors.toMap(SetStatusToCriteria::getReductionKey,
                        SetStatusToCriteria::getStatus));

        // Determine whether or not we should inherit the existing state
        final boolean shouldInheritState = Arrays.stream(criteria).anyMatch(c -> c instanceof InheritStateCriteria);

        // Grab a copy of the state machine, and update push alarms
        // that reflect the simulated state of the reduction keys
        final BusinessServiceStateMachine stateMachine = manager.getStateMachine().clone(shouldInheritState);
        for (Entry<String, Status> entry : statusByReductionKey.entrySet()) {
            stateMachine.handleNewOrUpdatedAlarm(new AlarmWrapper() {
                @Override
                public String getReductionKey() {
                    return entry.getKey();
                }

                @Override
                public Status getStatus() {
                    return entry.getValue();
                }
            });
        }

        return stateMachine;
    }

