    @Override
    public void execute(List<VertexRef> targets, OperationContext operationContext) {
        List<AbstractBusinessServiceVertex> vertices = getVertices(targets);

        Set<GraphVertex> graphVerticesToFocus = Sets.newHashSet();
        for (AbstractBusinessServiceVertex vertex : vertices) {
            vertex.accept(new BusinessServiceVertexVisitor() {
                @Override
                public void visit(BusinessServiceVertex vertex) {
                    BusinessService businessService = businessServiceManager.getBusinessServiceById(vertex.getServiceId());
                    graphVerticesToFocus.addAll(businessServiceStateMachine.calculateImpact(businessService));
                }

                @Override
                public void visit(IpServiceVertex vertex) {
                    IpService ipService = businessServiceManager.getIpServiceById(vertex.getIpServiceId());
                    graphVerticesToFocus.addAll(businessServiceStateMachine.calculateImpact(ipService));
                }

                @Override
                public void visit(ReductionKeyVertex vertex) {
                    graphVerticesToFocus.addAll(businessServiceStateMachine.calculateImpact(vertex.getReductionKey()));
                }
            });
        }
        LOG.info("Found {} business services impacted.", graphVerticesToFocus.size());

        if (graphVerticesToFocus.isEmpty()) {
            new InfoDialog("No result", "No vertices are impacted by the selected vertices.").open();
        } else {
            // add to focus
            GraphContainer container = operationContext.getGraphContainer();
            container.clearCriteria();
            graphVerticesToFocus.forEach(graphVertex -> container.addCriteria(
                    new VertexHopGraphProvider.DefaultVertexHopCriteria(createTopologyVertex(graphVertex))));
            // add the context vertex because it is missing in the root cause result
            container.addCriteria(new VertexHopGraphProvider.DefaultVertexHopCriteria(targets.get(0)));
            container.setSemanticZoomLevel(0);
            container.redoLayout();
        }
    }

