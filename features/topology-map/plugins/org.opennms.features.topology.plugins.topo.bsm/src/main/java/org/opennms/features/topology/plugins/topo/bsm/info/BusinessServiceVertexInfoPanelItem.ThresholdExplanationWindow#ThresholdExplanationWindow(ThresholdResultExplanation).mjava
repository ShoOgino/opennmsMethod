        private ThresholdExplanationWindow(final ThresholdResultExplanation explanation) {
            setCaption(String.format("Threshold Function Details (%s)", explanation.getFunction().getThreshold()));
            setClosable(true);
            setCloseShortcut(ShortcutAction.KeyCode.ESCAPE);
            setResizable(true);
            setModal(true);
            setWidth(1000, Sizeable.Unit.PIXELS);
            setHeight(200, Unit.PIXELS);
            addStyleName("threshold");
            addStyleName("severity");


            final Table table = new Table();

            // Highlight the selected column
            table.setCellStyleGenerator((Table.CellStyleGenerator) (source, itemId, propertyId) -> {
                if (propertyId != null && propertyId.equals(explanation.getStatus())) {
                    return "selected";
                }
                return null;
            });

            // set header
            table.addContainerProperty(EDGE_COLUMN, String.class, null);
            table.addContainerProperty(STATUS_COLUMN, Label.class, null);
            table.addContainerProperty(WEIGHT_COLUMN, Integer.class, Edge.DEFAULT_WEIGHT);
            table.addContainerProperty(WEIGHT_FACTOR, String.class, null);
            table.addContainerProperty(Status.CRITICAL, String.class, null);
            table.addContainerProperty(Status.MAJOR, String.class, null);
            table.addContainerProperty(Status.MINOR, String.class, null);
            table.addContainerProperty(Status.WARNING, String.class, null);
            table.addContainerProperty(Status.NORMAL, String.class, null);

            // Sort by worst severity, then by name
            List<GraphEdge> sortedGraphEdges = explanation.getGraphEdges().stream()
                    .sorted(
                            comparing(GraphEdge::getStatus)
                                    .reversed()
                                    .thenComparing(it -> getLabel(it, explanation)))
                    .collect(Collectors.toList());

            // draw table
            for (GraphEdge eachEdge : sortedGraphEdges) {
                table.addItem(new Object[] {
                        getLabel(eachEdge, explanation),
                        createStatusLabel(null, eachEdge.getStatus()),
                        eachEdge.getWeight(),
                        toString(explanation.getWeightFactor(eachEdge)),
                        toString(explanation.getStatusFactor(eachEdge, Status.CRITICAL)),
                        toString(explanation.getStatusFactor(eachEdge, Status.MAJOR)),
                        toString(explanation.getStatusFactor(eachEdge, Status.MINOR)),
                        toString(explanation.getStatusFactor(eachEdge, Status.WARNING)),
                        toString(explanation.getStatusFactor(eachEdge, Status.NORMAL)),
                }, eachEdge);
            }

            table.setFooterVisible(true);
            table.setColumnFooter(EDGE_COLUMN, "Total");
            table.setColumnFooter(STATUS_COLUMN, explanation.getStatus().getLabel());
            table.setColumnFooter(WEIGHT_COLUMN, String.valueOf(explanation.getWeightSum()));
            table.setColumnFooter(WEIGHT_FACTOR, toString(explanation.getWeightSumFactor()));
            table.setColumnFooter(Status.CRITICAL, toString(explanation.getStatusResult(Status.CRITICAL)));
            table.setColumnFooter(Status.MAJOR, toString(explanation.getStatusResult(Status.MAJOR)));
            table.setColumnFooter(Status.MINOR, toString(explanation.getStatusResult(Status.MINOR)));
            table.setColumnFooter(Status.WARNING, toString(explanation.getStatusResult(Status.WARNING)));
            table.setColumnFooter(Status.NORMAL, toString(explanation.getStatusResult(Status.NORMAL)));

            VerticalLayout root = new VerticalLayout();
            table.setSizeFull();
            root.addComponent(table);
            root.setExpandRatio(table, 1f);
            root.setSizeFull();

            setContent(root);
            center();
        }

