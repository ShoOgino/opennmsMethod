    @Override
    public Map<VertexRef, Status> getStatusForVertices(VertexProvider vertexProvider, Collection<VertexRef> vertices, Criteria[] criteria) {
        // filter out vertices from other providers
        final Collection<VertexRef> filteredVertices = Collections2.filter(vertices, new Predicate<VertexRef>() {
            @Override
            public boolean apply(VertexRef input) {
                return input instanceof AbstractBusinessServiceVertex && contributesTo(input.getNamespace());
            }
        });

        // cast to AbstractBusinessServiceVertex
        final Collection<AbstractBusinessServiceVertex> businessServiceVertices = Collections2.transform(filteredVertices, new Function<VertexRef, AbstractBusinessServiceVertex>() {
            @Override
            public AbstractBusinessServiceVertex apply(VertexRef input) {
                return (AbstractBusinessServiceVertex) input;
            }
        });

        final Map<VertexRef, Status> statusMap = new HashMap<>();
        for (AbstractBusinessServiceVertex eachVertex : businessServiceVertices) {
            final OnmsSeverity operationalStatus = getOperationalStatus(eachVertex);
            statusMap.put(eachVertex, new DefaultStatus(operationalStatus.getLabel(), 0));
        }
        return statusMap;
    }

