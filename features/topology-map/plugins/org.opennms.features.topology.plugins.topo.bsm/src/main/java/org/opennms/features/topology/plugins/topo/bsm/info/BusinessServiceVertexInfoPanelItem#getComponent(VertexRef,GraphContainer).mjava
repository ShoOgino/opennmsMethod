    @Override
    protected Component getComponent(VertexRef ref, GraphContainer container) {
        final FormLayout formLayout = new FormLayout();
        formLayout.setSpacing(false);
        formLayout.setMargin(false);

        ((AbstractBusinessServiceVertex) ref).accept(new BusinessServiceVertexVisitor<Void>() {
            @Override
            public Void visit(BusinessServiceVertex vertex) {
                final BusinessService businessService = businessServiceManager.getBusinessServiceById(vertex.getServiceId());
                formLayout.addComponent(createLabel("Reduce function", getReduceFunctionDescription(businessService.getReduceFunction())));

                // Apply Reduce Function specific details
                businessService.getReduceFunction().accept(new ReduceFunctionVisitor<Void>() {
                    @Override
                    public Void visit(HighestSeverity highestSeverity) {
                        return null;
                    }

                    @Override
                    public Void visit(HighestSeverityAbove highestSeverityAbove) {
                        return null;
                    }

                    @Override
                    // Threshold is not very transparent, we add an Explain Button in these cases
                    public Void visit(Threshold threshold) {
                        final Button explainButton = createButton("Explain", "Explain the Threshold function", FontAwesome.TABLE, (Button.ClickListener) event -> {
                            ThresholdExplanationWindow explainWindow = new ThresholdExplanationWindow(
                                    SimulationAwareStateMachineFactory.createSimulatedStateMachine(businessServiceManager, container.getCriteria())
                                            .explain(businessService, (Threshold) businessService.getReduceFunction()));
                            UI.getCurrent().addWindow(explainWindow);
                        });
                        explainButton.setStyleName(BaseTheme.BUTTON_LINK);
                        formLayout.addComponent(explainButton);
                        return null;
                    }
                });
                return null;
            }

            @Override
            public Void visit(IpServiceVertex vertex) {
                IpService ipService = businessServiceManager.getIpServiceById(vertex.getIpServiceId());
                formLayout.addComponent(createLabel("Interface", ipService.getIpAddress()));
                formLayout.addComponent(createLabel("Service", ipService.getServiceName()));
                if (!ipService.getServiceName().equals(vertex.getLabel())) {
                    formLayout.addComponent(createLabel("Friendly Name", vertex.getLabel()));
                }
                return null;
            }

            @Override
            public Void visit(ReductionKeyVertex vertex) {
                formLayout.addComponent(createLabel("Reduction Key", vertex.getReductionKey()));
                if (!vertex.getReductionKey().equals(vertex.getLabel())) {
                    formLayout.addComponent(createLabel("Friendly Name", vertex.getLabel()));
                }
                return null;
            }
        });

        return formLayout;
    }

