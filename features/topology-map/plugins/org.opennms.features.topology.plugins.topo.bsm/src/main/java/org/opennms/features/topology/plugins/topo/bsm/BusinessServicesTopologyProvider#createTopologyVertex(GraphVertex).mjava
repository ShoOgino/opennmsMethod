    private AbstractBusinessServiceVertex createTopologyVertex(GraphVertex graphVertex) {
        final ReadOnlyBusinessService businessService = graphVertex.getBusinessService();
        if (businessService != null) {
            return new BusinessServiceVertex(businessService, graphVertex.getLevel(), graphVertex.getStatus());
        }

        final ReadOnlyEdge edge = graphVertex.getEdge();
        switch (edge.getType()) {
        case CHILD_SERVICE:
            return new BusinessServiceVertex(((ReadOnlyChildEdge)edge).getChild(), graphVertex.getLevel(), graphVertex.getStatus());
        case IP_SERVICE:
            if (graphVertex.getReductionKey() == null) {
                // If no reduction key is set, create an IP Service vertex
                return new IpServiceVertex(((ReadOnlyIpServiceEdge)edge).getIpService(), graphVertex.getLevel(), graphVertex.getStatus());
            } else {
                // Otherwise, create a vertex for the particular reduction key related to the IP Service
                return new ReductionKeyVertex(graphVertex.getReductionKey(), graphVertex.getLevel(), graphVertex.getStatus());
            }
        case REDUCTION_KEY:
            return new ReductionKeyVertex(graphVertex.getReductionKey(), graphVertex.getLevel(), graphVertex.getStatus());
        default:
            throw new IllegalArgumentException("Unsupported edge: " + edge);
        }
    }

