	@Test
	public void test() {
		LOG.debug("start of AssetGraphDefinitionRepositoryTest");
		AssetGraphDefinitionRepositoryImpl assetGraphDefinitionRepository = new AssetGraphDefinitionRepositoryImpl();

		ConfigurationAdmin configurationAdmin= new MockConfigurationAdmin();
		assetGraphDefinitionRepository.setConfigurationAdmin(configurationAdmin);
		assetGraphDefinitionRepository.setPersistentId(persistentId);

		GeneratorConfig config1 = new GeneratorConfigBuilder()
		.withGraphDefinitionUri(uriconfig1)
		.build();
		LOG.debug("config1: "+config1);

		GeneratorConfig config2 = new GeneratorConfigBuilder()
		.withGraphDefinitionUri(uriconfig2)
		.build();
		LOG.debug("config2: "+config2);

		assetGraphDefinitionRepository.addConfigDefinition(config1);

		// adding duplicate throws exception
		boolean expectedException=false;
		try {
			assetGraphDefinitionRepository.addConfigDefinition(config1);
		} catch ( Exception e){
			expectedException=true;
			LOG.debug("    expected Exception thrown="+e.getMessage());
		}
		assertEquals(true,expectedException);

		assertTrue(assetGraphDefinitionRepository.exists(config1.getProviderId()));

		assertFalse(assetGraphDefinitionRepository.exists(config2.getProviderId()));

		assetGraphDefinitionRepository.addConfigDefinition(config2);

		Map<String, GeneratorConfig> configDefinitions = assetGraphDefinitionRepository.getAllConfigDefinitions();

		assertEquals(2,configDefinitions.size());

		StringBuffer msg = new StringBuffer("List of installed asset topology definitions");
		for(String providerId:configDefinitions.keySet()){
			LOG.debug("help");
			GeneratorConfig generatorConfig = configDefinitions.get(providerId);
			String graphDefinitionUriString = GeneratorConfigBuilder.toGraphDefinitionUriString(generatorConfig);
			msg.append("\n providerId:"+providerId);
			msg.append("\n     generatorConfig:"+generatorConfig.toString());
			msg.append("\n     graphDefinitionUriString:"+graphDefinitionUriString);
		}
		LOG.debug(msg.toString());
		LOG.debug("end of AssetGraphDefinitionRepositoryTest");
	}

