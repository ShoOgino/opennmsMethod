	/**
	 * Regenerates the AssetTopology defined by the providerId
	 * @param providerId The providerId to regenerate.
	 */
	public synchronized void regenerateAssetTopology(String providerId){
		Objects.requireNonNull(providerId);
		try {
			LOG.debug("Regenerating Asset Topology providerId: {}", providerId);
			if (!assetGraphDefinitionRepository.exists(providerId)) 
				throw new IllegalStateException(String.format("Asset Graph Definition with id '%s' cannot be regenerated, because it does not exist", providerId));

			GeneratorConfig config = assetGraphDefinitionRepository.getConfigDefinition(providerId);
			final GraphML graphML = transactionOperations.execute(status -> new AssetGraphGenerator(nodeProvider).generateGraphs(config));
			final GraphmlType graphmlType = GraphMLWriter.convert(graphML);

			if (graphmlRepository.exists(providerId)) graphmlRepository.delete(providerId);
			graphmlRepository.save(config.getProviderId(), config.getLabel(), graphmlType);

		} catch (Exception ex){
			LOG.error("problem regenerating asset topology ", ex);
			throw new RuntimeException(ex);
		}
	}

