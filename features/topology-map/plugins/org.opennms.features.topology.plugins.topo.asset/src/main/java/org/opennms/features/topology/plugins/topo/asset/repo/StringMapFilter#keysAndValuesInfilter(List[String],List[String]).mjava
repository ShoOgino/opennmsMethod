	public Map<String,List<String>>  keysAndValuesInfilter(List<String> filter, List<String> allowedKeys){
		
		// container for all values for each key
		Map<String,List<String>> keysAndValues = new LinkedHashMap<String,List<String>>();
		
		// check filter correctness and split comma separated values
		if(filter.isEmpty()) return keysAndValues;

		List<String>newFilter=new ArrayList<String>();
		for (String filterElement : filter) {
			String[] keyVal = filterElement.split("=");
			if (keyVal.length < 2)
				throw new IllegalArgumentException(
						"filter element incorrectly formatted. (no '=' in filterElement '"
								+ filterElement + "')");
			if (keyVal.length != 2)
				throw new IllegalArgumentException(
						"filter element incorrectly formatted. (too many '=' in  filterElement '"
								+ filterElement + "')");
			String key = keyVal[0];
			String value = keyVal[1];
			if (key.contains(","))
				throw new IllegalArgumentException(
						"filter element incorrectly formatted. (',' in  key in filterElement '"
								+ filterElement + "')");
			// deal with case parameter=a,b,c
			// change to parameter=a,parameter=b,parameter=c
			String[] vals = value.split(",");
			for (String val : vals) {
				newFilter.add(key+"="+val);
			}
		}
		// deal with new filter without comma separated values

		// separate all values for each key

		for (String filterElement : newFilter) {
			String[] keyVal = filterElement.split("=");
			String key = keyVal[0];
			String value = keyVal[1];
			
			// check if key allowed
			if (allowedKeys!=null && !allowedKeys.contains(key))
				throw new IllegalArgumentException("filter element contains unknown key '"+ key + "')");

			// check if only ! in value
			if(value.equals("!"))
				throw new IllegalArgumentException("filter element incorrectly formatted. (only'!' in  filterElement '"
					+ filterElement + "')");

			if(!keysAndValues.containsKey(key)){
				keysAndValues.put(key, new ArrayList<String>());
			}
			keysAndValues.get(key).add(value);
		}
		return keysAndValues;
	}

