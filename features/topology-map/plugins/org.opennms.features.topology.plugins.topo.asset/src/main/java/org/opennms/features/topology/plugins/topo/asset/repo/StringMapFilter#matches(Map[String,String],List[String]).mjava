	private boolean matches(Map<String, String> peramaterMap,List<String> filter) {

		// check filter correctness and split comma separated values
		if(filter.isEmpty()) return false;

		List<String>newFilter=new ArrayList<String>();
		for (String filterElement : filter) {
			String[] keyVal = filterElement.split("=");
			if (keyVal.length < 2)
				throw new IllegalArgumentException(
						"filter element incorrectly formatted. (no '=' in filterElement '"
								+ filterElement + "')");
			if (keyVal.length != 2)
				throw new IllegalArgumentException(
						"filter element incorrectly formatted. (too many '=' in  filterElement '"
								+ filterElement + "')");
			String key = keyVal[0];
			String value = keyVal[1];
			if (key.contains(","))
				throw new IllegalArgumentException(
						"filter element incorrectly formatted. (',' in  key in filterElement '"
								+ filterElement + "')");
			// deal with case parameter=a,b,c
			// change to parameter=a,parameter=b,parameter=c
			String[] vals = value.split(",");
			for (String val : vals) {
				newFilter.add(key+"="+val);
			}
		}
		// deal with new filter without comma separated values

		// separate all values for each key
		Map<String,List<String>> keys = new LinkedHashMap<String,List<String>>();

		for (String filterElement : newFilter) {
			String[] keyVal = filterElement.split("=");
			String key = keyVal[0];
			String value = keyVal[1];
			if(value.equals("!")) throw new IllegalArgumentException("filter element incorrectly formatted. (only'!' in  filterElement '"
					+ filterElement + "')");

			if(!keys.containsKey(key)){
				keys.put(key, new ArrayList<String>());
			}
			keys.get(key).add(value);
		}

		// for each key if no matching parameter key return false
		// for each key if no matching parameter values return false

		for(String key:keys.keySet()){
			String paramValue = peramaterMap.get(key);
			boolean innerMatch=false;
			List<String> values = keys.get(key);

			for(String value:values){
				// deal with negation
				if (value.startsWith("!")) {
					// break and return if we ever find a NOT value
					if (value.substring(1).equals(paramValue)) return false;
					innerMatch= true;
				} else {
					if (value.equals(paramValue)) {
						// break and return innerMatch true if paramValue matches value
						innerMatch= true;
						break;
					}
				}
			}
			if(!innerMatch) return false;
		}

		return true;
	}

