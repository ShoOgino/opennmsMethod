	/**
	 * utility method to populate a given Map with the most important node and asset attributes
	 * The map keys are determined by keys in NodeParamLabels
	 * The map attributes are populated from the supplied OpenNMS node
	 *
	 * @param nodeParameters the supplied map to populate
	 * @param node the OpenNMS  node object to use
	 */
	private void populateNodeParametersWithNodeInfo(Map<String,String> nodeParameters, OnmsNode node) {
		if( node.getLabel()!=null && ! node.getLabel().isEmpty()) nodeParameters.put(NodeParamLabels.NODE_NODELABEL, node.getLabel());
		if( node.getNodeId()!=null && ! node.getNodeId().isEmpty()) nodeParameters.put(NodeParamLabels.NODE_NODEID, node.getNodeId());
		if( node.getForeignSource()!=null && ! node.getForeignSource().isEmpty()) nodeParameters.put(NodeParamLabels.NODE_FOREIGNSOURCE, node.getForeignSource());
		if( node.getForeignId()!=null && ! node.getForeignId().isEmpty()) nodeParameters.put(NodeParamLabels.NODE_FOREIGNID, node.getForeignId());
		if( node.getSysName()!=null && ! node.getSysName().isEmpty()) nodeParameters.put(NodeParamLabels.NODE_NODESYSNAME, node.getSysName());
		if( node.getSysLocation()!=null && ! node.getSysLocation().isEmpty()) nodeParameters.put(NodeParamLabels.NODE_NODESYSLOCATION, node.getSysLocation());
		if( node.getOperatingSystem()!=null && ! node.getOperatingSystem().isEmpty()) nodeParameters.put(NodeParamLabels.NODE_OPERATINGSYSTEM, node.getOperatingSystem());
		
		StringBuilder categories=new StringBuilder();
		for (Iterator<OnmsCategory> i=node.getCategories().iterator();i.hasNext();) {
			categories.append(((OnmsCategory)i.next()).getName());
			if(i.hasNext()) {
				categories.append(",");
			}
		}
		nodeParameters.put(NodeParamLabels.NODE_CATEGORIES, categories.toString());

		// parent information
		OnmsNode parent = node.getParent();
		if (parent!=null){
			if( parent.getLabel()!=null && ! parent.getLabel().isEmpty()) nodeParameters.put(NodeParamLabels.PARENT_NODELABEL, parent.getLabel());
			if( parent.getNodeId()!=null && ! parent.getNodeId().isEmpty()) nodeParameters.put(NodeParamLabels.PARENT_NODEID, parent.getNodeId());
			if( parent.getForeignSource()!=null && ! parent.getForeignSource().isEmpty()) nodeParameters.put(NodeParamLabels.PARENT_FOREIGNSOURCE, parent.getForeignSource());
			if( parent.getForeignId()!=null && ! parent.getForeignId().isEmpty()) nodeParameters.put(NodeParamLabels.PARENT_FOREIGNID, parent.getForeignId());
		}

		//assetRecord.
		OnmsAssetRecord assetRecord= node.getAssetRecord() ;
		if(assetRecord!=null){

			//geolocation
			OnmsGeolocation gl = assetRecord.getGeolocation();
			if (gl !=null){
				if( gl.getCountry()!=null && ! gl.getCountry().isEmpty()) nodeParameters.put(NodeParamLabels.ASSET_COUNTRY, gl.getCountry());
				if( gl.getAddress1()!=null && ! gl.getAddress1().isEmpty()) nodeParameters.put(NodeParamLabels.ASSET_ADDRESS1, gl.getAddress1());
				if( gl.getAddress2()!=null && ! gl.getAddress2().isEmpty()) nodeParameters.put(NodeParamLabels.ASSET_ADDRESS2, gl.getAddress2());
				if( gl.getCity()!=null && ! gl.getCity().isEmpty()) nodeParameters.put(NodeParamLabels.ASSET_CITY, gl.getCity());
				if( gl.getZip()!=null && ! gl.getZip().isEmpty()) nodeParameters.put(NodeParamLabels.ASSET_ZIP, gl.getZip());
				if( gl.getState()!=null && ! gl.getState().isEmpty()) nodeParameters.put(NodeParamLabels.ASSET_STATE, gl.getState());
				if( gl.getLatitude()!=null ) nodeParameters.put(NodeParamLabels.ASSET_LATITUDE, gl.getLatitude().toString());
				if( gl.getLongitude()!=null ) nodeParameters.put(NodeParamLabels.ASSET_LONGITUDE, gl.getLongitude().toString());
			}

			//assetRecord
			if( assetRecord.getRegion()!=null && ! assetRecord.getRegion().isEmpty()) nodeParameters.put(NodeParamLabels.ASSET_REGION, assetRecord.getRegion());
			if( assetRecord.getDivision()!=null && ! assetRecord.getDivision().isEmpty()) nodeParameters.put(NodeParamLabels.ASSET_DIVISION, assetRecord.getDivision());
			if( assetRecord.getDepartment()!=null && !assetRecord.getDepartment().isEmpty()) nodeParameters.put(NodeParamLabels.ASSET_DEPARTMENT, assetRecord.getDepartment());
			if( assetRecord.getBuilding()!=null && ! assetRecord.getBuilding().isEmpty()) nodeParameters.put(NodeParamLabels.ASSET_BUILDING, assetRecord.getBuilding());
			if( assetRecord.getFloor()!=null && ! assetRecord.getFloor().isEmpty()) nodeParameters.put(NodeParamLabels.ASSET_FLOOR, assetRecord.getFloor());
			if( assetRecord.getRoom()!=null && ! assetRecord.getRoom().isEmpty()) nodeParameters.put(NodeParamLabels.ASSET_ROOM, assetRecord.getRoom());
			if( assetRecord.getRack()!=null && ! assetRecord.getRack().isEmpty()) nodeParameters.put(NodeParamLabels.ASSET_RACK, assetRecord.getRack());
			if( assetRecord.getSlot()!=null && ! assetRecord.getSlot().isEmpty()) nodeParameters.put(NodeParamLabels.ASSET_SLOT, assetRecord.getSlot());
			if( assetRecord.getPort()!=null && ! assetRecord.getPort().isEmpty()) nodeParameters.put(NodeParamLabels.ASSET_PORT, assetRecord.getPort());
			if( assetRecord.getCircuitId()!=null && ! assetRecord.getCircuitId().isEmpty()) nodeParameters.put(NodeParamLabels.ASSET_CIRCUITID, assetRecord.getCircuitId());

			if( assetRecord.getCategory()!=null && ! assetRecord.getCategory().isEmpty()) nodeParameters.put(NodeParamLabels.ASSET_CATEGORY, assetRecord.getCategory());
			if( assetRecord.getDisplayCategory()!=null && ! assetRecord.getDisplayCategory().isEmpty()) nodeParameters.put(NodeParamLabels.ASSET_DISPLAYCATEGORY, assetRecord.getDisplayCategory());
			if( assetRecord.getNotifyCategory()!=null && ! assetRecord.getNotifyCategory().isEmpty()) nodeParameters.put(NodeParamLabels.ASSET_NOTIFYCATEGORY, assetRecord.getNotifyCategory());
			if( assetRecord.getPollerCategory()!=null && ! assetRecord.getPollerCategory().isEmpty()) nodeParameters.put(NodeParamLabels.ASSET_POLLERCATEGORY, assetRecord.getPollerCategory());
			if( assetRecord.getThresholdCategory()!=null && ! assetRecord.getThresholdCategory().isEmpty()) nodeParameters.put(NodeParamLabels.ASSET_THRESHOLDCATEGORY, assetRecord.getThresholdCategory());
			if( assetRecord.getManagedObjectType()!=null && ! assetRecord.getManagedObjectType().isEmpty()) nodeParameters.put(NodeParamLabels.ASSET_MANAGEDOBJECTTYPE, assetRecord.getManagedObjectType());
			if( assetRecord.getManagedObjectInstance()!=null && ! assetRecord.getManagedObjectInstance().isEmpty()) nodeParameters.put(NodeParamLabels.ASSET_MANAGEDOBJECTINSTANCE, assetRecord.getManagedObjectInstance());

			if( assetRecord.getManufacturer()!=null && ! assetRecord.getManufacturer().isEmpty()) nodeParameters.put(NodeParamLabels.ASSET_MANUFACTURER, assetRecord.getManufacturer());
			if( assetRecord.getVendor()!=null && ! assetRecord.getVendor().isEmpty()) nodeParameters.put(NodeParamLabels.ASSET_VENDOR, assetRecord.getVendor());
			if( assetRecord.getModelNumber()!=null && ! assetRecord.getModelNumber().isEmpty()) nodeParameters.put(NodeParamLabels.ASSET_MODELNUMBER, assetRecord.getModelNumber());
			if( assetRecord.getDescription()!=null && ! assetRecord.getDescription().isEmpty()) nodeParameters.put(NodeParamLabels.ASSET_DESCRIPTION, assetRecord.getDescription());
			if( assetRecord.getOperatingSystem()!=null && ! assetRecord.getOperatingSystem().isEmpty()) nodeParameters.put(NodeParamLabels.ASSET_OPERATINGSYSTEM, assetRecord.getOperatingSystem());

		}

	}

