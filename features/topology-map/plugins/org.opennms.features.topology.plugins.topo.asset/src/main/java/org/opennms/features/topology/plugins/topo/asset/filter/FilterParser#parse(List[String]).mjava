	public Map<String, Filter> parse(List<String> filter) {

		// filterMap key=NodeParamLabels value= Filter types 
		Map<String, Filter> filterMap= new LinkedHashMap<String, Filter>();

		// filterStringMap key=NodeParamLabels value=list of string values for filters 
		Map<String,List<String>> filterStringMap = new LinkedHashMap<String, List<String>>();

		for(String s:filter){
			String[] x = s.split("=");
			if(x.length<2) throw new IllegalArgumentException("Cannot parse filter. no '=' in expression:"+s);
			if(x.length>2) throw new IllegalArgumentException("Cannot parse filter. too many '=' in expression:"+s);
			String nodeParamLabel=x[0];
			String filterValue=x[1];
			if(!NodeParamLabels.ALL_KEYS.contains(nodeParamLabel))
				throw new IllegalArgumentException("Cannot parse filter. Unknown nodeParamLabel value '"+nodeParamLabel+ "' in expression:"+s);
			if (! filterStringMap.containsKey(nodeParamLabel)){
				filterStringMap.put(nodeParamLabel, new ArrayList<String>());
			}
			// split any comma separated values into separate value pairs
			String[] values = filterValue.split(",");
			for(String value:values){
				if("".equals(value))
					throw new  IllegalArgumentException("Cannot parse filter. cannot have empty value '"+filterValue+ "' in expression:"+s);
				filterStringMap.get(nodeParamLabel).add(value);
			}
		}

		//create filter for each filter string
		List<Filter> orFilters=new ArrayList<Filter>();
		List<Filter> andFilters=new ArrayList<Filter>();


		for (String nodeParamLabel:filterStringMap.keySet()){
			for(String filterValueString: filterStringMap.get(nodeParamLabel)){
				String valStr=null;
				Filter f=null;
				if(filterValueString.startsWith("!")){
					if(filterValueString.startsWith("!~")){
						valStr=filterValueString.substring(2);
						f = new NotFilter(new RegExFilter(valStr));
					} else {
						valStr=filterValueString.substring(1);
						f = new NotFilter(new EqFilter(valStr));
					}
					andFilters.add(f);
				} else {
					if(filterValueString.startsWith("~")){
						valStr=filterValueString.substring(1);
						f = new RegExFilter(valStr);
					} else {
						valStr=filterValueString;
						f= new EqFilter(valStr);
					}
					orFilters.add(f);
				}
				if (valStr.contains("~")) 
					throw new IllegalArgumentException("Cannot parse filter. Illegal '~' character for '"+nodeParamLabel+ "' value in expression:"+filterValueString);
				if (valStr.contains("!")) 
					throw new IllegalArgumentException("Cannot parse filter. Illegal '!' character for '"+nodeParamLabel+ "' value in expression:"+filterValueString);
				if (valStr.equals("")) 
					throw new IllegalArgumentException("Cannot parse filter. Illegal empty value for '"+nodeParamLabel+ "' value in expression:"+filterValueString);
			}
			
			Filter topFilter=new NotFilter(new AndFilter(new OrFilter(orFilters), new AndFilter(andFilters)));
			filterMap.put(nodeParamLabel, topFilter);
			
		}


		return filterMap;
	}

