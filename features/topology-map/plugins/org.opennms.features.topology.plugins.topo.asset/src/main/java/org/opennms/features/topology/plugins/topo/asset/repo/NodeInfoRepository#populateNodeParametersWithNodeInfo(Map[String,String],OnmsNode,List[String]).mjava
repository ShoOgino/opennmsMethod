	/**
	 * utility method to populate a given Map with the node and asset attributes listed in requiredParamaters
	 * The map keys are determined by keys in NodeParamLabels
	 * The map attributes are populated from the supplied OpenNMS node
	 * @param nodeParameters the supplied map to populate
	 * @param node the OpenNMS  node object to use
	 * @param requiredParameters list of parameters to populate (named from constants in NodeParamLabels) 
	 *        if requiredParameters is null return entire parameter list
	 *        NODE_NODEID, NODE_NODELABEL,NODE_FOREIGNID and NODE_FOREIGNSOURCE are always added by default
	 */
	private void populateNodeParametersWithNodeInfo(Map<String,String> nodeParameters, OnmsNode node, List<String> requiredParameters){
		Map<String, String> newNodeParameters = new LinkedHashMap<String, String>();
		populateNodeParametersWithNodeInfo(newNodeParameters, node);
		if(requiredParameters!=null){
			for(String paramKey:requiredParameters){
				if(newNodeParameters.containsKey(paramKey)){
					nodeParameters.put(paramKey, newNodeParameters.get(paramKey));
				}
			}
		} else {
			nodeParameters.putAll(newNodeParameters);
		}
		// always add default values even if null
		nodeParameters.put(NodeParamLabels.NODE_NODEID, newNodeParameters.get(NodeParamLabels.NODE_NODEID));
		nodeParameters.put(NodeParamLabels.NODE_NODELABEL, newNodeParameters.get(NodeParamLabels.NODE_NODELABEL));
		nodeParameters.put(NodeParamLabels.NODE_FOREIGNID, newNodeParameters.get(NodeParamLabels.NODE_FOREIGNID));
		nodeParameters.put(NodeParamLabels.NODE_FOREIGNSOURCE, newNodeParameters.get(NodeParamLabels.NODE_FOREIGNSOURCE));
	}

