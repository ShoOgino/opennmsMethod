	/**
	 * Adds all of the OpenNMS nodes defined in the nodeInfo type to a graph. Adds nodeID and foreignsource / foreignid values if defined
	 * @param nodesGraph
	 * @param nodeInfo map with values Map<nodeId, Map<nodeParamLabelKey, nodeParamValue>>
	 *        nodeParamLabelKey a node asset parameter key (from those defined in org.opennms.plugins.graphml.asset.NodeParamLabels)
	 *        nodeParamValue a node asset value ( e.g. key NodeParamLabels.ASSET_RACK ('asset-rack') value: rack1
	 */
	private void addOpenNMSNodes(GraphMLGraph nodesGraph, Map<String, Map<String, String>> nodeInfo) {

		// set vertex-status-provider true for nodes graph		
		nodesGraph.setProperty(GraphMLProperties.VERTEX_STATUS_PROVIDER, true);

		for (String nodeId:nodeInfo.keySet()){

			GraphMLNode graphMLNode = new GraphMLNode();

			Map<String, String> nodeParamaters = nodeInfo.get(nodeId);
			String foreignSourceStr= nodeParamaters.get(NodeParamLabels.NODE_FOREIGNSOURCE);
			String foreignIdStr= nodeParamaters.get(NodeParamLabels.NODE_FOREIGNID);
			String nodeLabelStr = nodeParamaters.get(NodeParamLabels.NODE_NODELABEL);
			graphMLNode.setId(nodeLabelStr);
			graphMLNode.setProperty(GraphMLProperties.LABEL, nodeLabelStr);
			graphMLNode.setProperty(GraphMLProperties.NODE_ID, Integer.parseInt(nodeId));
			graphMLNode.setProperty(GraphMLProperties.FOREIGN_ID, foreignIdStr);
			graphMLNode.setProperty(GraphMLProperties.FOREIGN_SOURCE, foreignSourceStr);

			nodesGraph.addNode(graphMLNode);
		}


	}

