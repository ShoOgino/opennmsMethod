	/**
	 * returns filtered node info repository filter 
	 * filter = null do not filter results
	 * key1=value1&key1=value2 (additive i.e. OR of key 1 values
	 * key1=value1,value2,value3 (additive i.e. OR of key 1 values) alternative)
	 * key1=value1,key2=value2,value3 etc (AND of keys - both must apply)
	 * key1=!value1 (negation - key NOT value1)
	 * key1=~regex (regex match of key) or key1=!~regex
	 * 
	 * @param filter filter can be derived from url query
	 * @param allowedKeys if keys used in filter are not in this list an IllegalArgumentException is thrown
	 * @return filter NodeInfo
	 */
	public Map<String, Map<String, String>> filter(List<String> filter, List<String> allowedKeys) {
		Map<String, Map<String, String>> newMap = new LinkedHashMap<String, Map<String, String>>();

		if (filter == null)
			return map;

		for (String key : map.keySet()) {
			if (matches(map.get(key), filter, allowedKeys))
				newMap.put(key, map.get(key));
		}
		return newMap;

	}

