    /**
     * The buildURL method takes the current values in the form and formats them into the
     * URL string that is used to redirect the results browser to the Ping page.
     *
     * @return Web address for ping command with submitted parameters
     * @throws MalformedURLException
     */
    protected URL buildURL() {
        boolean validInput = false;
        try {
            validInput = validateInput();
        } catch (NumberFormatException e) {
            Notification.show("Inputs must be integers", Notification.Type.WARNING_MESSAGE);
            return null;
        }
        if (validInput) {
            final StringBuilder options = new StringBuilder(pingUrl);
            try {
                URL baseUrl = getUI().getPage().getLocation().toURL();

                options.append(pingUrl.contains("?") ? "&" : "?");

                options.append("address=").append(ipDropdown.getValue())
                        .append("&timeout=").append(timeoutField.getValue())
                        .append("&numberOfRequest=").append(requestsField.getValue())
                        .append("&hideCloseButton=true")
                        .append("&packetSize=").append(Integer.parseInt(packetSizeDropdown.getValue().toString()) - 8);
                if (numericalDataCheckBox.getValue().equals(true)) {
                    options.append("&numericOutput=true");
                }

                return new URL(baseUrl, options.toString());
            } catch (final MalformedURLException e) {
                Notification.show("Could not build URL: " + options.toString(), Notification.Type.WARNING_MESSAGE);
                return null;
            }
        } else {
            Notification.show("Inputs must be between 0 and 9999", Notification.Type.WARNING_MESSAGE);
            return null;
        }
    }

