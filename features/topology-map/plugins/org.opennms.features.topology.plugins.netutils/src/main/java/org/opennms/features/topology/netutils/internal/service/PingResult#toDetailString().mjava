    public String toDetailString() {
        final String ipAddress = InetAddressUtils.toIpAddrString(getRequest().getInetAddress());
        final StringBuilder builder = new StringBuilder();
        builder.append(String.format("PING %s: %d data bytes", ipAddress, getRequest().getPackageSize()-8));
        builder.append("\n");
        for (PingSequence eachSequence : getSequences()) {
            if (eachSequence.isTimeout()) {
                builder.append(String.format("Request timeout for icmp_seq %s", eachSequence.getSequenceNumber()));
            }
            if (eachSequence.isError()) {
                builder.append(
                        String.format("Request error for icmp_seq %s: %s",
                                eachSequence.getSequenceNumber(),
                                eachSequence.getError().getMessage()));
            }
            if (eachSequence.isSuccess()) {
                builder.append(
                        String.format("%s bytes from %s: icmp_seq=%d time=%d ms",
                                getRequest().getPackageSize(),
                                ipAddress,
                                eachSequence.getResponse().getSequenceNumber(),
                                eachSequence.getResponse().getReceivedTimeNanos() - eachSequence.getResponse().getSentTimeNanos()));
            }
            builder.append("\n");
        }
        if (isComplete()) {
            PingResultSummary summary = getSummary();
            builder.append("\n");
            builder.append(String.format("--- %s ping statistics ---", ipAddress));
            builder.append("\n");
            builder.append(String.format("%d packets transmitted, %d packets received, %.2f%% packet loss", summary.getPacketsTransmitted(), summary.getPacketsReceived(), summary.getPacketLoss()));
            builder.append("\n");
            builder.append(String.format("round-trip min/avg/max/stddev = %.2f/%.2f/%.2f/%.2f ms", (double) summary.getMin(), summary.getAvg(), (double) summary.getMax(), summary.getStdDev()));
            builder.append("\n");
        }
        return builder.toString();
    }

