	/**
	 * The PingWindow method constructs a PingWindow component with a size proportionate to the 
	 * width and height of the main window.
	 * @param node 
	 * @param width Width of Main window
	 * @param height Height of Main window
	 */
	public PingWindow(Node node, String baseAddress){

		this.baseAddress = baseAddress;

		/*Sets up window settings*/
		setCaption("Ping - " + node.getName());
		setImmediate(true);
		setResizable(false);

		/*Initialize the header of the Sub-window with the name of the selected Node*/
		String nodeName = "<div style=\"text-align: center; font-size: 18pt; font-weight:bold;\">" + node.getName() + "</div>";
		nodeLabel = new Label(nodeName);
		nodeLabel.setContentMode(Label.CONTENT_XHTML);

		/*Creating various layouts to encapsulate all of the components*/
		VerticalLayout mainLayout = new VerticalLayout();
		mainLayout.setSizeFull();
		vSplit = new VerticalSplitPanel();
		topLayout = new VerticalLayout();
		bottomLayout = new VerticalLayout();
		VerticalLayout form = new VerticalLayout();
		GridLayout grid = new GridLayout(2,4);
		grid.setWidth("420");
		grid.setHeight("120");

		/*Sets up IP Address dropdown with the Name as default*/
		ipDropdown = new NativeSelect();
		ipDropdown.addItem(node.getIPAddress());
		ipDropdown.select(node.getIPAddress());

		/*Sets up Packet Size dropdown with different values*/
		packetSizeDropdown = new NativeSelect();
		packetSizeDropdown.addItem("16");
		packetSizeDropdown.addItem("32");
		packetSizeDropdown.addItem("64");
		packetSizeDropdown.addItem("128");
		packetSizeDropdown.addItem("256");
		packetSizeDropdown.addItem("512");
		packetSizeDropdown.addItem("1024");
		packetSizeDropdown.select("16");

		/*Creates the Numerical Output Check box and sets up the listener*/
		numericalDataCheckBox = new CheckBox("Use Numerical Node Names");
		numericalDataCheckBox.setImmediate(true);
		numericalDataCheckBox.setValue(false);

		/*Creates the form labels and text fields*/
		Label ipLabel = new Label("IP Address: ");
		Label requestsLabel = new Label("Number of Requests: ");
		Label timeoutLabel = new Label("Time-Out (seconds): ");
		Label packetLabel = new Label("Packet Size: ");
		requestsField = new TextField();
		requestsField.setMaxLength(4); //Max buffer of 4 to prevent buffer overflow
		timeoutField = new TextField();
		timeoutField.setMaxLength(4); //Max buffer of 4 to prevent buffer overflow

		/*Add all of the components to the GridLayout*/
		grid.addComponent(ipLabel);
		grid.setComponentAlignment(ipLabel, Alignment.MIDDLE_LEFT);
		grid.addComponent(ipDropdown);
		grid.setComponentAlignment(ipDropdown, Alignment.MIDDLE_LEFT);
		grid.addComponent(requestsLabel);
		grid.setComponentAlignment(requestsLabel, Alignment.MIDDLE_LEFT);
		grid.addComponent(requestsField);
		grid.setComponentAlignment(requestsField, Alignment.MIDDLE_LEFT);
		grid.addComponent(timeoutLabel);
		grid.setComponentAlignment(timeoutLabel, Alignment.MIDDLE_LEFT);
		grid.addComponent(timeoutField);
		grid.setComponentAlignment(timeoutField, Alignment.MIDDLE_LEFT);
		grid.addComponent(packetLabel);
		grid.setComponentAlignment(packetLabel, Alignment.MIDDLE_LEFT);
		grid.addComponent(packetSizeDropdown);
		grid.setComponentAlignment(packetSizeDropdown, Alignment.MIDDLE_LEFT);

		/*Creates the Ping button and sets up the listener*/
		final Button pingButton = new Button("Ping"); 
		pingButton.addListener(new Button.ClickListener() {
			public void buttonClick(ClickEvent event) {
				if(event.getButton() == pingButton){
					changeBrowserURL(buildURL());
				}
			}
		}); 

		/*Adds components to the form and sets the width and spacing*/
		form.addComponent(grid);
		form.addComponent(numericalDataCheckBox);
		form.addComponent(pingButton);
		form.setWidth("100%");
		form.setSpacing(true);

		/*Adds components to the Top Layout and sets the width and margins*/
		topLayout.addComponent(nodeLabel);
		topLayout.setComponentAlignment(nodeLabel, Alignment.MIDDLE_CENTER);
		topLayout.addComponent(form);
		topLayout.setSizeFull();
		topLayout.setMargin(true, true, false, true);

		/*Sets attributes for bottom layout component*/
		bottomLayout.setSizeFull();
		bottomLayout.setMargin(true);
		bottomLayout.setImmediate(true);

		buildEmbeddedBrowser();

		/*Setting first and second components for the split panel and setting the panel divider position*/
		vSplit.setFirstComponent(topLayout);
		vSplit.setSecondComponent(bottomLayout);
		vSplit.setSplitPosition(splitHeight, UNITS_PIXELS);
		vSplit.setLocked(true);

		/*Adds split panel to the main layout and expands the split panel to 100% of the layout space*/
		mainLayout.addComponent(vSplit);
		mainLayout.setExpandRatio(vSplit, 1);

		setContent(mainLayout);
	}

