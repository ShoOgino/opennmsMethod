    /**
     * The PingWindow method constructs a PingWindow component with a size proportionate to the
     * width and height of the main window.
     *
     * @param node
     * @param pingUrl
     */
    public PingWindow(final Node node, final String pingUrl) {

        this.pingUrl = pingUrl;

        String label = "";
        String ipAddress = "";
        if (node != null) {
            label = node.getLabel();
            ipAddress = node.getIPAddress();
        }
        String caption = "";
        /*Sets up window settings*/
        if (label == null || label.equals("") || label.equalsIgnoreCase(noLabel)) {
            label = "";
        }
        if (!label.equals("")) {
            caption = " - " + label;
        }
        setCaption("Ping" + caption);
        setImmediate(true);
        setResizable(false);
        setSizeFull();

		/*Initialize the header of the Sub-window with the name of the selected Node*/
        String nodeName = "<div style=\"text-align: center; font-size: 18pt; font-weight:bold;\">" + label + "</div>";
        nodeLabel = new Label(nodeName);
        nodeLabel.setContentMode(ContentMode.HTML);

        VerticalLayout mainLayout = new VerticalLayout();
        mainLayout.setSizeFull();
        mainLayout.setSpacing(true);
        mainLayout.setMargin(true);

        VerticalLayout form = new VerticalLayout();
        GridLayout grid = new GridLayout(2, 4);
        grid.setWidth("420");
        grid.setHeight("120");

		/*Sets up IP Address dropdown with the Name as default*/
        ipDropdown = new NativeSelect();
        ipDropdown.addItem(ipAddress);
        ipDropdown.select(ipAddress);
        ipDropdown.setNullSelectionAllowed(false);

		/*Sets up Packet Size dropdown with different values*/
        packetSizeDropdown = new NativeSelect();
        packetSizeDropdown.addItem("16");
        packetSizeDropdown.addItem("32");
        packetSizeDropdown.addItem("64");
        packetSizeDropdown.addItem("128");
        packetSizeDropdown.addItem("256");
        packetSizeDropdown.addItem("512");
        packetSizeDropdown.addItem("1024");
        packetSizeDropdown.select("16");

		/*Creates the Numerical Output Check box and sets up the listener*/
        numericalDataCheckBox = new CheckBox("Use Numerical Node Names");
        numericalDataCheckBox.setImmediate(true);
        numericalDataCheckBox.setValue(false);

		/*Creates the form labels and text fields*/
        Label ipLabel = new Label("IP Address: ");
        Label requestsLabel = new Label("Number of Requests: ");
        Label timeoutLabel = new Label("Time-Out (seconds): ");
        Label packetLabel = new Label("Packet Size: ");
        requestsField = new TextField();
        requestsField.setMaxLength(4); //Max buffer of 4 to prevent buffer overflow
        requestsField.setValue("4");
        timeoutField = new TextField();
        timeoutField.setMaxLength(4); //Max buffer of 4 to prevent buffer overflow
        timeoutField.setValue("1");

		/*Add all of the components to the GridLayout*/
        grid.addComponent(ipLabel);
        grid.setComponentAlignment(ipLabel, Alignment.MIDDLE_LEFT);
        grid.addComponent(ipDropdown);
        grid.setComponentAlignment(ipDropdown, Alignment.MIDDLE_LEFT);
        grid.addComponent(requestsLabel);
        grid.setComponentAlignment(requestsLabel, Alignment.MIDDLE_LEFT);
        grid.addComponent(requestsField);
        grid.setComponentAlignment(requestsField, Alignment.MIDDLE_LEFT);
        grid.addComponent(timeoutLabel);
        grid.setComponentAlignment(timeoutLabel, Alignment.MIDDLE_LEFT);
        grid.addComponent(timeoutField);
        grid.setComponentAlignment(timeoutField, Alignment.MIDDLE_LEFT);
        grid.addComponent(packetLabel);
        grid.setComponentAlignment(packetLabel, Alignment.MIDDLE_LEFT);
        grid.addComponent(packetSizeDropdown);
        grid.setComponentAlignment(packetSizeDropdown, Alignment.MIDDLE_LEFT);

		/*Creates the Ping button and sets up the listener*/
        pingButton = new Button("Ping");
        pingButton.addClickListener(new Button.ClickListener() {
            @Override
            public void buttonClick(ClickEvent event) {
                changeBrowserURL(buildURL());
            }
        });

		/*Adds components to the form and sets the width and spacing*/
        form.addComponent(grid);
        form.addComponent(numericalDataCheckBox);
        form.addComponent(pingButton);
        form.setWidth("100%");
        form.setSpacing(true);

		/*Adds components to the Top Layout and sets the width and margins*/
        mainLayout.addComponent(nodeLabel);
        mainLayout.setComponentAlignment(nodeLabel, Alignment.MIDDLE_CENTER);
        mainLayout.addComponent(form);

        buildEmbeddedBrowser();

        Panel panel = new Panel();
        panel.setSizeFull();
        panel.setCaption("Results");
        panel.setContent(resultsBrowser);

        mainLayout.addComponent(panel);
        mainLayout.setExpandRatio(panel, 1.0f);

        setContent(mainLayout);
    }

