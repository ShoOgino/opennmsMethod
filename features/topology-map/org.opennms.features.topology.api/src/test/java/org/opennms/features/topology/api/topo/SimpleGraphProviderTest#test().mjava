    @Test
    public void test() throws Exception {
        Assert.assertEquals(0, m_topologyProvider.getVertices().size());

        Vertex vertexA = m_topologyProvider.addVertex(50, 100);
        Assert.assertEquals(1, m_topologyProvider.getVertices().size());
        //LoggerFactory.getLogger(this.getClass()).debug(m_topologyProvider.getVertices().get(0).toString());
        assertTrue(m_topologyProvider.containsVertexId(vertexA));
        assertTrue(m_topologyProvider.containsVertexId("v0"));
        assertFalse(m_topologyProvider.containsVertexId("v1"));
        ((AbstractVertex)vertexA).setIpAddress("10.0.0.4");
        final String namespace = m_topologyProvider.getVertexNamespace();
        VertexRef ref0 = new DefaultVertexRef(namespace, "v0", namespace + ":v0");
        VertexRef ref1 = new DefaultVertexRef(namespace, "v1", namespace + ":v0");
        Assert.assertEquals(1, m_topologyProvider.getVertices(Collections.singletonList(ref0)).size());
        Assert.assertEquals(0, m_topologyProvider.getVertices(Collections.singletonList(ref1)).size());

        Vertex vertexB = m_topologyProvider.addVertex(100, 50);
        assertTrue(m_topologyProvider.containsVertexId(vertexB));
        assertTrue(m_topologyProvider.containsVertexId("v1"));
        Assert.assertEquals(1, m_topologyProvider.getVertices(Collections.singletonList(ref1)).size());

        Vertex vertexC = m_topologyProvider.addVertex(100, 150);
        Vertex vertexD = m_topologyProvider.addVertex(150, 100);
        Vertex vertexE = m_topologyProvider.addVertex(200, 200);
        Assert.assertEquals(5, m_topologyProvider.getVertices().size());

        Vertex group1 = m_topologyProvider.addGroup("Group 1", Constants.GROUP_ICON_KEY);
        Vertex group2 = m_topologyProvider.addGroup("Group 2", Constants.GROUP_ICON_KEY);
        Assert.assertEquals(7, m_topologyProvider.getVertices().size());

        m_topologyProvider.setParent(vertexA, group1);
        m_topologyProvider.setParent(vertexB, group1);
        m_topologyProvider.setParent(vertexC, group2);
        m_topologyProvider.setParent(vertexD, group2);

        m_topologyProvider.connectVertices(vertexA, vertexB);
        m_topologyProvider.connectVertices(vertexA, vertexC);
        m_topologyProvider.connectVertices(vertexB, vertexC);
        m_topologyProvider.connectVertices(vertexB, vertexD);
        m_topologyProvider.connectVertices(vertexC, vertexD);
        m_topologyProvider.connectVertices(vertexA, vertexE);
        m_topologyProvider.connectVertices(vertexD, vertexE);

        // Ensure that the WrappedVertex class is working properly 
        WrappedVertex wrappedVertex = new WrappedLeafVertex(vertexA);
        assertEquals("v0", wrappedVertex.id);
        assertEquals("simple", wrappedVertex.namespace);
        assertEquals("10.0.0.4", wrappedVertex.ipAddr);
        assertEquals(50, wrappedVertex.x.intValue());
        assertEquals(100, wrappedVertex.y.intValue());

        Assert.assertEquals(1, m_topologyProvider.getVertices(Collections.singletonList(ref0)).size());
        Assert.assertEquals(1, m_topologyProvider.getVertices(Collections.singletonList(ref1)).size());
        Assert.assertEquals(7, m_topologyProvider.getVertices().size());
        Assert.assertEquals(3, m_topologyProvider.getEdgeIdsForVertex(m_topologyProvider.getVertex(ref0)).length);
        Assert.assertEquals(3, m_topologyProvider.getEdgeIdsForVertex(m_topologyProvider.getVertex(ref1)).length);

        m_topologyProvider.save("target/test-classes/test-graph.xml");

        m_topologyProvider.resetContainer();

        // Ensure that the topology provider has been erased
        Assert.assertEquals(0, m_topologyProvider.getVertices(Collections.singletonList(ref0)).size());
        Assert.assertEquals(0, m_topologyProvider.getVertices(Collections.singletonList(ref1)).size());
        Assert.assertEquals(0, m_topologyProvider.getVertices().size());
        Assert.assertEquals(0, m_topologyProvider.getEdgeIdsForVertex(m_topologyProvider.getVertex(ref0)).length);
        Assert.assertEquals(0, m_topologyProvider.getEdgeIdsForVertex(m_topologyProvider.getVertex(ref1)).length);

        m_topologyProvider.load("target/test-classes/test-graph.xml");

        // Ensure that all of the content has been reloaded properly
        Assert.assertEquals(1, m_topologyProvider.getVertices(Collections.singletonList(ref0)).size());
        Assert.assertEquals(1, m_topologyProvider.getVertices(Collections.singletonList(ref1)).size());
        Assert.assertEquals(7, m_topologyProvider.getVertices().size());
        Assert.assertEquals(3, m_topologyProvider.getEdgeIdsForVertex(m_topologyProvider.getVertex(ref0)).length);
        Assert.assertEquals(3, m_topologyProvider.getEdgeIdsForVertex(m_topologyProvider.getVertex(ref1)).length);
    }

