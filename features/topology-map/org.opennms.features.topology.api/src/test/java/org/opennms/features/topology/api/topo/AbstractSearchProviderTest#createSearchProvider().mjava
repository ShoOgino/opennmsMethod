    private SearchProvider createSearchProvider() {
        return new AbstractSearchProvider() {

            List<VertexRef> m_vertexRefs = getVertexRefs();

            @Override
            public String getSearchProviderNamespace() {
                return "test-namespace";
            }

            @Override
            public boolean contributesTo(String namespace) {
                return false;
            }

            @Override
            public List<SearchResult> query(SearchQuery searchQuery, GraphContainer graphContainer) {
                List<SearchResult> verts = new ArrayList<SearchResult>();
                for (VertexRef vertexRef : m_vertexRefs) {
                    if (searchQuery.matches(vertexRef.getLabel())) {
                        verts.add(new SearchResult(vertexRef.getNamespace(), vertexRef.getId(), vertexRef.getLabel(), searchQuery.getQueryString()));
                    }
                }
                return verts;
            }

            @Override
            public boolean supportsPrefix(String searchPrefix) {
                return false;
            }

            @Override
            public Set<VertexRef> getVertexRefsBy(SearchResult searchResult, GraphContainer container) {
                return Collections.emptySet();
            }

            @Override
            public void addVertexHopCriteria(SearchResult searchResult, GraphContainer container) {
            }

            @Override
            public void removeVertexHopCriteria(SearchResult searchResult, GraphContainer container) {
            }
        };
    }

