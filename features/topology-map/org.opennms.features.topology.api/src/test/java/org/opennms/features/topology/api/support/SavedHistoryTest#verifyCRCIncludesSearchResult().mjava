	/**
	 * This methods tests whether the CRC checksums for {@link SavedHistory} object with {@link SearchResult}s are generated correctly,
	 * namely that they now take into account the search results
	 */
	@Test
	public void verifyCRCIncludesSearchResult() {
		Map<String,String> settings = new HashMap<String,String>();
		settings.put("hello", "world");

		VertexRef vert1 = new DefaultVertexRef("nodes", "1");
		VertexRef vert2 = new DefaultVertexRef("nodes", "2", "HasALabel");

		Map<VertexRef,Point> locations = new HashMap<VertexRef,Point>();
		locations.put(vert1, new Point(0, 0));
		locations.put(vert2, new Point(0, 0));

		// Creating SavedHistory object with no search results
		SavedHistory history1 = new SavedHistory(
				1,
				new BoundingBox(0,0,100,100),
				locations,
				Collections.singleton(vert2),
				Collections.emptySet(),
				settings,
				Collections.emptyList()
		);

		List<SearchResult> searchResults = new ArrayList<>();
		searchResults.add(new SearchResult("alarm", "alarmID", "someLabel", searchQuery, SearchResult.COLLAPSIBLE, !SearchResult.COLLAPSED));

		// Creating SavedHistory object with a single search result with ID = "alarmID"
		SavedHistory history2 = new SavedHistory(
				1,
				new BoundingBox(0,0,100,100),
				locations,
				Collections.singleton(vert2),
				Collections.emptySet(),
				settings,
				searchResults
		);

		// Assertion that the SavedHistory with no search results is different from the one with one
		Assert.assertNotEquals(history1.getFragment(), history2.getFragment());

		// Creating another SavedHistory WITH search result, identical to the 2nd one
		SavedHistory history3 = new SavedHistory(
				1,
				new BoundingBox(0,0,100,100),
				locations,
				Collections.singleton(vert2),
				Collections.emptySet(),
				settings,
				searchResults
		);

		// Assertion that two SavedHistory objects with the same search results are identical
		Assert.assertEquals(history2.getFragment(), history3.getFragment());
	}

