    /**
     * Adds the possibleEventConsumer as an EventListener/EventConsumer to the
     * OSGi registry.<br/><br/>
     * 
     * The event consumer is registered when:
     * <ul>
     * <li>The object has at least one method annotated with &#64;EventConsumer</li>
     * <li>The annotated method has only one parameter.
     * </ul><br/>
     * 
     * <b>Attention:</b> If the possibleEventConsumer has no Annotation
     * &#64;EventConsumer or has multiple method parameters the object is not
     * registered as a listener! <br/>
     * 
     * The {@link VaadinApplicationContext} parameter is used to bind the event
     * consumer to the user session (otherwise all users would be informed when
     * one user provokes an event notification).
     * 
     * @param possibleEventConsumer
     *            An object with or without an annotation &#64;EventConsumer.
     * @param applicationContext
     *            must not be null. is used to bind the event consumer to the
     *            user session (otherwise all users would be informed when one
     *            user provokes an event notification).
     * @see {@link EventConsumer}, {@link EventListener}
     */
    public void addPossibleEventConsumer(Object possibleEventConsumer, VaadinApplicationContext applicationContext) {
        if (possibleEventConsumer == null) return;
        if (isPossibleEventConsumer(possibleEventConsumer)) {
            List<Method> eventConsumerMethods = getEventConsumerMethods(possibleEventConsumer.getClass());
            for (Method eachEventConsumerMethod : eventConsumerMethods) {
                boolean hasType = eachEventConsumerMethod.getParameterTypes() != null && eachEventConsumerMethod.getParameterTypes().length > 0;
                boolean hasMultipleTypes = eachEventConsumerMethod.getParameterTypes() != null && eachEventConsumerMethod.getParameterTypes().length > 1;
                if (!hasType) {
                    LOG.warn("The method '{1}' in class '{2}' is annotated as a 'EventConsumer' but does not have any event type as a parameter. Method is ignored",
                            eachEventConsumerMethod.getName(),
                            possibleEventConsumer.getClass());
                    continue;
                }
                if (hasMultipleTypes) {
                    LOG.warn("The method '{1}' in class '{2}' has multiple parameters. It must only have one parameter. Method is ignored",
                            eachEventConsumerMethod.getName(), possibleEventConsumer.getClass());
                    continue;
                }

                // create a Wrapper for the possibleEventConsumer
                EventListener listener = new EventListener();
                listener.setEventConsumer(possibleEventConsumer);
                listener.setEventMethod(eachEventConsumerMethod);

                // register as event listener for session scope
                serviceManager.registerAsService(EventListener.class, listener, applicationContext, EventListener.getProperties(eachEventConsumerMethod.getParameterTypes()[0]));
            }
        }
    }

