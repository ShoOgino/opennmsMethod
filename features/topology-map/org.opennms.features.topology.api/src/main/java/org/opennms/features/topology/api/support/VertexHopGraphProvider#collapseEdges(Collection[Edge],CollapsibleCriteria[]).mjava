	public static List<Edge> collapseEdges(Collection<Edge> edges, CollapsibleCriteria[] criteria) {
		List<Edge> retval = new ArrayList<Edge>(edges);
		List<Edge> addMe = new ArrayList<Edge>();

		for (Iterator<Edge> itr = retval.iterator(); itr.hasNext();) {
			Edge edge = itr.next();
			for (CollapsibleCriteria criterium : criteria) {
				Set<VertexRef> criteriaVertices = new HashSet<VertexRef>(criterium.getVertices());
				for (Iterator<VertexRef> critItr = criteriaVertices.iterator(); critItr.hasNext();) {
					VertexRef criteriaVertex = critItr.next();
					if (new RefComparator().compare(edge.getSource().getVertex(), criteriaVertex) == 0) {
						// Reset the edge source to the collapsed vertex
						edge.getSource().setVertex(criterium.getCollapsedRepresentation());
					} else if (new RefComparator().compare(edge.getTarget().getVertex(), criteriaVertex) == 0) {
						// Reset the edge target to the collapsed vertex
						edge.getTarget().setVertex(criterium.getCollapsedRepresentation());
					}
				}
			}
		}

		retval.addAll(addMe);
		return retval;
	}

