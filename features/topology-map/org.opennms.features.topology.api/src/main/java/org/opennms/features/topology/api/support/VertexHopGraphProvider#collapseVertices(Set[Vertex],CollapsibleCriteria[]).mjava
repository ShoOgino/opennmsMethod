    public static Set<Vertex> collapseVertices(Set<Vertex> vertices, CollapsibleCriteria[] criteria) {
        final Set<Vertex> retval = new HashSet<>();
        final Set<Vertex> verticesToProcess = new HashSet<>(vertices);

        // Replace all vertices by its collapsed representation
        for (CollapsibleCriteria collapsibleCriteria : criteria) {
            if (collapsibleCriteria.isCollapsed()) {
                final Set<VertexRef> verticesRepresentedByCollapsible = collapsibleCriteria.getVertices().stream()
                        .filter(v -> vertices.contains(v))
                        .collect(Collectors.toSet());
                verticesToProcess.removeAll(verticesRepresentedByCollapsible);
                retval.add(collapsibleCriteria.getCollapsedRepresentation());
            }
        }

        // Not all vertices may be represented by a collapsed version - either their criteria is not collapsed
        // or it is a pure vertex - therefore those are added afterwards
        retval.addAll(verticesToProcess);
        verticesToProcess.clear();

        return retval;
    }

