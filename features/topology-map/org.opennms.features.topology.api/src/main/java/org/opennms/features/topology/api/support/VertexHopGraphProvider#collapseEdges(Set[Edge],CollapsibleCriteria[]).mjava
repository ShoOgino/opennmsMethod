    /**
     * This function assumes that all criteria passed in are marked as collapsed.
     * @param edges
     * @param criteria
     * @return
     */
    public static Set<Edge> collapseEdges(Set<Edge> edges, CollapsibleCriteria[] criteria) {

        // Make a map of all of the vertices to their new collapsed representations
        Map<VertexRef,Set<Vertex>> vertexToCollapsedVertices = getMapOfVerticesToCollapsedVertices(criteria);

        if (vertexToCollapsedVertices.size() > 0) {
            Set<Edge> retval = new HashSet<Edge>();
            for (Edge edge : edges) {
                // Add the original edge to retval unless we replace it with an edge that points to a
                // collapsed vertex
                boolean addOriginalEdge = true;

                // If the source vertex is in the collapsed list...
                Set<Vertex> collapsedSources = vertexToCollapsedVertices.get(edge.getSource().getVertex());
                if (collapsedSources != null) {
                    for (VertexRef collapsedSource : collapsedSources) {
                        // Add a new edge with the source as the collapsed vertex
                        Edge newCollapsedEdge = edge.clone();
                        newCollapsedEdge.setId("collapsedSource-" + newCollapsedEdge.getId());
                        newCollapsedEdge.getSource().setVertex(collapsedSource);
                        retval.add(newCollapsedEdge);
                    }
                    // Since we just added a replacement edge, don't add the original
                    addOriginalEdge = false;
                } 

                Set<Vertex> collapsedTargets = vertexToCollapsedVertices.get(edge.getTarget().getVertex());
                if (collapsedTargets != null) {
                    for (VertexRef collapsedTarget : collapsedTargets) {
                        // Add a new edge with the target as the collapsed vertex
                        Edge newCollapsedEdge = edge.clone();
                        newCollapsedEdge.setId("collapsedTarget-" + newCollapsedEdge.getId());
                        newCollapsedEdge.getTarget().setVertex(collapsedTarget);
                        retval.add(newCollapsedEdge);
                    }
                    // Since we just added a replacement edge, don't add the original
                    addOriginalEdge = false;
                }

                // If both the source and target have been collapsed, connect all of the collapsed
                // representations to each other. This will allow collapsed groups to connect to one
                // another.
                //
                if (collapsedSources != null && collapsedTargets != null) {
                    for (VertexRef collapsedEndpoint : collapsedSources) {
                        for (VertexRef collapsedTarget : collapsedTargets) {
                            // Add a new edge with the target as the collapsed vertex
                            Edge newCollapsedEdge = edge.clone();
                            newCollapsedEdge.setId("collapsed-" + newCollapsedEdge.getId());
                            newCollapsedEdge.getSource().setVertex(collapsedEndpoint);
                            newCollapsedEdge.getTarget().setVertex(collapsedTarget);
                            retval.add(newCollapsedEdge);
                        }
                    }
                    // Since we just added a replacement edge, don't add the original
                    addOriginalEdge = false;
                }

                // Add the original edge if it wasn't replaced with an edge to a collapsed vertex
                if (addOriginalEdge) {
                    retval.add(edge);
                }
            }
            return retval;
        } else {
            return edges;
        }
    }

