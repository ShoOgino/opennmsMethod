    public void handleClick(Breadcrumb breadcrumb, GraphContainer graphContainer) {
        final GraphProvider targetGraphProvider = graphContainer.getTopologyServiceClient().getGraphProviderBy(breadcrumb.getTargetNamespace());
        if (isLeaf(breadcrumb)) {
            if (breadcrumb.getSourceVertices().isEmpty()) {
                final List<VertexRef> defaultFocus = targetGraphProvider.getDefaults().getCriteria()
                        .stream()
                        .filter(c -> c instanceof VertexHopCriteria)
                        .map(c -> ((VertexHopCriteria) c).getVertices())
                        .flatMap(Set::stream)
                        .collect(Collectors.toList());
                handleClick(graphContainer, targetGraphProvider, defaultFocus, breadcrumb);
            } else {
                List<VertexRef> oppositeVertices = breadcrumb.getSourceVertices().stream().flatMap(sourceVertex -> getOppositeVertices(graphContainer, breadcrumb.getTargetNamespace(), sourceVertex).stream()).collect(Collectors.toList());
                handleClick(graphContainer, targetGraphProvider, oppositeVertices, breadcrumb);
            }
        } else {
            Breadcrumb next = getNext(breadcrumb);
            handleClick(graphContainer, targetGraphProvider, next.getSourceVertices(), breadcrumb);
        }
    }

