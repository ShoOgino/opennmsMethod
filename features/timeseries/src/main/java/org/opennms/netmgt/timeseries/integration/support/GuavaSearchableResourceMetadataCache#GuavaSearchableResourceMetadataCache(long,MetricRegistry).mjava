    @Inject
    public GuavaSearchableResourceMetadataCache(@Named("search.resourceMetadata.maxCacheEntries") long maxSize, @Named("timeseriesMetricRegistry") MetricRegistry registry) {
        radixTree = new ConcurrentRadixTree<>(new DefaultCharArrayNodeFactory());

        LOG.info("Initializing resource metadata cache ({} max entries)", maxSize);
        cache = CacheBuilder.newBuilder().maximumSize(maxSize).removalListener(this).build();

        metricReqs = registry.meter(name("cache", "metric-reqs"));
        metricMisses = registry.meter(name("cache", "metric-misses"));
        attributeReqs = registry.meter(name("cache", "attribute-reqs"));
        attributeMisses = registry.meter(name("cache", "attribute-misses"));

        registry.register(MetricRegistry.name("cache", "size"),
                new Gauge<Long>() {
                    @Override
                    public Long getValue() {
                        return cache.size();
                    }
                });
        registry.register(MetricRegistry.name("cache", "max-size"),
                new Gauge<Long>() {
                    @Override
                    public Long getValue() {
                        return maxSize;
                    }
                });
    }

