    @Override
    public FetchResults fetch(long start, long end, long step, int maxrows, Long interval, Long heartbeat, List<Source> sources, boolean relaxed) {
        try (Timer.Context context = this.sampleReadIntegrationTimer.time()) {
            final LateAggregationParams lag = LateAggregationParams.builder().step(step).interval(interval).heartbeat(heartbeat).build();
            final Instant startTs = Instant.ofEpochMilli(start);
            final Instant endTs = Instant.ofEpochMilli(end);
            final Map<String, Object> constants = Maps.newHashMap();
            final List<QueryResource> resources = new ArrayList<>();

            // Group the sources by resource id to avoid calling the ResourceDao
            // multiple times for the same resource
            Map<OnmsResource, List<Source>> sourcesByResource = loadOnmsResources(sources, relaxed);
            if(sourcesByResource == null) {
                return null;
            }

            // Now group the sources by Newts Resource ID, which differs from the OpenNMS Resource ID.
            Map<String, List<Source>> sourcesByNewtsResourceId = Maps.newHashMap();
            for (Entry<OnmsResource, List<Source>> entry : sourcesByResource.entrySet()) {
                final OnmsResource resource = entry.getKey();
                for (Source source : entry.getValue()) {
                    // Gather the values from strings.properties
                    Utils.convertStringAttributesToConstants(source.getLabel(), resource.getStringPropertyAttributes(), constants);

                    resources.add(getResourceInfo(resource, source));

                    // Grab the attribute that matches the source
                    RrdGraphAttribute rrdGraphAttribute = resource.getRrdGraphAttributes().get(source.getAttribute());

                    if (rrdGraphAttribute == null && !Strings.isNullOrEmpty(source.getFallbackAttribute())) {
                        LOG.error("No attribute with name '{}', using fallback-attribute with name '{}'", source.getAttribute(), source.getFallbackAttribute());
                        source.setAttribute(source.getFallbackAttribute());
                        source.setFallbackAttribute(null);
                        rrdGraphAttribute = resource.getRrdGraphAttributes().get(source.getAttribute());
                    }

                    if (rrdGraphAttribute == null) {
                        if (relaxed) continue;
                        LOG.error("No attribute with name: {}", source.getAttribute());
                        return null;
                    }

                    // The Newts Resource ID is stored in the rrdFile attribute
                    String newtsResourceId = rrdGraphAttribute.getRrdRelativePath();
                    // Remove the file separator prefix, added by the RrdGraphAttribute class
                    if (newtsResourceId.startsWith(File.separator)) {
                        newtsResourceId = newtsResourceId.substring(File.separator.length(), newtsResourceId.length());
                    }

                    List<Source> listOfSources = sourcesByNewtsResourceId.computeIfAbsent(newtsResourceId, k -> Lists.newLinkedList());
                    // Create the list if it doesn't exist
                    listOfSources.add(source);
                }
            }

            // The Newts API only allows us to perform a query using a single (Newts) Resource ID,
            // so we perform multiple queries in parallel, and aggregate the results.
            Map<String, Future<Map<Source, List<Sample>>>> measurementsByNewtsResourceId = Maps.newHashMapWithExpectedSize(sourcesByNewtsResourceId.size());
            for (Entry<String, List<Source>> entry : sourcesByNewtsResourceId.entrySet()) {
                measurementsByNewtsResourceId.put(entry.getKey(),
                        threadPool.submit(() -> getMeasurementsForResourceCallable(entry.getKey(), entry.getValue(), startTs, endTs, lag)));
            }

            long[] timestamps = null;
            Map<String, double[]> columns = Maps.newHashMap();

            for (Entry<String, Future<Map<Source, List<Sample>>>> entry : measurementsByNewtsResourceId.entrySet()) {
                Map<Source, List<Sample>> sampleList;
                try {
                    sampleList = entry.getValue().get();
                } catch (InterruptedException | ExecutionException e) {
                    throw Throwables.propagate(e);
                }

                if (timestamps == null) {
                    timestamps = sampleList
                            .values()
                            .iterator().next().stream()
                            .map(Sample::getTime)
                            .mapToLong(Instant::toEpochMilli).toArray();
                }

                for (Entry<Source, List<Sample>> column : sampleList.entrySet()) {
                    double[] values = column.getValue().stream().mapToDouble(Sample::getValue).toArray();
                    columns.put(column.getKey().getLabel(), values);
                }
            }

            FetchResults fetchResults = new FetchResults(timestamps, columns, lag.getStep(), constants, new QueryMetadata(resources));
            if (relaxed) {
                Utils.fillMissingValues(fetchResults, sources);
            }
            LOG.trace("Fetch results: {}", fetchResults);
            return fetchResults;
        }
    }

