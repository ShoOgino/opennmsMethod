    public Map<String, String> getForResourcePath(final ResourcePath path) throws StorageException {
        Objects.requireNonNull(path);
        String resourceId = toResourceId(path);

        // check cache first
        Map<String, String> cachedEntry = this.cache.get(resourceId);
        if(cachedEntry != null) {
            return cachedEntry;
        }

        // not in cache -> look in database
        Map<String, String> metaData;
        final DBUtils db = new DBUtils(this.getClass());
        try {

            String sql = "SELECT name, value FROM timeseries_meta where resourceid = ?";

            final Connection connection = this.dataSource.getConnection();
            db.watch(connection);
            PreparedStatement statement = connection.prepareStatement(sql);
            db.watch(statement);
            statement.setString(1, toResourceId(path));
            ResultSet rs = statement.executeQuery();
            db.watch(rs);
            metaData = new HashMap<>();
            while (rs.next()) {
                String name = rs.getString("name");
                String value = rs.getString("value");
                metaData.put(name, value);
            }
        } catch (SQLException e) {
            LOG.error("Could not retrieve meta data for resourceId={}", resourceId, e);
            throw new StorageException(e);
        } finally {
            db.cleanUp();
        }

        // put in cache
        this.cache.put(resourceId, metaData);

        return metaData;
    }

