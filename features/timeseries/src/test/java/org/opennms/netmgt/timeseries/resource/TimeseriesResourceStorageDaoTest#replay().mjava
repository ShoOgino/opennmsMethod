    private void replay() throws StorageException {
        EasyMock.expect(searcher.search(EasyMock.anyObject(), EasyMock.anyInt())).andAnswer(new IAnswer<Set<Metric>>() {
            public Set<Metric>
            answer() {
                ResourcePath resourcePath = (ResourcePath)EasyMock.getCurrentArguments()[0];
                int depth = (Integer)EasyMock.getCurrentArguments()[1];

                int idxSuffix = resourcePath.elements().length - 1;
                int targetLen = idxSuffix + depth + 2;
                String field = "_idx"+idxSuffix; // key
                String value = String.format("(%s,%d)", toResourceId(resourcePath), targetLen); // value

                Set<Metric> metrics = new HashSet<>();
                for (Entry<ResourcePath, Set<String>> entry : indexedPaths.entrySet()) {
                    Map<String, String> attributes = Maps.newHashMap();
                    // Build the indexed attributes and attempt to match them against the given query
                    TimeseriesUtils.addIndicesToAttributes(entry.getKey(), attributes);
                    if (value.equals(attributes.get(field))) {

                        for(String name : entry.getValue()) {
                            ImmutableMetric.MetricBuilder metric =
                                    ImmutableMetric.builder()
                                    .intrinsicTag(IntrinsicTagNames.resourceId, toResourceId(entry.getKey()))
                                    .intrinsicTag(IntrinsicTagNames.name, name);
                            attributes.entrySet().stream()
                                    .map((e) -> new ImmutableTag(e.getKey(), e.getValue()))
                                    .forEach(metric::metaTag);
                            metrics.add(metric.build());
                        }
                    }
                }

                return new HashSet<>(metrics);
            }
        }).atLeastOnce();
        EasyMock.expect(searcher.getResourceAttributes(EasyMock.anyObject())).andReturn(Maps.newHashMap()).anyTimes();
        EasyMock.replay(searcher);
    }

