    /**
     * Instantiates a new evaluate statistics.
     *
     * @param registry the metrics registry
     * @param dumpFreq the dump frequency
     */
    public EvaluateStats(MetricRegistry registry, Integer dumpFreq) {
        Assert.notNull(registry, "MetricRegistry is required");
        Assert.notNull(dumpFreq, "Dump frequency is required");
        Assert.isTrue(dumpFreq > 0, "Dump frequency must be positive");

        final Gauge<Integer> node = () -> { return nodeMap.keySet().size(); };
        registry.register(MetricRegistry.name("evaluate", "node"), node);

        final Gauge<Integer> resources = () -> { return resourceMap.keySet().size(); };
        registry.register(MetricRegistry.name("evaluate", "resources"), resources);

        final Gauge<Integer> numericAttributes = () -> { return numericAttributeMap.keySet().size(); };
        registry.register(MetricRegistry.name("evaluate", "numeric-attributes"), numericAttributes);

        final Gauge<Integer> stringAttributes = () -> { return stringAttributeMap.keySet().size(); };
        registry.register(MetricRegistry.name("evaluate", "string-attributes"), stringAttributes);

        if (ResourceTypeUtils.isStoreByGroup()) {
            final Gauge<Integer> groups = () -> { return groupMap.keySet().size(); };
            registry.register(MetricRegistry.name("evaluate", "groups"), groups);
        }

        samplesMeter = registry.meter(MetricRegistry.name("evaluate", "samples"));

        Logging.withPrefix(LOGGING_PREFFIX, () -> {
            final Slf4jReporter reporter = Slf4jReporter.forRegistry(registry)
                    .outputTo(LoggerFactory.getLogger(LOGGING_PREFFIX))
                    .convertRatesTo(TimeUnit.SECONDS)
                    .convertDurationsTo(TimeUnit.MILLISECONDS)
                    .build();
            reporter.start(dumpFreq, TimeUnit.MINUTES);
        });

    }

