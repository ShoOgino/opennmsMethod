	/**
	 * Loads the <code>resourceName</code> from the classpath using the given
	 * <code>clazz</code>. If the resource couldn't be loaded an empty string is
	 * returned.
	 * 
	 * @param clazz
	 *            The class to use for loading the resource.
	 * @param resourceName
	 *            The name of the resource to be loaded (e.g.
	 *            /folder/filename.txt)
	 * @return The content of the file, each line separated by line.separator or
	 *         empty string if the resource does not exist.
	 */
	public static String loadContentFromFile(final Class<?> clazz, final String resourceName) {
		// prevent NullPointerException
		if (clazz == null || resourceName == null) {
			LOG.warn("loadContentFromFile not invoked, due to null arguments");
			return "";
		}

		// check if resource is there
		final InputStream is = clazz.getResourceAsStream(resourceName);
		if (is == null) {
			LOG.warn("Resource '{}' couldn't be loaded from class '{}'", resourceName, clazz.getName());
			return "";
		}

		// resource is there, so we can try loading it
		BufferedReader bufferedReader = null;
		StringBuilder result = new StringBuilder(100);
		try {
			bufferedReader = new BufferedReader(new InputStreamReader(is));
			String eachLine = null;
			while ((eachLine = bufferedReader.readLine()) != null) {
				result.append(eachLine);
				result.append(System.getProperty("line.separator"));
			}
		} catch (IOException ioEx) {
			LOG.error("Error while reading resource from '{}'.", resourceName, ioEx);
		} finally {
			closeSilently(bufferedReader);
		}
		return result.toString();
	}

