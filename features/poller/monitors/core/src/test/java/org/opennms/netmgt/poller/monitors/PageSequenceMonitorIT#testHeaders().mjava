    @Test
    @JUnitHttpServer(basicAuth = true, port = 10342, webapps = @Webapp(context = "/opennms", path = "src/test/resources/loginTestWar"))
    public void testHeaders() throws Exception {
        final Map<String, Object> params1 = new HashMap<>(m_params);
        params1.put("page-sequence", "" +
                "<?xml version=\"1.0\"?>" +
                "<page-sequence>\n" +
                "  <page virtual-host=\"localhost\" path=\"/opennms/j_spring_security_check\" port=\"10342\" method=\"POST\" response-range=\"300-399\" locationMatch=\"/opennms/\">\n" +
                "    <header name=\"Authorization\" value=\"Basic " + new String(Base64.encodeBase64(("admin:istrator").getBytes())) + "\" />\n" +
                "  </page>\n" +
                "</page-sequence>\n");
        final PollStatus status1 = m_monitor.poll(getHttpService("localhost"), params1);
        assertEquals(PollStatus.SERVICE_AVAILABLE, status1.getStatusCode());
        assertNull(status1.getReason());

        final Map<String, Object> params2 = new HashMap<>(m_params);
        params2.put("page-sequence", "" +
                "<?xml version=\"1.0\"?>" +
                "<page-sequence>\n" +
                "  <page virtual-host=\"localhost\" path=\"/opennms/j_spring_security_check\" port=\"10342\" method=\"POST\" response-range=\"300-399\" locationMatch=\"/opennms/\">\n" +
                "    <header name=\"Authorization\" value=\"Basic " + new String(Base64.encodeBase64(("admin:wrong").getBytes())) + "\" />\n" +
                "  </page>\n" +
                "</page-sequence>\n");
        final PollStatus status2 = m_monitor.poll(getHttpService("localhost"), params2);
        assertEquals(PollStatus.SERVICE_UNAVAILABLE, status2.getStatusCode());
        assertNotNull(status2.getReason());
    }

