    @Override
    public PollStatus poll(final MonitoredService svc, final Map<String, Object> parameters) {

        // Create the client
        final RpcClient<EchoRequest, EchoResponse> client = rpcClientFactory.get().getClient(EchoRpcModule.INSTANCE);

        final Map<String, Object> interpolatedAttributes = Interpolator.interpolateObjects(parameters, new FallbackScope(
                entityScopeProvider.get().getScopeForNode(svc.getNodeId()),
                entityScopeProvider.get().getScopeForInterface(svc.getNodeId(), svc.getIpAddr()),
                entityScopeProvider.get().getScopeForService(svc.getNodeId(), svc.getAddress(), svc.getSvcName())
        ));

        Long ttlInMs = ParameterMap.getLongValue(MetadataConstants.TTL, interpolatedAttributes.get(MetadataConstants.TTL), null);

        int messageSize = ParameterMap.getIntValue( MESSAGE_SIZE, interpolatedAttributes.get(MESSAGE_SIZE), DEFAULT_MESSAGE_SIZE);
        if (messageSize < 0) {
            messageSize = 0;
        }

        // Build the request
        final OnmsNode node = nodeDao.get().get(svc.getNodeId());
        final EchoRequest request = new EchoRequest();
        request.setId(System.currentTimeMillis());
        request.setMessage(Strings.repeat("*", messageSize));
        request.setLocation(node.getLocation().getLocationName());
        request.setSystemId(node.getForeignId());
        request.setTimeToLiveMs(ttlInMs);
        request.addTracingInfo(RpcRequest.TAG_NODE_ID, String.valueOf(node.getId()));
        request.addTracingInfo(RpcRequest.TAG_NODE_LABEL, node.getLabel());
        request.addTracingInfo(RpcRequest.TAG_CLASS_NAME, MinionRpcMonitor.class.getCanonicalName());
        request.addTracingInfo(RpcRequest.TAG_IP_ADDRESS, InetAddressUtils.toIpAddrString(svc.getAddress()));

        try {
            final EchoResponse response = client.execute(request).get();
            final Long responseTime = System.currentTimeMillis() - response.getId();
            return PollStatus.available(responseTime.doubleValue());
        } catch (InterruptedException|ExecutionException t) {
            return RpcExceptionUtils.handleException(t, this);
        }
    }

