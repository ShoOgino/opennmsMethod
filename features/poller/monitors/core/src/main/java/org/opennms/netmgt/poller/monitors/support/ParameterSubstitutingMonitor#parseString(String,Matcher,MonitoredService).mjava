    protected static String parseString(final String unformattedString, final Matcher m, final MonitoredService svc) {
        Pattern p = subPatterns.get(m.group(1));
        if (p != null) {
        } else {
            LOG.error("invalid substitution pattern found: {}", m.group(1));
            return null;
        }
        Matcher n = p.matcher(unformattedString);
        String formattedString;
        if (n.matches()) {
            StringBuilder sb = new StringBuilder();
            sb.append(n.group(1));
            switch (m.group(1)) {
                case "ipAddr":
                case "ipAddress":
                    sb.append(svc.getIpAddr());
                    break;
                case "nodeId":
                    sb.append(svc.getNodeId());
                    break;
                case "nodeLabel":
                    sb.append(svc.getNodeLabel());
                    break;
                case "foreignId":
                    sb.append(nodeDao.get().get(svc.getNodeId()).getForeignId());
                    break;
                case "foreignSource":
                    sb.append(nodeDao.get().get(svc.getNodeId()).getForeignSource());
                    break;
                default:
                    LOG.debug("attempting to add node asset property {}", m.group(1));
                    OnmsNode node = nodeDao.get().get(svc.getNodeId());
                    if (node != null) {
                        BeanWrapper wrapper = new BeanWrapperImpl(node.getAssetRecord());
                        Object obj = wrapper.getPropertyValue(m.group(1));
                        if (obj != null) {
                            sb.append(obj.toString());
                        }
                    }
            }
            sb.append(n.group(2));
            formattedString = sb.toString();
        } else {
            // We should never end up here since we should have a match, see getSubstitutedParameters(): if(m.matches){...}
            // If we get here something is wrong with the regexp => throw an exception
            throw new IllegalStateException(
                    String.format("Engineering mistake: we should never end up here, the regular expression seems to have a problem: %s", substitutionPattern.toString()));
        }
        Matcher o = substitutionPattern.matcher(formattedString);
        if (o.matches()) {
            return parseString(formattedString, o, svc);
        }
        return formattedString;
    }

