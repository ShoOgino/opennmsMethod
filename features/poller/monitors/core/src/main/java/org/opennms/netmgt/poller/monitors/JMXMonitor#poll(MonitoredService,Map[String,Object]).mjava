    /**
     * {@inheritDoc}
     */
    @Override
    public PollStatus poll(MonitoredService svc, Map<String, Object> map) {
        final InetAddress ipv4Addr = svc.getAddress();

        PollStatus serviceStatus = PollStatus.unavailable();
        try {
            final Timer timer = new Timer();
            final JmxConnectionManager connectionManager = new DefaultConnectionManager(
                    ParameterMap.getKeyedInteger(map, "retry", 3));
            final JmxConnectionManager.RetryCallback retryCallback = new JmxConnectionManager.RetryCallback() {
                @Override
                public void onRetry() {
                    timer.reset();
                }
            };

            try (JmxServerConnectionWrapper connection = connectionManager.connect(getConnectionName(), ipv4Addr,
                    JmxUtils.convertToStringMap(map), retryCallback)) {
                if (LOG.isDebugEnabled()) {
                    LOG.debug("connected to JMX server {} on {}", getConnectionName(), InetAddressUtils.str(ipv4Addr));
                }

                // Start with simple communication
                connection.getMBeanServerConnection().getMBeanCount();

                // Take time just here to get not influenced by test execution
                // time
                final long nanoResponseTime = System.nanoTime() - timer.getStartTime();

                // Find all variable definitions
                final Map<String, Object> variables = Maps.newHashMap();
                for (final String key : map.keySet()) {
                    // Skip fast if it does not start with the prefix
                    if (!key.startsWith(PARAM_BEAN_PREFIX)) {
                        continue;
                    }

                    // Get the variable name
                    final String variable = key.substring(PARAM_BEAN_PREFIX.length());

                    // Get the variable definition
                    final String definition = ParameterMap.getKeyedString(map, key, null);

                    // Store wrapper for variable definition
                    variables.put(variable,
                            ObjectNameWrapper.create(connection.getMBeanServerConnection(), definition));
                }

                // Find all test definitions
                final Map<String, Expression> tests = Maps.newHashMap();
                for (final String key : map.keySet()) {
                    // Skip fast if it does not start with the prefix
                    if (!key.startsWith(PARAM_TEST_PREFIX)) {
                        continue;
                    }

                    // Get the test name
                    final String variable = key.substring(PARAM_TEST_PREFIX.length());

                    // Get the test definition
                    final String definition = ParameterMap.getKeyedString(map, key, null);

                    // Build the expression from the definition
                    final Expression expression = JEXL_ENGINE.createExpression(definition);

                    // Store expressions
                    tests.put(variable, expression);
                }

                // Also handle a single test
                if (map.containsKey(PARAM_TEST)) {
                    // Get the test definition
                    final String definition = ParameterMap.getKeyedString(map, PARAM_TEST, null);

                    // Build the expression from the definition
                    final Expression expression = JEXL_ENGINE.createExpression(definition);

                    // Store expressions
                    tests.put(null, expression);
                }

                // Build the context for all tests
                final JexlContext context = new ReadonlyContext(new MapContext(variables));
                serviceStatus = PollStatus.up(nanoResponseTime / 1000000.0);

                // Execute all tests
                for (final Map.Entry<String, Expression> e : tests.entrySet()) {
                    try {
                        if (!(boolean) e.getValue().evaluate(context)) {
                            serviceStatus = PollStatus.down("Test failed: " + e.getKey());
                            break;
                        }
                    } catch (final Throwable t) {
                        LOG.warn("failed to execute test {}", e.getKey(), t);
                        serviceStatus = PollStatus.down("Test failed: " + e.getKey());
                        break;
                    }
                }

            } catch (JmxServerConnectionException mbse) {
                // Number of retries exceeded
                String reason = "IOException while polling address: " + ipv4Addr;
                LOG.debug(reason, mbse);
                serviceStatus = PollStatus.unavailable(reason);
            }
        } catch (Throwable e) {
            String reason = "Monitor - failed! " + InetAddressUtils.str(ipv4Addr);
            LOG.debug(reason, e);
            serviceStatus = PollStatus.unavailable(reason);
        }
        return serviceStatus;
    }

