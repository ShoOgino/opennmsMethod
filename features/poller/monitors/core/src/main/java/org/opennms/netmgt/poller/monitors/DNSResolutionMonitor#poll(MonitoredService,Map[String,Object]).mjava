    @Override
    public PollStatus poll(MonitoredService svc, Map<String, Object> parameters) {
        // Get the name to query for
        final Name name;
        final String lookup = ParameterMap.getKeyedString(parameters, PARM_LOOKUP, svc.getNodeLabel());
        try {
            name = new Name(lookup);

        } catch (final TextParseException e) {
            return PollStatus.unavailable("Invalid record name '" + lookup + "': " + e.getMessage());
        }

        // Determine if records for IPv4 and/or IPv6 re required
        final String resolutionType = ParameterMap.getKeyedString(parameters,
                                                                  PARM_RESOLUTION_TYPE,
                                                                  PARM_RESOLUTION_TYPE_DEFAULT);
        final boolean ipv4Required = PARM_RESOLUTION_TYPE_V4.equalsIgnoreCase(resolutionType) ||
                                     PARM_RESOLUTION_TYPE_BOTH.equals(resolutionType);
        final boolean ipv6Required = PARM_RESOLUTION_TYPE_V6.equalsIgnoreCase(resolutionType) ||
                                     PARM_RESOLUTION_TYPE_BOTH.equals(resolutionType);

        // Build a resolver object used for lookups
        final String nameserver = ParameterMap.getKeyedString(parameters,
                                                              PARM_NAMESERVER,
                                                              null);

        final Resolver resolver;
        try {
            if (nameserver == null) {
                // Use system-defined resolvers
                resolver = new ExtendedResolver();
            } else {
                resolver = new SimpleResolver(nameserver);
            }

        } catch (final UnknownHostException e) {
            return PollStatus.unavailable("Unable to resolve nameserver '" + nameserver + "': " + e.getMessage());
        }

        // Start resolving the records
        final long start = System.currentTimeMillis();

        // Resolve the name
        final boolean ipv4Found = resolve(name, resolver, Type.A);
        final boolean ipv6Found = resolve(name, resolver, Type.AAAA);

        // Resolving succeeded - checking results
        final long end = System.currentTimeMillis();

        // Check if result is valid
        if (!ipv4Found && !ipv6Found) {
            return PollStatus.unavailable("Unable to resolve host '" + name + "'");

        } else  if (ipv4Required && !ipv4Found) {
            return PollStatus.unavailable("'" + name + "' could be resolved to an IPv6 address (AAAA record) but not an IPv4 address (A record)");

        } else if (ipv6Required && !ipv6Found) {
            return PollStatus.unavailable("'" + name + "' could be resolved to an IPv4 address (A record) but not an IPv6 address (AAAA record)");

        } else {
            return PollStatus.available((double) (end - start));
        }
    }

