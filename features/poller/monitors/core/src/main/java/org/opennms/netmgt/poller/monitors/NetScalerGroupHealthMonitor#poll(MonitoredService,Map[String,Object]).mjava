    public PollStatus poll(MonitoredService svc, Map<String, Object> parameters) {
        InetAddress ipaddr = svc.getAddress();

        final SnmpAgentConfig agentConfig = getAgentConfig(svc, parameters);
        final String hostAddress = InetAddressUtils.str(ipaddr);

        PollStatus status = PollStatus.unavailable("NetScalerGroupHealthMonitor: cannot determinate group health, addr=" + hostAddress);

        int groupHealth = ParameterMap.getKeyedInteger(parameters, "group-health", 60);
        String groupName = ParameterMap.getKeyedString(parameters, "group-name", null);
        if (groupName == null) {
            status.setReason("NetScalerGroupHealthMonitor no group-name defined, addr=" + hostAddress);
            LOG.warn("NetScalerGroupHealthMonitor.poll: No Service Name Defined!");
            return status;
        }

        int snLength = groupName.length();
        StringBuffer serviceOidBuf = new StringBuffer(SVC_GRP_MEMBER_STATE);
        serviceOidBuf.append(".").append(Integer.toString(snLength));
        for (byte thisByte : groupName.getBytes()) {
            serviceOidBuf.append(".").append(Byte.toString(thisByte));
        }
        LOG.debug("For group name '{}', OID to check is {}", groupName, serviceOidBuf.toString());

        try {
            final SnmpObjId groupStateOid = SnmpObjId.get(serviceOidBuf.toString());
            final Map<SnmpInstId, SnmpValue> hostResults = new HashMap<SnmpInstId, SnmpValue>();
            RowCallback callback = new RowCallback() {
                @Override
                public void rowCompleted(SnmpRowResult result) {
                    hostResults.put(result.getInstance(), result.getValue(groupStateOid));
                }
            };
            TableTracker tracker = new TableTracker(callback, groupStateOid);
            SnmpWalker walker = SnmpUtils.createWalker(agentConfig, "NetScalerGroupHealthMonitor", tracker);
            walker.start();
            walker.waitFor();

            int totalServers = hostResults.size();
            if (totalServers == 0) {
                status = PollStatus.unavailable("NetScalerGroupHealthMonitor poll failed: there are 0 servers on group " + groupName + " for " + hostAddress);
                LOG.debug(status.getReason());
            }

            int activeServers = 0;
            for (SnmpValue v : hostResults.values()) {
                if (v.toInt() == 7) {
                    activeServers++;
                }
            }

            double health = (new Double(activeServers)/new Double(totalServers)) * 100.0;
            LOG.debug("There are {} of {} active servers ({}%) on group {} for NetScaler {}", activeServers, totalServers, health, groupName, hostAddress);

            if (health >= groupHealth) {
                status = PollStatus.available();
            } else {
                status = PollStatus.unavailable("NetScalerGroupHealthMonitor poll failed: there are " + activeServers + " of " + totalServers + " servers active (" + health + "%) on group " + groupName + ", which is less than " + groupHealth + "% for " + hostAddress);
                LOG.debug(status.getReason());
            }
        } catch (Throwable t) {
            status = PollStatus.unavailable("Unexpected exception during SNMP poll of interface " + hostAddress);
            LOG.warn(status.getReason(), t);
        }
        return status;
    }

