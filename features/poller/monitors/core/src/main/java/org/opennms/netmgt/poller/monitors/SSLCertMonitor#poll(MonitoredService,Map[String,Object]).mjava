    /**
     * {@inheritDoc}
     *
     * Poll the specified address for HTTP service availability.
     *
     * During the poll an attempt is made to connect on the specified port. If
     * the connection request is successful, check the X509Certificates provided
     * by our peer and check that our time is between the certificates start and
     * end time.
     * Provided that the interface's response is valid we set the service status to
     * SERVICE_AVAILABLE and return.
     */
    @Override
    public PollStatus poll(final MonitoredService svc, final Map<String, Object> parameters) {
        TimeoutTracker tracker = new TimeoutTracker(parameters, DEFAULT_RETRY, DEFAULT_TIMEOUT);

        // Port
        int port = ParameterMap.getKeyedInteger(parameters, PARAMETER_PORT, DEFAULT_PORT);
        if (port == DEFAULT_PORT) {
            throw new RuntimeException("Required parameter 'port' is not present in supplied properties.");
        }

        // Remaining days
        int validityDays = ParameterMap.getKeyedInteger(parameters, PARAMETER_DAYS, DEFAULT_DAYS);
        if (validityDays <= 0) {
            throw new RuntimeException("Required parameter 'days' must be a positive value.");
        }

        // Server name (optional)
        final String serverName = PropertiesUtils.substitute(ParameterMap.getKeyedString(parameters, PARAMETER_SERVER_NAME, ""),
                                                             getServiceProperties(svc));

        final String stlsInitiate = PropertiesUtils.substitute(resolveKeyedString(parameters, PARAMETER_STLS_INIT, ""),
                                                             getServiceProperties(svc));

        final String stlsInitExpectedResp = PropertiesUtils.substitute(resolveKeyedString(parameters, PARAMETER_STLS_INIT_RESP, ""),
                                                             getServiceProperties(svc));

        final String tlsStart = PropertiesUtils.substitute(resolveKeyedString(parameters, PARAMETER_STLS_START, ""),
                                                             getServiceProperties(svc));

        final String tlsStartResp = PropertiesUtils.substitute(resolveKeyedString(parameters, PARAMETER_STLS_START_RESP, ""),
                                                             getServiceProperties(svc));

        // Calculate validity range
        Calendar calValid = this.getCalendarInstance();
        Calendar calCurrent = this.getCalendarInstance();
        calValid.setTimeInMillis(calCurrent.getTimeInMillis());
        calValid.add(Calendar.DAY_OF_MONTH, validityDays);

        Calendar calBefore = this.getCalendarInstance();
        Calendar calAfter = this.getCalendarInstance();

        // Get the address instance
        InetAddress ipAddr = svc.getAddress();

        final String hostAddress = InetAddressUtils.str(ipAddr);
        LOG.debug("poll: address={}, port={}, serverName={}, {}", hostAddress, port, serverName, tracker);

        // Give it a whirl
        PollStatus serviceStatus = PollStatus.unavailable();
        for (tracker.reset(); tracker.shouldRetry() && !serviceStatus.isAvailable(); tracker.nextAttempt()) {
            Socket socket = null;
            BufferedReader r = null;
            BufferedWriter wr = null;
            try {
                tracker.startAttempt();

                socket = new Socket();
                socket.connect(new InetSocketAddress(ipAddr, port), tracker.getConnectionTimeout());
                socket.setSoTimeout(tracker.getSoTimeout());
                r = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                wr = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));
                LOG.debug("Connected to host: {} on port: {}", ipAddr, port);

                // We're connected, so upgrade status to unresponsive
                serviceStatus = PollStatus.unresponsive();

                // xmpp (and probably others) make you find out if the server supports STARTTLS
                // at the protocol level before actually trying to start it
                boolean stlsSupported = SocketUtils.validResponse(stlsInitiate, stlsInitExpectedResp, r, wr) &&
                    SocketUtils.validResponse(tlsStart, tlsStartResp, r, wr);
                if (!stlsSupported) {
                    serviceStatus = PollStatus.unavailable("STARTTLS requested, but server does not support STARTTLS.");
                    return serviceStatus;
                }

                SSLSocket sslSocket = SocketUtils.wrapSocketInSslContext(socket, null, null);
                // Use the server name as as SNI host name if available
                if (!Strings.isNullOrEmpty(serverName)) {
                    final SSLParameters sslParameters = sslSocket.getSSLParameters();
                    sslParameters.setServerNames(ImmutableList.of(new SNIHostName(serverName)));
                    sslSocket.setSSLParameters(sslParameters);

                    // Check certificates host name
                    if (!new StrictHostnameVerifier().verify(serverName, sslSocket.getSession())) {
                        serviceStatus = PollStatus.unavailable("Host name verification failed - certificate common name is invalid");
                        continue;
                    }
                }

                Certificate[] certs = sslSocket.getSession().getPeerCertificates();
                for (int i = 0; i < certs.length && !serviceStatus.isAvailable(); i++) {
                    if (certs[i] instanceof X509Certificate) {
                        X509Certificate certx = (X509Certificate) certs[i];
                        LOG.debug("Checking validity against dates: [current: {}, valid: {}], NotBefore: {}, NotAfter: {}", calCurrent.getTime(), calValid.getTime(), certx.getNotBefore(), certx.getNotAfter());
                        calBefore.setTime(certx.getNotBefore());
                        calAfter.setTime(certx.getNotAfter());
                        if (calCurrent.before(calBefore)) {
                            LOG.debug("Certificate is invalid, current time is before start time");
                            serviceStatus = PollStatus.unavailable("Certificate is invalid, current time is before start time");
                            break;
                        } else if (calCurrent.before(calAfter)) {
                            if (calValid.before(calAfter)) {
                                LOG.debug("Certificate is valid, and does not expire before validity check date");
                                serviceStatus = PollStatus.available(tracker.elapsedTimeInMillis());
                                break;
                            } else {
                                String reason = "Certificate is valid, but will expire within " + validityDays + " days (" + certx.getNotAfter() + ").";
                                LOG.debug(reason);
                                serviceStatus = PollStatus.unavailable(reason);
                                break;
                            }
                        } else {
                            LOG.debug("Certificate has expired.");
                            serviceStatus = PollStatus.unavailable("Certificate has expired.");
                            break;
                        }
                    }
                }

            } catch (NoRouteToHostException e) {
                String reason = "No route to host exception for address " + hostAddress;
                LOG.debug(reason, e);
                serviceStatus = PollStatus.unavailable(reason);
                break; // Break out of for(;;)
            } catch (InterruptedIOException e) {
                String reason = "did not connect to host with " + tracker;
                LOG.debug(reason);
                serviceStatus = PollStatus.unavailable(reason);
            } catch (ConnectException e) {
                String reason = "Connection exception for address: " + ipAddr;
                LOG.debug(reason, e);
                serviceStatus = PollStatus.unavailable(reason);
            } catch (IOException e) {
                String reason = "IOException while polling address: " + ipAddr;
                LOG.debug(reason, e);
                serviceStatus = PollStatus.unavailable(reason);
            } finally {
                try {
                    if (r != null) {
                        r.close();
                    }
                    if (wr != null) {
                        wr.close();
                    }
                    if (socket != null) {
                        socket.close();
                    }
                } catch (IOException e) {
                    e.fillInStackTrace();
                    LOG.debug("poll: Error closing socket.", e);
                }
            }
        }

        return serviceStatus;
    }

