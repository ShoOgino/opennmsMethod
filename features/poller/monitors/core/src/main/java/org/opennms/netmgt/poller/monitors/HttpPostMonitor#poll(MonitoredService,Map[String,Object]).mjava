    /**
     * {@inheritDoc}
     *
     * Poll the specified address for service availability.
     *
     * During the poll an attempt is made to execute the named method (with optional input) connect on the specified port. If
     * the exec on request is successful, the banner line generated by the
     * interface is parsed and if the banner text indicates that we are talking
     * to Provided that the interface's response is valid we set the service
     * status to SERVICE_AVAILABLE and return.
     */
    public PollStatus poll(MonitoredService svc, Map<String, Object> parameters) {
        // Process parameters
        TimeoutTracker tracker = new TimeoutTracker(parameters, DEFAULT_RETRY, DEFAULT_TIMEOUT);

        // Port
        int port = ParameterMap.getKeyedInteger(parameters, PARAMETER_PORT, DEFAULT_PORT);

        //URI
        String strURI = resolveKeyedString(parameters, PARAMETER_URI, DEFAULT_URI);

        //Username
        String strUser = resolveKeyedString(parameters, PARAMETER_USERNAME, null);

        //Password
        String strPasswd = resolveKeyedString(parameters, PARAMETER_PASSWORD, null);

        //BannerMatch
        String strBannerMatch = resolveKeyedString(parameters, PARAMETER_BANNER, null);

        //Scheme
        String strScheme = ParameterMap.getKeyedString(parameters, PARAMETER_SCHEME, DEFAULT_SCHEME);

        //Payload
        String strPayload = ParameterMap.getKeyedString(parameters, PARAMETER_PAYLOAD, null);

        //Mimetype
        String strMimetype = ParameterMap.getKeyedString(parameters, PARAMETER_MIMETYPE, DEFAULT_MIMETYPE);

        //Charset
        String strCharset = ParameterMap.getKeyedString(parameters, PARAMETER_CHARSET, DEFAULT_CHARSET);

        //SSLFilter
        boolean boolSSLFilter = ParameterMap.getKeyedBoolean(parameters, PARAMETER_SSLFILTER, DEFAULT_SSLFILTER);

        // Get the address instance.
        InetAddress ipAddr = svc.getAddress();

        final String hostAddress = InetAddressUtils.str(ipAddr);

        LOG.debug("poll: address = {}, port = {}, {}", hostAddress, port, tracker);

        // Give it a whirl
        PollStatus serviceStatus = PollStatus.unavailable();

        for (tracker.reset(); tracker.shouldRetry() && !serviceStatus.isAvailable(); tracker.nextAttempt()) {
            HttpClientWrapper clientWrapper = null;
            try {
                tracker.startAttempt();

                clientWrapper = HttpClientWrapper.create()
                        .setConnectionTimeout(tracker.getSoTimeout())
                        .setSocketTimeout(tracker.getSoTimeout())
                        .setRetries(DEFAULT_RETRY);

                if (boolSSLFilter)  {
                    clientWrapper.trustSelfSigned(strScheme);
                }
                HttpEntity postReq;

                if (strUser != null && strPasswd != null) {
                    clientWrapper.addBasicCredentials(strUser, strPasswd);
                }

                setUseSystemProxyIfDefined(clientWrapper, parameters);

                try {
                    postReq = new StringEntity(strPayload, ContentType.create(strMimetype, strCharset));
                } catch (final UnsupportedCharsetException e) {
                    serviceStatus = PollStatus.unavailable("Unsupported encoding encountered while constructing POST body " + e);
                    break;
                }

                URIBuilder ub = new URIBuilder();
                ub.setScheme(strScheme);
                ub.setHost(hostAddress);
                ub.setPort(port);
                ub.setPath(strURI);

                LOG.debug("HttpPostMonitor: Constructed URL is {}", ub);

                HttpPost post = new HttpPost(ub.build());
                post.setEntity(postReq);
                CloseableHttpResponse response = clientWrapper.execute(post);

                LOG.debug("HttpPostMonitor: Status Line is {}", response.getStatusLine());

                if (response.getStatusLine().getStatusCode() > 399) {
                    LOG.info("HttpPostMonitor: Got response status code {}", response.getStatusLine().getStatusCode());
                    LOG.debug("HttpPostMonitor: Received server response: {}", response.getStatusLine());
                    LOG.debug("HttpPostMonitor: Failing on bad status code");
                    serviceStatus = PollStatus.unavailable("HTTP(S) Status code " + response.getStatusLine().getStatusCode());
                    break;
                }

                LOG.debug("HttpPostMonitor: Response code is valid");
                double responseTime = tracker.elapsedTimeInMillis();

                HttpEntity entity = response.getEntity();
                InputStream responseStream = entity.getContent();
                String Strresponse = IOUtils.toString(responseStream);

                if (Strresponse == null)
                    continue;

                LOG.debug("HttpPostMonitor: banner = {}", Strresponse);
                LOG.debug("HttpPostMonitor: responseTime= {}ms", responseTime);

                //Could it be a regex?
                if (!Strings.isNullOrEmpty(strBannerMatch) && strBannerMatch.startsWith("~")) {
                    if (!Strresponse.matches(strBannerMatch.substring(1))) {
                        serviceStatus = PollStatus.unavailable("Banner does not match Regex '"+strBannerMatch+"'");
                        break;
                    }
                    else {
                        serviceStatus = PollStatus.available(responseTime);
                    }
                }
                else {
                    if (Strresponse.indexOf(strBannerMatch) > -1) {
                        serviceStatus = PollStatus.available(responseTime);
                    }
                    else {
                        serviceStatus = PollStatus.unavailable("Did not find expected Text '"+strBannerMatch+"'");
                        break;
                    }
                }

            } catch (final URISyntaxException e) {
                final String reason = "URISyntaxException for URI: " + strURI + " " + e.getMessage();
                LOG.debug(reason, e);
                serviceStatus = PollStatus.unavailable(reason);
                break;
            } catch (final Exception e) {
                final String reason = "Exception: " + e.getMessage();
                LOG.debug(reason, e);
                serviceStatus = PollStatus.unavailable(reason);
                break;
            } finally {
                IOUtils.closeQuietly(clientWrapper);
            }
        }

        // return the status of the service
        return serviceStatus;
    }

