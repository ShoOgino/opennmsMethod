    @Override
    public CompletableFuture<PollerResponse> execute() {
        if (serviceMonitor == null) {
            throw new IllegalArgumentException("Monitor or monitor class name is required.");
        } else if (service == null) {
            throw new IllegalArgumentException("Monitored service is required.");
        }

        final Map<String, Object> interpolatedAttributes = Interpolator.interpolateObjects(attributes, new FallbackScope(
            this.client.getEntityScopeProvider().getScopeForNode(service.getNodeId()),
            this.client.getEntityScopeProvider().getScopeForInterface(service.getNodeId(), service.getIpAddr()),
            this.client.getEntityScopeProvider().getScopeForService(service.getNodeId(), service.getAddress(), service.getSvcName())
        ));

        final RpcTarget target = client.getRpcTargetHelper().target()
                .withNodeId(service.getNodeId())
                .withLocation(service.getNodeLocation())
                .withSystemId(systemId)
                .withServiceAttributes(interpolatedAttributes)
                .withLocationOverride((s) -> serviceMonitor.getEffectiveLocation(s))
                .build();

        final PollerRequestDTO request = new PollerRequestDTO();
        request.setLocation(target.getLocation());
        request.setSystemId(target.getSystemId());
        request.setClassName(className != null ? className : serviceMonitor.getClass().getCanonicalName());
        request.setServiceName(service.getSvcName());
        request.setAddress(service.getAddress());
        request.setNodeId(service.getNodeId());
        request.setNodeLabel(service.getNodeLabel());
        request.setNodeLocation(service.getNodeLocation());
        request.setTimeToLiveMs(ttlInMs);
        request.addAttributes(interpolatedAttributes);

        // Retrieve the runtime attributes, which may include attributes
        // such as the agent details and other state related attributes
        // which should be included in the request
        final Map<String, Object> parameters = request.getMonitorParameters();
        request.addAttributes(serviceMonitor.getRuntimeAttributes(request, parameters));

        // Execute the request
        return client.getDelegate().execute(request).thenApply(results -> {
            PollStatus pollStatus = results.getPollStatus();
            // Invoke the adapters in the same order as which they were added
            for (ServiceMonitorAdaptor adaptor : adaptors) {
                // The adapters may update the status
                pollStatus = adaptor.handlePollResult(service, interpolatedAttributes, pollStatus);
            }
            results.setPollStatus(pollStatus);
            return results;
        });
    }

