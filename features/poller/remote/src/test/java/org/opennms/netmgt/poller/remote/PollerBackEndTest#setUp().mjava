    @Override
    protected void setUp() throws Exception {


        System.setProperty("opennms.home", "src/test/test-configurations/PollerBackEndTest-home");

        m_locMonDao = m_mocks.createMock(LocationMonitorDao.class);
        m_monSvcDao = m_mocks.createMock(MonitoredServiceDao.class);
        m_pollerConfig = m_mocks.createMock(PollerConfig.class);
        m_timeKeeper = m_mocks.createMock(TimeKeeper.class);
        m_eventIpcManager = m_mocks.createMock(EventIpcManager.class);

        m_backEnd = new DefaultPollerBackEnd();
        m_backEnd.setLocationMonitorDao(m_locMonDao);
        m_backEnd.setMonitoredServiceDao(m_monSvcDao);
        m_backEnd.setPollerConfig(m_pollerConfig);
        m_backEnd.setTimeKeeper(m_timeKeeper);
        m_backEnd.setEventIpcManager(m_eventIpcManager);
        m_backEnd.setDisconnectedTimeout(DISCONNECTED_TIMEOUT);

        
        m_startTime = new Date(System.currentTimeMillis() - 600000);
        expect(m_timeKeeper.getCurrentDate()).andReturn(m_startTime);
        replay(m_timeKeeper);
        m_backEnd.afterPropertiesSet();
        verify(m_timeKeeper);
        reset(m_timeKeeper);


        // set up some objects that can be used to mock up the tests

        // the location definition
        m_locationDefinition = new LocationDef();
        m_locationDefinition.setMonitoringArea("Oakland");
        m_locationDefinition.setLocationName("OAK");
        m_locationDefinition.setPollingPackageName("OAKPackage");

        m_package = createPackage(m_locationDefinition.getPollingPackageName(), "ipaddr = '192.168.1.1'");
        m_serviceSelector = new ServiceSelector(m_package.getFilter().getContent(), Arrays.asList(new String[]{ "HTTP", "DNS" }));

        m_httpSvcConfig = addService(m_package, "HTTP", 1234, "url", "http://www.opennms.org");
        m_dnsSvcConfig = addService(m_package, "DNS", 5678, "hostname", "www.opennms.org");

        m_locationMonitor = new OnmsLocationMonitor();
        m_locationMonitor.setId(1);
        m_locationMonitor.setDefinitionName(m_locationDefinition.getLocationName());

        NetworkBuilder builder = new NetworkBuilder(new OnmsDistPoller("localhost", "127.0.0.1"));
        builder.addNode("testNode").setId(1);
        builder.addInterface("192.168.1.1").setId(1);
        m_httpService = builder.addService(new OnmsServiceType("HTTP"));
        m_httpService.setId(1);
        m_dnsService = builder.addService(new OnmsServiceType("DNS"));
        m_dnsService.setId(2);

        m_monServices = new OnmsMonitoredService[] { m_httpService, m_dnsService };

        long now = System.currentTimeMillis();

        PollStatus httpResult = PollStatus.available(1000.0);
        httpResult.setTimestamp(new Date(now - 300000));

        m_httpCurrentStatus = new OnmsLocationSpecificStatus(m_locationMonitor, m_httpService, httpResult);
        m_httpCurrentStatus.setId(1);

        PollStatus dnsResult = PollStatus.unavailable("Non responsive");
        dnsResult.setTimestamp(new Date(now - 300000));

        m_dnsCurrentStatus = new OnmsLocationSpecificStatus(m_locationMonitor, m_dnsService, dnsResult);
        m_dnsCurrentStatus.setId(2);


        m_pollerDetails = new HashMap<String, String>();
        m_pollerDetails.put("os.name", "WonkaOS");
        m_pollerDetails.put("os.version", "1.2.3");
    }

