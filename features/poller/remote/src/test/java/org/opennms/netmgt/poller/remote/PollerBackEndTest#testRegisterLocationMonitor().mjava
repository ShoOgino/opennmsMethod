    public void testRegisterLocationMonitor() {

        expect(m_locMonDao.findMonitoringLocationDefinition(m_locationDefinition.getLocationName())).andReturn(m_locationDefinition);

        m_locMonDao.save(isA(OnmsLocationMonitor.class));
        expectLastCall().andAnswer(new IAnswer<Object>() {

            @Override
            public Object answer() throws Throwable {
                OnmsLocationMonitor mon = (OnmsLocationMonitor)getCurrentArguments()[0];
                mon.setId(LOCATION_MONITOR_ID);
                assertEquals(OnmsLocationMonitor.MonitorStatus.REGISTERED, mon.getStatus());
                return null;
            }

        });
        anticipateMonitorRegisteredEvent();

        m_mocks.replayAll();

        String locationMonitorId = m_backEnd.registerLocationMonitor(m_locationDefinition.getLocationName());

        assertEquals(LOCATION_MONITOR_ID, locationMonitorId);

    }

