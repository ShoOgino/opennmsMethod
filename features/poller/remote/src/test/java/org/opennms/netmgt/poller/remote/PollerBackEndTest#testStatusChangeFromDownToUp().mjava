    public void testStatusChangeFromDownToUp() {

        expect(m_locMonDao.get(1)).andReturn(m_locationMonitor);
        expect(m_monSvcDao.get(2)).andReturn(m_dnsService);

        expect(m_locMonDao.getMostRecentStatusChange(m_locationMonitor, m_dnsService)).andReturn(m_dnsCurrentStatus);

        // called when saving performance data
        expect(m_locMonDao.findMonitoringLocationDefinition(m_locationDefinition.getLocationName())).andReturn(m_locationDefinition);
        expect(m_pollerConfig.getPackage(m_locationDefinition.getPollingPackageName())).andReturn(m_package);

        expect(m_pollerConfig.getServiceInPackage("DNS", m_package)).andReturn(m_dnsSvcConfig).times(2);
        expect(m_pollerConfig.parameters(m_dnsSvcConfig)).andReturn(m_dnsSvcConfig.getParameters()).times(2);

        final PollStatus newStatus = PollStatus.available(1234.0);

        OnmsLocationSpecificStatus expectedStatus = new OnmsLocationSpecificStatus(m_locationMonitor, m_dnsService, newStatus);

        // TODO: make anticipate method
        EventBuilder eventBuilder = new EventBuilder(EventConstants.REMOTE_NODE_REGAINED_SERVICE_UEI, "PollerBackEnd")
        .setMonitoredService(m_dnsService)
        .addParam(EventConstants.PARM_LOCATION_MONITOR_ID, "1");

        m_eventIpcManager.sendNow(eq(eventBuilder.getEvent()));

        m_locMonDao.saveStatusChange(isA(OnmsLocationSpecificStatus.class));
        expectLastCall().andAnswer(new StatusChecker(expectedStatus));

        m_mocks.replayAll();

        m_backEnd.saveResponseTimeData(Integer.toString(m_locationMonitor.getId()), m_dnsService, 1234, m_package);

        m_backEnd.reportResult(1, 2, newStatus);
    }

