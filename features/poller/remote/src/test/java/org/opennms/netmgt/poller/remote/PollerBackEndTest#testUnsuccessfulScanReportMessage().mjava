    public void testUnsuccessfulScanReportMessage() {
        expect(m_scanReportDao.save(EasyMock.anyObject(ScanReport.class))).andReturn("");
        m_mocks.replayAll();

        List<ScanReportPollResult> scanReportPollResults = new ArrayList<ScanReportPollResult>();
        scanReportPollResults.add(new ScanReportPollResult("ICMP", 1, "Test Node", 1, "127.0.0.1", PollStatus.available(20.0)));
        scanReportPollResults.add(new ScanReportPollResult("HTTP", 2, "Test Node", 1, "127.0.0.1", PollStatus.unavailable("Weasels ate my HTTP server")));
        scanReportPollResults.add(new ScanReportPollResult("SNMP", 3, "Test Node", 1, "127.0.0.1", PollStatus.available(400.0)));
        scanReportPollResults.add(new ScanReportPollResult("POP3", 3, "Test Node", 1, "127.0.0.1", PollStatus.available(300.0)));
        scanReportPollResults.add(new ScanReportPollResult("IMAP", 4, "Test Node", 1, "127.0.0.1", PollStatus.unavailable("Kiwis infested my mail server")));

        ScanReport report = new ScanReport();
        report.setId(UUID.randomUUID().toString());
        report.setPollResults(scanReportPollResults);

        m_backEnd.reportSingleScan(report);

        // Fetch the event that was sent
        Event unsuccessfulScanEvent = m_eventIpcManager.getEventAnticipator().unanticipatedEvents().iterator().next();
        assertTrue(
            unsuccessfulScanEvent.getParm(DefaultPollerBackEnd.PARM_SCAN_REPORT_FAILURE_MESSAGE).getValue().getContent(),
            unsuccessfulScanEvent.getParm(DefaultPollerBackEnd.PARM_SCAN_REPORT_FAILURE_MESSAGE).getValue().getContent().contains("2 out of 5 service polls failed")
        );
    }

