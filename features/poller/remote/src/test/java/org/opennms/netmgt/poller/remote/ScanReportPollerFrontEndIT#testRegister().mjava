    @Test
    public void testRegister() throws Exception {
        // Check preconditions
        assertFalse(m_frontEnd.isRegistered());
        assertEquals(1, m_jdbcTemplate.queryForInt("select count(*) from monitoringsystems"));
        assertEquals(0, m_jdbcTemplate.queryForInt("select count(*) from monitoringsystemsproperties"));
        assertTrue("There were unexpected poll results", 0 == m_jdbcTemplate.queryForInt("select count(*) from location_specific_status_changes"));

        // Add a PropertyChangeListener that will report the scan result to
        // the PollerBackEnd
        m_frontEnd.addPropertyChangeListener(new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                if (evt.getPropertyName().equals(PollerFrontEndStates.exitNecessary.toString())) {
                    final ScanReport report = (ScanReport)evt.getNewValue();
                    System.out.println("Finished scan: " + report);
                    m_backEnd.reportSingleScan(report);

                    // uei.opennms.org/test <-- Standard test event
                    // uei.opennms.org/remote/unsuccessfulScanReport
                    assertEquals(2, getEventCount());
                    queryEvents();

                    // Check to see if the expected metadata was stored in the database
                    assertEquals(System.getProperty("os.arch"), m_jdbcTemplate.queryForObject("select propertyValue from scanreportproperties where scanreportid = ? and property = ?", String.class, report.getId(), "os.arch"));
                    assertEquals(System.getProperty("os.name"), m_jdbcTemplate.queryForObject("select propertyValue from scanreportproperties where scanreportid = ? and property = ?", String.class, report.getId(), "os.name"));
                    assertEquals(System.getProperty("os.version"), m_jdbcTemplate.queryForObject("select propertyValue from scanreportproperties where scanreportid = ? and property = ?", String.class, report.getId(), "os.version"));

                    m_frontEnd.stop();
                }
            }
        });

        m_frontEnd.initialize();

        // Initialization shouldn't change anything since we're unregistered
        assertFalse(m_frontEnd.isRegistered());
        assertEquals(1, m_jdbcTemplate.queryForInt("select count(*) from monitoringsystems"));
        assertEquals(0, m_jdbcTemplate.queryForInt("select count(*) from monitoringsystemsproperties"));
        assertTrue("There were unexpected poll results", 0 == m_jdbcTemplate.queryForInt("select count(*) from location_specific_status_changes"));

        // Start up the remote poller
        m_frontEnd.register("RDU");
        assertTrue("Front end not started!", m_frontEnd.isStarted());
        //String monitorId = m_frontEnd.getMonitoringSystemId();

        assertTrue(m_frontEnd.isRegistered());
        for (Map.Entry<String,String> entry : ((ScanReportPollerFrontEnd)m_frontEnd).getDetails().entrySet()) {
            LOG.info("Front end detail: " + entry.getKey() + " -> " + entry.getValue());
        }
    }

