    private void schedulePolls() throws Exception {

        LOG.debug("Enter schedulePolls");

        Collection<PolledService> polledServices = m_pollerFrontEnd.getPolledServices();

        if (polledServices == null || polledServices.size() == 0) {
            LOG.warn("No polling scheduled.");
            LOG.debug("Exit schedulePolls");
            return;
        }

        long startTime = System.currentTimeMillis();
        long scheduleSpacing = m_initialSpreadTime / polledServices.size();

        for (PolledService polledService : polledServices) {

            String jobName = polledService.toString();

            // remove any currently scheduled job
            if (m_scheduler.deleteJob(new JobKey(jobName, PollJobDetail.GROUP))) {
                LOG.debug("Job for {} already scheduled.  Rescheduling", polledService);
            } else {
                LOG.debug("Scheduling job for {}", polledService);
            }

            Date initialPollTime = new Date(startTime);

            m_pollerFrontEnd.setInitialPollTime(polledService.getServiceId(), initialPollTime);

            SimpleTriggerFactoryBean triggerFactory = new PolledServiceTrigger(polledService); 
            triggerFactory.setStartTime(initialPollTime);
            Trigger pollTrigger = triggerFactory.getObject();

            PollJobDetail jobDetail = new PollJobDetail(jobName, PollJob.class);
            jobDetail.setPolledService(polledService);
            jobDetail.setPollerFrontEnd(m_pollerFrontEnd);


            m_scheduler.scheduleJob(jobDetail, pollTrigger);

            startTime += scheduleSpacing;
        }

        LOG.debug("Exit schedulePolls");

    }

