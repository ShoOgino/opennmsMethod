    @Override
    public void reportSingleScan(final ScanReport report) {
        if (report == null) {
            throw new IllegalArgumentException("ScanReport cannot be null");
        }
        LOG.info("Single scan complete: {}", report);
        m_scanReportDao.save(report);

        if (report.getPollResults().stream().allMatch(a -> { return a.getPollStatus().isAvailable(); } )) {
            // If all polls returned 'available' then send the success event
            sendSuccessfulScanReportEvent(report.getId(), report.getLocation());
        } else {
            // Otherwise send the unsuccessful event
            int total = 0;
            int failed = 0;
            StringBuffer failedPollResults = new StringBuffer();
            for (ScanReportPollResult result : report.getPollResults()) {
                total++;
                if (!result.getPollStatus().isAvailable()) {
                    failed++;
                    failedPollResults.append(String.format(FAILED_POLL_RESULT_MESSAGE_FORMAT, result.getNodeLabel(), result.getIpAddress(), result.getServiceName(), result.getPollStatus().getReason()));
                }
            }

            StringBuffer finalMessage = new StringBuffer();
            finalMessage.append(String.format(FAILURE_SUMMARY_MESSAGE_FORMAT, failed, total));
            finalMessage.append("<ul>");
            finalMessage.append(failedPollResults);
            finalMessage.append("</ul>");

            sendUnsuccessfulScanReportEvent(report.getId(), report.getLocation(), finalMessage.toString());
        }
    }

