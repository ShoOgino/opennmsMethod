    /** {@inheritDoc} */
    @Transactional(readOnly=true)
    @Override
    public PollerConfiguration getPollerConfiguration(final int locationMonitorId) {
        try {
			final OnmsLocationMonitor mon = m_locMonDao.get(locationMonitorId);
			if (mon == null) {
			    // the monitor has been deleted we'll pick this in up on the next config check
			    return new EmptyPollerConfiguration();
			}
			
            List<String> pollingPackageNames = getPackageName(mon);

            List<SimplePollerConfiguration> addMe = new ArrayList<SimplePollerConfiguration>();
            for (String pollingPackageName : pollingPackageNames) {
                ConcurrentHashMap<String, SimplePollerConfiguration> cache = m_configCache.get();
                SimplePollerConfiguration pollerConfiguration = cache.get(pollingPackageName);
                if (pollerConfiguration == null) {
                    pollerConfiguration = createPollerConfiguration(mon, pollingPackageName);
                    SimplePollerConfiguration configInCache = cache.putIfAbsent(pollingPackageName, pollerConfiguration);
                    // Make sure that we get the up-to-date value out of the ConcurrentHashMap
                    if (configInCache != null) {
                        pollerConfiguration = configInCache;
                    }
                }
                addMe.add(pollerConfiguration);
            }

            // construct a copy so the serverTime gets updated (and avoid threading issues)
            return new SimplePollerConfiguration(addMe.toArray(new SimplePollerConfiguration[0]));
		} catch (final Exception e) {
			LOG.warn("An error occurred retrieving the poller configuration for location monitor ID {}", locationMonitorId, e);
			return new EmptyPollerConfiguration();
		}
    }

