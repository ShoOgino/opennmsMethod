    /** {@inheritDoc} */
    @Override
    public void reportResult(final int locationMonitorId, final int serviceId, final PollStatus pollResult) {
        final OnmsLocationMonitor locationMonitor;
        try {
        	locationMonitor = m_locMonDao.get(locationMonitorId);
        } catch (final Exception e) {
            LOG.info("Unable to report result for location monitor ID {}: Location monitor does not exist.", locationMonitorId, e);
            return;
        }
        if (locationMonitor == null) {
            LOG.info("Unable to report result for location monitor ID {}: Location monitor does not exist.", locationMonitorId);
            return;
        }

        final OnmsMonitoredService monSvc;
        try {
        	monSvc = m_monSvcDao.get(serviceId);
        } catch (final Exception e) {
		LOG.warn("Unable to report result for location monitor ID {}, monitored service ID {}: Monitored service does not exist.", locationMonitorId, serviceId, e);
        	return;
        }
        if (monSvc == null) {
		LOG.warn("Unable to report result for location monitor ID {}, monitored service ID {}: Monitored service does not exist.", locationMonitorId, serviceId);
            return;
        }
        if (pollResult == null) {
		LOG.warn("Unable to report result for location monitor ID {}, monitored service ID {}: Poll result is null!", locationMonitorId, serviceId);
        	return;
        }

        final OnmsLocationSpecificStatus newStatus = new OnmsLocationSpecificStatus(locationMonitor, monSvc, pollResult);

        try {
			if (newStatus.getPollResult().getResponseTime() != null) {
			    final Package pkg = getPollingPackageForMonitorAndService(locationMonitor, monSvc);
			    saveResponseTimeData(Integer.toString(locationMonitorId), monSvc, newStatus.getPollResult().getResponseTime(), pkg);
			}
		} catch (final Exception e) {
			LOG.error("Unable to save response time data for location monitor ID {}, monitored service ID {}.", locationMonitorId, serviceId, e);
		}

		try {
	        final OnmsLocationSpecificStatus currentStatus = m_locMonDao.getMostRecentStatusChange(locationMonitor, monSvc);
	        processStatusChange(currentStatus, newStatus);
		} catch (final Exception e) {
			LOG.error("Unable to save result for location monitor ID {}, monitored service ID {}.", locationMonitorId, serviceId, e);
		}
    }

