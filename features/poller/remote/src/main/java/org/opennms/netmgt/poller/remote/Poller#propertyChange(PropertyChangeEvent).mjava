    /** {@inheritDoc} */
    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        try {
            if (Boolean.TRUE.equals(evt.getNewValue())) {
                // If the poller is paused, disconnected, or exiting then unschedule all of the
                // polling tasks so that the scheduler can shut down cleanly
                if (
                    PollerFrontEndStates.paused.toString().equals(evt.getPropertyName()) ||
                    PollerFrontEndStates.disconnected.toString().equals(evt.getPropertyName()) ||
                    PollerFrontEndStates.exitNecessary.toString().equals(evt.getPropertyName())
                ) {
                    unschedulePolls();
                }
            } else {
                if (PollerFrontEndStates.paused.toString().equals(evt.getPropertyName()) ) {
                    schedulePolls();
                } else if (PollerFrontEndStates.disconnected.toString().equals(evt.getPropertyName())) {
                    schedulePolls();
                } else if (PollerFrontEndStates.started.toString().equals(evt.getPropertyName())) {
                    unschedulePolls();
                }
            }
        } catch (Throwable ex) {
            LOG.error("Unable to schedule polls!", ex);
            throw new RuntimeException("Unable to schedule polls!");
        }
    }

