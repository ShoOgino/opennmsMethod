    /**
     * TODO: Change this method so that instead of loading the config and firing configuration
     * changes to a {@link Poller}, we actually initiate the single scan.
     */
    private void performServiceScans() {

        firePropertyChange(ScanReportProperties.percentageComplete.toString(), null, 0.0);

        ScanReport scanReport = new ScanReport();
        System.err.println("metadata: " + m_metadata);
        scanReport.setCustomerAccountNumber(m_metadata.get("customer-account-number"));
        scanReport.setCustomerName(m_metadata.get("customer-name"));
        scanReport.setReferenceId(m_metadata.get("reference-id"));

        try {
            m_pollService.setServiceMonitorLocators(m_backEnd.getServiceMonitorLocators(DistributionContext.REMOTE_MONITOR));
            m_pollerConfiguration = retrieveLatestConfiguration();

            PolledService[] services = getPolledServices().toArray(new PolledService[0]);
            for (int i = 0; i < services.length; i++) {
                PolledService service = services[i];

                // Check to see if we should filter by selected applications
                if (m_selectedApplications != null) {
                    boolean foundApplication = false;
                    for (String application : service.getApplications()) {
                       if (m_selectedApplications.contains(application)) {
                           foundApplication = true;
                           break;
                       }
                    }

                    // If we didn't find the applicaton in the list...
                    if (!foundApplication) {
                        // Skip this service
                        continue;
                    }
                }

                // Initialize the monitor for the service
                m_pollService.initialize(service);

                try {
                    final PollStatus result = doPoll(service);
                    if (result == null) {
                        LOG.warn("Null poll result for service {}", service.getServiceId());
                    } else {
                        LOG.info(
                                 new ToStringBuilder(this)
                                 .append("statusName", result.getStatusName())
                                 .append("reason", result.getReason())
                                 .toString()
                                );
                        scanReport.addPollResult(new PollResult(service.getSvcName(), service.getServiceId(), service.getNodeLabel(), service.getNodeId(), service.getIpAddr(), result));
                    }
                } catch (Throwable e) {
                    LOG.error("Unexpected exception occurred while polling service ID {}", service.getServiceId(), e);
                    setState(new FatalExceptionOccurred(e));
                }

                firePropertyChange(ScanReportProperties.percentageComplete.toString(), null, ((double)i / (double)services.length));
            }
        } catch (final Throwable e) {
            LOG.error("Error while performing scan", e);
        }

        // Set the percentage complete to 100%
        firePropertyChange(ScanReportProperties.percentageComplete.toString(), null, 1.0);

        LOG.debug("Returning scan report: " + JaxbUtils.marshal(scanReport));

        // Fire an exitNecessary event with the scanReport as the parameter
        firePropertyChange(PollerFrontEndStates.exitNecessary.toString(), null, scanReport);
    }

