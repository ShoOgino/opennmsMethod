    /**
     * Perform all scans for a given location and return the results as a {@link ScanReport}
     * object. To filter by application, specify the selected applications by using the
     * {@link #setSelectedApplications(Set)} method.
     */
    private void performServiceScans() {

        firePropertyChange(ScanReportProperties.percentageComplete.toString(), null, 0.0);

        ScanReport scanReport = new ScanReport();
        scanReport.setLocation(m_location);
        //scanReport.addProperty("monitoring-system-id", getMonitoringSystemId());
        scanReport.setTimestamp(new Date());

        // Add all of the OS and connection metadata to the scan report
        for (final Map.Entry<String,String> entry : getDetails().entrySet()) {
            scanReport.addProperty(entry);
        }
        // Add all of the metadata to the scan report
        for (final Map.Entry<String,String> entry : m_metadata.entrySet()) {
            scanReport.addProperty(entry);
        }
        // Add the selected applications as scan report metadata
        if (m_selectedApplications != null && m_selectedApplications.size() > 0) {
            scanReport.addProperty("applications", m_selectedApplications.stream().collect(Collectors.joining(", ")));
        }

        // Create a log appender that will capture log output to the root logger
        Log4j2StringAppender appender = Log4j2StringAppender.createAppender();
        appender.start();

        try {
            m_pollService.setServiceMonitorLocators(m_backEnd.getServiceMonitorLocators(DistributionContext.REMOTE_MONITOR));
            m_pollerConfiguration = retrieveLatestConfiguration();

            appender.addToLogger(LogManager.ROOT_LOGGER_NAME, Level.DEBUG);

            Set<PolledService> polledServices = getPolledServices().stream().filter(s -> matchesApplications(s, m_selectedApplications)).collect(Collectors.toSet());
            PolledService[] services = polledServices.toArray(POLLED_SERVICE_ARRAY);

            LOG.debug("Polling {} services.", services.length);
            for (int i = 0; i < services.length; i++) {
                PolledService service = services[i];

                // Initialize the monitor for the service
                m_pollService.initialize(service);

                try {
                    final PollStatus result = doPoll(service);
                    if (result == null) {
                        LOG.warn("Null poll result for service {}", service.getServiceId());
                    } else {
                        LOG.info(
                                 new ToStringBuilder(this)
                                 .append("statusName", result.getStatusName())
                                 .append("reason", result.getReason())
                                 .toString()
                                );
                        scanReport.addPollResult(new ScanReportPollResult(service.getSvcName(), service.getServiceId(), service.getNodeLabel(), service.getNodeId(), service.getIpAddr(), result));
                    }
                } catch (Throwable e) {
                    LOG.error("Unexpected exception occurred while polling service ID {}", service.getServiceId(), e);
                    setState(new FatalExceptionOccurred(e));
                }

                firePropertyChange(ScanReportProperties.percentageComplete.toString(), null, ((double)i / (double)services.length));
            }
        } catch (final Throwable e) {
            LOG.error("Error while performing scan", e);
        } finally {
            // Remove the log appender from the root logger
            appender.removeFromLogger(LogManager.ROOT_LOGGER_NAME);
        }

        // Set the percentage complete to 100%
        firePropertyChange(ScanReportProperties.percentageComplete.toString(), null, 1.0);

        scanReport.setLog(new ScanReportLog(scanReport.getId(), appender.getOutput()));

        LOG.debug("Returning scan report: {}", scanReport);

        /*
        LOG.debug("=============== Scan report log START ===============");
        LOG.debug("Scan report log: '{}'", appender.getOutput());
        LOG.debug("=============== Scan report log END ===============");
        */

        // Fire an exitNecessary event with the scanReport as the parameter
        firePropertyChange(PollerFrontEndStates.exitNecessary.toString(), null, scanReport);
    }

