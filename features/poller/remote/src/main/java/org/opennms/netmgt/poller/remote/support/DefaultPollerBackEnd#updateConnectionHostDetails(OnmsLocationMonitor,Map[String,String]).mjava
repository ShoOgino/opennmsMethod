    protected void updateConnectionHostDetails(final OnmsLocationMonitor mon, final Map<String, String> pollerDetails) {
        final Map<String,String> allDetails = new HashMap<String,String>();
        if (pollerDetails != null) {
            allDetails.putAll(pollerDetails);
        }

        String oldConnectionHostAddress = allDetails.get(PollerBackEnd.CONNECTION_HOST_ADDRESS_KEY);
        String newConnectionHostAddress = null;

        // This value can be either an IP address or a hostname
        String remoteHost = RemoteHostThreadLocal.INSTANCE.get();
        if (remoteHost != null) {
            remoteHost = remoteHost.trim();
            allDetails.put(PollerBackEnd.CONNECTION_HOST_NAME_KEY, remoteHost);
            try {
                InetAddress addr = InetAddressUtils.getInetAddress(remoteHost);
                newConnectionHostAddress = InetAddressUtils.str(addr);
                // Look up the IP address for the name
                allDetails.put(PollerBackEnd.CONNECTION_HOST_ADDRESS_KEY, newConnectionHostAddress);
                // Reverse-lookup the name (in case the value was an IP address before)
                if (remoteHost.equals(newConnectionHostAddress)) {
                    allDetails.put(PollerBackEnd.CONNECTION_HOST_NAME_KEY, addr.getHostName());
                }
            } catch (Throwable e) {
                // In case there is an UnknownHostException
            }
        }
        mon.setProperties(allDetails);

        if (oldConnectionHostAddress == null) {
            if (newConnectionHostAddress != null) {
                sendMonitorRemoteAddressChangedEvent(mon, oldConnectionHostAddress, newConnectionHostAddress);
            }
        } else {
            if (!oldConnectionHostAddress.equals(newConnectionHostAddress)) {
                sendMonitorRemoteAddressChangedEvent(mon, oldConnectionHostAddress, newConnectionHostAddress);
            }
        }
    }

