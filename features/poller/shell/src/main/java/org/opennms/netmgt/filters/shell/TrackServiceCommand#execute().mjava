    @Override
    public Object execute() throws IOException {
        System.out.printf("Tracking service named %s%s. Press CTRL+C to stop.\n", serviceName,
                filterRule != null ? String.format(" with filter rule \"%s\"", filterRule) : "");

        // Callback may occur from other threads, but we can't use those to print the results
        // since output isn't redirected to the console. To work around this we push messages to a queue
        // and pull/print these from the command execution thread
        BlockingQueue<String> messageQueue = new LinkedBlockingDeque<>();
        Closeable session = serviceTracker.trackServiceMatchingFilterRule(serviceName, filterRule, new ServiceTracker.ServiceListener() {
            @Override
            public void onServiceMatched(ServiceRef serviceRef) {
                messageQueue.add(String.format("FOUND: %s\n", getDescription(serviceRef)));
            }

            @Override
            public void onServiceStoppedMatching(ServiceRef serviceRef) {
                messageQueue.add(String.format("REMOVED: %s\n", getDescription(serviceRef)));
            }
        });

        while (true) {
            try {
                System.out.print(messageQueue.take());
            } catch (InterruptedException e) {
                break;
            }
        }

        session.close();
        return null;
    }

