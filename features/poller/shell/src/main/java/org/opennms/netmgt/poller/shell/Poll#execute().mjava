    @Override
    public Object execute() throws Exception {
        final InetAddress ipAddress = InetAddress.getByName(host);
        final MonitoredService service;

        if (className == null) {
            if (serviceName == null) {
                System.err.println("Please specify at least the monitor class (--class) or the package/service (--package/--service)\n");
                return null;
            }
            className = retrieveClassName(ipAddress, packageName, serviceName);

            if (className == null) {
                // still null, we already output an error message
                return null;
            }
        }

        service = sessionUtils.withReadOnlyTransaction(() -> {
            final OnmsNode node;

            if (nodeId > 0) {
                node = nodeDao.get(nodeId);

                if (node == null) {
                    System.err.printf("Error: Can't find node with Id %d the database%n", nodeId);
                    return null;
                }
            } else {
                final List<OnmsIpInterface> ips = ipInterfaceDao.findByIpAddress(InetAddressUtils.str(ipAddress)).stream()
                        .filter(i -> location.equals(i.getNode().getLocation().getLocationName()))
                        .collect(Collectors.toList());

                if (ips.size() == 0) {
                    System.err.printf("Error: Can't find the IP address %s on the database%n", InetAddressUtils.str(ipAddress));
                    return null;
                }
                if (ips.size() > 1) {
                    System.out.printf("Warning: there are several IP interface objects associated with the IP address %s (picking the first one)%n", InetAddressUtils.str(ipAddress));
                }
                node = ips.get(0).getNode();
            }

            return new SimpleMonitoredService(ipAddress, node.getId(), node.getLabel(), serviceName == null ? "SVC" : serviceName, location);
        });

        final Map<String, Object> parameters = retrieveParameters(ipAddress, packageName, serviceName);
        parameters.putAll(parse(attributes));

        final CompletableFuture<PollerResponse> future = locationAwarePollerClient.poll()
                .withService(service)
                .withSystemId(systemId)
                .withMonitorClassName(className)
                .withTimeToLive(ttlInMs)
                .withAttributes(parameters)
                .execute();

        if (packageName != null) {
            System.out.printf("Package: %s%n", packageName);
        }
        if (serviceName != null) {
            System.out.printf("Service: %s%n", serviceName);
        }
        if (className != null) {
            System.out.printf("Monitor: %s%n", className);
        }
        for (Map.Entry<String,Object> e : parameters.entrySet()) {
            System.out.printf("Parameter %s: %s%n", e.getKey(), e.getValue());
        }

        while (true) {
            try {
                try {
                    PollStatus pollStatus = future.get(1, TimeUnit.SECONDS).getPollStatus();

                    if (pollStatus.getStatusCode() == PollStatus.SERVICE_AVAILABLE) {
                        System.out.printf("\nService is %s on %s using %s:\n", pollStatus.getStatusName(), host, className);
                        final Map<String, Number> properties = pollStatus.getProperties();
                        if (properties.size() > 0) {
                            properties.entrySet().stream().forEach(e -> {
                                System.out.printf("\t%s: %.4f\n", e.getKey(),
                                        e.getValue() != null ? e.getValue().doubleValue() : null);
                            });
                        } else {
                            System.out.printf("(No properties were returned by the monitor.\n");
                        }
                    } else {
                        System.out.printf("\nService is %s on %s using %s\n", pollStatus.getStatusName(), host, className);
                        System.out.printf("\tReason: %s\n", pollStatus.getReason());
                    }
                } catch (InterruptedException e) {
                    System.out.println("\nInterrupted.");
                } catch (ExecutionException e) {
                    System.out.printf("\nPoll failed with: %s\n", e);
                }
                break;
            } catch (TimeoutException e) {
                // pass
            }
            System.out.print(".");
            System.out.flush();
        }
        return null;
    }

