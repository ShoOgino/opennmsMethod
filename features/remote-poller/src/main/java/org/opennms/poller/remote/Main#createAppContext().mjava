	private AbstractApplicationContext createAppContext() {

		/*
		 * Set a system property called user.home.url so that the
		 * Spring contexts can reference resources that are stored
		 * in the user's home directory.
		 */
		File homeDir = new File(System.getProperty("user.home"));
		String homeUrl = homeDir.toURI().toString();
		// Trim the trailing file separator off of the end of the URI
		if (homeUrl.endsWith("/")) {
			homeUrl = homeUrl.substring(0, homeUrl.length()-1);
		}

		LOG.info("user.home.url = {}", homeUrl);
		System.setProperty("user.home.url", homeUrl);

		String serverURI = m_uri.toString().replaceAll("/*$", "");
		LOG.info("opennms.poller.server.url = {}", serverURI);
		System.setProperty("opennms.poller.server.url", serverURI);

		LOG.info("location name = {}", m_locationName);

		List<String> configs = new ArrayList<String>();
		configs.add("classpath:/META-INF/opennms/applicationContext-remotePollerBackEnd-" + m_uri.getScheme() + ".xml");
		configs.add("classpath:/META-INF/opennms/applicationContext-pollerFrontEnd.xml");

		if (m_gui) {
			configs.add("classpath:/META-INF/opennms/applicationContext-ws-gui.xml");
		}

		final ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(configs.toArray(new String[0]));

		// Add a shutdown hook so that even if the user CTRL-Cs the app or closes its JNLP GUI window,
		// it will still perform the same clean shutdown as stopping the poller via messaging.
		Runtime.getRuntime().addShutdownHook(new Thread() {
			@Override
			public void run() {
				shutdownContextAndExit(context);
			}
		});

		return context;
	}

