    private static void shutdownContextAndExit(AbstractApplicationContext context) {
        int returnCode = 0;

        // MVR: gracefully shutdown scheduler, otherwise context.close() will raise
        // an exception. See #NMS-6966 for more details.
        if (context.isActive()) {
            try {
                LOG.info("Shutting down PollerFrontEnd scheduler");
                ((Scheduler)context.getBean("scheduler")).shutdown();
            } catch (SchedulerException ex) {
                LOG.warn("Shutting down PollerFrontEnd scheduler failed", ex);
                returnCode = 10;
            }
            LOG.info("PollerFrontEnd scheduler shutdown complete");

            // Now close the application context. This will invoke
            // {@link DefaultPollerFrontEnd#destroy()} which will mark the
            // remote poller as "Stopped" during shutdown instead of letting
            // it remain in the "Disconnected" state.
            context.close();
        }

        final int returnCodeValue = returnCode;
        new Thread() {
            public void run() {
                // Sleep for a couple of seconds so that the other
                // PropertyChangeListeners get a chance to fire
                try { Thread.sleep(5000); } catch (InterruptedException e) {}
                System.exit(returnCodeValue);
            }
        }.start();
    }

