        	public static native int getStateId(double lat, double lng, JSObject statesDataLarge)
        	/*-{
        	  
        	  	var usMinLngArraySorted = [-179.14734, -160.555771, -124.733174, -124.552441, -124.409591, -120.005746, -117.214889, -116.049415, -114.813613, -114.052718, -111.056888, -109.060062, -109.050044, -106.627808, -104.057698, -104.053249, -104.0489, -103.002565, -102.051744, -97.239155, -96.639704, -95.774704, -94.617919, -94.043147, -92.888114, -91.636942, -91.512974, -90.418136, -90.309877, -89.571509, -88.471214, -88.071449, -87.634938, -85.605165, -84.820157, -84.321869, -83.675413, -83.352485, -82.644739, -80.51979, -79.762152, -79.487651, -77.1199, -75.788658, -75.559446, -73.727775, -73.508142, -73.437429, -72.556214, -71.862772, -71.084334, -67.954119 ];
    			var minLngArraySortedIndex = [26, 7, 34, 48, 2, 44, 28, 13, 0, 36, 24, 3, 14, 51, 50, 43, 15, 16, 29, 11, 37, 42, 1, 10, 23, 12, 8, 41, 18, 38, 25, 9, 27, 6, 47, 32, 19, 33, 22, 17, 46, 30, 5, 21, 31, 4, 40, 35, 45, 49, 39, 20];
    		
        	 	var x = lng, y = lat;
    		    
    		    var inside = false;
    		    var state = 0;
    		    
    		    for (var k = minLngArraySortedIndex.length - 1; k >= 0; k--){
    		    	if(x >= usMinLngArraySorted[k]){
    		    		
    		    		if(statesDataLarge.features[minLngArraySortedIndex[k]].geometry.type === "MultiPolygon"){

    		    			for(var n = 0; n < statesDataLarge.features[minLngArraySortedIndex[k]].geometry.coordinates.length; n++){
    		    				for (var i = 0, inside = false, j = statesDataLarge.features[minLngArraySortedIndex[k]].geometry.coordinates[n][0].length - 1; i < statesDataLarge.features[minLngArraySortedIndex[k]].geometry.coordinates[n][0].length; j = i++) {
    		    			
    		    	        		var xi = statesDataLarge.features[minLngArraySortedIndex[k]].geometry.coordinates[n][0][i][0], yi = statesDataLarge.features[minLngArraySortedIndex[k]].geometry.coordinates[n][0][i][1];
    		    	        		var xj = statesDataLarge.features[minLngArraySortedIndex[k]].geometry.coordinates[n][0][j][0], yj = statesDataLarge.features[minLngArraySortedIndex[k]].geometry.coordinates[n][0][j][1];
    		    	        
    		    	        		var intersect = ((xi > x) != (xj > x))
    		    	            	&& (y < (yj - yi) * (x - xi) / (xj - xi) + yi);
    		    	        		if (intersect) inside = !inside;
    		    				}
    		    	    	if (inside) {
    		    	    		state = statesDataLarge.features[minLngArraySortedIndex[k]].properties.STATE;
    		    	    		return state;
    		    	    	}
    		    	    }
    		    	}
    		    	else{
    		    		for (var i = 0, inside = false, j = statesDataLarge.features[minLngArraySortedIndex[k]].geometry.coordinates[0].length - 1; i < statesDataLarge.features[minLngArraySortedIndex[k]].geometry.coordinates[0].length; j = i++) {
    		        		var xi = statesDataLarge.features[minLngArraySortedIndex[k]].geometry.coordinates[0][i][0], yi = statesDataLarge.features[minLngArraySortedIndex[k]].geometry.coordinates[0][i][1];
    		        		var xj = statesDataLarge.features[minLngArraySortedIndex[k]].geometry.coordinates[0][j][0], yj = statesDataLarge.features[minLngArraySortedIndex[k]].geometry.coordinates[0][j][1];
    		        
    		        		var intersect = ((xi > x) != (xj > x))
    		            	&& (y < (yj - yi) * (x - xi) / (xj - xi) + yi);
    		        		if (intersect) inside = !inside;
    				
    		   		    }
    		    		if (inside) {
    		    			state = statesDataLarge.features[minLngArraySortedIndex[k]].properties.STATE;
    		    			return state;
    		    		}
    		    
    		    	}
    			}
    		}
    		    
    		    return state;
        	 }-*/;

