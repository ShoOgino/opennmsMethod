    void paintNode(final PaintTarget target, final OnmsNode node) throws PaintException {
        final OnmsAssetRecord assets = node.getAssetRecord();
        if (assets != null && assets.getGeolocation() != null) {
            final OnmsGeolocation geolocation = assets.getGeolocation();

            final String addressString = geolocation.asAddressString();
            String coordinateString = geolocation.getCoordinates();

            if (m_enableGeocoding && (coordinateString == null || coordinateString == "" || !coordinateString.contains(",")) && addressString != "") {
                m_log.debug("No coordinates for node {}, getting geolocation for street address: {}", new Object[] { node.getId(), addressString });
                Coordinates coordinates = null;
                try {
                    coordinates = m_geocoderService.getCoordinates(addressString);
                    if (coordinates == null) {
                        geolocation.setCoordinates("-1,-1");
                        m_log.debug("Failed to look up coordinates for street address: {}", addressString);
                    } else {
                        coordinateString = coordinates.getLatitude() + "," + coordinates.getLongitude();
                        geolocation.setCoordinates(coordinateString);
                    }
                    updateDatabase(assets);
                } catch (final GeocoderException e) {
                    m_log.debug("Failed to retrieve coordinates", e);
                }
            } else {
                m_log.debug("Found coordinates for node {}, geolocation for street address: {} = {}", new Object[] { node.getId(), addressString, coordinateString });
            }

            if (coordinateString != null && coordinateString != "") {
                final String[] coordinates = coordinateString.split(",");
                if (coordinates[0] != "-1" && coordinates[1] != "-1") {
                    target.startTag(node.getId().toString());

                    CriteriaBuilder builder = new CriteriaBuilder(OnmsAlarm.class);
                    builder.alias("node", "node");
                    builder.eq("node.id", node.getId());
                    builder.ge("severity", OnmsSeverity.WARNING);
                    builder.orderBy("severity").desc();
                    builder.limit(1);

                    // first, get the highest severity alarm
                    final List<OnmsAlarm> alarms = m_alarmDao.findMatching(builder.toCriteria());
                    if (alarms.size() == 1) {
                        final OnmsAlarm alarm = alarms.get(0);
                        final OnmsSeverity severity = alarm.getSeverity();
                        target.addAttribute("severityLabel", severity.getLabel());
                        target.addAttribute("severity", severity.getId());
                    } else {
                        // assumes everything is OK
                        target.addAttribute("severityLabel", OnmsSeverity.NORMAL.getLabel());
                        target.addAttribute("severity", OnmsSeverity.NORMAL.getId());
                    }

                    builder = new CriteriaBuilder(OnmsAlarm.class);
                    builder.alias("node", "node");
                    builder.eq("node.id", node.getId());
                    builder.ge("severity", OnmsSeverity.WARNING);
                    builder.isNull("alarmAckTime");
                    final int unackedCount = m_alarmDao.countMatching(builder.toCriteria());

                    target.addAttribute("nodeId", node.getId());
                    target.addAttribute("nodeLabel", node.getLabel());
                    target.addAttribute("foreignSource", node.getForeignSource());
                    target.addAttribute("foreignId", node.getForeignId());
                    target.addAttribute("ipAddress", InetAddressUtils.str(node.getPrimaryInterface().getIpAddress()));
                    target.addAttribute("unackedCount", unackedCount);
                    target.addAttribute("latitude", coordinates[0]);
                    target.addAttribute("longitude", coordinates[1]);
                    target.endTag(node.getId().toString());
                }
            }
        }
    }

