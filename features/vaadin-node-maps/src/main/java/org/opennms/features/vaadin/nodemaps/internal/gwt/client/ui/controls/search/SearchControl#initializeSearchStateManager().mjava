    private void initializeSearchStateManager() {
        m_stateManager = new SearchStateManager(m_inputBox, m_historyWrapper) {
            @Override
            public void refresh() {
                sendSearchStringSetEvent(m_inputBox.getValue());

                final List<JSNodeMarker> markers = m_markerContainer.getMarkers();
                final NodeMarker selected = m_selectionModel.getSelectedObject();
                final NodeMarker firstMarker = markers.size() > 0? markers.get(0) : null;
                if (selected == null) {
                    if (firstMarker != null) m_selectionModel.setSelected(firstMarker, true);
                } else {
                    if (!markers.contains(selected)) {
                        if (firstMarker != null) {
                            m_selectionModel.setSelected(firstMarker, true);
                        } else {
                            m_selectionModel.setSelected(selected, false);
                        }
                    }
                }
                
                DomEvent.send(FilteredMarkersUpdatedEvent.createEvent());
            }

            @Override
            public void clearSearchInput() {
                m_inputBox.setValue("");
                sendSearchStringSetEvent("");
            }

            @Override
            public void focusAutocomplete() {
                m_autoComplete.setFocus(true);
                if (m_selectionModel.getSelectedObject() == null) {
                    final List<JSNodeMarker> markers = m_markerContainer.getMarkers();
                    if (markers.size() > 0) {
                        m_selectionModel.setSelected(markers.get(0), true);
                    }
                }
            }

            @Override
            public void showAutocomplete() {
                final List<JSNodeMarker> markers = m_markerContainer.getMarkers();
                if (markers.size() > 0) {
                    m_selectionModel.setSelected(markers.get(0), true);
                }
                m_autoComplete.setVisible(true);
                updateAutocompleteStyle(m_autoComplete);
            }

            @Override
            public void hideAutocomplete() {
                m_autoComplete.setVisible(false);
            }

            @Override
            public void entrySelected() {
                final NodeMarker selected = m_selectionModel.getSelectedObject();
                if (selected != null) {
                    final String newSearchString = "nodeLabel=" + selected.getNodeLabel();
                    m_inputBox.setValue(newSearchString);
                    sendSearchStringSetEvent(newSearchString);
                }
            }

            @Override
            public void focusInput() {
                m_inputBox.setFocus(true);
            }

        };
    }

