    public void handleInputEvent(final NativeEvent event) {
        final String eventType = event.getType();
        LOG.info("handleInputEvent(" + m_state + "): received " + eventType + " (keyCode = " + event.getKeyCode() + ")");

        if ("keydown".equals(eventType)) {
            switch (event.getKeyCode()) {
            case KeyCodes.KEY_ESCAPE:
                Scheduler.get().scheduleDeferred(new ScheduledCommand() {
                    @Override
                    public void execute() {
                        m_state = m_state.cancelSearching(SearchStateManager.this);
                    }
                });
                event.stopPropagation();
                break;
            case KeyCodes.KEY_DOWN:
                Scheduler.get().scheduleDeferred(new ScheduledCommand() {
                    @Override
                    public void execute() {
                        m_state = m_state.goDown(SearchStateManager.this);
                    }
                });
                event.stopPropagation();
                break;
            case KeyCodes.KEY_ENTER:
                Scheduler.get().scheduleDeferred(new ScheduledCommand() {
                    @Override
                    public void execute() {
                        m_state = m_state.finishedSearching(SearchStateManager.this);
                    }
                });
                event.stopPropagation();
                break;
            default:
                Scheduler.get().scheduleDeferred(new ScheduledCommand() {
                    @Override
                    public void execute() {
                        final String value = m_valueItem.getValue();
                        if (value == null || "".equals(value)) {
                            m_state = m_state.cancelSearching(SearchStateManager.this);
                        } else {
                            m_state = m_state.searchInputReceived(SearchStateManager.this);
                            sendSearchStringSetEvent(value);
                        }
                    }
                });
                break;
            }
        } else if ("search".equals(eventType) || "change".equals(eventType)) {
            final String searchString = m_valueItem.getValue();
            LOG.info("SearchStateManager.handleInputEvent(): searchString = " + searchString);
            if ("".equals(searchString)) {
                Scheduler.get().scheduleDeferred(new ScheduledCommand() {
                    @Override
                    public void execute() {
                        m_state = m_state.cancelSearching(SearchStateManager.this);
                    }
                });
            } else {
                Scheduler.get().scheduleDeferred(new ScheduledCommand() {
                    @Override
                    public void execute() {
                        if (searchString == null || "".equals(searchString)) {
                            m_state = m_state.cancelSearching(SearchStateManager.this);
                        } else {
                            m_state = m_state.searchInputReceived(SearchStateManager.this);
                            sendSearchStringSetEvent(searchString);
                        }
                    }
                });
            }
        } else {
            LOG.info("SearchStateManager.handleInputEvent(" + m_state + "): unhandled event: " + eventType);
        }
    }

