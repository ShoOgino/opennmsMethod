    public Element doOnAdd() {
        LOG.info("SearchControl.onAdd() called");

        this.add(m_inputBox);
        this.add(m_submitIcon);
        this.add(m_autoComplete);

        /* If the backend sends a new search string, set it on the input box
         * to make sure we're in sync, but don't re-fire events.
         */
        m_eventManager.addHandler(FilteredMarkersUpdatedEvent.TYPE, this);

        final SearchEventHandler searchEventHandler = new SearchEventHandler() {
            @Override protected void onEvent(final DomEvent<? extends EventHandler> event) {
                m_stateManager.handleInputEvent(event.getNativeEvent());
            }
            
        };
        
        m_autoComplete.addHandler(new KeyDownHandler() {
            @Override public void onKeyDown(final KeyDownEvent event) {
                m_stateManager.handleAutocompleteEvent(event.getNativeEvent());
            }
        }, KeyDownEvent.getType());

        m_inputBox.addKeyDownHandler(searchEventHandler);
        m_inputBox.addChangeHandler(searchEventHandler);
        m_inputBox.addClickHandler(new ClickHandler() {
            @Override public void onClick(final ClickEvent event) {
                SearchEvent.fireNativeEvent(Document.get().createChangeEvent(), m_inputBox);
            }
        });
        m_inputBox.addHandler(searchEventHandler, CutEvent.getType());
        m_inputBox.addHandler(searchEventHandler, PasteEvent.getType());
        m_inputBox.addHandler(searchEventHandler, SearchEvent.getType());
        m_submitIcon.addClickHandler(new ClickHandler() {
            @Override public void onClick(final ClickEvent event) {
                m_stateManager.handleSearchIconEvent(event.getNativeEvent());
            }
        });

        //refresh();
        m_eventManager.fireEvent(new ComponentInitializedEvent(AlarmControl.class.getName()));

        return this.getElement();
    }

