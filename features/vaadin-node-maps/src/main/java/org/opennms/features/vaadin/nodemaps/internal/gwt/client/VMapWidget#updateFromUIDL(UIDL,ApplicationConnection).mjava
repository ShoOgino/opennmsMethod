    @Override
    public void updateFromUIDL(final UIDL uidl, final ApplicationConnection client) {
        if (client.updateComponent(this, uidl, true)) return;
        m_client = client;
        m_uidlId = uidl.getId();

        final UIDL nodeUIDL = uidl.getChildByTagName("nodes");

        final List<NodeMarker> featureCollection = new ArrayList<NodeMarker>();

        for (final Iterator<?> iterator = nodeUIDL.getChildIterator(); iterator.hasNext();) {
            final UIDL node = (UIDL) iterator.next();

            final double latitude = Float.valueOf(node.getFloatAttribute("latitude")).doubleValue();
            final double longitude = Float.valueOf(node.getFloatAttribute("longitude")).doubleValue();

            final NodeMarker feature = new NodeMarker(new LatLng(latitude, longitude));

            for (final String key : new String[] { "nodeId", "nodeLabel", "foreignSource", "foreignId", "ipAddress", "severity", "severityLabel", "unackedCount" }) {
                if (node.hasAttribute(key)) feature.putProperty(key, node.getStringAttribute(key));
            }

            feature.bindPopup(NodeMarkerClusterCallback.getPopupTextForMarker(feature));
            featureCollection.add(feature);
        }

        setFeatureCollection(featureCollection);
        Scheduler.get().scheduleDeferred(new Command() {
            @Override public void execute() {
                updateFeatureLayer();
            }
        });
    }

