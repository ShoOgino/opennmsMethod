    @Override
    public void updateFromUIDL(final UIDL uidl, final ApplicationConnection client) {
        if (client.updateComponent(this, uidl, true)) return;
        m_client = client;
        m_uidlId = uidl.getId();

        initializeIcons();

        final UIDL nodeUIDL = uidl.getChildByTagName("nodes");

        final List<NodeMarker> featureCollection = new ArrayList<NodeMarker>();

        for (final Iterator<?> iterator = nodeUIDL.getChildIterator(); iterator.hasNext();) {
            final UIDL node = (UIDL) iterator.next();

            final double latitude = Float.valueOf(node.getFloatAttribute("latitude")).doubleValue();
            final double longitude = Float.valueOf(node.getFloatAttribute("longitude")).doubleValue();

            final NodeMarker marker = new NodeMarker(new LatLng(latitude, longitude));

            for (final String key : new String[] { "nodeId", "nodeLabel", "foreignSource", "foreignId", "description", "maintcontract", "ipAddress", "severity", "severityLabel", "unackedCount" }) {
                if (node.hasAttribute(key)) marker.putProperty(key, node.getStringAttribute(key));
            }

            if (node.hasAttribute("categories")) {
                marker.setCategories(node.getStringArrayAttribute("categories"));
            }

            if (m_icons.containsKey(marker.getSeverityLabel())) {
                marker.setIcon(m_icons.get(marker.getSeverityLabel()));
            } else {
                marker.setIcon(m_icons.get("Normal"));
            }
            marker.bindPopup(NodeMarkerClusterCallback.getPopupTextForMarker(marker));
            featureCollection.add(marker);
        }

        setMarkers(featureCollection);
        Scheduler.get().scheduleDeferred(new Command() {
            @Override public void execute() {
                updateMarkerClusterLayer();
            }
        });
    }

