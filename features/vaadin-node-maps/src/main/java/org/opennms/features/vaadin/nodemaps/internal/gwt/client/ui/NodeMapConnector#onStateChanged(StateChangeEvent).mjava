    @Override
    public void onStateChanged(final StateChangeEvent stateChangeEvent) {
        LOG.info("NodeMapConnector.onStateChanged(" + stateChangeEvent + ")");

        // Handle all common Vaadin features first
        super.onStateChanged(stateChangeEvent);

        if (stateChangeEvent.hasPropertyChanged("maxClusterRadius")) {
            getWidget().setMaxClusterRadius(getState().maxClusterRadius);
        }

        if (stateChangeEvent.hasPropertyChanged("searchString")) {
            final String searchString = getState().searchString;
            LOG.info("NodeMapConnector.onStateChanged(): searchString is now: " + searchString);
            if (searchString == null) {
                getEventManager().fireEvent(new SearchStringSetEvent(""));
            } else {
                getEventManager().fireEvent(new SearchStringSetEvent(searchString));
            }
        }

        if (stateChangeEvent.hasPropertyChanged("nodes")) {
            updateNodes();
        }

        if (stateChangeEvent.hasPropertyChanged("nodeIds")) {
            final List<Integer> nodeIds = getState().nodeIds;
            LOG.info("NodeMapConnector.onStateChanged(): nodeIds is now: " + nodeIds);
            if (nodeIds != null && nodeIds.size() > 0) {
                final StringBuilder sb = new StringBuilder("nodeId in ");
                final Iterator<Integer> i = nodeIds.iterator();
                while (i.hasNext()) {
                    sb.append(i.next());
                    if (i.hasNext()) sb.append(", ");
                }
                getEventManager().fireEvent(new SearchStringSetEvent(sb.toString()));
            }
        }
        if (stateChangeEvent.hasPropertyChanged("groupByState")) {
            getWidget().setGroupByState(getState().groupByState);
        }
        if (!getWidget().isInitialized()
                && stateChangeEvent.hasPropertyChanged("tileServerUrl")
                && stateChangeEvent.hasPropertyChanged("tileLayerOptions")) {
            getWidget().initialize(getState());
        }
    }

