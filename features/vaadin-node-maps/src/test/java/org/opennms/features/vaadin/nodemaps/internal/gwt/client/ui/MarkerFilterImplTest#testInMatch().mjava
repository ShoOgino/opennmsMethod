    @Test
    public void testInMatch() {
        final MarkerFilterImpl filter = new WrappedMarkerFilterImpl("nodeLabel in foo, bar, baz", 0, m_eventManager);
        final SimpleNodeMarker marker = new SimpleNodeMarker();

        marker.setNodeLabel("fo");
        assertFalse(filter.matches(marker));

        marker.setNodeLabel("foo");
        assertTrue(filter.matches(marker));

        marker.setNodeLabel("bara");
        assertFalse(filter.matches(marker));

        marker.setNodeLabel("baz");
        assertTrue(filter.matches(marker));

        filter.setSearchString("nodeLabel in (foo, bar, baz)");

        marker.setNodeLabel("fo");
        assertFalse(filter.matches(marker));

        marker.setNodeLabel("foo");
        assertTrue(filter.matches(marker));

        marker.setNodeLabel("bara");
        assertFalse(filter.matches(marker));

        marker.setNodeLabel("baz");
        assertTrue(filter.matches(marker));

        filter.setSearchString("category in foo, bar, baz");
        marker.setNodeLabel(null);
        marker.setCategoryList(new ArrayList<String>());
        marker.addCategory("ba");
        assertFalse(filter.matches(marker));

        marker.addCategory("bar");
        assertTrue(filter.matches(marker));

        marker.setCategoryList(new ArrayList<String>());
        marker.addCategory("baz");
        assertTrue(filter.matches(marker));

        filter.setSearchString("categories in foo, bar, baz");
        marker.setNodeLabel(null);
        marker.setCategoryList(new ArrayList<String>());
        marker.addCategory("ba");
        assertFalse(filter.matches(marker));

        marker.addCategory("bar");
        assertTrue(filter.matches(marker));

        marker.setCategoryList(new ArrayList<String>());
        marker.addCategory("baz");
        assertTrue(filter.matches(marker));
    }

