    private void addService(final ServiceTracker.ServiceEntry<Set<RemotePolledService>> entry) {
        entry.getElement().forEach(remotePolledService -> {
            final JobKey key = buildJobKey(remotePolledService);

            final JobDetail job = JobBuilder
                    .newJob(RemotePollJob.class)
                    .withIdentity(key)
                    .setJobData(new JobDataMap(ImmutableMap.builder()
                                                           .put(RemotePollJob.POLLED_SERVICE, remotePolledService)
                                                           .put(RemotePollJob.REMOTE_POLLER_BACKEND, this)
                                                           .put(RemotePollJob.TRACER, this.tracerRegistry.getTracer())
                                                           .build()))
                    .build();

            final Trigger trigger = TriggerBuilder
                    .newTrigger()
                    .withSchedule(SimpleScheduleBuilder.simpleSchedule()
                                                       .withIntervalInMilliseconds(remotePolledService.getServiceConfig().getInterval())
                                                       .repeatForever())
                    .build();

            LOG.debug("Scheduling service named {} at location {} with interval {}ms", remotePolledService.getServiceName(),
                      remotePolledService.getPerspectiveLocation(), remotePolledService.getServiceConfig().getInterval());

            try {
                this.scheduler.scheduleJob(job, trigger);
            } catch (final SchedulerException e) {
                LOG.error("Failed to schedule {} ({}).", remotePolledService, key, e);
            }
        });
    }

