    public RemotePollerd(final SessionUtils sessionUtils,
                         final MonitoringLocationDao monitoringLocationDao,
                         final PollerConfig pollerConfig,
                         final MonitoredServiceDao monitoredServiceDao,
                         final LocationAwarePollerClient locationAwarePollerClient,
                         final LocationSpecificStatusDao locationSpecificStatusDao,
                         final ApplicationDao applicationDao,
                         final CollectionAgentFactory collectionAgentFactory,
                         final PersisterFactory persisterFactory,
                         final EventForwarder eventForwarder,
                         final ThresholdingService thresholdingService,
                         final EventDao eventDao,
                         final OutageDao outageDao) throws SchedulerException {
        this.sessionUtils = Objects.requireNonNull(sessionUtils);
        this.monitoringLocationDao = Objects.requireNonNull(monitoringLocationDao);
        this.pollerConfig = Objects.requireNonNull(pollerConfig);
        this.monitoredServiceDao = Objects.requireNonNull(monitoredServiceDao);
        this.locationAwarePollerClient = Objects.requireNonNull(locationAwarePollerClient);
        this.locationSpecificStatusDao = Objects.requireNonNull(locationSpecificStatusDao);
        this.applicationDao = Objects.requireNonNull(applicationDao);
        this.collectionAgentFactory = Objects.requireNonNull(collectionAgentFactory);
        this.persisterFactory = Objects.requireNonNull(persisterFactory);
        this.eventForwarder = Objects.requireNonNull(eventForwarder);
        this.thresholdingService = Objects.requireNonNull(thresholdingService);
        this.eventDao = Objects.requireNonNull(eventDao);
        this.outageDao = Objects.requireNonNull(outageDao);

        this.scheduler = new StdSchedulerFactory().getScheduler();

        this.serviceTracker = new ServiceTracker<>(pollerConfig,
                                                   new QueryManager(this.monitoredServiceDao),
                                                   this::filterService,
                                                   this::addService,
                                                   this::deleteService);
    }

