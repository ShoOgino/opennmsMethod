    private Optional<Set<RemotePolledService>> filterService(final ServiceTracker.Service service) {
        return this.sessionUtils.withReadOnlyTransaction(() -> {
            // Get the monitored service entitiy
            final OnmsMonitoredService monitoredService = this.monitoredServiceDao.get(service.nodeId, service.ipAddress, service.serviceName);
            if (monitoredService == null) {
                return Optional.empty();
            }

            final OnmsIpInterface ipInterface = monitoredService.getIpInterface();
            final OnmsNode node = ipInterface.getNode();

            // Get all perspective locations from which the service is monitored via its assigned applications
            final List<OnmsMonitoringLocation> perspectiveLocations = this.applicationDao.getPerspectiveLocationsForService(service.nodeId, service.ipAddress, service.serviceName);
            if (perspectiveLocations.isEmpty()) {
                return Optional.empty();
            }

            // Get the polling package for the service
            this.pollerConfig.rebuildPackageIpListMap();
            final Package pkg = this.pollerConfig.getFirstRemotePackageMatch(InetAddressUtils.str(service.ipAddress));
            if (pkg == null) {
                return Optional.empty();
            }

            // Find the service (and the pattern parameters) for the service name
            final Optional<Package.ServiceMatch> serviceMatch = pkg.findService(service.serviceName);
            if (!serviceMatch.isPresent()) {
                return Optional.empty();
            }

            // Find the monitor implementation for the service name
            final ServiceMonitor serviceMonitor = this.pollerConfig.getServiceMonitor(serviceMatch.get().service.getName());
            if (serviceMonitor == null) {
                return Optional.empty();
            }

            final RrdRepository rrdRepository = new RrdRepository();
            rrdRepository.setStep(this.pollerConfig.getStep(pkg));
            rrdRepository.setHeartBeat(rrdRepository.getStep() * 2);
            rrdRepository.setRraList(this.pollerConfig.getRRAList(pkg));

            final String rrdRepositoryDir = getServiceParameter(serviceMatch.get().service, "rrd-repository");
            rrdRepository.setRrdBaseDir(new File(rrdRepositoryDir));

            // Create the thresholding session for this poller
            final ThresholdingSession thresholdingSession;
            try {
                thresholdingSession = this.thresholdingService.createSession(service.nodeId,
                                                                             InetAddressUtils.str(service.ipAddress),
                                                                             service.serviceName,
                                                                             rrdRepository,
                                                                             new ServiceParameters(Collections.emptyMap()));
            } catch (final ThresholdInitializationException e) {
                LOG.error("Failed to create thresholding session", e);
                return Optional.empty();
            }

            // Build remote polled services for each location
            return Optional.of(perspectiveLocations.stream()
                                                   .map(OnmsMonitoringLocation::getLocationName)
                                                   .map(perspectiveLocation -> new RemotePolledService(service,
                                                                                                       node.getForeignSource(),
                                                                                                       node.getForeignId(),
                                                                                                       node.getLabel(),
                                                                                                       pkg,
                                                                                                       serviceMatch.get(),
                                                                                                       serviceMonitor,
                                                                                                       perspectiveLocation,
                                                                                                       node.getLocation().getLocationName(),
                                                                                                       rrdRepository,
                                                                                                       thresholdingSession))
                                                   .collect(Collectors.toSet()));
        });
    }

