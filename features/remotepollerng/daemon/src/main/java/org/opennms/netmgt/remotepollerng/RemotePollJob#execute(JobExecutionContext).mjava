    @Override
    public void execute(JobExecutionContext context) {
        final JobDataMap dataMap = context.getJobDetail().getJobDataMap();

        final String locationName = Objects.requireNonNull((String) dataMap.get(LOCATION_NAME), "location name required");
        final RemotePolledService svc = Objects.requireNonNull((RemotePolledService) dataMap.get(POLLED_SERVICE), "svc required");
        final RemotePollerd backend = Objects.requireNonNull((RemotePollerd) dataMap.get(REMOTE_POLLER_BACKEND), "backend required");

        LOG.debug("Poll triggered for {} at {}", svc, locationName);

        // TODO: Use distributed tracing here to add more context around span

        // Issue the call and process the results asynchronously
        backend.getLocationAwarePollerClient().poll()
                .withService(toMonitoredService(locationName, svc.getMonitoredService()))
                .withTimeToLive(svc.getService().getInterval())
                // HACK to override location
                .withMonitor(svc.getServiceMonitor())
                .withAttributes(createParameterMap(svc.getService()))
                .execute()
                .whenComplete((res,ex) -> {
                    if (ex == null) {
                        LOG.debug("Poll for {} at {} completed successfully: {}", svc, locationName, res);
                        backend.reportResult(locationName, svc, res.getPollStatus());
                    } else {
                        RpcExceptionUtils.handleException(ex, new RpcExceptionHandler<Void>() {
                            @Override
                            public Void onInterrupted(Throwable t) {
                                LOG.warn("Interrupted.");
                                return null;
                            }

                            @Override
                            public Void onTimedOut(Throwable t) {
                                LOG.warn("RPC timed out.", t);
                                return null;
                            }

                            @Override
                            public Void onRejected(Throwable t) {
                                LOG.warn("Rejected call.", t);
                                return null;
                            }

                            @Override
                            public Void onUnknown(Throwable t) {
                                LOG.warn("Unknown exception.", t);
                                return null;
                            }
                        });
                    }
                });
    }

