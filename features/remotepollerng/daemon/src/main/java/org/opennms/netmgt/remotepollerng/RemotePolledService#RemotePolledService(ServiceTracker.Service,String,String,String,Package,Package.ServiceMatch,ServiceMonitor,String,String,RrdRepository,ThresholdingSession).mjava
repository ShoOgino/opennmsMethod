    public RemotePolledService(final ServiceTracker.Service service,
                               final String foreignSource,
                               final String foreignId,
                               final String nodeLabel,
                               final Package pkg,
                               final Package.ServiceMatch serviceMatch,
                               final ServiceMonitor serviceMonitor,
                               final String perspectiveLocation,
                               final String residentLocation,
                               final RrdRepository rrdRepository,
                               final ThresholdingSession thresholdingSession) {
        this.service = Objects.requireNonNull(service);
        this.foreignSource = Objects.requireNonNull(foreignSource);
        this.foreignId = Objects.requireNonNull(foreignId);
        this.nodeLabel = Objects.requireNonNull(nodeLabel);
        this.pkg = Objects.requireNonNull(pkg);
        this.serviceMatch = Objects.requireNonNull(serviceMatch);
        this.serviceMonitor = Objects.requireNonNull(serviceMonitor);
        this.perspectiveLocation = Objects.requireNonNull(perspectiveLocation);
        this.residentLocation = Objects.requireNonNull(residentLocation);
        this.rrdRepository = rrdRepository;
        this.thresholdingSession = thresholdingSession;

        this.monitoredService = new MonitoredService() {
            @Override
            public String getSvcName() {
                return service.serviceName;
            }

            @Override
            public String getIpAddr() {
                return InetAddressUtils.str(service.ipAddress);
            }

            @Override
            public int getNodeId() {
                return service.nodeId;
            }

            @Override
            public String getNodeLabel() {
                return nodeLabel;
            }

            @Override
            public String getNodeLocation() {
                // This returns the perspective location instead of the node location as the poll should be executed
                // from the perspective location
                return perspectiveLocation;
            }

            @Override
            public InetAddress getAddress() {
                return service.ipAddress;
            }
        };
    }

