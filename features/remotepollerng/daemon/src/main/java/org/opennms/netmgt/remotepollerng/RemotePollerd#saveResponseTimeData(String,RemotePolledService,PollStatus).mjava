    public void saveResponseTimeData(final String locationName, final RemotePolledService remotePolledService, final PollStatus pollStatus) {
        final OnmsMonitoredService monSvc = remotePolledService.getMonSvc();
        final Package pkg = remotePolledService.getPkg();

        final String svcName = monSvc.getServiceName();
        final Service svc = this.pollerConfig.getServiceInPackage(svcName, pkg);

        final String residentLocationName = monSvc.getIpInterface().getNode().getLocation().getLocationName();

        String dsName = getServiceParameter(svc, "ds-name");
        if (dsName == null) {
            dsName = PollStatus.PROPERTY_RESPONSE_TIME;
        }

        String rrdBaseName = getServiceParameter(svc, "rrd-base-name");
        if (rrdBaseName == null) {
            rrdBaseName = dsName;
        }

        final String rrdRepository = getServiceParameter(svc, "rrd-repository");
        if (rrdRepository == null) {
            return;
        }

        final RrdRepository repository = new RrdRepository();
        repository.setStep(this.pollerConfig.getStep(pkg));
        repository.setHeartBeat(repository.getStep() * 2);
        repository.setRraList(this.pollerConfig.getRRAList(pkg));
        repository.setRrdBaseDir(new File(rrdRepository));

        // Prefer ds-name over "response-time" for primary response-time value
        final Map<String, Number> properties = Maps.newHashMap(pollStatus.getProperties());
        if (!properties.containsKey(dsName) && properties.containsKey(PollStatus.PROPERTY_RESPONSE_TIME)) {
            properties.put(dsName, properties.get(PollStatus.PROPERTY_RESPONSE_TIME));
            properties.remove(PollStatus.PROPERTY_RESPONSE_TIME);
        }

        // Build collection agent
        final CollectionAgentDTO agent = new CollectionAgentDTO();
        agent.setAddress(monSvc.getIpAddress());
        agent.setForeignId(monSvc.getForeignId());
        agent.setForeignSource(monSvc.getForeignSource());
        agent.setNodeId(monSvc.getNodeId());
        agent.setNodeLabel(monSvc.getIpInterface().getNode().getLabel());
        agent.setLocationName(locationName);
        agent.setStorageResourcePath(ResourcePath.get(LocationUtils.isDefaultLocationName(residentLocationName)
                                                      ? ResourcePath.get()
                                                      : ResourcePath.get(ResourcePath.sanitize(residentLocationName)),
                                                      InetAddressUtils.str(monSvc.getIpAddress())));
        agent.setStoreByForeignSource(false);

        // Create collection set from response times as gauges and persist
        final CollectionSetBuilder collectionSetBuilder = new CollectionSetBuilder(agent);
        final RemoteLatencyResource resource = new RemoteLatencyResource(locationName, InetAddressUtils.str(monSvc.getIpAddress()), svcName);
        for (final Map.Entry<String, Number> e: properties.entrySet()) {
            final String key = PollStatus.PROPERTY_RESPONSE_TIME.equals(e.getKey())
                               ? dsName
                               : e.getKey();

            collectionSetBuilder.withGauge(resource, rrdBaseName, key, e.getValue());
        }

        final CollectionSetDTO collectionSetDTO = collectionSetBuilder.build();

        collectionSetDTO.visit(this.persisterFactory.createPersister(new ServiceParameters(Collections.emptyMap()),
                                                                         repository,
                                                                         false,
                                                                         true,
                                                                         true));

        remotePolledService.applyThresholds(thresholdingService, collectionSetDTO, remotePolledService.getMonitoredService(), dsName, repository);
    }

