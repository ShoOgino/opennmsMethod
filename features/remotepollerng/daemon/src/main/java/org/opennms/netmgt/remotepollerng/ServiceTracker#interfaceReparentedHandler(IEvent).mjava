    @EventHandler(uei = EventConstants.INTERFACE_REPARENTED_EVENT_UEI)
    public void interfaceReparentedHandler(final IEvent event) {
        final Node oldNode = new Node(Integer.parseInt(event.getParm(EventConstants.PARM_OLD_NODEID).getValue().getContent()));
        final Node newNode = new Node(Integer.parseInt(event.getParm(EventConstants.PARM_NEW_NODEID).getValue().getContent()));

        final InetAddress ipAddress = InetAddressUtils.addr(event.getInterface());

        final Interface oldInterface = oldNode.iface(ipAddress);
        final Interface newInterface = newNode.iface(ipAddress);

        // Remove interface from old node and add to new one
        this.network.remove(oldInterface).forEach(this.deleteService.andThen(oldEntry -> {
            final Service newService = newInterface.service(oldEntry.service.serviceName);

            final Optional<E> newElement = this.filterService.apply(newService);
            if (!newElement.isPresent()) { // TODO fooker: this smells
                return;
            }

            if (this.network.add(newService, newElement.get())) {
                LOG.debug("Service already known: {}", newService);
                return;
            }

            this.addService.accept(new ServiceEntry<>(newService, newElement.get())); // TODO fooker: this smells
        }));
    }

