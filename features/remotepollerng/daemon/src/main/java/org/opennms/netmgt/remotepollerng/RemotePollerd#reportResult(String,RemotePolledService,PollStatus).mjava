    protected void reportResult(final String locationName, final RemotePolledService polledService, final PollStatus pollResult) {
        sessionUtils.withTransaction(() -> {
            final OnmsMonitoringLocation location = this.monitoringLocationDao.get(locationName);

            final OnmsLocationSpecificStatus oldLocationSpecificStatus = this.locationSpecificStatusDao.getMostRecentStatusChange(location, polledService.getMonSvc());

            if (oldLocationSpecificStatus == null || oldLocationSpecificStatus.getPollResult().getStatusCode() != pollResult.getStatusCode() ||
                    (pollResult.getReason() != null && !pollResult.getReason().equals(oldLocationSpecificStatus.getPollResult().getReason()))) {
                final OnmsLocationSpecificStatus status = new OnmsLocationSpecificStatus();
                status.setLocation(location);
                status.setMonitoredService(polledService.getMonSvc());
                status.setPollResult(pollResult);

                this.locationSpecificStatusDao.saveStatusChange(status);

                try {
                    sendRegainedOrLostServiceEvent(locationName, polledService.getMonSvc(), pollResult);
                } catch (final Exception e) {
                    LOG.error("Unable to save result for location {}, monitored service ID {}.", locationSpecificStatusDao, polledService.getMonSvc().getId(), e);
                }
            }

            try {
                if (pollResult.getResponseTime() != null) {
                    saveResponseTimeData(locationName, polledService.getMonSvc(), pollResult, polledService.getPkg());
                }
            } catch (final Exception e) {
                LOG.error("Unable to save response time data for location {}, monitored service ID {}.", locationSpecificStatusDao, polledService.getMonSvc().getId(), e);
            }

            return null;
        });
    }

