    @Test
    @Transactional
    public void testRemotePollerThresholding() {
        // this will return 192.168.1.1 for each call for active IPs
        final FilterDao filterDao = EasyMock.createMock(FilterDao.class);
        EasyMock.expect(filterDao.getActiveIPAddressList((String)EasyMock.anyObject())).andReturn(Collections.singletonList(addr("192.168.1.1"))).anyTimes();
        filterDao.flushActiveIpAddressListCache();
        EasyMock.expectLastCall().anyTimes();
        FilterDaoFactory.setInstance(filterDao);
        EasyMock.replay(filterDao);

        // load the thresholds.xml and thresd-configuration.xml configuration
        this.thresholdingDao.overrideConfig(getClass().getResourceAsStream("/thresholds.xml"));
        this.threshdDao.overrideConfig(getClass().getResourceAsStream("/threshd-configuration.xml"));

        final Package pkg = PollerConfigFactory.getInstance().getPackage("foo1");
        final Service service = PollerConfigFactory.getInstance().getServiceInPackage("ICMP", pkg);
        final ServiceMonitor svcMon = PollerConfigFactory.getInstance().getServiceMonitor("ICMP");

        final OnmsMonitoredService onmsMonitoredService = this.databasePopulator.getMonitoredServiceDao().findAll().stream().filter(s->"ICMP".equals(s.getServiceName())).findFirst().get();
        RemotePolledService remotePolledService = new RemotePolledService(onmsMonitoredService, pkg, service, svcMon);
        Assert.assertEquals(0, this.databasePopulator.getLocationSpecificStatusDao().findAll().size());

        final int nodeId = onmsMonitoredService.getNodeId();
        final InetAddress ipAddress = onmsMonitoredService.getIpInterface().getIpAddress();
        final String location = onmsMonitoredService.getIpInterface().getNode().getLocation().getLocationName();

        // first, report PollStatus.available(), so RegainedService event is sent
        this.remotePollerd.reportResult("RDU", remotePolledService, PollStatus.available());

        // create a PollStatus instance with a response time higher than the defined threshold of 50
        final PollStatus pollStatus = PollStatus.available();
        pollStatus.setProperty(PollStatus.PROPERTY_RESPONSE_TIME, 51);

        // report PollStatus and check for event
        this.eventIpcManager.getEventAnticipator().reset();
        this.eventIpcManager.getEventAnticipator().anticipateEvent(new EventBuilder(EventConstants.HIGH_THRESHOLD_EVENT_UEI, "RemotePollerd").setNodeid(nodeId).setInterface(ipAddress).setService(service.getName()).setParam("location", location).getEvent());
        this.remotePollerd.reportResult("RDU", remotePolledService, pollStatus);
        this.eventIpcManager.getEventAnticipator().verifyAnticipated();
    }

