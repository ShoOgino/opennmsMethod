    @BeforeTransaction
    public void beforeTransaction() throws Exception {
        this.databasePopulator.populateDatabase();

        PollerConfigFactory.setPollerConfigFile(POLLER_CONFIG_1);
        PollerConfigFactory.setInstance(new PollerConfigFactory(-1L, new FileInputStream(POLLER_CONFIG_1)));
        changePollingPackages("RDU", "foo1");

        this.databasePopulator.getTransactionTemplate().execute(transactionStatus -> {
            List<OnmsMonitoredService> listOfServices = this.databasePopulator.getMonitoredServiceDao().findAll();

            final OnmsApplication app1 = new OnmsApplication();
            app1.setName("App1");
            this.applicationDao.save(app1);

            listOfServices.get(0).addApplication(app1);
            listOfServices.get(1).addApplication(app1);
            listOfServices.get(2).addApplication(app1);
            listOfServices.get(3).addApplication(app1);
            listOfServices.get(4).addApplication(app1);

            this.databasePopulator.getMonitoredServiceDao().save(listOfServices.get(0));
            this.databasePopulator.getMonitoredServiceDao().save(listOfServices.get(1));
            this.databasePopulator.getMonitoredServiceDao().save(listOfServices.get(2));
            this.databasePopulator.getMonitoredServiceDao().save(listOfServices.get(3));
            this.databasePopulator.getMonitoredServiceDao().save(listOfServices.get(4));

            final OnmsApplication app2 = new OnmsApplication();
            app2.setName("App2");
            this.applicationDao.save(app2);

            listOfServices.get(5).addApplication(app2);
            listOfServices.get(6).addApplication(app2);
            listOfServices.get(7).addApplication(app2);

            this.databasePopulator.getMonitoredServiceDao().save(listOfServices.get(5));
            this.databasePopulator.getMonitoredServiceDao().save(listOfServices.get(6));
            this.databasePopulator.getMonitoredServiceDao().save(listOfServices.get(7));

            return null;
        });


        this.remotePollerd = new RemotePollerd(
                this.sessionUtils,
                this.databasePopulator.getMonitoringLocationDao(),
                PollerConfigFactory.getInstance(),
                this.databasePopulator.getMonitoredServiceDao(),
                new LocationAwarePollerClientImpl(new MockRpcClientFactory()),
                this.databasePopulator.getLocationSpecificStatusDao(),
                this.collectionAgentFactory,
                this.persisterFactory,
                this.eventIpcManager,
                this.thresholdingService
        );
        this.annotationBasedEventListenerAdapter = new AnnotationBasedEventListenerAdapter(this.remotePollerd, eventIpcManager);
        this.remotePollerd.start();
    }

