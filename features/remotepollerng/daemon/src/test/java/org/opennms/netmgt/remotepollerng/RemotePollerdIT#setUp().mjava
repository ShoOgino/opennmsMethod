    @Before
    public void setUp() throws Exception {
        this.databasePopulator.populateDatabase();

        this.eventIpcManager.setEventWriter(this.database);

        PollerConfigFactory.setPollerConfigFile(POLLER_CONFIG_1);
        PollerConfigFactory.setInstance(new PollerConfigFactory(-1L, new FileInputStream(POLLER_CONFIG_1)));
//        changePollingPackages("RDU", "foo1");

        this.databasePopulator.getTransactionTemplate().execute(transactionStatus -> {
            this.node1icmp = this.databasePopulator.getNode1().getPrimaryInterface().getMonitoredServiceByServiceType("ICMP");
            this.node2icmp = this.databasePopulator.getNode2().getPrimaryInterface().getMonitoredServiceByServiceType("ICMP");
            this.node1snmp = this.databasePopulator.getNode1().getPrimaryInterface().getMonitoredServiceByServiceType("SNMP");
            this.node2snmp = this.databasePopulator.getNode2().getPrimaryInterface().getMonitoredServiceByServiceType("SNMP");
            this.node1http = this.databasePopulator.getNode1().getInterfaceWithService("HTTP").getMonitoredServiceByServiceType("HTTP");

            this.app1 = new OnmsApplication();
            this.app1.setName("App1");
            this.app1.addPerspectiveLocation(this.databasePopulator.getLocRDU());
            this.app1.addPerspectiveLocation(this.databasePopulator.getLocFD());
            this.app1.addMonitoredService(this.node1icmp);
            this.app1.addMonitoredService(this.node2icmp);
            this.app1.addMonitoredService(this.node1http);
            this.databasePopulator.getApplicationDao().save(this.app1);

            this.node1icmp.addApplication(this.app1);
            this.databasePopulator.getMonitoredServiceDao().saveOrUpdate(this.node1icmp);
            this.node2icmp.addApplication(this.app1);
            this.databasePopulator.getMonitoredServiceDao().saveOrUpdate(this.node2icmp);
            this.node1http.addApplication(this.app1);
            this.databasePopulator.getMonitoredServiceDao().saveOrUpdate(this.node1http);

            this.app2 = new OnmsApplication();
            this.app2.setName("App2");
            this.app2.addPerspectiveLocation(this.databasePopulator.getLocRDU());
            this.app2.addMonitoredService(this.node1snmp);
            this.app2.addMonitoredService(this.node2snmp);
            this.databasePopulator.getApplicationDao().save(this.app2);

            this.node1snmp.addApplication(this.app2);
            this.databasePopulator.getMonitoredServiceDao().saveOrUpdate(this.node1snmp);
            this.node2snmp.addApplication(this.app2);
            this.databasePopulator.getMonitoredServiceDao().saveOrUpdate(this.node2snmp);

            return null;
        });

        final LocationAwarePollerClientImpl locationAwarePollerClient = new LocationAwarePollerClientImpl(new MockRpcClientFactory());
        locationAwarePollerClient.setEntityScopeProvider(new MockEntityScopeProvider());
        locationAwarePollerClient.setRpcTargetHelper(new RpcTargetHelper());
        locationAwarePollerClient.afterPropertiesSet();

        System.setProperty(PerspectiveServiceTracker.REFRESH_RATE_LIMIT_PROPERTY, "5");

        final PerspectiveServiceTracker tracker = new PerspectiveServiceTracker(this.sessionUtils, this.databasePopulator.getApplicationDao());
        new AnnotationBasedEventListenerAdapter(tracker, eventIpcManager);

        this.remotePollerd = new RemotePollerd(
                this.sessionUtils,
                this.databasePopulator.getMonitoringLocationDao(),
                PollerConfigFactory.getInstance(),
                this.databasePopulator.getMonitoredServiceDao(),
                locationAwarePollerClient,
                this.databasePopulator.getApplicationDao(),
                this.collectionAgentFactory,
                this.persisterFactory,
                this.eventIpcManager,
                this.thresholdingService,
                this.eventDao,
                this.outageDao,
                new MockTracerRegistry(),
                tracker
        );
        new AnnotationBasedEventListenerAdapter(this.remotePollerd, eventIpcManager);

        this.remotePollerd.start();
    }

