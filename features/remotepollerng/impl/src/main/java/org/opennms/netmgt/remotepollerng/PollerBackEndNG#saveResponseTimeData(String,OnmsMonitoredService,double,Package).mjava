    public void saveResponseTimeData(final String locationName, final OnmsMonitoredService monSvc, final double responseTime, final Package pkg) {
        final String svcName = monSvc.getServiceName();
        final Service svc = pollerConfig.getServiceInPackage(svcName, pkg);

        String dsName = getServiceParameter(svc, "ds-name");
        if (dsName == null) {
            dsName = PollStatus.PROPERTY_RESPONSE_TIME;
        }

        String rrdBaseName = getServiceParameter(svc, "rrd-base-name");
        if (rrdBaseName == null) {
            rrdBaseName = dsName;
        }

        final String rrdRepository = getServiceParameter(svc, "rrd-repository");
        if (rrdRepository == null) {
            return;
        }

        // FIXME: We don't need to recompute this everytime
        RrdRepository repository = new RrdRepository();
        repository.setStep(pollerConfig.getStep(pkg));
        repository.setHeartBeat(repository.getHeartBeat());
        repository.setRraList(pollerConfig.getRRAList(pkg));
        repository.setRrdBaseDir(new File(rrdRepository));

        // FIXME: Use collectionset builder for this
        LatencyCollectionResource latencyResource = new LatencyCollectionResource(monSvc.getServiceName(), InetAddressUtils.toIpAddrString(monSvc.getIpAddress()), locationName);
        LatencyCollectionAttributeType latencyType = new LatencyCollectionAttributeType(rrdBaseName, dsName);
        latencyResource.addAttribute(new LatencyCollectionAttribute(latencyResource,
                latencyType, dsName, responseTime));

        ServiceParameters params = new ServiceParameters(Collections.emptyMap());
        CollectionSetVisitor persister = persisterFactory.createPersister(params, repository, false, true, true);

        SingleResourceCollectionSet collectionSet = new SingleResourceCollectionSet(latencyResource, new Date());
        collectionSet.setStatus(CollectionStatus.SUCCEEDED);
        collectionSet.visit(persister);
    }

