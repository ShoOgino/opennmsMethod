        @Override
        public void acceptResult(CompilationResult result) {
            String className = ((CompilationUnit) result.getCompilationUnit()).className;

            int classIdx;
            for (classIdx = 0; classIdx < units.length; ++classIdx) {
                if (className.equals(units[classIdx].getName())) {
                    break;
                }
            }

            if (result.hasErrors()) {
                // IProblem[] problems = result.getErrors();
                IProblem[] problems = getJavaCompilationErrors(result);

                unitResults[classIdx].problems = problems;

                String sourceCode = units[classIdx].getSourceCode();

                for (int i = 0; i < problems.length; i++) {
                    IProblem problem = problems[i];

                    if (IProblem.UndefinedMethod == problem.getID()) {
                        if (problem.getSourceStart() >= 0 && problem.getSourceEnd() >= 0) {
                            String methodName = sourceCode.substring(problem.getSourceStart(),
                                    problem.getSourceEnd() + 1);

                            Method method = FunctionsUtil.getInstance(jasperReportsContext)
                                    .getMethod4Function(methodName);
                            if (method != null) {
                                unitResults[classIdx].addMissingMethod(method);
                                // continue;
                            }
                        }
                    }
                }
            } else {
                ClassFile[] resultClassFiles = result.getClassFiles();
                for (int i = 0; i < resultClassFiles.length; i++) {
                    units[classIdx].setCompileData(resultClassFiles[i].getBytes());
                }
            }
        }

