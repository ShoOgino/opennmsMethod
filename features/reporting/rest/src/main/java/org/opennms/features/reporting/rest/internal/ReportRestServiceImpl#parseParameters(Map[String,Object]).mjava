    private ReportParameters parseParameters(Map<String, Object> inputParameters) {
        final JSONObject jsonParameters = new JSONObject(inputParameters);
        final ReportParameters parameters = new ReportParameters();
        parameters.setReportId((String) inputParameters.get("id"));
        parameters.setFormat(ReportFormat.valueOf(jsonParameters.getString("format")));
        parameters.setStringParms(parseParameters(jsonParameters.getJSONArray("parameters"), "string", jsonObject -> {
            // TODO MVR this is not ideal, as we override name and such as well, should only apply the values
            final ReportStringParm parm = new ReportStringParm();
            if (jsonObject.has("inputType")) {
                parm.setInputType(jsonObject.getString("inputType"));
            }
            parm.setName(jsonObject.getString("name"));
            parm.setDisplayName(jsonObject.getString("displayName"));
            parm.setValue(jsonObject.getString("value"));
            return parm;
        }));
        parameters.setDoubleParms(parseParameters(jsonParameters.getJSONArray("parameters"), "double", jsonObject -> {
            // TODO MVR this is not ideal, as we override name and such as well, should only apply the values
            final ReportDoubleParm parm = new ReportDoubleParm();
            if (jsonObject.has("inputType")) {
                parm.setInputType(jsonObject.getString("inputType"));
            }
            parm.setName(jsonObject.getString("name"));
            parm.setDisplayName(jsonObject.getString("displayName"));
            parm.setValue(jsonObject.getDouble("value"));
            return parm;
        }));
        parameters.setIntParms(parseParameters(jsonParameters.getJSONArray("parameters"), "integer", jsonObject -> {
            // TODO MVR this is not ideal, as we override name and such as well, should only apply the values
            final ReportIntParm parm = new ReportIntParm();
            if (jsonObject.has("inputType")) {
                parm.setInputType(jsonObject.getString("inputType"));
            }
            parm.setName(jsonObject.getString("name"));
            parm.setDisplayName(jsonObject.getString("displayName"));
            parm.setValue(jsonObject.getInt("value"));
            return parm;
        }));
        parameters.setFloatParms(parseParameters(jsonParameters.getJSONArray("parameters"), "float", jsonObject -> {
            // TODO MVR this is not ideal, as we override name and such as well, should only apply the values
            final ReportFloatParm parm = new ReportFloatParm();
            if (jsonObject.has("inputType")) {
                parm.setInputType(jsonObject.getString("inputType"));
            }
            parm.setName(jsonObject.getString("name"));
            parm.setDisplayName(jsonObject.getString("displayName"));
            parm.setValue(jsonObject.getFloat("value"));
            return parm;
        }));
        parameters.setDateParms(parseParameters(jsonParameters.getJSONArray("parameters"), "date", jsonObject -> {
            // TODO MVR this is not ideal, as we override name and such as well, should only apply the values
            final ReportDateParm parm = new ReportDateParm();
            parm.setName(jsonObject.getString("name"));
            parm.setDisplayName(jsonObject.getString("displayName"));
            parm.setCount(jsonObject.getInt("count"));
            parm.setInterval(jsonObject.getString("interval"));
            if (jsonObject.has("date")) {
                try {
                    final String dateString = jsonObject.getString("date");
                    final Date parsedDate = new SimpleDateFormat("yyyy-MM-dd").parse(dateString);
                    parm.setDate(parsedDate);
                } catch (ParseException e) {
                    throw new RuntimeException(e);
                }
            }
            parm.setHours(jsonObject.getInt("hours"));
            parm.setMinutes(jsonObject.getInt("minutes"));
            parm.setUseAbsoluteDate(jsonObject.getBoolean("useAbsoluteDate")); // TODO MVR this is already known and should not be overriden
            return parm;
        }));
        return parameters;
    }

