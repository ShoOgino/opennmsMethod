    @Override
    public Response updateSchedule(final String triggerName, final Map<String, Object> parameters) {
        final Optional<TriggerDescription> any = schedulerService.getTriggerDescriptions().stream()
                .filter(triggerDescription -> triggerDescription.getTriggerName().equals(triggerName))
                .findAny();
        if (any.isPresent()) {
            final ReportParameters reportParameters = parseParameters(parameters, ReportMode.SCHEDULED);
            final DeliveryOptions deliveryOptions = parseDeliveryOptions(parameters);
            final ScheduleConfig scheduleConfig = new ScheduleConfig(reportParameters, deliveryOptions, (String) parameters.get("cronExpression"));
            try {
                schedulerService.updateCronTrigger(triggerName, scheduleConfig);
            } catch (SchedulerContextException ex) {
                return createErrorResponse(Status.BAD_REQUEST, createErrorObject(ex.getContext(), ex.getRawMessage()));
            } catch (SchedulerException ex) {
                return createErrorResponse(Status.BAD_REQUEST, createErrorObject(ex));
            }
            return Response.accepted().build();
        }
        return Response.status(Status.NOT_FOUND).build();
    }

