    @Override
    public Response downloadReport(final String format, final String locatorId) {
        if (Strings.isNullOrEmpty(format)) {
            return Response.status(Status.BAD_REQUEST)
                    .type(MediaType.APPLICATION_JSON_TYPE)
                    .entity(createErrorObject("entity", "Property 'format' is null or empty").toString())
                    .build();
        }
        if (Strings.isNullOrEmpty(locatorId)) {
            return Response.status(Status.BAD_REQUEST)
                    .type(MediaType.APPLICATION_JSON_TYPE)
                    .entity(createErrorObject("entity", "Property 'locatorId' is null or empty").toString())
                    .build();
        }
        try {
            final Integer reportCatalogEntryId = Integer.valueOf(WebSecurityUtils.safeParseInt(locatorId));
            final ReportFormat reportFormat = parseReportFormat(format);
            final StreamingOutput streamingOutput = outputStream -> {
                reportStoreService.render(reportCatalogEntryId, reportFormat, outputStream);
                outputStream.flush();
            };
            final Response.ResponseBuilder responseBuilder = Response.ok()
                    .header("Pragma", "public")
                    .header("Cache-Control", "cache")
                    .header("Cache-Control", "must-revalidate")
                    .entity(streamingOutput);
            if (ReportFormat.PDF == reportFormat || ReportFormat.SVG == reportFormat ) {
                return responseBuilder.type("application/pdf;charset=UTF-8")
                        .header("Content-disposition", "inline; filename=" + reportCatalogEntryId.toString() + ".pdf")
                        .build();
            }
            if (ReportFormat.CSV == reportFormat) {
                responseBuilder.type("text/csv;charset=UTF-8")
                .header("Content-disposition", "inline; filename=" + reportCatalogEntryId.toString() + ".csv");
            }
            return responseBuilder.build();
        } catch (NumberFormatException e) {
            return Response.status(Status.BAD_REQUEST)
                        .type(MediaType.APPLICATION_JSON_TYPE)
                        .entity(createErrorObject(e).toString()).build();
        } catch (SchedulerContextException ex) {
            return createErrorResponse(Status.BAD_REQUEST, createErrorObject(ex.getContext(), ex.getRawMessage()));
        }
    }

