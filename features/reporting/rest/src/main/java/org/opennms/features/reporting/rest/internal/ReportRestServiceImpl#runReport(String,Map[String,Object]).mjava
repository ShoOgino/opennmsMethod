    @Override
    public Response runReport(final String reportId, final Map<String, Object> inputParameters) {
        final ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        try {
            final ReportParameters parameters = parseParameters(inputParameters);
            parameters.setReportId(reportId);
            reportWrapperService.runAndRender(parameters, ReportMode.IMMEDIATE, outputStream);
            if ((parameters.getFormat() == ReportFormat.PDF) || (parameters.getFormat() == ReportFormat.SVG)) {
                return Response.ok().type("application/pdf;charset=UTF-8")
                        .header("Content-disposition", "inline; filename=report.pdf")
                        .header("Pragma", "public")
                        .header("Cache-Control", "cache")
                        .header("Cache-Control", "must-revalidate")
                        .entity(outputStream.toByteArray()).build();
            }
            if (parameters.getFormat() == ReportFormat.CSV) {
                return Response.ok().type("text/csv;charset=UTF-8")
                        .header("Content-disposition", "inline; filename=report.csv")
                        .header("Cache-Control", "cache")
                        .header("Cache-Control", "must-revalidate")
                        .entity(outputStream.toByteArray()).build();
            }
            return createErrorResponse(Status.BAD_REQUEST, createErrorObject("format", "Only PDF, SVG or CSV are supported"));
        } catch (SchedulerContextException ex) {
            return createErrorResponse(Status.BAD_REQUEST, createErrorObject(ex.getContext(), ex.getRawMessage()));
        } catch (ReportException ex) {
            return createErrorResponse(Status.BAD_REQUEST, createErrorObject(ex));
        } finally {
            IOUtils.closeQuietly(outputStream);
        }
    }

