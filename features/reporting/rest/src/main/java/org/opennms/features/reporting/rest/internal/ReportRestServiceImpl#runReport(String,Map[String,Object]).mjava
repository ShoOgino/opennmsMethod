    @Override
    public Response runReport(final String reportId, final Map<String, Object> inputParameters) {
        final JSONObject jsonParameters = new JSONObject(inputParameters);
        final ReportParameters parameters = new ReportParameters();
        parameters.setReportId(reportId);
        parameters.setFormat(ReportFormat.valueOf(jsonParameters.getString("format")));
        parameters.setStringParms(parseParameters(jsonParameters.getJSONArray("parameters"), "string", jsonObject -> {
            // TODO MVR this is not ideal, as we override name and such as well, should only apply the values
            final ReportStringParm parm = new ReportStringParm();
            if (jsonObject.has("inputType")) {
                parm.setInputType(jsonObject.getString("inputType"));
            }
            parm.setName(jsonObject.getString("name"));
            parm.setDisplayName(jsonObject.getString("displayName"));
            parm.setValue(jsonObject.getString("value"));
            return parm;
        }));
        parameters.setDoubleParms(parseParameters(jsonParameters.getJSONArray("parameters"), "double", jsonObject -> {
            // TODO MVR this is not ideal, as we override name and such as well, should only apply the values
            final ReportDoubleParm parm = new ReportDoubleParm();
            if (jsonObject.has("inputType")) {
                parm.setInputType(jsonObject.getString("inputType"));
            }
            parm.setName(jsonObject.getString("name"));
            parm.setDisplayName(jsonObject.getString("displayName"));
            parm.setValue(jsonObject.getDouble("value"));
            return parm;
        }));
        parameters.setIntParms(parseParameters(jsonParameters.getJSONArray("parameters"), "integer", jsonObject -> {
            // TODO MVR this is not ideal, as we override name and such as well, should only apply the values
            final ReportIntParm parm = new ReportIntParm();
            if (jsonObject.has("inputType")) {
                parm.setInputType(jsonObject.getString("inputType"));
            }
            parm.setName(jsonObject.getString("name"));
            parm.setDisplayName(jsonObject.getString("displayName"));
            parm.setValue(jsonObject.getInt("value"));
            return parm;
        }));
        parameters.setFloatParms(parseParameters(jsonParameters.getJSONArray("parameters"), "float", jsonObject -> {
            // TODO MVR this is not ideal, as we override name and such as well, should only apply the values
            final ReportFloatParm parm = new ReportFloatParm();
            if (jsonObject.has("inputType")) {
                parm.setInputType(jsonObject.getString("inputType"));
            }
            parm.setName(jsonObject.getString("name"));
            parm.setDisplayName(jsonObject.getString("displayName"));
            parm.setValue(jsonObject.getFloat("value"));
            return parm;
        }));
        parameters.setDateParms(parseParameters(jsonParameters.getJSONArray("parameters"), "date", jsonObject -> {
            // TODO MVR this is not ideal, as we override name and such as well, should only apply the values
            final ReportDateParm parm = new ReportDateParm();
            parm.setName(jsonObject.getString("name"));
            parm.setDisplayName(jsonObject.getString("displayName"));
            parm.setCount(jsonObject.getInt("count"));
            try {
                parm.setDate(new SimpleDateFormat("yyyy-MM-dd").parse(jsonObject.getString("date")));
            } catch (ParseException e) {
                throw new RuntimeException(e);
            }
            parm.setHours(jsonObject.getInt("hours"));
            parm.setInterval(jsonObject.getString("interval"));
            parm.setMinutes(jsonObject.getInt("minutes"));
            parm.setUseAbsoluteDate(jsonObject.getBoolean("useAbsoluteDate"));
            return parm;
        }));

        final ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        try {
            reportWrapperService.runAndRender(parameters, ReportMode.IMMEDIATE, outputStream);
            if ((parameters.getFormat() == ReportFormat.PDF) || (parameters.getFormat() == ReportFormat.SVG) ) {
                return Response.ok().type("application/pdf;charset=UTF-8")
                    .header("Content-disposition", "inline; filename=report.pdf")
                    .header("Pragma", "public")
                    .header("Cache-Control", "cache")
                    .header("Cache-Control", "must-revalidate")
                    .entity(outputStream.toByteArray()).build();
            }
            if(parameters.getFormat() == ReportFormat.CSV) {
                return Response.ok().type("text/csv;charset=UTF-8")
                    .header("Content-disposition", "inline; filename=report.csv")
                    .header("Cache-Control", "cache")
                    .header("Cache-Control", "must-revalidate")
                    .entity(outputStream.toByteArray()).build();
            }
            return Response.status(Response.Status.BAD_REQUEST).build(); // TODO MVR unsupported format
        } catch (ReportException ex) {
            throw new RuntimeException(ex);
        } finally {
            IOUtils.closeQuietly(outputStream);
        }
    }

