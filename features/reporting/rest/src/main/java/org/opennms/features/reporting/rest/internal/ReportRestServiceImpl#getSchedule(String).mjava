    @Override
    public Response getSchedule(String triggerName) {
        final Optional<TriggerDescription> any = schedulerService.getTriggerDescriptions().stream()
                .filter(triggerDescription -> triggerDescription.getTriggerName().equals(triggerName))
                .findAny();
        if (any.isPresent()) {
            final TriggerDescription triggerDescription = any.get();
            final String reportId = triggerDescription.getReportId();
            final List<ReportFormat> formats = reportWrapperService.getFormats(reportId);
            final Collection<Category> categories = categoryConfigDao.findAll();
            final List<OnmsCategory> surveillanceCategories = categoryDao.findAll();
            final ReportParameters parameters = reportWrapperService.getParameters(reportId);
            final ReportParameters persistedParameters = triggerDescription.getReportParameters();
            parameters.apply(persistedParameters);

            final ReportDetails reportDetails = new ReportDetailsBuilder()
                    .withReportId(triggerDescription.getReportId())
                    .withFormats(formats)
                    .withParameters(parameters)
                    .withCategories(categories)
                    .withSurveillanceCategories(surveillanceCategories)
                    .withDeliveryOptions(triggerDescription.getDeliveryOptions())
                    .withCronExpression(triggerDescription.getCronExpression())
                    .build();

            return Response.ok(reportDetails.toJson().toString()).type(MediaType.APPLICATION_JSON_TYPE).build();
        }
        return Response.status(Status.NOT_FOUND).build();
    }

