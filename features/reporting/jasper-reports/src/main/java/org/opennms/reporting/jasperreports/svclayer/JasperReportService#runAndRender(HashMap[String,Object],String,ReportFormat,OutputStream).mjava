	/** {@inheritDoc} */
	public void runAndRender(HashMap<String, Object> onmsReportParms,
			String reportId, ReportFormat format, OutputStream outputStream)
			throws ReportException {

		JasperReport jasperReport = null;
		JasperPrint jasperPrint = null;
		HashMap<String, Object> jrReportParms;

		String sourceFileName = m_jasperReportConfigDao
				.getTemplateLocation(reportId);
		if (sourceFileName != null) {
			try {
				jasperReport = JasperCompileManager.compileReport(System
						.getProperty("opennms.home")
						+ "/etc/report-templates/" + sourceFileName);
			} catch (JRException e) {
				log.error("unable to compile jasper report", e);
				throw new ReportException("unable to compile jasperReport", e);
			}

			jrReportParms = buildJRparameters(onmsReportParms, jasperReport
					.getParameters());

			if (m_jasperReportConfigDao.getEngine(reportId).equals("jdbc")) {
				Connection connection;
				try {
					connection = DataSourceFactory.getDataSource()
							.getConnection();
					jasperPrint = JasperFillManager.fillReport(jasperReport,
							jrReportParms, connection);
					JasperExportManager.exportReportToPdfStream(jasperPrint,
							outputStream);
					connection.close();
				} catch (SQLException e) {
					log
							.error(
									"sql exception getting or closing datasource ",
									e);
					throw new ReportException(
							"sql exception getting or closing datasource", e);
				} catch (JRException e) {
					log.error("jasper report exception ", e);
					throw new ReportException(
							"unable to run or render jdbc jasperReport", e);
				}
			} else if (m_jasperReportConfigDao.getEngine(reportId).equals(
					"null")) {
				try {
					jasperPrint = JasperFillManager.fillReport(jasperReport,
							onmsReportParms, new JREmptyDataSource());
					JasperExportManager.exportReportToPdfStream(jasperPrint,
							outputStream);
				} catch (JRException e) {
					log.error("jasper report exception ", e);
					throw new ReportException(
							"unable to run or render emptyDataSource jasperReport",
							e);
				}

			}

		}

	}

