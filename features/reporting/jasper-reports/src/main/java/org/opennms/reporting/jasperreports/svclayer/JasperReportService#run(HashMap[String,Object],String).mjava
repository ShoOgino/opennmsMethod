    /** {@inheritDoc} */
    public String run(HashMap<String, Object> onmsReportParms, String reportId)
            throws ReportException {
    	
        String baseDir = System.getProperty("opennms.report.dir");
        JasperReport jasperReport = null;
        JasperPrint jasperPrint = null;
        String outputFileName = null;
        String sourceFileName = m_jasperReportConfigDao.getTemplateLocation(reportId);
    	HashMap<String, Object> jrReportParms;
    	
        if (sourceFileName != null) {

            try {
                jasperReport = JasperCompileManager.compileReport(System.getProperty("opennms.home")
                        + "/etc/report-templates/" + sourceFileName);
            } catch (JRException e) {
                log.error("unable to compile jasper report", e);
                throw new ReportException("unable to compile jasperReport", e);
            }
            
            jrReportParms = buildJRparameters(onmsReportParms, jasperReport.getParameters());
            
            outputFileName = new String(baseDir + "/"
                    + jasperReport.getName() + ".jrpxml");
            log.debug("jrpcml output file: " + outputFileName);
            if (m_jasperReportConfigDao.getEngine(reportId).equals("jdbc")) {
                Connection connection;
                try {
                    connection = DataSourceFactory.getDataSource().getConnection();
                    jasperPrint = JasperFillManager.fillReport(jasperReport,
                                                               jrReportParms,
                                                               connection);
                    JRXmlExporter exporter = new JRXmlExporter();
                    exporter.setParameter(JRExporterParameter.JASPER_PRINT,
                                          jasperPrint);
                    exporter.setParameter(
                                          JRExporterParameter.OUTPUT_FILE_NAME,
                                          outputFileName);
                    exporter.exportReport();
                    connection.close();
                } catch (SQLException e) {
                    log.error("sql exception getting or closing datasource ",
                              e);
                    throw new ReportException(
                                              "sql exception getting or closing datasource",
                                              e);
                } catch (JRException e) {
                    log.error("jasper report exception ", e);
                    throw new ReportException(
                                              "unable to run emptyDataSource jasperReport",
                                              e);
                }
            } else if (m_jasperReportConfigDao.getEngine(reportId).equals(
                                                                          "null")) {
                try {
                    jasperPrint = JasperFillManager.fillReport(
                                                               jasperReport,
                                                               onmsReportParms,
                                                               new JREmptyDataSource());
                    JRXmlExporter exporter = new JRXmlExporter();
                    exporter.setParameter(JRExporterParameter.JASPER_PRINT,
                                          jasperPrint);
                    exporter.setParameter(
                                          JRExporterParameter.OUTPUT_FILE_NAME,
                                          outputFileName);
                    exporter.exportReport();
                } catch (JRException e) {
                    log.error("jasper report exception ", e);
                    throw new ReportException(
                                              "unable to run emptyDataSource jasperReport",
                                              e);
                }

            } else {
                throw new ReportException(
                                          "no suitable datasource configured for reportId: "
                                                  + reportId);
            }
        }

        return outputFileName;
    }

