    private HashMap<String, Object> buildJRparameters(final HashMap<String, Object> onmsReportParms, final JRParameter[] reportParms) throws ReportException {
        final HashMap<String, Object> jrReportParms = new HashMap<String, Object>();

        for (final JRParameter reportParm : reportParms) {
            LOG.debug("found report parm {} of class {}", reportParm.getValueClassName(), reportParm.getName());
            if (reportParm.isSystemDefined() == false) {
                final String parmName = reportParm.getName();

                if (reportParm.isForPrompting() == false) {
                    LOG.debug("Required parameter {} is not for prompting - continuing", parmName);
                    continue;
                }

                if (onmsReportParms.containsKey(parmName) == false) {
                    throw new ReportException("Required parameter " + parmName + " not supplied to JasperReports by OpenNMS");
                }

                if (reportParm.getValueClassName().equals("java.lang.String")) {
                    jrReportParms.put(parmName, (String)onmsReportParms.get(parmName));
                    continue;
                }

                if (reportParm.getValueClassName().equals("java.lang.Integer")) {
                    jrReportParms.put(parmName, (Integer) onmsReportParms.get(parmName));
                    continue;
                }

                if (reportParm.getValueClassName().equals("java.lang.Float")) {
                    jrReportParms.put(parmName, (Float) onmsReportParms.get(parmName));
                    continue;
                }

                if (reportParm.getValueClassName().equals("java.lang.Double")) {
                    jrReportParms.put(parmName, (Double) onmsReportParms.get(parmName));
                    continue;
                }

                if (reportParm.getValueClassName().equals("java.util.Date")) {
                    jrReportParms.put(parmName, (Date)onmsReportParms.get(parmName));
                    continue;
                }

                if (reportParm.getValueClassName().equals("java.sql.Date")) {
                    final Date date = (Date)onmsReportParms.get(parmName);
                    jrReportParms.put(parmName, new java.sql.Date(date.getTime()));
                    continue;
                }

                if (reportParm.getValueClassName().equals("java.sql.Timestamp")) {
                    final Date date = (Date)onmsReportParms.get(parmName);
                    jrReportParms.put(parmName, new java.sql.Timestamp(date.getTime()));
                    continue;
                }

                throw new ReportException("Unsupported report parameter type " + reportParm.getValueClassName());
            }
        }

        return jrReportParms;

    }

