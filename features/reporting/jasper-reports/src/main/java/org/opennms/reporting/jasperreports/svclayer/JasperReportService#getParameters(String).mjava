	/** {@inheritDoc} */
	public ReportParameters getParameters(String reportId) {

		ReportParameters reportParameters = new ReportParameters();
		ArrayList<ReportIntParm> intParms;
		ArrayList<ReportStringParm> stringParms;
		ArrayList<ReportDateParm> dateParms;

		JRParameter[] reportParms;

		JasperReport jasperReport = null;

		String sourceFileName = m_jasperReportConfigDao
				.getTemplateLocation(reportId);
		if (sourceFileName != null) {
			try {
				jasperReport = JasperCompileManager.compileReport(System
						.getProperty("opennms.home")
						+ "/etc/report-templates/" + sourceFileName);
			} catch (JRException e) {
				log.error("unable to compile jasper report", e);
				// throw new ReportException("unable to compile jasperReport",
				// e);
			}
		}

		reportParms = jasperReport.getParameters();

		intParms = new ArrayList<ReportIntParm>();
		reportParameters.setIntParms(intParms);
		stringParms = new ArrayList<ReportStringParm>();
		reportParameters.setStringParms(stringParms);
		dateParms = new ArrayList<ReportDateParm>();
		reportParameters.setDateParms(dateParms);

		for (JRParameter reportParm : reportParms) {

			if (reportParm.isSystemDefined() == false) {

				if (reportParm.getValueClassName().equals("java.lang.String")) {
					log.debug("adding a string parm name "
							+ reportParm.getName());
					ReportStringParm stringParm = new ReportStringParm();
					stringParm.setDisplayName(reportParm.getName());
					stringParm.setName(reportParm.getName());
					// stringParm.setInputType(strings[i].getInputType());
					stringParm.setValue(new String());
					stringParms.add(stringParm);
					continue;
				}

				if (reportParm.getValueClassName().equals("java.lang.Integer")) {
					log.debug("adding a Integer parm name "
							+ reportParm.getName());
					ReportIntParm intParm = new ReportIntParm();
					intParm.setDisplayName(reportParm.getName());
					intParm.setName(reportParm.getName());
					// intParm.setInputType(integers[i].getInputType());
					intParm.setValue(new Integer(0));
					intParms.add(intParm);
					continue;
				}

				if (reportParm.getValueClassName().equals("java.util.Date")) {
					log.debug("adding a java.util.Date parm name "
							+ reportParm.getName());
					ReportDateParm dateParm = new ReportDateParm();
					dateParm.setUseAbsoluteDate(false);
					dateParm.setDisplayName(reportParm.getName());
					dateParm.setName(reportParm.getName());
					dateParm.setCount(new Integer(1));
					dateParm.setInterval("day");
					dateParm.setHours(0);
					dateParm.setMinutes(0);
					Calendar cal = Calendar.getInstance();
					cal.set(Calendar.HOUR_OF_DAY, 0);
					cal.set(Calendar.MINUTE, 0);
					cal.set(Calendar.SECOND, 0);
					cal.set(Calendar.MILLISECOND, 0);
					dateParm.setValue(cal.getTime());
					dateParms.add(dateParm);
					continue;
				}

				if (reportParm.getValueClassName().equals("java.sql.Date")) {
					log.debug("adding a java.sql.Date parm name "
							+ reportParm.getName());
					ReportDateParm dateParm = new ReportDateParm();
					dateParm.setUseAbsoluteDate(false);
					dateParm.setDisplayName(reportParm.getName());
					dateParm.setName(reportParm.getName());
					dateParm.setCount(new Integer(1));
					dateParm.setInterval("day");
					dateParm.setHours(0);
					dateParm.setMinutes(0);
					Calendar cal = Calendar.getInstance();
					cal.set(Calendar.HOUR_OF_DAY, 0);
					cal.set(Calendar.MINUTE, 0);
					cal.set(Calendar.SECOND, 0);
					cal.set(Calendar.MILLISECOND, 0);
					dateParm.setValue(cal.getTime());
					dateParms.add(dateParm);
					continue;
				}

				// throw new
				// ReportException("Unsupported report parameter type "
				// + reportParm.getValueClassName());

			}
		}

		return reportParameters;
	}

