    /**
     * {@inheritDoc}
     *
     * @throws ReportException
     */
    @Override
    public ReportParameters getParameters(final String reportId) throws ReportException {
        try {
            return Logging.withPrefix(LOG4J_CATEGORY, new Callable<ReportParameters>() {
                @Override public ReportParameters call() throws Exception {
                    final ReportParameters reportParameters = new ReportParameters();
                    final JasperReport jasperReport = getJasperReport(reportId);
                    final Map<String, Object> defaultValues = JRParameterDefaultValuesEvaluator.evaluateParameterDefaultValues(jasperReport, new HashMap<>());


                    final JRParameter[] reportParms = jasperReport.getParameters();

                    final List<ReportIntParm> intParms = new ArrayList<ReportIntParm>();
                    reportParameters.setIntParms(intParms);

                    final List<ReportFloatParm> floatParms = new ArrayList<ReportFloatParm>();
                    reportParameters.setFloatParms(floatParms);

                    final List<ReportDoubleParm> doubleParms = new ArrayList<ReportDoubleParm>();
                    reportParameters.setDoubleParms(doubleParms);

                    final List<ReportStringParm> stringParms = new ArrayList<ReportStringParm>();
                    reportParameters.setStringParms(stringParms);

                    final List<ReportDateParm> dateParms = new ArrayList<ReportDateParm>();
                    reportParameters.setDateParms(dateParms);

                    for (final JRParameter reportParm : reportParms) {
                        if (apply(parameterFilters, reportParm)) {
                            if (reportParm.getValueClassName().equals("java.lang.String")) {
                                LOG.debug("adding a string parm name {}", reportParm.getName());
                                final ReportStringParm stringParm = new ReportStringParm();
                                if (reportParm.getDescription() != null) {
                                    stringParm.setDisplayName(reportParm.getDescription());
                                } else {
                                    stringParm.setDisplayName(reportParm.getName());
                                }
                                if (reportParm.getPropertiesMap().containsProperty(STRING_INPUT_TYPE)) {
                                    stringParm.setInputType(reportParm.getPropertiesMap().getProperty(STRING_INPUT_TYPE));
                                }
                                stringParm.setName(reportParm.getName());
                                if (defaultValues.containsKey(reportParm.getName()) && (defaultValues.get(reportParm.getName()) != null)) {
                                    stringParm.setValue((String) defaultValues.get(reportParm.getName()));
                                } else {
                                    stringParm.setValue("");
                                }
                                stringParms.add(stringParm);
                                continue;
                            }

                            if (reportParm.getValueClassName().equals("java.lang.Integer")) {
                                LOG.debug("adding a Integer parm name {}", reportParm.getName());
                                final ReportIntParm intParm = new ReportIntParm();
                                if (reportParm.getDescription() != null) {
                                    intParm.setDisplayName(reportParm.getDescription());
                                } else {
                                    intParm.setDisplayName(reportParm.getName());
                                }
                                intParm.setName(reportParm.getName());
                                if (defaultValues.containsKey(reportParm.getName()) && (defaultValues.get(reportParm.getName()) != null)) {
                                    intParm.setValue((Integer) defaultValues.get(reportParm.getName()));
                                } else {
                                    intParm.setValue(Integer.valueOf(0));
                                }
                                intParms.add(intParm);
                                continue;
                            }

                            if (reportParm.getValueClassName().equals("java.lang.Float")) {
                                LOG.debug("adding a Float parm name {}", reportParm.getName());
                                final ReportFloatParm floatParm = new ReportFloatParm();
                                if (reportParm.getDescription() != null) {
                                    floatParm.setDisplayName(reportParm.getDescription());
                                } else {
                                    floatParm.setDisplayName(reportParm.getName());
                                }
                                floatParm.setName(reportParm.getName());
                                if (defaultValues.containsKey(reportParm.getName()) && (defaultValues.get(reportParm.getName()) != null)) {
                                    floatParm.setValue((Float) defaultValues.get(reportParm.getName()));
                                } else {
                                    floatParm.setValue(new Float(0));
                                }
                                floatParms.add(floatParm);
                                continue;
                            }

                            if (reportParm.getValueClassName().equals("java.lang.Double")) {
                                LOG.debug("adding a Double parm name {}", reportParm.getName());
                                final ReportDoubleParm doubleParm = new ReportDoubleParm();
                                if (reportParm.getDescription() != null) {
                                    doubleParm.setDisplayName(reportParm.getDescription());
                                } else {
                                    doubleParm.setDisplayName(reportParm.getName());
                                }
                                doubleParm.setName(reportParm.getName());
                                if (defaultValues.containsKey(reportParm.getName()) && (defaultValues.get(reportParm.getName()) != null)) {
                                    doubleParm.setValue((Double) defaultValues.get(reportParm.getName()));
                                } else {
                                    doubleParm.setValue(Double.valueOf(0));
                                }
                                doubleParms.add(doubleParm);
                                continue;
                            }

                            if (reportParm.getValueClassName().equals("java.util.Date")) {
                                LOG.debug("adding a java.util.Date parm name {}", reportParm.getName());
                                final ReportDateParm dateParm = new ReportDateParm();
                                dateParm.setUseAbsoluteDate(false);
                                if (reportParm.getDescription() != null) {
                                    dateParm.setDisplayName(reportParm.getDescription());
                                } else {
                                    dateParm.setDisplayName(reportParm.getName());
                                }
                                dateParm.setName(reportParm.getName());
                                dateParm.setCount(Integer.valueOf(1));
                                dateParm.setInterval("day");
                                dateParm.setHours(0);
                                dateParm.setMinutes(0);
                                if (defaultValues.containsKey(reportParm.getName()) && (defaultValues.get(reportParm.getName()) != null)) {
                                    dateParm.setDate((Date) defaultValues.get(reportParm.getName()));
                                    Calendar cal = Calendar.getInstance();
                                    cal.setTime(dateParm.getDate());
                                    dateParm.setMinutes(cal.get(Calendar.MINUTE));
                                    dateParm.setHours(cal.get(Calendar.HOUR_OF_DAY));
                                } else {
                                    final Calendar cal = Calendar.getInstance();
                                    cal.set(Calendar.HOUR_OF_DAY, 0);
                                    cal.set(Calendar.MINUTE, 0);
                                    cal.set(Calendar.SECOND, 0);
                                    cal.set(Calendar.MILLISECOND, 0);
                                    dateParm.setDate(cal.getTime());
                                }
                                dateParms.add(dateParm);
                                continue;
                            }

                            if (reportParm.getValueClassName().equals("java.sql.Date") || reportParm.getValueClassName().equals("java.sql.Timestamp")) {
                                LOG.debug("adding a java.sql.Date or Timestamp parm name {}", reportParm.getName());
                                final ReportDateParm dateParm = new ReportDateParm();
                                dateParm.setUseAbsoluteDate(false);
                                if (reportParm.getDescription() != null) {
                                    dateParm.setDisplayName(reportParm.getDescription());
                                } else {
                                    dateParm.setDisplayName(reportParm.getName());
                                }
                                dateParm.setName(reportParm.getName());
                                dateParm.setCount(Integer.valueOf(1));
                                dateParm.setInterval("day");
                                dateParm.setHours(0);
                                dateParm.setMinutes(0);
                                if (defaultValues.containsKey(reportParm.getName()) && (defaultValues.get(reportParm.getName()) != null)) {
                                    dateParm.setDate((Date) defaultValues.get(reportParm.getName()));
                                    Calendar cal = Calendar.getInstance();
                                    cal.setTime(dateParm.getDate());
                                    dateParm.setMinutes(cal.get(Calendar.MINUTE));
                                    dateParm.setHours(cal.get(Calendar.HOUR_OF_DAY));
                                } else {
                                    final Calendar cal = Calendar.getInstance();
                                    cal.set(Calendar.HOUR_OF_DAY, 0);
                                    cal.set(Calendar.MINUTE, 0);
                                    cal.set(Calendar.SECOND, 0);
                                    cal.set(Calendar.MILLISECOND, 0);
                                    dateParm.setDate(cal.getTime());
                                }
                                dateParms.add(dateParm);
                                continue;
                            }
                            throw new ReportException("Unsupported report parameter type " + reportParm.getValueClassName());
                        } else {
                            LOG.debug("SKIPPING {}", reportParm.getName());
                        }
                    }
                    return reportParameters;
                }
            });
        } catch (final Exception e) {
            if (e instanceof ReportException) throw (ReportException)e;
            throw new ReportException(e);
        }
    }

