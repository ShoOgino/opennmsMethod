    public HashMap<String, Object> getParms(String reportId) throws ReportException {
    	
    	HashMap<String, Object> parms;
    	
    	parms = new HashMap<String, Object>();
    	
    	JRParameter[] reportParms;
    	
        JasperReport jasperReport = null;

        String sourceFileName = m_jasperReportConfigDao.getTemplateLocation(reportId);
        if (sourceFileName != null) {
            try {
                jasperReport = JasperCompileManager.compileReport(System.getProperty("opennms.home")
                        + "/etc/report-templates/" + sourceFileName);
            } catch (JRException e) {
                log.error("unable to compile jasper report", e);
                throw new ReportException("unable to compile jasperReport", e);
            }
        }
        
        reportParms = jasperReport.getParameters();
        
        for(JRParameter reportParm : reportParms) {
        	log.debug("found report parm " + reportParm.getName() + 
        			" of class " + reportParm.getValueClassName());
        	if (reportParm.isSystemDefined() == false) {
        		
        		if (reportParm.getValueClassName().equals("java.lang.String")) {
        			parms.put(reportParm.getName(),new String());
        			continue;
        		}
        		
        		if (reportParm.getValueClassName().equals("java.lang.Integer")) {
        			parms.put(reportParm.getName(),new Integer(0));
        			continue;
        		}
        		
        		if (reportParm.getValueClassName().equals("java.util.Date")) {
        			parms.put(reportParm.getName(),new Date());
        			continue;
        		}
        		
        		if (reportParm.getValueClassName().equals("java.sql.Date")) {
        			parms.put(reportParm.getName(),new Date());
        			continue;
        		}
        		
        		throw new ReportException("Unsupported report parameter type "
        				+ reportParm.getValueClassName());
        		
        	}
        }
    	
    	return parms;
    }

