    /** {@inheritDoc} */
    @Override
    public void runAndRender(final Map<String, Object> reportParms, final String reportId, final ReportFormat format, final OutputStream outputStream) {
        Logging.withPrefix(LOG4J_CATEGORY, new Runnable() {
            @Override public void run() {
                ByteArrayOutputStream out = null;
                BufferedOutputStream bout = null;

                try {
                    out = new ByteArrayOutputStream();
                    bout = new BufferedOutputStream(out);
    
                    AvailabilityCalculator calculator;
    
                    LOG.debug("running OpenNMS database report {}", reportId);
    
                    if (m_configDao.getType(reportId).equalsIgnoreCase(CAL_TYPE)) {
                        calculator = m_calendarCalculator;
                        LOG.debug("Calendar report format selected");
                    } else {
                        calculator = m_classicCalculator;
                        LOG.debug("Classic report format selected");
                    }
    
                    calculator.setCategoryName((String) reportParms.get("reportCategory"));
    
                    LOG.debug("set availability calculator report category to: {}", calculator.getCategoryName());
    
    
                    calculator.setPeriodEndDate((Date) reportParms.get("endDate"));
    
                    LOG.debug("set availability calculator end date to: {}", calculator.getPeriodEndDate());
    
                    calculator.setLogoURL(m_configDao.getLogo(reportId));
    
                    // have the calculator calculate everything to enable any of the
                    // templates to work
                    // This has changed since the last version
                    // This will have some performance impact.
    
                    calculator.setReportFormat("all");
    
                    LOG.debug("Starting Availability Report Calculations");

                    calculator.calculate();
                    calculator.writeXML(bout);
                    render(reportId, new ByteArrayInputStream(out.toByteArray()), format, outputStream);
                    outputStream.flush();
                } catch (final Exception e) {
                    LOG.warn("An error occurred while rendering report {}", reportId, e);
                } finally {
                    IOUtils.closeQuietly(bout);
                    IOUtils.closeQuietly(out);
                }

            }
        });
    }

