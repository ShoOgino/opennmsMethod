    /**
     * Compute N days daily service availability.
     * 
     * @param endTime
     *            End time
     * @param catSections
     *            Sections
     * @param label
     *            Section name in the xml
     * @param descr
     *            Section descr.
     */
    private void lastNDaysDailyServiceAvailability(int days, long endTime, CatSections catSections, String label, String descr) {
        LOG.debug("Inside lastNDaysDailyServiceAvailability {}", days);

        final SimpleDateFormat fmtmp = new SimpleDateFormat("dd MMM, yyyy");

        long outage;
        String periodFrom = "";
        String periodTo = "";
        periodTo = fmtmp.format(new java.util.Date(endTime));
        for(final String service : m_monitoredServices) {
            final TreeMap<Date, Double> treeMap = new TreeMap<Date, Double>();
            final Rows rows = new Rows();
            LOG.debug("SERvice {}", service);

            long curTime = endTime;
            Map<IfService, OutageSvcTimesList> svcOutages = null;
            if (m_services != null) svcOutages = m_services.get(service);
            if (svcOutages == null || svcOutages.size() <= 0) {
                int daysCnt = 0;
                while (daysCnt++ < days) {
                    LOG.debug("DAy 100 % : {}", daysCnt);
                    periodFrom = fmtmp.format(new java.util.Date(curTime));

                    treeMap.put(new java.util.Date(curTime), new Double(100.0));

                    curTime -= ROLLING_WINDOW;
                }

                final SimpleDateFormat fmt = new SimpleDateFormat("dd");

                for (final Date tmp : treeMap.keySet()) {
                    final Value dateValue = new Value();
                    dateValue.setContent(fmt.format(tmp) + "");
                    dateValue.setType("title");

                    final Value value = new Value();
                    value.setContent("100.0");
                    value.setType("data");

                    final Row row = new Row();
                    row.addValue(dateValue);
                    row.addValue(value);
                    rows.addRow(row);
                }

                final Col col = new Col();
                col.addColTitle(0, "Date");
                col.addColTitle(1, "Percentage Availability");

                final ClassicTable table = new ClassicTable();
                table.setCol(col);
                table.setRows(rows);

                final Section section = new Section();
                section.setClassicTable(table);
                section.setPeriod(periodFrom + " to " + periodTo);
                section.setSectionName(label + " " + service);
                section.setSectionTitle(label + " " + service);
                section.setSectionDescr(descr + " " + service);
                section.setSectionIndex(m_sectionIndex);
                m_sectionIndex++;
                catSections.addSection(section);
            } else {
                int daysCnt = 0;
                while (daysCnt++ < days) {
                    LOG.debug("DAy : {} end time {} ROLLING_WINDOW {}", daysCnt, new Date(curTime), ROLLING_WINDOW);
                    int serviceCnt = 0;
                    long outageTime = 0;
                    // For each node in the service table.
                    //
                    // Iterate each svc node for getting the ifservice
                    for (final Map.Entry<IfService, OutageSvcTimesList> entry : svcOutages.entrySet()) {
                        final IfService ifservice = entry.getKey();
                        final OutageSvcTimesList outageList = entry.getValue();

                        LOG.debug(ifservice.toString());

                        if (outageList != null) {
                            outage = outageList.getDownTime(curTime, ROLLING_WINDOW);
                            // Keep track of the number of services being
                            // monitored.
                            //
                            outageTime += outage;
                        }
                        serviceCnt++;
                    }
                    LOG.debug("Outage Time {}", outageTime);
                    long den = (ROLLING_WINDOW * serviceCnt);
                    double outag = 1.0 * outageTime;
                    double denom = 1.0 * den;
                    double cal = 0;
                    if (den > 0)
                        cal = 100.0 * (1 - (outag / denom));

                    treeMap.put(new java.util.Date(curTime), new Double(cal));

                    periodFrom = fmtmp.format(new java.util.Date(curTime));
                    LOG.debug("Added to svc list {}", new java.util.Date(curTime));
                    curTime -= ROLLING_WINDOW;
                }

                final SimpleDateFormat fmt = new SimpleDateFormat("dd");

                for (final Map.Entry<Date,Double> entry : treeMap.entrySet()) {
                    final Date tmp = entry.getKey();
                    final Double val = entry.getValue();

                    final Value dateValue = new Value();
                    dateValue.setContent(fmt.format(tmp) + "");
                    dateValue.setType("title");

                    final Value value = new Value();
                    value.setContent("" + val);
                    value.setType("data");

                    final Row row = new Row();
                    row.addValue(dateValue);
                    row.addValue(value);
                    rows.addRow(row);
                }

                Col col = new Col();
                col.addColTitle(0, "Date");
                col.addColTitle(1, "Percentage Availability");
                ClassicTable table = new ClassicTable();
                table.setCol(col);
                table.setRows(rows);
                Section section = new Section();
                section.setClassicTable(table);
                section.setPeriod(periodFrom + " to " + periodTo);
                section.setSectionName(label + " " + service);
                section.setSectionTitle(label + " " + service);
                section.setSectionDescr(descr + " " + service);
                section.setSectionIndex(m_sectionIndex);
                m_sectionIndex++;
                catSections.addSection(section);
            }
        }
        LOG.debug("Leaving lastNDaysDailyServiceAvailability");
    }

