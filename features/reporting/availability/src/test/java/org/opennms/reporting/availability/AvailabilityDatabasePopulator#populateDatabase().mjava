    public void populateDatabase() {
        OnmsDistPoller distPoller = getDistPoller("localhost", "127.0.0.1");
        
        OnmsCategory ac = getCategory("DEV_AC");
        OnmsCategory mid = getCategory("IMP_mid");
        OnmsCategory ops = getCategory("OPS_Online");
        
        OnmsCategory catRouter = getCategory("Routers");
        @SuppressWarnings("unused")
        OnmsCategory catSwitches = getCategory("Switches");
        OnmsCategory catServers = getCategory("Servers");
        getCategory("Production");
        getCategory("Test");
        getCategory("Development");
        
        getServiceType("ICMP");
        getServiceType("SNMP");
        getServiceType("HTTP");
        
//      m_db.update("insert into node (nodeID, nodelabel, nodeCreateTime, nodeType) values (1,'test1.availability.opennms.org','2004-03-01 09:00:00','A')");
//      m_db.update("insert into node (nodeID, nodelabel, nodeCreateTime, nodeType) values (2,'test2.availability.opennms.org','2004-03-01 09:00:00','A')");
//
//      m_db.update("insert into service (serviceid, servicename) values\n"
//              + "(1, 'ICMP');");
//      m_db.update("insert into service (serviceid, servicename) values\n"
//              + "(2, 'HTTP');");
//      m_db.update("insert into service (serviceid, servicename) values\n"
//              + "(3, 'SNMP');");
//
//      m_db.update("insert into ipinterface (id, nodeid, ipaddr, ismanaged) values\n"
//              + "(1, 1,'192.168.100.1','M');");
//      m_db.update("insert into ipinterface (id, nodeid, ipaddr, ismanaged) values\n"
//              + "(2, 2,'192.168.100.2','M');");
//      m_db.update("insert into ipinterface (id, nodeid, ipaddr, ismanaged) values\n"
//              + "(3, 2,'192.168.100.3','M');");
//
//      m_db.update("insert into ifservices (nodeid, ipaddr, serviceid, status, ipInterfaceId) values "
//              + "(1,'192.168.100.1',1,'A', 1);");
//      m_db.update("insert into ifservices (nodeid, ipaddr, serviceid, status, ipInterfaceId) values "
//              + "(2,'192.168.100.2',1,'A', 2);");
//      /*
//       * m_db.update("insert into ifservices (nodeid, ipaddr, serviceid,
//       * status, ipInterfaceId) values " + "(2,'192.168.100.2',2,'A', 2);");
//       */
//      m_db.update("insert into ifservices (nodeid, ipaddr, serviceid, status, ipInterfaceId) values "
//              + "(2,'192.168.100.3',1,'A', 3);");
        
        NetworkBuilder builder = new NetworkBuilder(distPoller);
        
        setNode1(builder.addNode("test1.availability.opennms.org").
                 setId(1).
                 setType(NodeType.ACTIVE).
                 getNode());
        Assert.assertNotNull("newly built node 1 should not be null", getNode1());
        builder.addCategory(ac);
        builder.addCategory(mid);
        builder.addCategory(ops);
        builder.addCategory(catRouter); 
        builder.setBuilding("HQ");
        builder.addInterface("192.168.100.1").setIsManaged("M");
        //getNodeDao().save(builder.getCurrentNode());
        //getNodeDao().flush();
        builder.addService(getServiceType("ICMP")).setStatus("A");
        getNodeDao().save(builder.getCurrentNode());
        getNodeDao().flush();
        
        builder.addNode("test2.availability.opennms.org").
            setId(2).
            //setForeignSource("imported:").
            
            //setForeignId("2").
            setType(NodeType.ACTIVE);
        builder.addCategory(mid);
        builder.addCategory(catServers);
        builder.setBuilding("HQ");
        builder.addInterface("192.168.100.2").setIsManaged("M").setIsSnmpPrimary("P");
        builder.addService(getServiceType("ICMP")).setStatus("A");
        //builder.addService(getServiceType("SNMP")).setStatus("A");;
        builder.addInterface("192.168.100.3").setIsManaged("M");
        builder.addService(getServiceType("ICMP")).setStatus("A");
        //builder.addService(getServiceType("HTTP")).setStatus("A");
        getNodeDao().save(builder.getCurrentNode());
        getNodeDao().flush();
        
        
        OnmsEvent event = new OnmsEvent();
        event.setDistPoller(distPoller);
        event.setEventUei("uei.opennms.org/test");
        event.setEventTime(new Date());
        event.setEventSource("test");
        event.setEventCreateTime(new Date());
        event.setEventSeverity(1);
        event.setEventLog("Y");
        event.setEventDisplay("Y");
        getEventDao().save(event);
        getEventDao().flush();
        
//      m_db.update("insert into outages (outageid, nodeid, ipaddr, serviceid, ifLostService, ifRegainedService) values "
//      + "(1,1,'192.168.100.1',1,'2005-05-01 09:00:00','2005-05-01 09:30:00');");
//m_db.update("insert into outages (outageid, nodeid, ipaddr, serviceid, ifLostService, ifRegainedService) values "
//      + "(2,2,'192.168.100.2',1,'2005-05-01 10:00:00','2005-05-02 10:00:00');");
        try {
            SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            OnmsMonitoredService node1If1Svc1 = getMonitoredServiceDao().get(1, InetAddressUtils.addr("192.168.100.1"), "ICMP");
            OnmsMonitoredService node2If1Svc1 = getMonitoredServiceDao().get(2, InetAddressUtils.addr("192.168.100.2"), "ICMP");
            @SuppressWarnings("unused")
            OnmsMonitoredService node2If1Svc2 = getMonitoredServiceDao().get(2, InetAddressUtils.addr("192.168.100.2"), "SNMP");
            OnmsMonitoredService node2If2Svc1 = getMonitoredServiceDao().get(2, InetAddressUtils.addr("192.168.100.3"), "ICMP");
            @SuppressWarnings("unused")
            OnmsMonitoredService node2If2Svc2 = getMonitoredServiceDao().get(2, InetAddressUtils.addr("192.168.100.3"), "HTTP");
            OnmsOutage outage1 = new OnmsOutage(df.parse("2005-05-01 09:00:00"), df.parse("2005-05-01 09:30:00"), event, event, node1If1Svc1, null, null);
            getOutageDao().save(outage1);
            getOutageDao().flush();
            OnmsOutage outage2 = new OnmsOutage(df.parse("2005-05-01 10:00:00"),df.parse("2005-05-02 10:00:00"), event, event, node2If1Svc1, null, null);
            getOutageDao().save(outage2);
            getOutageDao().flush();
            
            // test data for LastMonthsDailyAvailability report
//          // insert 30 minute outage on one node - 99.3056% availability
//          m_db.update("insert into outages (outageid, nodeid, ipaddr, serviceid, ifLostService, ifRegainedService) values "
//                  + "(3,1,'192.168.100.1',1,'2005-04-02 10:00:00','2005-04-02 10:30:00');");
            OnmsOutage outage3 = new OnmsOutage(df.parse("2005-04-02 10:00:00"),df.parse("2005-04-02 10:30:00"), event, event, node1If1Svc1, null, null);
            getOutageDao().save(outage3);
            getOutageDao().flush();
//          // insert 60 minute outage on one interface and 59 minute outages on
//          // another - 97.2454
//          m_db.update("insert into outages (outageid, nodeid, ipaddr, serviceid, ifLostService, ifRegainedService) values "
//                  + "(4,1,'192.168.100.1',1,'2005-04-03 11:30:00','2005-04-03 12:30:00');");
            OnmsOutage outage4 = new OnmsOutage(df.parse("2005-04-03 11:30:00"),df.parse("2005-04-03 12:30:00"), event, event, node1If1Svc1, null, null);
            getOutageDao().save(outage4);
            getOutageDao().flush();
//          m_db.update("insert into outages (outageid, nodeid, ipaddr, serviceid, ifLostService, ifRegainedService) values "
//                  + "(5,2,'192.168.100.2',1,'2005-04-03 23:00:00','2005-04-03 23:59:00');");
            OnmsOutage outage5 = new OnmsOutage(df.parse("2005-04-03 23:00:00"),df.parse("2005-04-03 23:59:00"), event, event, node2If1Svc1, null, null);
            getOutageDao().save(outage5);
            getOutageDao().flush();
//          // test an outage that spans 60 minutes across midnight - 99.3056% on
//          // each day, well, not exactly
//          // its 29 minutes 99.3059 on the fist day and 31 minutes 99.3052 on
//          // the second.
//          m_db.update("insert into outages (outageid, nodeid, ipaddr, serviceid, ifLostService, ifRegainedService) values "
//                  + "(6,2,'192.168.100.3',1,'2005-04-04 23:30:00','2005-04-05 00:30:00');");
            OnmsOutage outage6 = new OnmsOutage(df.parse("2005-04-04 23:30:00"),df.parse("2005-04-05 00:30:00"), event, event, node2If2Svc1, null, null);
            getOutageDao().save(outage6);
            getOutageDao().flush();
            
        } catch (final ParseException e) {
            LOG.warn("populating database failed", e);
        }
        
  
        
    }

