    @Before
    public void setUp() {

        // Mockup for remote repository config dao
        m_mockRemoteRepositoryConfigDao = EasyMock.createNiceMock(RemoteRepositoryConfigDao.class);

        // Mockup for a list of reports
        m_mockReportList = new ArrayList<BasicReportDefinition>();

        // Mockup for a online active report
        m_mockReportDefinition1 = EasyMock.createNiceMock(BasicReportDefinition.class);
        EasyMock.expect(m_mockReportDefinition1.getAllowAccess()).andReturn(Boolean.TRUE);
        EasyMock.expect(m_mockReportDefinition1.getDescription()).andReturn("MockReportDescription1");
        EasyMock.expect(m_mockReportDefinition1.getDisplayName()).andReturn("MockupReportDisplayName1");
        EasyMock.expect(m_mockReportDefinition1.getOnline()).andReturn(Boolean.TRUE);
        EasyMock.expect(m_mockReportDefinition1.getReportService()).andReturn("MockupReportService1");
        EasyMock.expect(m_mockReportDefinition1.getRepositoryId()).andReturn("local_MockupReportReportId1");
        EasyMock.expect(m_mockReportDefinition1.getId()).andReturn("local_MockupReportId1");
        EasyMock.replay(m_mockReportDefinition1);

        // Mockup for an inactive not online report
        m_mockReportDefinition2 = EasyMock.createNiceMock(BasicReportDefinition.class);
        EasyMock.expect(m_mockReportDefinition2.getAllowAccess()).andReturn(Boolean.FALSE);
        EasyMock.expect(m_mockReportDefinition2.getDescription()).andReturn("MockReportDescription2");
        EasyMock.expect(m_mockReportDefinition2.getDisplayName()).andReturn("MockupReportDisplayName2");
        EasyMock.expect(m_mockReportDefinition2.getOnline()).andReturn(Boolean.FALSE);
        EasyMock.expect(m_mockReportDefinition2.getReportService()).andReturn("MockupReportService2");
        EasyMock.expect(m_mockReportDefinition2.getRepositoryId()).andReturn("local_MockupReportReportId2");
        EasyMock.expect(m_mockReportDefinition2.getId()).andReturn("MockupReportId2");
        EasyMock.replay(m_mockReportDefinition2);

        // Add mockup report to the report list 
        m_mockReportList.add(m_mockReportDefinition1);
        m_mockReportList.add(m_mockReportDefinition2);

        // Mockup a local report repository 
        m_mockLocalReportRepository = EasyMock.createNiceMock(ReportRepository.class);
        EasyMock.expect(m_mockLocalReportRepository.getOnlineReports()).andReturn(m_mockReportList);
        EasyMock.expect(m_mockLocalReportRepository.getReports()).andReturn(m_mockReportList);
        EasyMock.expect(m_mockLocalReportRepository.getDisplayName("MockedReportId")).andReturn("MockedDisplayName");
        EasyMock.expect(m_mockLocalReportRepository.getEngine("MockupReportId")).andReturn("MockedEngine");
        EasyMock.expect(m_mockLocalReportRepository.getManagementUrl()).andReturn("MockupManagementUrl");
        EasyMock.expect(m_mockLocalReportRepository.getRepositoryDescription()).andReturn("MockedRepositoryDescription");
        EasyMock.expect(m_mockLocalReportRepository.getReportService("MockedReportId")).andReturn("MockedReportService");
        EasyMock.expect(m_mockLocalReportRepository.getRepositoryId()).andReturn("local");
        EasyMock.expect(m_mockLocalReportRepository.getRepositoryName()).andReturn("MockedRepositoryName");
        EasyMock.replay(m_mockLocalReportRepository);

        // Mockup for one remote repository
        m_remoteReportRepository = EasyMock.createNiceMock(ReportRepository.class);
        EasyMock.expect(m_remoteReportRepository.getOnlineReports()).andReturn(m_mockReportList);
        EasyMock.expect(m_remoteReportRepository.getReports()).andReturn(m_mockReportList);
        EasyMock.expect(m_remoteReportRepository.getDisplayName("MockedReportId")).andReturn("MockedRemoteDisplayName");
        EasyMock.expect(m_remoteReportRepository.getEngine("MockupReportId")).andReturn("MockedRemoteEngine");
        EasyMock.expect(m_remoteReportRepository.getManagementUrl()).andReturn("MockupRemoteManagementUrl");
        EasyMock.expect(m_remoteReportRepository.getRepositoryDescription()).andReturn("MockedRemoteRepositoryDescription");
        EasyMock.expect(m_remoteReportRepository.getReportService("MockedReportId")).andReturn("MockedTemoteReportService");
        EasyMock.expect(m_remoteReportRepository.getRepositoryId()).andReturn("MockedRemoteRepositoryId");
        EasyMock.expect(m_remoteReportRepository.getRepositoryName()).andReturn("MockedRemoteRepositoryName");
        EasyMock.replay(m_remoteReportRepository);

        // Mockup two remote repositories
        m_mockActiveRemoteRepository = new RemoteRepositoryDefinition();
        m_mockActiveRemoteRepository.setLoginRepoPassword("MockLoginRepoPasswordActive");
        m_mockActiveRemoteRepository.setLoginUser("MockLoginUserActive");
        m_mockActiveRemoteRepository.setRepositoryActive(Boolean.TRUE);
        m_mockActiveRemoteRepository.setRepositoryDescription("MockRepositoryDescriptionActive");
        m_mockActiveRemoteRepository.setRepositoryId("MockRepositoryIdActive");
        m_mockActiveRemoteRepository.setRepositoryManagementURL("MockRepositoryManagementURLActive");
        m_mockActiveRemoteRepository.setRepositoryName("MockRepositoryNameActive");

        m_mockNotActiveRemoteRepository = new RemoteRepositoryDefinition();
        m_mockNotActiveRemoteRepository.setLoginRepoPassword("MockLoginRepoPasswordDeactivated");
        m_mockNotActiveRemoteRepository.setLoginUser("MockLoginUserDeactivated");
        m_mockNotActiveRemoteRepository.setRepositoryActive(Boolean.FALSE);
        m_mockNotActiveRemoteRepository.setRepositoryDescription("MockRepositoryDescriptionDeactivated");
        m_mockNotActiveRemoteRepository.setRepositoryId("MockRepositoryIdDeactivated");
        m_mockNotActiveRemoteRepository.setRepositoryManagementURL("MockRepositoryManagementURLDeactivated");
        m_mockNotActiveRemoteRepository.setRepositoryName("MockRepositoryNameDeactivated");

        m_mockActiveRepositoriesList = new ArrayList<RemoteRepositoryDefinition>();
        m_mockActiveRepositoriesList.add(m_mockActiveRemoteRepository);

        m_mockAllRepositoriesList = new ArrayList<RemoteRepositoryDefinition>();
        m_mockAllRepositoriesList.add(m_mockActiveRemoteRepository);
        m_mockAllRepositoriesList.add(m_mockNotActiveRemoteRepository);

        EasyMock.expect(m_mockRemoteRepositoryConfigDao.getActiveRepositories()).andReturn(m_mockActiveRepositoriesList);
        EasyMock.expect(m_mockRemoteRepositoryConfigDao.getAllRepositories()).andReturn(m_mockAllRepositoriesList);
        EasyMock.expect(m_mockRemoteRepositoryConfigDao.getLoginRepoPassword("repositoryId")).andReturn("MockedDaoLoginPassword");
        EasyMock.expect(m_mockRemoteRepositoryConfigDao.getLoginUser("repositoryId")).andReturn("MockedDaoLoginUser");
        EasyMock.expect(m_mockRemoteRepositoryConfigDao.getRepositoryById("repositoryId")).andReturn(m_mockActiveRemoteRepository);
        EasyMock.expect(m_mockRemoteRepositoryConfigDao.getRepositoryDescription("repositoryId")).andReturn("MockedDaoRepositoryDescription");
        EasyMock.expect(m_mockRemoteRepositoryConfigDao.getRepositoryManagementURL("repositoryId")).andReturn("MockedDaoManagementUrl");
        EasyMock.expect(m_mockRemoteRepositoryConfigDao.getRepositoryName("repositoryId")).andReturn("MockedDaoRepositoryName");
        EasyMock.replay(m_mockRemoteRepositoryConfigDao);

        m_globalReportRepository = new DefaultGlobalReportRepository(m_mockRemoteRepositoryConfigDao, m_mockLocalReportRepository);
    }

