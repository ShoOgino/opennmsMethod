    private static Map<String, KeyType> getKeyIdToTypeMapping(List<KeyType> key) throws InvalidGraphException {
        // Filter by id
        Map<String, List<KeyType>> keyTypeIdMap = new HashMap<>();
        for (KeyType eachKeyType : key) {
            keyTypeIdMap.putIfAbsent(eachKeyType.getId(), new ArrayList<>());
            keyTypeIdMap.get(eachKeyType.getId()).add(eachKeyType);
        }

        // Verify that all types are the same
        for (List<KeyType> eachList : keyTypeIdMap.values()) {
            if (eachList.stream().map(KeyType::getAttrType).collect(Collectors.toSet()).size() > 1) {
                throw new InvalidGraphException("Attribute Type of key with id " + eachList.get(0).getId() + " varies.");
            }
        }

        // Unify
        Map<String, KeyType> keyIdToTypeMapping = keyTypeIdMap.values().stream().map(list -> list.get(0)).collect(Collectors.toMap(KeyType::getId, Function.identity()));
        if (keyIdToTypeMapping.keySet().stream().filter(keyId -> keyId.equals("id")).findFirst().isPresent()) {
            throw new InvalidGraphException("Property with id cannot be defined");
        }
        return keyIdToTypeMapping;
    }

