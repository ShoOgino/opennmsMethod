    public void write(final SystemReportPlugin plugin) {
        final String name = plugin.getName() + ".txt";
        try {
            createDirectory("");
        } catch (final Exception e) {
            LogUtils.errorf(this, e, "Unable to create entry '%s'", name);
            return;
        }
        
        if (hasDisplayable(plugin)) {
            try {
                createEntry(name);
            } catch (final Exception e) {
                LogUtils.errorf(this, e, "Unable to create entry '%s'", name);
                return;
            }
            final AbstractSystemReportFormatter formatter = new TextSystemReportFormatter();
            formatter.setOutputStream(m_zipOutputStream);
            formatter.begin();
            formatter.write(plugin);
            formatter.end();
        }
        
        byte[] buf = new byte[1024];

        for (final Map.Entry<String,Resource> entry : plugin.getEntries().entrySet()) {
            final Resource resource = entry.getValue();
            if (isFile(resource)) {
                try {
                    createDirectory(plugin.getName());
                } catch (final Exception e) {
                    LogUtils.errorf(this, e, "Unable to create directory '%s'", plugin.getName());
                    return;
                }
                final String entryName = String.format("%s/%s", plugin.getName(), entry.getKey());
                try {
                    createEntry(entryName);
                } catch (final Exception e) {
                    LogUtils.errorf(this, e, "Unable to create entry '%s'", entryName);
                    return;
                }

                InputStream is = null;
                try {
                    is = resource.getInputStream();
                    int len;
                    while ((len = is.read(buf)) > 0) {
                        m_zipOutputStream.write(buf, 0, len);
                    }
                } catch (Throwable e) {
                    LogUtils.warnf(this, e, "Unable to read resource '%s'", resource);
                    return;
                } finally {
                    IOUtils.closeQuietly(is);
                }
            }
        }
    }

