    public void process(Exchange exchange) {
        Message in = exchange.getIn();
        String indexName=null;
        String indexType=null;
        final Map<String,Object> body=new HashMap<>();

        try {
            Object incoming=in.getBody();

            if(incoming instanceof BeanInvocation) {
                Object argument=((BeanInvocation)incoming).getArgs()[0];

                if(argument instanceof Event) {
                    if (LOG.isDebugEnabled()) {
                        LOG.debug("Processing event");
                    }

                    indexType="events";

                    Event event = (Event) argument;

                    populateBodyFromEvent(body, event);

                    if (event.getNodeid() != null) {
                        try {
                            // if the event is a uei.opennms.org/nodes/*updated,changed,deleted then force a refresh
                            maybeRefreshCache(event);

                            // will cache on first access
                            body.putAll(cache.getEntry(event.getNodeid()));

                        } catch (Exception e) {
                            LOG.error("error fetching nodeData categories: ", e);
                        }
                    }
                } else if(argument instanceof NorthboundAlarm) {
                    if (LOG.isDebugEnabled()) {
                        LOG.debug("Processing alarm");
                    }

                    indexType="alarms";

                    NorthboundAlarm alarm = (NorthboundAlarm) argument;

                    populateBodyFromAlarm(body, alarm);

                    if (alarm.getNodeId() != null) {
                        try {

                            // will cache on first access
                            body.putAll(cache.getEntry((long) alarm.getNodeId()));

                        } catch (Exception e) {
                            LOG.error("error fetching nodeData categories: ", e);
                        }
                    }
                }
            } else if(incoming instanceof Map) {
                if (LOG.isDebugEnabled()) {
                    LOG.debug("Processing a generic map");
                }

                body.putAll((Map) incoming);
            }

            if(body.containsKey("@timestamp")) {
                if (LOG.isTraceEnabled()) {
                    LOG.trace("Computing indexName from @timestamp: "+body.get("@timestamp"));
                }
                indexName=idxName.apply(remainder, (Date) body.get("@timestamp"));
            } else {
                indexName = idxName.apply(remainder);
            }
        } catch(Exception e) {
            LOG.error("Cannot compute index name, failing back to default: "+e.getMessage());
            indexName = idxName.apply(remainder);
        }
        if (LOG.isTraceEnabled()) {
            LOG.trace("Computing indexName from @timestamp: " + body.get("@timestamp") + " yields " + indexName);
        }
        exchange.getOut().setHeader(ElasticsearchConfiguration.PARAM_INDEX_NAME, indexName);
        exchange.getOut().setHeader(ElasticsearchConfiguration.PARAM_INDEX_TYPE, indexType);
        exchange.getOut().setBody(body);
    }

