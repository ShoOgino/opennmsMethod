    @Test(timeout=60000)
    public void testReceiveElasticsearchEvent() throws Exception {

        // Make sure that only the single Elasticsearch event listener is registered
        with().pollInterval(1, SECONDS).await().atMost(30, SECONDS).until(() -> m_eventIpcManager.getEventListenerCount(), equalTo(1));

        // Do a very pendantic check to make sure that the Camel context has started up.
        try {
            with().pollInterval(1, SECONDS).await().atMost(30, SECONDS).until(() -> {
                // Get all Camel contexts
                ServiceReference<?>[] references = getBundleContext().getAllServiceReferences(CamelContext.class.getName(), null);
                for (ServiceReference<?> reference : references) {
                    CamelContext context = (CamelContext)getBundleContext().getService(reference);
                    if (
                         // If the context has started and contains the endpoints from
                         // blueprint-event-forwarder.xml, then we've found the correct
                         // context so return true.
                         context.getStatus().isStarted() && 
                         context.hasEndpoint("seda:elasticsearchForwardEvent") != null &&
                         context.hasEndpoint("seda:elasticsearchForwardAlarm") != null &&
                         context.hasEndpoint("seda:ES_PRE") != null &&
                         context.hasEndpoint("seda:ES") != null
                    ) {
                        return true;
                    }
                }
                return false;
            });
        } catch (ConditionTimeoutException e) {
            LOG.error("Camel never started up. Test cannot continue.");
            throw e;
        }

        EventAnticipator anticipator = m_eventIpcManager.getEventAnticipator();

        final String ipAddress = "4.2.2.2";
        final String foreignSource = "testDiscover";

        // This date will create an ES index with name "opennms-2011.01"
        final Date date = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.LONG, Locale.US).parse("Jan 03, 2011 11:43:00 AM EST");

        final EventBuilder eb = new EventBuilder( EventConstants.NEW_SUSPECT_INTERFACE_EVENT_UEI, "OpenNMS.Discovery" );
        eb.setTime(date);
        eb.setInterface( InetAddress.getByName( ipAddress ) );
        eb.setHost( InetAddressUtils.getLocalHostName() );
        eb.addParam("RTT", 0);
        eb.addParam("foreignSource", foreignSource);

        anticipator.anticipateEvent(eb.getEvent());

        m_eventIpcManager.send(eb.getEvent());

        anticipator.verifyAnticipated();

        with().pollInterval(1, SECONDS).await().atMost(30, SECONDS).until(() -> {
            try {
                // Refresh the "opennms-2011.01" index
                ELASTICSEARCH.getClient().admin().indices().prepareRefresh(new IndexNameFunction().apply("opennms", date)).execute().actionGet();

                // Search for all entries in the index
                SearchResponse response = ELASTICSEARCH.getClient()
                    // Search the index that the event above created
                    .prepareSearch(new IndexNameFunction().apply("opennms", date)) // opennms-2011.01
                    .setQuery(QueryBuilders.matchAllQuery())
                    .execute()
                    .actionGet();

                LOG.debug("RESPONSE: {}", response.toString());

                assertEquals("ES search hits was not equal to 1", 1, response.getHits().totalHits());
                assertEquals("Event UEI did not match", EventConstants.NEW_SUSPECT_INTERFACE_EVENT_UEI, response.getHits().getAt(0).getSource().get("eventuei"));
                assertEquals("Event IP address did not match", "4.2.2.2", response.getHits().getAt(0).getSource().get("ipaddr"));
            } catch (Throwable e) {
                LOG.warn(e.getMessage(), e);
                return false;
            }
            return true;
        });
    }

