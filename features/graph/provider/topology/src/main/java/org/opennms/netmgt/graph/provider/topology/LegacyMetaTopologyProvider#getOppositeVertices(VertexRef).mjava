    @Override
    public Collection<VertexRef> getOppositeVertices(VertexRef vertexRef) {
        Objects.requireNonNull(vertexRef);
        final GraphProvider graphProvider = providers.get(vertexRef.getNamespace());
        if (graphProvider.getCurrentGraph() != null) {
            final EdgeRef[] referencingEdges = graphProvider.getCurrentGraph().getEdgeIdsForVertex(vertexRef);
            final List<VertexRef> oppositeVertices = graphProvider.getCurrentGraph().getEdges(Arrays.asList(referencingEdges)) // resolve edges
                    .stream()
                    // select edges which point to another namespace
                    .filter(edge -> !edge.getSource().getVertex().getNamespace().equals(vertexRef.getNamespace()) || !edge.getTarget().getVertex().getNamespace().equals(vertexRef.getNamespace()))
                    // get the "other" vertex (the one where the namespace does not match)
                    .map(edge -> edge.getSource().getVertex().getNamespace().equals(vertexRef.getNamespace()) ? edge.getTarget().getVertex() : edge.getSource().getVertex())
                    .collect(Collectors.toList());
            return oppositeVertices;
        }
        return Collections.EMPTY_LIST;
    }

