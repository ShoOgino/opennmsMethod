    private final GenericGraph convert(GraphMLGraph graphMLGraph) {
        final GenericGraph.GenericGraphBuilder graphBuilder = GenericGraph.builder()
                .property(GenericProperties.Enrichment.RESOLVE_NODES, true) // Enable Node Enrichment first so it can be overridden
                .properties(graphMLGraph.getProperties());
        final List<GenericVertex> vertices = graphMLGraph.getNodes()
                .stream().map(n -> {
                    // In case of GraphML each vertex does not have a namespace, but it is inherited from the graph
                    // Therefore here we have to manually set it
                    return GenericVertex.builder()
                            .namespace(graphBuilder.getNamespace())
                            .id(n.getId())
                            .properties(n.getProperties()).build();
                })
                .collect(Collectors.toList());
        graphBuilder.addVertices(vertices);

        final List<GenericEdge> edges = graphMLGraph.getEdges().stream().map(e -> {
            final String sourceNamespace = vertexIdToGraphMapping.get(e.getSource().getId()).getProperty(GenericProperties.NAMESPACE);
            final String targetNamespace = vertexIdToGraphMapping.get(e.getTarget().getId()).getProperty(GenericProperties.NAMESPACE);
            final GenericVertex source = GenericVertex.builder().namespace(sourceNamespace).id(e.getSource().getId()).build();
            final GenericVertex target = GenericVertex.builder().namespace(targetNamespace).id(e.getTarget().getId()).build();
            // In case of GraphML each edge does not have a namespace, but it is inherited from the graph
            // Therefore here we have to manually set it
            final GenericEdge edge = GenericEdge.builder()
                    .namespace(graphBuilder.getNamespace())
                    .source(source.getVertexRef())
                    .target(target.getVertexRef())
                    .properties(e.getProperties()).build();
            return edge;
        }).collect(Collectors.toList());
        graphBuilder.addEdges(edges);

        applyFocus(graphMLGraph, graphBuilder);
        return graphBuilder.build();
    }

