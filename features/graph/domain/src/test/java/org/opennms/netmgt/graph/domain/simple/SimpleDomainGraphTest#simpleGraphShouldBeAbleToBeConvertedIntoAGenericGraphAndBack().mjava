    /**
     * Convert a SimpleGraph into a GenericGraph and back. All properties should be kept but we should have copies
     * of the elements in the graph - not the same objects. */
    @Test
    public void simpleGraphShouldBeAbleToBeConvertedIntoAGenericGraphAndBack() {

        // set up:
        SimpleDomainVertex vertex1 = createVertex(TestObjectCreator.NAMESPACE, UUID.randomUUID().toString());
        SimpleDomainVertex vertex2 = createVertex(TestObjectCreator.NAMESPACE, UUID.randomUUID().toString());
        SimpleDomainVertex vertex3 = createVertex(TestObjectCreator.NAMESPACE, UUID.randomUUID().toString());
        SimpleDomainEdge edge1 = createEdge(vertex1, vertex2);
        SimpleDomainEdge edge2 = createEdge(vertex1, vertex3);
        
        SimpleDomainGraph originalGraph = SimpleDomainGraph.builder()
            .namespace(TestObjectCreator.NAMESPACE)
            .label("labelGraph")
            .addVertex(vertex1)
            .addVertex(vertex2)
            .addVertex(vertex3)
            .addEdge(edge1)
            .addEdge(edge2).build();

        // convert:
        GenericGraph genericGraph = originalGraph.asGenericGraph();
        SimpleDomainGraph copyGraph = new SimpleDomainGraph(genericGraph); // copy constructor

        // test:
        assertEquals(originalGraph.getLabel(), copyGraph.getLabel());
        assertEquals(originalGraph.getNamespace(), copyGraph.getNamespace());
        equalsButNotSame(originalGraph, copyGraph);
        equalsButNotSame(originalGraph.getVertex(vertex1.getId()), copyGraph.getVertex(vertex1.getId()));
        equalsButNotSame(originalGraph.getVertex(vertex2.getId()), copyGraph.getVertex(vertex2.getId()));
        equalsButNotSame(originalGraph.getVertex(vertex3.getId()), copyGraph.getVertex(vertex3.getId()));
        equalsButNotSame(originalGraph.getEdge(edge1.getId()), copyGraph.getEdge(edge1.getId()));
        equalsButNotSame(originalGraph.getEdge(edge2.getId()), copyGraph.getEdge(edge2.getId()));

    }

