    @Test
    public void verifyFocusPersistence() {
        final GenericGraphContainerBuilder containerBuilder = GenericGraphContainer.builder().id(CONTAINER_ID);
        final GenericGraphBuilder graphBuilder = GenericGraph.builder()
                .namespace(NAMESPACE)
                .addVertex(GenericVertex.builder().namespace(NAMESPACE).id("v1").label("Vertex 1").build())
                .addVertex((GenericVertex.builder().namespace(NAMESPACE).id("v2").label("Vertex 2").build()));
        GenericGraphContainer container = containerBuilder.addGraph(graphBuilder.build()).build();
        graphRepository.save(container);

        // By default the focus should be EMPTY
        final Focus emptyFocus = graphRepository.findContainerById(container.getId()).getGraph(NAMESPACE).getDefaultFocus();
        assertThat(emptyFocus.getVertexRefs(), Matchers.hasSize(0));

        // Set to FIRST
        container = containerBuilder.addGraph(graphBuilder.focus().first().apply().build()).build();
        graphRepository.save(container);
        final Focus firstFocus = graphRepository.findContainerById(container.getId()).getGraph(NAMESPACE).getDefaultFocus();
        assertThat(firstFocus.getVertexRefs(), Matchers.hasSize(1));

        // Set to ALL
        container = containerBuilder.addGraph(graphBuilder.focus().all().apply().build()).build();
        graphRepository.save(container);
        final Focus allFocus = graphRepository.findContainerById(container.getId()).getGraph(NAMESPACE).getDefaultFocus();
        assertThat(allFocus.getVertexRefs(), Matchers.hasSize(2));

        // Set to Specific
        container = containerBuilder.addGraph(graphBuilder.focus().selection(Lists.newArrayList(new VertexRef(NAMESPACE, "v2"))).apply().build()).build();
        graphRepository.save(container);
        final Focus selectiveFocus = graphRepository.findContainerById(container.getId()).getGraph(NAMESPACE).getDefaultFocus();
        assertThat(selectiveFocus.getVertexRefs(), Matchers.hasSize(1));

        // Ensure all (obsolete) focus entities have been removed from the underlying database
        assertThat(persistenceAccessor.findAll(FocusEntity.class), Matchers.hasSize(1)); // only one focus entity should be present
    }

