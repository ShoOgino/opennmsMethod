    @Test
    public void verifyCRUD() {
        /*
         * Create/Persist
         */
        final GenericGraphContainerBuilder originalContainerBuilder = GenericGraphContainer.builder()
            .id(CONTAINER_ID)
            .description("Container for 'unique-id' graph")
            .label("I am soooo unique \\o/");

        // Create first graph
        final GenericGraphBuilder graph1Builder = GenericGraph.builder()
                .namespace(NAMESPACE)
                .label("Dummy Graph")
                .description("I am not so unique, I may be replaced at any time :(");

        final GenericVertex v1 = GenericVertex.builder()
        		.namespace(NAMESPACE)
        		.id("v1")
        		.label("Vertex 1")
        		.build();
        final GenericVertex v2 = GenericVertex.builder()
        		.namespace(NAMESPACE)
        		.id("v2")
        		.label("Vertex 2")
        		.build();

        graph1Builder.addVertex(v1);
        graph1Builder.addVertex(v2);
        graph1Builder.addEdge(GenericEdge.builder()
                .namespace(NAMESPACE)
                .source(v1.getVertexRef())
                .target(v2.getVertexRef()).build());
        final GenericGraph graph1 = graph1Builder.build();

        // Second graph is a copy of the first
        final GenericGraph graph2 = GenericGraph.builder()
                .properties(graph1.getProperties())
                .namespace(NAMESPACE + "2")
                .label(graph1.getLabel() + " 2").build();

        // Persist
        originalContainerBuilder.addGraph(graph1);
        originalContainerBuilder.addGraph(graph2);
        graphRepository.save(originalContainerBuilder.build());

        // Verify
        verifyEquals(originalContainerBuilder.build(), graphRepository.findContainerById(CONTAINER_ID));

        /*
         * Update
         */
        // Add new graph which is a copy of an existing graph
        final GenericGraph graph3 = GenericGraph.builder()
                .properties(graph1.getProperties())
                .namespace(NAMESPACE + "3")
                .label(graph1.getLabel() + " 3")
                .build();
        originalContainerBuilder.addGraph(graph3);

        // Remove existing graph.
        // originalContainer.removeGraph(graph2.getNamespace());

        // Update existing graph 
        GenericGraph graph1Updated = GenericGraph.builder()
                .graph(graph1)
                .addVertex(GenericVertex.builder().namespace(NAMESPACE).id("v3").build())
                .build();
        originalContainerBuilder.addGraph(graph1Updated);
        
        // Persist changes
        graphRepository.save(originalContainerBuilder.build());

        // Verify
        verifyEquals(originalContainerBuilder.build(), graphRepository.findContainerById(CONTAINER_ID));

        /*
         * Delete
         */
        graphRepository.deleteContainer(CONTAINER_ID);
        Assert.assertNull(graphRepository.findContainerById(CONTAINER_ID));
    }

