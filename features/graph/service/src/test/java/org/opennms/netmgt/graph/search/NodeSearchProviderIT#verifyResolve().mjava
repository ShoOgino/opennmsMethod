    @Test
    public void verifyResolve() {
        final SimpleDomainGraphContainer container = SimpleDomainGraphContainer.builder()
                .id(NAMESPACE)
                .addGraph(SimpleDomainGraph.builder()
                        .namespace(NAMESPACE)
                        .addVertex(SimpleDomainVertex.builder().namespace(NAMESPACE).id("v1").nodeRef("test:n1").build())
                        .addVertex(SimpleDomainVertex.builder().namespace(NAMESPACE).id("v2").build())
                        .addVertex(SimpleDomainVertex.builder().namespace(NAMESPACE).id("v3").build())
                        .build())
                .build();
        final DefaultGraphService graphService = new DefaultGraphService();
        graphService.onBind(new GraphContainerProvider() {
            @Override public ImmutableGraphContainer loadGraphContainer() { return container; }
            @Override public GraphContainerInfo getContainerInfo() { return container; }
        }, new HashMap<>());
        final SearchCriteria searchCriteria = new SearchCriteria(searchProvider.getProviderId(), NAMESPACE, nodeDao.findByForeignId("n1").get(0).getId().toString());
        final List<GenericVertex> vertices = searchProvider.resolve(graphService, searchCriteria);
        assertThat(vertices, Matchers.hasSize(1));
        assertThat(vertices, Matchers.hasItem(container.getGraph(NAMESPACE).getVertex("v1").asGenericVertex()));
    }

