    @Override
    public List<SearchSuggestion> getSuggestions(String namespace, String input) {
        Objects.requireNonNull(namespace);

        if (input == null || input.length() < MIN_CHAR_FOR_SEARCH) {
            return Collections.emptyList();
        }

        final SearchContext context = SearchContext.builder()
                .graphService(graphService)
                .suggestionsLimit(10)
                .build();

        // Remove duplicates (same label and same context but different provider):
        final Set<SearchSuggestion> suggestions = new TreeSet<>(Comparator.comparing(SearchSuggestion::getLabel)
                .thenComparing(SearchSuggestion::getContext));

        for(SearchProvider provider : graphSearchProviders.values()){
            if (provider.canSuggest(graphService, namespace)){
                List<SearchSuggestion> suggestionsOfProvider = provider.getSuggestions(context, namespace, input);
                if(suggestionsOfProvider == null) {
                    LOG.warn("Provider {} does not work properly, received null suggestion list.", provider.getProviderId());
                } else {
                    // If not implemented properly, the search provider may return a null value.
                    // Those are removed here to prevent anny issues later
                    List<SearchSuggestion> excludeNullResults = suggestionsOfProvider.stream().filter(Objects::nonNull).collect(Collectors.toList());
                    if (excludeNullResults.size() != suggestionsOfProvider.size()) {
                        LOG.warn("Provider {} returned a null value. Please ensure it is implemented correctly", provider.getProviderId());
                    }
                    suggestions.addAll(excludeNullResults);
                }
            }
        }
        return new ArrayList<>(suggestions);
    }

