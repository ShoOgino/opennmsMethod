    public void onBind(GraphProvider graphProvider, Map<String, String> properties) {
        // Determine optional defined label, description and container id.
        // Otherwise default to the ones defined in the GraphInfo.
        final GraphInfo graphInfo = graphProvider.getGraphInfo();
        final String label = properties.getOrDefault(LABEL_KEY, graphInfo.getLabel());
        final String description = properties.getOrDefault(DESCRIPTION_KEY, graphInfo.getDescription());
        final String containerId = properties.getOrDefault(CONTAINER_ID_KEY, graphInfo.getNamespace());

        // Build the container info
        final DefaultGraphContainerInfo containerInfo = new DefaultGraphContainerInfo(containerId);
        containerInfo.setDescription(description);
        containerInfo.setLabel(label);

        // Expose the ContainerProvider
        final Map<String, String> actualProperties = getActualProperties(properties); // forward service properties to container service
        final SingleGraphContainerProvider singleGraphContainerProvider = new SingleGraphContainerProvider(graphProvider, containerInfo);
        final ServiceRegistration<GraphContainerProvider> graphContainerProviderServiceRegistration = bundleContext.registerService(GraphContainerProvider.class, singleGraphContainerProvider, new Hashtable<>(actualProperties));
        registeredServices.putIfAbsent(graphProvider, new ArrayList<>());
        registeredServices.get(graphProvider).add(graphContainerProviderServiceRegistration);

        final boolean exposeAsTopologyProvider = Boolean.valueOf(actualProperties.getOrDefault("expose-to-topology", "false"));
        if (exposeAsTopologyProvider) {
            final MetaTopologyProvider metaTopologyProvider = new LegacyMetaTopologyProvider(graphService, containerId);
            final ServiceRegistration<MetaTopologyProvider> metaTopologyProviderServiceRegistration = bundleContext.registerService(MetaTopologyProvider.class, metaTopologyProvider, new Hashtable<>(actualProperties));
            registeredServices.get(graphProvider).add(metaTopologyProviderServiceRegistration);
        }
    }

