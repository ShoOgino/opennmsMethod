    public CachingGraphService(final GraphService delegate) {
        this.delegate = Objects.requireNonNull(delegate);
        this.cache = Caffeine.newBuilder()
            .expireAfter(new Expiry<String, ImmutableGraphContainer>() {
                @Override
                public long expireAfterCreate(String key, ImmutableGraphContainer value, long currentTime) {
                    final Long expireInMs = expireMap.getOrDefault(key, Long.MAX_VALUE / 1000000);
                    return expireInMs * 1000000;
                }

                @Override
                public long expireAfterUpdate(String key, ImmutableGraphContainer value, long currentTime, long currentDuration) {
                   return currentDuration;
                }

                @Override
                public long expireAfterRead(String key, ImmutableGraphContainer value, long currentTime, long currentDuration) {
                    return currentDuration;
                }
            })
            .recordStats()
            .build(delegate::getGraphContainer);
    }

