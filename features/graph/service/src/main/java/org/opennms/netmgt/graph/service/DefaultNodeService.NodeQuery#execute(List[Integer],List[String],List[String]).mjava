        public List<OnmsNode> execute(List<Integer> nodeIds, List<String> foreignSources, List<String> foreignIds) {
            Objects.requireNonNull(nodeIds);
            Objects.requireNonNull(foreignSources);
            Objects.requireNonNull(foreignIds);

            // no data provided => empty list
            if (nodeIds.isEmpty() && foreignSources.isEmpty() && foreignIds.isEmpty()) {
                return Lists.newArrayList();
            }

            // only nodeIds are defined
            if (!nodeIds.isEmpty() && foreignSources.isEmpty() && foreignIds.isEmpty()) {
                return accessor.findUsingNamedParameters("select n from OnmsNode n where n.id in (:nodeIds)",
                        new String[] { "nodeIds" },
                        new Object[] { nodeIds });
            }

            // Only foreignSources AND foreignIds are defined
            if (nodeIds.isEmpty() && !foreignSources.isEmpty() && !foreignIds.isEmpty()) {
                return accessor.findUsingNamedParameters("select n from OnmsNode n where n.foreignSource in (:foreignSources) and n.foreignId in (:foreignIds)",
                        new String[] { "foreignSources", "foreignIds" },
                        new Object[] { foreignSources, foreignIds }
                );
            }

            // Everything is defined
            return accessor.findUsingNamedParameters("select n from OnmsNode n where n.id in (:nodeIds) or (n.foreignSource in (:foreignSources) and n.foreignId in (:foreignIds))",
                    new String[] { "nodeIds", "foreignSources", "foreignIds" },
                    new Object[] {  nodeIds, foreignSources, foreignIds}
            );
        }

