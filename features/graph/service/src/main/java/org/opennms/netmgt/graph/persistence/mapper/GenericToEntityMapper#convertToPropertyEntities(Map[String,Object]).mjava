    public List<PropertyEntity> convertToPropertyEntities(Map<String, Object> properties) {
        Objects.requireNonNull(properties);
        final List<PropertyEntity> propertyEntities = new ArrayList<>();
        for(Map.Entry<String, Object> property : properties.entrySet()) {
            final Object value = property.getValue();
            if (value != null) {
                final String propertyName = property.getKey();
                final Class<?> propertyType = value.getClass();
                try {
                    final String stringRepresentation = converterService.toStringRepresentation(propertyType, value);
                    final PropertyEntity propertyEntity = new PropertyEntity();
                    propertyEntity.setType(propertyType);
                    propertyEntity.setName(propertyName);
                    propertyEntity.setValue(stringRepresentation);
                    propertyEntities.add(propertyEntity);
                } catch (IllegalStateException ex) {
                    LoggerFactory.getLogger(getClass()).warn("Property '{}' of type '{}' cannot be converted. Skipping property '{}'.", propertyName, propertyType, propertyName);
                }
            }
        }
        return propertyEntities;
    }

