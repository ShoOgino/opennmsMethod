            public Focus build() {
                switch(focusStrategy) {
                    case FocusStrategy.FIRST:
                        final List<VertexRef> list = Lists.newArrayList();
                        if (!vertexToIdMap.isEmpty()) {
                            list.add(vertexToIdMap.values().iterator().next().getVertexRef());
                        }
                        return new Focus(FocusStrategy.FIRST, list);
                    case FocusStrategy.ALL:
                        return new Focus(FocusStrategy.ALL, vertexToIdMap.values().stream().map(GenericVertex::getVertexRef).collect(Collectors.toList()));
                    case FocusStrategy.EMPTY:
                        return new Focus(FocusStrategy.EMPTY);
                    case FocusStrategy.SELECTION:
                        // Only use selections, which actually exist in the graph
                        final List<VertexRef> existingVertexRefs = focusSelection.stream()
                                .filter(v -> v.getNamespace().equals(getNamespace()) && vertexToIdMap.containsKey(v.getId()))
                                .collect(Collectors.toList());
                        return new Focus(FocusStrategy.SELECTION, existingVertexRefs);
                    default:
                        final String[] validValues = new String[]{ FocusStrategy.ALL, FocusStrategy.EMPTY, FocusStrategy.FIRST, FocusStrategy.SELECTION };
                        throw new IllegalStateException("Focus Strategy '" + focusStrategy + "' not supported. Supported values are: " + Arrays.toString(validValues));
                }
            }

