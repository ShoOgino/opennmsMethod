        private void detectVertexChanges(G oldGraph, G newGraph) {
            // Find all vertices/edges which are in the old and new graph
            final List<String> oldVertexIds = new ArrayList<>(oldGraph.getVertexIds());
            final List<String> newVertexIds = new ArrayList<>(newGraph.getVertexIds());

            // Detect removed vertices
            // A vertex from the old graph is removed if it is no longer part of the new graphs vertex list
            final List<String> removedVertices = new ArrayList<>(oldVertexIds);
            removedVertices.removeAll(newVertexIds);
            removedVertices.forEach(id -> vertexRemoved(oldGraph.getVertex(id)));

            // Detect added vertices
            // A vertex from the new graph is added if it is not part of the old graphs vertex list
            final List<String> addedVertices = new ArrayList<>(newVertexIds);
            addedVertices.removeAll(oldVertexIds);
            addedVertices.forEach(id -> vertexAdded(newGraph.getVertex(id)));

            // Detect updated vertices
            // A vertex is updated if it part of the new and old graph's vertex list
            // and they are not equal (probably due to properties change)
            final List<String> sharedVertcies = new ArrayList<>(newVertexIds);
            sharedVertcies.removeAll(removedVertices);
            sharedVertcies.removeAll(addedVertices);
            sharedVertcies.stream().forEach(id -> {
                V oldVertex = oldGraph.getVertex(id);
                V newVertex = newGraph.getVertex(id);
                if (!oldVertex.equals(newVertex)) {
                    vertexUpdated(newVertex);
                }
            });
        }

