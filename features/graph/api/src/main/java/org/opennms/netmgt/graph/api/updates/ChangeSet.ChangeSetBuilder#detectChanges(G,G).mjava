        private void detectChanges(G oldGraph, G newGraph) {
            // no old graph exists, add all
            if (oldGraph == null && newGraph != null) {
                newGraph.getVertices().forEach(v -> vertexAdded(v));
                newGraph.getEdges().forEach(e -> edgeAdded(e));
                graphInfoChanged(createGraphInfo(newGraph));
            }
            // no new graph exists, remove all
            if (oldGraph != null && newGraph == null) {
                oldGraph.getVertices().forEach(v -> vertexRemoved(v));
                oldGraph.getEdges().forEach(e -> edgeRemoved(e));
                graphInfoChanged(null);
            }

            // Nothing to do if same
            if (oldGraph == newGraph) {
                return;
            }

            // both graph exists, so calculate changes
            if (oldGraph != null && newGraph != null) {
                // Before changes can be calculated, ensure the graphs share the same namespace, otherwise
                // we should bail, as this is theoretical/technical possible, but does not make sense from the
                // domain view the namespace reflects.
                if (!oldGraph.getNamespace().equals(newGraph.getNamespace())) {
                    throw new IllegalStateException("Cannot detect changes between different namespaces");
                }
                detectFocusChange(oldGraph, newGraph);
                detectGraphInfoChanges(oldGraph, newGraph);
                detectVertexChanges(oldGraph, newGraph);
                detectEdgeChanges(oldGraph, newGraph);
            }
        }

