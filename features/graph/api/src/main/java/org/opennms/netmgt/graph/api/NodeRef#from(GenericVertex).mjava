    /**
     * Creates {@link NodeRef}s from a {@link GenericVertex}.
     * If multiple properties are set, they are returned in the following order:
     *
     *  - reference defined by node id
     *  - reference defined by foreignSource/foreignId
     *  - reference defined by node criteria string
     */
    public static List<NodeRef> from(GenericVertex vertex) {
        Objects.requireNonNull(vertex);
        final Object nodeId = vertex.getProperty(GenericProperties.NODE_ID);
        final String foreignSource = vertex.getProperty(GenericProperties.FOREIGN_SOURCE);
        final String foreignId = vertex.getProperty(GenericProperties.FOREIGN_ID);
        final String nodeRef = vertex.getProperty(GenericProperties.NODE_CRITERIA);
        final List<NodeRef> nodeRefs = Lists.newArrayList();
        if (nodeId != null) {
            if (nodeId instanceof String) {
                nodeRefs.add(NodeRef.from((String) nodeId));
            } else if (nodeId instanceof Integer) {
                nodeRefs.add(NodeRef.from((Integer) nodeId));
            }
        }
        if (!Strings.isNullOrEmpty(foreignSource) && !Strings.isNullOrEmpty(foreignId)) {
            nodeRefs.add(NodeRef.from(foreignSource, foreignId));
        }
        if (!Strings.isNullOrEmpty(nodeRef)) {
            nodeRefs.add(NodeRef.from(nodeRef));
        }
        return nodeRefs;
    }

