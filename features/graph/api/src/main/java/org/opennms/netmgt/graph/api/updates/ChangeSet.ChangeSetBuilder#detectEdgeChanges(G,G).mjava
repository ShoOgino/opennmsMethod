        private void detectEdgeChanges(G oldGraph, G newGraph) {
            // Find all vertices/edges which are in the old and new graph
            final List<String> oldEdgeIds = new ArrayList<>(oldGraph.getEdgeIds());
            final List<String> newEdgeIds = new ArrayList<>(newGraph.getEdgeIds());

            // Detect removed vertices
            final List<String> removedEdges = new ArrayList<>(oldEdgeIds);
            removedEdges.removeAll(newEdgeIds);
            removedEdges.forEach(id -> edgeRemoved(oldGraph.getEdge(id)));

            // Detect added vertices
            final List<String> addedEdges = new ArrayList<>(newEdgeIds);
            addedEdges.removeAll(oldEdgeIds);
            addedEdges.forEach(id -> edgeAdded(newGraph.getEdge(id)));

            // Detect updated vertices
            final List<String> sharedEdges = new ArrayList<>(newEdgeIds);
            sharedEdges.removeAll(removedEdges);
            sharedEdges.removeAll(addedEdges);
            sharedEdges.stream().forEach(id -> {
                E oldEdge = oldGraph.getEdge(id);
                E newEdge = newGraph.getEdge(id);
                if (!oldEdge.equals(newEdge)) {
                    edgeUpdated(newEdge);
                }
            });
        }

