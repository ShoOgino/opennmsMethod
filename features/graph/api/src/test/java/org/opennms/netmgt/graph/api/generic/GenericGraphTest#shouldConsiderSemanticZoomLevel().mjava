    @Test
    public void shouldConsiderSemanticZoomLevel() {
        final String namespace = "dummy";
        final Focus defaultFocus = new Focus(FocusStrategy.SELECTION, Lists.newArrayList(new VertexRef(namespace, "v1")));
        final GenericGraph graph = GenericGraph.builder()
                .namespace(namespace)
                .addVertex(GenericVertex.builder().namespace(namespace).id("v1").build())
                .addVertex(GenericVertex.builder().namespace(namespace).id("v1.1").build())
                .addVertex(GenericVertex.builder().namespace(namespace).id("v1.2").build())
                .addVertex(GenericVertex.builder().namespace(namespace).id("v1.1.1").build())
                .addVertex(GenericVertex.builder().namespace(namespace).id("v1.1.2").build())
                .addVertex(GenericVertex.builder().namespace(namespace).id("v1.2.1").build())
                .addVertex(GenericVertex.builder().namespace(namespace).id("v1.2.2").build())
                .addEdge(GenericEdge.builder().namespace(namespace).source(new VertexRef(namespace, "v1")).target(new VertexRef(namespace, "v1.1")).build())
                .addEdge(GenericEdge.builder().namespace(namespace).source(new VertexRef(namespace, "v1")).target(new VertexRef(namespace, "v1.2")).build())
                .addEdge(GenericEdge.builder().namespace(namespace).source(new VertexRef(namespace, "v1.1")).target(new VertexRef(namespace, "v1.1.1")).build())
                .addEdge(GenericEdge.builder().namespace(namespace).source(new VertexRef(namespace, "v1.1")).target(new VertexRef(namespace, "v1.1.2")).build())
                .addEdge(GenericEdge.builder().namespace(namespace).source(new VertexRef(namespace, "v1.2")).target(new VertexRef(namespace, "v1.2.1")).build())
                .addEdge(GenericEdge.builder().namespace(namespace).source(new VertexRef(namespace, "v1.2")).target(new VertexRef(namespace, "v1.2.2")).build())
                .focus(defaultFocus)
                .build();
        final List<GenericVertex> genericVertices = graph.resolveVertices(defaultFocus.getVertexIds());

        // Verify if no szl is defined, a graph only containing the default focus is returned
        ImmutableGraph<GenericVertex, GenericEdge> view = graph.getView(genericVertices, 0);
        assertNotNull(view);
        assertThat(view.getVertices(), Matchers.hasSize(1));
        assertThat(view.getEdges(), Matchers.hasSize(0));
        assertThat(view.getVertexIds(), Matchers.hasItems("v1"));

        // If provided vertices do not exist, an empty graph is returned instead
        view = graph.getView(Lists.newArrayList(GenericVertex.builder().namespace(namespace).id("UNKNOWN").build()), 0);
        assertNotNull(view);
        assertThat(view.getVertices(), Matchers.hasSize(0));
        assertThat(view.getEdges(), Matchers.hasSize(0));

        // Verify szl 1
        view = graph.getView(genericVertices, 1);
        assertThat(view.getVertices(), Matchers.hasSize(3));
        assertThat(view.getEdges(), Matchers.hasSize(2));
        assertThat(view.getVertexIds(), Matchers.hasItems("v1", "v1.1", "v1.2"));

        // Verify szl 2
        view = graph.getView(genericVertices, 2);
        assertThat(view.getVertices(), Matchers.hasSize(7));
        assertThat(view.getEdges(), Matchers.hasSize(6));
        assertThat(view.getVertexIds(), Matchers.hasItems("v1", "v1.1", "v1.2", "v1.1.1", "v1.1.2", "v1.2.1", "v1.2.2"));
    }

