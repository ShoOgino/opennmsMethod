    @Test
    public void verifyCRUD() {
        /*
         * Create
         */
        final GraphContainerEntity originalContainerEntity = new GraphContainerEntity();
        originalContainerEntity.setNamespace(CONTAINER_ID);
        originalContainerEntity.setProperty(EntityProperties.DESCRIPTION, String.class, CONTAINER_DESCRIPTION);
        originalContainerEntity.setProperty(EntityProperties.LABEL, String.class, CONTAINER_LABEL);

        final GraphEntity originalGraphEntity1 = createExampleGraph(GRAPH_NAMESPACE);
        final GraphEntity originalGraphEntity2 = createExampleGraph(GRAPH_NAMESPACE + "2");

        // Persist
        originalContainerEntity.getGraphs().add(originalGraphEntity1);
        originalContainerEntity.getGraphs().add(originalGraphEntity2);
        transactionOperations.execute(status -> {
            graphContainerDao.save(originalContainerEntity);
            status.flush();
            return null;
        });

        // Verify Container
        transactionOperations.execute(status -> {
            final GraphContainerEntity persistedGraphContainerEntity = graphContainerDao.findContainerById(originalContainerEntity.getNamespace());
            Assert.assertEquals(CONTAINER_LABEL, persistedGraphContainerEntity.getLabel());
            Assert.assertEquals(CONTAINER_DESCRIPTION, persistedGraphContainerEntity.getDescription());
            Assert.assertEquals(CONTAINER_ID, persistedGraphContainerEntity.getNamespace());
            Assert.assertEquals(2, persistedGraphContainerEntity.getGraphs().size());

            // Verify Graph
            for (String eachNamespace : Lists.newArrayList(GRAPH_NAMESPACE, GRAPH_NAMESPACE + "2")) {
                final GraphEntity originalGraphEntity = originalContainerEntity.getGraph(eachNamespace);
                final GraphEntity persistedGraphEntity = persistedGraphContainerEntity.getGraph(eachNamespace);
                Assert.assertNotNull(persistedGraphEntity);
                Assert.assertEquals(eachNamespace, persistedGraphEntity.getNamespace());
                Assert.assertEquals(originalGraphEntity.getLabel(), persistedGraphEntity.getLabel());
                Assert.assertEquals(originalGraphEntity.getDescription(), persistedGraphEntity.getDescription());
                Assert.assertEquals(3, persistedGraphEntity.getVertices().size());
                Assert.assertEquals(1, persistedGraphEntity.getEdges().size());

                // Verify focus has been persisted
                Assert.assertNotNull(persistedGraphEntity.getDefaultFocus());
                Assert.assertThat(persistedGraphEntity.getDefaultFocus().getType(), Matchers.is("FIRST"));
            }
            return null;
        });

        /*
         * Update
         */
        transactionOperations.execute(status -> {
            final GraphContainerEntity persistedGraphContainerEntity = graphContainerDao.findContainerById(originalContainerEntity.getNamespace());

            // Add new graph to the container
            final GraphEntity graphEntity3 = createExampleGraph(GRAPH_NAMESPACE + "3");
            graphEntity3.setProperty(EntityProperties.LABEL, String.class, "Ultimate " + GRAPH_LABEL);
            persistedGraphContainerEntity.getGraphs().add(graphEntity3);

            // Remove existing graph.
            persistedGraphContainerEntity.removeGraph(GRAPH_NAMESPACE + "2");

            // Update existing graph
            final GraphEntity graph = persistedGraphContainerEntity.getGraph(GRAPH_NAMESPACE);
            graph.setProperty(EntityProperties.LABEL, String.class,"New " + GRAPH_LABEL);

            // Adding new relations cause edges to be empty, so we test this by adding a new vertex
            final VertexEntity vertex = new VertexEntity();
            vertex.setNamespace(GRAPH_NAMESPACE);
            vertex.setProperty(EntityProperties.ID, String.class, "v4");
            vertex.setProperty(EntityProperties.LABEL, String.class, "Vertex 4");
            graph.addVertex(vertex);

            // The same is for adding an edge. It is simply removed
            final EdgeEntity edge = new EdgeEntity();
            edge.setNamespace(GRAPH_NAMESPACE);
            edge.setSource(GRAPH_NAMESPACE, graph.getVertices().get(1).getId());
            edge.setTarget(GRAPH_NAMESPACE, graph.getVertices().get(2).getId());
            graph.addEdge(edge);

            graphContainerDao.update(persistedGraphContainerEntity);
            return null;
        });

        // Verify Container
        transactionOperations.execute(status -> {
            final GraphContainerEntity persistedGraphContainerEntity = graphContainerDao.findContainerById(originalContainerEntity.getNamespace());
            Assert.assertEquals(CONTAINER_LABEL, persistedGraphContainerEntity.getLabel());
            Assert.assertEquals(CONTAINER_DESCRIPTION, persistedGraphContainerEntity.getDescription());
            Assert.assertEquals(CONTAINER_ID, persistedGraphContainerEntity.getNamespace());
            Assert.assertEquals(2, persistedGraphContainerEntity.getGraphs().size());

            // Verify Graphs
            try {
                persistedGraphContainerEntity.getGraph(GRAPH_NAMESPACE + "2");
                Assert.fail("Expected element to not be present");
            } catch (NoSuchElementException ex) {
                // expected
            }

            // Verify <GRAPH_NAMESPACE>
            GraphEntity persistedGraphEntity = persistedGraphContainerEntity.getGraph(GRAPH_NAMESPACE);
            Assert.assertNotNull(persistedGraphEntity);
            Assert.assertEquals(GRAPH_NAMESPACE, persistedGraphEntity.getNamespace());
            Assert.assertEquals("New " + GRAPH_LABEL, persistedGraphEntity.getLabel());
            Assert.assertEquals(GRAPH_DESCRIPTION, persistedGraphEntity.getDescription());
            Assert.assertEquals(4, persistedGraphEntity.getVertices().size());
            Assert.assertEquals(2, persistedGraphEntity.getEdges().size());

            // Verify <GRAPH_NAMESPACE>3
            persistedGraphEntity = persistedGraphContainerEntity.getGraph(GRAPH_NAMESPACE + "3");
            Assert.assertNotNull(persistedGraphEntity);
            Assert.assertEquals(GRAPH_NAMESPACE + "3", persistedGraphEntity.getNamespace());
            Assert.assertEquals("Ultimate " + GRAPH_LABEL, persistedGraphEntity.getLabel());
            Assert.assertEquals(GRAPH_DESCRIPTION, persistedGraphEntity.getDescription());
            Assert.assertEquals(3, persistedGraphEntity.getVertices().size());
            Assert.assertEquals(1, persistedGraphEntity.getEdges().size());

            return null;
        });

        /*
         * Delete
         */
        transactionOperations.execute(status -> {
            graphContainerDao.delete(originalContainerEntity.getNamespace());
            return null;
        });
        transactionOperations.execute(status -> {
            Assert.assertEquals(0, persistenceAccessor.find("Select gc from GraphContainerEntity gc").size());
            Assert.assertEquals(0, persistenceAccessor.find("Select g from GraphEntity g").size());
            Assert.assertEquals(0, persistenceAccessor.find("Select v from VertexEntity v").size());
            Assert.assertEquals(0, persistenceAccessor.find("Select e from EdgeEntity e").size());
            Assert.assertEquals(0, persistenceAccessor.find("Select p from PropertyEntity p").size());
            return null;
        });
    }

