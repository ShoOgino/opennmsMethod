    @Test
    public void testSortByAverageSuccessfulCollectionTime() {

        Collector c = new Collector();
        c.setSortColumn(SortColumn.AVGSUCCESSCOLLECTTIME);
        c.addLog("2010-03-13 02:21:30,000 INFO [CollectdScheduler-400 Pool-fiber51] collector.collect: begin:example1/0/1.1.1.1/SNMP");
        c.addLog("2010-03-13 02:21:40,000 INFO [CollectdScheduler-400 Pool-fiber51] collector.collect: end:example1/0/1.1.1.1/SNMP");
        c.addLog("2010-03-13 02:22:20,976 INFO [CollectdScheduler-400 Pool-fiber51] collector.collect: begin:example1/0/2.2.2.2/SNMP");
        c.addLog("2010-03-13 02:22:50,976 INFO [CollectdScheduler-400 Pool-fiber51] collector.collect: end:example1/0/2.2.2.2/SNMP");
        c.addLog("2010-03-13 02:23:30,000 INFO [CollectdScheduler-400 Pool-fiber51] collector.collect: begin:example1/0/3.3.3.3/SNMP");
        c.addLog("2010-03-13 02:23:50,000 INFO [CollectdScheduler-400 Pool-fiber51] collector.collect: end:example1/0/3.3.3.3/SNMP");
        List<ServiceCollector> collectors = c.getServiceCollectors();
        assertEquals(3, collectors.size());
        assertEquals(new Duration(30000), collectors.get(0).getAverageCollectionDuration());
        assertEquals(new Duration(20000), collectors.get(1).getAverageCollectionDuration());
        assertEquals(new Duration(10000), collectors.get(2).getAverageCollectionDuration());


    }

