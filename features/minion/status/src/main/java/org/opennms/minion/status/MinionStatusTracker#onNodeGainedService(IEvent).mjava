    @EventHandler(uei=EventConstants.NODE_GAINED_SERVICE_EVENT_UEI)
    public void onNodeGainedService(final IEvent e) {
        if (!MINION_HEARTBEAT.equals(e.getService()) && !MINION_RPC.equals(e.getService())) {
            return;
        }

        runInLoggingTransaction(() -> {
            assertHasNodeId(e);

            final Integer nodeId = e.getNodeid().intValue();
            final OnmsMinion minion = getMinionForNodeId(nodeId);
            if (minion == null) {
                LOG.debug("No minion found for node ID {}", nodeId);
                return;
            }

            final String minionId = minion.getId();

            LOG.debug("Node {}/{} gained a Minion service: {}", nodeId, minionId, e.getService());

            AggregateMinionStatus state = m_state.get(minionId);
            if (state == null) {
                LOG.info("Found new Minion node: {}/{}", nodeId, minionId);
                state = "down".equals(minion.getStatus())? AggregateMinionStatus.down() : AggregateMinionStatus.up();
            }

            if (MINION_HEARTBEAT.equals(e.getService())) {
                state = state.heartbeatUp();
            } else if (MINION_RPC.equals(e.getService())) {
                state = state.rpcUp();
            }
            updateStateIfChanged(minion, state, m_state.get(minionId));
        });
    }

