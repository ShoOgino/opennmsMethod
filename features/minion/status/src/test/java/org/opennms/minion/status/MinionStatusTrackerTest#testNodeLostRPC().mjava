    @Test
    public void testNodeLostRPC() throws Exception {
        final String foreignId = UUID.randomUUID().toString();
        final OnmsNode node = getNode(1, FOREIGN_SOURCE, foreignId, "MinionLocA");
        final OnmsMinion minion = getMinion(node);

        m_tracker.m_state.put(foreignId, AggregateMinionStatus.create(MinionServiceStatus.up(), MinionServiceStatus.up()));

        when(m_nodeDao.get(Integer.valueOf(1))).thenReturn(node);
        when(m_minionDao.findById(foreignId)).thenReturn(minion);

        generateOutage(EventConstants.OUTAGE_CREATED_EVENT_UEI, node, MINION_RPC, new Date());

        assertEquals("there should be one minion", 1, m_tracker.getMinions().size());
        assertEquals("it should match our minion", foreignId, m_tracker.getMinions().iterator().next().getId());
        final MinionStatus status = m_tracker.getStatus(foreignId);
        assertNotNull("we should get a status for the minion", status);
        assertFalse("the status should be down", status.isUp());
        verify(m_minionDao, times(1)).saveOrUpdate(minion);
    }

