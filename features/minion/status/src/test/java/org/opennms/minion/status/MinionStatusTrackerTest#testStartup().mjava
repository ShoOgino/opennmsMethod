    @Test
    public void testStartup() throws Exception {
        final OnmsServiceType heartbeatServiceType = new OnmsServiceType(1, MINION_HEARTBEAT);
        final OnmsServiceType rpcServiceType = new OnmsServiceType(2, MINION_RPC);
        when(m_serviceTypeDao.findByName(MINION_HEARTBEAT)).thenReturn(heartbeatServiceType);
        when(m_serviceTypeDao.findByName(MINION_RPC)).thenReturn(rpcServiceType);

        final String foreignIdA = UUID.randomUUID().toString();
        final OnmsNode nodeA = getNode(1, FOREIGN_SOURCE, foreignIdA, "MinionLocA");
        final OnmsMinion minionA = getMinion(nodeA);
        minionA.setLastUpdated(new Date(1));

        when(m_minionDao.findAll()).thenReturn(Arrays.asList(minionA));
        when(m_nodeDao.findMatching(any(Criteria.class))).thenReturn(Arrays.asList(nodeA));
        when(m_outageDao.newestCurrentOutages(anyListOf(String.class))).thenReturn(Collections.emptyList());

        m_tracker.refresh();

        assertEquals("there should be 1 minion restored from the database", 1, m_tracker.getMinions().size());
        assertTrue("it should be up because refresh always checks for outages", m_tracker.getStatus(foreignIdA).isUp());

        verify(m_minionDao, times(1)).findAll();
    }

