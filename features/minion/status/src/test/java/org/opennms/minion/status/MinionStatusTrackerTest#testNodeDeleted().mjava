    @Test
    public void testNodeDeleted() throws Exception {
        final String foreignId = UUID.randomUUID().toString();
        final OnmsNode node = getNode(1, FOREIGN_SOURCE, foreignId, "MinionLocA");
        final OnmsMinion minion = getMinion(node);

        m_tracker.m_state.put(foreignId, AggregateMinionStatus.create(MinionServiceStatus.up(), MinionServiceStatus.up()));

        when(m_nodeDao.get(Integer.valueOf(1))).thenReturn(node);
        when(m_minionDao.findById(foreignId)).thenReturn(minion);

        Event e = EventUtils.createNodeDeletedEvent(FOREIGN_SOURCE, 1, "one", "one");
        m_tracker.onNodeDeleted(e);

        assertEquals("there should still be a minion", 1, m_tracker.getMinions().size());
        final MinionStatus status = m_tracker.getStatus(minion);
        assertNull("we should not get a status for the minion", status);
        verify(m_minionDao, times(1)).saveOrUpdate(minion);
    }

