    @Override
    public void run() {
        FeaturesServiceMBean featuresService;
        ConfigMBean config;
        while(true) {
            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                LOG.warn("Thread interrupted. Aborting.", e);
                return;
            }

            try {
                featuresService = getFeaturesServiceMBean();
                featuresService.getRepositories();
            } catch (Throwable t) {
                LOG.debug("FeaturesServiceMBean failed. Waiting to retry.", t);
                continue;
            }

            try {
                config = getConfigMBean();
                config.listProperties(PAX_MVN_PID);
            } catch (Throwable t) {
                LOG.debug("ConfigMBean failed. Waiting to retry.", t);
                continue;
            }

            // We were able to successfully query both MBeans
            break;
        }

        List<Repository> repositories;
        try {
            repositories = getRepositories();
        } catch (IOException e) {
            LOG.error("Failed to retrieve the list of repositories. Aborting.", e);
            return;
        }

        List<Feature> featuresBoot;
        try {
            featuresBoot = getFeaturesBoot();
        } catch (IOException e) {
            LOG.error("Failed to retrieve the list of features to boot. Aborting.", e);
            return;
        }

        // Build a comma separated list of our Maven repositories
        StringBuilder mavenReposSb = new StringBuilder();
        for (Repository repository : repositories) {
            if (mavenReposSb.length() != 0) {
                mavenReposSb.append(",");
            }
            mavenReposSb.append(repository.toMavenUri());
        }

        LOG.info("Updating Maven repositories to include: {}", mavenReposSb);
        try {
            Map<String, String> props = config.listProperties(PAX_MVN_PID);
            props.put(PAX_MVN_REPOSITORIES, mavenReposSb.toString());
            config.update(PAX_MVN_PID, props);
        } catch (MBeanException e) {
            LOG.error("Failed to update the list of Maven repositories to '{}'. Aborting.",
                    mavenReposSb, e);
            return;
        }

        for (Repository repository : repositories) {
            for (String featureUri : repository.getFeatureUris()) {
                try {
                    LOG.info("Adding feature repository: {}", featureUri);
                    featuresService.addRepository(featureUri);
                    featuresService.refreshRepository(featureUri);
                } catch (Throwable t) {
                    LOG.error("Failed to add feature repository '{}'. Skipping.", featureUri, t);
                }
            }
        }

        for (Feature feature : featuresBoot) {
            LOG.info("Installing feature: {}", feature);
            try {
                if (feature.getVersion() == null) {
                    featuresService.installFeature(feature.getName());
                } else {
                    featuresService.installFeature(feature.getName(), feature.getVersion());
                }
            } catch (Throwable t) {
                LOG.error("Failed to install feature '{}'. Skipping.", feature, t);
            }
        }
    }

