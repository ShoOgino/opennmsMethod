    private void testJmsConnectivity(long maxDurationMillis) throws InterruptedException, ExecutionException, TimeoutException {
        final AtomicReference<Throwable> throwableRef = new AtomicReference<>();
        // Establishing the session in separate thread, allowing
        // us to control how long we wait for.
        final Thread t = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    Connection jmsConnection = null;
                    try {
                        jmsConnection = brokerConnectionFactory.createConnection();
                        // NMS-9445: Attempt to use the connection by creating a session
                        // and immediately closing it.
                        jmsConnection.createSession(false, Session.AUTO_ACKNOWLEDGE).close();
                    } finally{
                        if (jmsConnection != null) {
                            try {
                                jmsConnection.close();
                            } catch(JMSException ex) {
                                System.out.println("Failed to close the JMS connection: " + ex.getMessage());
                            }
                        }
                    }
                } catch (Throwable t) {
                    throwableRef.set(t);
                }
            }
        });
        t.setName("minion:ping");
        t.start();
        t.join(maxDurationMillis);
        if (t.isAlive()) {
            t.interrupt();
            throw new TimeoutException(String.format("Failed to create a JMS session within %d milliseconds.", maxDurationMillis));
        }
        if (throwableRef.get() != null) {
            throw new ExecutionException("Failed to create a JMS session.", throwableRef.get());
        }
    }

