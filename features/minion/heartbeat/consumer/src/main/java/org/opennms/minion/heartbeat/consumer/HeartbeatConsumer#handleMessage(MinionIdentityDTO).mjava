    @Override
    @Transactional
    public void handleMessage(MinionIdentityDTO minionHandle) {
        LOG.info("Received heartbeat for Minion with id: {} at location: {}",
                minionHandle.getId(), minionHandle.getLocation());
        OnmsMinion minion = minionDao.findById(minionHandle.getId());

        boolean synchronizeRequisition = false;

        if (minion == null) {
            minion = new OnmsMinion();
            minion.setId(minionHandle.getId());
            minion.setLocation(minionHandle.getLocation());

            synchronizeRequisition = true;
        }

        final String foreignSourceName = "Minions@"+ minion.getLocation();

        ForeignSource foreignSource = m_deployedForeignSourceRepository.getForeignSource(foreignSourceName);

        if (foreignSource == null) {
            foreignSource = new ForeignSource(foreignSourceName);
            foreignSource.setDetectors(Collections.emptyList());
            foreignSource.setPolicies(Collections.emptyList());
            m_deployedForeignSourceRepository.save(foreignSource);

            synchronizeRequisition = true;
        }

        Requisition requisition = m_deployedForeignSourceRepository.getRequisition(foreignSource);
        if (requisition == null) {
            requisition = new Requisition(foreignSourceName);

            synchronizeRequisition = true;
        }

        RequisitionNode requisitionNode = requisition.getNode(minion.getId());

        if (requisitionNode == null) {
            final RequisitionMonitoredService requisitionMonitoredService = new RequisitionMonitoredService();
            requisitionMonitoredService.setServiceName("Minion-Heartbeat");

            final RequisitionInterface requisitionInterface = new RequisitionInterface();
            requisitionInterface.setIpAddr("127.0.0.1");
            requisitionInterface.putMonitoredService(requisitionMonitoredService);

            requisitionNode = new RequisitionNode();
            requisitionNode.setNodeLabel(minion.getId());
            requisitionNode.setForeignId(minion.getLabel() != null ? minion.getLabel() : minion.getId());
            requisitionNode.setLocation(minion.getLocation());
            requisitionNode.putInterface(requisitionInterface);

            requisition.putNode(requisitionNode);

            synchronizeRequisition = true;
        }

        if (synchronizeRequisition) {
            m_deployedForeignSourceRepository.save(requisition);
            m_deployedForeignSourceRepository.flush();

            final EventBuilder eventBuilder = new EventBuilder(EventConstants.RELOAD_IMPORT_UEI, "Web");
            eventBuilder.addParam(EventConstants.PARM_URL, String.valueOf(m_deployedForeignSourceRepository.getRequisitionURL(foreignSource.getName())));

            try {
                m_eventProxy.send(eventBuilder.getEvent());
            } catch (final EventProxyException e) {
                throw new DataAccessResourceFailureException("Unable to send event to import group " + foreignSource, e);
            }
        }


        Date lastUpdated = new Date();
        minion.setLastUpdated(lastUpdated);
        minionDao.saveOrUpdate(minion);
    }

