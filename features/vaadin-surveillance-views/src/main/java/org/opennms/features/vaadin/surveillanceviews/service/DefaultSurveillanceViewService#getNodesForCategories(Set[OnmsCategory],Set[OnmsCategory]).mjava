    /**
     * {@inheritDoc}
     */
    @Override
    public List<OnmsNode> getNodesForCategories(final Set<OnmsCategory> rowCategories, final Set<OnmsCategory> colCategories) {
        return m_transactionOperations.execute(new TransactionCallback<List<OnmsNode>>() {
            @Override
            public List<OnmsNode> doInTransaction(TransactionStatus transactionStatus) {
                CriteriaBuilder criteriaBuilder = new CriteriaBuilder(OnmsNode.class);

                List<String> parameters = new ArrayList<>(rowCategories.stream().map(OnmsCategory::getName).collect(Collectors.toList()));
                parameters.addAll(colCategories.stream().map(OnmsCategory::getName).collect(Collectors.toList()));

                Type[] types = new Type[parameters.size()];
                Arrays.fill(types, Type.STRING);

                // Restrict on OnmsNode.nodeId
                criteriaBuilder.sql(
                    createQuery("{alias}.nodeId", rowCategories, colCategories),
                    parameters.toArray(new String[parameters.size()]),
                    types
                );

                return m_nodeDao.findMatching(criteriaBuilder.toCriteria());
            }
        });
    }

