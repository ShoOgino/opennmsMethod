    @Override
    public void refreshDetails(Set<String> rowCategories, Set<String> colCategories) {
        if (rowCategories == null || colCategories == null) {
            return;
        }

        List<OnmsCategory> onmsCategories = getSurveillanceViewService().getOnmsCategories();

        Set<OnmsCategory> rows = new HashSet<>();
        Set<OnmsCategory> cols = new HashSet<>();

        for (OnmsCategory onmsCategory : onmsCategories) {
            if (rowCategories.contains(onmsCategory.getName())) {
                rows.add(onmsCategory);
            }
            if (colCategories.contains(onmsCategory.getName())) {
                cols.add(onmsCategory);
            }
        }

        List<OnmsNode> nodes = null;

        if (rows.size() == 0 || cols.size() == 0) {
            if (rows.size() == 0 && cols.size() > 0) {
                nodes = getSurveillanceViewService().getNodeDao().findAllByCategoryList(cols);
            }

            if (rows.size() > 0 && cols.size() == 0) {
                nodes = getSurveillanceViewService().getNodeDao().findAllByCategoryList(rows);
            }
        } else {
            nodes = getSurveillanceViewService().getNodeDao().findAllByCategoryLists(rows, cols);
        }

        final CriteriaBuilder alarmCb = new CriteriaBuilder(OnmsAlarm.class);

        alarmCb.alias("node", "node");
        alarmCb.alias("lastEvent", "event");
        alarmCb.ne("node.type", "D");

        //alarmCb.fetch("firstEvent", Fetch.FetchType.EAGER);
        //alarmCb.fetch("lastEvent", Fetch.FetchType.EAGER);

        alarmCb.distinct();

        m_beanItemContainer.removeAllItems();

        if (nodes != null && nodes.size() > 0) {
            alarmCb.in("node", nodes);

            List<OnmsAlarm> alarms = getSurveillanceViewService().getAlarmDao().findMatching(alarmCb.toCriteria());

            for (OnmsAlarm alarm : alarms) {
                m_beanItemContainer.addItem(alarm);
            }
        }

        refreshRowCache();
    }

