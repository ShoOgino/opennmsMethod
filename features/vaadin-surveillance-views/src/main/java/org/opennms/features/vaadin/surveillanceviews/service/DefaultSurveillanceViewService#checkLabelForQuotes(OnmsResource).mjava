    private OnmsResource checkLabelForQuotes(OnmsResource childResource) {
        String lbl = Util.convertToJsSafeString(childResource.getLabel());
        OnmsResource resource = new OnmsResource(childResource.getName(), lbl, childResource.getResourceType(), childResource.getAttributes());
        resource.setParent(childResource.getParent());
        resource.setEntity(childResource.getEntity());
        resource.setLink(childResource.getLink());
        return resource;
    }
/*
    public getResourcesForNode(OnmsNode node) {

        OnmsResource resource = m_resourceDao.getResourceForNode(node);

        if (resource != null && (resource.getAttributes().size() > 0 || resource.getChildResources().size() > 0)) {
            resources.add(resource);

        }

        return null;

        String[] labels = new ArrayList<String[]>(resources.size());

        for (OnmsResource resource : resources) {
            labels.add(new String[] { resource.getId(), resource.getResourceType().getLabel() + ": " + resource.getLabel() });
        }
    }
    */
/*
    public String[][] getResources(SurveillanceSet set) {
        OnmsCriteria criteria = new OnmsCriteria(OnmsNode.class, "node");
        addCriteriaForSurveillanceSet(criteria, set);
        criteria.add(org.hibernate.criterion.Restrictions.ne("node.type", "D"));
        criteria.addOrder(org.hibernate.criterion.Order.asc("node.label"));

        List<OnmsNode> nodes = m_nodeDao.findMatching(criteria);

        List<OnmsResource> resources = new ArrayList<OnmsResource>();
        for (OnmsNode node : nodes) {
            OnmsResource resource = m_resourceDao.getResourceForNode(node);
            if (resource != null && (resource.getAttributes().size() > 0 || resource.getChildResources().size() > 0)) {
                resources.add(resource);
            }
        }

        List<String[]> labels = new ArrayList<String[]>(resources.size());
        for (OnmsResource resource : resources) {
            labels.add(new String[] { resource.getId(), resource.getResourceType().getLabel() + ": " + resource.getLabel() });
        }

        return labels.toArray(new String[labels.size()][]);
    }

    public String[][] getChildResources(String id) {
        OnmsResource parentResource = m_resourceDao.getResourceById(id);
        if (parentResource == null) {
            return null;
        }

        List<OnmsResource> resources = parentResource.getChildResources();

        List<String[]> labels = new ArrayList<String[]>(resources.size());
        for (OnmsResource resource : resources) {
            labels.add(new String[]{resource.getId(), resource.getResourceType().getLabel() + ": " + resource.getLabel()});
        }

        return labels.toArray(new String[labels.size()][]);
    }

    public String[][] getPrefabGraphs(String id) {
        OnmsResource resource = m_resourceDao.getResourceById(id);
        if (resource == null) {
            return null;
        }

        PrefabGraph[] graphs = m_graphDao.getPrefabGraphsForResource(resource);

        List<String[]> labels = new ArrayList<String[]>(graphs.length);
        for (PrefabGraph graph : graphs) {
            labels.add(new String[]{graph.getName(), graph.getName()});
        }

        return labels.toArray(new String[labels.size()][]);
    }
    */

