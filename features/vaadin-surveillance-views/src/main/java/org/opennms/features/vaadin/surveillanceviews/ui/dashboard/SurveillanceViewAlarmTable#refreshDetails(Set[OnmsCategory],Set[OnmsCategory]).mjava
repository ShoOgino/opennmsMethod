    @Override
    public void refreshDetails(Set<OnmsCategory> rowCategories, Set<OnmsCategory> colCategories) {
        if (rowCategories == null || colCategories == null) {
            return;
        }

        List<OnmsNode> nodes = null;

        if (rowCategories.size() == 0 || colCategories.size() == 0) {
            if (rowCategories.size() == 0 && colCategories.size() > 0) {
                nodes = getSurveillanceViewService().getNodeDao().findAllByCategoryList(colCategories);
            }

            if (rowCategories.size() > 0 && colCategories.size() == 0) {
                nodes = getSurveillanceViewService().getNodeDao().findAllByCategoryList(rowCategories);
            }
        } else {
            nodes = getSurveillanceViewService().getNodeDao().findAllByCategoryLists(rowCategories, colCategories);
        }

        final CriteriaBuilder alarmCb = new CriteriaBuilder(OnmsAlarm.class);

        alarmCb.alias("node", "node");
        alarmCb.alias("lastEvent", "event");
        alarmCb.ne("node.type", "D");
        alarmCb.limit(100);

        alarmCb.distinct();

        m_beanItemContainer.removeAllItems();

        if (nodes != null && nodes.size() > 0) {
            alarmCb.in("node", nodes);

            List<OnmsAlarm> alarms = getSurveillanceViewService().getAlarmDao().findMatching(alarmCb.toCriteria());

            for (OnmsAlarm alarm : alarms) {
                m_beanItemContainer.addItem(alarm);
            }
        }

        sort(new Object[]{"firstEventTime"}, new boolean[]{true});

        refreshRowCache();
    }

