    public SurveillanceViewGraphComponent(SurveillanceViewService surveillanceViewService, boolean enabled) {

        m_surveillanceViewService = surveillanceViewService;
        m_enabled = enabled;

        HorizontalLayout horizontalLayout = new HorizontalLayout();

        horizontalLayout.setWidth(100, Unit.PERCENTAGE);
        horizontalLayout.setSpacing(false);
        horizontalLayout.setPrimaryStyleName("v-caption-surveillance-view");
        horizontalLayout.addComponent(new Label("Resource Graphs"));
        addComponent(horizontalLayout);

        m_nodeSelect = new NativeSelect();
        m_nodeSelect.setNullSelectionAllowed(false);

        m_nodeSelect.addValueChangeListener(new Property.ValueChangeListener() {
            @Override
            public void valueChange(Property.ValueChangeEvent valueChangeEvent) {
                OnmsNode onmsNode = (OnmsNode) m_nodeSelect.getValue();

                m_resourceSelect.removeAllItems();

                if (onmsNode != null) {
                    Map<OnmsResourceType, List<OnmsResource>> map = getSurveillanceViewService().getResourceTypeMapForNodeId(onmsNode.getId());

                    for (OnmsResourceType onmsResourceType : map.keySet()) {
                        for (OnmsResource onmsResource : map.get(onmsResourceType)) {
                            m_resourceSelect.addItem(onmsResource);
                            m_resourceSelect.setItemCaption(onmsResource, onmsResourceType.getLabel() + ": " + onmsResource.getLabel());
                        }
                    }

                    Iterator<?> i = m_resourceSelect.getItemIds().iterator();

                    if (i.hasNext()) {
                        m_resourceSelect.select(i.next());
                    }
                }
            }
        });

        m_resourceSelect = new NativeSelect();
        m_resourceSelect.setNullSelectionAllowed(false);

        m_resourceSelect.addValueChangeListener(new Property.ValueChangeListener() {
            @Override
            public void valueChange(Property.ValueChangeEvent valueChangeEvent) {
                OnmsResource onmsResource = (OnmsResource) m_resourceSelect.getValue();

                m_graphSelect.removeAllItems();

                if (onmsResource != null) {
                    Map<String, String> map = getSurveillanceViewService().getGraphResultsForResourceId(onmsResource.getId());

                    for (String string : map.keySet()) {
                        m_graphSelect.addItem(map.get(string));
                        m_graphSelect.setItemCaption(map.get(string), string);
                    }

                    Iterator<?> i = m_graphSelect.getItemIds().iterator();

                    if (i.hasNext()) {
                        m_graphSelect.select(i.next());
                    }
                }
            }
        });

        m_graphSelect = new NativeSelect();
        m_graphSelect.setNullSelectionAllowed(false);

        m_graphSelect.addValueChangeListener(new Property.ValueChangeListener() {
            @Override
            public void valueChange(Property.ValueChangeEvent valueChangeEvent) {
                String string = (String) m_graphSelect.getValue();

                if (string != null) {
                    replaceImage(getSurveillanceViewService().imageUrlForGraph(string, m_width, 200));
                } else {
                    replaceImage(null);
                }
            }
        });

        m_nodeSelect.setSizeFull();
        m_resourceSelect.setSizeFull();
        m_graphSelect.setSizeFull();

        m_nodeSelect.addStyleName("surveillance-view");
        m_resourceSelect.addStyleName("surveillance-view");
        m_graphSelect.addStyleName("surveillance-view");


        m_imageLayout = new VerticalLayout();
        m_imageLayout.setSizeUndefined();
        m_imageLayout.setWidth(100, Unit.PERCENTAGE);
        m_imageLayout.setHeight(300, Unit.PIXELS);

        HorizontalLayout verticalLayout = new HorizontalLayout();
        verticalLayout.setSizeFull();
        verticalLayout.addComponent(m_nodeSelect);
        verticalLayout.addComponent(m_resourceSelect);
        verticalLayout.addComponent(m_graphSelect);

        m_imageLayout.setId("imageLayout");

        JavaScript.getCurrent().addFunction("myImageLayoutWidth", new JavaScriptFunction() {
            @Override
            public void call(final JSONArray arguments) throws JSONException {
                m_width = arguments.getInt(0);
            }
        });


        addAttachListener(new AttachListener() {
            @Override
            public void attach(AttachEvent attachEvent) {
                getUI().getPage().addBrowserWindowResizeListener(SurveillanceViewGraphComponent.this);

                JavaScript.getCurrent().execute("myImageLayoutWidth(document.getElementById('" + m_imageLayout.getId() + "').clientWidth);");
            }
        });

        addDetachListener(new DetachListener() {
            @Override
            public void detach(DetachEvent detachEvent) {
                getUI().getPage().removeBrowserWindowResizeListener(SurveillanceViewGraphComponent.this);
            }
        });

        addComponent(verticalLayout);
        addComponent(m_imageLayout);
    }

