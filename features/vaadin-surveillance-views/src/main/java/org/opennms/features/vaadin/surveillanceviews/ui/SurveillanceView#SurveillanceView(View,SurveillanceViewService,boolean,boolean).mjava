    /**
     * Constructor for creating new instances of this component.
     *
     * @param selectedView            the view to be used
     * @param surveillanceViewService the surveillance view service
     * @param dashboard               should the dashboard be displayed?
     * @param enabled                 should links be enabled?
     */
    public SurveillanceView(View selectedView, SurveillanceViewService surveillanceViewService, boolean dashboard, boolean enabled) {
        /**
         * set the fields
         */
        this.m_surveillanceViewService = surveillanceViewService;
        this.m_view = selectedView;
        this.m_surveillanceViewTableHeader = new SurveillanceViewTableHeader();
        this.m_dashboard = dashboard;
        this.m_enabled = enabled;

        /**
         * set spacing
         */
        setSpacing(true);

        /**
         * set the view to be displayed
         */
        setView(selectedView);

        /**
         * add poll listener for refresh timer
         */
        addAttachListener(new AttachListener() {
            @Override
            public void attach(AttachEvent attachEvent) {
                getUI().addPollListener(SurveillanceView.this);

            }
        });

        /**
         * remove this listener on detach event
         */
        addDetachListener(new DetachListener() {
            @Override
            public void detach(DetachEvent detachEvent) {
                getUI().removePollListener(SurveillanceView.this);
            }
        });
    }

