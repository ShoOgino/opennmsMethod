    public SurveillanceViewTable(final View view, SurveillanceViewService surveillanceViewService) {
        super("Surveillance view: " + view.getName());

        this.m_surveillanceViewService = surveillanceViewService;

        cells = m_surveillanceViewService.calculateCellStatus(view);

        List<OnmsCategory> onmsCategories = m_surveillanceViewService.getOnmsCategories();

        for (OnmsCategory onmsCategory : onmsCategories) {
            m_onmsCategoryMap.put(onmsCategory.getName(), onmsCategory);
        }
        setSizeUndefined();
        setWidth(100, Unit.PERCENTAGE);

        setSelectable(true);
        setMultiSelect(true);
        setImmediate(true);
        setSelectable(false);

        addStyleName("surveillance-view");

        addGeneratedColumn("", new ColumnGenerator() {
            @Override
            public Object generateCell(Table table, final Object itemId, Object columnId) {
                Label label = new Label((String) itemId);
                label.setSizeFull();
                label.addStyleName("white");
                return label;
            }
        });

        setColumnHeader("", view.getName());

        for (ColumnDef columnDef : view.getColumns()) {
            m_allColumnCategories.addAll(getOnmsCategoriesForNames(columnDef.getCategoryNames()));

            addGeneratedColumn(columnDef.getLabel(), new Table.ColumnGenerator() {
                public Object generateCell(Table source, final Object itemId, Object columnId) {

                    int rowIndex = view.getRows().indexOf(view.getRowDef((String) itemId));
                    int colIndex = view.getColumns().indexOf(view.getColumnDef((String) columnId));
                    SurveillanceStatus surveillanceStatus = cells[rowIndex][colIndex];

                    Label label = new Label(surveillanceStatus.getDownEntityCount() + " of " + surveillanceStatus.getTotalEntityCount());

                    label.setSizeFull();
                    label.addStyleName(surveillanceStatus.getStatus().toLowerCase());
                    return label;
                }
            });
        }

        for (RowDef rowDef : view.getRows()) {
            m_allRowCategories.addAll(getOnmsCategoriesForNames(rowDef.getCategoryNames()));

            addItem(rowDef.getLabel());
            setItemCaption(rowDef.getLabel(), rowDef.getLabel());
        }

        m_selectedRowCategories = m_allRowCategories;
        m_selectedColumnCategories = m_allColumnCategories;

        this.setPageLength(this.getItemIds().size());

        addItemClickListener(new ItemClickEvent.ItemClickListener() {
            @Override
            public void itemClick(ItemClickEvent itemClickEvent) {
                String selectedColumn = (String) itemClickEvent.getPropertyId();
                if (!"".equals(selectedColumn)) {
                    m_selectionType = TableSelectionMode.ITEM_SELECTED;
                    m_selectedItemId = itemClickEvent.getItemId();
                    m_selectedPropertyId = itemClickEvent.getPropertyId();

                    Notification.show(m_selectedItemId + "/" + m_selectedPropertyId + " selected");

                    m_selectedRowCategories = getOnmsCategoriesForNames(view.getRowDef((String) itemClickEvent.getItemId()).getCategoryNames());
                    m_selectedColumnCategories = getOnmsCategoriesForNames(view.getColumnDef((String) itemClickEvent.getPropertyId()).getCategoryNames());
                } else {
                    m_selectionType = TableSelectionMode.ROW_SELECTED;
                    m_selectedItemId = itemClickEvent.getItemId();

                    Notification.show(m_selectedItemId + " selected");

                    m_selectedRowCategories = getOnmsCategoriesForNames(view.getRowDef((String) itemClickEvent.getItemId()).getCategoryNames());
                    m_selectedColumnCategories = m_allColumnCategories;
                }

                updateDetailsTable();
                markAsDirtyRecursive();
            }
        });

        addHeaderClickListener(new HeaderClickListener() {
            @Override
            public void headerClick(HeaderClickEvent headerClickEvent) {
                if ("".equals(headerClickEvent.getPropertyId())) {
                    m_selectionType = TableSelectionMode.ALL_SELECTED;

                    m_selectedRowCategories = m_allRowCategories;
                    m_selectedColumnCategories = m_allColumnCategories;

                    Notification.show("All entries selected");
                } else {
                    m_selectionType = TableSelectionMode.COLUMN_SELECTED;
                    m_selectedPropertyId = headerClickEvent.getPropertyId();

                    m_selectedRowCategories = m_allRowCategories;
                    m_selectedColumnCategories = getOnmsCategoriesForNames(view.getColumnDef((String) headerClickEvent.getPropertyId()).getCategoryNames());

                    Notification.show(m_selectedPropertyId + " selected");
                }

                updateDetailsTable();
                markAsDirtyRecursive();
            }
        });

        setCellStyleGenerator(new CellStyleGenerator() {
            @Override
            public String getStyle(final Table source, final Object itemId, final Object propertyId) {
                String style = null;

                if (m_selectionType == TableSelectionMode.ALL_SELECTED) {
                    return style;
                }

                if (m_selectionType == TableSelectionMode.COLUMN_SELECTED) {
                    if (m_selectedPropertyId.equals(propertyId)) {
                        style = "marked";
                    }
                }

                if (m_selectionType == TableSelectionMode.ROW_SELECTED) {
                    if (m_selectedItemId.equals(itemId) && !"".equals(propertyId)) {
                        style = "marked";
                    }
                }

                if (m_selectionType == TableSelectionMode.ITEM_SELECTED) {
                    if (m_selectedItemId.equals(itemId) && m_selectedPropertyId.equals(propertyId)) {
                        style = "marked";
                    }
                }

                return style;
            }
        });
    }

