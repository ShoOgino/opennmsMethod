    @Test
    @Transactional
    public void testRemoveAlarmWithFeedback() {
        SituationFeedbackRestServiceImpl sut = new SituationFeedbackRestServiceImpl(alarmDao, alarmEntityNotifier, mockFeebackRepository, transactionTemplate);
        AlarmFeedback falsePositive = AlarmFeedback.newBuilder()
                .withSituationKey(situation.getReductionKey())
                .withSituationFingerprint("fingerprint")
                .withAlarmKey(linkDownAlarmOnR1.getReductionKey())
                .withFeedbackType(FeedbackType.FALSE_POSITIVE)
                .withReason("not related")
                .withUser("user")
                .build();
        List<AlarmFeedback> feedback = Collections.singletonList(falsePositive);

        OnmsAlarm prior = alarmDao.findByReductionKey(situation.getReductionKey());
        assertThat(prior.getRelatedAlarms().size(), is(2));

        int situationId = prior.getId();

        // Manually bind our test implementation
        sut.onBind(new AlarmFeedbackListenerImpl(), null);

        sut.setFeedback(situationId, feedback);

        // Our listener should have received the feedback
        assertThat(alarmFeedback, equalTo(feedback));

        OnmsAlarm restrieved = alarmDao.findByReductionKey(situation.getReductionKey());
        assertThat(restrieved.getRelatedAlarms().size(), is(1));
        assertThat(restrieved.getRelatedAlarms().stream().findFirst(), is(Optional.of(linkDownAlarmOnR2)));
    }

