    public List<DiscoveryJob> chunk( final DiscoveryConfiguration config )
    {
        int chunkSize = (config.getChunkSize() > 0) ? config.getChunkSize() : m_defaultChunkSize;
        DiscoveryConfigFactory configFactory = new DiscoveryConfigFactory( config );

        List<IPPollRange> ranges = new ArrayList<IPPollRange>();
        for ( IPPollAddress address : configFactory.getConfiguredAddresses() )
        {
            // If there is an IP address filter set
            if (m_ipAddressFilter != null) {
                // If the filter doesn't match the address
                if (!m_ipAddressFilter.matches(address.getAddress())) {
                    // Skip it
                    continue;
                }
            }

            IPPollRange range = new IPPollRange( address.getAddress(), address.getAddress(), address.getTimeout(),
                            address.getRetries() );
            ranges.add( range );
        }

        // If the foreign source for the discovery config is not set than use 
        // the default foreign source
        String foreignSource = (config.getForeignSource() == null || "".equals(config.getForeignSource().trim())) ? "default" : config.getForeignSource().trim();

        // If the monitoring location for the discovery config is not set than use 
        // the default localhost location
        String location = (config.getLocation() == null || "".equals(config.getLocation().trim())) ? "localhost" : config.getLocation().trim();

        return Lists.partition( ranges, chunkSize ).stream().map(
                        r -> new DiscoveryJob( new ArrayList<IPPollRange>( r ), foreignSource,
                                        location ) ).collect( Collectors.toList() );

    }

