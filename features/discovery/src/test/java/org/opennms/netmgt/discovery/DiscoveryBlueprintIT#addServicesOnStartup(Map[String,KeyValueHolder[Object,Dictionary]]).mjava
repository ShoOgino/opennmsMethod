    /**
     * Register a mock OSGi {@link SchedulerService} so that we can make sure that the scheduler
     * whiteboard is working properly.
     */
    @SuppressWarnings( "rawtypes" )
    @Override
    protected void addServicesOnStartup( Map<String, KeyValueHolder<Object, Dictionary>> services )
    {
        services.put( Pinger.class.getName(), new KeyValueHolder<Object, Dictionary>( new Pinger() {

            @Override
            public void ping( InetAddress host, long timeout, int retries, int packetsize, int sequenceId,
                            PingResponseCallback cb ) throws Exception
            {
                cb.handleResponse( host, new EchoPacket() {

                    @Override
                    public boolean isEchoReply()
                    {
                        // TODO Auto-generated method stub
                        return true;
                    }

                    @Override
                    public int getIdentifier()
                    {
                        // TODO Auto-generated method stub
                        return 0;
                    }

                    @Override
                    public int getSequenceNumber()
                    {
                        // TODO Auto-generated method stub
                        return 0;
                    }

                    @Override
                    public long getThreadId()
                    {
                        // TODO Auto-generated method stub
                        return 0;
                    }

                    @Override
                    public long getReceivedTimeNanos()
                    {
                        // TODO Auto-generated method stub
                        return 0;
                    }

                    @Override
                    public long getSentTimeNanos()
                    {
                        // TODO Auto-generated method stub
                        return 0;
                    }

                    @Override
                    public double elapsedTime( TimeUnit timeUnit )
                    {
                        // TODO Auto-generated method stub
                        return 0;
                    }
                } );

            }

            @Override
            public void ping( InetAddress host, long timeout, int retries, int sequenceId, PingResponseCallback cb )
                            throws Exception
            {
                ping( host, timeout, retries, 0, sequenceId, cb );
            }

            @Override
            public Number ping( InetAddress host, long timeout, int retries, int packetsize ) throws Exception
            {
                return 1;
            }

            @Override
            public Number ping( InetAddress host, long timeout, int retries ) throws Exception
            {
                return 1;
            }

            @Override
            public Number ping( InetAddress host ) throws Exception
            {
                return 1;
            }

            @Override
            public List<Number> parallelPing( InetAddress host, int count, long timeout, long pingInterval )
                            throws Exception
            {
                return null;
            }

            @Override
            public void initialize4() throws Exception
            {
            }

            @Override
            public void initialize6() throws Exception
            {
            }

            @Override
            public boolean isV4Available()
            {
                return true;
            }

            @Override
            public boolean isV6Available()
            {
                return true;
            }

        }, new Properties() ) );

        services.put( EventForwarder.class.getName(),
                new KeyValueHolder<Object, Dictionary>( IPC_MANAGER_INSTANCE, new Properties() ) );
        services.put( EventIpcManager.class.getName(),
                new KeyValueHolder<Object, Dictionary>( IPC_MANAGER_INSTANCE, new Properties() ) );
        
        DiscoveryConfiguration config = new DiscoveryConfiguration();
        IncludeRange range = new IncludeRange();
        range.setBegin("127.0.1.1");
        range.setEnd("127.0.1.20");
        config.setChunkSize(1);
        config.setIncludeRange(new IncludeRange[] { range });
        config.setInitialSleepTime(30000);
        config.setRestartSleepTime(30000);
        DiscoveryConfigFactory configFactory = new DiscoveryConfigFactory(config);
        services.put( DiscoveryConfigurationFactory.class.getName(),
                new KeyValueHolder<Object, Dictionary>(configFactory, new Properties() ) );
    }

