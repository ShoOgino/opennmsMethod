    @Test
    public void testDiscoveryTaskExecutor() throws Exception {
        // Add a range of localhost IP addresses to ping
        IncludeRange range = new IncludeRange();
        //range.setBegin("127.0.5.1");
        //range.setEnd("127.0.5.254");
        range.setBegin("192.168.99.1");
        range.setEnd("192.168.99.100");
        range.setTimeout(5000l);
        range.setRetries(0);

        DiscoveryConfiguration config = new DiscoveryConfiguration();
        config.setInitialSleepTime(0l);
        // 100 addresses at 10 per second should take at least 10 seconds
        config.setPacketsPerSecond(10d);
        config.clearIncludeRanges();
        config.addIncludeRange(range);

        // Anticipate newSuspect events for all of the addresses
        EventAnticipator anticipator = m_eventIpcManager.getEventAnticipator();
        StreamSupport.stream(new DiscoveryConfigFactory(config).getConfiguredAddresses().spliterator(), false).forEach(addr -> {
            System.out.println("ANTICIPATING: " + str(addr.getAddress()));
            Event event = new Event();
            event.setUei(EventConstants.NEW_SUSPECT_INTERFACE_EVENT_UEI);
            event.setInterfaceAddress(addr.getAddress());
            anticipator.anticipateEvent(event);
        });

        Date beforeTime = new Date();
        // Invoke a one-time scan via the DiscoveryTaskExecutor service
        m_taskExecutor.handleDiscoveryTask(config);
        Date afterTime = new Date();
        // Make sure that this call returns quickly as an async. call
        long timespan = (afterTime.getTime() - beforeTime.getTime());
        System.out.println("Task executor invocation took " + timespan + "ms");
        assertTrue("Timespan was not less than 8 seconds: " + timespan, timespan < 8000L);

        anticipator.waitForAnticipated(60000);
        anticipator.verifyAnticipated();
    }

