    /**
     * Register a mock OSGi {@link SchedulerService} so that we can make sure that the scheduler
     * whiteboard is working properly.
     */
    @SuppressWarnings( "rawtypes" )
    @Override
    protected void addServicesOnStartup( Map<String, KeyValueHolder<Object, Dictionary>> services ) {
        final PingerFactoryImpl pingerFactory = new PingerFactoryImpl();
        final Pinger pinger = new TestPinger();
        pingerFactory.setInstance(0, true, pinger);

        services.put( PingerFactory.class.getName(), new KeyValueHolder<Object, Dictionary>(pingerFactory, new Properties()));

        services.put( Pinger.class.getName(), new KeyValueHolder<Object, Dictionary>(pinger, new Properties()));

        services.put( EventForwarder.class.getName(),
                new KeyValueHolder<Object, Dictionary>( IPC_MANAGER_INSTANCE, new Properties() ) );

        services.put( EventIpcManager.class.getName(),
                new KeyValueHolder<Object, Dictionary>( IPC_MANAGER_INSTANCE, new Properties() ) );

        services.put( MinionIdentity.class.getName(),
                new KeyValueHolder<Object, Dictionary>( new MinionIdentity() {
                    @Override
                    public String getId() {
                        return DistPollerDao.DEFAULT_DIST_POLLER_ID;
                    }
                    @Override
                    public String getLocation() {
                        return LOCATION;
                    }
                }, new Properties())
        );

        DiscoveryConfiguration config = new DiscoveryConfiguration();
        IncludeRange range = new IncludeRange();
        range.setBegin("127.0.1.1");
        range.setEnd("127.0.1.20");
        config.setChunkSize(1);
        config.setIncludeRange(new IncludeRange[] { range });
        config.setInitialSleepTime(30000);
        config.setRestartSleepTime(30000);
        DiscoveryConfigFactory configFactory = new DiscoveryConfigFactory(config);

        services.put( DiscoveryConfigurationFactory.class.getName(),
                new KeyValueHolder<Object, Dictionary>(configFactory, new Properties() ) );

        Properties props = new Properties();
        props.setProperty("alias", "opennms.broker");
        services.put( Component.class.getName(),
                new KeyValueHolder<Object, Dictionary>( new SedaComponent(), props ) );
    }

