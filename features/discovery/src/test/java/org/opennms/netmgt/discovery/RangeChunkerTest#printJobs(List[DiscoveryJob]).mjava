	/**
	 * Pretty-print DiscoveryJobs.
	 * 
	 * @param jobs
	 */
	private static void printJobs(List<DiscoveryJob> jobs) {
		jobs.stream().forEach(job -> {
			final StringBuffer buffer = new StringBuffer();
			final AtomicInteger depth = new AtomicInteger(0);
			job.toString().chars().forEach(c -> {
				switch(c) {
					case('{'):
						depth.incrementAndGet();
						buffer.append("{\n");
						IntStream.range(0,  depth.get()).forEach(i -> {buffer.append("\t");}); 
						break;
					case('}'):
						depth.decrementAndGet();
						buffer.append("\n");
						IntStream.range(0,  depth.get()).forEach(i -> {buffer.append("\t");}); 
						buffer.append("}");
						break;
					case('['):
						depth.incrementAndGet();
						buffer.append("[\n");
						IntStream.range(0,  depth.get()).forEach(i -> {buffer.append("\t");}); 
						break;
					case(']'):
						depth.decrementAndGet();
						buffer.append("\n");
						IntStream.range(0,  depth.get()).forEach(i -> {buffer.append("\t");}); 
						buffer.append("]");
						break;
					/*
					case(','):
						buffer.append(",\n");
						IntStream.range(0,  depth.get()).forEach(i -> {buffer.append("\t");}); 
						break;
					*/
					default:
						buffer.append((char)c);
				}
			});

			System.out.println(buffer.toString());
		});
	}

