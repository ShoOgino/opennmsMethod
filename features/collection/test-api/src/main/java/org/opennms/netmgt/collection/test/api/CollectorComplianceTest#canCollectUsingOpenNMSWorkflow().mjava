    @Test
    public void canCollectUsingOpenNMSWorkflow() throws CollectionInitializationException, CollectionException {
        // create the agent
        OnmsNode node = mock(OnmsNode.class);
        OnmsIpInterface iface = mock(OnmsIpInterface.class);
        when(iface.getNode()).thenReturn(node);
        when(iface.getIpAddress()).thenReturn(InetAddrUtils.getLocalHostAddress());

        IpInterfaceDao ifaceDao = mock(IpInterfaceDao.class);
        when(ifaceDao.load(1)).thenReturn(iface);
        PlatformTransactionManager transMgr = mock(PlatformTransactionManager.class);
        final CollectionAgent agent = createAgent(1, ifaceDao, transMgr);

        // init() should execute without any exceptions
        final ServiceCollector opennmsCollector = getCollector();
        initialize(opennmsCollector);

        // getEffectiveLocation() should execute without any exceptions
        // in this context there are no requirements on its return value
        final String targetLocation = "!" + MonitoringLocationDao.DEFAULT_MONITORING_LOCATION_ID;
        opennmsCollector.getEffectiveLocation(targetLocation);

        // getRuntimeAttributes() should return a valid map
        final Map<String, Object> requiredParams = getRequiredParameters();
        final Map<String, Object> runtimeAttrs = opennmsCollector.getRuntimeAttributes(agent, Collections.unmodifiableMap(requiredParams));

        // collect() should return a valid collection set
        final Map<String, Object> allParms = new HashMap<>();
        allParms.putAll(requiredParams);
        allParms.putAll(runtimeAttrs);
        final CollectionSet collectionSet = opennmsCollector.collect(agent, Collections.unmodifiableMap(allParms));
        assertEquals(CollectionStatus.SUCCEEDED, collectionSet.getStatus());

        // getRrdRepository() should return a valid repository
        assertNotNull(opennmsCollector.getRrdRepository(getCollectionName()));
    }

