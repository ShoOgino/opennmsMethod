    @Override
    public CompletableFuture<CollectorResponseDTO> execute(CollectorRequestDTO request) {
        final String className = request.getClassName();
        final ServiceCollector collector = serviceCollectorRegistry.getCollectorByClassName(className);
        if (collector == null) {
            throw new IllegalArgumentException("No collector found with class name '" + className + "'.");
        }

        return CompletableFuture.supplyAsync(new Supplier<CollectorResponseDTO>() {
            @Override
            public CollectorResponseDTO get() {
                Logging.putPrefix("collectd");
                final CollectionAgent agent = request.getAgent();
                final Map<String, Object> parameters = request.getParameters(collector);
                return new CollectorResponseDTO(collector.collect(agent, parameters));
            }
        }, executor);
    }

