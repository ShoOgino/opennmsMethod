    @Override
    public CollectionSet collect(CollectionAgent agent, Map<String, Object> map) {
        final Map<String, String> stringMap = JmxUtils.convertToUnmodifiableStringMap(map);
        final InetAddress ipaddr = agent.getAddress();
        final JmxCollection jmxCollection = (JmxCollection)map.get(JMX_COLLECTION_KEY);
        final MBeanServer mBeanServer = (MBeanServer)map.get(JMX_MBEAN_SERVER_KEY);
        final String collectionName = ParameterMap.getKeyedString(map, ParameterName.COLLECTION.toString(), serviceName);
        final String port = ParameterMap.getKeyedString(map, ParameterName.PORT.toString(), null);
        final String friendlyName = ParameterMap.getKeyedString(map, ParameterName.FRIENDLY_NAME.toString(), port);
        final String collDir = JmxUtils.getCollectionDirectory(stringMap, friendlyName, serviceName);
        final int retries = ParameterMap.getKeyedInteger(map, ParameterName.RETRY.toString(), 3);

        InetAddress ipAddr = agent.getAddress();
        int nodeID = agent.getNodeId();

        // Retrieve the name of the JMX data collector

        final String hostAddress = InetAddressUtils.str(ipAddr);
        LOG.debug("initialize: InetAddress={}, collectionName={}", hostAddress, collectionName);

        JMXNodeInfo nodeInfo = new JMXNodeInfo(nodeID);
        LOG.debug("nodeInfo: {} {} {}", hostAddress, nodeID, agent);

        /*
         * Retrieve list of MBean objects to be collected from the
         * remote agent which are to be stored in the node-level RRD file.
         * These objects pertain to the node itself not any individual
         * interfaces.
         */
        Map<String, List<Attrib>> attrMap = JMXDataCollectionConfigDao.getAttributeMap(jmxCollection, serviceName(), hostAddress);
        nodeInfo.setAttributeMap(attrMap);

        Map<String, JMXDataSource> dsList = buildDataSourceList(collectionName, attrMap);
        nodeInfo.setDsMap(dsList);
        nodeInfo.setMBeans(JMXDataCollectionConfigDao.getMBeanInfo(jmxCollection));

        // Metrics collected from JMX are currently modeled as node level resources,
        // but live in a sub-directory set to the service name
        final NodeLevelResource nodeResource = new NodeLevelResource(agent.getNodeId(), collDir);

        // Used to gather the results
        final CollectionSetBuilder collectionSetBuilder = new CollectionSetBuilder(agent);

        LOG.debug("connecting to {} on node ID {}", InetAddressUtils.str(ipaddr), nodeInfo.getNodeId());

        try {
            // create config for JmxCollector
            final JmxCollectorConfig config = new JmxCollectorConfig();
            config.setAgentAddress(InetAddressUtils.str(ipaddr));
            config.setConnectionName(getConnectionName());
            config.setRetries(retries);
            config.setServiceProperties(stringMap);
            config.setJmxCollection(jmxCollection);

            final DefaultJmxCollector jmxCollector = new DefaultJmxCollector();
            jmxCollector.collect(config, mBeanServer, new JmxSampleProcessor() {
                @Override
                public void process(JmxAttributeSample attributeSample) {
                    final String objectName = attributeSample.getMbean().getObjectname();
                    final String attributeName = attributeSample.getCollectedAttribute().getName();

                    final String dsKey = objectName + "|" + attributeName;
                    final JMXDataSource ds = nodeInfo.getDsMap().get(dsKey);
                    if (ds == null) {
                        LOG.info("Could not find datasource for {}. Skipping.", dsKey);
                        return;
                    }
                    addNumericAttributeToCollectionSet(ds, attributeSample);
                }

                @Override
                public void process(JmxCompositeSample compositeSample) {
                    final String objectName = compositeSample.getMbean().getObjectname();
                    final String attributeName = compositeSample.getCollectedAttribute().getName();

                    final String dsKey = objectName + "|" + attributeName + "|" + compositeSample.getCompositeKey();
                    final JMXDataSource ds = nodeInfo.getDsMap().get(dsKey);
                    if (ds == null) {
                        LOG.info("Could not find datasource for {}. Skipping.", dsKey);
                        return;
                    }
                    addNumericAttributeToCollectionSet(ds, compositeSample);
                }

                private void addNumericAttributeToCollectionSet(JMXDataSource ds, AbstractJmxSample sample) {
                    final String groupName = fixGroupName(JmxUtils.getGroupName(stringMap, sample.getMbean()));

                    // Only numeric data comes back from JMX in data collection
                    final String valueAsString = sample.getCollectedValueAsString();
                    final Double value = NumericAttributeUtils.parseNumericValue(valueAsString);

                    // Construct the metric identifier (used by NRTG)
                    String metricId = groupName;
                    metricId = metricId.replace("_type_", ":type=");
                    metricId = metricId.replace("_", ".");
                    metricId = metricId.concat(".");
                    metricId = metricId.concat(ds.getName());
                    metricId = "JMX_".concat(metricId);

                    collectionSetBuilder.withIdentifiedNumericAttribute(nodeResource, groupName, ds.getName(), value, ds.getType(), metricId);
                }
            });
        } catch (final Exception e) {
            LOG.debug("{} Collector.collect: IOException while collecting address: {}", serviceName, agent.getAddress(), e);
        }

        return collectionSetBuilder.build();
    }

