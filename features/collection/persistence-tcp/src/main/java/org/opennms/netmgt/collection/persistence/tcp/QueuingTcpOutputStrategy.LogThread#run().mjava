        @Override
        public void run() {
            try {
                while (true) {
                    long totalOffers = m_strategy.getTotalOffers();
                    long badOffers = m_strategy.getBadOffers();
                    long goodOffers = m_strategy.getGoodOffers();
                    long queueChecks = m_consumer.getQueueChecks();
                    long queueDrains = m_consumer.getQueueDrains();
                    long queueSize = m_myQueue.size();
                    long queueRemaining = m_myQueue.remainingCapacity();
                    long sentReadings = m_consumer.getSentReadings();
                    LOG.info("Queue offers: " + totalOffers + " total, " + goodOffers + " good, " + badOffers + " bad; queue drains: " + queueChecks + " checks, " + queueDrains + " drains, " + sentReadings + " readings; queue state: " + queueSize + " elements, " + queueRemaining + " remaining capacity");
                    m_strategy.clearOfferStats();
                    m_consumer.clearDrainStats();
                    Thread.sleep(LOGGING_INTERVAL);
                }
            } catch (InterruptedException e) {
                LOG.warn("InterruptedException caught in QueuingTcpOutputStrategy$ConsumerThread, closing thread");
            } catch (Throwable e) {
                LOG.error("Unexpected exception caught in QueuingTcpOutputStrategy$ConsumerThread, closing thread", e);
            }
        }

