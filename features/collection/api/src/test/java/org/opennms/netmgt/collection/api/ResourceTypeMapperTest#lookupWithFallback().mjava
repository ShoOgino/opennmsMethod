    @Test
    public void lookupWithFallback() {
        ResourceTypeMapper.getInstance().setResourceTypeMapper(k -> {
            if ("other".equals(k)) {
                ResourceType rt = mock(ResourceType.class);
                when(rt.getName()).thenReturn("other");
                return rt;
            }
            return null;
        });

        // The "indexed" type does not exist, so it should return null
        assertNull(ResourceTypeMapper.getInstance().getResourceType("indexed"));

        // The "other" type does exist
        ResourceType rt = ResourceTypeMapper.getInstance().getResourceType("other");
        assertNotNull(rt);
        assertEquals("other", rt.getName());

        // Retrieving the "indexed" type while specifying "other" as a fallback should return a valid resource type
        rt = ResourceTypeMapper.getInstance().getResourceTypeWithFallback("indexed", "other");
        assertNotNull(rt);
        // However, the name of the resource type should reflect the requested type (and not the name of the fallback)
        // (This is done in order to preserve existing behavior.)
        assertEquals("indexed", rt.getName());
    }

