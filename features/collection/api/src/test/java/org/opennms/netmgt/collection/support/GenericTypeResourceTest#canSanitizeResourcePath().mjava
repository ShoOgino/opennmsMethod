    /**
     * Validates the behavior of instance name sanitization in the GenericTypeResource
     */
    @Test
    public void canSanitizeResourcePath() {
        // Alpha-numerics should always be unfiltered
        assertEquals("instance", getInstanceInResourcePath("instance"));
        assertEquals("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890",
                getInstanceInResourcePath("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890"));
        // Spaces are filtered, contiguous segments are replaced with a single _
        assertEquals("instance_", getInstanceInResourcePath("instance "));
        assertEquals("instance_", getInstanceInResourcePath("instance \t"));
        assertEquals("instance_a_", getInstanceInResourcePath("instance \t a \t "));
        // Colons are filtered
        assertEquals("instance_", getInstanceInResourcePath("instance:"));
        assertEquals("instance__", getInstanceInResourcePath("instance::"));
        // Backslashes are filtered
        assertEquals("instance_", getInstanceInResourcePath("instance\\"));
        assertEquals("instance__", getInstanceInResourcePath("instance\\\\"));
        // Square bracket are filtered
        assertEquals("instance_", getInstanceInResourcePath("instance["));
        assertEquals("instance__", getInstanceInResourcePath("instance[["));
        assertEquals("instance_", getInstanceInResourcePath("instance]"));
        assertEquals("instance__", getInstanceInResourcePath("instance]]"));
        // Other characters that may be illegal in Windows paths are NOT currently filtered
        assertEquals("instance/", getInstanceInResourcePath("instance/"));
        assertEquals("instance*", getInstanceInResourcePath("instance*"));
        assertEquals("instance|", getInstanceInResourcePath("instance|"));
        assertEquals("instance<", getInstanceInResourcePath("instance<"));
        assertEquals("instance>", getInstanceInResourcePath("instance>"));
    }

