    @Test
    public void canParseNumericValuesFromStrings() {
        // Standard Numeric Value
        assertEquals(4.6, NumericAttributeUtils.parseNumericValue("4.6"), delta);

        // Percentage Value
        assertEquals(4.6, NumericAttributeUtils.parseNumericValue("4.6%"), delta);

        // Value with Units - Model 1
        assertEquals(4.6, NumericAttributeUtils.parseNumericValue("4.6Bps"), delta);

        // Value with Units - Model 2
        assertEquals(4.6, NumericAttributeUtils.parseNumericValue("4.6 bps"), delta);

        // Negative value
        assertEquals(-42, NumericAttributeUtils.parseNumericValue("-42"), delta);

        // Negative Value with Units
        assertEquals(-32, NumericAttributeUtils.parseNumericValue("-32 celcius"), delta);

        // Value in scientific notation - Model 1
        assertEquals(420.0, NumericAttributeUtils.parseNumericValue("4.2E2"), delta);

        // Value in scientific notation - Model 2
        assertEquals(-0.04, NumericAttributeUtils.parseNumericValue("-4e-2"), delta);
    }

