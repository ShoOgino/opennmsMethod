    @Override
    public Map<String, String> marshalParameters(Map<String, Object> parameters) {
        final Map<String, String> marshaledParams = new HashMap<>();
        parameters.forEach((k,v) -> {
            if (v == null) {
                // Skip
            } else if (v instanceof String) {
                // As-is
                marshaledParams.put(k, (String)v);
            } else {
                // This entry needs to be marshaled, so we should
                // find an corresponding entry in the parameterTypeMap
                final Class<?> clazz = parameterTypeMap.get(k);
                if (clazz == null) {
                    throw new IllegalStateException(String.format("The parameter map for collector %s include a parameters named %s "
                            + "which must be marshaled, but no type mapping was provided. Aborting.",
                            getClass().getCanonicalName(), k));
                }
                if (!clazz.isAssignableFrom(v.getClass())) {
                    throw new IllegalStateException(String.format("The parameter map for collector %s include a parameters named %s "
                            + "which must be marshaled, but type mapping is incorrect (got %s, but expected %s). Aborting.",
                            getClass().getCanonicalName(), k, v.getClass(), clazz));
                }
                // The type mapping matches, let's marshal
                marshaledParams.put(k, JaxbUtils.marshal(v));
            }
        });
        return marshaledParams;
    }

