    public CollectionSet build() {
        MultiResourceCollectionSet<CollectionResource> collectionSet = new MultiResourceCollectionSet<CollectionResource>() {};
        collectionSet.setCollectionTimestamp(m_timestamp);
        collectionSet.setStatus(m_status.getCode());
        for (final Entry<Resource, List<Attribute<?>>> entry : m_attributesByResource.entrySet()) {
            final Resource resource = entry.getKey();
            final AbstractCollectionResource collectionResource = new AbstractCollectionResource(m_agent) {
                @Override
                public String getResourceTypeName() {
                    return "*";
                }

                @Override
                public String getInstance() {
                    return resource.getInstance();
                }

                @Override
                public Path getPath() {
                    return super.getPath().resolve(resource.getPath(this));
                }

                @Override
                public String toString() {
                    return String.format("Resource[%s]/Node[%d]", resource, m_agent.getNodeId());
                }
            };
    
            for (Attribute<?> attribute : entry.getValue()) {
                final AttributeGroupType groupType = new AttributeGroupType(attribute.getGroup(), AttributeGroupType.IF_TYPE_ALL);
                final AbstractCollectionAttributeType attributeType = new AbstractCollectionAttributeType(groupType) {
                    @Override
                    public String getType() {
                        return attribute.getType().getName();
                    }

                    @Override
                    public String getName() {
                        return attribute.getName();
                    }

                    @Override
                    public void storeAttribute(CollectionAttribute collectionAttribute, Persister persister) {
                        if (attribute.getType() == AttributeType.STRING) {
                            persister.persistStringAttribute(collectionAttribute);
                        } else {
                            persister.persistNumericAttribute(collectionAttribute);
                        }
                    }

                    @Override
                    public String toString() {
                        return String.format("AttributeType[%s]/type[%s]", getName(), getType());
                    }
                };

                collectionResource.addAttribute(new AbstractCollectionAttribute(attributeType, collectionResource) {
                    @Override
                    public String getMetricIdentifier() {
                        return attribute.getName();
                    }

                    @Override
                    public Number getNumericValue() {
                        return attribute.getNumericValue();
                    }

                    @Override
                    public String getStringValue() {
                        return attribute.getStringValue();
                    }

                    @Override
                    public String toString() {
                        return String.format("Attribute[%s:%s]", getMetricIdentifier(), attribute.getValue());
                    }
                });
            }
            collectionSet.getCollectionResources().add(collectionResource);
        }
        return collectionSet;
    }

