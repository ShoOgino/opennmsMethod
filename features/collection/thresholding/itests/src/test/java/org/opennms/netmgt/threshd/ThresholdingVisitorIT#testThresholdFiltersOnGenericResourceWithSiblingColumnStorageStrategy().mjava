    /**
     * Verifies that we are able to generate thresholds for CollectionSets using GenericTypeResource resources that use the SiblingColumnStorageStrategy. Resources of this type are
     * commonly used by the WS-Man collector, where data is returned in a tabular format and the resource name is set using the SiblingColumnStorageStrategy. In the case of the
     * WS-Man collector, the instance ids are generated systematically and will differ from one collection run to another. For this reason, it's important that the thresholder keys
     * it's state based off of the resource label, and not the instance id - this test will validate this.
     */
    @Test
    public void testThresholdFiltersOnGenericResourceWithSiblingColumnStorageStrategy() throws Exception {
        initFactories("/threshd-configuration.xml", "/test-thresholds-wsman.xml");
        ThresholdingVisitor visitor = createVisitor();

        SnmpCollectionAgent agent = createCollectionAgent();
        NodeLevelResource nodeResource = new NodeLevelResource(agent.getNodeId());

        org.opennms.netmgt.config.datacollection.ResourceType wmiLogicalDisk = createWmiLogicalDiskResourceType();

        // Expect a low threshold event (as configured in test-thresholds-wsman.xml)
        addEvent("uei.opennms.org/threshold/lowThresholdExceededWSManLogStorage", // uei
                 "127.0.0.1", // ipaddr
                 "SNMP", // service
                 2, // trigger
                 10240.0, // threshold
                 12288.0, // rearm
                 1.0, // value
                 "HarddiskVolume16", // label
                 "volume16-1", // instance
                 "wmiLDPctFreeMBytes", // ds
                 null, // iflabel
                 null, // ifindex
                 m_anticipator, m_anticipatedEvents);

        // Visit the collection set twice (the trigger is set to 2)
        for (int i = 0; i < 2; i++) {
            // A resource for each drive, with a unique instance on each iteration
            GenericTypeResource volume16 = new GenericTypeResource(nodeResource, wmiLogicalDisk, "volume16-" + i);
            GenericTypeResource iDrive = new GenericTypeResource(nodeResource, wmiLogicalDisk, "iDrive" + i);

            // Create the entries in strings.properties
            ResourcePath path = ResourcePath.get("snmp", "1", "wmiLogicalDisk", "HarddiskVolume16");
            m_resourceStorageDao.setStringAttribute(path, "wmiLDName", "HarddiskVolume16");
            path = ResourcePath.get("snmp", "1", "wmiLogicalDisk", "I");
            m_resourceStorageDao.setStringAttribute(path, "wmiLDName", "I");

            // Build a collection set containing attributes for both resources
            CollectionSet collectionSet = new CollectionSetBuilder(agent)
                    .withStringAttribute(volume16, "windows-os-wmi-LogicalDisk", "wmiLDName", "HarddiskVolume16")
                    .withNumericAttribute(volume16, "windows-os-wmi-LogicalDisk", "wmiLDPctFreeMBytes", 1.0, AttributeType.GAUGE)
                    .withNumericAttribute(volume16, "windows-os-wmi-LogicalDisk", "wmiLDPctFreeSpace",10, AttributeType.GAUGE)
                    .withStringAttribute(iDrive, "windows-os-wmi-LogicalDisk", "wmiLDName", "I")
                    .withNumericAttribute(iDrive,"windows-os-wmi-LogicalDisk", "wmiLDPctFreeMBytes", 2668498.0, AttributeType.GAUGE)
                    .withNumericAttribute(iDrive, "windows-os-wmi-LogicalDisk", "wmiLDPctFreeSpace", 10, AttributeType.GAUGE)
                    .build();
            collectionSet.visit(visitor);
        }

        // Verify!
        verifyEvents(0);

        // NMS-12329: Previously the persisted states were not keyed correctly and collided resulting in there being
        // fewer persisted states than expected that ended up getting shared. To verify this is no longer happening we 
        // enumerate the persisted states to check that the correct number of individual states were persisted.
        Set<String> persistedKeys = MockSession.getSession()
                .getBlobStore()
                .enumerateContext(AbstractThresholdEvaluatorState.THRESHOLDING_KV_CONTEXT)
                .keySet();
        // We expect 4 persisted states with keys like the following:
        // *wmiLogicalDisk-wmiLDPctFreeSpace*HarddiskVolume16
        // *wmiLogicalDisk-wmiLDPctFreeMBytes*HarddiskVolume16
        // *wmiLogicalDisk-wmiLDPctFreeMBytes*I
        // *wmiLogicalDisk-wmiLDPctFreeSpace*I
        int numExpectedPersistedKeys = 4;
        assertEquals("Incorrect # of persisted states", numExpectedPersistedKeys, persistedKeys.size());
    }

