    private Predicate<Map.Entry<String, byte[]>> getFilter() {
        AtomicInteger nodeIdToFilter = new AtomicInteger(-1);

        if (node != null) {
            try {
                nodeIdToFilter.set(Integer.parseInt(node));

                if (nodeIdToFilter.get() < 0) {
                    throw new IllegalStateException("Node ID must be positive");
                }

                OnmsNode nodeFound = nodeDao.get(node);

                if (nodeFound == null) {
                    throw new IllegalArgumentException(String.format("No node with ID '%s' could be found", node));
                }
            } catch (NumberFormatException ignore) {
                OnmsNode nodeFound = nodeDao.get(node);

                if (nodeFound == null) {
                    throw new IllegalArgumentException(String.format("No node with foreign_source:foreign_id '%s' " +
                            "could be found", node));
                }

                nodeIdToFilter.set(nodeFound.getId());
            }
        }

        return entry -> {
            int nodeId = nodeIdToFilter.get();

            if (nodeId >= 0) {
                return entry.getKey().startsWith(nodeId + "-");
            }

            return true;
        };
    }

