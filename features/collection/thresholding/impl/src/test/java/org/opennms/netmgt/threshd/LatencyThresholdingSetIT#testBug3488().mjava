    /*
     * Testing custom ThresholdingSet implementation for in-line Latency thresholds processing (Bug 3448)
     */
    @Test
    @JUnitTemporaryDatabase(tempDbClass=MockDatabase.class)
    public void testBug3488() throws Exception {
        setupSnmpInterfaceDatabase(m_db, m_ipAddress, null);
        EasyMock.expect(m_ifLabelDao.getIfLabel(EasyMock.anyInt(), EasyMock.anyObject(InetAddress.class))).andReturn(IfLabel.NO_IFLABEL).anyTimes();
        EasyMock.expect(m_ifLabelDao.getInterfaceInfoFromIfLabel(EasyMock.anyInt(), EasyMock.anyString())).andReturn(mockIfInfo).anyTimes();
        EasyMock.replay(m_ifLabelDao);

        LatencyCollectionResource resource = new LatencyCollectionResource(m_svcName, m_ipAddress, null);
        LatencyCollectionAttributeType type = new LatencyCollectionAttributeType();
        CollectionAttribute collectionAttribute = new LatencyCollectionAttribute(resource, type, "http", 200.0);
        resource.addAttribute(collectionAttribute);
        CollectionSet collectionSet = new SingleResourceCollectionSet(resource, new Date());

        addEvent(EventConstants.HIGH_THRESHOLD_EVENT_UEI, "127.0.0.1", "HTTP", 5, 100.0, 50.0, 200.0, IfLabel.NO_IFLABEL, "127.0.0.1[HTTP]", "http", IfLabel.NO_IFLABEL, null,
                 m_eventIpcManager.getEventAnticipator(), m_anticipatedEvents);

        ThresholdingSession session = m_thresholdingService.createSession(m_nodeId, m_ipAddress, m_svcName, getRepository(), m_serviceParams);
        for (int i = 0; i < 5; i++) {
            session.accept(collectionSet);
        }

        verifyEvents(0);
    }

