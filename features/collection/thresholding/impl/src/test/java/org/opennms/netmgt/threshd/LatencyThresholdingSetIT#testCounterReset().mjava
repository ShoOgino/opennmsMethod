    /*
     * Testing counter reset.
     * When a threshold condition increases the violation count, and before reach the trigger, the value of the variable is on rearm
     * condition, the counter should be reinitialized and should start over again.
     * 
     * This test validate that Bug 1582 has been fixed.
     */
    @Test    
    @JUnitTemporaryDatabase(tempDbClass=MockDatabase.class)
    public void testCounterReset() throws Exception {
        String ifName = "lo0";
        setupSnmpInterfaceDatabase(m_db, m_ipAddress, ifName);
        EasyMock.expect(m_ifLabelDao.getIfLabel(EasyMock.anyInt(), EasyMock.anyObject(InetAddress.class))).andReturn(ifName).anyTimes();
        EasyMock.expect(m_ifLabelDao.getInterfaceInfoFromIfLabel(EasyMock.anyInt(), EasyMock.anyString())).andReturn(mockIfInfo).anyTimes();
        EasyMock.replay(m_ifLabelDao);

        ThresholdingSession session = m_thresholdingService.createSession(m_nodeId, m_ipAddress, m_svcName, getRepository(), m_serviceParams);

        Map<String, Double> attributes = new HashMap<String, Double>();
        attributes.put("http", 90.0);

        CollectionSet collectionSet = getCollectionSet(m_nodeId, m_ipAddress, m_svcName, m_location, getRepository(), attributes);
        session.accept(collectionSet);

        // Testing trigger the threshold 3 times
        attributes.put("http", 200.0);
        for (int i = 1; i <= 3; i++) {
            LOG.debug("testLatencyThresholdingSet: ------------------------------------ trigger number {}", i);
            collectionSet = getCollectionSet(m_nodeId, m_ipAddress, m_svcName, m_location, getRepository(), attributes);
            session.accept(collectionSet);
        }
        
        // This should reset the counter
        attributes.put("http", 40.0);
        LOG.debug("testLatencyThresholdingSet: ------------------------------------ reseting counter");
        collectionSet = getCollectionSet(m_nodeId, m_ipAddress, m_svcName, m_location, getRepository(), attributes);
        session.accept(collectionSet);

        // Increase the counter again two times, no threshold should be generated
        attributes.put("http", 300.0);
        for (int i = 4; i <= 5; i++) {
            LOG.debug("testLatencyThresholdingSet: ------------------------------------ trigger number {}", i);
            collectionSet = getCollectionSet(m_nodeId, m_ipAddress, m_svcName, m_location, getRepository(), attributes);
            session.accept(collectionSet);
        }

        addEvent(EventConstants.HIGH_THRESHOLD_EVENT_UEI, "127.0.0.1", "HTTP", 5, 100.0, 50.0, 300.0, ifName, "127.0.0.1[HTTP]", "http", ifName, null,
                 m_eventIpcManager.getEventAnticipator(), m_anticipatedEvents);

        // Increase 3 more times and now, the threshold event should be triggered.
        for (int i = 6; i <= 8; i++) {
            LOG.debug("testLatencyThresholdingSet: ------------------------------------ trigger number {}", i);
            collectionSet = getCollectionSet(m_nodeId, m_ipAddress, m_svcName, m_location, getRepository(), attributes);
            session.accept(collectionSet);
        }
        
        verifyEvents(0);
    }

