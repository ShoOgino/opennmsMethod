    /**
     * This method is responsible for returning a String object which represents
     * the content of this ThresholdEntity. Primarily used for debugging
     * purposes.
     *
     * @return String which represents the content of this ThresholdEntity
     */
    @Override
    public String toString() {
        if (!hasThresholds()) {
            return "";
        }

        final StringBuilder buffer = new StringBuilder("{");

        buffer.append("evaluator=").append(this.getThresholdConfig().getType());
        buffer.append(", dsName=").append(this.getDataSourceExpression());
        buffer.append(", dsType=").append(this.getDatasourceType());
        buffer.append(", evaluators=[");
        for (ThresholdEvaluatorState item : getThresholdEvaluatorStates(null)) {
            buffer.append("{ds=").append(item.getThresholdConfig().getDatasourceExpression());
            buffer.append(", value=").append(item.getThresholdConfig().getValueString());
            buffer.append(", rearm=").append(item.getThresholdConfig().getRearmString());
            buffer.append(", trigger=").append(item.getThresholdConfig().getTriggerString());
            buffer.append("}");
        }
        buffer.append("]}");

        return buffer.toString();
    }

