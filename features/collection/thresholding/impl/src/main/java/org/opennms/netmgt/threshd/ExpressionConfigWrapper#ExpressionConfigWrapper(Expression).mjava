    public ExpressionConfigWrapper(Expression expression) throws ThresholdExpressionException {
        super(expression);
        m_expression = expression;

        jexlEngine = new OnmsJexlEngine();
        jexlEngine.white(HashMap.class.getName());
        jexlEngine.white(MathBinding.class.getName());

        m_datasources = new ArrayList<String>();

        try {
            // We need to remove any mate data that are part of the expression before we try to find the datasources so
            // we will interpolate with an empty scope and rely on default values to keep the expression valid
            ExpressionImpl e = (ExpressionImpl) jexlEngine
                    .createExpression(interpolateExpression(m_expression.getExpression(), EmptyScope.EMPTY));
            LOG.trace("List of Variables on the Expression: {}", e.getVariables());
            for (List<String> list : e.getVariables()) { // Requires JEXL 2.1.x
                if (list.get(0).equalsIgnoreCase("math")) {
                    continue;
                }
                if (list.get(0).equalsIgnoreCase("datasources")) {
                    // Include the internal parameter. See NMS-5019
                    m_datasources.add(list.get(1).intern());
                } else {
                    // Include the first element, because datasources and math are the only composite elements
                    m_datasources.add(list.get(0).intern());
                }
            }
        } catch (Throwable e) {
            throw new ThresholdExpressionException("Could not parse threshold expression:" + e.getMessage(), e);
        }
        LOG.trace("Threshold Variables: {}", m_datasources);
    }

