    /**
     * This method serves to ensure that we only instantiate a single serdes wrapper for a given state type rather than
     * creating a separate serdes wrapper for every evaluator. The serdes wrappers will be stored in a map keyed by the
     * type they deal with.
     */
    @SuppressWarnings("unchecked") // The cast is guaranteed to work based on how we are keying the map by the type
    private static <U extends AbstractThresholdEvaluatorState.AbstractState> SerializingBlobStore<U> getKvStoreForType(Class<U> stateType, BlobStore blobStore) {
        return (SerializingBlobStore<U>) serdesMap.computeIfAbsent(stateType,
                c -> SerializingBlobStore.ofType(blobStore, fst::asByteArray, bytes -> c.cast(fst.asObject(bytes))));
    }

