    /**
     * <p>getFieldValue</p>
     *
     * @param ds a {@link java.lang.String} object.
     * @return a {@link java.lang.String} object.
     */
    public String getFieldValue(String ds) {
        if (ds == null || "".equals(ds)) {
            return null;
        }
        LOG.debug("getLabelValue: Getting Value for {}::{}", m_resource.getResourceTypeName(), ds);
        if ("nodeid".equalsIgnoreCase(ds)) {
            return Integer.toString(m_nodeId);
        } else if ("ipaddress".equalsIgnoreCase(ds)) {
            return m_hostAddress;
        } else if ("iflabel".equalsIgnoreCase(ds)) {
            return getIfLabel();
        } else if ("id".equalsIgnoreCase(ds)) {
            return m_resource.getPath().getName().toString();
        }

        try {
            String retval = null;

            // Get Value from ifInfo only for Interface Resource
            if (isAnInterfaceResource()) {
                retval = getIfInfoValue(ds);
                if (retval != null) {
                    return retval;
                }
            }

            // Find values saved in string attributes
            ResourcePath path = ResourceTypeUtils.getResourcePathWithRepository(m_repository, m_resource.getPath());
            retval = m_resourceStorageDao.getStringAttribute(path, ds);
            if (retval != null) {
                return retval;
            }
        } catch (Throwable e) {
            LOG.info("getFieldValue: Can't get value for attribute {} for resource {}.", ds, m_resource, e);
        }

        LOG.debug("getFieldValue: The field {} is not a string property. Trying to parse it as numeric metric.", ds);
        Double d = getAttributeValue(ds);
        if (d != null) {
            return d.toString();
        }

        return null;
    }

