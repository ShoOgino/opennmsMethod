    protected void reportResult(final PerspectivePolledService polledService, final PollStatus pollResult) {
        // Update the status in the polled service
        if (!polledService.updateStatus(pollResult)) {
            // Nothing to do if status has not changed
            return;
        }

        final String uei = pollResult.isAvailable() ? EventConstants.PERSPECTIVE_NODE_REGAINED_SERVICE_UEI : EventConstants.PERSPECTIVE_NODE_LOST_SERVICE_UEI;

        final EventBuilder builder = new EventBuilder(uei, PerspectivePollerd.NAME);
        builder.addParam(EventConstants.PARM_LOCATION, polledService.getPerspectiveLocation());
        builder.setNodeid(polledService.getNodeId());
        builder.setInterface(polledService.getIpAddress());
        builder.setService(polledService.getServiceName());
        builder.addParam("perspective", polledService.getPerspectiveLocation());

        if (!pollResult.isAvailable() && pollResult.getReason() != null) {
            builder.addParam(EventConstants.PARM_LOSTSERVICE_REASON, pollResult.getReason());
        }

        this.eventForwarder.sendNow(builder.getEvent());
    }

