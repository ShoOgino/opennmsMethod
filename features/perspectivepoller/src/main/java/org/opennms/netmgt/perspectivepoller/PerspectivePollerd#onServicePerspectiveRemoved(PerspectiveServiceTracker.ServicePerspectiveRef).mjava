    @Override
    public void onServicePerspectiveRemoved(final PerspectiveServiceTracker.ServicePerspectiveRef servicePerspective) {
        final JobKey key = buildJobKey(servicePerspective);

        try {
            this.scheduler.deleteJob(key);
        } catch (final SchedulerException e) {
            LOG.error("Failed to un-schedule {} ({}).", servicePerspective, key, e);
        }

        // Clear all perspective outages for that service
        final OnmsMonitoredService service = this.monitoredServiceDao.get(servicePerspective.getNodeId(), servicePerspective.getIpAddress(), servicePerspective.getServiceName());
        if (service == null) {
            return;
        }

        final OnmsMonitoringLocation perspectiveLocation = this.monitoringLocationDao.get(servicePerspective.getPerspectiveLocation());
        if (perspectiveLocation == null) {
            return;
        }

        final OnmsOutage outage = this.outageDao.currentOutageForServiceFromPerspective(service, perspectiveLocation);
        if (outage == null) {
            return;
        }

        outage.setIfRegainedService(new Date());
        this.outageDao.update(outage);
    }

