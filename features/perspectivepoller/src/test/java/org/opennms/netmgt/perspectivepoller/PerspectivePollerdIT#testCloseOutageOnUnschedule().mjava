    @Test
    public void testCloseOutageOnUnschedule() throws Exception {
        final Package pkg = PollerConfigFactory.getInstance().getPackage("foo1");
        final Package.ServiceMatch serviceMatch = pkg.findService("ICMP").get();
        final ServiceMonitor svcMon = PollerConfigFactory.getInstance().getServiceMonitor("ICMP");

        final int nodeId = this.node1icmp.getNodeId();
        final InetAddress ipAddress = this.node1icmp.getIpAddress();
        final String location = this.node1icmp.getIpInterface().getNode().getLocation().getLocationName();

        final PerspectivePolledService perspectivePolledService = findPerspectivePolledService(this.node1icmp, "RDU");
        await().atMost(5, TimeUnit.SECONDS).until(() -> this.databasePopulator.getOutageDao().currentOutageForServiceFromPerspective(this.node1icmp, this.databasePopulator.getLocRDU()), is(nullValue()));

        this.perspectivePollerd.reportResult(perspectivePolledService, PollStatus.unavailable("old reason"));
        await().atMost(5, TimeUnit.SECONDS).until(() -> this.databasePopulator.getOutageDao().currentOutageForServiceFromPerspective(this.node1icmp, this.databasePopulator.getLocRDU()), is(notNullValue()));

        this.databasePopulator.getApplicationDao().delete(this.app1);
        this.eventIpcManager.sendNowSync(new EventBuilder(EventConstants.APPLICATION_DELETED_EVENT_UEI, "test")
                                                 .addParam(PARM_APPLICATION_ID, this.app1.getId())
                                                 .addParam(PARM_APPLICATION_NAME, this.app1.getName())
                                                 .getEvent());

        await().atMost(5, TimeUnit.SECONDS).until(() -> this.databasePopulator.getOutageDao().currentOutageForServiceFromPerspective(this.node1icmp, this.databasePopulator.getLocRDU()), is(nullValue()));
    }

