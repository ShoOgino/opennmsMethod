    @Test
    public void testRemoveNode() throws Exception {
        this.perspectivePollerd.start();

        await().atMost(5, TimeUnit.SECONDS).until(() -> findPerspectivePolledService(this.node1icmp, "RDU"), is(notNullValue()));
        await().atMost(5, TimeUnit.SECONDS).until(() -> findPerspectivePolledService(this.node1icmp, "Fulda"), is(notNullValue()));
        await().atMost(5, TimeUnit.SECONDS).until(() -> findPerspectivePolledService(this.node1snmp, "RDU"), is(notNullValue()));
        await().atMost(5, TimeUnit.SECONDS).until(() -> findPerspectivePolledService(this.node1http, "RDU"), is(notNullValue()));
        await().atMost(5, TimeUnit.SECONDS).until(() -> findPerspectivePolledService(this.node1http, "Fulda"), is(notNullValue()));

        this.databasePopulator.getNodeDao().delete(this.node1icmp.getIpInterface().getNode());
        this.databasePopulator.getNodeDao().flush();

        this.eventIpcManager.sendNowSync(new EventBuilder(EventConstants.NODE_DELETED_EVENT_UEI, "test")
                                                 .setNodeid(this.node1icmp.getNodeId())
                                                 .getEvent());

        await().atMost(5, TimeUnit.SECONDS).until(() -> findPerspectivePolledService(this.node1icmp, "RDU"), is(nullValue()));
        await().atMost(5, TimeUnit.SECONDS).until(() -> findPerspectivePolledService(this.node1icmp, "Fulda"), is(nullValue()));
        await().atMost(5, TimeUnit.SECONDS).until(() -> findPerspectivePolledService(this.node1snmp, "RDU"), is(nullValue()));
        await().atMost(5, TimeUnit.SECONDS).until(() -> findPerspectivePolledService(this.node1http, "RDU"), is(nullValue()));
        await().atMost(5, TimeUnit.SECONDS).until(() -> findPerspectivePolledService(this.node1http, "Fulda"), is(nullValue()));
    }

