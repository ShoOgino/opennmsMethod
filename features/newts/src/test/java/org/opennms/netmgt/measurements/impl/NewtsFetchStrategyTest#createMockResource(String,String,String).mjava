    public Source createMockResource(final String label, final String attr, final String node) {
        OnmsResourceType type = EasyMock.createNiceMock(OnmsResourceType.class);

        final int nodeId = node.hashCode();
        final String newtsResourceId = "response:" + node + ":" + attr;
        final String resourceId = "nodeSource[NODES:" + nodeId + "].responseTime[" + node + "]";
        OnmsResource resource = m_resources.get(resourceId);
        if (resource == null) {
            resource = new OnmsResource(attr, label, type, Sets.newHashSet(), ResourcePath.get("foo"));
            m_resources.put(resourceId, resource);
        }
        Set<OnmsAttribute> attributes = resource.getAttributes();
        attributes.add(new RrdGraphAttribute(attr, "", newtsResourceId));

        Results<Measurement> results = new Results<Measurement>();
        Resource res = new Resource(newtsResourceId);
        Row<Measurement> row = new Row<Measurement>(Timestamp.fromEpochSeconds(0), res);
        Measurement measurement = new Measurement(Timestamp.fromEpochSeconds(0), res, label, 0.0d);
        row.addElement(measurement);
        results.addRow(row);

        EasyMock.expect(m_sampleRepository.select(
                EasyMock.eq(m_context), EasyMock.eq(res), EasyMock.anyObject(), EasyMock.anyObject(), EasyMock.anyObject(), EasyMock.anyObject()
                )).andReturn(results);

        final Source source = new Source();
        source.setAggregation("AVERAGE");
        source.setAttribute(attr);
        source.setLabel(label);
        source.setResourceId(resourceId);
        source.setTransient(false);
        return source;
    }

