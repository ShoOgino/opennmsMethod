    public Source createMockResource(final String label, final String attr, final String ds, final String node, boolean expect) {
        OnmsResourceType nodeType = EasyMock.createMock(OnmsResourceType.class);
        EasyMock.expect(nodeType.getName()).andReturn("nodeSource").anyTimes();
        EasyMock.expect(nodeType.getLabel()).andReturn("nodeSourceTypeLabel").anyTimes();
        EasyMock.replay(nodeType);

        OnmsResourceType type = EasyMock.createMock(OnmsResourceType.class);
        EasyMock.expect(type.getName()).andReturn("newtsTypeName").anyTimes();
        EasyMock.expect(type.getLabel()).andReturn("newtsTypeLabel").anyTimes();
        EasyMock.replay(type);

        final int nodeId = node.hashCode();
        final String newtsResourceId = "response:" + node + ":" + attr;
        final ResourceId parentId = ResourceId.get("nodeSource", "NODES:" + nodeId);
        final ResourceId resourceId = parentId.resolve("responseTime", node);
        OnmsResource parent = m_resources.get(parentId);
        if (parent == null) {
            parent = new OnmsResource("NODES:" + nodeId, ""+nodeId, nodeType, Sets.newHashSet(), ResourcePath.get("foo"));
            final OnmsNode entity = new OnmsNode();
            entity.setId(nodeId);
            entity.setForeignSource("NODES");
            entity.setForeignId(""+nodeId);
            entity.setLabel(""+nodeId);
            parent.setEntity(entity);
            m_resources.put(parentId, parent);
        }
        OnmsResource resource = m_resources.get(resourceId);
        if (resource == null) {
            resource = new OnmsResource(attr, label, type, Sets.newHashSet(), ResourcePath.get("foo"));
            resource.setParent(parent);
            m_resources.put(resourceId, resource);
        }
        Set<OnmsAttribute> attributes = resource.getAttributes();
        attributes.add(new RrdGraphAttribute(attr, "", newtsResourceId));

        Results<Measurement> results = new Results<>();
        Resource res = new Resource(newtsResourceId);
        Row<Measurement> row = new Row<Measurement>(Timestamp.fromEpochSeconds(0), res);
        Measurement measurement = new Measurement(Timestamp.fromEpochSeconds(0), res, label, 0.0d);
        row.addElement(measurement);
        results.addRow(row);

        if (expect) {
            EasyMock.expect(m_sampleRepository.select(
                    EasyMock.eq(m_context), EasyMock.eq(res), EasyMock.anyObject(), EasyMock.anyObject(), EasyMock.capture(lastCapturedResultDescriptor), EasyMock.anyObject(), EasyMock.anyObject()
            )).andReturn(results);
        }

        final Source source = new Source();
        source.setAggregation("AVERAGE");
        source.setAttribute(attr);
        source.setDataSource(ds);
        source.setLabel(label);
        source.setResourceId(resourceId.toString());
        source.setTransient(false);
        return source;
    }

