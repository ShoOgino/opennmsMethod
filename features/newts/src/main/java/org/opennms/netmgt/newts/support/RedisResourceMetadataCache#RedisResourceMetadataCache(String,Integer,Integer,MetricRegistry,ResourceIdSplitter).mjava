    @Inject
    public RedisResourceMetadataCache(@Named("redis.hostname") String hostname, @Named("redis.port") Integer port, @Named("newts.writer_threads") Integer numWriterThreads, @Named("newtsMetricRegistry") MetricRegistry registry, ResourceIdSplitter resourceIdSplitter) {
        Preconditions.checkNotNull(hostname, " hostname argument");
        Preconditions.checkNotNull(port, "port argument");

        JedisPoolConfig poolConfig = new JedisPoolConfig();
        poolConfig.setMinIdle(numWriterThreads);
        poolConfig.setMaxTotal(numWriterThreads * 4);
        m_pool = new JedisPool(poolConfig, hostname, port);

        Preconditions.checkNotNull(registry, "registry argument");
        registry.register(MetricRegistry.name("cache", "size"),
                new Gauge<Long>() {
                    @Override
                    public Long getValue() {
                        try (Jedis jedis = m_pool.getResource()) {
                            return jedis.dbSize();
                        }
                    }
                });
        registry.register(MetricRegistry.name("cache", "max-size"),
                new Gauge<Long>() {
                    @Override
                    public Long getValue() {
                        return 0L;
                    }
                });

        m_resourceIdSplitter = Preconditions.checkNotNull(resourceIdSplitter, "resourceIdSplitter argument");
    }

