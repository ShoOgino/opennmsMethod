    @Override
    public FetchResults fetch(long start, long end, long step, int maxrows, Long interval, Long heartbeat, List<Source> sources) {
        final LateAggregationParams lag = getLagParams(step, interval, heartbeat);
        final Optional<Timestamp> startTs = Optional.of(Timestamp.fromEpochMillis(start));
        final Optional<Timestamp> endTs = Optional.of(Timestamp.fromEpochMillis(end));
        final Map<String, Object> constants = Maps.newHashMap();

        // Group the sources by resource id to avoid calling the ResourceDao
        // multiple times for the same resource
        Map<String, List<Source>> sourcesByResourceId = sources.stream()
                .collect(Collectors.groupingBy(Source::getResourceId));

        // Lookup the resources in parallel
        Map<OnmsResource, List<Source>> sourcesByResource = sourcesByResourceId.entrySet()
                .parallelStream()
                .collect(Collectors.toMap(
                    e -> {
                        final OnmsResource resource = m_resourceDao.getResourceById(e.getKey());
                        if (resource == null) {
                            LOG.error("No resource with id: {}", e.getKey());
                            throw new IllegalArgumentException("No resource with id: " + e.getKey());
                        }
                        // The attributes are typically lazy loaded, so we trigger the load here
                        // while we're in a parallel context
                        resource.getAttributes();
                        return resource;
                    },
                    e -> e.getValue()
                    ));

        // Now group the sources by Newts Resource ID, which differs from the OpenNMS Resource ID.
        Map<String, List<Source>> sourcesByNewtsResourceId = Maps.newHashMap();
        for (Entry<OnmsResource, List<Source>> entry : sourcesByResource.entrySet()) {
            final OnmsResource resource = entry.getKey();
            for (Source source : entry.getValue()) {
                // Gather the values from strings.properties
                Utils.convertStringAttributesToConstants(source.getLabel(), resource.getStringPropertyAttributes(), constants);

                // Grab the attribute that matches the source
                RrdGraphAttribute rrdGraphAttribute = resource.getRrdGraphAttributes().get(source.getAttribute());

                if (rrdGraphAttribute == null && !Strings.isNullOrEmpty(source.getFallbackAttribute())) {
                    LOG.error("No attribute with name '{}', using fallback-attribute with name '{}'", source.getAttribute(), source.getFallbackAttribute());
                    source.setAttribute(source.getFallbackAttribute());
                    source.setFallbackAttribute(null);
                    rrdGraphAttribute = resource.getRrdGraphAttributes().get(source.getAttribute());
                }

                if (rrdGraphAttribute == null) {
                    LOG.error("No attribute with name: {}", source.getAttribute());
                    return null;
                }

                // The Newts Resource ID is stored in the rrdFile attribute
                String newtsResourceId = rrdGraphAttribute.getRrdRelativePath();
                // Remove the file separator prefix, added by the RrdGraphAttribute class
                if (newtsResourceId.startsWith(File.separator)) {
                    newtsResourceId = newtsResourceId.substring(File.separator.length(), newtsResourceId.length());
                }

                List<Source> listOfSources = sourcesByNewtsResourceId.get(newtsResourceId);
                // Create the list if it doesn't exist
                if (listOfSources == null) {
                    listOfSources = Lists.newLinkedList();
                    sourcesByNewtsResourceId.put(newtsResourceId, listOfSources);
                }
                listOfSources.add(source);
            }
        }

        // The Newts API only allows us to perform a query using a single (Newts) Resource ID,
        // so we perform multiple queries in parallel, and aggregate the results.
        final AtomicReference<long[]> timestamps = new AtomicReference<>();
        final Map<String, double[]> columns = Maps.newConcurrentMap();

        sourcesByNewtsResourceId.entrySet().parallelStream().forEach(entry -> {
            final String newtsResourceId = entry.getKey();
            final List<Source> listOfSources = entry.getValue();

            ResultDescriptor resultDescriptor = new ResultDescriptor(lag.getInterval());
            for (Source source : listOfSources) {
                final String metricName = source.getAttribute();
                final String name = source.getLabel();
                final AggregationFunction fn = toAggregationFunction(source.getAggregation());

                resultDescriptor.datasource(name, metricName, lag.getHeartbeat(), fn);
                resultDescriptor.export(name);
            }

            LOG.debug("Querying Newts for resource id {} with result descriptor: {}", newtsResourceId, resultDescriptor);
            Results<Measurement> results = m_sampleRepository.select(m_context, new Resource(newtsResourceId), startTs, endTs,
                    resultDescriptor, Optional.of(Duration.millis(lag.getStep())));
            Collection<Row<Measurement>> rows = results.getRows();
            LOG.debug("Found {} rows.", rows.size());

            final int N = rows.size();
            final Map<String, double[]> myColumns = Maps.newHashMap();

            timestamps.updateAndGet(existing -> {
                if (existing == null) {
                    // this is the first thread that has returned, build the array of timestamps
                    // the timestamps should bet the same against all result sets
                    final long[] tses = new long[rows.size()];
                    int k=0;
                    for (final Row<Measurement> row : results.getRows()) {
                        tses[k] = row.getTimestamp().asMillis();
                        k++;
                    }
                    return tses;
                }
                return existing;
            });

            int k = 0;
            for (Row<Measurement> row : results.getRows()) {
                for (Measurement measurement : row.getElements()) {
                    double[] column = myColumns.get(measurement.getName());
                    if (column == null) {
                        column = new double[N];
                        myColumns.put(measurement.getName(), column);
                    }
                    column[k] = measurement.getValue();
                }
                k += 1;
            }

            columns.putAll(myColumns);
        });

        FetchResults fetchResults = new FetchResults(timestamps.get(), columns, lag.getStep(), constants);
        LOG.trace("Fetch results: {}", fetchResults);
        return fetchResults;
    }

