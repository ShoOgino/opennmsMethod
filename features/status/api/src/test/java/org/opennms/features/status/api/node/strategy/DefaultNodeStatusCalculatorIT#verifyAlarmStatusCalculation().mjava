    @Test
    @Transactional
    public void verifyAlarmStatusCalculation() {
        final OnmsNode node = databasePopulator.getNode1();
        final NodeStatusCalculatorConfig config = new NodeStatusCalculatorConfig();
        config.setCalculationStrategy(NodeStatusCalculationStrategy.Alarms);

        // No nodeIds
        verifyStatus(6, nodeDao.findAll().stream().collect(Collectors.toMap(n -> n.getId(), n -> OnmsSeverity.NORMAL)), statusCalculator.calculateStatus(config));

        // No alarm exists, status should be normal
        config.setNodeIds(Sets.newHashSet(node.getId()));
        verifyStatus(1, ImmutableMap.of(node.getId(), OnmsSeverity.NORMAL), statusCalculator.calculateStatus(config));

        // Create an alarm and verify status
        OnmsAlarm alarm = createAndPersistAlarm(node, OnmsSeverity.WARNING);
        verifyStatus(1, ImmutableMap.of(node.getId(), OnmsSeverity.WARNING), statusCalculator.calculateStatus(config));

        // Create an alarm for same node and verify
        OnmsAlarm alarm2 = createAndPersistAlarm(node, OnmsSeverity.MINOR);
        verifyStatus(1, ImmutableMap.of(node.getId(), OnmsSeverity.MINOR), statusCalculator.calculateStatus(config));

        // Create an alarm for another node and verify
        createAndPersistAlarm(databasePopulator.getNode2(), OnmsSeverity.CRITICAL);
        verifyStatus(1, ImmutableMap.of(node.getId(), OnmsSeverity.MINOR), statusCalculator.calculateStatus(config));

        // Acknowledge alarms
        alarm2.setAlarmAckTime(new Date());
        alarm2.setAlarmAckUser("ulf");
        alarmDao.saveOrUpdate(alarm2);
        alarmDao.flush();
        verifyStatus(1, ImmutableMap.of(node.getId(), OnmsSeverity.WARNING), statusCalculator.calculateStatus(config));
        alarm.setAlarmAckTime(new Date());
        alarm.setAlarmAckUser("ulf");
        alarmDao.saveOrUpdate(alarm);
        alarmDao.flush();
        verifyStatus(1, ImmutableMap.of(node.getId(), OnmsSeverity.NORMAL), statusCalculator.calculateStatus(config));

        // Include acknowledged alarms
        config.setIncludeAcknowledgedAlarms(true);
        verifyStatus(1, ImmutableMap.of(node.getId(), OnmsSeverity.MINOR), statusCalculator.calculateStatus(config));

        // Apply severity filter
        config.setSeverity(OnmsSeverity.WARNING);
        verifyStatus(0, new HashMap<>(), statusCalculator.calculateStatus(config));
        config.setSeverity(OnmsSeverity.MINOR);
        verifyStatus(1, ImmutableMap.of(node.getId(), OnmsSeverity.MINOR), statusCalculator.calculateStatus(config));
        config.setSeverity(OnmsSeverity.MAJOR);
        verifyStatus(0, new HashMap<>(), statusCalculator.calculateStatus(config));

        // reset severity filter and apply location filter
        config.setSeverity(null);
        config.setLocation(distPollerDao.whoami().getLocation());
        verifyStatus(1, ImmutableMap.of(node.getId(), OnmsSeverity.MINOR), statusCalculator.calculateStatus(config));
        config.setLocation("XXX");
        verifyStatus(0, new HashMap<>(), statusCalculator.calculateStatus(config));
    }

