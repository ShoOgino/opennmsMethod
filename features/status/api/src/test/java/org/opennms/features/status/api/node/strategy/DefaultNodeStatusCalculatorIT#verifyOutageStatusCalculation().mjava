    @Test
    @Transactional
    public void verifyOutageStatusCalculation() {
        final OnmsNode node = databasePopulator.getNode1();
        final OnmsMonitoredService icmpService = node.getIpInterfaceByIpAddress("192.168.1.1").getMonitoredServiceByServiceType("ICMP");
        final OnmsMonitoredService snmpService = node.getIpInterfaceByIpAddress("192.168.1.1").getMonitoredServiceByServiceType("SNMP");
        final Set<Integer> nodeIds = Sets.newHashSet(node.getId());
        final NodeStatusCalculatorConfig config = new NodeStatusCalculatorConfig();
        config.setCalculationStrategy(NodeStatusCalculationStrategy.Outages);

        // No nodeIds
        verifyStatus(6, nodeDao.findAll().stream().collect(Collectors.toMap(n -> n.getId(), n -> OnmsSeverity.NORMAL)), statusCalculator.calculateStatus(config));

        // No outage exist, status should be normal
        config.setNodeIds(nodeIds);
        verifyStatus(1, ImmutableMap.of(node.getId(), OnmsSeverity.NORMAL), statusCalculator.calculateStatus(config));

        // Create an alarm and verify status
        final OnmsOutage outage = createOutage(icmpService, createEvent(node, OnmsSeverity.WARNING));
        saveOrUpdate(outage);
        verifyStatus(1, ImmutableMap.of(node.getId(), OnmsSeverity.WARNING), statusCalculator.calculateStatus(config));

        // Create another outage on same interface and verify
        final OnmsOutage outage2 = createOutage(snmpService, createEvent(node, OnmsSeverity.MINOR));
        saveOrUpdate(outage2);
        verifyStatus(1, ImmutableMap.of(node.getId(), OnmsSeverity.MINOR), statusCalculator.calculateStatus(config));

        // Create another outage on another interface and verify
        final OnmsMonitoredService httpService = node.getIpInterfaceByIpAddress("192.168.1.2").getMonitoredServiceByServiceType("HTTP");
        saveOrUpdate(createOutage(httpService, createEvent(node, OnmsSeverity.MAJOR)));
        verifyStatus(1, ImmutableMap.of(node.getId(), OnmsSeverity.MAJOR), statusCalculator.calculateStatus(config));

        // Create another outage on another node and verify
        saveOrUpdate(createOutage(databasePopulator.getNode2().getPrimaryInterface().getMonitoredServiceByServiceType("ICMP"),
                createEvent(databasePopulator.getNode2(), OnmsSeverity.CRITICAL)));
        verifyStatus(1, ImmutableMap.of(node.getId(), OnmsSeverity.MAJOR), statusCalculator.calculateStatus(config));

        // calculate status for both
        config.setNodeIds(Sets.newHashSet(node.getId(), databasePopulator.getNode2().getId()));
        verifyStatus(
                2,
                ImmutableMap.of(
                        node.getId(), OnmsSeverity.MAJOR,
                        databasePopulator.getNode2().getId(), OnmsSeverity.CRITICAL),
                statusCalculator.calculateStatus(config));

        // Resolve the Warning Outage
        config.setNodeIds(nodeIds);
        outage.setServiceRegainedEvent(createEvent(node, OnmsSeverity.WARNING));
        outage.setIfRegainedService(new Date());
        saveOrUpdate(outage);
        verifyStatus(1, ImmutableMap.of(node.getId(), OnmsSeverity.MAJOR), statusCalculator.calculateStatus(config));

        // Apply severity filter
        config.setSeverity(OnmsSeverity.WARNING);
        verifyStatus(0, new HashMap<>(), statusCalculator.calculateStatus(config));
        config.setSeverity(OnmsSeverity.MINOR);
        verifyStatus(0, new HashMap<>(), statusCalculator.calculateStatus(config));
        config.setSeverity(OnmsSeverity.MAJOR);
        verifyStatus(1, ImmutableMap.of(node.getId(), OnmsSeverity.MAJOR), statusCalculator.calculateStatus(config));
        config.setSeverity(OnmsSeverity.CRITICAL);
        verifyStatus(0, new HashMap<>(), statusCalculator.calculateStatus(config));

        // reset severity filter and apply location filter
        config.setSeverity(null);
        config.setLocation(distPollerDao.whoami().getLocation());
        verifyStatus(1, ImmutableMap.of(node.getId(), OnmsSeverity.MAJOR), statusCalculator.calculateStatus(config));
        config.setLocation("XXX");
        verifyStatus(0, new HashMap<>(), statusCalculator.calculateStatus(config));
    }

