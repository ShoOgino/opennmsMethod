    public List<StatusEntity<T>> getStatus(Q query) {
        final QueryParameters queryParameters = query.getParameters();
        final SeverityFilter filter = query.getSeverityFilter();
        final CriteriaBuilder criteriaBuilder = getCriteriaBuilder(queryParameters);

        // The implementors do not know anything about status/severity,
        // therefore it is not supported to order by severityon dao level.
        if (isSeverityRelatedQuery(query)) {
            criteriaBuilder.offset(null);
            criteriaBuilder.limit(null);

            // no column "severity" exists, clear it to avoid hibernate complaining about it
            if (queryParameters.getOrder().getColumn().equals("severity")) {
                criteriaBuilder.clearOrder();
            }
        }

        // Query and apply filters
        List<StatusEntity<T>> collect = findMatching(query, criteriaBuilder);
        collect = apply(collect, filter);

        // sort manually if required
        if (queryParameters.getOrder() != null && queryParameters.getOrder().getColumn().equals("severity")) {
            Comparator<StatusEntity<T>> comparator = Comparator.comparing(StatusEntity::getStatus);
            if (queryParameters.getOrder().isDesc()) {
                comparator = comparator.reversed();
            }
            collect.sort(comparator);
            collect = subList(collect, queryParameters);
        }

        return collect;
    }

