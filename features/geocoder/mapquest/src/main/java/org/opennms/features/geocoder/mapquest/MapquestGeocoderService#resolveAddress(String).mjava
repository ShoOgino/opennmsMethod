    @Override
    public GeocoderResult resolveAddress(final String address) throws GeocoderConfigurationException {
        configuration.validate();
        LOG.debug("Configuration: {}", configuration.asMap());
        try (HttpClientWrapper clientWrapper = HttpClientWrapper.create().dontReuseConnections()) {
            if(configuration.isUseSystemProxy()) {
                clientWrapper.useSystemProxySettings();
            }
            final String requestUrl = buildURL(configuration.getUrlTemplate(), configuration.getApiKey(), address);
            final HttpUriRequest request = new HttpGet(requestUrl);
            try (CloseableHttpResponse response = clientWrapper.execute(request)) {
                final StatusLine statusLine = response.getStatusLine();
                LOG.trace("Invoking URL {} returned {}:{} => {}", requestUrl, statusLine.getStatusCode(), statusLine.getReasonPhrase(), statusLine.getStatusCode() == 200 ? "OK" : "NOK" );
                if (statusLine.getStatusCode() != 200) {
                    return GeocoderResult.error(String.format("MapQuest returned a non-OK response code: %s: %s",
                            statusLine.getStatusCode(),
                            statusLine.getReasonPhrase())).build();
                }
                final InputStream responseStream = response.getEntity().getContent();
                final JSONTokener jsonTokener = new JSONTokener(responseStream);
                final JSONObject jsonObject = new JSONObject(jsonTokener);
                if (jsonObject.has("results")
                        && jsonObject.getJSONArray("results").length() > 0
                        && jsonObject.getJSONArray("results").getJSONObject(0).has("locations")) {
                    final JSONArray locationResults = jsonObject.getJSONArray("results").getJSONObject(0).getJSONArray("locations");
                    if (locationResults.length() > 0) {
                        LOG.trace("API returned {} of results. If multiple, the first is used.", locationResults.length());
                        final JSONObject location = (JSONObject) locationResults.get(0);
                        if (location.has("latLng")) {
                            final double lat = location.getJSONObject("latLng").getDouble("lat");
                            final double lng = location.getJSONObject("latLng").getDouble("lng");
                            LOG.trace("API returned a result with valid long/lat fields: {}/{}", lng, lat);
                            return GeocoderResult.success(address, lng, lat).build();
                        } else {
                            LOG.trace("API returned a result which does not contain lon/lat fields: {}", location);
                        }
                    } else {
                        LOG.trace("API returned an empty result");
                    }
                }
            }
            LOG.debug("Couldn't resolve coordinates for address {}", address);
            return GeocoderResult.noResult(address).build();
        } catch (IOException e) {
            return GeocoderResult.error(e).build();
        }
    }

