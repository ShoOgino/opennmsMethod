    @Override
    public GeocoderResult resolveAddress(final String address) throws GeocoderConfigurationException {
        configuration.validate();
        LOG.debug("Configuration: {}", configuration.asMap());
        try (HttpClientWrapper clientWrapper = HttpClientWrapper.create().dontReuseConnections()) {
            if (configuration.isUseSystemProxy()) {
                clientWrapper.useSystemProxySettings();
            }
            final String url = buildUrl(configuration.getEmailAddress(), address);
            final HttpUriRequest method = new HttpGet(url);
            if (!Strings.isNullOrEmpty(configuration.getUserAgent())) {
                method.addHeader("User-Agent", configuration.getUserAgent());
            }
            if (!Strings.isNullOrEmpty(configuration.getReferer())) {
                method.addHeader("Referer", configuration.getReferer());
            }

            try (CloseableHttpResponse response = clientWrapper.execute(method)) {
                final StatusLine statusLine = response.getStatusLine();
                LOG.trace("Invoking URL {} returned {}:{} => {}", url, statusLine.getStatusCode(), statusLine.getReasonPhrase(), statusLine.getStatusCode() == 200 ? "OK" : "NOK" );
                if (statusLine.getStatusCode() != 200) {
                    return GeocoderResult.error(String.format("Nominatim returned a non-OK response code: %s: %s",
                            statusLine.getStatusCode(),
                            statusLine.getReasonPhrase())).build();
                }
                final InputStream responseStream = response.getEntity().getContent();
                final JSONTokener tokener = new JSONTokener(responseStream);
                final JSONArray results = new JSONArray(tokener);
                if (results.length() > 0) {
                    LOG.trace("API returned {} of results. If multiple, the first is used.", results.length());
                    final JSONObject result = results.getJSONObject(0);
                    if (result.has("lat") && result.has("lon")) {
                        final Float longitude = result.getFloat("lon");
                        final Float latitude = result.getFloat("lat");
                        LOG.trace("API returned a result with valid long/lat fields: {}/{}", longitude, latitude);
                        return GeocoderResult.success(address, longitude, latitude).build();
                    } else {
                        LOG.trace("API returned a result which does not contain lon/lat fields: {}", result);
                    }
                } else {
                    LOG.trace("API returned an empty result");
                }
                LOG.debug("Couldn't resolve coordinates for address {}", address);
                return GeocoderResult.noResult(address).build();
            }
        } catch (IOException e) {
            return GeocoderResult.error(e).build();
        }
    }

