    @Override
    public synchronized GeocoderResult resolveAddress(final String address) throws GeocoderConfigurationException {
        configuration.validate();
        LOG.debug("Configuration: {}", configuration.asMap());
        final GeoApiContext.Builder builder = new GeoApiContext.Builder()
                .readTimeout(configuration.getTimeout(), TimeUnit.MILLISECONDS)
                .connectTimeout(configuration.getTimeout(), TimeUnit.MILLISECONDS)
                .maxRetries(1);
        if (configuration.isUseSystemProxy()) {
            try {
                final Proxy proxy = selectProxy("https://maps.googleapis.com");
                builder.proxy(proxy);
            } catch (URISyntaxException e) {
                return new GeocoderResult(e);
            }
        }
        if (configuration.isUseEnterpriseCredentials()) {
            builder.enterpriseCredentials(configuration.getClientId(), configuration.getSignature());
        } else {
            builder.apiKey(configuration.getApiKey());
        }
        try {
            final GeoApiContext context = builder.build();
            final GeocodingResult[] results = GeocodingApi.geocode(context, address).await();
            LOG.trace("API returned {} results. If multiple, first is used.", results.length);
            if (results.length > 0 && results[0].geometry != null && results[0].geometry.location != null) {
                final LatLng location = results[0].geometry.location;
                LOG.trace("API returned a result with valid long/lat fields: {}/{}", location.lng, location.lat);
                return new GeocoderResult(new Coordinates(location.lng, location.lat));
            } else {
                LOG.debug("API returned a result, but long/lat fields were missing: {}", results[0]);
            }
            LOG.debug("Couldn't resolve coordinates for address {}", address);
            return new GeocoderResult(new GeocoderException("No results found for address " + address));
        } catch (ApiException e) {
            return new GeocoderResult(e);
        } catch (InterruptedException e) {
            return new GeocoderResult(e);
        } catch (IOException e) {
            return new GeocoderResult(e);
        }
    }

