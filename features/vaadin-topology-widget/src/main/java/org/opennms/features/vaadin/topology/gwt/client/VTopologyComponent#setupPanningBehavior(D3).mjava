    private D3Drag setupPanningBehavior(D3 x) {
		D3Drag d3Pan = D3.getDragBehavior();
		d3Pan.on(D3Events.DRAG_START.event(), new Handler<Object>() {

			public void call(Object t, int index) {
				//TODO: Pan viewport
				
				NativeEvent event = D3.getEvent();
				Element elem = Element.as(event.getEventTarget());
				
//				m_dragObject = null;
//				m_dragObject = new DragObject(null, elem);
				
			}
		});
		
		d3Pan.on(D3Events.DRAG.event(), new Handler<Object>() {

			public void call(Object t, int index) {
				// TODO Auto-generated method stub
//				int deltaX = m_dragObject.getCurrentX() - m_dragObject.getStartX();
//				int deltaY = m_dragObject.getCurrentY() - m_dragObject.getStartY();
//				D3.d3().select("#viewport").attr("transform", "translate(" + deltaX + "," + deltaY + ")");
			}
		});
		
		d3Pan.on(D3Events.DRAG_END.event(), new Handler<Object>() {

			public void call(Object t, int index) {
				m_dragObject = null;
			}
		});
		
    	return d3Pan;
		
	}

