    /**
     * Returns an ordered list of {@code vertex}'s child vertices.
     * If there is no child in position i, then the list will contain
     * {@code null} in position i.  If {@code vertex} has no children
     * then the empty set will be returned.
     * @see edu.uci.ics.jung.graph.Tree#getChildren(java.lang.Object)
     */
    public Collection<V> getChildren(V vertex) 
    {
        if (!containsVertex(vertex)) 
            return null;
        List<E> edges = vertex_data.get(vertex).child_edges;
        if (edges == null)
        	return Collections.emptySet();
        Collection<V> children = new ArrayList<V>(order);
        for (E edge : edges)
            children.add(this.getOpposite(vertex, edge));
        return CollectionUtils.unmodifiableCollection(children);
    }

