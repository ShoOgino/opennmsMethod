    /**
     * Instantiates a new system definition panel.
     *
     * @param dataCollectionConfigDao the OpenNMS Data Collection Configuration DAO
     * @param source the OpenNMS Data Collection SystemDef object
     * @param logger the logger object
     */
    public SystemDefPanel(final DataCollectionConfigDao dataCollectionConfigDao, final DatacollectionGroup source, final Logger logger) {

        if (dataCollectionConfigDao == null)
            throw new RuntimeException("dataCollectionConfigDao cannot be null.");

        if (source == null)
            throw new RuntimeException("source cannot be null.");

        addStyleName("light");

        // Adding all systemDefs already defined on this source
        final List<String> groupNames = new ArrayList<String>();
        for (Group group : source.getGroups()) {
            groupNames.add(group.getName());
        }
        // Adding all defined systemDefs
        groupNames.addAll(dataCollectionConfigDao.getAvailableMibGroups());

        systemDefTable = new SystemDefTable(source.getSystemDefs());

        final SystemDefForm systemDefForm = new SystemDefForm(groupNames);
        systemDefForm.setVisible(false);

        final EditorToolbar bottomToolbar = new EditorToolbar() {
            @Override
            public void save() {
                SystemDef systemDef = systemDefForm.getSystemDef();
                logger.info("SNMP SystemDef " + systemDef.getName() + " has been " + (isNew ? "created." : "updated."));
                try {
                    systemDefForm.commit();
                    systemDefForm.setReadOnly(true);
                    systemDefTable.refreshRowCache();
                } catch (CommitException e) {
                    String msg = "Can't save the changes: " + e.getMessage();
                    logger.error(msg);
                    Notification.show(msg, Notification.Type.ERROR_MESSAGE);
                }
            }
            @Override
            public void delete() {
                Object systemDefId = systemDefTable.getValue();
                if (systemDefId != null) {
                    SystemDef systemDef = systemDefTable.getSystemDef(systemDefId);
                    logger.info("SNMP SystemDef " + systemDef.getName() + " has been removed.");
                    systemDefTable.select(null);
                    systemDefTable.removeItem(systemDefId);
                    systemDefTable.refreshRowCache();
                }
            }
            @Override
            public void edit() {
                systemDefForm.setReadOnly(false);
            }
            @Override
            public void cancel() {
                systemDefForm.discard();
                systemDefForm.setReadOnly(true);
            }
        };
        bottomToolbar.setVisible(false);

        systemDefTable.addValueChangeListener(new Property.ValueChangeListener() {
            @Override
            public void valueChange(ValueChangeEvent event) {
                Object systemDefId = systemDefTable.getValue();
                if (systemDefId != null) {
                    systemDefForm.setSystemDef(systemDefTable.getSystemDef(systemDefId));
                }
                systemDefForm.setReadOnly(true);
                systemDefForm.setVisible(systemDefId != null);
                bottomToolbar.setReadOnly(true);
                bottomToolbar.setVisible(systemDefId != null);
            }
        });   

        final Button add = new Button("Add SNMP SystemDef", new Button.ClickListener() {
            @Override
            public void buttonClick(ClickEvent event) {
                systemDefTable.addSystemDef(systemDefForm.createBasicSystemDef());
                systemDefForm.setReadOnly(false);
                bottomToolbar.setReadOnly(false);
                setIsNew(true);
            }
        });

        final VerticalLayout mainLayout = new VerticalLayout();
        mainLayout.setSpacing(true);
        mainLayout.setMargin(true);
        mainLayout.addComponent(systemDefTable);
        mainLayout.addComponent(add);
        mainLayout.addComponent(systemDefForm);
        mainLayout.addComponent(bottomToolbar);
        mainLayout.setComponentAlignment(add, Alignment.MIDDLE_RIGHT);
        setContent(mainLayout);
    }

