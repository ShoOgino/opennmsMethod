    /**
     * Initialize the MIB tree.
     *
     * @param logger the logger
     */
    private void initMibTree(final Logger logger) {
        File[] folders = new File[] { MIBS_COMPILED_DIR, MIBS_PENDING_DIR };
        for (File folder : folders) {
            addTreeItem(folder.getName(), null);
        }
        for (File folder : folders) {
            String[] files = folder.list();
            if (files == null) continue;
            for (String file : files) {
                addTreeItem(file, folder.getName());
            }
        }

        mibsTree.setContainerDataSource(mibsContainer);
        mibsTree.expandItemsRecursively(COMPILED);
        mibsTree.expandItemsRecursively(PENDING);

        mibsTree.addActionHandler(new Action.Handler() {

            @Override
            public Action[] getActions(Object target, Object sender) {
                if (target == null) {
                    return new Action[] {};
                }
                Object parent = mibsContainer.getParent(target);
                if (parent == null) {
                    return new Action[] {};
                }
                if (parent.equals(COMPILED)) {
                    return new Action[] { ACTION_EVENTS, ACTION_COLLECT, ACTION_VIEW, ACTION_DELETE };
                } else {
                    return new Action[] { ACTION_EDIT, ACTION_DELETE, ACTION_COMPILE };
                }
            }

            @Override
            public void handleAction(Action action, Object sender, Object target) {
                final String fileName = (String) target;
                if (action == ACTION_DELETE) {
                    MessageBox mb = new MessageBox(getApplication().getMainWindow(),
                                                   "Are you sure?",
                                                   MessageBox.Icon.QUESTION,
                                                   "Do you really want to delete " + fileName + "?<br/>This cannot be undone.",
                                                   new MessageBox.ButtonConfig(MessageBox.ButtonType.YES, "Yes"),
                                                   new MessageBox.ButtonConfig(MessageBox.ButtonType.NO, "No"));
                    mb.addStyleName(Runo.WINDOW_DIALOG);
                    mb.show(new EventListener() {
                        @Override
                        public void buttonClicked(ButtonType buttonType) {
                            if (buttonType == MessageBox.ButtonType.YES) {
                                String source = mibsTree.getParent(fileName).toString();
                                File file = new File(PENDING.equals(source) ? MIBS_PENDING_DIR : MIBS_COMPILED_DIR, fileName);
                                if (file.delete()) {
                                    mibsContainer.removeItem(fileName);
                                    logger.info("MIB " + file + " has been successfully removed.");
                                } else {
                                    getApplication().getMainWindow().showNotification("Can't delete " + file);
                                }
                            }
                        }
                    });
                }
                if (action == ACTION_EDIT) {
                    Window w = new FileEditorWindow(new File(MIBS_PENDING_DIR, fileName), logger, false);
                    getApplication().getMainWindow().addWindow(w);
                }
                if (action == ACTION_VIEW) {
                    Window w = new FileEditorWindow(new File(MIBS_COMPILED_DIR, fileName), logger, true);
                    getApplication().getMainWindow().addWindow(w);
                }
                if (action == ACTION_COMPILE) {
                    if (parseMib(logger, new File(MIBS_PENDING_DIR, fileName))) {
                        String mibName = fileName;
                        if (!fileName.contains(mibParser.getMibName())) {
                            mibName = mibParser.getMibName() + ".mib";
                            logger.info("Renaming file " + fileName + " to " + mibName);
                        }
                        mibsTree.removeItem(target);
                        addTreeItem(mibName, COMPILED);
                        File file = new File(MIBS_PENDING_DIR, fileName);
                        file.renameTo(new File(MIBS_COMPILED_DIR, mibName));
                    }
                }
                if (action == ACTION_EVENTS) {
                    generateEvents(logger, fileName);
                }
                if (action == ACTION_COLLECT) {
                    generateDataCollection(logger, fileName);
                }
            }
        });
    }

