    /**
     * Instantiates a new event form.
     */
    public EventForm() {
        setCaption("Event Detail");
        eventLayout.setSpacing(true);

        eventUei.setRequired(true);
        eventUei.setWidth("100%");
        eventLayout.addComponent(eventUei);

        eventLabel.setRequired(true);
        eventLabel.setWidth("100%");
        eventLayout.addComponent(eventLabel);

        eventDescr.setWidth("100%");
        eventDescr.setRows(10);
        eventDescr.setRequired(true);
        eventDescr.setNullRepresentation("");
        eventLayout.addComponent(eventDescr);

        logMsgDest.addItem("logndisplay");
        logMsgDest.addItem("logonly");
        logMsgDest.addItem("suppress");
        logMsgDest.addItem("donotpersist");
        logMsgDest.addItem("discardtraps");
        logMsgDest.setNullSelectionAllowed(false);
        logMsgDest.setRequired(true);
        eventLayout.addComponent(logMsgDest);

        logMsgContent.setWidth("100%");
        logMsgContent.setRows(10);
        logMsgContent.setRequired(true);
        logMsgContent.setNullRepresentation("");
        eventLayout.addComponent(logMsgContent);

        hasAlarmData.setWidth("100%");
        hasAlarmData.addValueChangeListener(new Property.ValueChangeListener() {
            @Override
            public void valueChange(Property.ValueChangeEvent event) {
                enableAlarmData(hasAlarmData.getValue());
            }
        });
        eventLayout.addComponent(hasAlarmData);

        alarmDataAlarmType.addItem(Integer.valueOf(1));
        alarmDataAlarmType.addItem(Integer.valueOf(2));
        alarmDataAlarmType.addItem(Integer.valueOf(3));
        alarmDataAlarmType.setDescription("<b>1</b> to be a problem that has a possible resolution, alarm-type set to <b>2</b> to be a resolution event, and alarm-type set to <b>3</b> for events that have no possible resolution");
        alarmDataAlarmType.setNullSelectionAllowed(false);
        alarmDataAlarmType.setVisible(false);
        eventLayout.addComponent(alarmDataAlarmType);

        alarmDataAutoClean.setWidth("100%");
        alarmDataAutoClean.setVisible(false);
        eventLayout.addComponent(alarmDataAutoClean);

        alarmDataReductionKey.setWidth("100%");
        alarmDataReductionKey.setNullRepresentation("");
        alarmDataReductionKey.setVisible(false);
        eventLayout.addComponent(alarmDataReductionKey);

        alarmDataClearKey.setWidth("100%");
        alarmDataClearKey.setNullRepresentation("");
        alarmDataClearKey.setVisible(false);
        eventLayout.addComponent(alarmDataClearKey);

        for (String sev : OnmsSeverity.names()) {
            eventSeverity.addItem(sev.substring(0, 1).toUpperCase() + sev.substring(1).toLowerCase());
        }
        eventSeverity.setNullSelectionAllowed(false);
        eventSeverity.setRequired(true);
        eventLayout.addComponent(eventSeverity);

        eventDescr.setWidth("100%");
        eventDescr.setRows(10);
        eventDescr.setRequired(true);
        eventDescr.setNullRepresentation("");
        eventLayout.addComponent(eventDescr);

        eventOperInstruct.setWidth("100%");
        eventOperInstruct.setRows(10);
        eventOperInstruct.setNullRepresentation("");
        eventLayout.addComponent(eventOperInstruct);

        eventLayout.addComponent(maskElements);
        eventLayout.addComponent(maskVarbinds);
        eventLayout.addComponent(varbindsDecodes);

        setEvent(createBasicEvent());

        eventEditor.bind(eventUei, "uei");
        eventEditor.bind(eventLabel, "eventLabel");
        eventEditor.bind(eventDescr, "descr");
        eventEditor.bind(logMsgDest, "logmsg.dest");
        eventEditor.bind(logMsgContent, "logmsg.content");
        eventEditor.bind(eventSeverity, "severity");
        eventEditor.bind(eventOperInstruct, "operinstruct");
        eventEditor.bind(maskElements, "mask.maskelementCollection");
        eventEditor.bind(maskVarbinds, "mask.varbindCollection");
        eventEditor.bind(varbindsDecodes, "varbindsdecodeCollection");

        setCompositionRoot(eventLayout);
    }

