    /**
     * Adds the dependency to the queue.
     *
     * @param queue the queue
     * @param mibDirectoryFiles the mib directory files
     * @return true, if successful
     */
    private boolean addDependencyToQueue(final List<URL> queue, final Map<String, File> mibDirectoryFiles) {
        final List<String> dependencies = new ArrayList<String>(missingDependencies);
        boolean ok = true;
        for (String dependency : dependencies) {
            boolean found = false;
            for (String suffix : MIB_SUFFIXES) {
                final String fileName = (dependency+suffix).toLowerCase();
                if (mibDirectoryFiles.containsKey(fileName)) {
                    File f = mibDirectoryFiles.get(fileName);
                    LOG.debug("Checking dependency file {}", f.getAbsolutePath());
                    if (f.exists()) {
                        LOG.info("Adding dependency file {}", f.getAbsolutePath());
                        addFileToQueue(queue, f);
                        missingDependencies.remove(dependency);
                        found = true;
                        break;
                    }
                }
                LOG.debug("Dependency file {} doesn't exist", fileName);
            }
            if (!found) {
                LOG.warn("Couldn't find dependency {} on {}", dependency, mibDirectory);
                ok = false;
            }
        }
        return ok;
    }

