    /**
     * Instantiates a new resource type panel.
     *
     * @param dataCollectionConfigDao the OpenNMS Data Collection Configuration DAO
     * @param source the OpenNMS Data Collection ResourceType object
     * @param logger the logger object
     */
    public ResourceTypePanel(final DataCollectionConfigDao dataCollectionConfigDao, final DatacollectionGroup source, final Logger logger) {

        if (dataCollectionConfigDao == null) {
            throw new RuntimeException("dataCollectionConfigDao cannot be null.");
        }

        if (source == null) {
            throw new RuntimeException("source cannot be null.");
        }

        addStyleName("light");

        resourceTypeTable = new ResourceTypeTable(source.getResourceTypes());

        final ResourceTypeForm resourceTypeForm = new ResourceTypeForm();
        resourceTypeForm.setVisible(false);

        final EditorToolbar bottomToolbar = new EditorToolbar() {
            @Override
            public boolean save() {
                ResourceType resourceType = resourceTypeForm.getResourceType();
                if (!isNew && !resourceType.getName().equals(resourceTypeForm.getResourceTypeName())) {
                    Set<String> groups = getParentGroups(dataCollectionConfigDao, resourceType.getName());
                    if (!groups.isEmpty()) {
                        final String msg = "The resourceType cannot be renamed because it is being referenced by:\n" + groups.toString();
                        Notification.show(msg, Notification.Type.WARNING_MESSAGE);
                        return false;
                    }
                }
                logger.info("Resource Type " + resourceType.getName() + " has been " + (isNew ? "created." : "updated."));
                try {
                    resourceTypeForm.commit();
                    resourceTypeForm.setReadOnly(true);
                    resourceTypeTable.refreshRowCache();
                    return true;
                } catch (CommitException e) {
                    String msg = "Can't save the changes: " + e.getMessage();
                    logger.error(msg);
                    Notification.show(msg, Notification.Type.ERROR_MESSAGE);
                    return false;
                }
            }
            @Override
            public boolean delete() {
                Object resourceTypeId = resourceTypeTable.getValue();
                if (resourceTypeId != null) {
                    ResourceType resourceType = resourceTypeTable.getResourceType(resourceTypeId);
                    Set<String> groups = getParentGroups(dataCollectionConfigDao, resourceType.getName());
                    if (!groups.isEmpty()) {
                        final String msg = "The resourceType cannot be deleted because it is being referenced by:\n" + groups.toString();
                        Notification.show(msg, Notification.Type.WARNING_MESSAGE);
                        return false;
                    }
                    logger.info("SNMP ResourceType " + resourceType.getName() + " has been removed.");
                    resourceTypeTable.select(null);
                    resourceTypeTable.removeItem(resourceTypeId);
                    resourceTypeTable.refreshRowCache();
                }
                return true;
            }
            @Override
            public boolean edit() {
                resourceTypeForm.setReadOnly(false);
                return true;
            }
            @Override
            public boolean cancel() {
                resourceTypeForm.discard();
                resourceTypeForm.setReadOnly(true);
                return true;
            }
        };
        bottomToolbar.setVisible(false);

        resourceTypeTable.addValueChangeListener(new Property.ValueChangeListener() {
            @Override
            public void valueChange(ValueChangeEvent event) {
                if (resourceTypeForm.isVisible() && !resourceTypeForm.isReadOnly()) {
                    resourceTypeTable.select(selectedResourceTypeId);
                    Notification.show("A resource type seems to be being edited.\nPlease save or cancel your current changes.", Notification.Type.WARNING_MESSAGE);
                } else {
                    Object resourceTypeId = resourceTypeTable.getValue();
                    if (resourceTypeId != null) {
                        selectedResourceTypeId = resourceTypeId;
                        resourceTypeForm.setResourceType(resourceTypeTable.getResourceType(resourceTypeId));
                    }
                    resourceTypeForm.setReadOnly(true);
                    resourceTypeForm.setVisible(resourceTypeId != null);
                    bottomToolbar.setReadOnly(true);
                    bottomToolbar.setVisible(resourceTypeId != null);
                }
            }
        });   

        final Button add = new Button("Add Resource Type", new Button.ClickListener() {
            @Override
            public void buttonClick(ClickEvent event) {
                resourceTypeTable.addResourceType(resourceTypeForm.createBasicResourceType());
                resourceTypeForm.setReadOnly(false);
                bottomToolbar.setReadOnly(false);
                setIsNew(true);
            }
        });

        final VerticalLayout mainLayout = new VerticalLayout();
        mainLayout.setSpacing(true);
        mainLayout.setMargin(true);
        mainLayout.addComponent(resourceTypeTable);
        mainLayout.addComponent(add);
        mainLayout.addComponent(resourceTypeForm);
        mainLayout.addComponent(bottomToolbar);
        mainLayout.setComponentAlignment(add, Alignment.MIDDLE_RIGHT);
        setContent(mainLayout);
    }

