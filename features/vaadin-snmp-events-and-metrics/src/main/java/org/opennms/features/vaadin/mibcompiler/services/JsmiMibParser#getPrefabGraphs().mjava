    /* (non-Javadoc)
     * @see org.opennms.features.vaadin.mibcompiler.api.MibParser#getPrefabGraphs()
     */
    @Override
    public List<PrefabGraph> getPrefabGraphs() {
        if (module == null) {
            return null;
        }
        List<PrefabGraph> graphs = new ArrayList<PrefabGraph>();
        LOG.info("Generating graph templates for {}", module.getId());
        NameCutter cutter = new NameCutter();
        try {
            for (SmiVariable v : module.getVariables()) {
                String groupName = getGroupName(v);
                String resourceType = getResourceType(v);
                if (resourceType == null)
                    resourceType = "nodeSnmp";
                String typeName = getMetricType(v.getType().getPrimitiveType());
                if (v.getId().contains("Index")) { // Treat SNMP Indexes as strings.
                    typeName = "string";
                }
                int order = 1;
                if (typeName != null && !typeName.toLowerCase().contains("string")) {
                    String name = groupName + '.' + v.getId();
                    String alias = cutter.trimByCamelCase(v.getId(), 19); // RRDtool/JRobin DS size restriction.
                    String descr = v.getDescription().replaceAll("[\n\r]", "").replaceAll("\\s+", " ");
                    StringBuffer sb = new StringBuffer();
                    sb.append("--title=\"").append(v.getId()).append("\" \\\n");
                    sb.append(" DEF:var={rrd1}:").append(alias).append(":AVERAGE \\\n");
                    sb.append(" LINE1:var#0000ff:\"").append(v.getId()).append("\" \\\n");
                    sb.append(" GPRINT:var:AVERAGE:\"Avg\\\\: %8.2lf %s\" \\\n");
                    sb.append(" GPRINT:var:MIN:\"Min\\\\: %8.2lf %s\" \\\n");
                    sb.append(" GPRINT:var:MAX:\"Max\\\\: %8.2lf %s\\\\n\"");
                    sb.append("\n\n");
                    PrefabGraph graph = new PrefabGraph(name, descr, new String[] { alias }, sb.toString(), new String[0], new String[0], order++, new String[] { resourceType }, descr, null, null, new String[0]);
                    graphs.add(graph);
                }
            }
        } catch (Throwable e) {
            String errors = e.getMessage();
            if (errors == null || errors.trim().equals(""))
                errors = "An unknown error accured when generating graph templates from the MIB " + module.getId();
            LOG.error("Graph templates parsing error: {}", errors, e);
            errorHandler.addError(errors);
            return null;
        }
        return graphs;
    }

