    /**
     * Instantiates a new SNMP collection panel.
     *
     * @param dataCollectionConfigDao the data collection configuration DAO
     * @param logger the logger
     */
    public SnmpCollectionPanel(final DataCollectionConfigDao dataCollectionConfigDao, final Logger logger) {
        setCaption("SNMP Collections");
        addStyleName("light");

        final SnmpCollectionForm form = new SnmpCollectionForm(dataCollectionConfigDao) {
            @Override
            public void saveSnmpCollection(SnmpCollection snmpCollection) {
                if (isNew) {
                    table.addSnmpCollection(snmpCollection);
                    logger.info("SNMP Collection " + snmpCollection.getName() + " has been created.");
                } else {
                    logger.info("SNMP Collection " + snmpCollection.getName() + " has been updated.");
                }
                table.refreshRowCache();
                saveSnmpCollections(dataCollectionConfigDao, logger);
            }
            @Override
            public void deleteSnmpCollection(SnmpCollection snmpCollection) {
                logger.info("SNMP Collection " + snmpCollection.getName() + " has been removed.");
                table.select(null);
                table.removeItem(snmpCollection.getName());
                table.refreshRowCache();
                saveSnmpCollections(dataCollectionConfigDao, logger);
            }
        };

        table = new SnmpCollectionTable(dataCollectionConfigDao) {
            @Override
            public void updateExternalSource(BeanItem<SnmpCollection> item) {
                form.setItemDataSource(item, Arrays.asList(SnmpCollectionForm.FORM_ITEMS));
                form.setVisible(true);
                form.setReadOnly(true);
                setIsNew(false);
            }
        };

        final Button add = new Button("Add SNMP Collection", new Button.ClickListener() {
            @Override
            public void buttonClick(Button.ClickEvent event) {
                SnmpCollection collection = new SnmpCollection();
                collection.setName("New Collection");
                collection.setSnmpStorageFlag("select");
                Rrd rrd = new Rrd();
                rrd.setStep(300);
                rrd.addRra("RRA:AVERAGE:0.5:1:2016");
                rrd.addRra("RRA:AVERAGE:0.5:12:1488");
                rrd.addRra("RRA:AVERAGE:0.5:288:366");
                rrd.addRra("RRA:MAX:0.5:288:366");
                rrd.addRra("RRA:MIN:0.5:288:366");
                collection.setRrd(rrd);
                table.updateExternalSource(new BeanItem<SnmpCollection>(collection));
                form.setReadOnly(false);
                setIsNew(true);
            }
        });

        final Button refresh = new Button("Refresh SNMP Collections", new Button.ClickListener() {
            @Override
            public void buttonClick(Button.ClickEvent event) {
                ConfirmDialog.show(getUI(),
                                   "Are you sure?",
                                   "By doing this all unsafed changes on the SNMP collection will be lost.",
                                   "Yes",
                                   "No",
                                   new ConfirmDialog.Listener() {
                    public void onClose(ConfirmDialog dialog) {
                        if (dialog.isConfirmed()) {
                            table.refreshSnmpCollections();
                            table.select(null);
                            form.setVisible(false);
                        }
                    }
                });
            }
        });

        final HorizontalLayout toolbar = new HorizontalLayout();
        toolbar.addComponent(add);
        toolbar.addComponent(refresh);

        setSpacing(true);
        setMargin(true);
        addComponent(table);
        addComponent(toolbar);
        addComponent(form);
        setComponentAlignment(toolbar, Alignment.MIDDLE_RIGHT);
    }

