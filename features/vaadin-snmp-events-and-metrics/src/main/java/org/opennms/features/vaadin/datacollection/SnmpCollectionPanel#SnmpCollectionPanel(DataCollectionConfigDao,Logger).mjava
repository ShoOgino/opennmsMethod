    /**
     * Instantiates a new SNMP collection panel.
     *
     * @param dataCollectionConfigDao the OpenNMS data collection configuration DAO
     * @param logger the logger
     */
    public SnmpCollectionPanel(final DataCollectionConfigDao dataCollectionConfigDao, final Logger logger) {

        if (dataCollectionConfigDao == null)
            throw new RuntimeException("dataCollectionConfigDao cannot be null.");

        this.dataCollectionConfigDao = dataCollectionConfigDao;

        setCaption("SNMP Collections");
        addStyleName("light");

        final List<SnmpCollection> snmpCollections = dataCollectionConfigDao.getRootDataCollection().getSnmpCollections();
        final SnmpCollectionTable snmpCollectionTable = new SnmpCollectionTable(snmpCollections);

        final SnmpCollectionForm snmpCollectionForm = new SnmpCollectionForm(dataCollectionConfigDao);
        snmpCollectionForm.setVisible(false);

        final EditorToolbar bottomToolbar = new EditorToolbar() {
            @Override
            public void save() {
                SnmpCollection snmpCollection = snmpCollectionForm.getSnmpCollection();
                logger.info("SNMP Collection " + snmpCollection.getName() + " has been " + (isNew ? "created." : "updated."));
                try {
                    snmpCollectionForm.getFieldGroup().commit();
                    snmpCollectionForm.setReadOnly(true);
                    snmpCollectionTable.refreshRowCache();
                    saveSnmpCollections(snmpCollectionTable.getSnmpCollections(), logger);
                } catch (CommitException e) {
                    String msg = "Can't save the changes: " + e.getMessage();
                    logger.error(msg);
                    Notification.show(msg, Notification.Type.ERROR_MESSAGE);
                }
            }
            @Override
            public void delete() {
                Object snmpCollectionId = snmpCollectionTable.getValue();
                if (snmpCollectionId != null) {
                    SnmpCollection snmpCollection = snmpCollectionTable.getSnmpCollection(snmpCollectionId);
                    logger.info("SNMP Collection " + snmpCollection.getName() + " has been removed.");
                    snmpCollectionTable.select(null);
                    snmpCollectionTable.removeItem(snmpCollectionId);
                    snmpCollectionTable.refreshRowCache();
                    saveSnmpCollections(snmpCollectionTable.getSnmpCollections(), logger);
                }
            }
            @Override
            public void edit() {
                snmpCollectionForm.setReadOnly(false);
            }
            @Override
            public void cancel() {
                snmpCollectionForm.getFieldGroup().discard();
                snmpCollectionForm.setReadOnly(true);
            }
        };
        bottomToolbar.setVisible(false);

        snmpCollectionTable.addValueChangeListener(new Property.ValueChangeListener() {
            @Override
            public void valueChange(ValueChangeEvent event) {
                Object snmpCollectionId = snmpCollectionTable.getValue();
                if (snmpCollectionId != null) {
                    snmpCollectionForm.setSnmpCollection(snmpCollectionTable.getSnmpCollection(snmpCollectionId));
                }
                snmpCollectionForm.setReadOnly(true);
                snmpCollectionForm.setVisible(snmpCollectionId != null);
                bottomToolbar.setReadOnly(true);
                bottomToolbar.setVisible(snmpCollectionId != null);
            }
        });   

        final Button add = new Button("Add SNMP Collection", new Button.ClickListener() {
            @Override
            public void buttonClick(ClickEvent event) {
                snmpCollectionTable.addSnmpCollection(snmpCollectionForm.createBasicSnmpCollection());
                snmpCollectionForm.setReadOnly(false);
                bottomToolbar.setReadOnly(false);
                setIsNew(true);
            }
        });

        final Button refresh = new Button("Refresh SNMP Collections", new Button.ClickListener() {
            @Override
            public void buttonClick(Button.ClickEvent event) {
                ConfirmDialog.show(getUI(),
                                   "Are you sure?",
                                   "By doing this all unsaved changes on the SNMP collection will be lost.",
                                   "Yes",
                                   "No",
                                   new ConfirmDialog.Listener() {
                    public void onClose(ConfirmDialog dialog) {
                        if (dialog.isConfirmed()) {
                            final List<SnmpCollection> snmpCollections = dataCollectionConfigDao.getRootDataCollection().getSnmpCollections();
                            snmpCollectionTable.setSnmpCollections(snmpCollections);
                            snmpCollectionTable.select(null);
                            snmpCollectionForm.setVisible(false);
                        }
                    }
                });
            }
        });

        final HorizontalLayout tableToolbar = new HorizontalLayout();
        tableToolbar.addComponent(add);
        tableToolbar.addComponent(refresh);

        final VerticalLayout mainLayout = new VerticalLayout();
        mainLayout.setSpacing(true);
        mainLayout.setMargin(true);
        mainLayout.addComponent(snmpCollectionTable);
        mainLayout.addComponent(tableToolbar);
        mainLayout.addComponent(snmpCollectionForm);
        mainLayout.addComponent(bottomToolbar);
        mainLayout.setComponentAlignment(tableToolbar, Alignment.MIDDLE_RIGHT);
        setContent(mainLayout);
    }

