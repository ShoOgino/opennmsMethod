    /**
     * Save file.
     *
     * @param file the file
     * @param events the events
     * @param logger the logger
     */
    private void saveFile(final File file, final Events events, final Logger logger) {
        try {
            logger.info("Saving XML data into " + file);
            // Save the XML of the new events
            saveEvents(events, file);
            // Add a reference to the new file into eventconf.xml if there are events
            String fileName = file.getAbsolutePath().replaceFirst(".*\\/events\\/(.*)", "events/$1");
            final Events rootEvents = eventConfDao.getRootEvents();
            final File rootFile = ConfigFileConstants.getFile(ConfigFileConstants.EVENT_CONF_FILE_NAME);
            if (events.getEventCount() > 0) {
                if (!rootEvents.getEventFileCollection().contains(fileName)) {
                    logger.info("Adding a reference to " + fileName + " inside eventconf.xml.");
                    rootEvents.getEventFileCollection().add(0, fileName);
                    saveEvents(rootEvents, rootFile);
                }
            } else {
                // If a reference to an empty events file exist, it should be removed.
                if (rootEvents.getEventFileCollection().contains(fileName)) {
                    logger.info("Removing a reference to " + fileName + " inside eventconf.xml because there are no events.");
                    rootEvents.getEventFileCollection().remove(fileName);
                    saveEvents(rootEvents, rootFile);
                }
            }
            EventBuilder eb = new EventBuilder(EventConstants.EVENTSCONFIG_CHANGED_EVENT_UEI, "WebUI");
            eventProxy.send(eb.getEvent());
            logger.info("The event's configuration reload operation is being performed.");
            success();
        } catch (Exception e) {
            logger.error(e.getMessage());
            failure();
        }
    }

