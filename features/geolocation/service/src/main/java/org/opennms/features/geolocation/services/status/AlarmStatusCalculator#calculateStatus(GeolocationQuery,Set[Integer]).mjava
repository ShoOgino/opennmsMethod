    @Override
    public Status calculateStatus(GeolocationQuery query, Set<Integer> nodeIds) {
        final List<String> parameterNames = Lists.newArrayList("nodeIds", "severity");
        final List<Object> parameterValues = Lists.newArrayList(nodeIds, Utils.getSeverity(query));

        final StringBuilder hql = new StringBuilder();
        hql.append("SELECT node.id, max(alarm.severity), count(alarm.id), count(alarm.alarmAckTime) ");
        hql.append("FROM OnmsAlarm AS alarm ");
        hql.append("LEFT JOIN alarm.node AS node ");
        hql.append("WHERE node.id IN (:nodeIds) ");
        hql.append("AND alarm.severity >= :severity ");
        if (!query.isIncludeAcknowledgedAlarms()) {
            hql.append("AND alarm.alarmAckTime is null ");
        }
        if(query.getLocation() != null) {
            hql.append("AND node.location.locationName = :nodeLocation ");
            parameterNames.add("nodeLocation");
            parameterValues.add(query.getLocation());
        }
        hql.append("GROUP BY node.id");

        final List<Object[]> rows = genericPersistenceAccessor.findUsingNamedParameters(
                hql.toString(),
                parameterNames.toArray(new String[parameterNames.size()]),
                parameterValues.toArray());
        final Status status = new Status();
        for(Object[] row : rows) {
            status.add((int) row[0], (OnmsSeverity) row[1], (long) row[2], (long) row[3]);
        }
        return status;
    }

