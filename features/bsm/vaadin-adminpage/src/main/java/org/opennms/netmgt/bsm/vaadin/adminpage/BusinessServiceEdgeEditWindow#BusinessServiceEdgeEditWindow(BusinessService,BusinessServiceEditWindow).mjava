    /**
     * Constructor
     *
     * @param businessService           the Business Service DTO instance to be configured
     * @param businessServiceEditWindow the parent main layout
     */
    public BusinessServiceEdgeEditWindow(final BusinessService businessService,
                                         final BusinessServiceEditWindow businessServiceEditWindow) {
        super("Business Service Edge Edit");

        this.m_businessServiceEditWindow = businessServiceEditWindow;

        /**
         * query for IP services...
         */
        m_ipServicesContainer.setBeanIdProperty("id");
        m_ipServicesContainer.addAll(m_businessServiceEditWindow.getBusinessServiceManager().getAllIpServices());

        /**
         * ...and query for Business Services. Only add the Business Services that will not result in a loop...
         */
        m_businessServicesContainer.setBeanIdProperty("id");

        if (Objects.isNull(businessService) || Objects.isNull(businessService.getId())) {
            m_businessServicesContainer.addAll(m_businessServiceEditWindow.getBusinessServiceManager().getAllBusinessServices());
        } else {
            m_businessServicesContainer.addAll(m_businessServiceEditWindow.getBusinessServiceManager().getFeasibleChildServices(businessService));
        }


        /**
         * Basic window setup
         */
        setModal(true);
        setClosable(true);
        setResizable(false);
        setWidth(50, Unit.PERCENTAGE);
        setHeight(85, Unit.PERCENTAGE);

        /**
         * Creating the root layout...
         */
        final VerticalLayout rootLayout = new VerticalLayout();
        rootLayout.setSpacing(true);
        rootLayout.setMargin(false);
        rootLayout.setSizeFull();

        /**
         * ...and the nested layout
         */
        final FormLayout formLayout = new FormLayout();
        formLayout.setSpacing(true);
        formLayout.setMargin(true);
        formLayout.setSizeFull();

        /**
         * type selector box
         */
        m_typeSelect = new NativeSelect("Type");
        m_typeSelect.setMultiSelect(false);
        m_typeSelect.setNewItemsAllowed(false);
        m_typeSelect.setNullSelectionAllowed(false);
        m_typeSelect.setRequired(true);
        m_typeSelect.addItem(Edge.Type.CHILD_SERVICE);
        m_typeSelect.setItemCaption(Edge.Type.CHILD_SERVICE, "Child Service");
        m_typeSelect.addItem(Edge.Type.IP_SERVICE);
        m_typeSelect.setItemCaption(Edge.Type.IP_SERVICE, "IP Service");
        m_typeSelect.addItem(Edge.Type.REDUCTION_KEY);
        m_typeSelect.setItemCaption(Edge.Type.REDUCTION_KEY, "Reduction Key");
        m_typeSelect.setWidth(98.0f, Unit.PERCENTAGE);
        formLayout.addComponent(m_typeSelect);

        /**
         * child service list
         */
        m_childServiceComponent = new ListSelect("Child Service");
        m_childServiceComponent.setMultiSelect(false);
        m_childServiceComponent.setNewItemsAllowed(false);
        m_childServiceComponent.setNullSelectionAllowed(false);
        m_childServiceComponent.setWidth(100.0f, Unit.PERCENTAGE);
        m_childServiceComponent.setRows(20);
        m_childServiceComponent.setVisible(false);
        m_childServiceComponent.setContainerDataSource(m_businessServicesContainer);
        formLayout.addComponent(m_childServiceComponent);

        /**
         * ip service list
         */
        m_ipServiceComponent = new ListSelect("IP Service");
        m_ipServiceComponent.setMultiSelect(false);
        m_ipServiceComponent.setNewItemsAllowed(false);
        m_ipServiceComponent.setNullSelectionAllowed(false);
        m_ipServiceComponent.setWidth(100.0f, Unit.PERCENTAGE);
        m_ipServiceComponent.setRows(20);
        m_ipServiceComponent.setVisible(false);
        m_ipServiceComponent.setContainerDataSource(m_ipServicesContainer);
        formLayout.addComponent(m_ipServiceComponent);

        /**
         * reduction key input field
         */
        m_reductionKeyComponent = new TextField("Reduction Key");
        m_reductionKeyComponent.setWidth(100.0f, Unit.PERCENTAGE);
        m_reductionKeyComponent.setVisible(false);
        formLayout.addComponent(m_reductionKeyComponent);

        /**
         * show and hide components
         */
        m_typeSelect.addValueChangeListener(event -> {
            m_childServiceComponent.setVisible(m_typeSelect.getValue() == Edge.Type.CHILD_SERVICE);
            m_childServiceComponent.setRequired(m_typeSelect.getValue() == Edge.Type.CHILD_SERVICE);
            m_ipServiceComponent.setVisible(m_typeSelect.getValue() == Edge.Type.IP_SERVICE);
            m_ipServiceComponent.setRequired(m_typeSelect.getValue() == Edge.Type.IP_SERVICE);
            m_reductionKeyComponent.setVisible(m_typeSelect.getValue() == Edge.Type.REDUCTION_KEY);
            m_reductionKeyComponent.setRequired(m_typeSelect.getValue() == Edge.Type.REDUCTION_KEY);
        });

        /**
         * map function field
         */
        m_mapFunctionSelect = new NativeSelect("Map Function",
                                               ImmutableList.builder()
                                                            .add(Decrease.class)
                                                            .add(Identity.class)
                                                            .add(Ignore.class)
                                                            .add(Increase.class)
                                                            .add(SetTo.class)
                                                            .build());
        m_mapFunctionSelect.setNullSelectionAllowed(false);
        m_mapFunctionSelect.setMultiSelect(false);
        m_mapFunctionSelect.setNewItemsAllowed(false);
        m_mapFunctionSelect.setRequired(true);
        m_mapFunctionSelect.setWidth(98.0f, Unit.PERCENTAGE);

        /**
         * setting the captions for items
         */
        m_mapFunctionSelect.getItemIds().forEach(itemId -> m_mapFunctionSelect.setItemCaption(itemId, ((Class<?>) itemId).getSimpleName()));

        formLayout.addComponent(m_mapFunctionSelect);

        /**
         * severity selection field
         */
        m_mapFunctionSeveritySelect = new NativeSelect("Severity");
        m_mapFunctionSeveritySelect.setMultiSelect(false);
        m_mapFunctionSeveritySelect.setNewItemsAllowed(false);
        m_mapFunctionSeveritySelect.setNullSelectionAllowed(false);
        m_mapFunctionSeveritySelect.setRequired(true);
        m_mapFunctionSeveritySelect.addItem(Status.CRITICAL);
        m_mapFunctionSeveritySelect.setItemCaption(Status.CRITICAL, "Critical");
        m_mapFunctionSeveritySelect.addItem(Status.MAJOR);
        m_mapFunctionSeveritySelect.setItemCaption(Status.MAJOR, "Major");
        m_mapFunctionSeveritySelect.addItem(Status.MINOR);
        m_mapFunctionSeveritySelect.setItemCaption(Status.MINOR, "Minor");
        m_mapFunctionSeveritySelect.addItem(Status.WARNING);
        m_mapFunctionSeveritySelect.setItemCaption(Status.WARNING, "Warning");
        m_mapFunctionSeveritySelect.addItem(Status.NORMAL);
        m_mapFunctionSeveritySelect.setItemCaption(Status.NORMAL, "Normal");
        m_mapFunctionSeveritySelect.addItem(Status.INDETERMINATE);
        m_mapFunctionSeveritySelect.setItemCaption(Status.INDETERMINATE, "Indeterminate");
        m_mapFunctionSeveritySelect.setWidth(98.0f, Unit.PERCENTAGE);
        m_mapFunctionSeveritySelect.setEnabled(false);
        formLayout.addComponent(m_mapFunctionSeveritySelect);

        /**
         * hide or show additional severity input field
         */
        m_mapFunctionSelect.addValueChangeListener(event -> {
            m_mapFunctionSeveritySelect.setEnabled(SetTo.class.equals(m_mapFunctionSelect.getValue()));
        });

        /**
         * the weight input field
         */
        m_weightField = new TextField("Weight");
        m_weightField.setRequired(true);
        m_weightField.setWidth(100.0f, Unit.PERCENTAGE);
        m_weightField.addValidator(value -> {
            try {
                Float.parseFloat((String) value);
            } catch (final NumberFormatException e) {
                throw new Validator.InvalidValueException("Weight must be a number");
            }
        });
        formLayout.addComponent(m_weightField);

        /**
         * setting the defaults
         */
        m_typeSelect.setValue(Edge.Type.CHILD_SERVICE);
        m_mapFunctionSelect.setValue(Identity.class);
        m_mapFunctionSeveritySelect.setValue(Status.INDETERMINATE);
        m_weightField.setValue("1");

        rootLayout.addComponent(formLayout);

        /**
         * add the button layout...
         */
        final HorizontalLayout buttonLayout = new HorizontalLayout();
        buttonLayout.setSpacing(true);
        buttonLayout.setMargin(true);

        /**
         * ...and the save button
         */
        final Button saveButton = new Button("Add Edge");
        saveButton.setId("saveButton");
        saveButton.addClickListener(UIHelper.getCurrent(TransactionAwareUI.class).wrapInTransactionProxy((Button.ClickListener) event -> {
            final MapFunction mapFunction;
            try {
                mapFunction = ((Class<? extends MapFunction>) m_mapFunctionSelect.getValue()).newInstance();
            } catch (final InstantiationException | IllegalAccessException e) {
                throw Throwables.propagate(e);
            }

            if (mapFunction instanceof SetTo) {
                ((SetTo) mapFunction).setStatus(null);
            }

            switch ((Edge.Type) m_typeSelect.getValue()) {
                case CHILD_SERVICE:
                    businessService.addChildEdge(m_businessServicesContainer.getItem(m_childServiceComponent.getValue()).getBean(), mapFunction, Edge.DEFAULT_WEIGHT);
                    break;

                case IP_SERVICE:
                    businessService.addIpServiceEdge(m_ipServicesContainer.getItem(m_ipServiceComponent.getValue()).getBean(), mapFunction, Edge.DEFAULT_WEIGHT);
                    break;

                case REDUCTION_KEY:
                    businessService.addReductionKeyEdge(m_reductionKeyComponent.getValue(), mapFunction, Edge.DEFAULT_WEIGHT);
                    break;
            }

            close();
        }));
        buttonLayout.addComponent(saveButton);

        /**
         * ...and a cancel button
         */
        final Button cancelButton = new Button("Cancel");
        cancelButton.setId("cancelButton");
        cancelButton.addClickListener((Button.ClickListener) event -> close());
        buttonLayout.addComponent(cancelButton);

        rootLayout.addComponent(buttonLayout);
        rootLayout.setComponentAlignment(buttonLayout, Alignment.BOTTOM_RIGHT);

        /**
         * now set the root layout
         */
        setContent(rootLayout);
    }

