    private void createRowForVertex(BusinessServiceGraph graph, GraphVertex graphVertex, BusinessServiceRow parentRow,
            com.google.common.collect.Table<Long, Optional<Long>, Boolean> collapseState) {
        final BusinessService businessService = graphVertex.getBusinessService();
        if (businessService == null) {
            return;
        }

        final long rowId = m_rowIdCounter.incrementAndGet();
        final Long parentBusinessServiceId = parentRow != null ? parentRow.getBusinessService().getId() : null;
        final BusinessServiceRow row = new BusinessServiceRow(rowId, businessService, parentBusinessServiceId);
        m_beanContainer.addBean(row);
        if (parentRow != null) {
            m_table.setParent(rowId, parentRow.getId());
        }

        // Restore the previous collapsed state
        Boolean wasCollapsed = collapseState.get(businessService.getId(), Optional.ofNullable(parentBusinessServiceId));
        m_table.setCollapsed(rowId, wasCollapsed != null ? wasCollapsed : true); // Collapse by default

        // Recurse with all of the children
        graph.getOutEdges(graphVertex).stream()
            .map(e -> graph.getOpposite(graphVertex, e))
            .filter(v -> v.getBusinessService() != null)
            .sorted((v1, v2) -> v1.getBusinessService().getName().compareTo(v2.getBusinessService().getName()))
            .forEach(v -> createRowForVertex(graph, v, row, collapseState));
    }

