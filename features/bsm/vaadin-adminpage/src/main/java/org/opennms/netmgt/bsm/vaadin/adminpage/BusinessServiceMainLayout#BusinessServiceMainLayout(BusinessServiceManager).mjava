    public BusinessServiceMainLayout(BusinessServiceManager businessServiceManager) {
        m_businessServiceManager = Objects.requireNonNull(businessServiceManager);

        setSizeFull();

        // Reload button to allow manual reloads of the state machine
        final Button reloadButton = UIHelper.createButton("Reload Daemon", "Reloads the Business Service State Machine", FontAwesome.REFRESH, (Button.ClickListener) event -> {
            m_businessServiceManager.triggerDaemonReload();
        });

        // Create button to add a new business server
        final Button createButton = new Button("New Business Service", FontAwesome.PLUS_SQUARE);
        createButton.setId("createButton");
        createButton.addClickListener((Button.ClickListener) event -> {
            final BusinessService businessService = m_businessServiceManager.createBusinessService();
            final BusinessServiceEditWindow window = new BusinessServiceEditWindow(businessService, m_businessServiceManager);
            window.addCloseListener(e -> refreshTable());
            getUI().addWindow(window);
        });

        // Build the upper layout
        HorizontalLayout upperLayout = new HorizontalLayout();
        upperLayout.setSpacing(true);
        upperLayout.addComponent(createButton);
        upperLayout.addComponent(reloadButton);
        upperLayout.setComponentAlignment(createButton, Alignment.TOP_LEFT);
        upperLayout.setComponentAlignment(reloadButton, Alignment.TOP_RIGHT);
        upperLayout.setWidth(100, Unit.PERCENTAGE);
        addComponent(upperLayout);

        // Add some space between the upper layout and the table
        Label sz = new Label("");
        sz.setWidth(null);
        sz.setHeight(5, Unit.PIXELS);
        addComponent(sz);

        /**
         * now construct the table...
         */
        m_table = new TreeTable();
        m_table.setSizeFull();
        m_table.setContainerDataSource(m_beanContainer);

        /**
         * ...and configure the visible columns
         */
        m_table.setVisibleColumns("name");

        /**
         * add edit and delete buttons
         */
        m_table.addGeneratedColumn("edit / delete", new Table.ColumnGenerator() {
            private static final long serialVersionUID = 7113848887128656685L;

            @Override
            public Object generateCell(Table source, Object itemId, Object columnId) {
                HorizontalLayout layout = new HorizontalLayout();
                layout.setSpacing(true);

                Button editButton = new Button("Edit", FontAwesome.PENCIL_SQUARE_O);
               //editButton.addStyleName("small");
                editButton.setId("editButton-" + m_beanContainer.getItem(itemId).getBean().getName());

                editButton.addClickListener(UIHelper.getCurrent(TransactionAwareUI.class).wrapInTransactionProxy((Button.ClickListener) event -> {
                    final Long businessServiceId = m_beanContainer.getItem(itemId).getBean().getBusinessService().getId();
                    BusinessService businessService = m_businessServiceManager.getBusinessServiceById(businessServiceId);
                    final BusinessServiceEditWindow window = new BusinessServiceEditWindow(businessService, m_businessServiceManager);
                    window.addCloseListener(e -> refreshTable());

                    getUI().addWindow(window);
                }));
                layout.addComponent(editButton);

                Button deleteButton = new Button("Delete", FontAwesome.TRASH_O);
                //deleteButton.addStyleName("small");
                deleteButton.setId("deleteButton-" + m_beanContainer.getItem(itemId).getBean().getName());

                deleteButton.addClickListener((Button.ClickListener)event -> {
                    final Long businessServiceId = m_beanContainer.getItem(itemId).getBean().getBusinessService().getId();
                    BusinessService businessService = m_businessServiceManager.getBusinessServiceById(businessServiceId);
                    if (businessService.getParentServices().isEmpty() && businessService.getChildEdges().isEmpty()) {
                        UIHelper.getCurrent(TransactionAwareUI.class).runInTransaction(() -> {
                            m_businessServiceManager.getBusinessServiceById(businessServiceId).delete();
                            refreshTable();
                        });
                    } else {
                        new org.opennms.netmgt.vaadin.core.ConfirmationDialog()
                            .withOkAction((org.opennms.netmgt.vaadin.core.ConfirmationDialog.Action) UIHelper.getCurrent(TransactionAwareUI.class).wrapInTransactionProxy(new org.opennms.netmgt.vaadin.core.ConfirmationDialog.Action() {
                                @Override
                                public void execute(org.opennms.netmgt.vaadin.core.ConfirmationDialog window) {
                                    m_businessServiceManager.getBusinessServiceById(businessServiceId).delete();
                                    refreshTable();
                                }
                            }))
                            .withOkLabel("Delete anyway")
                            .withCancelLabel("Cancel")
                            .withCaption("Warning")
                            .withDescription("This entry is referencing or is referenced by other Business Services! Do you really want to delete this entry?")
                            .open();
                    }
                });
                layout.addComponent(deleteButton);

                return layout;
            }
        });

        m_table.setColumnExpandRatio("name", 5);
        m_table.setColumnExpandRatio("edit / delete", 1);

        /**
         * add the table to the layout
         */
        addComponent(m_table);
        setExpandRatio(m_table, 1.0f);

        /**
         * initial refresh of table
         */
        refreshTable();
    }

