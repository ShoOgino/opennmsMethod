    public BusinessServiceMainLayout(BusinessServiceManager businessServiceManager) {
        m_businessServiceManager = Objects.requireNonNull(businessServiceManager);

        setSizeFull();

        // construct the upper layout for the create button and field
        HorizontalLayout upperLayout = new HorizontalLayout();

        // Reload button to allow manual reloads of the state machine
        final Button reloadButton = UIHelper.createButton("Reload", "Reloads the Business Service State Machine", null, (Button.ClickListener) event -> {
            m_businessServiceManager.triggerDaemonReload();
        });

        // business service input field
        final TextField createTextField = new TextField();
        createTextField.setWidth(300.0f, Unit.PIXELS);
        createTextField.setInputPrompt("Business Service Name");
        createTextField.setId("createTextField");

        // create Button
        final Button createButton = new Button("Create");
        createButton.setId("createButton");
        createButton.addClickListener((Button.ClickListener) event -> {
            if (!"".equals(Strings.nullToEmpty(createTextField.getValue()).trim())) {
                final BusinessService businessService = m_businessServiceManager.createBusinessService();
                businessService.setName(createTextField.getValue().trim());
                getUI().addWindow(new BusinessServiceEditWindow(businessService, BusinessServiceMainLayout.this));
                createTextField.setValue("");
            }
        });

        /**
         * add to the upper layout
         */
        upperLayout.addComponent(reloadButton);
        upperLayout.addComponent(createTextField);
        upperLayout.addComponent(createButton);
        addComponent(upperLayout);
        /**
         * and set the upper-right alignment
         */
        setComponentAlignment(upperLayout, Alignment.TOP_RIGHT);

        /**
         * now construct the table...
         */
        m_table = new Table();
        m_table.setSizeFull();
        m_table.setContainerDataSource(m_beanItemContainer);

        /**
         * ...and configure the visible columns
         */
        m_table.setVisibleColumns("id", "name");

        /**
         * createBusinessService generated columns for modification of entries...
         */
        m_table.addGeneratedColumn("edit", new Table.ColumnGenerator() {
            @Override
            public Object generateCell(Table source, Object itemId, Object columnId) {
                Button editButton = new Button("edit");
                editButton.addStyleName("small");
                editButton.setId("editButton-" + ((BusinessService) itemId).getName());

                editButton.addClickListener(UIHelper.getCurrent(TransactionAwareUI.class).wrapInTransactionProxy((Button.ClickListener) event -> {
                    getUI().addWindow(new BusinessServiceEditWindow((BusinessService) itemId, BusinessServiceMainLayout.this));
                    refreshTable();
                }));
                return editButton;
            }
        });

        /**
         * ...and deletion of entries
         */
        m_table.addGeneratedColumn("delete", new Table.ColumnGenerator() {
                    @Override
                    public Object generateCell(Table source, Object itemId, Object columnId) {
                        Button deleteButton = new Button("delete");
                        deleteButton.addStyleName("small");
                        BusinessService businessService = (BusinessService) itemId;
                        deleteButton.setId("deleteButton-" + businessService.getName());

                        deleteButton.addClickListener((Button.ClickListener)event -> {
                                    if (businessService.getParentServices().isEmpty() && businessService.getChildEdges().isEmpty()) {
                                        UIHelper.getCurrent(TransactionAwareUI.class).runInTransaction(() -> {
                                            businessService.delete();
                                            refreshTable();
                                        });
                                    } else {
                                        new org.opennms.netmgt.vaadin.core.ConfirmationDialog()
                                                .withOkAction(UIHelper.getCurrent(TransactionAwareUI.class).wrapInTransactionProxy(new org.opennms.netmgt.vaadin.core.ConfirmationDialog.Action() {
                                                    @Override
                                                    public void execute(org.opennms.netmgt.vaadin.core.ConfirmationDialog window) {
                                                        businessService.delete();
                                                        refreshTable();
                                                    }
                                                }))
                                                .withOkLabel("Delete anyway")
                                                .withCancelLabel("Cancel")
                                                .withCaption("Warning")
                                                .withDescription("This entry is referencing or is referenced by other Business Services! Do you really want to delete this entry?")
                                                .open();
                                    }
                                }

                        );
                        return deleteButton;
                    }
                }
        );

        /**
         * add the table to the layout
         */
        addComponent(m_table);
        setExpandRatio(m_table, 1.0f);

        /**
         * initial refresh of table
         */
        refreshTable();
    }

