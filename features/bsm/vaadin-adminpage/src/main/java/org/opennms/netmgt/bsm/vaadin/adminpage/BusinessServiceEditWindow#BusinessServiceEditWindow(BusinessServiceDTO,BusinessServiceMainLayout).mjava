    /**
     * Constructor
     *
     * @param businessServiceDTO the Business Service DTO instance to be configured
     * @param businessServiceMainLayout the parent main layout
     */
    public BusinessServiceEditWindow(BusinessServiceDTO businessServiceDTO, BusinessServiceMainLayout businessServiceMainLayout) {
        /**
         * set window title...
         */
        super("Business Service Edit");

        /**
         * set the member field...
         */
        this.m_businessServiceMainLayout = businessServiceMainLayout;

        /**
         * ...and query for IP services.
         */
        m_beanItemContainer.addAll(m_businessServiceMainLayout.getBusinessServiceManager().getAllIpServiceDTO());

        /**
         * ...and basic properties
         */
        setModal(true);
        setClosable(false);
        setResizable(false);
        setWidth(60, Unit.PERCENTAGE);
        setHeight(80, Unit.PERCENTAGE);

        /**
         * construct the main layout
         */
        VerticalLayout verticalLayout = new VerticalLayout();
        verticalLayout.setSizeFull();
        verticalLayout.setSpacing(true);
        verticalLayout.setMargin(true);

        /**
         * add save button
         */
        Button saveButton = new Button("Save");
        saveButton.setId("saveButton");
        saveButton.addClickListener(new Button.ClickListener() {
            @Override
            public void buttonClick(Button.ClickEvent event) {
                businessServiceDTO.setName(m_nameTextField.getValue().trim());
                businessServiceDTO.setIpServices((Set<IpServiceDTO>) m_ipServicesTwinColSelect.getValue());
                if (businessServiceDTO.getId() == null) {
                    businessServiceMainLayout.getBusinessServiceManager().save(businessServiceDTO);
                } else {
                    businessServiceMainLayout.getBusinessServiceManager().update(businessServiceDTO);
                }
                close();
                businessServiceMainLayout.refreshTable();
            }
        });

        /**
         * add the cancel button
         */
        Button cancelButton = new Button("Cancel");
        cancelButton.setId("cancelButton");
        cancelButton.addClickListener(new Button.ClickListener() {
            @Override
            public void buttonClick(Button.ClickEvent event) {
                close();
            }
        });

        /**
         * add the buttons to a HorizontalLayout
         */
        HorizontalLayout buttonLayout = new HorizontalLayout();
        buttonLayout.addComponent(saveButton);
        buttonLayout.addComponent(cancelButton);

        /**
         * instantiate the input fields
         */
        m_nameTextField = new TextField();
        m_nameTextField.setId("nameField");
        m_nameTextField.setValue(businessServiceDTO.getName());
        m_nameTextField.setWidth(100.0f, Unit.PERCENTAGE);
        verticalLayout.addComponent(new Panel("Name", m_nameTextField));

        m_ipServicesTwinColSelect = new TwinColSelect();
        m_ipServicesTwinColSelect.setId("ipServiceSelect");
        m_ipServicesTwinColSelect.setWidth(100.0f, Unit.PERCENTAGE);
        m_ipServicesTwinColSelect.setSizeFull();

        m_ipServicesTwinColSelect.setContainerDataSource(m_beanItemContainer);
        m_ipServicesTwinColSelect.setValue(businessServiceDTO.getIpServices());

        /**
         * wrap the IP selection box in a Vaadin Panel
         */
        Panel ipServiceSelectPanel = new Panel("IP-Services", m_ipServicesTwinColSelect);
        ipServiceSelectPanel.setSizeFull();
        verticalLayout.addComponent(ipServiceSelectPanel);
        verticalLayout.setExpandRatio(ipServiceSelectPanel, 1.0f);

        /**
         * now add the button layout to the main layout
         */
        verticalLayout.addComponent(buttonLayout);
        verticalLayout.setComponentAlignment(buttonLayout, Alignment.BOTTOM_RIGHT);

        /**
         * set the window's content
         */
        setContent(verticalLayout);
    }

