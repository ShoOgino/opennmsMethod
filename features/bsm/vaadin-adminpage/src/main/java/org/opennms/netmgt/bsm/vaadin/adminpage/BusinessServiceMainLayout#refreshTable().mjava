    /**
     * Refreshes the entries of the table used for listing the DTO instances.
     */
    private void refreshTable() {
        m_beanContainer.setBeanIdProperty("id");
        m_beanContainer.removeAllItems();
        m_rowIdCounter.set(0);

        // Build a graph using all of the business services stored in the database
        // We don't use the existing graph, since it only contains the services know by the state machine
        final BusinessServiceGraph graph = m_businessServiceManager.getGraph(m_businessServiceManager.getAllBusinessServices());

        // Recursively generate the table rows, starting with the roots
        graph.getVerticesByLevel(0).stream()
            .filter(v -> v.getBusinessService() != null)
            .sorted((v1, v2) -> v1.getBusinessService().getName().compareTo(v2.getBusinessService().getName()))
            .forEach(v -> createRowForVertex(graph, v, null));

        for (Object itemId: m_table.getContainerDataSource().getItemIds()) {
            // Disable the collapse flag on items without any children
            m_table.setChildrenAllowed(itemId, m_table.hasChildren(itemId));
            // Expand the tree on refresh
            m_table.setCollapsed(itemId, false);
        }

        // Let the ContainerStrategy know that we changed the item set
        m_table.containerItemSetChange(new ItemSetChangeEvent() {
            private static final long serialVersionUID = 1L;
            @Override
            public Container getContainer() {
                return m_beanContainer;
            }
        });
    }

