    /**
     * Refreshes table entries.
     */
    private void refreshTable() {
        // Gather the current collapse state
        final com.google.common.collect.Table<Long, Optional<Long>, Boolean> collapseState = HashBasedTable.create();
        for (Long itemId : m_beanContainer.getItemIds()) {
            final BusinessServiceRow row = m_beanContainer.getItem(itemId).getBean();
            collapseState.put(row.getBusinessService().getId(), Optional.ofNullable(row.getParentBusinessServiceId()), m_table.isCollapsed(itemId));
        }

        // Clear the container
        m_beanContainer.setBeanIdProperty("id");
        m_beanContainer.removeAllItems();
        m_rowIdCounter.set(0);

        // Build a graph using all of the business services stored in the database
        // We don't use the existing graph, since it only contains the services know by the state machine
        final BusinessServiceGraph graph = m_businessServiceManager.getGraph(m_businessServiceManager.getAllBusinessServices());

        // Recursively generate the table rows, starting with the roots
        graph.getVerticesByLevel(0).stream()
            .filter(v -> v.getBusinessService() != null)
            .sorted((v1, v2) -> v1.getBusinessService().getName().compareTo(v2.getBusinessService().getName()))
            .forEach(v -> createRowForVertex(graph, v, null, collapseState));

        for (Object itemId: m_table.getContainerDataSource().getItemIds()) {
            // Disable the collapse flag on items without any children
            m_table.setChildrenAllowed(itemId, m_table.hasChildren(itemId));
        }

        fireItemSetChange();
    }

