    @Test
    @Transactional
    public void verifyDeleteOnCascade() {
        BusinessServiceEntity child = new BusinessServiceEntityBuilder()
                .name("Child2")
                .reduceFunction(new MostCriticalEntity())
                .toEntity();

        BusinessServiceEntity parent = new BusinessServiceEntityBuilder()
                .name("Web Servers")
                .addAttribute("dc", "RDU")
                .addReductionKey("TestReductionKeyA", new IdentityEntity())
                .addReductionKey("TestReductionKeyB", new IdentityEntity())
                .addIpService(getMonitoredServiceFromNode1(), new IdentityEntity())
                .reduceFunction(m_mostCritical)
                .addChildren(child, new IdentityEntity())
                .toEntity();

        m_businessServiceDao.save(child);
        m_businessServiceDao.save(parent);

        assertEquals(2, m_businessServiceDao.countAll());
        assertEquals(2, m_reductionFunctionDao.countAll());
        assertEquals(4, m_edgeDao.countAll());

        // Deletion of child does not delete the edges referencing to that child
        m_businessServiceDao.delete(child);
        assertEquals(1, m_businessServiceDao.countAll());
        assertEquals(1, m_reductionFunctionDao.countAll());
        assertEquals(4, m_edgeDao.countAll());

        // TODO MVR is there any way to do this automatically with hibernate annotations?
        // we have to manually delete the edge, than we are good
        parent.removeEdge(parent.getChildEdges().iterator().next());
        m_businessServiceDao.update(parent);
        assertEquals(1, m_businessServiceDao.countAll());
        assertEquals(1, m_reductionFunctionDao.countAll());
        assertEquals(3, m_edgeDao.countAll());

        // Deletion of parent should delete all references
        m_businessServiceDao.delete(parent);
        assertEquals(0, m_businessServiceDao.countAll());
        assertEquals(0, m_reductionFunctionDao.countAll());
        assertEquals(0, m_edgeDao.countAll());
    }

