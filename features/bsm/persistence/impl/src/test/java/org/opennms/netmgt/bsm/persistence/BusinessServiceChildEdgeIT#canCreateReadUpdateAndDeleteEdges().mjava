    @Test
    public void canCreateReadUpdateAndDeleteEdges() {
        // Create the Parent Business Service
        BusinessServiceEntity parent = new BusinessServiceEntityBuilder()
            .name("Parent Service")
            .reduceFunction(new HighestSeverityEntity())
            .toEntity();
        // Create the Child Business Service
        BusinessServiceEntity child = new BusinessServiceEntityBuilder()
                .name("Child Service")
                .reduceFunction(new HighestSeverityEntity())
                .toEntity();
        Long parentServiceId = m_businessServiceDao.save(parent);
        Long childServiceId = m_businessServiceDao.save(child);
        m_businessServiceDao.flush();

        // Initially there should be no edges
        assertEquals(0, m_businessServiceEdgeDao.countAll());

        // Create an edge
        BusinessServiceChildEdgeEntity edge = new BusinessServiceChildEdgeEntity();
        edge.setMapFunction(new IdentityEntity());
        edge.setBusinessService(parent);
        edge.setChild(child);
        m_businessServiceEdgeDao.save(edge);
        m_businessServiceEdgeDao.flush();

        // Read an edge
        assertEquals(1, m_businessServiceEdgeDao.countAll());
        assertEquals(edge, m_businessServiceEdgeDao.get(edge.getId()));
        assertEquals(parentServiceId, edge.getBusinessService().getId());
        assertEquals(childServiceId, edge.getChild().getId());

        // Update an edge
        edge.setWeight(2);
        m_businessServiceEdgeDao.save(edge);
        m_businessServiceEdgeDao.flush();

        BusinessServiceEdgeEntity otherEdge = m_businessServiceEdgeDao.get(edge.getId());
        assertEquals(edge, otherEdge);
        assertEquals(1, m_businessServiceEdgeDao.countAll());

        // Delete an edge
        m_businessServiceEdgeDao.delete(edge);
        assertEquals(0, m_businessServiceEdgeDao.countAll());
    }

