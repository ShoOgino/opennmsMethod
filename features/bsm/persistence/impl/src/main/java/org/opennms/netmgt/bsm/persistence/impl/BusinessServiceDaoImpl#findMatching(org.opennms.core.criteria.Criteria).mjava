    @SuppressWarnings("unchecked")
    @Override
    public List<BusinessServiceEntity> findMatching(final org.opennms.core.criteria.Criteria criteria) {
        final HibernateCallback<List<BusinessServiceEntity>> callback = session -> {
            // If limit and offset are set, we MUST manually limit the result, as by default
            // hibernate would return multiple rows for each entity if the criteria has alias/join definitions
            // or the entity fetched by the criteria has EAGER loaded relationships and this relationship is 1:n and
            // there is more than 1 elements (e.g. each parent has 3 children). Order and Limit definitions are not
            // working in this case, using the default implementation of findMatching. See: BSM-104, NMS-8079
            if (criteria.getLimit() != null || criteria.getOffset() != null) {
                final Criteria idCriteria = m_criteriaConverter.convert(criteria, session);
                idCriteria.setProjection(Projections.distinct(
                        Projections.projectionList()
                            .add(Projections.property("id"))
                            .add(Projections.property("name"))));
                List<Object[]> idList = idCriteria.list();
                if (!idList.isEmpty()) {
                    // Prepare criteria
                    Criteria entityCriteria = session.createCriteria(criteria.getCriteriaClass());
                    entityCriteria.add(Restrictions.in("id", idList.stream().map(e -> e[0]).collect(Collectors.toList())));
                    entityCriteria.setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY);

                    // Enforce ordering
                    for (Order eachOnmsOrder : criteria.getOrders()) {
                        if (eachOnmsOrder.asc()) {
                            entityCriteria.addOrder(org.hibernate.criterion.Order.asc(eachOnmsOrder.getAttribute()));
                        } else {
                            entityCriteria.addOrder(org.hibernate.criterion.Order.desc(eachOnmsOrder.getAttribute()));
                        }
                    }
                    return entityCriteria.list();
                }
                return Collections.emptyList();
            } else { // if no offset, limit is set, we can leverage the DISTINCT_ROOT_ENTITY result transformer behaviour.
                // Manually override default. Otherwise for each 1 - n relationship (with n > 1), n entities are returned instead of 1
                final Criteria hibernateCriteria = m_criteriaConverter.convert(criteria, session);
                hibernateCriteria.setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY);
                return (List<BusinessServiceEntity>)(hibernateCriteria.list());
            }
        };
        return getHibernateTemplate().execute(callback);
    }

