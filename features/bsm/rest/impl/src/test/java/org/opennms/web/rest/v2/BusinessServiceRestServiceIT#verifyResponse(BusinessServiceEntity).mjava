    private BusinessServiceResponseDTO verifyResponse(BusinessServiceEntity entity) throws Exception {
        final BusinessServiceResponseDTO responseDTO = getXmlObject(
                JAXBContext.newInstance(BusinessServiceResponseDTO.class),
                buildServiceUrl(entity.getId()),
                200,
                BusinessServiceResponseDTO.class);
        Assert.assertEquals(entity.getId(), Long.valueOf(responseDTO.getId()));
        Assert.assertEquals(entity.getName(), responseDTO.getName());
        Assert.assertEquals(entity.getAttributes(), responseDTO.getAttributes());
        Assert.assertEquals(Status.INDETERMINATE, responseDTO.getOperationalStatus());
        Assert.assertEquals(entity.getReductionKeyEdges().size(), responseDTO.getReductionKeys().size());
        Assert.assertEquals(entity.getReductionKeyEdges()
                .stream()
                .map(it -> toResponseDTO(it))
                .collect(Collectors.toList()), responseDTO.getReductionKeys());
        Assert.assertEquals(entity.getChildEdges().size(), responseDTO.getChildren().size());
        Assert.assertEquals(entity.getChildEdges()
                .stream()
                .map(e -> toResponseDTO(e))
                .collect(Collectors.toList()), responseDTO.getChildren());
        Assert.assertEquals(entity.getIpServiceEdges().size(), responseDTO.getIpServices().size());
        Assert.assertEquals(entity.getIpServiceEdges()
                .stream()
                .map(e -> toResponseDTO(e))
                .collect(Collectors.toList()), responseDTO.getIpServices());
        Assert.assertEquals(m_businessServiceDao.findParents(entity)
                .stream()
                .map(e -> e.getId())
                .collect(Collectors.toSet()), responseDTO.getParentServices());
        return responseDTO;
    }

