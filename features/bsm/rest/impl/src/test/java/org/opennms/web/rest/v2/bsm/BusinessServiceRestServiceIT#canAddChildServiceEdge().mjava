    @Test
    public void canAddChildServiceEdge() throws Exception {
        // Create a child and parent Business Service without any edges
        BusinessServiceEntity childEntity = new BusinessServiceEntityBuilder()
                .name("Child Service")
                .reduceFunction(new HighestSeverityEntity())
                .toEntity();
        BusinessServiceEntity parentEntity = new BusinessServiceEntityBuilder()
                .name("Parent Service")
                .reduceFunction(new HighestSeverityEntity())
                .toEntity();
        final Long parentServiceId = m_businessServiceDao.save(parentEntity);
        final Long childServiceId = m_businessServiceDao.save(childEntity);
        m_businessServiceDao.flush();

        // The Request to send to create the edge
        ChildEdgeRequestDTO edgeRequestDTO = new ChildEdgeRequestDTO();
        edgeRequestDTO.setMapFunction(new FunctionsManager().getMapFunctionDTO(new Identity()));

        // verify adding of not existing ip parentEntity is not possible
        edgeRequestDTO.setChildId(-1L);
        sendData(POST, MediaType.APPLICATION_XML, buildChildServiceEdgeUrl(parentServiceId), toXml(edgeRequestDTO), 404);

        // verify adding of existing ip parentEntity is possible
        edgeRequestDTO.setChildId(childServiceId);
        sendData(POST, MediaType.APPLICATION_XML, buildChildServiceEdgeUrl(parentServiceId), toXml(edgeRequestDTO), 200);
        Assert.assertEquals(1, m_businessServiceDao.get(parentServiceId).getChildEdges().size());

        // verify adding twice possible, but not modified
        sendData(POST, MediaType.APPLICATION_XML, buildChildServiceEdgeUrl(parentServiceId), toXml(edgeRequestDTO), 304);
        Assert.assertEquals(1, m_businessServiceDao.get(parentServiceId).getChildEdges().size());
    }

