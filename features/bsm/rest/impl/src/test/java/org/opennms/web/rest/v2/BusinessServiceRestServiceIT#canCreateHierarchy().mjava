    /**
     * Verify that the Rest API can deal with setting of a hierarchy
     */
    @Test
    public void canCreateHierarchy() throws Exception {
        final BsmTestData testData = new BsmTestData(databasePopulator.getDatabasePopulator());
        // clear hierarchy
        for(BusinessServiceEntity eachEntity : testData.getServices()) {
            eachEntity.getEdges().clear();
        }
        // save business services
        for (BusinessServiceEntity eachEntity : testData.getServices()) {
            sendData(POST, MediaType.APPLICATION_XML, "/business-services", toXml(toRequestDto(eachEntity)), 201);
        }
        // set hierarchy
        BusinessServiceEntity parentEntity = findEntityByName("Parent")
                .addChildServiceEdge(findEntityByName("Child 1"), m_identity)
                .addChildServiceEdge(findEntityByName("Child 2"), m_identity);
        sendData(PUT, MediaType.APPLICATION_XML, buildServiceUrl(parentEntity.getId()), toXml(toRequestDto(parentEntity)), 204);

        // Verify
        Assert.assertEquals(3, m_businessServiceDao.countAll());
        parentEntity = findEntityByName("Parent");
        BusinessServiceEntity child1Entity = findEntityByName("Child 1");
        BusinessServiceEntity child2Entity = findEntityByName("Child 2");
        Assert.assertEquals(0, m_businessServiceDao.findParents(parentEntity).size());
        Assert.assertEquals(2, parentEntity.getChildServices().size());
        Assert.assertEquals(1, m_businessServiceDao.findParents(child1Entity).size());
        Assert.assertEquals(0, child1Entity.getChildServices().size());
        Assert.assertEquals(1, m_businessServiceDao.findParents(child2Entity).size());
        Assert.assertEquals(0, child2Entity.getChildServices().size());
        verifyResponse(parentEntity);
        verifyResponse(child1Entity);
        verifyResponse(child2Entity);
    }

