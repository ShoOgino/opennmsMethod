    /**
     * Ensures that the given BusinessServiceEntity matches the result returned from the Rest API when asking for the
     * business service with the Business Service Entities id.
     * The Verification is done by transforming the given entity to a BusinessServiceResponseDTO and compare it with the
     * returned one from the Rest API.
     * @param expectedEntity The values one expects.
     * @return The returned response from the Rest API.
     * @throws Exception
     */
    private BusinessServiceResponseDTO verifyResponse(BusinessServiceEntity expectedEntity) throws Exception {
        final BusinessServiceResponseDTO responseDTO = getAndUnmarshal(
                buildServiceUrl(expectedEntity.getId()),
                200,
                BusinessServiceResponseDTO.class);
        Assert.assertEquals(expectedEntity.getId(), Long.valueOf(responseDTO.getId()));
        Assert.assertEquals(expectedEntity.getName(), responseDTO.getName());
        Assert.assertEquals(expectedEntity.getAttributes(), responseDTO.getAttributes());
        Assert.assertEquals(Status.INDETERMINATE, responseDTO.getOperationalStatus());
        Assert.assertEquals(expectedEntity.getReductionKeyEdges().size(), responseDTO.getReductionKeys().size());
        Assert.assertEquals(expectedEntity.getReductionKeyEdges()
                .stream()
                .map(it -> toResponseDTO(it))
                .collect(Collectors.toList()), responseDTO.getReductionKeys());
        Assert.assertEquals(expectedEntity.getChildEdges().size(), responseDTO.getChildren().size());
        Assert.assertEquals(expectedEntity.getChildEdges()
                .stream()
                .map(e -> toResponseDTO(e))
                .collect(Collectors.toList()), responseDTO.getChildren());
        Assert.assertEquals(expectedEntity.getIpServiceEdges().size(), responseDTO.getIpServices().size());
        Assert.assertEquals(expectedEntity.getIpServiceEdges()
                .stream()
                .map(e -> toResponseDTO(e))
                .collect(Collectors.toList()), responseDTO.getIpServices());
        Assert.assertEquals(m_businessServiceDao.findParents(expectedEntity)
                .stream()
                .map(e -> e.getId())
                .collect(Collectors.toSet()), responseDTO.getParentServices());
        Assert.assertEquals(transform(expectedEntity.getReductionFunction()), responseDTO.getReduceFunction());
        return responseDTO;
    }

