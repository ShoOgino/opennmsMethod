    @POST
    public Response create(@Context final UriInfo uriInfo, final BusinessServiceRequestDTO request) {
        final BusinessService service = getManager().createBusinessService();
        service.setName(request.getName());
        service.setAttributes(request.getAttributes());
        service.setReduceFunction(transform(request.getReduceFunction()));

        request.getEdges().forEach(eachEdge -> eachEdge.accept(new EdgeRequestDTOVisitor() {
            @Override
            public void visit(IpServiceEdgeRequestDTO ipEdge) {
                service.addIpServiceEdge(
                        getManager().getIpServiceById(ipEdge.getIpServiceId()),
                        transform(ipEdge.getMapFunction()),
                        ipEdge.getWeight(),
                        ipEdge.getFriendlyName());
            }

            @Override
            public void visit(ChildEdgeRequestDTO childEdge) {
                service.addChildEdge(
                        getManager().getBusinessServiceById(childEdge.getChildId()),
                        transform(childEdge.getMapFunction()),
                        childEdge.getWeight());
            }

            @Override
            public void visit(ReductionKeyEdgeRequestDTO rkEdge) {
                service.addReductionKeyEdge(
                        rkEdge.getReductionKey(),
                        transform(rkEdge.getMapFunction()),
                        rkEdge.getWeight(),
                        rkEdge.getFriendlyName());
            }

            @Override
            public void visit(ApplicationEdgeRequestDTO rkEdge) {
                service.addApplicationEdge(
                        getManager().getApplicationById(rkEdge.getApplicationId()),
                        transform(rkEdge.getMapFunction()),
                        rkEdge.getWeight());
            }
        }));
        getManager().saveBusinessService(service);

        return Response.created(RedirectHelper.getRedirectUri(uriInfo, service.getId())).build();
    }

