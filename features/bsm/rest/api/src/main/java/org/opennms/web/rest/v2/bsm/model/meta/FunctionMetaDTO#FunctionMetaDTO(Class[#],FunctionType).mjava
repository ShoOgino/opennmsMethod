    /**
     * Reads the class and field annotations to populate the meta-data.
     */
    public FunctionMetaDTO(Class<?> function, FunctionType type) {
        Objects.requireNonNull(function, "function must not be null");
        Objects.requireNonNull(type, "type must not be null");

        Function functionAnnotation = function.getAnnotation(Function.class);
        Preconditions.checkState(functionAnnotation != null, "Functions must be annotated with @Function.");
        this.type = type;
        name = functionAnnotation.name();
        description = functionAnnotation.description();

        parameters = Lists.newArrayList();
        for(Field field : function.getDeclaredFields()) {
            Parameter filterParam = field.getAnnotation(Parameter.class);
            if (filterParam != null) { // only consider annotated fields
                parameters.add(new ParameterMetaDTO(field, filterParam));
            }
        }
    }

