    @EventHandler(ueis = {
        EventConstants.ALARM_CREATED_UEI,
        EventConstants.ALARM_ESCALATED_UEI,
        EventConstants.ALARM_CLEARED_UEI,
        EventConstants.ALARM_UNCLEARED_UEI,
        EventConstants.ALARM_UPDATED_WITH_REDUCED_EVENT_UEI,
        EventConstants.ALARM_DELETED_EVENT_UEI
    })
    public void handleAlarmLifecycleEvents(Event e) {
        if (e == null || !m_hasBusinessServicesDefined) {
            // Return quick if we weren't given an event, or if there are no business rules defined
            // in which case we don't need to perform any further handling
            return;
        }

        final Parm alarmIdParm = e.getParm(EventConstants.PARM_ALARM_ID);
        if (alarmIdParm == null || alarmIdParm.getValue() == null) {
            LOG.warn("The alarmId parameter has no value on event with uei: {}. Ignoring.", e.getUei());
            return;
        }

        int alarmId;
        try {
            alarmId = Integer.parseInt(alarmIdParm.getValue().getContent());
        } catch (NumberFormatException ee) {
            LOG.warn("Failed to retrieve the alarmId for event with uei: {}. Ignoring.", e.getUei(), ee);
            return;
        }

        if (EventConstants.ALARM_DELETED_EVENT_UEI.equals(e.getUei())) {
            handleAlarmDeleted(e, alarmId);
        } else {
            handleAlarmCreatedOrUpdated(e, alarmId);
        }
    }

