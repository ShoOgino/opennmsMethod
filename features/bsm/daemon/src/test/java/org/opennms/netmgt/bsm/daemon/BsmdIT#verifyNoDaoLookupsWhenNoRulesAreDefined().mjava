    @Test
    public void verifyNoDaoLookupsWhenNoRulesAreDefined() throws Exception {
        // Mock the DAO
        AlarmDao alarmDao = mock(AlarmDao.class);
        m_bsmd.setAlarmDao(alarmDao);

        // Start up without any business services
        m_bsmd.start();
        assertThat("Alarm polling should be disabled where there are no services.",
                m_bsmd.isAlarmPolling(), equalTo(false));

        // Create the alarm
        OnmsAlarm alarm = createAlarm();
        m_alarmDao.save(alarm);

        // Send alarm created event
        EventBuilder ebldr = new EventBuilder(EventConstants.ALARM_CREATED_UEI, "test");
        ebldr.addParam(EventConstants.PARM_ALARM_ID, alarm.getId());
        m_bsmd.handleAlarmLifecycleEvents(ebldr.getEvent());

        // The AlarmDAO should not have any lookups
        verify(alarmDao, never()).get(anyObject());

        // Now let's add a rule
        createBusinessService("svc");

        // Reload the daemon
        reloadBsmd();
        assertThat("Alarm polling should be enabled when there are 1+ services.",
                m_bsmd.isAlarmPolling(), equalTo(true));

        // Send alarm updated event
        ebldr = new EventBuilder(EventConstants.ALARM_UPDATED_WITH_REDUCED_EVENT_UEI, "test");
        ebldr.addParam(EventConstants.PARM_ALARM_ID, alarm.getId());
        m_bsmd.handleAlarmLifecycleEvents(ebldr.getEvent());

        // The AlarmDAO should have a single lookup
        verify(alarmDao, times(1)).get(anyObject());

        // Clear all of the BSs and reload
        deleteAllBusinessServices();
        reloadBsmd();
        assertThat("Alarm polling should be disabled where there are no services.",
                m_bsmd.isAlarmPolling(), equalTo(false));
    }

