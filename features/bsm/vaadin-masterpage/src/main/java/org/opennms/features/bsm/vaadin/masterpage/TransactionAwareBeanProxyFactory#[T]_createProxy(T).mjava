    /**
     * Creates a proxy for the given object. The object must already been instantiated.
     * The proxy creation is quite different from the creation of the standard java Proxy pattern.
     * The returned proxy wraps ALL method calls around a transaction scope.
     * @param createProxyFor The object to create the proxy for. Must not be null.
     * @param <T> The type of the proxy object.
     * @return The proxy of the object to proxy where each method call is enforced to run within a transaction scope.
     */
    public <T> T createProxy(final T createProxyFor) {
        Objects.requireNonNull(createProxyFor);
        final ProxyFactory proxyFactory = new ProxyFactory(createProxyFor);
        proxyFactory.addAdvice(new MethodInterceptor() {
            @Override
            public Object invoke(MethodInvocation invocation) throws Throwable {
                Object result = transactionOperations.execute(new TransactionCallback<Object>() {
                    @Override
                    public Object doInTransaction(TransactionStatus status) {
                        try {
                            return invocation.getMethod().invoke(invocation.getThis(), invocation.getArguments());
                        } catch (IllegalAccessException | InvocationTargetException e) {
                            throw new RuntimeException(e);
                        }
                    }
                });
                return result;
            }
        });
        T transactionAwareProxy = (T) proxyFactory.getProxy();
        return transactionAwareProxy;
    }

