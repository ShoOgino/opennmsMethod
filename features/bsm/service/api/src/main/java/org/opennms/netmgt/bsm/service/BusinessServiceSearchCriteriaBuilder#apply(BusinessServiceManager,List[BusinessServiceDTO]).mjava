    @Override
    public List<BusinessServiceDTO> apply(BusinessServiceManager businessServiceManager, List<BusinessServiceDTO> businessServiceDTOs) {
        Stream<BusinessServiceDTO> s = businessServiceDTOs.stream();

        for (String nameRegexp : m_nameFilters) {
            s = s.filter(p -> p.getName().matches(nameRegexp));
        }


        for (Pair<String, String> pair : m_attributeFilters) {
            s = s.filter(p -> p.getAttributes().containsKey(pair.getA()) && p.getAttributes().get(pair.getA()).matches(pair.getB()));
        }

        for (Pair<CompareOperator, String> pair : m_severityFilters) {
            s = s.filter(p -> pair.getA().check(businessServiceManager.getOperationalStatusForBusinessService(p.getId()).compareTo(OnmsSeverity.get(pair.getB()))));
        }

        Comparator<BusinessServiceDTO> comparator = new Comparator<BusinessServiceDTO>() {
            @Override
            public int compare(BusinessServiceDTO p1, BusinessServiceDTO p2) {
                switch (m_order) {
                    case Name: {
                        return p1.getName().compareTo(p2.getName());
                    }
                    case Severity: {
                        return businessServiceManager.getOperationalStatusForBusinessService(p1.getId()).compareTo(businessServiceManager.getOperationalStatusForBusinessService(p2.getId()));
                    }
                    default:
                        throw new IllegalArgumentException("Order not set");
                }
            }
        };

        if (!m_ascending) {
            comparator = comparator.reversed();
        }

        s = s.sorted(comparator);

        if (m_limit > 0) {
            s = s.limit(m_limit);
        }

        return s.collect(Collectors.toList());
    }

