    @Override
    public Optional<Status> reduce(Map<Edge, Status> edgeStatusMap) {
        // define weight factor
        final int weightSum = edgeStatusMap.keySet().stream().mapToInt(e -> e.getWeight()).sum();
        final Map<Edge, Double> weightMap = new HashMap<>();
        edgeStatusMap.keySet().forEach(e -> {
            double weightFactor = (double) e.getWeight() / (double) weightSum;
            weightMap.put(e, weightFactor);
        });
        // define status weight
        Map<Status, Double> statusWeightMap = new HashMap<>();
        for (Status eachStatus : Status.values()) {
            double statusTotal = edgeStatusMap.entrySet().stream().filter(e -> e.getValue().isGreaterThanOrEqual(eachStatus)).mapToDouble(e -> weightMap.get(e.getKey())).sum();
            statusWeightMap.put(eachStatus, statusTotal);
        }
        // get maximum severity
        Optional<Status> reducedStatus = statusWeightMap.keySet().stream().sorted((o1, o2) -> -1 * o1.compareTo(o2)).filter(status -> statusWeightMap.get(status).doubleValue() >= m_threshold).findFirst();
        return reducedStatus;
    }

