    @Override
    public Optional<StatusWithIndices> reduce(List<StatusWithIndex> statuses) {
        // Exit early for no incoming statuses
        if (statuses.isEmpty()) {
            return Optional.empty();
        }

        // Unfortunately, our computation will result in a normal severity when all input statuses are
        // indeterminate. So, we have to handle this case explicitly here...
        if (Iterables.all(statuses, si -> si.getStatus() == Status.INDETERMINATE)) {
            return Optional.empty();
        }

        // Get the exponential sum of all child states
        final double sum = statuses.stream()
                                   .filter(si -> si.getStatus().ordinal() >= Status.WARNING.ordinal())                          // Ignore normal and indeterminate
                                   .mapToDouble(si -> Math.pow(this.base, (double)(si.getStatus().ordinal() - Status.WARNING.ordinal()))) // Offset to warning = n^0
                                   .sum();

        // Grab the indices from all the statuses that contributed to the sum
        // since these contribute to the cause
        final List<Integer> contributingIndices = statuses.stream()
            .filter(si -> si.getStatus().ordinal() >= Status.WARNING.ordinal())
            .map(StatusWithIndex::getIndex)
            .distinct()
            .sorted()
            .collect(Collectors.toList());

        // Get the log n of the sum
        final int res = (int) Math.floor(Math.log(sum) / Math.log(this.base)) + Status.WARNING.ordinal(); // Revert offset from above

        // Find the resulting status and treat values lower than NORMAL.ordinal() as NORMAL.ordinal() and
        // all values higher than CRITICAL.ordinal() as CRITICAL.ordinal()
        final Status effectiveStatus = Status.get(Math.max(Math.min(res, Status.CRITICAL.ordinal()), Status.NORMAL.ordinal()));
        return Optional.of(new StatusWithIndices(effectiveStatus, contributingIndices));
    }

