    @Test
    public void testLoopDetection() {
        BusinessServiceEntity service1 = createDummyBusinessService("Business Service #1");
        BusinessServiceEntity service2 = createDummyBusinessService("Business Service #2");
        BusinessServiceEntity service3 = createDummyBusinessService("Business Service #3");

        Long serviceId1 = businessServiceDao.save(service1);
        Long serviceId2 = businessServiceDao.save(service2);
        Long serviceId3 = businessServiceDao.save(service3);

        BusinessService bs1 = getBusinessService(serviceId1);
        BusinessService bs2 = getBusinessService(serviceId2);
        BusinessService bs3 = getBusinessService(serviceId3);

        Assert.assertEquals(ImmutableSet.of(businessServiceManager.getBusinessServiceById(serviceId2),
                                            businessServiceManager.getBusinessServiceById(serviceId3)),
                            businessServiceManager.getFeasibleChildServices(businessServiceManager.getBusinessServiceById(serviceId1)));
        Assert.assertEquals(ImmutableSet.of(businessServiceManager.getBusinessServiceById(serviceId1),
                                            businessServiceManager.getBusinessServiceById(serviceId3)),
                            businessServiceManager.getFeasibleChildServices(businessServiceManager.getBusinessServiceById(serviceId2)));
        Assert.assertEquals(ImmutableSet.of(businessServiceManager.getBusinessServiceById(serviceId1),
                                            businessServiceManager.getBusinessServiceById(serviceId2)),
                            businessServiceManager.getFeasibleChildServices(businessServiceManager.getBusinessServiceById(serviceId3)));

        businessServiceManager.assignChildService(bs1, bs2);
        bs1.save();
        bs2.save();

        Assert.assertEquals(ImmutableSet.of(businessServiceManager.getBusinessServiceById(serviceId2),
                                            businessServiceManager.getBusinessServiceById(serviceId3)),
                            businessServiceManager.getFeasibleChildServices(businessServiceManager.getBusinessServiceById(serviceId1)));
        Assert.assertEquals(ImmutableSet.of(businessServiceManager.getBusinessServiceById(serviceId3)),
                            businessServiceManager.getFeasibleChildServices(businessServiceManager.getBusinessServiceById(serviceId2)));
        Assert.assertEquals(ImmutableSet.of(businessServiceManager.getBusinessServiceById(serviceId1),
                                            businessServiceManager.getBusinessServiceById(serviceId2)),
                            businessServiceManager.getFeasibleChildServices(businessServiceManager.getBusinessServiceById(serviceId3)));

        businessServiceManager.assignChildService(bs2, bs3);
        bs2.save();
        bs3.save();

        Assert.assertEquals(ImmutableSet.of(businessServiceManager.getBusinessServiceById(serviceId2),
                                            businessServiceManager.getBusinessServiceById(serviceId3)),
                            businessServiceManager.getFeasibleChildServices(businessServiceManager.getBusinessServiceById(serviceId1)));
        Assert.assertEquals(ImmutableSet.of(businessServiceManager.getBusinessServiceById(serviceId3)),
                            businessServiceManager.getFeasibleChildServices(businessServiceManager.getBusinessServiceById(serviceId2)));
        Assert.assertEquals(ImmutableSet.of(),
                            businessServiceManager.getFeasibleChildServices(businessServiceManager.getBusinessServiceById(serviceId3)));
    }

