    @Test
    public void canMaintainStateBambooHierarchy() {
        BambooTestHierarchy testHierarchy = new BambooTestHierarchy();
        testHierarchy.getServices().forEach( entity -> businessServiceDao.save(entity));

        // setup the test data
        BambooTestHierarchy testSpecification = new BambooTestHierarchy();
        testSpecification.getServices().forEach( entity -> businessServiceDao.save(entity));
        final List<String> reductionKeys = Lists.newArrayList(
                DISK_USAGE_THRESHOLD_BAMBO_REDUCTION_KEY,
                HTTP_8085_BAMBOO_REDUCTION_KEY,
                BAMBOO_AGENT_CAROLINA_REDUCTION_KEY,
                BAMBOO_AGENT_DUKE_REDUCTION_KEY,
                BAMBOO_AGENT_NCSTATE_REDUCTION_KEY);

        // Setup the State Machine
        final DefaultBusinessServiceStateMachine stateMachine = new DefaultBusinessServiceStateMachine();
        stateMachine.setBusinessServices(
                testSpecification.getServices().stream().map(s -> wrap(s)).collect(Collectors.toList())
        );
        LoggingStateChangeHandler handler = new LoggingStateChangeHandler();
        stateMachine.addHandler(handler, null);

        // Verify the initial state
        for (String eachKey : reductionKeys) {
            Assert.assertEquals(null, stateMachine.getOperationalStatus(eachKey));
        }

        // Pass alarms to the state machine
        // Business Service "Master"
        stateMachine.handleNewOrUpdatedAlarm(createAlarmWrapper("uei.opennms.org/dummy", OnmsSeverity.INDETERMINATE, HTTP_8085_BAMBOO_REDUCTION_KEY));
        assertEquals(0, handler.getStateChanges().size()); // no state change
        stateMachine.handleNewOrUpdatedAlarm(createAlarmWrapper("uei.opennms.org/dummy", OnmsSeverity.WARNING, DISK_USAGE_THRESHOLD_BAMBO_REDUCTION_KEY));
        assertEquals(2, handler.getStateChanges().size()); // "Master" and "Bamboo" changed
        // Business Service "Agents"
        stateMachine.handleNewOrUpdatedAlarm(createAlarmWrapper("uei.opennms.org/dummy", OnmsSeverity.MINOR, BAMBOO_AGENT_DUKE_REDUCTION_KEY));
        assertEquals(2 , handler.getStateChanges().size()); // no state change (threshold not met)
        stateMachine.handleNewOrUpdatedAlarm(createAlarmWrapper("uei.opennms.org/dummy", OnmsSeverity.NORMAL, BAMBOO_AGENT_NCSTATE_REDUCTION_KEY));
        assertEquals(2 , handler.getStateChanges().size()); // no state change (threshold not met)
        stateMachine.handleNewOrUpdatedAlarm(createAlarmWrapper("uei.opennms.org/dummy", OnmsSeverity.MAJOR, BAMBOO_AGENT_CAROLINA_REDUCTION_KEY));
        assertEquals(4 , handler.getStateChanges().size()); // state change (threshold met) for "Agents" and "Bamboo"


        // Verify the updated state
        assertEquals(Status.MINOR, stateMachine.getOperationalStatus(BAMBOO_AGENT_DUKE_REDUCTION_KEY));
        assertEquals(Status.MAJOR, stateMachine.getOperationalStatus(BAMBOO_AGENT_CAROLINA_REDUCTION_KEY));
        assertEquals(Status.NORMAL, stateMachine.getOperationalStatus(BAMBOO_AGENT_NCSTATE_REDUCTION_KEY));
        assertEquals(Status.INDETERMINATE, stateMachine.getOperationalStatus(HTTP_8085_BAMBOO_REDUCTION_KEY));
        assertEquals(Status.WARNING, stateMachine.getOperationalStatus(DISK_USAGE_THRESHOLD_BAMBO_REDUCTION_KEY));
        assertEquals(Status.WARNING, stateMachine.getOperationalStatus(wrap(testSpecification.getMasterService()))); // Business Service "Master"
        assertEquals(Status.MAJOR, stateMachine.getOperationalStatus(wrap(testSpecification.getAgentsService()))); // Business Service "Agents"
        assertEquals(Status.MAJOR, stateMachine.getOperationalStatus(wrap(testSpecification.getBambooService()))); // Business Service "Bamboo" (root)
    }

