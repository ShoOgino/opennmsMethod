    @Test
    public void canGetOperationalStatusForIpServices() {
        // Setup the the test hierarchy
        SimpleTestHierarchy simpleTestHierarchy = new SimpleTestHierarchy(populator);
        simpleTestHierarchy.getServices().forEach(entity -> businessServiceDao.save(entity));
        final BusinessServiceEntity root = simpleTestHierarchy.getRoot();
        final IPServiceEdgeEntity serviceChild1 = simpleTestHierarchy.getServiceChild1();
        final IPServiceEdgeEntity serviceChild2 = simpleTestHierarchy.getServiceChild2();

        // Setup the State Machine
        DefaultBusinessServiceStateMachine stateMachine = new DefaultBusinessServiceStateMachine();
        stateMachine.setBusinessServices(
                simpleTestHierarchy.getServices().stream().map(s -> wrap(s)).collect(Collectors.toList())
        );

        // Verify the initial state
        assertEquals(Status.NORMAL, stateMachine.getOperationalStatus(wrap(root)));
        assertEquals(Status.NORMAL, stateMachine.getOperationalStatus(wrap(simpleTestHierarchy.getChild1())));
        assertEquals(Status.NORMAL, stateMachine.getOperationalStatus(wrap(simpleTestHierarchy.getChild2())));
        assertEquals(Status.NORMAL, stateMachine.getOperationalStatus(wrap(serviceChild1)));
        assertEquals(Status.NORMAL, stateMachine.getOperationalStatus(wrap(serviceChild2)));

        // Node lost service alarm
        String nodeLostServiceReductionKey = ReductionKeyHelper.getNodeLostServiceReductionKey(serviceChild1.getIpService());
        stateMachine.handleNewOrUpdatedAlarm(createAlarmWrapper(EventConstants.NODE_LOST_SERVICE_EVENT_UEI, OnmsSeverity.WARNING, nodeLostServiceReductionKey));

        // Verify state
        assertEquals(Status.WARNING, stateMachine.getOperationalStatus(wrap(serviceChild1)));
        assertEquals(Status.NORMAL, stateMachine.getOperationalStatus(wrap(serviceChild2)));

        // Interface down alarm
        String interfaceDownReductionKey = ReductionKeyHelper.getInterfaceDownReductionKey(serviceChild1.getIpService());
        stateMachine.handleNewOrUpdatedAlarm(createAlarmWrapper(EventConstants.INTERFACE_DOWN_EVENT_UEI, OnmsSeverity.MINOR, interfaceDownReductionKey));

        // Verify state
        assertEquals(Status.MINOR, stateMachine.getOperationalStatus(wrap(serviceChild1)));
        assertEquals(Status.NORMAL, stateMachine.getOperationalStatus(wrap(serviceChild2)));
        assertEquals(Status.MINOR, stateMachine.getOperationalStatus(wrap(root)));

        // Node down alarm
        String nodeDownReductionKey = ReductionKeyHelper.getNodeDownReductionKey(serviceChild1.getIpService());
        stateMachine.handleNewOrUpdatedAlarm(createAlarmWrapper(EventConstants.NODE_DOWN_EVENT_UEI, OnmsSeverity.MAJOR, nodeDownReductionKey));

        // Verify state
        Assert.assertEquals(Status.MAJOR, stateMachine.getOperationalStatus(wrap(serviceChild1)));
        Assert.assertEquals(Status.NORMAL, stateMachine.getOperationalStatus(wrap(serviceChild2)));
        Assert.assertEquals(Status.MAJOR, stateMachine.getOperationalStatus(wrap(root)));
    }

