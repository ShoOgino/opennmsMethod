    @Test
    public void canLookupNewAlarmsWhenReloading() {
        // Create a simple hierarchy
        MockBusinessServiceHierarchy h = MockBusinessServiceHierarchy.builder()
                .withBusinessService(1)
                    .withReductionKey(1, "a1")
                    .commit()
                .build();
        ReadOnlyBusinessService b1 = h.getBusinessServiceById(1);
        ReadOnlyEdge a1 = h.getEdgeByReductionKey("a1");

        // Setup the state machine
        DefaultBusinessServiceStateMachine stateMachine = new DefaultBusinessServiceStateMachine();
        LoggingStateChangeHandler stateChangeHandler = new LoggingStateChangeHandler();
        stateMachine.addHandler(stateChangeHandler, Maps.newHashMap());
        stateMachine.setBusinessServices(h.getBusinessServices());

        stateMachine.setAlarmProvider(new AlarmProvider() {
            @Override
            public AlarmWrapper lookup(String reductionKey) {
                switch (reductionKey) {
                case "a2":
                    return new MockAlarmWrapper(reductionKey, Status.CRITICAL);
                }
                return null;
            }
        });

        // Verify the initial state
        assertEquals(Status.NORMAL, stateMachine.getOperationalStatus(b1));
        assertEquals(Status.NORMAL, stateMachine.getOperationalStatus(a1));
        assertEquals(0, stateChangeHandler.getStateChanges().size());

        // Send an alarm and verify the updated state
        stateMachine.handleNewOrUpdatedAlarm(new MockAlarmWrapper("a1", Status.MINOR));
        assertEquals(Status.MINOR, stateMachine.getOperationalStatus(b1));
        assertEquals(Status.MINOR, stateMachine.getOperationalStatus(a1));
        assertEquals(1, stateChangeHandler.getStateChanges().size());

        // Update the hierarchy and reload the state machine
        h = MockBusinessServiceHierarchy.builder()
                .withBusinessService(1)
                    .withReductionKey(1, "a1")
                    .withReductionKey(2, "a2")
                    .commit()
                .build();
        stateMachine.setBusinessServices(h.getBusinessServices());
        ReadOnlyEdge a2 = h.getEdgeByReductionKey("a2");

        // The state should be upgraded
        assertEquals(Status.CRITICAL, stateMachine.getOperationalStatus(b1));
        assertEquals(Status.MINOR, stateMachine.getOperationalStatus(a1));
        assertEquals(Status.CRITICAL, stateMachine.getOperationalStatus(a2));
        // One additional state change event should have been generated
        assertEquals(2, stateChangeHandler.getStateChanges().size());
    }

