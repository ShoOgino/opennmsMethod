    @Test
    public void verifyGetOperationalStatusForIpServices() {
        // Determine reduction keys
        final OnmsMonitoredService serviceChild1 = testSpecification.getServiceChild1();
        final OnmsMonitoredService serviceChild2 = testSpecification.getServiceChild2();
        final BusinessServiceEntity root = testSpecification.getRoot();
        final String nodeLostServiceReductionKey = ReductionKeyHelper.getNodeLostServiceReductionKey(serviceChild1);
        final String nodeDownReductionKey = ReductionKeyHelper.getNodeDownReductionKey(serviceChild1);

        // Setup the State Machine
        DefaultBusinessServiceStateMachine stateMachine = new DefaultBusinessServiceStateMachine();
        stateMachine.setBusinessServices(
                testSpecification.getServices().stream().map(s -> wrap(s)).collect(Collectors.toList())
        );

        // Verify the initial state
        Assert.assertEquals(null, stateMachine.getOperationalStatus(nodeLostServiceReductionKey));
        Assert.assertEquals(null, stateMachine.getOperationalStatus(nodeDownReductionKey));
        Assert.assertEquals(Status.NORMAL, stateMachine.getOperationalStatus(wrap(serviceChild1)));
        Assert.assertEquals(Status.NORMAL, stateMachine.getOperationalStatus(wrap(serviceChild2)));
        Assert.assertEquals(Status.NORMAL, stateMachine.getOperationalStatus(wrap(root)));
        Assert.assertEquals(Lists.newArrayList(Status.NORMAL), stateMachine.getStatusListForReduceFunction(wrap(testSpecification.getChild1())));
        Assert.assertEquals(Lists.newArrayList(Status.NORMAL, Status.NORMAL), stateMachine.getStatusListForReduceFunction(wrap(testSpecification.getRoot())));

        // node lost service alarm
        stateMachine.handleNewOrUpdatedAlarm(createAlarmWrapper(EventConstants.NODE_LOST_SERVICE_EVENT_UEI, OnmsSeverity.WARNING, nodeLostServiceReductionKey));

        // verify state
        Assert.assertEquals(Status.WARNING, stateMachine.getOperationalStatus(nodeLostServiceReductionKey));
        Assert.assertEquals(null, stateMachine.getOperationalStatus(nodeDownReductionKey));
        Assert.assertEquals(Status.WARNING, stateMachine.getOperationalStatus(wrap(serviceChild1)));
        Assert.assertEquals(Status.NORMAL, stateMachine.getOperationalStatus(wrap(serviceChild2)));
        Assert.assertEquals(Lists.newArrayList(Status.WARNING), stateMachine.getStatusListForReduceFunction(wrap(testSpecification.getChild1())));
        Assert.assertEquals(Status.WARNING, stateMachine.getOperationalStatus(wrap(root)));
        Assert.assertEquals(Lists.newArrayList(Status.WARNING, Status.NORMAL), stateMachine.getStatusListForReduceFunction(wrap(testSpecification.getRoot())));

        // node down alarm
        stateMachine.handleNewOrUpdatedAlarm(createAlarmWrapper(EventConstants.NODE_DOWN_EVENT_UEI, OnmsSeverity.MINOR, nodeDownReductionKey));

        // verify state
        Assert.assertEquals(Status.WARNING, stateMachine.getOperationalStatus(nodeLostServiceReductionKey));
        Assert.assertEquals(Status.MINOR, stateMachine.getOperationalStatus(nodeDownReductionKey));
        Assert.assertEquals(Status.MINOR, stateMachine.getOperationalStatus(wrap(serviceChild1)));
        Assert.assertEquals(Status.NORMAL, stateMachine.getOperationalStatus(wrap(serviceChild2)));
        Assert.assertEquals(Status.MINOR, stateMachine.getOperationalStatus(wrap(root)));
        Assert.assertEquals(Lists.newArrayList(Status.MINOR, Status.NORMAL), stateMachine.getStatusListForReduceFunction(wrap(testSpecification.getRoot())));
    }

