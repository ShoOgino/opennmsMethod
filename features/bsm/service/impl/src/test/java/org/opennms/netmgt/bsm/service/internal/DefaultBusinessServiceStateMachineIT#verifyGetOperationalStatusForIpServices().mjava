    @Test
    public void verifyGetOperationalStatusForIpServices() {
        // setup the test data
        SimpleTestHierarchy simpleTestHierarchy = new SimpleTestHierarchy(populator);
        simpleTestHierarchy.getServices().forEach( entity -> businessServiceDao.save(entity));

        // Determine reduction keys
        final OnmsMonitoredService serviceChild1 = simpleTestHierarchy.getServiceChild1();
        final OnmsMonitoredService serviceChild2 = simpleTestHierarchy.getServiceChild2();
        final BusinessServiceEntity root = simpleTestHierarchy.getRoot();
        final String nodeLostServiceReductionKey = ReductionKeyHelper.getNodeLostServiceReductionKey(serviceChild1);
        final String nodeDownReductionKey = ReductionKeyHelper.getNodeDownReductionKey(serviceChild1);
        final String interfaceDownReductionKey = ReductionKeyHelper.getInterfaceDownReductionKey(serviceChild1);

        // Setup the State Machine
        DefaultBusinessServiceStateMachine stateMachine = new DefaultBusinessServiceStateMachine();
        stateMachine.setBusinessServices(
                simpleTestHierarchy.getServices().stream().map(s -> wrap(s)).collect(Collectors.toList())
        );

        // Verify the initial state
        Assert.assertEquals(null, stateMachine.getOperationalStatus(nodeLostServiceReductionKey));
        Assert.assertEquals(null, stateMachine.getOperationalStatus(nodeDownReductionKey));
        Assert.assertEquals(null, stateMachine.getOperationalStatus(interfaceDownReductionKey));
        Assert.assertEquals(Status.NORMAL, stateMachine.getOperationalStatus(wrap(serviceChild1)));
        Assert.assertEquals(Status.NORMAL, stateMachine.getOperationalStatus(wrap(serviceChild2)));
        Assert.assertEquals(Status.NORMAL, stateMachine.getOperationalStatus(wrap(root)));
        Assert.assertEquals(
                Lists.newArrayList(Status.NORMAL),
                Lists.newArrayList(stateMachine.getStatusMapForReduceFunction(wrap(simpleTestHierarchy.getChild1())).values()));
        Assert.assertEquals(
                Lists.newArrayList(Status.NORMAL, Status.NORMAL),
                Lists.newArrayList(stateMachine.getStatusMapForReduceFunction(wrap(simpleTestHierarchy.getRoot())).values()));

        // node lost service alarm
        stateMachine.handleNewOrUpdatedAlarm(createAlarmWrapper(EventConstants.NODE_LOST_SERVICE_EVENT_UEI, OnmsSeverity.WARNING, nodeLostServiceReductionKey));

        // verify state
        Assert.assertEquals(Status.WARNING, stateMachine.getOperationalStatus(nodeLostServiceReductionKey));
        Assert.assertEquals(null, stateMachine.getOperationalStatus(nodeDownReductionKey));
        Assert.assertEquals(null, stateMachine.getOperationalStatus(interfaceDownReductionKey));
        Assert.assertEquals(Status.WARNING, stateMachine.getOperationalStatus(wrap(serviceChild1)));
        Assert.assertEquals(Status.NORMAL, stateMachine.getOperationalStatus(wrap(serviceChild2)));
        Assert.assertEquals(
                Lists.newArrayList(Status.WARNING),
                Lists.newArrayList(stateMachine.getStatusMapForReduceFunction(wrap(simpleTestHierarchy.getChild1())).values()));
        Assert.assertEquals(Status.WARNING, stateMachine.getOperationalStatus(wrap(root)));
        Assert.assertEquals(
                Lists.newArrayList(Status.WARNING, Status.NORMAL),
                Lists.newArrayList(stateMachine.getStatusMapForReduceFunction(wrap(simpleTestHierarchy.getRoot())).values()));

        // node down alarm
        stateMachine.handleNewOrUpdatedAlarm(createAlarmWrapper(EventConstants.NODE_DOWN_EVENT_UEI, OnmsSeverity.MINOR, nodeDownReductionKey));

        // verify state
        Assert.assertEquals(Status.WARNING, stateMachine.getOperationalStatus(nodeLostServiceReductionKey));
        Assert.assertEquals(Status.MINOR, stateMachine.getOperationalStatus(nodeDownReductionKey));
        Assert.assertEquals(null, stateMachine.getOperationalStatus(interfaceDownReductionKey));
        Assert.assertEquals(Status.MINOR, stateMachine.getOperationalStatus(wrap(serviceChild1)));
        Assert.assertEquals(Status.NORMAL, stateMachine.getOperationalStatus(wrap(serviceChild2)));
        Assert.assertEquals(Status.MINOR, stateMachine.getOperationalStatus(wrap(root)));
        Assert.assertEquals(
                Lists.newArrayList(Status.MINOR, Status.NORMAL),
                Lists.newArrayList(stateMachine.getStatusMapForReduceFunction(wrap(simpleTestHierarchy.getRoot())).values()));

        // interface down alarm
        stateMachine.handleNewOrUpdatedAlarm(createAlarmWrapper(EventConstants.INTERFACE_DOWN_EVENT_UEI, OnmsSeverity.MAJOR, interfaceDownReductionKey));

        // verify state
        Assert.assertEquals(Status.WARNING, stateMachine.getOperationalStatus(nodeLostServiceReductionKey));
        Assert.assertEquals(Status.MINOR, stateMachine.getOperationalStatus(nodeDownReductionKey));
        Assert.assertEquals(Status.MAJOR, stateMachine.getOperationalStatus(interfaceDownReductionKey));
        Assert.assertEquals(Status.MAJOR, stateMachine.getOperationalStatus(wrap(serviceChild1)));
        Assert.assertEquals(Status.NORMAL, stateMachine.getOperationalStatus(wrap(serviceChild2)));
        Assert.assertEquals(Status.MAJOR, stateMachine.getOperationalStatus(wrap(root)));
        Assert.assertEquals(
                Lists.newArrayList(Status.MAJOR, Status.NORMAL),
                Lists.newArrayList(stateMachine.getStatusMapForReduceFunction(wrap(simpleTestHierarchy.getRoot())).values()));
    }

