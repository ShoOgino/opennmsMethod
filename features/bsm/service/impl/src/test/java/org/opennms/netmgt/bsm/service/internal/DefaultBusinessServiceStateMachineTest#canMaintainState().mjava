    @Test
    public void canMaintainState() {
        BsmTestData testSpecification = createSimpleHierarchy();
        List<BusinessServiceEntity> bss = testSpecification.getServices();

        // Setup the state machine
        LoggingStateChangeHandler handler = new LoggingStateChangeHandler();
        DefaultBusinessServiceStateMachine stateMachine = new DefaultBusinessServiceStateMachine();
        stateMachine.setBusinessServices(bss);
        stateMachine.addHandler(handler, null);

        // Verify the initial state
        assertEquals(0, handler.getStateChanges().size());
        for (BusinessServiceEntity eachBs : bss) {
            assertEquals(DefaultBusinessServiceStateMachine.DEFAULT_SEVERITY, stateMachine.getOperationalStatus(eachBs));
        }

        BusinessServiceEntity bsChild1 = testSpecification.findByName("Child 1");
        BusinessServiceEntity bsChild2 = testSpecification.findByName("Child 2");
        BusinessServiceEntity bsParent = testSpecification.findByName("Parent");
        OnmsMonitoredService svc1 = testSpecification.findIpService("192.168.1.1", "ICMP");
        OnmsMonitoredService svc2 = testSpecification.findIpService("192.168.1.2", "SNMP");

        // Pass the alarm to the state machine
        stateMachine.handleNewOrUpdatedAlarm(createAlarm(svc1, OnmsSeverity.MINOR));

        // Verify the updated state
        assertEquals(2, handler.getStateChanges().size());
        assertEquals(OnmsSeverity.MINOR, stateMachine.getOperationalStatus(svc1));
        assertEquals(OnmsSeverity.MINOR, stateMachine.getOperationalStatus(bsChild1));
        assertEquals(DefaultBusinessServiceStateMachine.DEFAULT_SEVERITY, stateMachine.getOperationalStatus(svc2));
        assertEquals(DefaultBusinessServiceStateMachine.DEFAULT_SEVERITY, stateMachine.getOperationalStatus(bsChild2));
        assertEquals(OnmsSeverity.MINOR, stateMachine.getOperationalStatus(bsParent));

        // Verify that hierarchy also works
        stateMachine.handleNewOrUpdatedAlarm(BsmTestUtils.createAlarm(svc2, OnmsSeverity.MAJOR));
        assertEquals(4, handler.getStateChanges().size());
        assertEquals(OnmsSeverity.MINOR, stateMachine.getOperationalStatus(svc1));
        assertEquals(OnmsSeverity.MINOR, stateMachine.getOperationalStatus(bsChild1));
        assertEquals(OnmsSeverity.MAJOR, stateMachine.getOperationalStatus(svc2));
        assertEquals(OnmsSeverity.MAJOR, stateMachine.getOperationalStatus(bsChild2));
        assertEquals(OnmsSeverity.MAJOR, stateMachine.getOperationalStatus(bsParent));
    }

