    /**
     * Used to visualize, or manually inspect the generated graph.
     */
    protected static void visualizeGraph(BusinessServiceGraph graph) {
        Layout<GraphVertex,GraphEdge> layout = new KKLayout<GraphVertex,GraphEdge>(graph);
        layout.setSize(new Dimension(1024,1024)); // Size of the layout
        BasicVisualizationServer<GraphVertex,GraphEdge> vv = new BasicVisualizationServer<GraphVertex,GraphEdge>(layout);
        vv.setPreferredSize(new Dimension(1200,1200)); // Viewing area size
        vv.getRenderContext().setVertexLabelTransformer(new Transformer<GraphVertex,String>() {
            @Override
            public String transform(GraphVertex vertex) {
                if (vertex.getBusinessService() != null) {
                    return String.format("BS[%s]", vertex.getBusinessService().getName());
                } else {
                    return String.format("%s[%d]", vertex.getEdge().getType(), vertex.getEdge().getId());
                }
            }
        });
        vv.getRenderContext().setEdgeLabelTransformer(new Transformer<GraphEdge,String>() {
            @Override
            public String transform(GraphEdge edge) {
                return String.format("%s", edge.getMapFunction().getClass().getSimpleName());
            }
        });

        JFrame frame = new JFrame("Business Service graph");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.getContentPane().add(vv);
        frame.pack();
        frame.setVisible(true); 

        final AtomicBoolean isFrameClosed = new AtomicBoolean(false);
        frame.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent event) {
                isFrameClosed.set(true);
            }
        });

        while(true) {
            try {
                Thread.sleep(50);
            } catch (InterruptedException e) {
                throw Throwables.propagate(e);
            }
            if (!frame.isVisible()) {
                break;
            }
        }
    }

