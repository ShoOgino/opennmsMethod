    /**
     * Verifies that the RCA and IA algorithms can be performed
     * against business services that reference 100+ reduction keys. 
     *
     * See NMS-8527 for details.
     */
    @Test(timeout=10000)
    public void canEfficientlyPerformRootCauseAnalysis() {
        final int NUMBER_OF_REDUCTION_KEYS_PER_BS = 2500;
        HighestSeverity highestSeverity = new HighestSeverity();

        BusinessServiceBuilder builder = MockBusinessServiceHierarchy.builder()
                .withBusinessService(1)
                .withName("b1")
                .withReductionFunction(highestSeverity);
        
        for (int i = 0; i < NUMBER_OF_REDUCTION_KEYS_PER_BS; i++) {
            builder.withReductionKey(i, "a"+ i);
        }

        MockBusinessServiceHierarchy h = builder.commit().build();

        // Setup the state machine
        DefaultBusinessServiceStateMachine stateMachine = new DefaultBusinessServiceStateMachine();
        stateMachine.setBusinessServices(h.getBusinessServices());

        // Bump b1 to MINOR, cause by a1
        stateMachine.handleNewOrUpdatedAlarm(new MockAlarmWrapper("a1", Status.MINOR));

        // Verify the state
        assertEquals(Status.MINOR, stateMachine.getOperationalStatus(h.getBusinessServiceById(1)));

        // Calculate and verify the root cause, b1 caused by a1
        List<GraphVertex> causedby = stateMachine.calculateRootCause(h.getBusinessServiceById(1));
        assertEquals(1, causedby.size());
        assertEquals("a1", causedby.get(0).getReductionKey());

        // Now calculate the impact, a1 impacts b1
        List<GraphVertex> impacts = stateMachine.calculateImpact("a1");
        assertEquals(1, impacts.size());
        assertEquals("b1", impacts.get(0).getBusinessService().getName());
    }

