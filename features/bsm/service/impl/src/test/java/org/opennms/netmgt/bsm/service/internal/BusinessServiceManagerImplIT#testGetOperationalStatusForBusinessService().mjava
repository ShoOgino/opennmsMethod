    @Test
    public void testGetOperationalStatusForBusinessService() {
        BusinessService bsService1 = createBusinessService("Dummy Business Service");
        BusinessService bsService2 = createBusinessService("Another Dummy Business Service");
        businessServiceStateMachine.setBusinessServices(Lists.newArrayList(bsService1, bsService2));
        final IpService ipServiceWithId5 = getIpService(5);
        final IpService ipServiceWithId6 = getIpService(6);

        // no ip services attached
        Assert.assertEquals(Status.NORMAL, businessServiceManager.getOperationalStatus(bsService1));
        Assert.assertEquals(Status.NORMAL, businessServiceManager.getOperationalStatus(bsService2));

        // ip services attached
        businessServiceManager.addIpServiceEdge(bsService1, ipServiceWithId5, new Identity(), Edge.DEFAULT_WEIGHT);
        businessServiceManager.addIpServiceEdge(bsService2, ipServiceWithId6, new Identity(), Edge.DEFAULT_WEIGHT);
        bsService1.save();
        bsService2.save();
        businessServiceDao.flush();
        Assert.assertFalse("Services are equal but should not", Objects.equals(bsService1, bsService2));
        businessServiceStateMachine.setBusinessServices(Lists.newArrayList(bsService1, bsService2));

        // should not have any effect
        Assert.assertEquals(Status.NORMAL, businessServiceManager.getOperationalStatus(bsService1));
        Assert.assertEquals(Status.NORMAL, businessServiceManager.getOperationalStatus(bsService2));

        // attach NORMAL alarm to service 1
        final IpServiceEdge ipServiceEdgeOnBsService1 = bsService1.getIpServiceEdges().iterator().next();
        businessServiceStateMachine.handleNewOrUpdatedAlarm(createAlarmWrapper(monitoredServiceDao.get(5), OnmsSeverity.NORMAL));
        Assert.assertEquals(Status.NORMAL, businessServiceManager.getOperationalStatus(ipServiceEdgeOnBsService1));
        Assert.assertEquals(Status.NORMAL, businessServiceManager.getOperationalStatus(bsService1));
        Assert.assertEquals(Status.NORMAL, businessServiceManager.getOperationalStatus(bsService2));

        // attach INDETERMINATE alarm to service 1
        businessServiceStateMachine.handleNewOrUpdatedAlarm(createAlarmWrapper(monitoredServiceDao.get(5), OnmsSeverity.INDETERMINATE));
        Assert.assertEquals(Status.NORMAL, businessServiceManager.getOperationalStatus(ipServiceEdgeOnBsService1));
        Assert.assertEquals(Status.NORMAL, businessServiceManager.getOperationalStatus(bsService1));
        Assert.assertEquals(Status.NORMAL, businessServiceManager.getOperationalStatus(bsService2));

        // attach WARNING alarm to service 1
        businessServiceStateMachine.handleNewOrUpdatedAlarm(createAlarmWrapper(monitoredServiceDao.get(5), OnmsSeverity.WARNING));
        Assert.assertEquals(Status.WARNING, businessServiceManager.getOperationalStatus(ipServiceEdgeOnBsService1));
        Assert.assertEquals(Status.WARNING, businessServiceManager.getOperationalStatus(bsService1));
        Assert.assertEquals(Status.NORMAL, businessServiceManager.getOperationalStatus(bsService2));

        // attach CRITICAL alarm to service 1
        businessServiceStateMachine.handleNewOrUpdatedAlarm(createAlarmWrapper(monitoredServiceDao.get(5), OnmsSeverity.CRITICAL));
        Assert.assertEquals(Status.CRITICAL, businessServiceManager.getOperationalStatus(ipServiceEdgeOnBsService1));
        Assert.assertEquals(Status.CRITICAL, businessServiceManager.getOperationalStatus(bsService1));
        Assert.assertEquals(Status.NORMAL, businessServiceManager.getOperationalStatus(bsService2));
    }

