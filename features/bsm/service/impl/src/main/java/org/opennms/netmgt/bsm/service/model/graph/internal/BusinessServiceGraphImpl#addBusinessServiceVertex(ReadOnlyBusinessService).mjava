    private GraphVertex addBusinessServiceVertex(ReadOnlyBusinessService businessService) {
        // Use an existing vertex if we already created one
        GraphVertex businessServiceVertex = m_verticesByBusinessServiceId.get(businessService.getId());
        if (businessServiceVertex != null) {
            return businessServiceVertex;
        }

        // Create
        businessServiceVertex = new GraphVertexImpl(businessService.getReduceFunction(), businessService);
        // Add
        addVertex(businessServiceVertex);
        // Index
        m_verticesByBusinessServiceId.put(businessService.getId(), businessServiceVertex);

        for (ReadOnlyEdge edge : businessService.getEdges()) {
            // Create the edge
            GraphEdge graphEdge = new GraphEdgeImpl(edge);

            // Use an existing vertex if we already created one
            final GraphVertex[] vertexForEdge = {getExistingVertex(edge)};

            // If we couldn't find an existing vertex, create one
            if (vertexForEdge[0] == null) {
                edge.accept(new EdgeVisitor<Void>() {

                    @Override
                    public Void visit(ChildEdge edge) {
                        vertexForEdge[0] = addBusinessServiceVertex(edge.getChild());
                        return null;
                    }

                    @Override
                    public Void visit(IpServiceEdge edge) {
                        // There are multiple reductions keys for this edge
                        // Create an intermediary vertex using the Most Critical reduction function
                        vertexForEdge[0] = new GraphVertexImpl(REDUCE_HIGHEST_SEVERITY, edge.getIpService());
                        addVertex(vertexForEdge[0]);
                        m_verticesByIpServiceId.put(vertexForEdge[0].getIpService().getId(), vertexForEdge[0]);

                        // SPECIAL CASE: Map the reductions keys to the intermediary vertex using the Identity map
                        for (String reductionKey : edge.getReductionKeys()) {
                            GraphVertex reductionKeyVertex = m_verticesByReductionKey.get(reductionKey);
                            if (reductionKeyVertex == null) { // not already added
                                reductionKeyVertex = new GraphVertexImpl(REDUCE_HIGHEST_SEVERITY, reductionKey);
                                addVertex(reductionKeyVertex);
                                m_verticesByReductionKey.put(reductionKey, reductionKeyVertex);
                            }
                            // Always add an edge
                            GraphEdgeImpl intermediaryEdge = new GraphEdgeImpl(MAP_IDENTITY);
                            addEdge(intermediaryEdge, vertexForEdge[0], reductionKeyVertex);
                        }
                        return null;
                    }

                    @Override
                    public Void visit(ReductionKeyEdge edge) {
                        String reductionKey = edge.getReductionKey();
                        vertexForEdge[0] = new GraphVertexImpl(REDUCE_HIGHEST_SEVERITY, edge.getReductionKey());
                        addVertex(vertexForEdge[0]);
                        m_verticesByReductionKey.put(reductionKey, vertexForEdge[0]);
                        return null;
                    }
                });
            }

            // Link and index
            addEdge(graphEdge, businessServiceVertex, vertexForEdge[0]);
            m_verticesByEdgeId.put(edge.getId(), vertexForEdge[0]);
        }
        return businessServiceVertex;
    }

