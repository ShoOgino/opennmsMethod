    @Override
    public void handleAllAlarms(List<AlarmWrapper> alarms) {
        final Set<String> reductionKeysFromGivenAlarms = new HashSet<>(alarms.size());
        m_rwLock.writeLock().lock();
        try {
            for (AlarmWrapper alarm : alarms) {
                // Recursively propagate the status for all of the given alarms
                updateAndPropagateVertex(m_g, m_g.getVertexByReductionKey(alarm.getReductionKey()), alarm.getStatus());
                // Keep track of the reduction keys that have been processed
                reductionKeysFromGivenAlarms.add(alarm.getReductionKey());
            }

            for (String missingReductionKey : Sets.difference(m_g.getReductionKeys(), reductionKeysFromGivenAlarms)) {
                // There is a vertex on the graph that corresponds to this reduction key
                // but no alarm with this reduction key exists
                updateAndPropagateVertex(m_g, m_g.getVertexByReductionKey(missingReductionKey), Status.INDETERMINATE);
            }
        } finally {
            m_rwLock.writeLock().unlock();
        }
    }

