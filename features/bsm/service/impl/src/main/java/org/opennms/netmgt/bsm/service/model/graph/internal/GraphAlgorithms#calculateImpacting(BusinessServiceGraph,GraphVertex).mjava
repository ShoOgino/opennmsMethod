    public static Set<GraphEdge> calculateImpacting(BusinessServiceGraph graph, GraphVertex parent) {
        // Grab all of the child edges
        List<GraphEdge> childEdges = graph.getOutEdges(parent).stream()
                .collect(Collectors.toList());

        // Generate the power set of all the child edges
        Set<Set<GraphEdge>> powerSet = generatePowerSet(childEdges);

        // Sort the subsets in the power set by size
        List<Set<GraphEdge>> subsetsInAscendingSize = powerSet.stream()
                .sorted((a,b)-> a.size() - b.size())
                .collect(Collectors.toList());

        // Simulate replacing the mapped severity off all the edges
        // in a given subset with the minimal severity.
        // If the resulting  reduced value is less than the current value, we'll deem this
        // particular subset as "impacting".
        // Once we find an impacting subset, only continue the simulation with other
        // subsets of that same size, since any larger subset may contain those
        // edges along with other non-impacting edges.
        List<Set<GraphEdge>> impactingSubsets = Lists.newArrayList();
        for (Set<GraphEdge> subSet : subsetsInAscendingSize) {
            if (impactingSubsets.size() > 0 && subSet.size() > impactingSubsets.iterator().next().size()) {
                // We already found one more more smaller impacting subsets, we're done
                break;
            }

            // Gather the statuses for all of the child edges
            Map<GraphEdge, Status> edgesWithStatus = childEdges.stream()
                    .collect(Collectors.toMap(Function.identity(), e -> e.getStatus()));

            // Now replace the status for the edges in the current subset with minimum severity
            for (GraphEdge edge : subSet) {
                edgesWithStatus.put(edge, DefaultBusinessServiceStateMachine.MIN_SEVERITY);
            }

            // Weigh and reduce the statuses
            List<Status> statuses = DefaultBusinessServiceStateMachine.weighStatuses(edgesWithStatus);
            Status reducedStatus = parent.getReductionFunction().reduce(statuses).orElse(DefaultBusinessServiceStateMachine.MIN_SEVERITY);

            // Did replacing the status of the edges in the current subset affect the status?
            if (reducedStatus.isLessThan(parent.getStatus())) {
                impactingSubsets.add(subSet);
            }
        }

        // Gather the edges in all of the impacting subsets by taking the union of these
        Set<GraphEdge> union = Collections.emptySet();
        for (Set<GraphEdge> impactingSubset : impactingSubsets) {
            union = Sets.union(union, impactingSubset);
        }
        return union;
    }

