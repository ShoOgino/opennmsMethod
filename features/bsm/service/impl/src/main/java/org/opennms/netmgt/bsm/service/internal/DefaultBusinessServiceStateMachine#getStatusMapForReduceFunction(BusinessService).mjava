    protected Map<Edge, Status> getStatusMapForReduceFunction(BusinessService businessService) {
        final Map<Edge, Status> statusMap = Maps.newHashMap();
        // reduction keys
        for (ReductionKeyEdge reductionKeyEdge : businessService.getReductionKeyEdges()) {
            final Status rkStatus = m_reductionKeyStatus.get(reductionKeyEdge.getReductionKey());
            statusMap.put(reductionKeyEdge, rkStatus);
        }
        // ip services
        for (IpServiceEdge ipServiceEdge : businessService.getIpServiceEdges()) {
            final Status ipServiceStatus = getOperationalStatus(ipServiceEdge.getIpService());
            statusMap.put(ipServiceEdge, ipServiceStatus);
        }
        // business services child edges
        for (ChildEdge childEdge : businessService.getChildEdges()) {
            final Status bsStatus = m_businessServiceStatus.get(childEdge.getChild());
            statusMap.put(childEdge, bsStatus);
        }
        // for now we throw an exception.
        if (statusMap.size() != businessService.getEdges().size()) {
            throw new IllegalStateException("Determining the status map for the reduction function failed. Expected " +
                    businessService.getEdges().size() + " but got " + statusMap.size() + " mappings");
        }
        // map
        for (Edge eachEdge : businessService.getEdges()) {
            Optional<Status> mappedStatus = eachEdge.getMapFunction().map(statusMap.get(eachEdge));
            statusMap.put(eachEdge, mappedStatus.orElse(Status.INDETERMINATE));
        }
        return statusMap;
    }

