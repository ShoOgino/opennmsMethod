	/**
	 * Loads the <code>resourceName</code> from the classpath using the given
	 * <code>clazz</code>. If the resource couldn't be loaded an empty string is
	 * returned.
	 * 
	 * @param clazz
	 *            The class to use for loading the resource.
	 * @param resourceName
	 *            The name of the resource to be loaded (e.g.
	 *            /folder/filename.txt)
	 * @return The content of the file, each line separated by line.separator or
	 *         empty string if the resource does not exist.
	 */
	public static String loadContentFromFile(final Class<?> clazz, final String resourceName) {
		Objects.requireNonNull(clazz);
		Objects.requireNonNull(resourceName);
		// prevent NullPointerException

		// check if resource is there
		try (InputStream is = clazz.getResourceAsStream(resourceName);
			 ByteArrayOutputStream outputStream = new ByteArrayOutputStream()) {

			LOG.debug("Resource '{}' loaded from class '{}': '{}'", resourceName, clazz.getName(), is);
			if (is == null) {
				throw new NullPointerException(String.format("Resource '%s' not available", resourceName));
			}

			// resource is there, so we can try loading it
			ByteStreams.copy(is, outputStream);
			return outputStream.toString();
		} catch (IOException e) {
			LOG.error("Error while reading resource from '{}'.", resourceName, e);
			throw Throwables.propagate(e);
		}
	}

