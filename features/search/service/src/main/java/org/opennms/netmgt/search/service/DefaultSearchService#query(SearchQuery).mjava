    @Override
    public List<SearchResult> query(final SearchQuery query) {
        Objects.requireNonNull(query);
        if (query.getMaxResults() <= 0) {
            query.setMaxResults(SearchQuery.DEFAULT_MAX_RESULT);
        }

        // Enforce minimum length, otherwise don't query
        if (Strings.isNullOrEmpty(query.getInput()) || query.getInput().length() < 1) {
            return Collections.emptyList();
        }

        // Fetch Results grouped by context
        final Map<SearchContext, SearchResult> resultMap = new HashMap<>();
        try {
            final ServiceReference<SearchProvider>[] allServiceReferences = (ServiceReference<SearchProvider>[]) bundleContext.getServiceReferences(SearchProvider.class.getCanonicalName(), null);
            if (allServiceReferences != null) {
                for (ServiceReference<SearchProvider> eachReference : allServiceReferences) {
                    final SearchProvider service = bundleContext.getService(eachReference);
                    if (query.getContext() == null || service.getContext().contributesTo(query.getContext())) {
                        try {
                            final SearchResult providerResult = service.query(query);
                            if (resultMap.containsKey(providerResult.getContext())) {
                                final SearchResult mergedResult = resultMap.get(providerResult.getContext());
                                for (SearchResultItem eachItem : providerResult.getResults()) {
                                    mergedResult.setMore(providerResult.hasMore() || mergedResult.hasMore());
                                    mergedResult.addItem(eachItem);
                                }
                            } else {
                                resultMap.put(providerResult.getContext(), providerResult);
                            }
                        } catch (Exception ex) {
                            LOG.error("Could not execute query for provider", ex);
                        } finally {
                            bundleContext.ungetService(eachReference);
                        }
                    }
                }
            }
        } catch (InvalidSyntaxException e) {
            LOG.error("Could not fetch search providers", e);
        }

        // Sort and limit each context
        final List<SearchResult> searchResultList = resultMap.values().stream()
                .filter(searchResult -> !searchResult.isEmpty())
                .map(searchResult -> {
                        final List<SearchResultItem> limitedAndSortedItems = searchResult.getResults().stream()
                                .sorted(Comparator.comparing(SearchResultItem::getWeight).reversed().thenComparing(SearchResultItem::getLabel))
                                .limit(query.getMaxResults())
                                .collect(Collectors.toList());
                        return new SearchResult(searchResult.getContext()).withMore(searchResult.hasMore()).withResults(limitedAndSortedItems);
                    }
                )
                .sorted(Comparator.comparingInt(searchResult -> searchResult.getContext().getWeight()))
                .collect(Collectors.toList());
        return searchResultList;
    }

