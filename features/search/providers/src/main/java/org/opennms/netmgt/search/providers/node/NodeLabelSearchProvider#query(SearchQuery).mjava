    @Override
    public SearchResult query(final SearchQuery query) {
        final String input = query.getInput();
        final List<Restriction> restrictions = Lists.newArrayList(
                Restrictions.ilike("label", QueryUtils.ilike(input)),
                Restrictions.eq("foreignSource", input),
                Restrictions.eq("foreignId", input)
        );
        // Try if input could be an id
        try {
            int nodeId = Integer.parseInt(input);
            restrictions.add(Restrictions.eq("id", nodeId));
        } catch (NumberFormatException ex) {
            // expected, we ignore it
        }
        final CriteriaBuilder criteriaBuilder = new CriteriaBuilder(OnmsNode.class)
                .or(restrictions.toArray(new Restriction[restrictions.size()]))
                .distinct();
        final int totalCount = nodeDao.countMatching(criteriaBuilder.toCriteria());
        final Criteria criteria = criteriaBuilder.orderBy("label").limit(query.getMaxResults()).toCriteria();
        final List<OnmsNode> matchingNodes = nodeDao.findMatching(criteria);
        final List<SearchResultItem> searchResultItems = matchingNodes.stream().map(node -> {
            final SearchResultItem searchResultItem = new SearchResultItemBuilder().withOnmsNode(node).build();
            if (QueryUtils.equals(node.getId(), input)) {
                searchResultItem.addMatch(new Match("id", "Node ID", node.getId().toString()));
            }
            if (QueryUtils.matches(node.getForeignId(), input)) {
                searchResultItem.addMatch(new Match("foreignId", "Foreign ID", node.getForeignId()));
            }
            if (QueryUtils.matches(node.getForeignSource(), input)) {
                searchResultItem.addMatch(new Match("foreignSource", "Foreign Source", node.getForeignSource()));
            }
            if (QueryUtils.matches(node.getLabel(), input)) {
                searchResultItem.addMatch(new Match("label", "Node Label", node.getLabel()));
            }
            searchResultItem.setWeight(100);
            return searchResultItem;
        }).collect(Collectors.toList());
        final SearchResult searchResult = new SearchResult(Contexts.Node).withMore(totalCount > searchResultItems.size()).withResults(searchResultItems);
        return searchResult;
    }

