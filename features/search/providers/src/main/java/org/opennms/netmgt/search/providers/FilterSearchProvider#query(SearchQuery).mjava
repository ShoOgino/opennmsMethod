    @Override
    public SearchResult query(SearchQuery query) {
        final String input = query.getInput();
        try {
            filterDao.validateRule(input);
            final SortedMap<Integer, String> nodeMap = filterDao.getNodeMap(input);
            final CriteriaBuilder criteriaBuilder = new CriteriaBuilder(OnmsNode.class)
                    .in("id", nodeMap.keySet())
                    .orderBy("label")
                    .distinct()
                    .limit(query.getMaxResults());
            final Criteria criteria = criteriaBuilder.toCriteria();
            final List<OnmsNode> matchingNodes = nodeDao.findMatching(criteria);
            final List<SearchResultItem> searchResultItems = matchingNodes.stream()
                    .map(node -> new SearchResultItemBuilder()
                            .withOnmsNode(node)
                            .withMatch("filter.criteria", "Filter Criteria", input).build())
                    .collect(Collectors.toList());
            return new SearchResult(Contexts.Node).withResults(searchResultItems).withMore(nodeMap.size() > matchingNodes.size());
        } catch (FilterParseException ex) {
            LoggerFactory.getLogger(getClass()).debug("Cannot parse expression: {}: {}", query.getInput(), ex.getMessage());
        }
        return SearchResult.EMPTY;
    }

