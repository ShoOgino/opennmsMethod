    @Override
    public SearchResult query(SearchQuery query) {
        Objects.requireNonNull(query.getPrincipal());
        final PrincipalCacheKey cacheKey = new PrincipalCacheKey(query);
        final Actions actions = cache.getUnchecked(cacheKey);
        final String input = query.getInput();
        final List<SearchResultItem> allItemsForUser = actions.getActions().stream()
                .filter(action -> action.getPrivilegedRoles().isEmpty() || action.getPrivilegedRoles().stream().anyMatch(query::isUserInRole))
                .filter(action -> QueryUtils.matches(action.getLabel(), input) || QueryUtils.matches(action.getAliases(), input))
                .sorted(Comparator.comparing(Action::getLabel))
                .map(action -> {
                    final SearchResultItem searchResultItem = new SearchResultItem();
                    // If the label matches, use the label
                    if (QueryUtils.matches(action.getLabel(), input)) {
                        searchResultItem.setLabel(action.getLabel());
                    } else {
                        // Otherwise at least one alias matched, use it as label
                        searchResultItem.setLabel(QueryUtils.getFirstMatch(action.getAliases(), input));
                    }
                    searchResultItem.setUrl(action.getUrl());
                    searchResultItem.setIdentifier(action.getUrl());
                    if (!Strings.isNullOrEmpty(action.getIcon())) {
                        searchResultItem.setIcon(action.getIcon());
                    }
                    if (action.getWeight() != 0) {
                        searchResultItem.setWeight(action.getWeight());
                    } else if (action.getPrivilegedRoles().contains("ROLE_ADMIN")) {
                        searchResultItem.setWeight(10); // Admin actions should be on top of the list
                    }
                    return searchResultItem;
                })
                .collect(Collectors.toList());
        final List<SearchResultItem> searchResultItems = QueryUtils.shrink(allItemsForUser, query.getMaxResults());
        final SearchResult searchResult = new SearchResult(Contexts.Action)
                .withMore(allItemsForUser, searchResultItems)
                .withResults(searchResultItems);
        return searchResult;
    }

