    public MenuActionSearchProvider(MenuProvider menuProvider) {
        this.menuProvider = Objects.requireNonNull(menuProvider);
        this.cache = CacheBuilder.newBuilder()
                .expireAfterWrite(5, TimeUnit.MINUTES)
                .maximumSize(100)
                .build(new CacheLoader<PrincipalCacheKey, List<MenuEntry>>() {
                    @Override
                    public List<MenuEntry> load(PrincipalCacheKey cacheKey) throws Exception {
                        final Predicate<MenuEntry> menuFilter = e -> e.getEntries() == null || e.getEntries().isEmpty() && e.getDisplayStatus() == DisplayStatus.DISPLAY_LINK;
                        final List<MenuEntry> menu = menuProvider.getMenu((MenuContext) cacheKey);
                        final List<MenuEntry> actualMenuItems = menu.stream().filter(menuFilter).collect(Collectors.toList());
                        menu.removeAll(actualMenuItems);

                        final List<MenuEntry> otherTopLevelEntries = menu.stream().flatMap(e -> e.getEntries().stream()).filter(menuFilter).collect(Collectors.toList());
                        actualMenuItems.addAll(otherTopLevelEntries);
                        return actualMenuItems;
                    }
                });
    }

