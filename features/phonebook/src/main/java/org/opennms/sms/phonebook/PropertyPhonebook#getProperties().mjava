    /**
     * Get the current properties map.  If it exists as a file (rather than a resource)
     * it will check the last modified time and only bother reading it if it's changed.
     * 
     * @return the @{link Properties} object from the property file.  Can return a null
     * @throws PhonebookException
     */
    private Properties getProperties() throws PhonebookException {
        InputStream stream = null;
        try {
            File propertyFile = new File(m_propertyFile);
            if (propertyFile.exists()) {
                if (propertyFile.lastModified() == m_lastModified && m_lastProperties != null) {
                    return m_lastProperties;
                }
                stream = new FileInputStream(propertyFile);
                m_lastModified = propertyFile.lastModified();
            } else {
                stream = this.getClass().getResourceAsStream(m_propertyFile);
                if (stream == null) {
                    stream = this.getClass().getResourceAsStream("/" + m_propertyFile);
                }
            }
            if (stream == null) {
                throw new PhonebookException(String.format("Unable to find resource '%s' in the classpath.", m_propertyFile));
            }
            Properties p = new Properties();
            p.load(stream);
            m_lastProperties = p;
            return p;
        } catch (IOException e) {
            throw new PhonebookException(String.format("An error occurred reading from %s", m_propertyFile), e);
        } finally {
            if (stream != null) {
                IOUtils.closeQuietly(stream);
            }
        }
    }

