    private Alarm(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {

              id_ = input.readUInt64();
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              uei_ = s;
              break;
            }
            case 26: {
              org.opennms.features.kafka.producer.model.OpennmsModelProtos.NodeCriteria.Builder subBuilder = null;
              if (nodeCriteria_ != null) {
                subBuilder = nodeCriteria_.toBuilder();
              }
              nodeCriteria_ = input.readMessage(org.opennms.features.kafka.producer.model.OpennmsModelProtos.NodeCriteria.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(nodeCriteria_);
                nodeCriteria_ = subBuilder.buildPartial();
              }

              break;
            }
            case 34: {
              java.lang.String s = input.readStringRequireUtf8();

              ipAddress_ = s;
              break;
            }
            case 42: {
              java.lang.String s = input.readStringRequireUtf8();

              serviceName_ = s;
              break;
            }
            case 50: {
              java.lang.String s = input.readStringRequireUtf8();

              reductionKey_ = s;
              break;
            }
            case 56: {
              int rawValue = input.readEnum();

              type_ = rawValue;
              break;
            }
            case 64: {

              count_ = input.readUInt64();
              break;
            }
            case 72: {
              int rawValue = input.readEnum();

              severity_ = rawValue;
              break;
            }
            case 80: {

              firstEventTime_ = input.readUInt64();
              break;
            }
            case 90: {
              java.lang.String s = input.readStringRequireUtf8();

              description_ = s;
              break;
            }
            case 98: {
              java.lang.String s = input.readStringRequireUtf8();

              logMessage_ = s;
              break;
            }
            case 106: {
              java.lang.String s = input.readStringRequireUtf8();

              ackUser_ = s;
              break;
            }
            case 112: {

              ackTime_ = input.readUInt64();
              break;
            }
            case 122: {
              org.opennms.features.kafka.producer.model.OpennmsModelProtos.Event.Builder subBuilder = null;
              if (lastEvent_ != null) {
                subBuilder = lastEvent_.toBuilder();
              }
              lastEvent_ = input.readMessage(org.opennms.features.kafka.producer.model.OpennmsModelProtos.Event.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(lastEvent_);
                lastEvent_ = subBuilder.buildPartial();
              }

              break;
            }
            case 128: {

              lastEventTime_ = input.readUInt64();
              break;
            }
            case 136: {

              ifIndex_ = input.readUInt32();
              break;
            }
            case 146: {
              java.lang.String s = input.readStringRequireUtf8();

              operatorInstructions_ = s;
              break;
            }
            case 154: {
              java.lang.String s = input.readStringRequireUtf8();

              clearKey_ = s;
              break;
            }
            case 162: {
              java.lang.String s = input.readStringRequireUtf8();

              managedObjectInstance_ = s;
              break;
            }
            case 170: {
              java.lang.String s = input.readStringRequireUtf8();

              managedObjectType_ = s;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }

