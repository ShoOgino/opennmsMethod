    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (id_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, id_);
      }
      if (!getUeiBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, uei_);
      }
      if (nodeCriteria_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getNodeCriteria());
      }
      if (!getIpAddressBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, ipAddress_);
      }
      if (!getServiceNameBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, serviceName_);
      }
      if (!getReductionKeyBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(6, reductionKey_);
      }
      if (type_ != org.opennms.features.kafka.producer.model.OpennmsModelProtos.Alarm.Type.PROBLEM_WITH_CLEAR.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(7, type_);
      }
      if (count_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(8, count_);
      }
      if (severity_ != org.opennms.features.kafka.producer.model.OpennmsModelProtos.Severity.INDETERMINATE.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(9, severity_);
      }
      if (firstEventTime_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(10, firstEventTime_);
      }
      if (!getDescriptionBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(11, description_);
      }
      if (!getLogMessageBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(12, logMessage_);
      }
      if (!getAckUserBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(13, ackUser_);
      }
      if (ackTime_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(14, ackTime_);
      }
      if (lastEvent_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(15, getLastEvent());
      }
      if (lastEventTime_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(16, lastEventTime_);
      }
      if (ifIndex_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(17, ifIndex_);
      }
      if (!getOperatorInstructionsBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(18, operatorInstructions_);
      }
      if (!getClearKeyBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(19, clearKey_);
      }
      if (!getManagedObjectInstanceBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(20, managedObjectInstance_);
      }
      if (!getManagedObjectTypeBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(21, managedObjectType_);
      }
      for (int i = 0; i < relatedAlarm_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(22, relatedAlarm_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

