    @Override
    public Object execute() throws IOException {
        if (startWithCleanState) {
            alarmDataStore.destroy();
            alarmDataStore.setStartWithCleanState(true);
            alarmDataStore.init();
        }

        if (!waitForAlarmDataStore(alarmDataStore)) {
            return null;
        }

        return transactionOperations.execute(status -> {
            // Retrieve all of the alarms from the database
            final List<OnmsAlarm> alarmsInDb = alarmDao.findAll();
            System.out.println("Performing synchronization of alarms from the database with those in the ktable.");
            final long start = System.currentTimeMillis();
            final AlarmSyncResults results = alarmDataStore.handleAlarmSnapshot(alarmsInDb);
            final long delay = System.currentTimeMillis() - start;
            System.out.printf("Executed %d updates in %dms.\n\n", results.getNumUpdates(), delay);

            System.out.printf("Number of reduction keys in ktable: %d\n", results.getAlarmsInKtableByReductionKey().size());
            System.out.printf("Number of reduction keys in the db: %d (%d alarms total)\n",
                   results.getAlarmsInDbByReductionKey().size(), results.getAlarmsInDb().size());

            if (results.getNumUpdates() > 0) {
                System.out.print("Reduction keys added to the ktable:");
                printSet(results.getReductionKeysAdded());
                System.out.print("Reduction keys deleted from the ktable:");
                printSet(results.getReductionKeysDeleted());
                System.out.print("Reduction keys updated in the ktable:");
                printSet(results.getReductionKeysUpdated());
            }
            return null;
        });
    }

