    private TopologyVertex(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.opennms.features.kafka.producer.model.OpennmsModelProtos.TopologyRef.Builder subBuilder = null;
              if (ref_ != null) {
                subBuilder = ref_.toBuilder();
              }
              ref_ = input.readMessage(org.opennms.features.kafka.producer.model.OpennmsModelProtos.TopologyRef.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(ref_);
                ref_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              org.opennms.features.kafka.producer.model.OpennmsModelProtos.TopologyVertexNode.Builder subBuilder = null;
              if (vertexCase_ == 2) {
                subBuilder = ((org.opennms.features.kafka.producer.model.OpennmsModelProtos.TopologyVertexNode) vertex_).toBuilder();
              }
              vertex_ =
                  input.readMessage(org.opennms.features.kafka.producer.model.OpennmsModelProtos.TopologyVertexNode.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.opennms.features.kafka.producer.model.OpennmsModelProtos.TopologyVertexNode) vertex_);
                vertex_ = subBuilder.buildPartial();
              }
              vertexCase_ = 2;
              break;
            }
            case 26: {
              org.opennms.features.kafka.producer.model.OpennmsModelProtos.TopologyVertexSegment.Builder subBuilder = null;
              if (vertexCase_ == 3) {
                subBuilder = ((org.opennms.features.kafka.producer.model.OpennmsModelProtos.TopologyVertexSegment) vertex_).toBuilder();
              }
              vertex_ =
                  input.readMessage(org.opennms.features.kafka.producer.model.OpennmsModelProtos.TopologyVertexSegment.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.opennms.features.kafka.producer.model.OpennmsModelProtos.TopologyVertexSegment) vertex_);
                vertex_ = subBuilder.buildPartial();
              }
              vertexCase_ = 3;
              break;
            }
            case 34: {
              java.lang.String s = input.readStringRequireUtf8();

              label_ = s;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }

