    public OpennmsModelProtos.Event.Builder toEvent(Event event) {
        if (event == null) {
            return null;
        }
        final OpennmsModelProtos.Event.Builder builder = OpennmsModelProtos.Event.newBuilder()
                .setId(event.getDbid())
                .setUei(event.getUei())
                .setSource(event.getSource())
                .setSeverity(toSeverity(OnmsSeverity.get(event.getSeverity())))
                .setLabel(eventConfDao.getEventLabel(event.getUei()));
        if (event.getDescr() != null) {
            builder.setDescription(event.getDescr());
        }

        if (event.getLogmsg() != null) {
            builder.setLogMessage(event.getLogmsg().getContent());
        }
        if (event.getNodeid() != null) {
            try {
                builder.setNodeCriteria(nodeIdToCriteriaCache.get(event.getNodeid()));
            } catch (ExecutionException e) {
                LOG.warn("An error occurred when building node criteria for node with id: {}." +
                        " The node foreign source and foreign id (if set) will be missing from the event with id: {}.",
                        event.getNodeid(), event.getDbid(), e);
                builder.setNodeCriteria(OpennmsModelProtos.NodeCriteria.newBuilder()
                        .setId(event.getNodeid()));
            }
            // We only include the node id in the node criteria in when forwarding events
            // since the event does not currently contain the fs:fid or a reference to the node object.
            builder.setNodeCriteria(OpennmsModelProtos.NodeCriteria.newBuilder()
                    .setId(event.getNodeid()));
        }
        if (event.getInterface() != null) {
            builder.setIpAddress(event.getInterface());
        }

        setTimeIfNotNull(event.getTime(), builder::setTime);

        return builder;
    }

