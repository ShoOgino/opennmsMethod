    /**
     * Tests that two alarms match except for their excluded fields.
     */
    @Test
    public void testMatchingAfterDefaultExclusions() {
        AlarmEqualityChecker alarmEqualityChecker =
                AlarmEqualityChecker.with(AlarmEqualityChecker.Exclusions::defaultExclusions);

        // These alarms (and their related alarms) will have different counts and last events but will otherwise be the
        // same so they should match after exclusions are applied
        OpennmsModelProtos.Alarm.Builder alarmA = OpennmsModelProtos.Alarm.newBuilder()
                .setLastEvent(OpennmsModelProtos.Event.newBuilder()
                        .setLogMessage("test.a"))
                .setCount(1)
                .setLastEventTime(1)
                .addRelatedAlarm(OpennmsModelProtos.Alarm.newBuilder()
                        .setLastEvent(OpennmsModelProtos.Event.newBuilder()
                                .setLogMessage("test.a"))
                        .setLastEventTime(1)
                        .setCount(1));
        OpennmsModelProtos.Alarm.Builder alarmB = OpennmsModelProtos.Alarm.newBuilder()
                .setLastEvent(OpennmsModelProtos.Event.newBuilder()
                        .setLogMessage("test.b"))
                .setCount(2)
                .setLastEventTime(2)
                .addRelatedAlarm(OpennmsModelProtos.Alarm.newBuilder()
                        .setLastEvent(OpennmsModelProtos.Event.newBuilder()
                                .setLogMessage("test.b"))
                        .setLastEventTime(2)
                        .setCount(2));

        assertThat(alarmEqualityChecker.equalsExcludingOnBoth(alarmA, alarmB), is(equalTo(true)));
    }

