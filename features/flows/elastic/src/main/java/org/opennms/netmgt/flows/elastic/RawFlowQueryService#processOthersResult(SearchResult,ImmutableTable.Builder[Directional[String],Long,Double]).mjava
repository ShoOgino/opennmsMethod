    private static ImmutableTable.Builder<Directional<String>, Long, Double> processOthersResult(SearchResult res,
                                                                                                 ImmutableTable.Builder<Directional<String>, Long, Double> builder) {
        final MetricAggregation aggs = res.getAggregations();
        if (aggs == null) {
            // No results
            return builder;
        }
        final TermsAggregation directionAgg = aggs.getTermsAggregation("direction");
        if (directionAgg == null) {
            // No results
            return builder;
        }
        for (TermsAggregation.Entry directionBucket : directionAgg.getBuckets()) {
            final boolean isIngress = isIngress(directionBucket);
            final ProportionalSumAggregation sumAgg = directionBucket.getAggregation("bytes",
                    ProportionalSumAggregation.class);
            for (ProportionalSumAggregation.DateHistogram dateHistogram : sumAgg.getBuckets()) {
                builder.put(new Directional<>(OTHER_NAME, isIngress), dateHistogram.getTime(),
                        dateHistogram.getValue());
            }
        }
        return builder;
    }

