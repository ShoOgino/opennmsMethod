    /**
     * Retrieve time series data from aggregated flow statistics.
     *
     * @param N limit on number of entities in the top K that we want to query
     * @param step step size in ms
     * @param includeOther true to include the delta between top-n series and the total traffic as an additional series
     * @param filters filter criteria - see Filter
     * @param groupedBy grouped by context to query - see GroupedBy
     * @param type type descriptor for the entity we want to extract from the document
     * @param <T> entity future
     * @return a future for a table containing the time series
     */
    private <T> CompletableFuture<Table<Directional<T>, Long, Double>> getTopNSeries(int N, long step, boolean includeOther, List<Filter> filters,
                                                                                       GroupedBy groupedBy, Types.Type<T> type) {
        // Time is a must for *time* series
        final TimeRangeFilter timeRangeFilter = Filter.find(filters, TimeRangeFilter.class)
                .orElseThrow(() -> new IllegalArgumentException("Time range filter is required to derive time series."));

        // Build the series for the top-N
        final ImmutableTable.Builder<Directional<T>, Long, Double> builder = ImmutableTable.builder();
        CompletableFuture<Void> seriesFuture;
        if (N > 0) {
            final String seriesFromTopNQuery = searchQueryProvider.getSeriesFromTopNQuery(N, groupedBy,
                    type.getKey(), step, timeRangeFilter.getStart(),
                    timeRangeFilter.getEnd(), filters);
            seriesFuture = searchAsync(seriesFromTopNQuery, timeRangeFilter)
                    .thenApply(res -> {
                        toTable(builder, type::toEntity, res);
                        return null;
                    });
        } else {
            seriesFuture = CompletableFuture.completedFuture(null);
        }

        if (includeOther) {
            // Build the series for the total traffic
            final String seriesFromTotalQuery = searchQueryProvider.getSeriesFromTotalsQuery(groupedBy.getParent(), step, timeRangeFilter.getStart(),
                    timeRangeFilter.getEnd(), filters);
            final ImmutableTable.Builder<Directional<T>, Long, Double> totalsTableBuilder = ImmutableTable.builder();
            CompletableFuture<Void> totalSeriesFuture = searchAsync(seriesFromTotalQuery, timeRangeFilter)
                    .thenApply(res -> {
                        toTable(totalsTableBuilder, type::toEntity, res);
                        return null;
                    });

            // Compute a new series to represent the delta
            seriesFuture = seriesFuture.thenCombine(totalSeriesFuture, (topN,totals) -> {
                ImmutableTable<Directional<T>, Long, Double> topNTable = builder.build();
                ImmutableTable<Directional<T>, Long, Double> totalsTable = totalsTableBuilder.build();

                for (Long ts : topNTable.columnKeySet()) {
                    BytesInOut bytesFromTopN = BytesInOut.sum(topNTable.column(ts).entrySet());
                    BytesInOut totalBytes = BytesInOut.sum(totalsTable.column(ts).entrySet());

                    // Determine the remainder of bytes not represented by the top N
                    BytesInOut otherBytes = totalBytes.minus(bytesFromTopN);

                    builder.put(new Directional<>(type.getOtherEntity(), true), ts, (double)otherBytes.getBytesIn());
                    builder.put(new Directional<>(type.getOtherEntity(), false), ts, (double)otherBytes.getBytesOut());
                }

                return null;
            });
        }

        return seriesFuture.thenApply(ignored -> builder.build());
    }

