    private <T> CompletableFuture<TrafficSummary<T>> getOtherTraffic(GroupedBy groupedBy, T entity, List<Filter> filters) {
        final String query = searchQueryProvider.getSumQuery(groupedBy, filters);
        return searchAsync(query, Filter.find(filters, TimeRangeFilter.class).orElse(null))
                .thenApply(searchResult -> {
                    final MetricAggregation aggs = searchResult.getAggregations();
                    SumAggregation ingress = aggs.getSumAggregation("bytes_ingress");
                    SumAggregation egress = aggs.getSumAggregation("bytes_egress");
                    return TrafficSummary.<T>builder()
                            .withEntity(entity)
                            .withBytesIn(ingress != null ? ingress.getSum().longValue() : 0L)
                            .withBytesOut(egress != null ? egress.getSum().longValue() : 0L)
                            .build();
                });
    }

