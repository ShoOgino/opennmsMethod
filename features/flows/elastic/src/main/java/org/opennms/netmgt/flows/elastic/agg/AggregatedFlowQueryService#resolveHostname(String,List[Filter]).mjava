    private CompletableFuture<Optional<String>> resolveHostname(final String ip, final List<Filter> filters) {
        final TimeRangeFilter timeRangeFilter = Filter.find(filters, TimeRangeFilter.class).orElse(null);

        final String hostnameQuery = searchQueryProvider.getHostname(ip, filters);
        return searchAsync(hostnameQuery, timeRangeFilter)
                .thenApply(res -> {
                    final SearchResult.Hit<JsonObject, Void> hit = res.getFirstHit(JsonObject.class);
                    if (hit != null) {
                        if (Objects.equals(hit.source.getAsJsonPrimitive("host_address").getAsString(), ip)) {
                            return Optional.ofNullable(hit.source.getAsJsonPrimitive("host_name")).map(JsonPrimitive::getAsString);
                        }
                    }

                    return Optional.empty();
                });
    }

