    private Optional<NodeDocument> getNodeInfo(final String location, final InetAddress ipAddress, final ContextKey contextKey, final String value) {
        OnmsNode onmsNode = null;

        if (contextKey != null && !Strings.isNullOrEmpty(value)) {
            final List<OnmsNode> nodes = nodeDao.findNodeWithMetaData(contextKey.getContext(), contextKey.getKey(), value);

            if (!nodes.isEmpty()) {
                onmsNode = nodes.get(0);
            }
        }

        if (onmsNode == null) {
            final Optional<Integer> nodeId = interfaceToNodeCache.getFirstNodeId(location, ipAddress);
            if (nodeId.isPresent()) {
                try (Timer.Context ctx = nodeLoadTimer.time()) {
                    onmsNode = nodeDao.get(nodeId.get());
                }
            } else {
                LOG.warn("Node with id: {} at location: {} with IP address: {} is in the interface to node cache, but wasn't found in the database.", nodeId, location, ipAddress);
            }
        }

        if (onmsNode != null) {
            final NodeDocument nodeDocument = new NodeDocument();
            nodeDocument.setForeignSource(onmsNode.getForeignSource());
            nodeDocument.setForeignId(onmsNode.getForeignId());
            nodeDocument.setNodeId(onmsNode.getId());
            nodeDocument.setCategories(onmsNode.getCategories().stream().map(OnmsCategory::getName).collect(Collectors.toList()));

            return Optional.of(nodeDocument);
        }

        return Optional.empty();
    }

