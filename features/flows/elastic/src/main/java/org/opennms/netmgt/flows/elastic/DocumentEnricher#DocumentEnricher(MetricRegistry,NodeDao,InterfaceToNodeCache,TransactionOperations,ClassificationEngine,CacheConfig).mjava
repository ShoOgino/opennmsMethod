    public DocumentEnricher(MetricRegistry metricRegistry, NodeDao nodeDao, InterfaceToNodeCache interfaceToNodeCache,
                            TransactionOperations transactionOperations, ClassificationEngine classificationEngine,
                            CacheConfig cacheConfig) {
        this.nodeDao = Objects.requireNonNull(nodeDao);
        this.interfaceToNodeCache = Objects.requireNonNull(interfaceToNodeCache);
        this.transactionOperations = Objects.requireNonNull(transactionOperations);
        this.classificationEngine = Objects.requireNonNull(classificationEngine);

        this.nodeInfoCache = Objects.requireNonNull(cacheConfig).createBuilder()
                .build(new CacheLoader<NodeInfoKey, Optional<NodeDocument>>() {
                    @Override
                    public Optional<NodeDocument> load(NodeInfoKey key) {
                        return getNodeInfo(key.location, key.ipAddress);
                    }
                });
        this.nodeLoadTimer = metricRegistry.timer("nodeLoadTime");

        // Expose cache statistics
        if (cacheConfig.isRecordStats()) {
            LOG.debug("Recording of \"cache.nodes\" cache statistics is enabled.");
            metricRegistry.register(MetricRegistry.name("cache.nodes.evictionCount"), (Gauge) () -> nodeInfoCache.stats().evictionCount());
            metricRegistry.register(MetricRegistry.name("cache.nodes.hitRate"), (Gauge) () -> nodeInfoCache.stats().hitRate());
            metricRegistry.register(MetricRegistry.name("cache.nodes.loadExceptionCount"), (Gauge) () -> nodeInfoCache.stats().loadExceptionCount());
        } else {
            LOG.warn("Recording of \"cache.nodes\" cache statistics is disabled.");
        }
    }

