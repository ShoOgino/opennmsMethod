    public static SamplingAlgorithm from(final Flow.SamplingAlgorithm samplingAlgorithm) {
        if (samplingAlgorithm == null) {
            return Unassigned;
        }

        switch (samplingAlgorithm) {
            case Unassigned:
                return Unassigned;
            case SystematicCountBasedSampling:
                return SystematicCountBasedSampling;
            case SystematicTimeBasedSampling:
                return SystematicTimeBasedSampling;
            case RandomNoutOfNSampling:
                return RandomNoutOfNSampling;
            case UniformProbabilisticSampling:
                return UniformProbabilisticSampling;
            case PropertyMatchFiltering:
                return PropertyMatchFiltering;
            case HashBasedFiltering:
                return HashBasedFiltering;
            case FlowStateDependentIntermediateFlowSelectionProcess:
                return FlowStateDependentIntermediateFlowSelectionProcess;
            default:
                throw new IllegalArgumentException("Unknown sampling algorithm: " + samplingAlgorithm.name());
        }
    }

