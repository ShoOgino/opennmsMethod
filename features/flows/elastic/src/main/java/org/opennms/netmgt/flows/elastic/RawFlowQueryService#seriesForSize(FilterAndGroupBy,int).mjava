    private CompletableFuture<ImmutableTable.Builder<Directional<String>, Long, Double>> seriesForSize(FilterAndGroupBy fag, int size) {
        if (size < 1) {
            // If there are no entries, skip the query
            return CompletableFuture.completedFuture(ImmutableTable.builder());
        } else {
            final String bytesFromQuery = searchQueryProvider.getSeriesFromQuery(size, fag.step, fag.start, fag.end, fag.groupByTerm, fag.filters);
            return searchAsync(bytesFromQuery, fag.timeRangeFilter).thenApply(searchResult -> {
                ImmutableTable.Builder<Directional<String>, Long, Double> builder = ImmutableTable.builder();
                toTable(builder, searchResult);
                return builder;
            });
        }
    }

