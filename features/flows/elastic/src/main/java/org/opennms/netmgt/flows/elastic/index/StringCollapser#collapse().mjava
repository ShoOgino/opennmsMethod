    public List<String> collapse() {

        if(this.list == null || this.list.size() == 0){
            // shortcut
            return this.list;
        }

        String currentStem = null;
        String firstStem = list.get(0).substring(0, this.collapseAfter);
        String lastStem = list.get(list.size()-1).substring(0, this.collapseAfter);
        List<String> result = new ArrayList<>();
        boolean doCollapsing;
        boolean currentStemAdded = false;

        for (String element : this.list) {

            // 1.) determine current stem
            if(!element.substring(0, this.collapseAfter).equals(currentStem)) {
                currentStem = element.substring(0, this.collapseAfter);
                currentStemAdded = false;
            }

            // 2.) determine if we need to collapse
            doCollapsing = true;
            if(firstStem.equals(currentStem) && !this.doCollapsingAtBeginning){
                doCollapsing = false;
            }
            if(!lastStem.equals(firstStem) && lastStem.equals(currentStem) && !this.doCollapsingAtEnd){
                doCollapsing = false;
            }

            // 3.) collapse or add
            if (doCollapsing && !currentStemAdded) {
                result.add(currentStem + this.wildcard);
                currentStemAdded = true;
            } else if (doCollapsing) {
                // ignore element we have added wildcard already
            } else {
                result.add(element);
                currentStemAdded = false;
            }

        }
        return result;
    }

