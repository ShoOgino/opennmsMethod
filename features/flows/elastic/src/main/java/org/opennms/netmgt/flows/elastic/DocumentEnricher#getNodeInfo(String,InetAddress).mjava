    private Optional<NodeDocument> getNodeInfo(String location, InetAddress ipAddress) {
        final Optional<Integer> nodeId = interfaceToNodeCache.getFirstNodeId(location, ipAddress);
        if (nodeId.isPresent()) {
            try (Timer.Context ctx = nodeLoadTimer.time()) {
                final OnmsNode onmsNode = nodeDao.get(nodeId.get());
                if (onmsNode != null) {
                    final NodeDocument nodeInfo = new NodeDocument();
                    nodeInfo.setForeignSource(onmsNode.getForeignSource());
                    nodeInfo.setForeignId(onmsNode.getForeignId());
                    nodeInfo.setNodeId(nodeId.get());
                    nodeInfo.setCategories(onmsNode.getCategories().stream().map(OnmsCategory::getName).collect(Collectors.toList()));

                    return Optional.of(nodeInfo);
                } else {
                    LOG.warn("Node with id: {} at location: {} with IP address: {} is in the interface to node cache, but wasn't found in the database.", nodeId, location, ipAddress);
                }
            }
        }
        return Optional.empty();
    }

