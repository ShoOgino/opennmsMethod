    /**
     * Given a table, sort the rows such that the row keys appear in the same order
     * as the given list. Any additional rows should be appended after these in the same
     * order that they appeared.
     *
     * @param table the table to sort
     * @param rowKeys list of row keys to match
     * @return a sorted table
     */
    public static <C,V> Table<Directional<String>, C, V> sortTableByRowKeys(Table<Directional<String>, C, V> table,
                                                                                List<String> rowKeys) {

        final ImmutableTable.Builder<Directional<String>, C, V> builder = ImmutableTable.builder();
        // Iterate over the keys in the given order, and append any matching rows to the builder
        for (String rowKeyValue : rowKeys) {
            for (Directional<String> rowKey : table.rowKeySet()) {
                if (Objects.equals(rowKeyValue, rowKey.getValue())) {
                    table.row(rowKey).forEach((columnKey,value) -> builder.put(rowKey, columnKey, value));
                }
            }
        }

        final Set<String> knownKeys = Sets.newHashSet(rowKeys);
        for (Directional<String> rowKey : table.rowKeySet()) {
            // Append any rows that were not previously matched, in the same order as they appear
            if (!knownKeys.contains(rowKey.getValue())) {
                table.row(rowKey).forEach((columnKey,value) -> builder.put(rowKey, columnKey, value));
            }
        }

        return builder.build();
    }

