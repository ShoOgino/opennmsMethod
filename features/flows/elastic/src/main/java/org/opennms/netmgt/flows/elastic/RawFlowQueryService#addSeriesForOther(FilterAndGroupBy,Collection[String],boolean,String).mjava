    private Function<ImmutableTable.Builder<Directional<String>, Long, Double>, CompletableFuture<ImmutableTable.Builder<Directional<String>, Long, Double>>>
    addSeriesForOther(FilterAndGroupBy fag, Collection<String> from, boolean includeOther, String keyForMissingTerm) {
        if (includeOther) {
            // We also want to gather series for all other terms
            final boolean missingTermIncluded = keyForMissingTerm != null && from.contains(keyForMissingTerm);
            final String seriesFromOthersQuery = searchQueryProvider.getSeriesFromOthersQuery(from, fag.step,
                    fag.start, fag.end, fag.groupByTerm, missingTermIncluded, fag.filters);
            val otherFuture = searchAsync(seriesFromOthersQuery, fag.timeRangeFilter);
            return builder -> otherFuture.thenApply(searchResult -> processOthersResult(searchResult, builder));
        } else {
            return keepValue();
        }
    }

