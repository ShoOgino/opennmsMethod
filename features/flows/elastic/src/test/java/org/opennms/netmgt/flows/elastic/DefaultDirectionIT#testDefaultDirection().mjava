    @Test
    public void testDefaultDirection() throws Exception {
        // start ES
        elasticSearchRule.startServer();

        final RestClientFactory restClientFactory = new RestClientFactory(elasticSearchRule.getUrl());

        try (final JestClient jestClient = restClientFactory.createClient()) {
            final MockDocumentEnricherFactory mockDocumentEnricherFactory = new MockDocumentEnricherFactory();
            final DocumentEnricher documentEnricher = mockDocumentEnricherFactory.getEnricher();
            final ClassificationEngine classificationEngine = mockDocumentEnricherFactory.getClassificationEngine();
            final FlowRepository elasticFlowRepository = new InitializingFlowRepository(
                    new ElasticFlowRepository(new MetricRegistry(), jestClient, IndexStrategy.MONTHLY, documentEnricher,
                            classificationEngine, new MockSessionUtils(), new MockNodeDao(), new MockSnmpInterfaceDao(),
                            new MockIdentity(), new MockTracerRegistry(), new MockDocumentForwarder(), new IndexSettings(),
                            3, 12000), jestClient);
            // persist data
            elasticFlowRepository.persist(Lists.newArrayList(getMockFlowWithoutDirection()),
                    FlowDocumentTest.getMockFlowSource());

            // wait for entries to show up
            with().pollInterval(5, SECONDS).await().atMost(1, MINUTES).until(() -> {
                final SearchResult searchResult = jestClient.execute(new Search.Builder("").addIndex("netflow-*").build());
                LOG.info("Response: {} {} ", searchResult.isSucceeded() ? "Success" : "Failure", SearchResultUtils.getTotal(searchResult));
                return SearchResultUtils.getTotal(searchResult) > 0;
            });

            final SearchResult searchResult = jestClient.execute(new Search.Builder("").addIndex("netflow-*").build());
            assertNotEquals(0L, SearchResultUtils.getTotal(searchResult));

            // check whether the default value is applied
            final JSONParser parser = new JSONParser();
            final JSONObject responseJsonObject = (JSONObject) parser.parse(searchResult.getJsonString());
            final JSONArray hitsJsonArray = (JSONArray) ((JSONObject) responseJsonObject.get("hits")).get("hits");
            final JSONObject sourceJsonObject = (JSONObject) ((JSONObject) hitsJsonArray.get(0)).get("_source");

            LOG.info("Direction value is: " + sourceJsonObject.get("netflow.direction"));
            assertEquals("ingress", sourceJsonObject.get("netflow.direction"));
        }

        // stop ES
        elasticSearchRule.stopServer();
    }

