    private void apply(FlowRepositoryConsumer consumer) throws Exception {
        Objects.requireNonNull(consumer);

        final RestClientFactory restClientFactory = new RestClientFactory("http://localhost:" + HTTP_PORT);
        restClientFactory.setRequestExecutorSupplier(() -> new DefaultRequestExecutor(RETRY_COOLDOWN));
        try (JestClient client = restClientFactory.createClient()) {
            executionTime.resetStartTime();
            elasticServerRule.startServer();

            final MockDocumentEnricherFactory mockDocumentEnricherFactory = new MockDocumentEnricherFactory();
            final DocumentEnricher documentEnricher = mockDocumentEnricherFactory.getEnricher();
            final ClassificationEngine classificationEngine = mockDocumentEnricherFactory.getClassificationEngine();
            final MockTransactionTemplate mockTransactionTemplate = new MockTransactionTemplate();
            mockTransactionTemplate.setTransactionManager(new MockTransactionManager());

            final FlowRepository elasticFlowRepository = new InitializingFlowRepository(
                    new ElasticFlowRepository(new MetricRegistry(), client, IndexStrategy.MONTHLY, documentEnricher,
                            classificationEngine, mockTransactionTemplate, new MockNodeDao(), new MockSnmpInterfaceDao(),
                            new MockIdentity(), new MockTracerRegistry(),3, 12000), client);

            consumer.accept(elasticFlowRepository);

        } catch (FlowException e) {
            throw Throwables.propagate(e);
        }

    }

