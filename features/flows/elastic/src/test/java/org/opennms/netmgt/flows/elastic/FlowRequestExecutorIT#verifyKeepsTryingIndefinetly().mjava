    @Test
    public void verifyKeepsTryingIndefinetly() throws ExecutionException {
        final ExecutorService executorService = Executors.newFixedThreadPool(1);
        final AtomicLong startTime = new AtomicLong(0);

        // Create client manually, as we want to spy on it
        final JestClientFactory factory = new JestClientFactory();
        factory.setHttpClientConfig(new HttpClientConfig.Builder("http://192.168.2.0:9200").build()); // 192.168.2.0 should not be reachable
        JestClient clientDelegate = spy(factory.getObject());
        final JestClient client = spy(new OnmsJestClient(clientDelegate, new FlowRequestExecutor(1000)));

        // action to run, we need this to interrupt it after n-seconds
        final Runnable runMe = () -> {
            try {
                startTime.set(System.currentTimeMillis());
                try {
                    final DocumentEnricher documentEnricher = mock(DocumentEnricher.class);
                    final ElasticFlowRepository repository = new ElasticFlowRepository(new MetricRegistry(),
                            client, IndexStrategy.MONTHLY, documentEnricher);
                    repository.persist(Lists.newArrayList(FlowDocumentTest.getMockFlow()), FlowDocumentTest.getMockFlowSource(), new FlowDocumentTest.NopConverter());
                    Assert.fail("The execution of persistNetFlow5Packets() should not have finished. Failing.");
                } finally {
                    client.close();
                }
            } catch (Exception e) {
                throw Throwables.propagate(e);
            }
        };
        final Future<?> future = executorService.submit(runMe);
        try {
            // Interrupt Thread after 10 seconds
            future.get(10, TimeUnit.SECONDS);
            Assert.fail("The test should have failed with an exception, as we interrupted it manually. Failing.");
        } catch (InterruptedException | TimeoutException e) {
            // Expected behaviour, now do some verification

            // Verify re-trying
            // Cooldown is 1 second, therefore the invocation should be ~10 times, but may be less, therefore we do not check
            // Verify that we actually cooled down between retries
            long executionTime = System.currentTimeMillis() - startTime.get();
            long expectedExecutionTime = 10 * 1000;
            Assert.assertThat(executionTime, CoreMatchers.allOf(
                    Matchers.greaterThanOrEqualTo(expectedExecutionTime)));
        }
    }

