    @Override
    public Response updateRule(int id, RuleDTO newValue) {
        // Update
        final Rule rule = classificationService.getRule(id);
        final Rule newRule = convert(newValue);
        rule.setProtocol(newRule.getProtocol());
        rule.setDstPort(newRule.getDstPort());
        rule.setDstAddress(newRule.getDstAddress());
        rule.setSrcPort(newRule.getSrcPort());
        rule.setSrcAddress(newRule.getSrcAddress());
        rule.setName(newRule.getName());
        rule.setOmnidirectional(newRule.isOmnidirectional());
        rule.setExporterFilter(newValue.getExporterFilter());
        final Group oldGroup = rule.getGroup();
        boolean groupChanged = !oldGroup.getId().equals(newRule.getGroup().getId());
        if(groupChanged) {
            final Group group = classificationService.getGroup(newRule.getGroup().getId());
            rule.setGroup(group);
        }

        // adjust position
        Integer newPosition = newValue.getPosition();
        if(newPosition != null) {
            int oldPosition = rule.getPosition();
            int newComputedPosition = (newPosition > oldPosition) ? newPosition + 1 : newPosition;
            rule.setPosition(newComputedPosition);
        }

        // Persist
        classificationService.updateRule(rule);
        if(groupChanged) {
            classificationService.updateGroup(oldGroup); // reorder old group as well
        }
        return Response.ok(convert(rule)).build();
    }

