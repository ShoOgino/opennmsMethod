    @Override
    public FlowSeriesResponse getTopNConversationsSeries(long step, int N, UriInfo uriInfo) {
        final List<Filter> filters = getFiltersFromQueryString(uriInfo.getQueryParameters());
        final TimeRangeFilter timeRangeFilter = getRequiredTimeRangeFilter(filters);
        final Table<Directional<Conversation>, Long, Double> series =
                waitForFuture(flowRepository.getTopNConversationsSeries(N, step, filters));

        final FlowSeriesResponse response = new FlowSeriesResponse();
        response.setStart(timeRangeFilter.getStart());
        response.setEnd(timeRangeFilter.getEnd());
        response.setColumns(series.rowKeySet().stream()
                .map(d -> {
                    final Conversation convo = d.getValue();
                    final ConversationKey key = convo.getKey();
                    final String applicationTag = convo.getApplication() != null ? String.format(" [%s]", convo.getApplication()) : "";
                    final FlowSeriesColumn column = new FlowSeriesColumn();
                    column.setLabel(String.format("%s:%d <-> %s:%d%s", key.getSrcIp(), key.getSrcPort(),
                            key.getDstIp(), key.getDstPort(), applicationTag));
                    column.setIngress(d.isIngress());
                    return column;
                })
                .collect(Collectors.toList()));
        populateResponseFromTable(series, response);
        return response;
    }

