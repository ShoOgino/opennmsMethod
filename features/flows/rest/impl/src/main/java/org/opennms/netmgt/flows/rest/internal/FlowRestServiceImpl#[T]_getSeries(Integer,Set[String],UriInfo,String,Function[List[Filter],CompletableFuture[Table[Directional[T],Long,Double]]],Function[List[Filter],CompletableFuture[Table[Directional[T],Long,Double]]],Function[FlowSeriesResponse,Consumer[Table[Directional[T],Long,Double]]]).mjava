    private <T> FlowSeriesResponse getSeries(Integer N, Set<String> entities, UriInfo uriInfo, String entitiesLabel,
                                             Function<List<Filter>, CompletableFuture<Table<Directional<T>, Long,
                                                     Double>>> topNSeriesFutureFunction,
                                             Function<List<Filter>, CompletableFuture<Table<Directional<T>, Long,
                                                     Double>>> specificEntitiesSeriesFutureFunction,
                                             Function<FlowSeriesResponse, Consumer<Table<Directional<T>, Long, Double>>> seriesResponseConsumer) {
        final FlowSeriesResponse response = new FlowSeriesResponse();
        withValidationAndFilters(N, entities, entitiesLabel, uriInfo, (filters, timeRangeFilter) -> {
            final Table<Directional<T>, Long, Double> series;

            if (N != null) {
                series = waitForFuture(topNSeriesFutureFunction.apply(filters));
            } else {
                series = waitForFuture(specificEntitiesSeriesFutureFunction.apply(filters));
            }

            response.setStart(timeRangeFilter.getStart());
            response.setEnd(timeRangeFilter.getEnd());
            seriesResponseConsumer.apply(response).accept(series);
            populateResponseFromTable(series, response);
        });
        return response;
    }

