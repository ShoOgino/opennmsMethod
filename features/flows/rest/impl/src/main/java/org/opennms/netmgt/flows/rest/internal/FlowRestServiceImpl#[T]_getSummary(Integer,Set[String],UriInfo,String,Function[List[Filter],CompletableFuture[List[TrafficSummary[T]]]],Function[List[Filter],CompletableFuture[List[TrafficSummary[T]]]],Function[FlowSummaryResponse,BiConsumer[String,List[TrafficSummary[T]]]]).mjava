    private <T> FlowSummaryResponse getSummary(Integer N, Set<String> entities, UriInfo uriInfo, String entitiesLabel,
                                               Function<List<Filter>, CompletableFuture<List<TrafficSummary<T>>>> topNSummaryProviderFunction,
                                               Function<List<Filter>, CompletableFuture<List<TrafficSummary<T>>>> specificEntitiesSummaryProviderFunction,
                                               Function<FlowSummaryResponse, BiConsumer<String,
                                                       List<TrafficSummary<T>>>> responseConsumer) {
        final FlowSummaryResponse response = new FlowSummaryResponse();
        withValidationAndFilters(N, entities, entitiesLabel, uriInfo, (filters, timeRangeFilter) -> {
            final List<TrafficSummary<T>> summary;

            if (N != null) {
                summary = waitForFuture(topNSummaryProviderFunction.apply(filters));
            } else {
                summary = waitForFuture(specificEntitiesSummaryProviderFunction.apply(filters));
            }

            response.setStart(timeRangeFilter.getStart());
            response.setEnd(timeRangeFilter.getEnd());
            responseConsumer.apply(response).accept(entitiesLabel, summary);
        });
        return response;
    }

