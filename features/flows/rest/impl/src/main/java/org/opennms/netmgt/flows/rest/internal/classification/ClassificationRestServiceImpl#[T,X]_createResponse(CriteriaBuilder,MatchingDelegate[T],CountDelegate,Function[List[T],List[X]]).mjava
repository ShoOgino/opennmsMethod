    private static <T, X> Response createResponse(CriteriaBuilder criteriaBuilder,
                                                  MatchingDelegate<T> matchingDelegate,
                                                  CountDelegate countDelegate,
                                                  Function<List<T>, List<X>> transform) {
        Objects.requireNonNull(criteriaBuilder);
        Objects.requireNonNull(matchingDelegate);
        Objects.requireNonNull(countDelegate);
        Objects.requireNonNull(transform);

        final Criteria criteria = criteriaBuilder.toCriteria();
        final List<T> entities = matchingDelegate.findMatching(criteria);
        if (entities.isEmpty()) {
            return Response.noContent().build();
        }
        // Reset any offset/limits and orders in order to count properly
        criteria.setOrders(new ArrayList<>());
        criteria.setOffset(null);
        criteria.setLimit(null);

        // build response
        final List responseBody = transform.apply(entities);
        final int offset = (criteria.getOffset() == null ? 0 : criteria.getOffset());
        final long totalCount = countDelegate.countMatching(criteria);
        return ResponseUtils.createResponse(responseBody, offset, totalCount);
    }

