    @Test
    public void canGenerateFlowGraphUrlInfo() {
        // Mock the dependencies
        FlowRepository flowRepository = mock(FlowRepository.class);
        when(flowRepository.getFlowCount(any())).thenReturn(CompletableFuture.completedFuture(1L));
        NodeDao nodeDao = mock(NodeDao.class);
        SnmpInterfaceDao snmpInterfaceDao = mock(SnmpInterfaceDao.class);
        SessionUtils sessionUtils = mock(SessionUtils.class);
        FlowRestServiceImpl flowRestService = new FlowRestServiceImpl(flowRepository, nodeDao, snmpInterfaceDao, sessionUtils);

        // Set the URL
        flowRestService.setFlowGraphUrl("https://grafana:3000/d/eWsVEL6zz/flows?orgId=1&var-node=$nodeId&var-interface=$ifIndex&from=$start&to=$end");

        // Build the URL from an empty list attributes
        MultivaluedHashMap<String, String> queryParms = new MultivaluedHashMap<>();
        UriInfo uriInfo = mock(UriInfo.class);
        when(uriInfo.getQueryParameters()).thenReturn(queryParms);
        FlowGraphUrlInfo flowGraphUrlInfo = flowRestService.getFlowGraphUrlInfo(uriInfo);

        // Verify
        assertThat(flowGraphUrlInfo.getFlowCount(), equalTo(1L));
        assertThat(flowGraphUrlInfo.getFlowGraphUrl(), equalTo("https://grafana:3000/d/eWsVEL6zz/flows?orgId=1&var-node=&var-interface=&from=&to="));

        // Now build the URL from a fully populated set of attributes
        queryParms = new MultivaluedHashMap<>();
        queryParms.add("exporterNode", "1");
        queryParms.add("ifIndex", "2");
        queryParms.add("start", "3");
        queryParms.add("end", "4");
        when(uriInfo.getQueryParameters()).thenReturn(queryParms);
        flowGraphUrlInfo = flowRestService.getFlowGraphUrlInfo(uriInfo);

        // Verify
        assertThat(flowGraphUrlInfo.getFlowCount(), equalTo(1L));
        assertThat(flowGraphUrlInfo.getFlowGraphUrl(), equalTo("https://grafana:3000/d/eWsVEL6zz/flows?orgId=1&var-node=1&var-interface=2&from=3&to=4"));
    }

