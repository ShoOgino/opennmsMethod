    @Test
    public void verifyRuleEngine() {
        // Define Rule set
        DefaultClassificationEngine engine = new DefaultClassificationEngine((Supplier<List<Rule>>) () -> Lists.newArrayList(
                new Rule("SSH", "22"),
                new Rule("HTTP", "80"),
                new Rule("HTTP_CUSTOM", "192.168.0.1", "80"),
                new Rule("DUMMY", "192.168.1.*", "8000-9000,80,8080"),
                new Rule("RANGE-TEST", "7000-8000"),
                new Rule("OpenNMS", "8980")
            )
        );
      
        // Verify concrete mappings
        assertEquals("SSH", engine.classify(new ClassificationRequest("Default", 22, "127.0.0.1", ProtocolType.TCP)));
        assertEquals("HTTP_CUSTOM", engine.classify(new ClassificationRequest("Default", 80, "192.168.0.1", ProtocolType.TCP)));
        assertEquals("HTTP", engine.classify(new ClassificationRequest("Default", 80, "192.168.0.2", ProtocolType.TCP)));
        assertEquals(null, engine.classify(new ClassificationRequest("Default", 5000, "localhost", ProtocolType.UDP)));
        assertEquals(null, engine.classify(new ClassificationRequest("Default", 5000, "localhost", ProtocolType.TCP)));
        assertEquals("OpenNMS", engine.classify(new ClassificationRequest("Default", 8980, "127.0.0.1", ProtocolType.TCP)));

        // Verify IP Range
        final IPAddressRange ipAddresses = new IPAddressRange("192.168.1.0", "192.168.1.255");
        for (IPAddress ipAddress : ipAddresses) {
            assertEquals("DUMMY", engine.classify(new ClassificationRequest("Default", 8080, ipAddress.toString(), ProtocolType.TCP)));
        }

        // Verify Port Range
        IntStream.range(7000, 8000).forEach(i -> assertEquals("RANGE-TEST", engine.classify(new ClassificationRequest("Default", i, "192.168.0.2", ProtocolType.TCP))));
    }

