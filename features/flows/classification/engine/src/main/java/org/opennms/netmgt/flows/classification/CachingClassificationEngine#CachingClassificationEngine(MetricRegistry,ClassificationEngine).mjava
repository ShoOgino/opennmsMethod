    public CachingClassificationEngine(MetricRegistry registry, ClassificationEngine delegate) {
        this.delegate = Objects.requireNonNull(delegate);
        this.cache = CacheBuilder.newBuilder()
                .maximumSize(Integer.getInteger("org.opennms.features.flows.classification.caching.maxSize", 5000))
                .expireAfterAccess(Long.getLong("org.opennms.features.flows.classification.caching.expireTime", 60 * 1000), TimeUnit.MILLISECONDS)
                .recordStats()
                .build(
                        new CacheLoader<ClassificationRequest, Optional<String>>() {
                            @Override
                            public Optional<String> load(ClassificationRequest key) {
                                return Optional.ofNullable(delegate.classify(key));
                            }
                        });
        if (registry != null) {
            registry.register(MetricRegistry.name("cache.classification.evictionCount"),       (Gauge) () -> cache.stats().evictionCount());
            registry.register(MetricRegistry.name("cache.classification.hitRate"),             (Gauge) () -> cache.stats().hitRate());
            registry.register(MetricRegistry.name("cache.classification.loadExceptionCount"),  (Gauge) () -> cache.stats().loadExceptionCount());
        }
    }

