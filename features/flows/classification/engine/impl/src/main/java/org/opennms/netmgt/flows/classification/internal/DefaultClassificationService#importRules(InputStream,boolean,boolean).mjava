    @Override
    public void importRules(InputStream inputStream, boolean hasHeader, boolean deleteExistingRules) throws CSVImportException {
        runInTransaction(status -> {
            // Parse and validate the rules
            final CsvImportResult result = csvService.parseCSV(inputStream, hasHeader);
            if (!result.isSuccess()) {
                throw new CSVImportException(result);
            }

            final Map<String, Group> allGroups = new HashMap<>();
            final Criteria criteria = new CriteriaBuilder(Group.class)
                    .ne("name", Groups.SYSTEM_DEFINED)
                    .toCriteria();
            final List<Group> groupsList = classificationGroupDao.findMatching(criteria);

            for (Group group : groupsList) {
                allGroups.put(group.getName(), group);
                // Remove existing rules and afterwards add new rules
                if (deleteExistingRules) {
                    for (Rule eachRule : group.getRules()) {
                        classificationRuleDao.delete(eachRule);
                    }
                    group.getRules().clear();
                }
            }
            final List<Rule> rules = result.getRules();
            for (int i=0; i<rules.size(); i++) {
                final Rule rule = rules.get(i);
                try {
                    Group group = allGroups.get(rule.getGroup().getName());
                    if(group == null) {
                        throw new ClassificationException(ErrorContext.Name, Errors.GROUP_NOT_FOUND, rule.getGroup().getName());
                    }
                    groupValidator.validate(group, rule);
                    group.addRule(rule);
                } catch (ClassificationException ex) {
                    result.markError(i, ex.getError());
                }
            }

            // before continuing, verify everything is okay, otherwise bail
            if (!result.isSuccess()) {
                throw new CSVImportException(result);
            }

            // Reload engine for all groups
            for(Group group : allGroups.values()) {
                updateRulePositionsAndReloadEngine(PositionUtil.sortRulePositions(group.getRules()));
                classificationGroupDao.saveOrUpdate(group);
            }
            return null;
        });
    }

