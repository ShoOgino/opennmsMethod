    protected static void validatePort(String errorContext, String port) throws InvalidRuleException {
        final StringValue portValue = new StringValue(port);
        if (portValue.isNullOrEmpty()) {
            throw new InvalidRuleException(errorContext, Errors.RULE_PORT_IS_REQUIRED);
        }
        if (portValue.hasWildcard()) {
            throw new InvalidRuleException(errorContext, Errors.RULE_PORT_NO_WILDCARD);
        }

        // Verify input
        final Matcher matcher = PORT_PATTERN.matcher(port);
        if (!matcher.matches()) {
            throw new InvalidRuleException(errorContext, Errors.RULE_PORT_DEFINITION_NOT_VALID);
        }

        // Try parsing input
        final List<StringValue> portValues = portValue.splitBy(",");
        final List<StringValue> rangedPortValues = portValues.stream().filter(v -> v.isRanged()).collect(Collectors.toList());
        rangedPortValues.forEach(v -> portValues.remove(v));

        // Verify the ranges
        for (StringValue eachRange : rangedPortValues) {
            final List<StringValue> range = eachRange.splitBy("-");

            // Verify each value is a number value
            for (int i=0; i<Math.min(range.size(), 2); i++) {
                verifyPortValue(errorContext, range.get(i).getValue());
            }

            // Check bounds
            int lowerBound = Integer.parseInt(range.get(0).getValue());
            int higherBound = range.size() == 1 ? lowerBound : Integer.parseInt(range.get(1).getValue());
            if (lowerBound > higherBound) {
                throw new InvalidRuleException(errorContext, Errors.RULE_PORT_RANGE_BOUNDS_NOT_VALID);
            }
        }

        // Verify normal values
        for (StringValue eachPort : portValues) {
            verifyPortValue(errorContext, eachPort.getValue());
        }
    }

