    protected static void validateIpAddress(String errorContext, String ipAddressValue) throws InvalidRuleException {
        if (Strings.isNullOrEmpty(ipAddressValue)) {
            throw new InvalidRuleException(errorContext, Errors.RULE_IP_ADDRESS_INVALID, ipAddressValue);
        }
        final StringValue inputValue = new StringValue(ipAddressValue);
        final List<StringValue> actualValues = inputValue.splitBy(",");
        for (StringValue eachValue : actualValues) {
            // In case it is ranged, verify the range
            if (eachValue.isRanged()) {
                final List<StringValue> rangedValues = eachValue.splitBy("-");
                // either a-, or a-b-c, etc.
                if (rangedValues.size() != 2) {
                    throw new InvalidRuleException(errorContext, Errors.RULE_IP_ADDRESS_RANGE_INVALID, eachValue.getValue());
                }
                // Ensure each range is an ip address
                for (StringValue rangedValue : rangedValues) {
                    verifyIpAddress(errorContext, rangedValue.getValue());
                }
                // Now verify the range itself
                final IPAddress begin = new IPAddress(rangedValues.get(0).getValue());
                final IPAddress end = new IPAddress(rangedValues.get(1).getValue());
                if (begin.isGreaterThan(end)) {
                    throw new InvalidRuleException(errorContext, Errors.RULE_IP_ADDRESS_RANGE_BEGIN_END_INVALID, begin, end);
                }
            } else {
                verifyIpAddress(errorContext, eachValue.getValue());
            }
        }
    }

