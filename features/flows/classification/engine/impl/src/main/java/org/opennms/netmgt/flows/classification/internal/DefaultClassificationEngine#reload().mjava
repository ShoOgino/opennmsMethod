    @Override
    public void reload() {
        // Reset existing data
        classifierPortList.clear();

        // Load rules
        final List<Rule> rules = ruleProvider.getRules();
        final List<List<Rule>> rulePortList = new ArrayList<>(Rule.MAX_PORT_VALUE);

        // Initialize each element
        for (int i=Rule.MIN_PORT_VALUE; i<Rule.MAX_PORT_VALUE; i++) {
            rulePortList.add(new ArrayList<>());
            classifierPortList.add(new ArrayList<>());
        }

        // Bind each rule to a port
        final List<Rule> anyPortRule = new ArrayList<>();
        for (Rule eachRule : rules) {
            if (eachRule.hasPortDefinition()) {
                for (Integer eachPort : new PortValue(eachRule.getPort()).getPorts()) {
                    rulePortList.get(eachPort).add(eachRule);
                }
            } else {
                anyPortRule.add(eachRule);
            }
        }

        // Bind classifiers to ANY port
        for (final List<Rule> theRules : rulePortList) {
            theRules.addAll(anyPortRule);
        }

        // Sort rules by priority
        for (int i=0; i<rulePortList.size(); i++) {
            final List<Rule> portRules = rulePortList.get(i);
            Collections.sort(portRules, ruleComparator);
        }

        // Finally create classifiers
        for (int i=0; i<rulePortList.size(); i++) {
            final int port = i;
            final List<Rule> portRules = rulePortList.get(port);

            // Convert rule to classifier
            final List<Classifier> classifiers = portRules.stream().map(rule -> {
                final Rule portRule = new RuleBuilder()
                        .withName(rule.getName())
                        .withProtocol(rule.getProtocol())
                        .withPort(port)
                        .withIpAddress(rule.getIpAddress())
                        .build();
                return new CombinedClassifier(portRule);
            }).collect(Collectors.toList());
            classifierPortList.set(port, classifiers);
        }
    }

