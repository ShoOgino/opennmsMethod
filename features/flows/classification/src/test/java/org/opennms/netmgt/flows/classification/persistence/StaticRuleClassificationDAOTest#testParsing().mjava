    @Test
    public void testParsing() throws IOException {
        final ClassificationRuleDAO classificationDAO = new StaticRuleClassificationDAO();
        final ClassificationEngine classificationEngine = new DefaultClassificationEngine(classificationDAO);

        // Verify some port mappings
        assertEquals("rtmp", classificationEngine.classify(new ClassificationRequest("Default", 1, null, ProtocolType.DDP)));
        assertEquals("tcpmux", classificationEngine.classify(new ClassificationRequest("Default", 1, null, ProtocolType.TCP)));
        assertEquals("tcpmux", classificationEngine.classify(new ClassificationRequest("Default", 1, null, ProtocolType.UDP)));
        assertEquals("nicname", classificationEngine.classify(new ClassificationRequest("Default", 43, null, ProtocolType.TCP)));
        assertEquals("nicname", classificationEngine.classify(new ClassificationRequest("Default", 43, null, ProtocolType.UDP)));
        assertEquals("http", classificationEngine.classify(new ClassificationRequest("Default", 80, null, ProtocolType.TCP)));
        assertEquals("com-bardac-dw", classificationEngine.classify(new ClassificationRequest("Default", 48556, null, ProtocolType.TCP)));
        assertEquals("com-bardac-dw", classificationEngine.classify(new ClassificationRequest("Default", 48556, null, ProtocolType.UDP)));

        // unassigned ports
        assertEquals(null, classificationEngine.classify(new ClassificationRequest("Default", 8, null, ProtocolType.TCP)));
        assertEquals(null, classificationEngine.classify(new ClassificationRequest("Default", 8, null, ProtocolType.UDP)));

        // define "" as name
        assertEquals(null, classificationEngine.classify(new ClassificationRequest("Default", 24, null, ProtocolType.TCP)));
        assertEquals(null, classificationEngine.classify(new ClassificationRequest("Default", 24, null, ProtocolType.UDP)));
    }

