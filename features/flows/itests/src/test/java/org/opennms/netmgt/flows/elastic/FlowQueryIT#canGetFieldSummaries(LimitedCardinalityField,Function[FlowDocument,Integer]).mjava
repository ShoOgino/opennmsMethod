    private void canGetFieldSummaries(LimitedCardinalityField field, Function<FlowDocument, Integer> aggregateBy) throws Exception {
        loadDefaultFlows();

        Object[] memoryResult = DEFAULT_FLOWS
                .stream()
                .map(fd -> FlowQueryIT.flowDoc2TrafficSummary(fd, aggregateBy.apply(fd).toString()))
                // collect the traffic summaries into a map
                // -> the map key is the traffic summary key and the map value is the merged traffic summary for that key
                .collect(Collectors.groupingBy(
                        TrafficSummary::getEntity,
                        Collectors.reducing(FlowQueryIT::mergeTrafficSummaries)
                ))
                .values()
                .stream()
                .map(o -> o.get())
                .sorted(Comparator.comparing(s -> new Integer(s.getEntity())))
                .toArray();

        List<TrafficSummary<String>> elasticResult = smartQueryService.getFieldSummaries(field, getFilters()).get();

        assertThat(elasticResult, contains(memoryResult));
    }

