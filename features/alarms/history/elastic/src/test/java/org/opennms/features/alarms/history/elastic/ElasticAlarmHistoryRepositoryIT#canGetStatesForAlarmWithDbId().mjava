    @Test
    public void canGetStatesForAlarmWithDbId() {
        OnmsAlarm a1 = createAlarm(1, 1L);

        // An alarm that doesn't exist should return an empty list
        assertThat(repo.getStatesForAlarmWithDbId(a1.getId()), empty());
        assertThat(repo.getStatesForAlarmWithReductionKey(a1.getReductionKey()), empty());

        // t=1
        PseudoClock.getInstance().advanceTime(1, TimeUnit.MILLISECONDS);

        // Index a1
        indexer.handleNewOrUpdatedAlarm(a1);

        // A single state change
        await().until(() -> repo.getStatesForAlarmWithDbId(a1.getId()), hasSize(equalTo(1)));
        assertThat(repo.getStatesForAlarmWithReductionKey(a1.getReductionKey()), hasSize(equalTo(1)));

        // t=2
        PseudoClock.getInstance().advanceTime(1, TimeUnit.MILLISECONDS);

        // Update the alarm
        updateAlarmWithEvent(a1, 2L);
        indexer.handleNewOrUpdatedAlarm(a1);

        // Two state changes
        await().until(() -> repo.getStatesForAlarmWithDbId(a1.getId()), hasSize(equalTo(2)));
        assertThat(repo.getStatesForAlarmWithReductionKey(a1.getReductionKey()), hasSize(equalTo(2)));

        // t=3
        PseudoClock.getInstance().advanceTime(1, TimeUnit.MILLISECONDS);

        // Delete the alarm
        PseudoClock.getInstance().advanceTime(1, TimeUnit.MILLISECONDS);
        indexer.handleDeletedAlarm(a1.getId(), a1.getReductionKey());

        // Three state changes
        await().until(() -> repo.getStatesForAlarmWithDbId(a1.getId()), hasSize(equalTo(3)));
        assertThat(repo.getStatesForAlarmWithReductionKey(a1.getReductionKey()), hasSize(equalTo(3)));
    }

