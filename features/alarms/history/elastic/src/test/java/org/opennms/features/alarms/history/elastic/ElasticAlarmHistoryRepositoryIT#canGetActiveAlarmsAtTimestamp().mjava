    @Test
    public void canGetActiveAlarmsAtTimestamp() {
        long queryTime = 10;

        // No alarms initially
        assertThat(repo.getActiveAlarmsAt(queryTime), hasSize(equalTo(0)));

        // t=1
        PseudoClock.getInstance().advanceTime(1, TimeUnit.MILLISECONDS);

        // Index some alarm
        OnmsAlarm a1 = createAlarm(1, 1L);
        indexer.handleNewOrUpdatedAlarm(a1);

        // One alarm active
        await().until(() -> repo.getActiveAlarmsAt(queryTime), hasSize(equalTo(1)));
        assertThat(repo.getNumActiveAlarmsAt(queryTime), equalTo(1L));

        // t=2
        PseudoClock.getInstance().advanceTime(1, TimeUnit.MILLISECONDS);

        // Index another alarm
        OnmsAlarm a2 = createAlarm(2, 2L);
        indexer.handleNewOrUpdatedAlarm(a2);

        // Two alarms active
        await().until(() -> repo.getActiveAlarmsAt(queryTime), hasSize(equalTo(2)));
        assertThat(repo.getNumActiveAlarmsAt(queryTime), equalTo(2L));

        // t=3
        PseudoClock.getInstance().advanceTime(1, TimeUnit.MILLISECONDS);

        // Delete the second alarm
        indexer.handleDeletedAlarm(a2.getId(), a2.getReductionKey());

        // One alarm active
        await().until(() -> repo.getActiveAlarmsAt(queryTime), hasSize(equalTo(1)));
        assertThat(repo.getNumActiveAlarmsAt(queryTime), equalTo(1L));

        // t=4
        PseudoClock.getInstance().advanceTime(1, TimeUnit.MILLISECONDS);

        // Delete the first alarm
        indexer.handleDeletedAlarm(a1.getId(), a1.getReductionKey());

        // No alarms
        await().until(() -> repo.getActiveAlarmsAt(queryTime), hasSize(equalTo(0)));
        assertThat(repo.getNumActiveAlarmsAt(queryTime), equalTo(0L));
    }

