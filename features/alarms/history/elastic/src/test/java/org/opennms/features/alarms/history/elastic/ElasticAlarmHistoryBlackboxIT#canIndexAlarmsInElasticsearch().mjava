    @Test
    public void canIndexAlarmsInElasticsearch() {
        Scenario scenario = Scenario.builder()
                .withLegacyAlarmBehavior()
                .withNodeDownEvent(1, 1)
                .withAcknowledgmentForNodeDownAlarm(2, 1)
                .withNodeUpEvent(3, 1)
                .awaitUntil(waitForNAlarmsInES(2))
                .build();
        // Execute the scenario
        ScenarioResults scenarioResults = scenario.play();

        // Verify the set of alarms at various points in time

        // t=0, no alarms
        assertThat(scenarioResults.getAlarms(0), hasSize(0));

        assertThat(alarmHistoryRepo.getActiveAlarmsAt(0), hasSize(0));

        // t=1, a single problem alarm that is not yet acknowledged
        assertThat(scenarioResults.getAlarms(1), hasSize(1));
        assertThat(scenarioResults.getProblemAlarm(1), hasSeverity(OnmsSeverity.MAJOR));
        assertThat(scenarioResults.getProblemAlarm(1), not(acknowledged()));

        assertThat(alarmHistoryRepo.getActiveAlarmsAt(1), hasSize(1));
        assertThat(getProblemAlarmAt(1), ExtAlarmsMatchers.hasSeverity(OnmsSeverity.MAJOR));
        assertThat(getProblemAlarmAt(1), not(ExtAlarmsMatchers.acknowledged()));

        // t=2, a single problem alarm that is acknowledged
        assertThat(scenarioResults.getAlarms(2), hasSize(1));
        assertThat(scenarioResults.getProblemAlarm(2), hasSeverity(OnmsSeverity.MAJOR));
        assertThat(scenarioResults.getProblemAlarm(2), acknowledged());

        assertThat(alarmHistoryRepo.getActiveAlarmsAt(2), hasSize(1));
        assertThat(getProblemAlarmAt(2), ExtAlarmsMatchers.hasSeverity(OnmsSeverity.MAJOR));
        assertThat(getProblemAlarmAt(2), ExtAlarmsMatchers.acknowledged());

        // t=3, a (acknowledged & cleared) problem and a resolution
        assertThat(scenarioResults.getAlarms(3), hasSize(2));
        assertThat(scenarioResults.getProblemAlarm(3), hasSeverity(OnmsSeverity.CLEARED));
        assertThat(scenarioResults.getProblemAlarm(3), acknowledged());
        assertThat(scenarioResults.getResolutionAlarm(3), hasSeverity(OnmsSeverity.NORMAL));

        assertThat(alarmHistoryRepo.getActiveAlarmsAt(4), hasSize(2));
        assertThat(getProblemAlarmAt(4), ExtAlarmsMatchers.hasSeverity(OnmsSeverity.CLEARED));
        assertThat(getProblemAlarmAt(4), ExtAlarmsMatchers.acknowledged());
        assertThat(getResolutionAlarmAt(4), ExtAlarmsMatchers.hasSeverity(OnmsSeverity.NORMAL));

        // t=âˆž
        Long lastKnownTime = scenarioResults.getLastKnownTime();
        assertThat(scenarioResults.getAlarms(lastKnownTime), hasSize(0));

        assertThat(alarmHistoryRepo.getActiveAlarmsAt(lastKnownTime), hasSize(0));
    }

