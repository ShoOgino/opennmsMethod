    @Test
    public void canIndexSituationsInElasticsearch() {
        Scenario scenario = Scenario.builder()
                .withLegacyAlarmBehavior()
                // Create some node down alarms
                .withNodeDownEvent(1, 1)
                .withNodeDownEvent(2, 2)
                // Create a situation that contains the node down alarms
                .withSituationForNodeDownAlarms(3, "situation#1", 1, 2)
                // Create another another node down alarm
                .withNodeDownEvent(4, 3)
                // Add the new nodeDown alarm to the situation
                .withSituationForNodeDownAlarms(5, "situation#1", 1, 2, 3)
                // Clear the nodeDown alarms
                .withNodeUpEvent(6, 1)
                .withNodeUpEvent(6, 2)
                .withNodeUpEvent(6, 3)
                .awaitUntil(waitForNAlarmsInES(7))
                .build();
        ScenarioResults scenarioResults = scenario.play();

        // Verify the set of alarms at various points in time

        // t=0, no alarms
        assertThat(scenarioResults.getAlarms(0), hasSize(0));

        assertThat(alarmHistoryRepo.getActiveAlarmsAt(0), hasSize(0));

        // t=1, a single problem alarm
        assertThat(scenarioResults.getAlarms(1), hasSize(1));
        assertThat(scenarioResults.getProblemAlarm(1), hasSeverity(OnmsSeverity.MAJOR));

        assertThat(alarmHistoryRepo.getActiveAlarmsAt(1), hasSize(1));
        assertThat(getProblemAlarmAt(1), ExtAlarmsMatchers.hasSeverity(OnmsSeverity.MAJOR));

        // t=2, two problem alarms
        assertThat(scenarioResults.getAlarms(2), hasSize(2));

        assertThat(alarmHistoryRepo.getActiveAlarmsAt(2), hasSize(2));

        // t=3, two problem alarms + 1 situation
        assertThat(scenarioResults.getAlarms(3), hasSize(3)); // the situation is also an alarm, so it is counted here
        assertThat(scenarioResults.getSituations(3), hasSize(1));
        assertThat(scenarioResults.getSituation(3), hasSeverity(OnmsSeverity.CRITICAL)); // situations have max(severity) + 1

        assertThat(alarmHistoryRepo.getActiveAlarmsAt(3), hasSize(3));
        assertThat(getSituationsAt(3), hasSize(1));

        final AlarmState situation = getSituationAt(3);
        assertThat(situation.getRelatedAlarms(), hasSize(2));

        // t=4, three problem alarms + 1 situation - only 2 of the problems are in the situation
        assertThat(scenarioResults.getAlarms(4), hasSize(4)); // the situation is also an alarm, so it is counted here
        assertThat(getSituationAt(3).getRelatedAlarms(), hasSize(2));

        // t=5, three problem alarms + 1 situation - all 3 alarms are in the situation
        assertThat(scenarioResults.getAlarms(5), hasSize(4)); // the situation is also an alarm, so it is counted here
        assertThat(getSituationAt(5).getRelatedAlarms(), hasSize(3));

        // t=âˆž
        Long lastKnownTime = scenarioResults.getLastKnownTime();
        assertThat(scenarioResults.getAlarms(lastKnownTime), hasSize(0));
        assertThat(alarmHistoryRepo.getActiveAlarmsAt(lastKnownTime), hasSize(0));
    }

