    @Test
    public void canGetLastStateOfAllAlarms() {
        // t=1
        PseudoClock.getInstance().advanceTime(1, TimeUnit.MILLISECONDS);

        // Index a1

        OnmsAlarm a1 = createAlarm(1, 1L);
        indexer.handleNewOrUpdatedAlarm(a1);

        // t=2
        PseudoClock.getInstance().advanceTime(1, TimeUnit.MILLISECONDS);

        // Delete a1
        indexer.handleDeletedAlarm(a1.getId(), a1.getReductionKey());

        // Index a2

        OnmsAlarm a2 = createAlarm(2, 2L);
        indexer.handleNewOrUpdatedAlarm(a2);

        // Wait until we have two results

        await().until(() -> repo.getLastStateOfAllAlarms(0, 10), hasSize(equalTo(2)));
        List<AlarmState> alarms = repo.getLastStateOfAllAlarms(0, 10);

        // a1 should be deleted
        AlarmState a1State = alarms.stream().filter(a -> a.getId() == 1).findFirst().orElse(null);
        assertThat(a1State.getDeletedTime(), notNullValue());

        // a2 should not be deleted
        AlarmState a2State = alarms.stream().filter(a -> a.getId() == 2).findFirst().orElse(null);
        assertThat(a2State.getDeletedTime(), nullValue());
    }

