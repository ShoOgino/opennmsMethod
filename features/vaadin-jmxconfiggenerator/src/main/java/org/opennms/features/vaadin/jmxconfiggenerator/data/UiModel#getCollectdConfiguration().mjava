	/**
	 * Creates a CollectdConfiguration snippet depending on the data saved here.
	 * 
	 * @return The CollecdConfiguration snippet depending on the data saved in
	 *         this model.
	 */
	 public CollectdConfiguration getCollectdConfiguration() {
		 CollectdConfiguration config = new CollectdConfiguration();

		 // set default package
		 Package defaultPackage = new Package();
		 defaultPackage.setName("default");

		 // set service
		 Service service = new Service();
		 service.setName(getServiceName());
		 service.setInterval(300000L);
		 service.setUserDefined(Boolean.TRUE.toString());
		 service.setStatus("on");

		 // add parameters to service
		 service.addParameter(createParameter("port", getServiceConfig().getPort()));
		 service.addParameter(createParameter("retry", "2"));
		 service.addParameter(createParameter("timeout", "3000"));
		 service.addParameter(createParameter("protocol", "rmi"));
		 service.addParameter(createParameter("urlPath", String.format("/%s", getServiceConfig().isJmxmp() ? "jmxmp" : "jmxrmi")));
		 service.addParameter(createParameter("rrd-base-name", "java"));
		 service.addParameter(createParameter("ds-name", getServiceName()));
		 service.addParameter(createParameter("friendly-name", getServiceName()));
		 service.addParameter(createParameter("collection", getServiceName()));
		 service.addParameter(createParameter("thresholding-enabled", Boolean.TRUE.toString()));

		 // If we used credentials, we set them here as well
		 if (getServiceConfig().isAuthenticate()) {
			 service.addParameter(createParameter("factory", "PASSWORD-CLEAR"));
			 service.addParameter(createParameter("username", getServiceConfig().getUser()));
			 service.addParameter(createParameter("password", getServiceConfig().getPassword()));
		 }

		 // create Collector
		 Collector collector = new Collector();
		 collector.setService(getServiceName());
		 collector.setClassName("org.opennms.netmgt.collectd.Jsr160Collector");

		 // register service, package and collector to configuration
		 config.addPackage(defaultPackage);
		 config.addCollector(collector);
		 defaultPackage.addService(service);

		 return config;
	 }

