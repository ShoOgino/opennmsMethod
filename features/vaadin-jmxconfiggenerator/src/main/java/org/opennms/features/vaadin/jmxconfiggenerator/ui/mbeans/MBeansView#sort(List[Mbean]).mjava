	private static void sort(List<Mbean> input) {
		// 1st sort the mbeans
		Collections.sort(input, new Comparator<Mbean>() {
			@Override
			public int compare(Mbean o1, Mbean o2) {
				return o1.getObjectname().compareTo(o2.getObjectname());
			}
		});

		// 2nd sort the mbean tree (attributes, composite attributes, composite members)
		for (Mbean eachMbean : input) {
			// Sort attributes
			Collections.sort(eachMbean.getAttrib(), new Comparator<Attrib>() {
				@Override
				public int compare(Attrib o1, Attrib o2) {
					return o1.getName().compareTo(o2.getName());
				}
			});

			// sort Composite Attributes
			Collections.sort(eachMbean.getCompAttrib(), new Comparator<CompAttrib>() {
				@Override
				public int compare(CompAttrib o1, CompAttrib o2) {
					return o1.getName().compareTo(o2.getName());
				}
			});

			// Sort Composite Members
			for (CompAttrib eachCompAttrib : eachMbean.getCompAttrib()) {
				Collections.sort(eachCompAttrib.getCompMember(), new Comparator<CompMember>() {
					@Override
					public int compare(CompMember o1, CompMember o2) {
						return o1.getName().compareTo(o2.getName());
					}
				});
			}
		}
	}

