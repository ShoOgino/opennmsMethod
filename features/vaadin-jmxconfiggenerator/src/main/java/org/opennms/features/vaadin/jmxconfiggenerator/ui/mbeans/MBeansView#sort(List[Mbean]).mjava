	private static void sort(List<Mbean> input) {
		// 1st sort the mbeans
		Collections.sort(input, new Comparator<Mbean>() {
			@Override
			public int compare(Mbean o1, Mbean o2) {
				return o1.getObjectname().compareTo(o2.getObjectname());
			}
		});

		// 2nd sort the mbean tree (attributes, composite attributes, composite members)
		for (Mbean eachMbean : input) {
			// Sort attributes
			final List<Attrib> attribs = new ArrayList<>(eachMbean.getAttribList());
			Collections.sort(attribs);
			eachMbean.setAttribCollection(attribs);

			// sort Composite Attributes
			final List<CompAttrib> compAttribs = new ArrayList<>(eachMbean.getCompAttribList());
			Collections.sort(compAttribs);
			eachMbean.setCompAttribCollection(compAttribs);

			// Sort Composite Members
			for (CompAttrib eachCompAttrib : eachMbean.getCompAttribList()) {
	                        final List<CompMember> compMembers = new ArrayList<>(eachCompAttrib.getCompMemberList());
				Collections.sort(compMembers);
				eachCompAttrib.setCompMemberList(compMembers);
			}
		}
	}

