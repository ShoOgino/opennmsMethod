		/**
		 * DefaultFieldFactory works for us, we only add some additional stuff to
		 * each field -> if needed.
		 *
		 */
		private void initFields() {
			CheckBox authenticateField = new CheckBox();
			authenticateField.setCaption("Authentication");
			authenticateField.setId("authenticate");
			authenticateField.addValueChangeListener(new Property.ValueChangeListener() {
				@Override
				public void valueChange(Property.ValueChangeEvent event) {
					updateAuthenticationFields((Boolean) event.getProperty().getValue());
				}
			});
			authenticateField.setDescription("Connection requires authentication");

			TextField userField = new TextField();
			userField.setId("authenticateUser");
			userField.setCaption("User");
			userField.setNullRepresentation("");
			userField.setDescription("Username for JMX-RMI Authentication");

			PasswordField passwordField = new PasswordField();
			passwordField.setId("authenticatePassword");
			passwordField.setCaption("Password");
			passwordField.setNullRepresentation("");
			passwordField.setDescription("Password for JMX-RMI Authentication");

			final TextField serviceNameField = new TextField();
			serviceNameField.setWidth(400, Unit.PIXELS);
			serviceNameField.setCaption("Service name");
			serviceNameField.setNullRepresentation("");
			serviceNameField.setRequired(true);
			serviceNameField.setRequiredError("required");
			serviceNameField.addValidator(new RegexpValidator("^[A-Za-z0-9_-]+$",
					"You must specify a valid name. Allowed characters: (A-Za-z0-9_-)"));
			serviceNameField.setDescription("The service name of the JMX data collection config, e.g. cassandra, jboss, tomcat");

			final TextField connectionTextField = new TextField();
			connectionTextField.setWidth(400, Unit.PIXELS);
			connectionTextField.setCaption("Connection");
			connectionTextField.setRequired(true);
			connectionTextField.setRequiredError("required");
			connectionTextField.setDescription("The JMX connection string, e.g.: <hostname>:<port> OR service:jmx:<protocol>:<sap>");

			addComponent(serviceNameField);
			addComponent(connectionTextField);
			addComponent(authenticateField);
			addComponent(userField);
			addComponent(passwordField);

			final Field<?> skipDefaultVMField = configFieldGroup.buildAndBind(MetaConfigModel.SKIP_DEFAULT_VM);
			skipDefaultVMField.setCaption("Skip JVM MBeans");
			skipDefaultVMField.setId(MetaConfigModel.SKIP_DEFAULT_VM);
			((AbstractComponent) skipDefaultVMField).setDescription("Set to include/exclude default JavaVM MBeans");
			addComponent(skipDefaultVMField);

			final Field<?> skipNonNumberField = configFieldGroup.buildAndBind(MetaConfigModel.SKIP_NON_NUMBER);
			skipNonNumberField.setCaption("Skip non-number values");
			((AbstractComponent) skipNonNumberField).setDescription("Set to include/exclude non-number values");
			addComponent(skipNonNumberField);

			configFieldGroup.bind(serviceNameField, MetaConfigModel.SERVICE_NAME);
			configFieldGroup.bind(connectionTextField, MetaConfigModel.CONNECTION);
			configFieldGroup.bind(passwordField, MetaConfigModel.PASSWORD);
			configFieldGroup.bind(authenticateField, MetaConfigModel.AUTHENTICATE);
			configFieldGroup.bind(userField, MetaConfigModel.USER);
		}

