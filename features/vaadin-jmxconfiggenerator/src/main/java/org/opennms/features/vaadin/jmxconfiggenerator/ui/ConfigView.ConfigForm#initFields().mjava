		/**
		 * DefaultFieldFactory works for us, we only add some additional stuff to
		 * each field -> if needed.
		 *
		 */
		private void initFields() {
			CheckBox authenticateField = new CheckBox();
			authenticateField.setCaption("Authentication");
			authenticateField.addValueChangeListener(new Property.ValueChangeListener() {
				@Override
				public void valueChange(Property.ValueChangeEvent event) {
					updateAuthenticationFields((Boolean) event.getProperty().getValue());
				}
			});
			authenticateField.setDescription("Connection requires authentication");

			TextField userField = new TextField();
			userField.setCaption("User");
			userField.setNullRepresentation("");
			userField.setDescription("Username for JMX-RMI Authentication");

			PasswordField passwordField = new PasswordField();
			passwordField.setCaption("Password");
			passwordField.setNullRepresentation("");
			passwordField.setDescription("Password for JMX-RMI Authentication");

			final TextField serviceNameField = new TextField();
			serviceNameField.setCaption("Service name");
			serviceNameField.setNullRepresentation("");
			serviceNameField.setRequired(true);
			serviceNameField.setRequiredError("required");
			serviceNameField.addValidator(new RegexpValidator("^[A-Za-z0-9_-]+$",
					"You must specify a valid name. Allowed characters: (A-Za-z0-9_-)"));
			serviceNameField.setDescription("The service name of the JMX data collection config, e.g. cassandra, jboss, tomcat");

			final TextField hostNameField = new TextField();
			hostNameField.setCaption("Host");
			hostNameField.setRequired(true);
			hostNameField.setRequiredError("required");
			hostNameField.setDescription("Hostname or ip address of JMX-RMI host");

			final TextField portField = new TextField();
			portField.setCaption("Port");
			portField.setRequired(true);
			portField.setRequiredError("required");
			portField.setId("port");
			portField.setDescription("Port of JMX-RMI service");

			addComponent(serviceNameField);
			addComponent(hostNameField);
			addComponent(portField);
			addComponent(authenticateField);
			addComponent(userField);
			addComponent(passwordField);

			final Field<?> skipDefaultVMField = configFieldGroup.buildAndBind(MetaConfigModel.SKIP_DEFAULT_VM);
			skipDefaultVMField.setCaption("Skip JVM MBeans");
			skipDefaultVMField.setId(MetaConfigModel.SKIP_DEFAULT_VM);
			((AbstractComponent) skipDefaultVMField).setDescription("Set to include/exclude default JavaVM MBeans");
			addComponent(skipDefaultVMField);

			final Field<?> jmxMpField = configFieldGroup.buildAndBind(MetaConfigModel.JMXMP);
			jmxMpField.setCaption("JMXMP");
			((AbstractComponent) jmxMpField).setDescription("Use JMXMP instead of JMX-RMI");
			addComponent(jmxMpField);

			configFieldGroup.bind(serviceNameField, MetaConfigModel.SERVICE_NAME);
			configFieldGroup.bind(hostNameField, MetaConfigModel.HOST);
			configFieldGroup.bind(portField, MetaConfigModel.PORT);
			configFieldGroup.bind(passwordField, MetaConfigModel.PASSWORD);
			configFieldGroup.bind(authenticateField, MetaConfigModel.AUTHENTICATE);
			configFieldGroup.bind(userField, MetaConfigModel.USER);
		}

