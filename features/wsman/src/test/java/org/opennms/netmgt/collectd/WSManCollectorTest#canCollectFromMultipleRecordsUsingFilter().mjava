    @Test
    public void canCollectFromMultipleRecordsUsingFilter() {
        Group group = new Group();
        group.setName("DCIM_NumericSensor");

        Attrib attr = new Attrib();
        attr.setName("CurrentReading");
        attr.setAlias("sysBoardInletTemp");
        attr.setFilter("#ElementName == 'System Board Inlet Temp'");
        attr.setType(AttributeType.GAUGE);
        group.addAttrib(attr);

        attr = new Attrib();
        attr.setName("CurrentReading");
        attr.setAlias("sysBoardExhaustTemp");
        attr.setFilter("#ElementName == 'System Board Exhaust Temp'");
        attr.setType(AttributeType.GAUGE);
        group.addAttrib(attr);

        CollectionAgent agent = mock(CollectionAgent.class);
        when(agent.getStorageDir()).thenReturn(new java.io.File(""));
        CollectionSetBuilder builder = new CollectionSetBuilder(agent);
        Supplier<Resource> resourceSupplier = () -> mock(NodeLevelResource.class);

        XMLTag xmlTag = XMLDoc.newDocument(true).addRoot("body")
                .addTag("DCIM_NumericSensor")
                    .addTag("CurrentReading").setText("260")
                    .addTag("ElementName").setText("System Board Inlet Temp")
                    .gotoRoot()
                .addTag("DCIM_NumericSensor")
                    .addTag("CurrentReading").setText("370")
                    .addTag("ElementName").setText("System Board Exhaust Temp");

        List<Node> nodes = xmlTag.gotoRoot().getChildElement().stream()
            .map(el -> (Node)el)
            .collect(Collectors.toList());

        WsManCollector.processEnumerationResults(group, builder, resourceSupplier, nodes);

        // Verify
        Map<String, CollectionAttribute> attributesByName = CollectionSetUtils.getAttributesByName(builder.build());
        assertEquals(Double.valueOf(260), attributesByName.get("sysBoardInletTemp").getNumericValue());
        assertEquals(Double.valueOf(370), attributesByName.get("sysBoardExhaustTemp").getNumericValue());
    }

