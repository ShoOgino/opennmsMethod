    /**
     * Used to build a {@link CollectionSet} from the enumeration results.
     */
    public static void processEnumerationResults(Group group, CollectionSetBuilder builder, Supplier<Resource> resourceSupplier, List<Node> nodes) {
        for (Node node : nodes) {
            // Call the resource supplier for every node process, this may create a new
            // resource, or use the instance that was last returned when processing this group
            final Resource resource = resourceSupplier.get();
            final ListMultimap<String, String> elementValues = ResponseHandlingUtils.toMultiMap(node);
            LOG.debug("Element values: {}", elementValues);

            // Associate the values with the configured attributes
            for (Attrib attrib : group.getAttrib()) {
                if (attrib.getFilter() != null && !ResponseHandlingUtils.matchesFilter(attrib.getFilter(), elementValues)) {
                    continue;
                }

                String valueAsString = null;
                if (ELEMENT_COUNT_ATTRIB_NAME.equals(attrib.getName())) {
                    valueAsString = Integer.toString(nodes.size());
                    LOG.debug("Found {} attribute, setting value to {}", attrib.getName(), valueAsString);
                } else {
                    final List<String> attributeValues = elementValues.get(attrib.getName());
                    if (attributeValues.size() > 1 && attrib.getIndexOf() != null) {
                        try {
                            int index = ResponseHandlingUtils.getMatchingIndex(attrib.getIndexOf(), elementValues);
                            valueAsString = attributeValues.get(index);
                        } catch (NoSuchElementException e) {
                            LOG.warn("No index was matched by index-of rule '{}' for attribute {} with values: {}.",
                                    attrib.getIndexOf(), attrib.getName(), elementValues);
                        }
                    } else {
                        // Grab the first value, defaulting to null is there are no values
                        valueAsString = Iterables.getFirst(elementValues.get(attrib.getName()), null);
                    }
                }
                if (valueAsString == null) {
                    LOG.warn("No value found for attribute: {} in group: {}", attrib.getName(), group.getName());
                    continue;
                }

                builder.withAttribute(resource, group.getName(), attrib.getAlias(), valueAsString, attrib.getType());
            }

            if (CollectionResource.RESOURCE_TYPE_NODE.equals(resource.getTypeName())) {
                // Only process the first element when dealing with node-level resources, otherwise the element
                // will overwrite the first, and so on...
                break;
            }
        }
    }

