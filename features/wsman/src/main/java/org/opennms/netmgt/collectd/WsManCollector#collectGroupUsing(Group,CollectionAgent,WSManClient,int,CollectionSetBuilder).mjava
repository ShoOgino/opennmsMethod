    private void collectGroupUsing(Group group, CollectionAgent agent, WSManClient client, int retries, CollectionSetBuilder builder) throws CollectionException {
        // Determine the appropriate resource type
        final NodeLevelResource nodeResource = new NodeLevelResource(agent.getNodeId());
        final AtomicInteger instanceId = new AtomicInteger();
        Supplier<Resource> resourceSupplier = () -> nodeResource;
        if (!"node".equalsIgnoreCase(group.getResourceType())) {
            resourceSupplier = () -> {
                // Generate a unique instance for each node in each group to ensure
                // that the attributes are grouped together properly.
                // Since these instances have no real meaning, a storage strategy
                // similar to the SiblingColumnStorageStrategy should be used instead
                // of the IndexStorageStrategy.
                final String instance = String.format("%s%d", group.getName(), instanceId.getAndIncrement());
                return new DeferredGenericTypeResource(nodeResource, group.getResourceType(), instance);
            };
        }
        if (LOG.isDebugEnabled()) {
            LOG.debug("Using resource {} for group named {}", resourceSupplier.get(), group.getName());
        }

        // Enumerate
        List<Node> nodes = Lists.newLinkedList();
        RetryNTimesLoop retryLoop = new RetryNTimesLoop(retries);
        while (retryLoop.shouldContinue()) {
            try {
                if (group.getFilter() == null) {
                    LOG.debug("Enumerating and pulling {} on {}.", group.getResourceUri(), client);
                    client.enumerateAndPull(group.getResourceUri(), nodes, true);
                } else {
                    LOG.debug("Enumerating and pulling {} with dialect {} and filter {} on {}.", group.getResourceUri(),
                            group.getDialect(), group.getFilter(), client);
                    client.enumerateAndPullUsingFilter(group.getResourceUri(), group.getDialect(), group.getFilter(), nodes, true);
                }
                break;
            } catch (WSManException e) {
                retryLoop.takeException(e);
            }
        }
        LOG.debug("Found {} nodes.", nodes.size());

        // Process the results
        processEnumerationResults(group, builder, resourceSupplier, nodes);
    }

