    public Map<String, String> getDataForResourceId(final String nodeId, final String resourceId) {
        return (Map<String, String>) m_transactionOperations.execute(new TransactionCallback<Object>() {
            @Override
            public Object doInTransaction(TransactionStatus transactionStatus) {
                Map<String, String> data = new HashMap<String, String>();

                if (nodeId == null) {
                    String arr0[] = resourceId.split("\\.");
                    String arr1[] = arr0[0].split("[\\[\\]]");
                    data.put("nodeId", arr1[1]);
                } else {
                    data.put("nodeId", nodeId);
                }

                data.put("nodeLabel", m_nodeDao.getLabelForId(Integer.valueOf(data.get("nodeId"))));

                List<OnmsResource> resourceList = m_resourceDao.getResourceById("node[" + data.get("nodeId") + "]").getChildResources();

                for (OnmsResource onmsResource : resourceList) {
                    if (resourceId.equals(onmsResource.getId())) {
                        data.put("resourceLabel", onmsResource.getLabel());
                        data.put("resourceTypeLabel", onmsResource.getResourceType().getLabel());

                        break;
                    }
                }
                return data;
            }
        });
    }

