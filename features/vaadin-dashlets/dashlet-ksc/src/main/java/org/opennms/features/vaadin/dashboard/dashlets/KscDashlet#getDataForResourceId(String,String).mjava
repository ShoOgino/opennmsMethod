    /**
     * Returns a map with graph metadata for a given nodeId.
     *
     * @param nodeId     the nodeId
     * @param resourceId the resourceId
     * @return a map with meta data, like resourceLabel, resourceTypeLabel
     */
    public Map<String, String> getDataForResourceId(final String nodeId, final String resourceId) {
        return m_transactionOperations.execute(new TransactionCallback<Map<String, String>>() {
            @Override
            public Map<String, String> doInTransaction(TransactionStatus transactionStatus) {
                Map<String, String> data = new HashMap<String, String>();

                String nodeIdentifier = Optional.ofNullable(nodeId).orElse(determineNodeIdByResourceId(resourceId));
                data.put("nodeId", nodeIdentifier);
                data.put("nodeLabel", m_nodeDao.getLabelForId(Integer.valueOf(nodeIdentifier)));

                List<OnmsResource> resourceList = m_resourceDao.getResourceById(ResourceId.get("node", nodeIdentifier)).getChildResources();

                for (OnmsResource onmsResource : resourceList) {
                    if (resourceId.equals(onmsResource.getId())) {
                        data.put("resourceLabel", onmsResource.getLabel());
                        data.put("resourceTypeLabel", onmsResource.getResourceType().getLabel());
                        break;
                    }
                }
                return data;
            }
        });
    }

