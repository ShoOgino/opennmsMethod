    /**
     * Returns a map with graph metadata for a given nodeId.
     *
     * @return a map with meta data, like resourceLabel, resourceTypeLabel
     */
    public Map<String, String> getDataForResourceId(final String nodeId, final String resourceIdString) {
        return m_transactionOperations.execute(new TransactionCallback<Map<String, String>>() {
            @Override
            public Map<String, String> doInTransaction(TransactionStatus transactionStatus) {
                Map<String, String> data = new HashMap<>();
                ResourceId resourceId = ResourceId.fromString(resourceIdString);

                OnmsNode node;
                OnmsResource resource;
                if(nodeId == null){
                    resource = determineResourceByResourceId(resourceId);
                    node = ResourceTypeUtils.getNodeFromResource(resource);
                } else {
                    node = m_nodeDao.get(nodeId);
                    resource = m_resourceDao.getResourceForNode(node);
                }
                data.put("nodeId", node.getNodeId());
                data.put("nodeLabel", node.getLabel());

                for (OnmsResource onmsResource : resource.getChildResources()) {
                    if (resourceId.equals(onmsResource.getId())) {
                        data.put("resourceLabel", onmsResource.getLabel());
                        data.put("resourceTypeLabel", onmsResource.getResourceType().getLabel());
                        break;
                    }
                }
                return data;
            }
        });
    }

