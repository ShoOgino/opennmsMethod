    /**
     * Updates the dashlet contents and computes new boosted state
     */
    @Override
    public void updateWallboard() {
        /**
         * removing old components
         */
        m_gridLayout.removeAllComponents();

        /**
         * iniatizing the parameters
         */
        int columns = 0;
        int rows = 0;

        String kscReportName = m_dashletSpec.getParameters().get("kscReport");

        if (kscReportName == null || "".equals(kscReportName)) {
            return;
        }

        KSC_PerformanceReportFactory kscPerformanceReportFactory = KSC_PerformanceReportFactory.getInstance();

        Map<Integer, String> reportsMap = kscPerformanceReportFactory.getReportList();

        int kscReportId = -1;

        for (Map.Entry<Integer, String> entry : reportsMap.entrySet()) {

            if (kscReportName.equals(entry.getValue())) {
                kscReportId = entry.getKey();
                break;
            }
        }

        if (kscReportId == -1) {
            return;
        }

        Report kscReport = kscPerformanceReportFactory.getReportByIndex(kscReportId);

        columns = kscReport.getGraphs_per_line();

        if (columns == 0) {
            columns = 1;
        }

        rows = kscReport.getGraphCount() / columns;

        if (rows == 0) {
            rows = 1;
        }

        if (kscReport.getGraphCount() % columns > 0) {
            rows++;
        }

        int width = 0;
        int height = 0;

        /*
        try {
            width = Integer.parseInt(m_dashletSpec.getParameters().get("width"));
        } catch (NumberFormatException numberFormatException) {
            width = 400;
        }

        try {
            height = Integer.parseInt(m_dashletSpec.getParameters().get("height"));
        } catch (NumberFormatException numberFormatException) {
            height = 100;
        }
         */

        /**
         * setting new columns/rows
         */
        m_gridLayout.setColumns(columns);
        m_gridLayout.setRows(rows);

        int i = 0;

        /**
         * adding the components
         */

        Page.getCurrent().getStyles().add(".box { margin: 5px; background-color: #444; border: 1px solid #999; border-top: 0; overflow: auto; }");
        Page.getCurrent().getStyles().add(".text { color:#ffffff; line-height: 11px; font-size: 9px; font-family: 'Lucida Grande', Verdana, sans-serif; font-weight: bold; }");
        Page.getCurrent().getStyles().add(".margin { margin:5px; }");

        for (int y = 0; y < m_gridLayout.getRows(); y++) {
            for (int x = 0; x < m_gridLayout.getColumns(); x++) {

                if (i < kscReport.getGraphCount()) {
                    Graph graph = kscReport.getGraph(i);

                    Map<String, String> data = getDataForResourceId(graph.getNodeId(), graph.getResourceId());

                    Calendar beginTime = Calendar.getInstance();
                    Calendar endTime = Calendar.getInstance();

                    KSC_PerformanceReportFactory.getBeginEndTime(graph.getTimespan(), beginTime, endTime);

                    String urlString = "/opennms/graph/graph.png?resourceId=" + graph.getResourceId() + "&report=" + graph.getGraphtype() + "&start=" + beginTime.getTimeInMillis() + "&end=" + endTime.getTimeInMillis() + (width > 0 ? "&width=" + width : "") + (height > 0 ? "&height=" + height : "");

                    Image image = new Image(null, new ExternalResource(urlString));

                    VerticalLayout verticalLayout = new VerticalLayout();

                    HorizontalLayout horizontalLayout = new HorizontalLayout();
                    horizontalLayout.addStyleName("box");
                    horizontalLayout.setWidth("100%");
                    horizontalLayout.setHeight("42px");

                    VerticalLayout leftLayout = new VerticalLayout();
                    leftLayout.setDefaultComponentAlignment(Alignment.TOP_LEFT);
                    leftLayout.addStyleName("margin");

                    Label labelTitle;

                    if (graph.getTitle() == null || "".equals(graph.getTitle())) {
                        labelTitle = new Label("&nbsp;");
                        labelTitle.setContentMode(ContentMode.HTML);
                    } else {
                        labelTitle = new Label(graph.getTitle());
                    }

                    labelTitle.addStyleName("text");

                    Label labelFrom = new Label("From: " + beginTime.getTime().toString());
                    labelFrom.addStyleName("text");

                    Label labelTo = new Label("To: " + endTime.getTime().toString());
                    labelTo.addStyleName("text");

                    Label labelNodeLabel = new Label(data.get("nodeLabel"));
                    labelNodeLabel.addStyleName("text");

                    Label labelResourceLabel = new Label(data.get("resourceTypeLabel") + ": " + data.get("resourceLabel"));
                    labelResourceLabel.addStyleName("text");

                    leftLayout.addComponent(labelTitle);
                    leftLayout.addComponent(labelFrom);
                    leftLayout.addComponent(labelTo);

                    VerticalLayout rightLayout = new VerticalLayout();
                    rightLayout.setDefaultComponentAlignment(Alignment.TOP_LEFT);
                    rightLayout.addStyleName("margin");

                    rightLayout.addComponent(labelNodeLabel);
                    rightLayout.addComponent(labelResourceLabel);

                    horizontalLayout.addComponent(leftLayout);
                    horizontalLayout.addComponent(rightLayout);

                    horizontalLayout.setExpandRatio(leftLayout, 1.0f);
                    horizontalLayout.setExpandRatio(rightLayout, 1.0f);

                    verticalLayout.addComponent(horizontalLayout);
                    verticalLayout.addComponent(image);
                    verticalLayout.setWidth(image.getWidth() + "px");

                    m_gridLayout.addComponent(verticalLayout, x, y);

                    verticalLayout.setComponentAlignment(horizontalLayout, Alignment.MIDDLE_CENTER);
                    verticalLayout.setComponentAlignment(image, Alignment.MIDDLE_CENTER);
                    m_gridLayout.setComponentAlignment(verticalLayout, Alignment.MIDDLE_CENTER);
                }
                i++;
            }
        }
    }

