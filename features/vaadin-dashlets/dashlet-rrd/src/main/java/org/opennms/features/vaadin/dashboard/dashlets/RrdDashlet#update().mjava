    /**
     * Updates the dashlet contents and computes new boosted state
     */
    @Override
    public void update() {
        /**
         * removing old components
         */
        m_gridLayout.removeAllComponents();

        /**
         * iniatizing the parameters
         */
        int columns = 0;
        int rows = 0;
        int width = 0;
        int height = 0;

        try {
            columns = Integer.parseInt(m_dashletSpec.getParameters().get("columns"));
        } catch (NumberFormatException numberFormatException) {
            columns = 1;
        }

        try {
            rows = Integer.parseInt(m_dashletSpec.getParameters().get("rows"));
        } catch (NumberFormatException numberFormatException) {
            rows = 1;
        }

        try {
            width = Integer.parseInt(m_dashletSpec.getParameters().get("width"));
        } catch (NumberFormatException numberFormatException) {
            width = 400;
        }

        try {
            height = Integer.parseInt(m_dashletSpec.getParameters().get("height"));
        } catch (NumberFormatException numberFormatException) {
            height = 100;
        }

        /**
         * getting the timeframe values
         */
        int timeFrameValue;
        int timeFrameType;

        try {
            timeFrameValue = Integer.parseInt(m_dashletSpec.getParameters().get("timeFrameValue"));
        } catch (NumberFormatException numberFormatException) {
            timeFrameValue = 1;
        }

        try {
            timeFrameType = Integer.parseInt(m_dashletSpec.getParameters().get("timeFrameType"));
        } catch (NumberFormatException numberFormatException) {
            timeFrameType = Calendar.HOUR;
        }

        /**
         * setting new columns/rows
         */
        m_gridLayout.setColumns(columns);
        m_gridLayout.setRows(rows);

        int i = 0;

        /**
         * adding the components
         */
        for (int x = 0; x < m_gridLayout.getColumns(); x++) {
            for (int y = 0; y < m_gridLayout.getRows(); y++) {
                String graphUrl = m_dashletSpec.getParameters().get("graphUrl" + i);

                if (graphUrl != null && !"".equals(graphUrl)) {
                    Image image = new Image(m_dashletSpec.getParameters().get("nodeLabel" + i) + ", " + m_dashletSpec.getParameters().get("graphId" + i), new ExternalResource(m_rrdGraphHelper.imageUrlForGraph(m_dashletSpec.getParameters().get("graphUrl" + i), width, height, timeFrameType, timeFrameValue)));
                    m_gridLayout.addComponent(image, x, y);
                    m_gridLayout.setComponentAlignment(image, Alignment.MIDDLE_CENTER);
                }
                i++;
            }
        }
    }

