    /**
     * This method sets up the grid with {@link RrdGraphEntry} components
     *
     * @param columns the number of columns
     * @param rows    the number of rows
     */
    private void recreateCells(int columns, int rows) {
        /**
         * removing old entries
         */
        for (int y = 0; y < m_gridLayout.getRows(); y++) {
            for (int x = 0; x < m_gridLayout.getColumns(); x++) {
                if (x >= columns || y >= rows) {
                    m_gridLayout.removeComponent(x, y);
                }
            }
        }

        /**
         * setting the new columns/rows
         */
        m_gridLayout.setColumns(columns);
        m_gridLayout.setRows(rows);

        /**
         * getting the timeframe values
         */
        int timeFrameValue;
        int timeFrameType;

        try {
            timeFrameValue = Integer.parseInt(m_timeFrameValue.getValue().toString());
        } catch (NumberFormatException numberFormatException) {
            timeFrameValue = 1;
        }

        try {
            timeFrameType = Integer.parseInt(m_timeFrameType.getValue().toString());
        } catch (NumberFormatException numberFormatException) {
            timeFrameType = Calendar.HOUR;
        }

        /**
         * adding the new entries
         */
        int i = 0;

        for (int y = 0; y < m_gridLayout.getRows(); y++) {
            for (int x = 0; x < m_gridLayout.getColumns(); x++) {
                if (m_gridLayout.getComponent(x, y) == null) {
                    RrdGraphEntry rrdGraphEntry = new RrdGraphEntry(m_nodeDao, m_rrdGraphHelper, x, y);

                    rrdGraphEntry.setPreviewTimeFrame(timeFrameType, timeFrameValue);
                    /**
                     * setting the values if defined in the {@link DashletSpec}
                     */
                    if (m_dashletSpec.getParameters().containsKey("nodeId" + i)) {
                        rrdGraphEntry.setNodeId(m_dashletSpec.getParameters().get("nodeId" + i));
                    }

                    if (m_dashletSpec.getParameters().containsKey("nodeLabel" + i)) {
                        rrdGraphEntry.setNodeLabel(m_dashletSpec.getParameters().get("nodeLabel" + i));
                    }

                    if (m_dashletSpec.getParameters().containsKey("resourceTypeId" + i)) {
                        rrdGraphEntry.setResourceTypeId(m_dashletSpec.getParameters().get("resourceTypeId" + i));
                    }

                    if (m_dashletSpec.getParameters().containsKey("resourceTypeLabel" + i)) {
                        rrdGraphEntry.setResourceTypeLabel(m_dashletSpec.getParameters().get("resourceTypeLabel" + i));
                    }

                    if (m_dashletSpec.getParameters().containsKey("resourceId" + i)) {
                        rrdGraphEntry.setResourceId(m_dashletSpec.getParameters().get("resourceId" + i));
                    }

                    if (m_dashletSpec.getParameters().containsKey("resourceLabel" + i)) {
                        rrdGraphEntry.setResourceLabel(m_dashletSpec.getParameters().get("resourceLabel" + i));
                    }

                    if (m_dashletSpec.getParameters().containsKey("graphId" + i)) {
                        rrdGraphEntry.setGraphId(m_dashletSpec.getParameters().get("graphId" + i));
                    }

                    if (m_dashletSpec.getParameters().containsKey("graphLabel" + i)) {
                        rrdGraphEntry.setGraphLabel(m_dashletSpec.getParameters().get("graphLabel" + i));
                    }

                    if (m_dashletSpec.getParameters().containsKey("graphUrl" + i)) {
                        rrdGraphEntry.setGraphUrl(m_dashletSpec.getParameters().get("graphUrl" + i));
                    }

                    rrdGraphEntry.update();

                    m_gridLayout.addComponent(rrdGraphEntry, x, y);
                }
                i++;
            }
        }
    }

