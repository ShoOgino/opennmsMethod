    /**
     * Constructor for instantiating new objects of this class.
     *
     * @param dashletSpec the {@link DashletSpec} to be edited
     */
    public RrdDashletConfigurationWindow(DashletSpec dashletSpec, RrdGraphHelper rrdGraphHelper, NodeDao nodeDao) {
        /**
         * Setting the members
         */
        m_dashletSpec = dashletSpec;
        m_nodeDao = nodeDao;
        m_rrdGraphHelper = rrdGraphHelper;

        /**
         * creating the grid layout
         */
        m_gridLayout = new GridLayout();
        m_gridLayout.setSizeFull();
        m_gridLayout.setColumns(1);
        m_gridLayout.setRows(1);

        /**
         * setting up the layouts
         */
        FormLayout leftFormLayout = new FormLayout();
        FormLayout middleFormLayout = new FormLayout();
        FormLayout rightFormLayout = new FormLayout();

        /**
         * creating the columns and rows selection fields
         */
        m_columnsSelect = new NativeSelect();
        m_columnsSelect.setCaption("Columns");
        m_columnsSelect.setImmediate(true);
        m_columnsSelect.setNewItemsAllowed(false);
        m_columnsSelect.setMultiSelect(false);
        m_columnsSelect.setInvalidAllowed(false);
        m_columnsSelect.setNullSelectionAllowed(false);

        m_rowsSelect = new NativeSelect();
        m_rowsSelect.setCaption("Rows");
        m_rowsSelect.setImmediate(true);
        m_rowsSelect.setNewItemsAllowed(false);
        m_rowsSelect.setMultiSelect(false);
        m_rowsSelect.setInvalidAllowed(false);
        m_rowsSelect.setNullSelectionAllowed(false);

        for (int i = 1; i < 5; i++) {
            m_columnsSelect.addItem(i);
            m_rowsSelect.addItem(i);
        }

        /**
         * setting the values/defaults
         */
        int columns;
        int rows;

        try {
            columns = Integer.parseInt(m_dashletSpec.getParameters().get("columns"));
        } catch (NumberFormatException numberFormatException) {
            columns = 1;
        }

        try {
            rows = Integer.parseInt(m_dashletSpec.getParameters().get("rows"));
        } catch (NumberFormatException numberFormatException) {
            rows = 1;
        }

        m_columnsSelect.setValue(columns);
        m_rowsSelect.setValue(rows);

        /**
         * width and height fields
         */
        m_widthField = new TextField();
        m_widthField.setCaption("Graph Width");
        m_widthField.setValue(m_dashletSpec.getParameters().get("width"));

        m_heightField = new TextField();
        m_heightField.setCaption("Graph Height");
        m_heightField.setValue(m_dashletSpec.getParameters().get("height"));

        m_timeFrameValue = new TextField("Timeframe value");
        m_timeFrameValue.setValue(m_dashletSpec.getParameters().get("timeFrameValue"));

        m_timeFrameType = new NativeSelect("Timeframe type");
        m_timeFrameType.setNullSelectionAllowed(false);
        m_timeFrameType.setMultiSelect(false);
        m_timeFrameType.setNewItemsAllowed(false);

        m_timeFrameType.setItemCaptionMode(AbstractSelect.ItemCaptionMode.EXPLICIT);
        m_timeFrameType.addItem(String.valueOf(Calendar.MINUTE));
        m_timeFrameType.setItemCaption(String.valueOf(Calendar.MINUTE), "Minute");

        m_timeFrameType.addItem(String.valueOf(Calendar.HOUR_OF_DAY));
        m_timeFrameType.setItemCaption(String.valueOf(Calendar.HOUR_OF_DAY), "Hour");

        m_timeFrameType.addItem(String.valueOf(Calendar.DAY_OF_YEAR));
        m_timeFrameType.setItemCaption(String.valueOf(Calendar.DAY_OF_YEAR), "Day");

        m_timeFrameType.addItem(String.valueOf(Calendar.WEEK_OF_YEAR));
        m_timeFrameType.setItemCaption(String.valueOf(Calendar.WEEK_OF_YEAR), "Week");

        m_timeFrameType.addItem(String.valueOf(Calendar.MONTH));
        m_timeFrameType.setItemCaption(String.valueOf(Calendar.MONTH), "Month");

        m_timeFrameType.addItem(String.valueOf(Calendar.YEAR));
        m_timeFrameType.setItemCaption(String.valueOf(Calendar.YEAR), "Year");

        m_timeFrameType.setValue(m_dashletSpec.getParameters().get("timeFrameType"));

        m_timeFrameType.setImmediate(true);
        m_timeFrameValue.setImmediate(true);

        m_timeFrameType.addValueChangeListener(new Property.ValueChangeListener() {
            @Override
            public void valueChange(Property.ValueChangeEvent valueChangeEvent) {
                updatePreview();
            }
        });

        m_timeFrameValue.addValueChangeListener(new Property.ValueChangeListener() {
            @Override
            public void valueChange(Property.ValueChangeEvent valueChangeEvent) {
                updatePreview();
            }
        });

        /**
         * initial creation of the grid
         */
        recreateCells(columns, rows);

        /**
         * creating the value listeners for columns/rows
         */
        m_columnsSelect.addValueChangeListener(new Property.ValueChangeListener() {
            @Override
            public void valueChange(Property.ValueChangeEvent valueChangeEvent) {
                recreateCells(Integer.valueOf(valueChangeEvent.getProperty().getValue().toString()), m_gridLayout.getRows());
            }
        });

        m_rowsSelect.addValueChangeListener(new Property.ValueChangeListener() {
            @Override
            public void valueChange(Property.ValueChangeEvent valueChangeEvent) {
                recreateCells(m_gridLayout.getColumns(), Integer.valueOf(valueChangeEvent.getProperty().getValue().toString()));
            }
        });

        leftFormLayout.addComponent(m_columnsSelect);
        leftFormLayout.addComponent(m_widthField);
        leftFormLayout.addComponent(m_timeFrameValue);
        middleFormLayout.addComponent(m_rowsSelect);
        middleFormLayout.addComponent(m_heightField);
        middleFormLayout.addComponent(m_timeFrameType);

        /**
         * KSC import stuff
         */
        Button importButton = new Button("KSC Import");

        final NativeSelect selectKSCReport = new NativeSelect();

        selectKSCReport.setCaption("KSC Report");
        selectKSCReport.setImmediate(true);
        selectKSCReport.setNewItemsAllowed(false);
        selectKSCReport.setMultiSelect(false);
        selectKSCReport.setInvalidAllowed(false);
        selectKSCReport.setNullSelectionAllowed(false);
        selectKSCReport.setImmediate(true);

        kscPerformanceReportFactory = KSC_PerformanceReportFactory.getInstance();

        Map<Integer, String> mapOfKscReports = kscPerformanceReportFactory.getReportList();

        if (mapOfKscReports.size() == 0) {
            importButton.setEnabled(false);
        }

        for (Map.Entry<Integer, String> entry : mapOfKscReports.entrySet()) {
            selectKSCReport.addItem(entry.getKey());

            selectKSCReport.setItemCaption(entry.getKey(), entry.getValue());

            if (selectKSCReport.getValue() == null) {
                selectKSCReport.setValue(entry.getKey());
            }
        }

        importButton.addClickListener(new Button.ClickListener() {
            @Override
            public void buttonClick(Button.ClickEvent clickEvent) {
                importKscReport(Integer.valueOf(selectKSCReport.getValue().toString()));
            }
        });

        rightFormLayout.addComponent(selectKSCReport);
        rightFormLayout.addComponent(importButton);

        /**
         * setting up the layout
         */
        HorizontalLayout horizontalLayout = new HorizontalLayout();
        horizontalLayout.setMargin(true);

        horizontalLayout.addComponent(leftFormLayout);
        horizontalLayout.addComponent(middleFormLayout);
        horizontalLayout.addComponent(rightFormLayout);

        /**
         * Using an additional {@link com.vaadin.ui.HorizontalLayout} for layouting the buttons
         */
        HorizontalLayout buttonLayout = new HorizontalLayout();

        buttonLayout.setMargin(true);
        buttonLayout.setSpacing(true);
        buttonLayout.setWidth("100%");

        /**
         * Adding the cancel button...
         */
        Button cancel = new Button("Cancel");
        cancel.addClickListener(new Button.ClickListener() {
            @Override
            public void buttonClick(Button.ClickEvent event) {
                close();
            }
        });

        cancel.setClickShortcut(ShortcutAction.KeyCode.ESCAPE, null);
        buttonLayout.addComponent(cancel);
        buttonLayout.setExpandRatio(cancel, 1.0f);
        buttonLayout.setComponentAlignment(cancel, Alignment.TOP_RIGHT);

        /**
         * ...and the OK button
         */
        Button ok = new Button("Save");

        ok.addClickListener(new Button.ClickListener() {
            @Override
            public void buttonClick(Button.ClickEvent event) {
                /**
                 * saving the data
                 */
                m_dashletSpec.getParameters().put("width", m_widthField.getValue().toString());
                m_dashletSpec.getParameters().put("height", m_heightField.getValue().toString());
                m_dashletSpec.getParameters().put("columns", m_columnsSelect.getValue().toString());
                m_dashletSpec.getParameters().put("rows", m_rowsSelect.getValue().toString());

                int timeFrameValue;
                int timeFrameType;

                try {
                    timeFrameValue = Integer.parseInt(m_timeFrameValue.getValue().toString());
                } catch (NumberFormatException numberFormatException) {
                    timeFrameValue = 1;
                }

                try {
                    timeFrameType = Integer.parseInt(m_timeFrameType.getValue().toString());
                } catch (NumberFormatException numberFormatException) {
                    timeFrameType = Calendar.HOUR;
                }

                m_dashletSpec.getParameters().put("timeFrameType", String.valueOf(timeFrameType));
                m_dashletSpec.getParameters().put("timeFrameValue", String.valueOf(timeFrameValue));

                int i = 0;

                for (int y = 0; y < m_gridLayout.getRows(); y++) {
                    for (int x = 0; x < m_gridLayout.getColumns(); x++) {
                        RrdGraphEntry rrdGraphEntry = (RrdGraphEntry) m_gridLayout.getComponent(x, y);
                        m_dashletSpec.getParameters().put("nodeLabel" + i, rrdGraphEntry.getNodeLabel());
                        m_dashletSpec.getParameters().put("nodeId" + i, rrdGraphEntry.getNodeId());
                        m_dashletSpec.getParameters().put("resourceTypeLabel" + i, rrdGraphEntry.getResourceTypeLabel());
                        m_dashletSpec.getParameters().put("resourceTypeId" + i, rrdGraphEntry.getResourceTypeId());
                        m_dashletSpec.getParameters().put("resourceId" + i, rrdGraphEntry.getResourceId());
                        m_dashletSpec.getParameters().put("resourceLabel" + i, rrdGraphEntry.getResourceLabel());
                        m_dashletSpec.getParameters().put("graphLabel" + i, rrdGraphEntry.getGraphLabel());
                        m_dashletSpec.getParameters().put("graphId" + i, rrdGraphEntry.getGraphId());
                        m_dashletSpec.getParameters().put("graphUrl" + i, rrdGraphEntry.getGraphUrl());

                        i++;
                    }
                }

                WallboardProvider.getInstance().save();
                ((WallboardConfigUI) getUI()).notifyMessage("Data saved", "Properties");

                close();
            }
        });

        ok.setClickShortcut(ShortcutAction.KeyCode.ENTER, null);
        buttonLayout.addComponent(ok);

        /**
         * Adding the layout and setting the content
         */

        VerticalLayout verticalLayout = new VerticalLayout();
        verticalLayout.setMargin(true);

        verticalLayout.addComponent(horizontalLayout);
        verticalLayout.addComponent(m_gridLayout);
        verticalLayout.addComponent(buttonLayout);
        verticalLayout.setExpandRatio(m_gridLayout, 2.0f);
        verticalLayout.setSizeFull();

        setContent(verticalLayout);
    }

