    /**
     * Import the KSC report with the given name
     */
    private void importKscReport(int reportId) {
        Report report = kscPerformanceReportFactory.getReportByIndex(reportId);

        int columns = Math.max(1, report.getGraphsPerLine().orElse(1));

        int rows = report.getGraphs().size() / columns;

        if (rows == 0) {
            rows = 1;
        }

        if (report.getGraphs().size() % columns > 0) {
            rows++;
        }

        for (int y = 0; y < m_gridLayout.getRows(); y++) {
            for (int x = 0; x < m_gridLayout.getColumns(); x++) {
                if (x >= columns || y >= rows) {
                    m_gridLayout.removeComponent(x, y);
                }
            }
        }

        m_columnsSelect.setValue(columns);
        m_rowsSelect.setValue(rows);

        m_gridLayout.setColumns(columns);
        m_gridLayout.setRows(rows);

        int timeFrameValue = 1;
        int timeFrameType = Calendar.HOUR;

        int i = 0;

        for (int y = 0; y < m_gridLayout.getRows(); y++) {
            for (int x = 0; x < m_gridLayout.getColumns(); x++) {

                if (m_gridLayout.getComponent(x, y) == null) {
                    RrdGraphEntry rrdGraphEntry = new RrdGraphEntry(m_nodeDao, m_rrdGraphHelper, x, y);
                    rrdGraphEntry.setPreviewTimeFrame(timeFrameType, timeFrameValue);
                    m_gridLayout.addComponent(rrdGraphEntry, x, y);
                }

                RrdGraphEntry rrdGraphEntry = (RrdGraphEntry) m_gridLayout.getComponent(x, y);

                /**
                 * setting the values if defined in the KSC report
                 */
                if (i < report.getGraphs().size()) {
                    final int index = i;
                    setRrdGraphEntryFromKscReportGraph(rrdGraphEntry, report.getGraphs().get(index));
                }

                rrdGraphEntry.update();

                i++;
            }
        }
    }

