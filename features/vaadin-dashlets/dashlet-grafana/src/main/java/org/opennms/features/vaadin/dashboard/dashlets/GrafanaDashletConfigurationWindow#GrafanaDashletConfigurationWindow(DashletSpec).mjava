    /**
     * Constructor for instantiating new objects of this class.
     *
     * @param dashletSpec the {@link DashletSpec} to be edited
     */
    public GrafanaDashletConfigurationWindow(DashletSpec dashletSpec) {
        /**
         * Setting the members
         */
        m_dashletSpec = dashletSpec;

        setWidth("60%");
        setHeight("55%");

        /**
         * Layout the components...
         */
        FormLayout topLayout = new FormLayout();
        topLayout.setSizeFull();
        topLayout.setWidth("100%");

        NativeSelect dashboardSelect = new NativeSelect();
        dashboardSelect.setCaption("Grafana Dashboard");
        dashboardSelect.addItem("Test");
        dashboardSelect.setDescription("Grafana Dashboard to be displayed");
        dashboardSelect.setImmediate(true);
        dashboardSelect.setNewItemsAllowed(false);
        dashboardSelect.setMultiSelect(false);
        dashboardSelect.setInvalidAllowed(false);
        dashboardSelect.setNullSelectionAllowed(false);
        dashboardSelect.setWidth("80%");

        GrafanaDashletQuickRangePicker grafanaDashletQuickRangePicker = new GrafanaDashletQuickRangePicker();
        grafanaDashletQuickRangePicker.setCaption("Quick ranges");
        grafanaDashletQuickRangePicker.setDescription("Quick ranges defined");
        grafanaDashletQuickRangePicker.setImmediate(true);
        grafanaDashletQuickRangePicker.setWidth("100%");

        TextField timeRangeFrom = new TextField();
        timeRangeFrom.setCaption("From");
        timeRangeFrom.setDescription("Start of time range to be displayed");
        timeRangeFrom.setImmediate(true);
        timeRangeFrom.setWidth("60%");
        timeRangeFrom.setTextChangeEventMode(AbstractTextField.TextChangeEventMode.EAGER);

        TextField timeRangeTo = new TextField();
        timeRangeTo.setCaption("To");
        timeRangeTo.setDescription("End of time range to be displayed");
        timeRangeTo.setImmediate(true);
        timeRangeTo.setWidth("60%");
        timeRangeTo.setTextChangeEventMode(AbstractTextField.TextChangeEventMode.EAGER);

        topLayout.addComponent(dashboardSelect);
        topLayout.addComponent(grafanaDashletQuickRangePicker);
        topLayout.addComponent(timeRangeFrom);
        topLayout.addComponent(timeRangeTo);

        /**
         * Implement listeners for value changes...
         */
        grafanaDashletQuickRangePicker.addQuickRangeListener(q -> {
            timeRangeFrom.setValue(q.getFrom());
            timeRangeTo.setValue(q.getTo());
        });

        timeRangeFrom.addTextChangeListener(e -> {
            grafanaDashletQuickRangePicker.selectQuickRange(e.getText(), timeRangeTo.getValue());
        });

        timeRangeTo.addTextChangeListener(e -> {
            grafanaDashletQuickRangePicker.selectQuickRange(timeRangeFrom.getValue(), e.getText());
        });

        /**
         * Now make the Grafana API call...
         */
        final Map<String, String> grafanaDashboards;

        try {
            grafanaDashboards = getGrafanaDashboards();

            String firstItem = null;
            for(Map.Entry<String, String> grafanaDashboard : grafanaDashboards.entrySet()) {
                dashboardSelect.addItem(grafanaDashboard.getKey());

                if (firstItem == null) {
                    firstItem = grafanaDashboard.getKey();
                }
            }

            dashboardSelect.select(firstItem);

            if (!Strings.isNullOrEmpty(m_dashletSpec.getParameters().get("title"))) {
                dashboardSelect.select(m_dashletSpec.getParameters().get("title"));
            }

            timeRangeFrom.setValue(m_dashletSpec.getParameters().get("from"));
            timeRangeTo.setValue(m_dashletSpec.getParameters().get("to"));

            grafanaDashletQuickRangePicker.selectQuickRange(timeRangeFrom.getValue(), timeRangeTo.getValue());
        } catch (GrafanaDashletException e) {
            /**
             * On failure create a simple layout with error description and message...
             */
            Label errorLabel = new Label("<b>Error retrieving Grafana Dashboards via HTTP API!</b><br/>" +
                    "Please verify that the following entries are correctly configured in your opennms.properties:" +
                    "<ul><li>org.opennms.grafanaBox.apiKey</li>" +
                    "<li>org.opennms.grafanaBox.protocol</li>" +
                    "<li>org.opennms.grafanaBox.hostname</li>" +
                    "<li>org.opennms.grafanaBox.port</li></ul>" +
                    "Error message:<br/>" +
                    "<pre>" + StringEscapeUtils.escapeHtml(e.getMessage()) + "</pre>");

            errorLabel.setContentMode(ContentMode.HTML);

            VerticalLayout errorLayout = new VerticalLayout();
            errorLayout.addComponent(errorLabel);

            VerticalLayout verticalLayout = new VerticalLayout();
            verticalLayout.setMargin(true);

            HorizontalLayout closeButtonLayout = new HorizontalLayout();

            closeButtonLayout.setMargin(true);
            closeButtonLayout.setSpacing(true);
            closeButtonLayout.setWidth("100%");

            /**
             * ...add only a "Close" button...
             */
            Button closeButton = new Button("Close", event -> { close(); });
            closeButton.setClickShortcut(ShortcutAction.KeyCode.ENTER, null);

            closeButtonLayout.addComponent(closeButton);

            verticalLayout.addComponent(errorLayout);
            verticalLayout.addComponent(closeButtonLayout);
            verticalLayout.setExpandRatio(errorLayout, 0.85f);
            verticalLayout.setExpandRatio(closeButtonLayout, 0.15f);
            verticalLayout.setSizeFull();

            /**
             * ...and display it.
             */
            setContent(verticalLayout);
            return;
        }

        /**
         * Using an additional {@link com.vaadin.ui.HorizontalLayout} for layouting the buttons
         */
        HorizontalLayout buttonLayout = new HorizontalLayout();

        buttonLayout.setMargin(true);
        buttonLayout.setSpacing(true);
        buttonLayout.setWidth("100%");

        /**
         * Adding the cancel button...
         */
        Button cancel = new Button("Cancel");
        cancel.setDescription("Cancel editing");
        cancel.addClickListener(e->{
            close();
        });

        cancel.setClickShortcut(ShortcutAction.KeyCode.ESCAPE, null);
        buttonLayout.addComponent(cancel);
        buttonLayout.setExpandRatio(cancel, 1.0f);
        buttonLayout.setComponentAlignment(cancel, Alignment.TOP_RIGHT);

        /**
         * ...and the OK button
         */
        Button ok = new Button("Save");
        ok.setDescription("Save properties and close");

        ok.addClickListener(e->{
            /**
             * saving the data
             */
            m_dashletSpec.getParameters().put("uri", grafanaDashboards.get(dashboardSelect.getValue().toString()));
            m_dashletSpec.getParameters().put("title", dashboardSelect.getValue().toString());
            m_dashletSpec.getParameters().put("from", timeRangeFrom.getValue());
            m_dashletSpec.getParameters().put("to", timeRangeTo.getValue());

            WallboardProvider.getInstance().save();
            ((WallboardConfigUI) getUI()).notifyMessage("Data saved", "Properties");

            close();
        });

        ok.setClickShortcut(ShortcutAction.KeyCode.ENTER, null);
        buttonLayout.addComponent(ok);

        /**
         * Now mix all together...
         */
        VerticalLayout verticalLayout = new VerticalLayout();
        verticalLayout.setMargin(true);

        verticalLayout.addComponent(topLayout);
        verticalLayout.addComponent(buttonLayout);
        verticalLayout.setExpandRatio(topLayout, 0.85f);
        verticalLayout.setExpandRatio(buttonLayout, 0.15f);
        verticalLayout.setSizeFull();

        setContent(verticalLayout);
    }

