    /**
     * <p>createURLStreamHandler</p>
     * <p/>
     * Create stream handler
     *
     * @param protocol name as {@link java.lang.String} object.
     * @return a {@java.net.URLStreamHandler} object.
     */
    @SuppressWarnings("unchecked")
    @Override
    public URLStreamHandler createURLStreamHandler(String protocol) {
        Class<? extends URLConnection> c = null;
        if (!urlConnections.containsKey(protocol)) {
            logger.info("No protocol mapping with '{}' found. Return null. Creating...", protocol);
            return null; // No existing protocol mapping
        }

        try {
            c = (Class<? extends URLConnection>) Class.forName(urlConnections.get(protocol));
        } catch (ClassNotFoundException e) {
            logger.warn("Class not found for protocol '{}' and return null. Error message: '{}'", protocol, e.getMessage());
            return null; // We couldn't load a class for the protocol
        }
        return new GenericURLStreamHandler(c, urlDefaultPorts.get(protocol)); // Return the stream handler for the customized protocol
    }

