    /**
     * <P>
     * This method attempts to find the method with the signature <EM>public
     * static void main(String[])</EM> if it is part of the passed class. The
     * first matching method is returned to the caller.
     * </P>
     * 
     * @param c
     *            The class to search for the main method.
     * 
     * @return The matching method if one is found. If one is not found then a
     *         null is returned.
     * 
     */
    private static Method findMain(Class<?> c) {

        Method[] methods = c.getMethods();
        for (int i = 0; i < methods.length; i++) {
            Class<?>[] args = methods[i].getParameterTypes();
            Class<?> retType = methods[i].getReturnType();
            int modifiers = methods[i].getModifiers();
            boolean validModifiers = Modifier.isStatic(modifiers) && Modifier.isPublic(modifiers);

            if (validModifiers && methods[i].getName().equals(MAIN_METHOD_NAME) && args.length == MAIN_PARAMETER_TYPES.length && retType.getName().equals(MAIN_RETURN_TYPE)) {
                // do a looping check to figure out if it
                // is the correct ordering of parameters.
                //
                boolean isOK = true;
                for (int x = 0; isOK && x < args.length; x++) {
                    if (!args[x].getName().equals(MAIN_PARAMETER_TYPES[x]))
                        isOK = false;
                }

                // it has all the qualifications of being
                //
                // public static void main(String[] args)
                //
                if (isOK)
                    return methods[i];
            }
        }
        return null;
    }

