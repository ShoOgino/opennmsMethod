    /**
     * <P>
     * Returns a true value if the semaphore is successfully acquired by the
     * application. A false value is returned if the acquisition does not work.
     * </P>
     *
     * @return True if the semaphore is acquired, false otherwise.
     * @throws java.lang.InterruptedException if any.
     */
    public synchronized boolean acquire() throws InterruptedException {
        // Category log = ThreadCategory.getInstance(getClass());
        // if(log.isDebugEnabled())
        // log.debug("acquire: thread attempt to gain semaphore access");

        /*
         * Part of acquiring the resource is to calculate if the time quantum
         * has expired. If so then the maximum value is reset for the class, and
         * the time is noted. This may not be the optimal situation, but it
         * should guarentee that no more than _maxValue is used in any one
         * quantum!
         */
        boolean bRC = false;
        long ms = (long) m_lQuantum - timeSinceReset();
        if (ms < 0) {
            reset();
            // if(log.isDebugEnabled())
            // log.debug("acquire: semaphore value reset");
        } else if (m_lCurValue == 0 && ms > 0) {
            // has the effect of blocking without
            // releasing the lock!
            //
            // if(log.isDebugEnabled())
            // log.debug("acquire: semaphore sleeping thread for " + ms + "ms");

            Thread.sleep(ms);
            reset();

            // if(log.isDebugEnabled())
            // log.debug("acquire: semaphore value reset");
        }

        if (m_lCurValue > 0) {
            --m_lCurValue;
            bRC = true;
        }

        // if(log.isDebugEnabled())
        // log.debug("acquire: returning value " + bRC);

        return bRC;
    }

