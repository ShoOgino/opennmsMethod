    /**
     * <p>
     * Constructs a new instance of the thread pool class. The thread pool
     * consumes {@link java.lang.Runnable Runnable}instances from the input
     * queue, calling the <code>run</code> method as they are consumed.
     * </p>
     * 
     * <p>
     * The size of the thread pool is controlled by the low and high water
     * marks, each water mark being the ratio of queue elements to threads. As
     * the ratio grows past the high water mark more threads are added, up to
     * the maximum amount. As the ratio drops past the low water mark the number
     * of threads are reduced.
     * </p>
     * 
     * @param name
     *            The name of the thread pool.
     * @param loMark
     *            The lower ratio used to mark thread reduction.
     * @param hiMark
     *            The high ration used to mark thread production.
     * @param max
     *            The maximum number of threads in the pool.
     * 
     * @exception java.lang.IllegalArgumentException
     *                Thrown if the low or high marks are invalid, or the
     *                maximum number of threads is invalid.
     */
    public RunnableConsumerThreadPool(String name, float loMark, float hiMark, int max) {
        Assert.state(loMark <= hiMark, "The lo-mark must be less than the hi-mark");
        Assert.state(max > 0, "The maximum number of fibers must be greater than zero");

        m_delegateQ = new SizingFifoQueue<Runnable>();
        m_fibers = new Fiber[max];
        m_poolName = name;
        m_hiRatio = hiMark;
        m_loRatio = loMark;
        m_maxSize = max;
        m_tGroup = new ThreadGroup(name + "-tgroup");
        m_poolStatus = START_PENDING;

        m_completedListeners = new ArrayList<RunnableCompletionListener>();
        m_errorListeners = new ArrayList<RunnableErrorListener>();

        m_log4jPrefix = ThreadCategory.getPrefix();
    }

