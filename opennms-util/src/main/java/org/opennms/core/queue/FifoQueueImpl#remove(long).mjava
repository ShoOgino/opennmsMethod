    /**
     * {@inheritDoc}
     *
     * Removes the next element from the queue if one becomes available before
     * the timeout expires. If the timeout expires before an element is
     * available then a <code>null</code> reference is returned to the caller.
     * @exception org.opennms.core.queue.FifoQueueException
     *                Thrown if a queue error occurs.
     * @exception java.lang.InterruptedException
     *                Thrown if the thread is interrupted.
     */
    public T remove(long timeout) throws FifoQueueException, InterruptedException {
        T rval = null;
        synchronized (m_delegate) {
            if (m_delegate.isEmpty()) {
                long start = System.currentTimeMillis();
                long diff = 0;
                do {
                    m_delegate.wait(timeout - diff);
                    diff = System.currentTimeMillis() - start;
                } while (diff < timeout && m_delegate.isEmpty());
            }

            if (!m_delegate.isEmpty())
                rval = m_delegate.removeFirst();
        }

        return rval;
    }

