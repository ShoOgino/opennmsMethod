    /**
     * Convenience method for parsing the users.xml file.
     * <p/>
     * <p>This method is synchronized so only one thread at a time
     * can parse the users.xml file and create the <code>principal</code>
     * instance variable.</p>
     */
    protected synchronized void parse() {
        //reset the principals cache        
        m_principals = new HashMap();

        try {
            UserFactory.init();
            UserManager factory = UserFactory.getInstance();
            containerLog.debug("Reloaded the users.xml file into memory");

            Map map = factory.getUsers();
            containerLog.debug("Loaded " + map.size() + " users into memory");

            Iterator iterator = map.keySet().iterator();

            while (iterator.hasNext()) {
                String key = (String) iterator.next();
                OpenNMSPrincipal principal = new OpenNMSPrincipal((User) map.get(key));
                m_principals.put(key, principal);
            }

            containerLog.debug("Loaded the regular users into the principal cache");
        } catch (MarshalException e) {
            containerLog.error("Could not parse the users.xml file", e);
        } catch (ValidationException e) {
            containerLog.error("Could not parse the users.xml file", e);
        } catch (FileNotFoundException e) {
            containerLog.error("Could not find the users.xml file", e);
        } catch (Exception e) {
            containerLog.error("Unexpected exception parsing users.xml file", e);
        }

        try {
            //load the "magic" users
            Map[] maps = parseMagicUsers();
            Map magicUserToPasswordMapping = maps[0];
            m_magicRoleMapping = maps[1];
            containerLog.debug("Loaded the magic user config file");

            Iterator iterator = magicUserToPasswordMapping.keySet().iterator();

            while (iterator.hasNext()) {
                String name = (String) iterator.next();
                String password = (String) magicUserToPasswordMapping.get(name);

                User magicUser = new User();
                magicUser.setUserId(name);
                magicUser.setPassword(UserFactory.getInstance().encryptedPassword(password));

                m_principals.put(name, new OpenNMSPrincipal(magicUser));
            }

            containerLog.debug("Loaded the magic users into the principal cache");

            m_magicUsersLastModified = m_magicUsersFile.lastModified();
            containerLog.debug("Updated the magic user file last modified time stamp to " + m_magicUsersLastModified);
        } catch (FileNotFoundException e) {
            containerLog.error("Could not find the magic users file", e);
        } catch (IOException e) {
            containerLog.error("Could not read the magic users file", e);
        } catch (Exception e) {
            containerLog.error("Unexpected exception parsing users.xml file", e);
        }
        
        initialized = true;
    }

