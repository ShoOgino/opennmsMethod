	/**
	 * A method to request an alarm list from the OpenNMS database using the ossDao, 
	 * convert them to OSS/J alarms using the onmsAlarmOssjMapper and send the OSS/J alarms
	 * using the alarm list connection manager (alcm) to  update the the AlarmMonitor bean.
	 * This is called from ossDao every time there is an update to the database.
	 */
	public void sendAlarms() {
		Logger log = getLog();	

		Hashtable<AlarmKey,AlarmValue> ossjAlarmUpdateList = new Hashtable<AlarmKey,AlarmValue>();
		OnmsAlarm[] onmsAlarmUpdateList = null;
		AlarmValue ossjAlarm;

		try {
			if (log.isDebugEnabled()) log.debug("sendAlarms() using ossDao to get current alarm list");
			onmsAlarmUpdateList=ossDao.getAlarmCache();
		} catch(Exception ex) {
			//problems contacting the PostgreSQL database
			log.error("sendAlarms() Cannot retrieve alarms from ossDao.getAlarmCache()", ex);
			throw new UndeclaredThrowableException(ex, "sendAlarms() Cannot retrieve alarms from ossDao.getAlarmCache()");
		}

		if (log.isDebugEnabled()) log.debug("sendAlarms() Alarms fetched. Processing each alarm in list.");
		// Convert the OnmsAlarm array alarmBuf to a hashtable using the alarmid as the key.
		try {
			for(int i = 0; i < onmsAlarmUpdateList.length; i++) {
				if (log.isDebugEnabled()) log.debug("sendAlarms() processing an OpenNMS alarm:");

				// if useUeiList is true only the alarms whose UEI's are listed in the 
				// QosD-configuration.xml file will be included in the list. 
				if (useUeiList) {
					if (log.isDebugEnabled()) log.debug("sendAlarms() useUeiList= true: using UeiList to determine alarms to send");
					if( null == triggerUeiList.get(onmsAlarmUpdateList[i].getUei()) ) {
						if (log.isDebugEnabled()) log.debug("sendAlarms() alarm UEI not in QosD-configuration.xml. Not sending. alarmID:"+ onmsAlarmUpdateList[i].getId()+" alarmUEI:"+onmsAlarmUpdateList[i].getUei() );
						continue; // ignore this event and return
					}
					if (log.isDebugEnabled()) log.debug("sendAlarms() alarm UEI is in QosD-configuration.xml. Trying to send alarmID:"+ onmsAlarmUpdateList[i].getId()+" alarmUEI:"+onmsAlarmUpdateList[i].getUei() );
				}

				if (onmsAlarmUpdateList[i].getAlarmType()!= 1)	{
					if (log.isDebugEnabled()) log.debug("sendAlarms() Alarm AlarmType !=1 ( not raise alarm ) Not sending alarmID:"+ onmsAlarmUpdateList[i].getId()+" :alarmBuf[i].getQosAlarmState()=: "+ onmsAlarmUpdateList[i].getQosAlarmState());
					continue;
				} else {
					if (log.isDebugEnabled()) log.debug("sendAlarms() Alarm AlarmType==1 ( raise alarm ) Sending alarmID:"+ onmsAlarmUpdateList[i].getId()+" :alarmBuf[i].getQosAlarmState()=: "+ onmsAlarmUpdateList[i].getQosAlarmState());
					try {

						// Code which creates the OSSJ AlarmValue from the Spring OSS?J AlarmValue Specification
						if (log.isDebugEnabled()) log.debug("sendAlarms(): generating the OSS/J alarm specification:");
						ossjAlarm = alarmListConnectionManager.makeAlarmValueFromSpec();
						if (log.isDebugEnabled()) log.debug("sendAlarms(): OSS/J alarm specification:"+	OOSSAlarmValue.converttoString(ossjAlarm));

						// Code which creates the OSSJ AlarmValue from the Spring OSS/J AlarmValue Specification
						if (log.isDebugEnabled()) log.debug("sendAlarms(): onmsAlarmOssjMapper.populateOssjAlarmFromOpenNMSAlarm:");
						ossjAlarm = onmsAlarmOssjMapper.populateOssjAlarmFromOpenNMSAlarm(ossjAlarm, onmsAlarmUpdateList[i]);
						if (log.isDebugEnabled()) log.debug("buildList(): alarm specifcation:"+	OOSSAlarmValue.converttoString(ossjAlarm));

						// TODO selector on ACKNOWLEDGED and CLEARED - currently always sends all alarms in list
						if (true) try {
							// alarms which are ACKNOWLEDGED and CLEARED are included in this current alarm list
							if (log.isDebugEnabled()) log.debug("sendAlarms() including ACKNOWLEDGED and CLEARED alarms in alarm in list");
							ossjAlarmUpdateList.put(ossjAlarm.getAlarmKey(), ossjAlarm); 
						} catch (Exception e) {
							log.error("sendAlarms() error putting alarm in alarmList", e);
						}

						//TODO - THIS CODE NEVER RUN
						else try {
							// no alarms which are ACKNOWLEDGED and CLEARED are included in this current alarm list
							if (ossjAlarm.getAlarmAckState() == javax.oss.fm.monitor.AlarmAckState.UNACKNOWLEDGED ) {
								ossjAlarmUpdateList.put(ossjAlarm.getAlarmKey(), ossjAlarm); // put all unacknowledged alarms in list
							} 
							else if (ossjAlarm.getPerceivedSeverity() != javax.oss.fm.monitor.PerceivedSeverity.CLEARED ){
								ossjAlarmUpdateList.put(ossjAlarm.getAlarmKey(), ossjAlarm);	// put all uncleared acknowledged alarms in list			
							}
						} catch (Exception e) {
							log.error("sendAlarms() error in alarmACKState or PercievedSeverity - check alarm definitons", e);
						}
					} catch (Exception ex) {
						log.error("sendAlarms() error trying to populate alarm - alarm disguarded - check alarm definitons", ex);
					}
				}
			}
		}
		catch (Exception ex){
			log.error("Qosd.sendAlarms(): Problem when building alarm list:", ex);
			throw new UndeclaredThrowableException(ex, "Qosd.sendAlarms(): Problem when building alarm list");
		}
		try{
			// debug code prints out alarm list to be sent if enabled
			if (log.isDebugEnabled()) {
				log.debug("QosD sendAlarms() - Alarm list built:");
				log.debug("QosD sendAlarms() - ******* Alarm List to be sent : primary keys");
				for (AlarmKey key : ossjAlarmUpdateList.keySet()) {
					AlarmValue a = ossjAlarmUpdateList.get(key);
					log.debug("QosD sendAlarms() key : " + key.getPrimaryKey() +"  AlarmValue.getAlarmChangedTime: " + a.getAlarmChangedTime()); 
				}
				log.debug("QosD sendAlarms() - ******* END OF LIST");
				log.debug("QosD sendAlarms() Sending alarm list to bean");
			}		
			//send the alarmList to Ossbeans EJB or local runner via the connection manager thread.

			alarmListConnectionManager.send(ossjAlarmUpdateList);
		}
		catch (Exception ex){
			log.error("Qosd.sendAlarms(): Problem when sending alarm list:", ex);
			throw new UndeclaredThrowableException(ex,"Qosd.sendAlarms(): Problem when sending alarm list");
		}
	}

