	/** {@inheritDoc} */
        @Override
	public void onNotifyAckStateChangedEvent(NotifyAckStateChangedEvent nasce, OssBeanAlarmEventReceiver callingAer) {
		//	Get a reference to the QoSD logger instance assigned by OpenNMS
		String logheader="RX:"+callingAer.getName()+":"+this.getClass().getSimpleName()+".onNotifyAckStateChangedEvent(): ";

		LOG.debug("{} Statistics: {}", logheader, callingAer.getRuntimeStatistics());
		if (!initialised ){
			LOG.error("{} event handler not initialised. init() must be called by receiver before handling any events", logheader);
			return;
		}
		//TODO ADD IN BUSINESS LOGIC

		/*

		try{

			LOG.debug("QoSDrxAlarmEventReceiverEventHandlerImpl().onNotifyAckStateChangedEvent(): Received an NotifyAckStateChangedEvent - AlarmPrimaryKey: " + nasce.getAlarmKey().getAlarmPrimaryKey() +" New Ack State: " + nasce.getAlarmAckState());
			OnmsAlarm alarm=null;
			try {
				String ossPrimaryKey=nasce.getAlarmKey().getAlarmPrimaryKey();
				String applicationDN=nasce.getAlarmKey().getApplicationDN();
				alarm = ossDao.getCurrentAlarmForUniqueKey(applicationDN, ossPrimaryKey);
				alarm.setId(null);  // must be done to do update
			}
			catch (IllegalStateException ise) {
				LOG.error("QoSDrxAlarmEventReceiverEventHandlerImpl().onNotifyAckStateChangedEvent():: nasce alarm key set in illegal state"+ ise);
			}
			catch (java.lang.IllegalArgumentException iae){
				LOG.error("QoSDrxAlarmEventReceiverEventHandlerImpl().onNotifyAckStateChangedEvent(): "+ iae);
			}

			if(nasce.getAlarmAckState() == AlarmAckState.ACKNOWLEDGED) {
				if (alarm != null ) { // if opennms has an alarm with this id to update
					try {
						alarm.setAlarmAckTime(nasce.getAckTime());
						alarm.setAlarmAckUser(nasce.getAckUserId());
						ossDao.updateCurrentAlarmForUniqueKey(alarm);
						LOG.debug("QoSDrxAlarmEventReceiverEventHandlerImpl().onNotifyAckStateChangedEvent(): Acknowledging Alarm: " + nasce.getAlarmKey().getAlarmPrimaryKey() +" New Ack State: " + nasce.getAlarmAckState());
					}
					catch ( Exception ex ) {
						LOG.error("QoSDrxAlarmEventReceiverEventHandlerImpl().onNotifyAckStateChangedEvent():: problem updating alarm ack state"+ ex);
					}
				}
				else {  //if opennms does not have an alarm with this id to update
					LOG.debug("QoSDrxAlarmEventReceiverEventHandlerImpl().onNotifyAckStateChangedEvent(): Alarm cannot be acknowledged - not in database: " + nasce.getAlarmKey().getAlarmPrimaryKey());
				}
			} else { // unacknowledge alarm
				if (alarm != null ) { // if opennms has an alarm with this id to update
					try {
						alarm.setAlarmAckTime(null);  // may throw illegal as putting in null
						alarm.setAlarmAckUser(null);
						ossDao.updateCurrentAlarmForUniqueKey(alarm);
						LOG.debug("QoSDrxAlarmEventReceiverEventHandlerImpl().onNotifyAckStateChangedEvent(): UnAcknowledging Alarm: " + nasce.getAlarmKey().getAlarmPrimaryKey() +" New Ack State: " + nasce.getAlarmAckState());
					}
					catch ( Exception ex ) {
						LOG.error("QoSDrxAlarmEventReceiverEventHandlerImpl().onNotifyAckStateChangedEvent():: problem updating alarm ack state"+ ex);
					}
				}
				else {  //if opennms does not have an alarm with this id to update
					LOG.debug("QoSDrxAlarmEventReceiverEventHandlerImpl().onNotifyAckStateChangedEvent(): Alarm cannot be Unacknowledged - not in database: " + nasce.getAlarmKey().getAlarmPrimaryKey());
				}
			}
		}
		catch(Throwable e){
			LOG.error("QoSDrxAlarmEventReceiverEventHandlerImpl().onNotifyAckStateChangedEvent() Error : ", e);
		}

		 */

	}

