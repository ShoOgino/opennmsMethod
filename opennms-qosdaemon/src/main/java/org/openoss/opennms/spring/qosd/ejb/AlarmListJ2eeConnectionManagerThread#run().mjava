	/* (non-Javadoc)
	 * @see org.openoss.opennms.spring.qosd.ejb.ConnectionManager#run()
	 */
	/**
	 * <p>run</p>
	 *
	 * @throws java.lang.IllegalStateException if any.
	 */
        @Override
	public void run() throws IllegalStateException
	{
		//log.info("Thread started");
		/* if the init variable is false then the thread has not been initialised
		 * yet so throw an IllegalStateException to indicate this.
		 */
		if(!init)
			throw new IllegalStateException("AlarmListJ2eeConnectionManagerThread - You must call init() before calling run()");
		
		while(true)
		{
			//log.debug("Status = " + status);
			//log.debug("Send_status = " + send_status);
			
			/* If we are connected to the bean and we need to 
			 * send some alarms then try to send them. If the
			 * connection has failed, reconnect. 
			 */
			if((status == CONNECTED) && ((send_status == SEND) || (send_status == REBUILD)) )
			{
				if (log.isDebugEnabled()) log.debug("AlarmListJ2eeConnectionManagerThread.run() Sending alarms");
				try
				{
					if(alarmInternals == null)
						log.error("AlarmListJ2eeConnectionManagerThread.run() alarmInternals is null");
					
					if (send_status == REBUILD) {
						if(alarmInternals == null) {
							log.error("AlarmListJ2eeConnectionManagerThread.run() rebuilt_message is null");
						}
						alarmInternals.rebuildAlarmList(rebuilt_message);
					}
					else {
						if(alarmList == null)
							log.error("AlarmListJ2eeConnectionManagerThread.run() alarmList is null");
						alarmInternals.updateAlarmList(alarmList);
					}
					send_status = SENT;
				}
				catch(RemoteException remote_ex)
				{
					log.error("Could not contact bean - reconnection attempt started");
					status = DISCONNECTED;
					send_status = SEND;
				}
				catch(NullPointerException np_ex)
				{
					log.error("alarmInternals is null, JBoss server may be down", np_ex);
					log.info("Attempting reconnect");
					status = DISCONNECTED;
					send_status = SEND;
				}
			}
			
			
			/* If we are connected to the bean and we don't
			 * need to send anything, then test that we are
			 * still connected. If not try to reestablish the 
			 * connection before we need to use it again.
			 */
			if(status == CONNECTED && send_status == SENT)
			{
				if (log.isDebugEnabled()) log.debug("AlarmListJ2eeConnectionManagerThread.run() - Polling connection");
				/* test if the connection has been lost
				 * by polling the getVersion method of the 
				 * bean periodically. If the call throws a
				 * remote exception then the bean connection
				 * has been lost. 
				 */
				try
				{
					alarmInternals.getVersion();
				}
				catch(RemoteException remote_ex)
				{
					log.error("AlarmListJ2eeConnectionManagerThread.run() Could not contact bean - reconnection attempt started");
					status = DISCONNECTED;
				}
			}
			
			/*If we have disconnected from the bean, reconnect
			 */			
			if(status == DISCONNECTED)
			{
				if (log.isDebugEnabled()) log.debug("AlarmListJ2eeConnectionManagerThread.run() Attempting Connecting to bean");
				try
				{
					lookupBean();
					status = CONNECTED;
					log.info("AlarmListJ2eeConnectionManagerThread.run() Connected to bean");
				}
				catch(NamingException name_ex)
				{
					status = DISCONNECTED;
					log.error("AlarmListJ2eeConnectionManagerThread.run() NamingException caught, Could not connect to bean", name_ex);
				}
				catch(RemoteException remote_ex)
				{
					log.error("AlarmListJ2eeConnectionManagerThread.run() RemoteException caught, cannot connect to bean", remote_ex);
					status = DISCONNECTED;
					
				}
				
			}
			
			/*routine to halt thread excecution*/ 
			if(status == STOP)
			{
				log.info("AlarmListJ2eeConnectionManagerThread.run() Stopping thread");
				cleanUp();			
				return;
			}
			
			/* Wait for 1 minute between connection/polling attempts
			 * when interrupted excecution can continue for urgent
			 * requests such as sending the alarm list.
			 */
			try
			{
				if (log.isDebugEnabled()) log.debug("AlarmListJ2eeConnectionManagerThread.run() AlarmListJ2eeConnectionManagerThread.run() Going to sleep for 1 minute");
				sleep(60000);	//wait for 1 minute before trying to reconnect;
			}
			catch(InterruptedException int_ex)
			{
				if (log.isDebugEnabled()) log.debug("AlarmListJ2eeConnectionManagerThread.run() Thread interrupted");
			}
			if (log.isDebugEnabled()) {
				log.debug("AlarmListJ2eeConnectionManagerThread.run() Waking up");
				log.debug("AlarmListJ2eeConnectionManagerThread.run() Connection State = " + status);
				log.debug("AlarmListJ2eeConnectionManagerThread.run() send_status = " + send_status);
			}
			
		}
	}

