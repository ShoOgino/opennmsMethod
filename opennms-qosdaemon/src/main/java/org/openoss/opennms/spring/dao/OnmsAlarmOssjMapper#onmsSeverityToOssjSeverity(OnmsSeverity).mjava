	/**
	 * convenience method to map OpenNMS to OSS/J  severities			 
	 * From OpenNMS code;
	 * public static final int INDETERMINATE_SEVERITY = 1;
	 * public static final int CLEARED_SEVERITY = 2;
	 * public static final int NORMAL_SEVERITY = 3;
	 * public static final int WARNING_SEVERITY = 4;
	 * public static final int MINOR_SEVERITY = 5;
	 * public static final int MAJOR_SEVERITY = 6;
	 * public static final int CRITICAL_SEVERITY = 7;
	 * 
	 * NOTE  org.opennms.web.alarm.Alarm.NORMAL_SEVERITY has no equivilent in OSS/J X733
	 * 
	 * @param onmsSeverity the severity value according to opennms
	 * @return  the severity value according to ossj / X733
	 * 
	 */
	public short onmsSeverityToOssjSeverity(OnmsSeverity onmsSeverity ) throws IllegalArgumentException{

		short ossjseverity=0;

		if (onmsSeverity==null) throw new IllegalArgumentException("onmsSeverityToOssjSeverity: onmsSeverity is Null");

		switch(onmsSeverity)
		{
		case INDETERMINATE:
			ossjseverity=javax.oss.fm.monitor.PerceivedSeverity.INDETERMINATE; 
			break;
		case CLEARED:
			ossjseverity=javax.oss.fm.monitor.PerceivedSeverity.CLEARED;
			break;
		case NORMAL:
			ossjseverity=javax.oss.fm.monitor.PerceivedSeverity.WARNING;
			break;
		case WARNING:
			ossjseverity=javax.oss.fm.monitor.PerceivedSeverity.WARNING;
			break;
		case MINOR:
			ossjseverity=javax.oss.fm.monitor.PerceivedSeverity.MINOR;
			break;
		case MAJOR:
			ossjseverity=javax.oss.fm.monitor.PerceivedSeverity.MAJOR;
			break;
		case CRITICAL:
			ossjseverity=javax.oss.fm.monitor.PerceivedSeverity.CRITICAL;
			break;
		default: throw new IllegalArgumentException("invalid OpenNMS severity value:"+onmsSeverity);
		}
		return ossjseverity;
	}

