	/**
	 * convenience method to map OSS/J to OpenNMS severities
	 * A switch statement converts the OSS/J severity qualifier
	 * over to one compatible with OpenNMS 
	 * From OpenNMS code;
	 * public static final int INDETERMINATE_SEVERITY = 1;
	 * public static final int CLEARED_SEVERITY = 2;
	 * public static final int NORMAL_SEVERITY = 3;
	 * public static final int WARNING_SEVERITY = 4;
	 * public static final int MINOR_SEVERITY = 5;
	 * public static final int MAJOR_SEVERITY = 6;
	 * public static final int CRITICAL_SEVERITY = 7;
	 * 
	 * NOTE  org.opennms.web.alarm.Alarm.NORMAL_SEVERITY has no equivilent in OSS/J X733
	 * 
	 * @param ossjseverity the severity value according to ossj / X733
	 * @return the severity value according to opennms
	 */
	public Integer ossjSeveritytoOnmsSeverity(short ossjseverity) throws IllegalArgumentException{

		int onmsseverity=0;

		switch(ossjseverity)
		{
		case javax.oss.fm.monitor.PerceivedSeverity.INDETERMINATE : 
			onmsseverity =org.opennms.web.alarm.Alarm.INDETERMINATE_SEVERITY; // was '1'
			break;
		case javax.oss.fm.monitor.PerceivedSeverity.CLEARED :
			onmsseverity =org.opennms.web.alarm.Alarm.CLEARED_SEVERITY ; // was '2' 
			break;
		case javax.oss.fm.monitor.PerceivedSeverity.WARNING :
			onmsseverity =org.opennms.web.alarm.Alarm.WARNING_SEVERITY  ; // was 4
			break;
		case javax.oss.fm.monitor.PerceivedSeverity.MINOR :
			onmsseverity =org.opennms.web.alarm.Alarm.MINOR_SEVERITY ; // was 5
			break;
		case javax.oss.fm.monitor.PerceivedSeverity.MAJOR :
			onmsseverity =org.opennms.web.alarm.Alarm.MAJOR_SEVERITY ; // was 6
			break;
		case javax.oss.fm.monitor.PerceivedSeverity.CRITICAL :
			onmsseverity =org.opennms.web.alarm.Alarm.CRITICAL_SEVERITY ; // was 7
			break;
		default: throw new IllegalArgumentException("invalid OSS/J severity value:"+ossjseverity);
		}
		return new Integer(onmsseverity);
	}

