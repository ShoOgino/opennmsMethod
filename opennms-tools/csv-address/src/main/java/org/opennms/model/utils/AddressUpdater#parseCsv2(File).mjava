    protected static List<Address> parseCsv2(final File csv) throws FileNotFoundException, ClassNotFoundException, SQLException {
    	
    	String sql = "" +
    			"SELECT a.* " +
    			"  FROM assets a " +
    			"  JOIN node n on n.nodeid = a.nodeid " +
    			" WHERE n.foreignsource = ?";

    	Connection con = createConnection();
    	PreparedStatement ps = con.prepareStatement(sql, ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
    	
	    BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(csv)));
    	CSVReader csvReader = new CSVReader(br);
    	try {
			String[] line;
			while((line = csvReader.readNext()) != null) {
				
				if (line.length != m_fieldMap.size()+1) {
					continue;
				}
				
				String foreignSource;
				if (m_foreignSource != null) {
					foreignSource = m_foreignSource;
				} else {
					foreignSource = line[0];
				}
				
				if (foreignSource == null) {
					continue;
				}
				
				ps.setString(1, foreignSource);
				ResultSet rs = ps.executeQuery();
				rs.last();
				int rows = rs.getRow();
				if (rows < 1) {
					rs.close();
					System.out.println("No results found for foreignsource: "+foreignSource+"; continuing to next foreignsource...");
					continue;
				}

				rs.beforeFirst();

				while (rs.next()) {
					System.out.println("Updating node: "+rs.getInt("nodeid"));

					Set<Entry<Integer, String>> entrySet = m_fieldMap.entrySet();
					for (Entry<Integer, String> entry : entrySet) {
						rs.updateString(entry.getValue(), line[entry.getKey()]);
					}
					rs.updateRow();
				}
				rs.close();
		    	
		    	try {
					con.commit();
				} catch (SQLException e) {
					e.printStackTrace();
					con.rollback();
				}
		    	
		    	ps.close();
		    	con.close();
					
				}
				
			} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    	
		return null;
    }

