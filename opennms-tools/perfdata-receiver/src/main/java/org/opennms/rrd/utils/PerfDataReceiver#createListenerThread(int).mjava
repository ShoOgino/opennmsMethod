	public static Thread createListenerThread(final int port) {
		m_listenerThread = new Thread() {
			public void run() {
				this.setName("fail");
				try {
					ServerSocket ssocket = new ServerSocket(port);
					ssocket.setSoTimeout(0);
					while (true) {
						try {
							Socket socket = ssocket.accept();
							InputStream is = socket.getInputStream();
							PerformanceDataProtos.PerformanceDataReadings messages = PerformanceDataProtos.PerformanceDataReadings.parseFrom(is);
							for (PerformanceDataProtos.PerformanceDataReading message : messages.getMessageList()) {
								StringBuffer values = new StringBuffer();
								values.append("{ ");
								for (int i = 0; i < message.getValueCount(); i++) {
									if (i != 0) {
										values.append(", ");
									}
									values.append(message.getValue(i));
								}
								values.append(" }");
								System.out
										.println("Message received: { "
												+ "path: \""
												+ message.getPath() + "\", "
												+ "owner: \""
												+ message.getOwner() + "\", "
												+ "timestamp: \""
												+ message.getTimestamp()
												+ "\", " + "values: "
												+ values.toString() + " }");

							}
						} catch (SocketTimeoutException e) {
							System.err.println(e.getLocalizedMessage());
							if (this.isInterrupted()) {
								System.err.println("Interrupted.");
								this.setName("notfailed");
								return;
							}
						} catch (IOException e) {
							System.err.println(e.getLocalizedMessage());
						}
					}
					
					
				} catch (IOException e) {
					System.err.println(e.getLocalizedMessage());
				} catch (Throwable e) {
					System.err.println(e.getLocalizedMessage());
				}
			}
		};
		
		return m_listenerThread;

	}

