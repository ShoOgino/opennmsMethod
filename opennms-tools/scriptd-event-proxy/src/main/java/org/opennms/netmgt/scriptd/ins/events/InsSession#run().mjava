	public void run() {
		input = "";

		InputStreamReader isr = null;
		BufferedReader in = null;
		
		try {
			// Get input from the client
			isr = new InputStreamReader(server.getInputStream());
			in = new BufferedReader(isr);

			readingFromClient: while ((line = in.readLine()) != null) {
				input = input + "\n" + line;
				LOG.debug("Client wrote: {} from {}", line, server.getInetAddress());

				if (status == STARTING_SESSION_STATUS) {
					if (line.equalsIgnoreCase(START_AUTHENTICATION_REQUEST)) {
						if (getSharedASCIIString() != null) {
							LOG.debug("Starting authentication, sending {} to the client", AUTH_REQUIRED_ACK);
							streamToClient.println(AUTH_REQUIRED_ACK);
							status = AUTHENTICATING_STATUS;
						} else {
							LOG.debug("Starting authentication, sending {} to the client", AUTH_NOT_REQUIRED_ACK);
							streamToClient.println(AUTH_NOT_REQUIRED_ACK);
							status = AUTHENTICATED_STATUS;
						}
						continue readingFromClient;
					} else {
						// security reset (a malicious user may use DOS attack before authentication)
						LOG.warn("Wrong client request");
						break readingFromClient;
					}
				}

				if (status == AUTHENTICATING_STATUS) {
					if (getSharedASCIIString() != null) {
						// authentication required (security check)
						if (line.equals(getSharedASCIIString())) {
							status = AUTHENTICATED_STATUS;
							LOG.debug("Authentication success!");
							streamToClient.println(AUTHENTICATION_SUCCESS);
							continue readingFromClient;
						} else {
							streamToClient.println(RESET_SIGNAL);
							LOG.warn("Authentication failure! Resetting session.");
							break readingFromClient;
						}
					}
				}

				if (status == AUTHENTICATED_STATUS || status == DATAFLOW_STATUS) {
					if (line.equalsIgnoreCase(LIST_CURRENT_ALARM_REQUEST)) {
				        LOG.debug("Fetching Events from Database");
					    getEventsByCriteria();
						status = DATAFLOW_STATUS;
						synchronized (streamToClient) {
							 streamToClient.println(ACTIVE_ALARM_BEGIN);
	                         final StringWriter sw = getOutput();
  		                     if (sw != null) {
   		                        final String output = sw.toString();
								LOG.info("String Writer: {}", output); 
		                        streamToClient.print(output);
		                     } else {
		                        LOG.error("String Writer is null");
		                     }
                             streamToClient.println(ACTIVE_ALARM_END);
                             continue readingFromClient;
							
						}
					} else {
						if (line.equalsIgnoreCase(STOP_ALARM_REQUEST)) {
							LOG.debug("Closing session due client request.");
							break readingFromClient;
						} else {
							LOG.warn("Wrong client request");
							continue readingFromClient;
						}
					}
				}
			}

			LOG.debug("Closing session.  Overall message from {} is: {}", server.getInetAddress(), input);
			server.close();
		} catch (final IOException ioe) {
			LOG.warn("Error while listening to socket.", ioe);
		} finally {
			IOUtils.closeQuietly(in);
			IOUtils.closeQuietly(isr);
		}
	}

