    private void getEventsByCriteria() {
    	LOG.debug("clearing events");

    	clearEvents();
    	final BeanFactoryReference bf = BeanUtils.getBeanFactory("daoContext");
        final EventDao eventDao = BeanUtils.getBean(bf,"eventDao", EventDao.class);
        final TransactionTemplate transTemplate = BeanUtils.getBean(bf, "transactionTemplate",TransactionTemplate.class);
        try {
                transTemplate.execute(new TransactionCallbackWithoutResult() {
                @Override
                public void doInTransactionWithoutResult(final TransactionStatus status) {
                	LOG.debug("Entering transaction call back: selection with criteria: {}", criteriaRestriction);
                    final OnmsCriteria criteria = new OnmsCriteria(OnmsEvent.class);
                    criteria.add(Restrictions.sqlRestriction(criteriaRestriction));
                    
                    final List<OnmsEvent> events = eventDao.findMatching(criteria);
                    LOG.info("Found %d event(s) with criteria: {}", events.size(), criteriaRestriction);
                    
                    for (final OnmsEvent onmsEvent : events) {
                    	final Event xmlEvent = getXMLEvent(onmsEvent);
                        if (xmlEvent != null) addEvent(xmlEvent);
                    }
                }

            });
        
        } catch (final RuntimeException e) {
            LOG.error("Error while getting events.", e);
        }
        
    }

