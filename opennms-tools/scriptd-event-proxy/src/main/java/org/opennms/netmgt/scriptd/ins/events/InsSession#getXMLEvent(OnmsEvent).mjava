	private Event getXMLEvent(final OnmsEvent ev) {
		final Integer id = ev.getId();

		LOG.info("Working on XML Event for id: {}", id); 
		LOG.debug("Setting Event id: {}", id); 
		final Event e = new Event();
        e.setDbid(id);

        //UEI
        final String uei = ev.getEventUei();
		if (uei != null) {
            LOG.debug("Setting Event uei: {}", uei); 
            e.setUei(uei);
        } else {
        	LOG.warn("No Event uei found: skipping event....");
            return null;
        }

        // Source
        final String source = ev.getEventSource();
		if (source != null) {
        	LOG.debug("Setting Event source: {}", source); 
            e.setSource(source);
        } else {
        	LOG.info("No Event source found."); 
        }

        //nodeid
        final Integer nodeid = ev.getNode().getId();
		if (ev.getNode() != null && nodeid != null) {
            LOG.debug("Setting Event nodeid: {}", nodeid); 
            e.setNodeid(nodeid.longValue());
        } else {
            LOG.info("No Event node found."); 
        }

        // timestamp
        final Date time = ev.getEventTime();
		if (time != null) {
            LOG.debug("Setting event date timestamp to (GMT): {}", time);
            e.setTime(time);
        } else {
        	LOG.info("No Event time found."); 
        }
        
        // host
        final String host = ev.getEventHost();
		if (host != null) {
            LOG.debug("Setting Event Host: {}", host);
            e.setHost(host);
        } else {
        	LOG.info("No Event host found.");
        }
        
        // interface
        final InetAddress ipAddr = ev.getIpAddr();
		if (ipAddr != null) {
            LOG.debug("Setting Event Interface/ipaddress: {}", ipAddr);
            e.setInterfaceAddress(ipAddr);
        } else {
            LOG.info("No Event ip address found.");
        }
        
        // Service Name
        if (ev.getServiceType() != null) {
            final String serviceName = ev.getServiceType().getName();
			LOG.debug("Setting Event Service Name: {}", serviceName);
            e.setService(serviceName);
        } else {
        	LOG.info("No Event service name found.");
        }

        // Description
        final String descr = ev.getEventDescr();
		if (descr != null ) {
            LOG.debug("Setting Event Description: {}", descr);
            e.setDescr(descr);
        } else {
            LOG.info("No Event ip address found.");
        }
        
        // Log message
        final String logmsg = ev.getEventLogMsg();
		if (logmsg != null) {
        	final Logmsg msg = new Logmsg();
            LOG.debug("Setting Event Log Message: {}", logmsg);
            msg.setContent(logmsg);
            e.setLogmsg(msg);
        } else {
            LOG.info("No Event log Message found.");
        }

        // severity
        final Integer severity = ev.getEventSeverity();
		if (severity != null) {
            LOG.debug("Setting Event Severity: {}", severity);
            e.setSeverity(OnmsSeverity.get(severity).getLabel());
        } else {
            LOG.info("No Event severity found.");
        }

          final Integer ifIndex = ev.getIfIndex();
		if (ifIndex != null && ifIndex > 0 ) {
              e.setIfIndex(ifIndex);
              e.setIfAlias(getIfAlias(nodeid,ifIndex));
          } else {
              e.setIfIndex(-1);
              e.setIfAlias("-1");
          }

        
        // operator Instruction
        final String operInstruct = ev.getEventOperInstruct();
		if (operInstruct != null) {
            LOG.debug("Setting Event Operator Instruction: {}", operInstruct);
            e.setOperinstruct(operInstruct);
        } else {
            LOG.info("No Event operator Instruction found.");
        }

        // parms
        final String eventParms = ev.getEventParms();
		if (eventParms != null) {
        	LOG.debug("Setting Event Parms: {}", eventParms);
        	final List<Parm> parms = Parameter.decode(eventParms);
            if (parms != null) e.setParmCollection(parms);
        } else {
            LOG.info("No Event parms found.");
        }

		final AlarmData ad = new AlarmData();
		final OnmsAlarm onmsAlarm = ev.getAlarm();
        try {
            if (onmsAlarm != null) {
                ad.setReductionKey(onmsAlarm.getReductionKey());
                ad.setAlarmType(onmsAlarm.getAlarmType());
                ad.setClearKey(onmsAlarm.getClearKey());
                e.setAlarmData(ad);
            }
        } catch (final ObjectNotFoundException e1) {
            LOG.warn("Correlated alarm data not found.", e1);
        }
        LOG.info("Returning event with id: {}", id);
        return e;
    }

