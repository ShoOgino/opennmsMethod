	public static void generateJmxConfig(String serviceName, String hostName, String port, String username, String password, Boolean runStandardVmBeans, Boolean runCompositeData, String outFile) throws AttributeNotFoundException, MBeanException {
	logger.debug("Startup values: \n serviceName: " + serviceName + "\n hostName: " + hostName + "\n port:" + port + "\n runStandardVmBeans: " + runStandardVmBeans + "\n runCompositeData: " + runCompositeData + "\n username: " + username + "\n password: " + password + "\n");
		JMXServiceURL jmxServiceURL;
		JmxDatacollectionConfig xmlJmxDatacollectionConfig = xmlObjectFactory.createJmxDatacollectionConfig();
		JmxCollection xmlJmxCollection = xmlObjectFactory.createJmxCollection();

		xmlJmxCollection.setName("JSR160-" + serviceName);
		xmlJmxCollection.setRrd(rrd);
		xmlJmxDatacollectionConfig.getJmxCollection().add(xmlJmxCollection);
		xmlJmxCollection.setMbeans(xmlObjectFactory.createMbeans());

		if (!runStandardVmBeans) {
			ignores.addAll(standardVmBeans);
		}
		
		try {
			jmxServiceURL = new JMXServiceURL("service:jmx:rmi:///jndi/rmi://" + hostName + ":" + port + "/jmxrmi");
			JMXConnector jmxConnector = null;
 			if (username != null && password != null) { 
				jmxConnector = JMXConnectorFactory.newJMXConnector(jmxServiceURL, null);
 				HashMap<String,String[]> env = new HashMap<String,String[]>();
 				String[] credentials = new String[] { username , password };
 				env.put("jmx.remote.credentials", credentials);
 				jmxConnector.connect(env);
 			} else {
				jmxConnector = JMXConnectorFactory.connect(jmxServiceURL);
 				jmxConnector.connect();
 			}
			jmxServerConnection = jmxConnector.getMBeanServerConnection();
			logger.debug("count: " + jmxServerConnection.getMBeanCount());
			for (String domainName : jmxServerConnection.getDomains()) {

				// just domains that are relevant for the service
				if (!ignores.contains(domainName)) {
					logger.debug("domain: " + domainName);

					// for all mBeans of the actual domain
					for (ObjectInstance jmxObjectInstance : jmxServerConnection.queryMBeans(new ObjectName(domainName + ":*"), null)) {
						Mbean xmlMbean = xmlObjectFactory.createMbean();
						xmlMbean.setObjectname(jmxObjectInstance.getObjectName().toString());
						String typeAndOthers = StringUtils.substringAfterLast(jmxObjectInstance.getObjectName().getCanonicalName(), "=");
						xmlMbean.setName(domainName + "." + typeAndOthers);

						logger.debug("\t" + jmxObjectInstance.getObjectName());
						MBeanInfo jmxMbeanInfo = jmxServerConnection.getMBeanInfo(jmxObjectInstance.getObjectName());
						logger.debug("--- Attributes for " + jmxObjectInstance.getObjectName());

						for (MBeanAttributeInfo jmxBeanAttributeInfo : jmxMbeanInfo.getAttributes()) {

							// process just readable and not writable mbeans
							if (jmxBeanAttributeInfo.isReadable() && !jmxBeanAttributeInfo.isWritable()) {
								logger.info("Add Elements for mBean: '{}'", jmxObjectInstance.getObjectName().toString());
								
								// just process CompositeData if activated
								if ( runCompositeData && "javax.management.openmbean.CompositeData".equals(jmxBeanAttributeInfo.getType())) {
									logger.error("actual mBean: '{}'", jmxObjectInstance.getObjectName());
									CompAttrib compAttrib = createCompAttrib(jmxObjectInstance, jmxBeanAttributeInfo);
									if (compAttrib != null) {
										logger.debug("xmlMbean got CompAttrib");
										xmlMbean.getCompAttrib().add(compAttrib);
									}
								}

								if (numbers.contains(jmxBeanAttributeInfo.getType())) {
									Attrib xmlJmxAttribute = createAttr(jmxBeanAttributeInfo);
									// logger.info("\tAdded attribute: '{}' with alias: '{}'",
									// xmlJmxAttribute.getName(),
									// xmlJmxAttribute.getAlias());
									xmlMbean.getAttrib().add(xmlJmxAttribute);
								}
							}
						}

						if (xmlMbean.getAttrib().size() > 0 || xmlMbean.getCompAttrib().size() > 0) {
							xmlJmxCollection.getMbeans().getMbean().add(xmlMbean);
						} else {
							logger.debug("mbean: " + xmlMbean.getName() + " has no relavant attributes.");
						}
					}
				} else {
					logger.debug("ignored: " + domainName);
				}
			}

			JAXB.marshal(xmlJmxDatacollectionConfig, new File(outFile));

		} catch (MalformedURLException e) {
			logger.error("MalformedURLException '{}'", e.getMessage());
			e.printStackTrace();
		} catch (IOException e) {
			logger.error("IOException '{}'", e.getMessage());
			e.printStackTrace();
		} catch (MalformedObjectNameException e) {
			logger.error("MalformedObjectNameException '{}'", e.getMessage());
			e.printStackTrace();
		} catch (InstanceNotFoundException e) {
			logger.error("InstanceNotFoundException '{}'", e.getMessage());
			e.printStackTrace();
		} catch (IntrospectionException e) {
			logger.error("IntrospectionException '{}'", e.getMessage());
			e.printStackTrace();
		} catch (ReflectionException e) {
			logger.error("ReflectionException '{}'", e.getMessage());
			e.printStackTrace();
		}

		logger.debug(xmlJmxDatacollectionConfig.toString());

		logger.info("Thx for computing with us!");
	}

