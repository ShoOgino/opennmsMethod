        private String getValue(OVsnmpVarBind varBind) {
            int type = varBind.getType();
            if (type == NNM.ASN_BOOLEAN) {
                return (varBind.getValue().getIntValue() == 0 ? "false" : "true");
            } else if (type == NNM.ASN_INTEGER) {
                return Integer.toString(varBind.getValue().getIntValue());
            } else if (type == NNM.ASN_OCTET_STR) {
                byte[] bytes = new byte[varBind.getValLength()];
                varBind.getValue().getOctetString(bytes);
                return new String(bytes);
            } else if (type == NNM.ASN_U_INTEGER) {
                return ""+varBind.getValue().getUnsigned32Value();
            } else if (type == NNM.ASN_OBJECT_ID) {
                return varBind.getValue().getObjectId(varBind.getValLength());
            } else if (type == NNM.ASN_TIMETICKS) {
                int centis = varBind.getValue().getIntValue();
                return ""+centis/100+"."+centis%100+" s";
            } else if (type == NNM.ASN_COUNTER32) {
                return ""+varBind.getValue().getUnsigned32Value();
            } else if (type == NNM.ASN_COUNTER64) {
                return ""+varBind.getValue().getCounter64Value();
            } else if (type == NNM.ASN_GAUGE) {
                return ""+varBind.getValue().getUnsigned32Value();
            } else if (type == NNM.ASN_IPADDRESS) {
                byte[] bytes = new byte[4];
                varBind.getValue().getOctetString(bytes);
                try {
                    return InetAddress.getByAddress(bytes).getHostAddress();
                } catch (UnknownHostException e) {
                    return "UnknownHost that can't happen";
                }
            } else {
                return "UNKNOWN TYPE: "+type;
            }
/*
            
#define ASN_BOOLEAN         (0x01)
#define ASN_INTEGER         (0x02)
#define ASN_BIT_STR         (0x03)
#define ASN_U_INTEGER       (0x07) 
#define ASN_OCTET_STR       (0x04)
#define ASN_NULL            (0x05)
#define ASN_OBJECT_ID       (0x06)
#define ASN_SEQUENCE        (0x10)
#define ASN_SET             (0x11)


#define ASN_IPADDRESS       (ASN_APPLICATION | 0)
#define ASN_COUNTER         (ASN_APPLICATION | 1)
#define ASN_GAUGE           (ASN_APPLICATION | 2)
#define ASN_TIMETICKS       (ASN_APPLICATION | 3)
#define ASN_OPAQUE          (ASN_APPLICATION | 4)

#define ASN_COUNTER64       (ASN_APPLICATION | 6)

#define ASN_UNSIGNED32      ASN_GAUGE
#define ASN_GAUGE32         ASN_GAUGE
#define ASN_COUNTER32       ASN_COUNTER

#define ASN_NOSUCHOBJECT    (ASN_CONTEXT | ASN_PRIMITIVE | 0x0)
#define ASN_NOSUCHINSTANCE  (ASN_CONTEXT | ASN_PRIMITIVE | 0x1)
#define ASN_ENDOFMIBVIEW    (ASN_CONTEXT | ASN_PRIMITIVE | 0x2)

 */
        }

