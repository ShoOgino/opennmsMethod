    private static void processSystemProperties() throws IllegalArgumentException, NumberFormatException {

        String property = System.getProperty(PROPERTY_DELETE_ALL_EVENTS);
        if (property != null) {
            m_deleteAllEvents = Boolean.valueOf(property);
            System.out.println("Using delete all events flag: " + m_deleteAllEvents);
        }

        property = System.getProperty(PROPERTY_DELETE_TEST_EVENTS);
        if (property != null) {
            m_deleteTestEvents = Boolean.valueOf(property);
            System.out.println("Using delete test events flag: " + m_deleteTestEvents);
        }

        property = System.getProperty(PROPERTY_AGENT_IPADDRESS);
        if (property != null) {
            try {
                m_agentAddress = InetAddress.getByName(property);
                System.out.println("Using agent address: " + m_agentAddress);
            } catch (UnknownHostException e) {
                throw new IllegalArgumentException("Invalid Agent address.", e);
            }
        }

        property = System.getProperty(PROPERTY_TRAP_SINK);
        if (property != null) {
            try {
                m_trapSink = InetAddress.getByName(property);
                System.out.println("Using trap sink: " + m_trapSink);
            } catch (UnknownHostException e) {
                throw new IllegalArgumentException("Invalid Destination address.", e);
            }
        }

        property = System.getProperty(PROPERTY_TRAP_PORT);
        if (property != null) {
            m_trapPort = SystemProperties.getInteger(PROPERTY_TRAP_PORT);
            System.out.println("Using Trap port: " + m_trapPort);
        }

        property = System.getProperty(PROPERTY_TRAP_COMMUNITY);
        if (property != null) {
            m_trapCommunity = property;
            System.out.println("Using Trap Community name: " + m_trapCommunity);
        }

        property = System.getProperty(PROPERTY_TRAP_COUNT);
        if (property != null) {
            m_trapCount = SystemProperties.getInteger(PROPERTY_TRAP_COUNT);
            m_batchSize = m_trapCount;
            m_batchCount = 1;
            System.out.println("Using Trap count: " + m_trapCount);
        }

        property = System.getProperty(PROPERTY_TRAP_RATE);
        if (property != null) {
            m_trapRate = SystemProperties.getInteger(PROPERTY_TRAP_RATE).doubleValue();
            System.out.println("Using Trap rate: " + m_trapRate);
        }

        property = System.getProperty(PROPERTY_BATCH_DELAY);
        if (property != null) {
            m_batchDelay = SystemProperties.getInteger(PROPERTY_BATCH_DELAY);
            System.out.println("Using batch delay: " + m_batchDelay);
        }

        property = System.getProperty(PROPERTY_BATCH_SIZE);
        if (property != null) {
            m_batchSize = SystemProperties.getInteger(PROPERTY_BATCH_SIZE);
            System.out.println("Using batch size: " + m_batchSize);
        }

        property = System.getProperty(PROPERTY_PERSIST_WAIT);
        if (property != null) {
            m_persistWait = SystemProperties.getInteger(PROPERTY_PERSIST_WAIT);
            System.out.println("Using Event persistence wait period of: " + m_persistWait);
        }

        m_batchCount = m_trapCount.intValue() / m_batchSize.intValue();
        System.out.println("Using batch count: " + m_batchCount);
        
        property = System.getProperty(PROPERTY_DB_SVR);
        if (property != null) {
        	m_dbSvr = property;
        }
        
        property = System.getProperty(PROPERTY_DB_NAME);
        if (property != null) {
        	m_dbName = property;
        }
        
        property = System.getProperty(PROPERTY_DB_USER);
        if (property != null) {
        	m_dbUser = property;
        }
        
        property = System.getProperty(PROPERTY_DB_PW);
        if (property != null) {
        	m_dbPass = property;
        }
        

    }

