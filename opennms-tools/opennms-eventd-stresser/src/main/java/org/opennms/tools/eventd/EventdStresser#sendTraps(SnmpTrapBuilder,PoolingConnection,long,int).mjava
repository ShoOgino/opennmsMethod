	private static int sendTraps(final SnmpTrapBuilder builder, PoolingConnection pool, long beginMillis, int initialEventCount) throws IllegalStateException, InterruptedException, SQLException {
		
		m_sleepMillis = 0;
		int totalTrapsSent = 0;
		
		System.out.println("Sending "+m_trapCount+" traps in "+m_batchCount+" batches with a batch interval of "+m_batchDelay.toString()+" seconds...");
		for (int i=1; i<=m_batchCount; i++) {

			Long batchBegin = Calendar.getInstance().getTimeInMillis();
			Double currentRate = 0.0;
			Integer batchTrapsSent = 0;
			Long batchElapsedMillis = 0L;
			System.out.println("Sending batch "+i+" of "+Integer.valueOf(m_batchCount)+" batches of "+m_batchSize.intValue()+" traps at the rate of "+m_trapRate.toString()+" traps/sec...");
			System.out.println("Estimated time to send: "+m_batchSize.doubleValue()/m_trapRate.doubleValue() +" seconds");
			
			while (batchTrapsSent.intValue() < m_batchSize.intValue()) {

				if (currentRate <= m_trapRate || batchElapsedMillis == 0) {
					batchTrapsSent += sendTrap(builder);
				} else {
					Thread.sleep(1);
					m_sleepMillis++;
				}

				batchElapsedMillis = Calendar.getInstance().getTimeInMillis() - batchBegin;					
				currentRate = batchTrapsSent.doubleValue() / batchElapsedMillis.doubleValue() *1000.0;
				
				if (batchElapsedMillis % 1000 == 0) {
					System.out.print(".");
				}
				
			}

			System.out.println();
			totalTrapsSent+=batchTrapsSent;
			System.out.println("   Actual time to send: "+(batchElapsedMillis/1000.0 + " seconds"));
			System.out.println("Elapsed Time (secs): "+((System.currentTimeMillis() - beginMillis)/1000L));
			System.out.println("         Traps sent: "+ Integer.valueOf(totalTrapsSent).toString());
			Integer currentEventCount = getEventCount(pool) - initialEventCount;
			System.out.println("Current Event count: "+ currentEventCount.toString());
			System.out.println();
			Thread.sleep(m_batchDelay.longValue()*1000L);
			m_sleepMillis+=m_batchDelay.longValue()*1000L;
		}
		
		int remainingTraps = m_trapCount - totalTrapsSent;
		System.out.println("Sending batch remainder of "+remainingTraps+" traps...");
		Long batchBegin = Calendar.getInstance().getTimeInMillis();
		Double currentRate = 0.0;
		Long batchTrapsSent = 0L;
		Long elapsedMillis = 0L;
		while (batchTrapsSent.intValue() < remainingTraps) {

			if (currentRate <= m_trapRate || elapsedMillis == 0) {
				batchTrapsSent += sendTrap(builder);
			} else {
				Thread.sleep(1);
				m_sleepMillis++;
			}

			elapsedMillis = Calendar.getInstance().getTimeInMillis() - batchBegin;					
			currentRate = batchTrapsSent.doubleValue() / elapsedMillis.doubleValue() *1000.0;
		}

		totalTrapsSent+=batchTrapsSent;
		System.out.println("Elapsed Time (secs): "+((System.currentTimeMillis() - beginMillis)/1000L));
		System.out.println("         Traps sent: "+ Integer.valueOf(totalTrapsSent).toString());
		Integer currentEventCount = getEventCount(pool)-initialEventCount;
		System.out.println("Current Event count: "+ currentEventCount.toString());
		return totalTrapsSent;
	}

