	public static void stressEventd(final SnmpTrapBuilder builder) throws ClassNotFoundException, SQLException, IllegalStateException, InterruptedException  {
    	
    	System.out.println("Delete events from opennms DB");
    	Connection connection = createConnection();
    	deleteAllEvents(connection);
    	PoolingConnection pool = new PoolingConnection(connection);

    	int initialEventCount = getEventCount(pool).intValue();
    	System.out.println("Initial Event Count: "+initialEventCount);
    	
    	long startTimeInMillis = Calendar.getInstance().getTimeInMillis();

    	if (m_batchCount < 1) {
    		throw new IllegalArgumentException("Batch count of < 1 is not allowed.");
    	} else if (m_batchCount > m_trapCount ){
    		throw new IllegalArgumentException("Batch count is > than trap count.");
    	}
    	
    	int trapsSent = sendTraps(builder, pool, startTimeInMillis);
		
    	int finalEventCount = 0;
    	long beginQueueCheck = Calendar.getInstance().getTimeInMillis();
    	
    	System.out.println("Watching Event Queue to complete persistence...");
    	while (finalEventCount < trapsSent) {
    		Thread.sleep(1000);
    		finalEventCount = getEventCount(pool).intValue();
        	System.out.println("Persist wait time (secs): "+((System.currentTimeMillis() - startTimeInMillis)/1000));
    		System.out.println("Current Event count: "+ Integer.valueOf(finalEventCount).toString());
    		
    		if (Calendar.getInstance().getTimeInMillis() - beginQueueCheck > 10000) {
    			System.out.println("Waited 60 secs for queue to flush.  Apparently missed "+(trapsSent - finalEventCount)+ " traps :(");
    			break;
    		}
    	}
    	
    	pool.close();
    	connection.close();
    	
    	systemReport(startTimeInMillis, trapsSent, finalEventCount);
    }

