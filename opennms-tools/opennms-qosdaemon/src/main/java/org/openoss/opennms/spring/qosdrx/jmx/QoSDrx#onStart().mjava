	/**
	 * <p>onStart</p>
	 */
        @Override
	protected void onStart() {
//		TODO REMOVE EXAMPLE IMPORTER CODE
//		ThreadCategory.setPrefix(ImporterService.NAME);
//		m_status = Fiber.STARTING;
//		LOG.debug("SPRING: thread.classLoader={}", Thread.currentThread().getContextClassLoader());

//		BeanFactoryLocator bfl = DefaultLocatorFactory.getInstance();
//		BeanFactoryReference bf = bfl.useBeanFactory("daoContext");
//		ApplicationContext daoContext = (ApplicationContext) bf.getFactory();

//		m_context = new ClassPathXmlApplicationContext(new String[] { "/org/opennms/netmgt/importer/importer-context.xml" }, daoContext);
//		LOG.debug("SPRING: context.classLoader={}", m_context.getClassLoader());
//		m_status = Fiber.RUNNING;
		
		
		
		LOG.debug("SPRING: thread.classLoader={}", Thread.currentThread().getContextClassLoader());

		// finds the already instantiated OpenNMS daoContext
		ApplicationContext daoContext = BeanUtils.getFactory("daoContext", ApplicationContext.class);

		LOG.debug("QoSDrx using /org/openoss/opennms/spring/qosdrx/qosdrx-spring-context.xml");
		m_context = new ClassPathXmlApplicationContext(new String[] { "/org/openoss/opennms/spring/qosdrx/qosdrx-spring-context.xml" }, daoContext);
		LOG.debug("SPRING: context.classLoader={}", m_context.getClassLoader());

		getQoSDrx().init();
		getQoSDrx().start();

//TODO remove old code		
//		ThreadCategory.setPrefix(QoSDrx.NAME);
//		m_status = Fiber.STARTING;
//		LOG.debug("SPRING: thread.classLoader={}", Thread.currentThread().getContextClassLoader());
//
//		LOG.debug("QoSDrx using /org/openoss/opennms/spring/qosdrx/qosdrx-spring-context.xml");
//		m_context = new ClassPathXmlApplicationContext(new String[] { "/org/openoss/opennms/spring/qosdrx/qosdrx-spring-context.xml" });
//		LOG.debug("SPRING: context.classLoader={}", m_context.getClassLoader());
//
//		getQoSDrx().init();
//		getQoSDrx().start();
//
//
//		m_status = Fiber.RUNNING;
	}

