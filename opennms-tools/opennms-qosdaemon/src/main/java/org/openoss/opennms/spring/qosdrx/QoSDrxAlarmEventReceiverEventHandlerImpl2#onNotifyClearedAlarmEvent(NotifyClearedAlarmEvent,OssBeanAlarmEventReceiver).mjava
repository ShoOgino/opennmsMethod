	/** {@inheritDoc} */
        @Override
	public void onNotifyClearedAlarmEvent(NotifyClearedAlarmEvent nclae, OssBeanAlarmEventReceiver callingAer) {
		//	Get a reference to the QoSD logger instance assigned by OpenNMS
		String logheader="RX:"+callingAer.getName()+":"+this.getClass().getSimpleName()+".onNotifyClearedAlarmEvent():";

		LOG.debug("{} Statistics: {}", logheader, callingAer.getRuntimeStatistics());
		if (!initialised ){
			LOG.error("{} event handler not initialised. init() must be called by receiver before handling any events", logheader);
			return;
		}
		// BUSINESS LOGIC

		try{

			OnmsAlarm alarm=null;
			String ossPrimaryKey=nclae.getAlarmKey().getAlarmPrimaryKey();
			String applicationDN=nclae.getAlarmKey().getApplicationDN();
			LOG.debug("{} Received an onNotifyClearedAlarmEvent() - AlarmPrimaryKey: {} ApplictionDN: {} eventtime: {}", logheader, ossPrimaryKey, applicationDN, nclae.getEventTime());
			if ((applicationDN==null)||(applicationDN.equals("")) 
					|| (ossPrimaryKey==null)||(ossPrimaryKey.equals(""))) {
				LOG.error("{} ApplicatioDN or PrimaryKey not set", logheader);
			} else {
				LOG.debug("{} trying to find existing alarm using getCurrentAlarmForUniqueKey", logheader);

				alarm = ossDao.getCurrentAlarmForUniqueKey(applicationDN, ossPrimaryKey);
				if (alarm==null) { // no alarm with this unique id - LOG.error
					LOG.info("{} WARNING Alarm does not exist with this Unique ID:- AlarmPrimaryKey: {} ApplictionDN: {}", logheader, ossPrimaryKey, applicationDN);
				} else {
					LOG.debug("{} found alarm alarmID:{}", logheader, alarm.getId());

					//alarm.setUei(arg0);
					//alarm.setTTicketState(arg0);
					//alarm.setTTicketId(arg0);
					//alarm.setSuppressedUser(arg0);
					//alarm.setSuppressedUntil(arg0);
					//alarm.setSuppressedTime(arg0);
					alarm.setSeverity(OnmsSeverity.CLEARED);  //TODO need mapping for severity
					//alarm.setServiceType(arg0);
					//alarm.setReductionKey(arg0);
					//alarm.setOssPrimaryKey(arg0);
					//alarm.setOperInstruct(arg0);
					//alarm.setNode(arg0); // TODO mapping to node if in database
					//alarm.setMouseOverText(arg0);
					//alarm.setManagedObjectType(nclae.getManagedObjectClass()); // TODO check if changed
					//alarm.setManagedObjectInstance(nclae.getManagedObjectInstance()); //TODO check if changed
					//alarm.setLogMsg(arg0);
					
//TODO REMOVED - DO NOT CREATE EVENT WITH HIBERNATE AlarmDAo
//					OnmsEvent event= new OnmsEvent();
//					//event.setId(new Integer(1));  // This is NOT set since unique constraint in alarms table on Events table
//					alarm.setLastEvent(event);

					//alarm.setIpAddr(arg0);
					//alarm.setId(arg0); // do not change as updating alarm
					//alarm.setFirstEventTime(arg0);
					alarm.setLastEventTime(nclae.getEventTime()); // must be after .setLastEvent!!!
					//alarm.setDistPoller(arg0);
					//alarm.setDescription(arg0); 
					//alarm.setCounter(arg0);
					//alarm.setApplicationDN(arg0);
					//alarm.setAlarmType(arg0); 
					alarm.setAlarmAckUser("ossjclearevent"); //TODO CLEARING ALARMS ON RECEIPT OF CLEAR - NOT WAITING FOR ACK
					alarm.setAlarmAckTime(new Date());

					try {
						LOG.debug("{} Alarm before update:{}", logheader, OssDaoOpenNMSImpl.alarmToString(alarm));
						LOG.debug("{} Updating Alarm using ossDao.updateCurrentAlarmForUniqueKey", logheader);
						OnmsAlarm updatedAlarm = ossDao.updateCurrentAlarmForUniqueKey(alarm);
						LOG.debug("{} Updated alarm:{}", logheader, OssDaoOpenNMSImpl.alarmToString(updatedAlarm));
					}
					catch ( Exception ex ) {
						LOG.error("{} problem clearing new alarm AlarmPrimaryKey: {} ApplictionDN: {}", logheader, ossPrimaryKey, applicationDN, ex);
					}
				}
			}
		}
		catch(Throwable e){
			LOG.error("{} Error : ", logheader, e);
		}
	}

