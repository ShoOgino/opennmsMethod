    public EventTable getEventTable() throws IOException {
        String tableName = m_resource.getFilename();
        
        EventTable eventTable = new EventTable(tableName);
        String thisKey = null;
        StringBuilder thisValueBuilder = null;
        
        boolean justHitEol = true;
        boolean gotKey = false;
        boolean gotValue = false;
        
        while (m_tokenizer.nextToken() != StreamTokenizer.TT_EOF) {
            if (justHitEol && m_tokenizer.ttype == StreamTokenizer.TT_WORD && m_tokenizer.sval.matches(keyExpr)) {
                LOG.trace("Found a key [{}] on line {}, creating a new event-table entry", m_tokenizer.sval, m_tokenizer.lineno());
                thisKey = m_tokenizer.sval;
                justHitEol = false;
                gotKey = true;
                gotValue = false;
                m_tokenizer.nextToken();
            }

            if (m_tokenizer.ttype == StreamTokenizer.TT_EOL) {
                LOG.trace("Hit EOL on line {}", m_tokenizer.lineno());
                if (gotKey) {
                    LOG.trace("At EOL for key [{}]", thisKey);
                }
                if (! gotValue) {
                    LOG.warn("No value for key [{}] in table [{}] read from [{}]; setting it to literal string [null]", thisKey, tableName, m_resource);
                    thisValueBuilder = new StringBuilder("[null]");
                }
                LOG.trace("Setting key [{}] to value [{}]", thisKey, thisValueBuilder.toString());
                eventTable.put(thisKey, thisValueBuilder.toString());
                justHitEol = true;
                gotKey = false;
                gotValue = false;
            }
            
            if (gotKey && m_tokenizer.ttype == StreamTokenizer.TT_WORD) {
                if (!gotValue) {
                    LOG.trace("Found first post-key token [{}] on line {}; initializing string builder with it", m_tokenizer.sval, m_tokenizer.lineno());
                    thisValueBuilder = new StringBuilder(m_tokenizer.sval);
                    gotValue = true;
                } else {
                    LOG.trace("Found subsequent value token [{}] on line {}; appending it to the string builder", m_tokenizer.sval, m_tokenizer.lineno());
                    thisValueBuilder.append(" ").append(m_tokenizer.sval);
                }
            }
        }
        
        LOG.debug("Loaded {} entries for table [{}] from [{}]", eventTable.keySet().size(), tableName, m_resource);
        return eventTable;
    }

