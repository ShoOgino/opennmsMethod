    private void loadEventFormats() throws Exception {
        String csEvFormatDirName = m_customEventsDir.getFile().getPath() + File.separator + "CsEvFormat";
        Map<String,EventFormat> formats = new HashMap<String,EventFormat>();
        Map<String,String> unformattedEvents = new LinkedHashMap<String,String>();
        for (AlertMapping mapping : m_alertMappings) {
            if (formats.containsKey(mapping.getEventCode())) {
                LogUtils.debugf(this, "Already have read an event-format for event-code [%s], not loading again", mapping.getEventCode());
                continue;
            }
            String formatFileName = csEvFormatDirName + "/Event" + (mapping.getEventCode().substring(2));
            try {
                EventFormatReader reader = new EventFormatReader(new FileSystemResource(formatFileName));
                formats.put(mapping.getEventCode(), reader.getEventFormat());
            } catch (FileNotFoundException fnfe) {
                unformattedEvents.put(mapping.getEventCode(), mapping.getEventCode());
                continue;
            }
        }
        LogUtils.infof(this, "Loaded %d event-formats from files in [%s]", formats.size(), csEvFormatDirName);
        if (unformattedEvents.keySet().size() > 0) {
            StringBuilder uelBuilder = new StringBuilder("");
            for (String ec : unformattedEvents.keySet()) {
                if (uelBuilder.length() > 0) {
                    uelBuilder.append(" ");
                }
                uelBuilder.append(ec);
            }
            LogUtils.infof(this, "Unable to load an event-format for %d event-codes [%s].  Continuing without them.", unformattedEvents.keySet().size(), uelBuilder.toString());
        }
        m_eventFormats = formats;
    }

