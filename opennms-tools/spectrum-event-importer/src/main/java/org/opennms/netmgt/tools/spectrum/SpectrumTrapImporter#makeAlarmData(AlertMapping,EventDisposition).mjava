    public AlarmData makeAlarmData(AlertMapping mapping, EventDisposition dispo) {
        if (!dispo.isCreateAlarm() && !dispo.isClearAlarm()) {
            return null;
        }
        AlarmData alarmData = new AlarmData();
        
        // Set the alarm-type according to clues in the disposition
        if (dispo.isClearAlarm()) {
            alarmData.setAlarmType(2);
        } else {
            alarmData.setAlarmType(1);
        }
        
        // Set the reduction key to include standard node stuff plus any discriminators
        StringBuilder rkBuilder = new StringBuilder("%uei%:");
        rkBuilder.append(m_reductionKeyBody);
        for (int discriminator : dispo.getDiscriminators()) {
            rkBuilder.append(":%parm[#").append(discriminator).append("]%");
        }
        // If it's marked as a unique alarm, add the event ID to the reduction-key
        if (dispo.isUniqueAlarm()) {
            rkBuilder.append("%eventid%"); 
        }
        alarmData.setReductionKey(rkBuilder.toString());
        
        // If it's a clear-alarm, set the clear-key appropriately
        if (dispo.isClearAlarm()) {
            StringBuilder ckBuilder = new StringBuilder(makeUei(dispo.getClearAlarmCause()));
            ckBuilder.append(":").append(m_reductionKeyBody);
            for (int discriminator : dispo.getDiscriminators()) {
                ckBuilder.append(":%parm[#").append(discriminator).append("]%");
            }
            alarmData.setClearKey(ckBuilder.toString());
        }
        
        return alarmData;
    }

