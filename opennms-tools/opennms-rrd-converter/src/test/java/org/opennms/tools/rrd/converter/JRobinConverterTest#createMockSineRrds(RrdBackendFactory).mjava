    private void createMockSineRrds(final RrdBackendFactory factory) throws RrdException, IOException {
        final long start = (m_baseTime - (SECONDS_PER_DAY * 56L));
        initializeRrd(m_sineFull, new String[] { "a", "b" }, new String[] { "1:4032", "12:1488", "288:366" });
        initializeRrd(m_sineSource, new String[] { "a" }, new String[] { "1:8928", "12:8784" });
        final RrdDb sineFull;
        final RrdDb sineSource;
        if (factory == null) {
            sineFull   = new RrdDb(m_sineFull);
            sineSource = new RrdDb(m_sineSource);
        } else {
            sineFull   = new RrdDb(m_sineFull.getAbsolutePath(), factory);
            sineSource = new RrdDb(m_sineSource.getAbsolutePath(), factory);
        }
        Function bigSine = new Sin(start, 15, -10, SECONDS_PER_DAY * 7L);
        Function smallSine = new Sin(start, 7, 5, SECONDS_PER_DAY * 2L);
        Function bigSineCounter = new Counter(0, bigSine);
        Function smallSineCounter = new Counter(0, smallSine);

        long timestamp = start - 300L;
        for(; timestamp <= (m_baseTime - (SECONDS_PER_DAY * 28L)); timestamp += 300L) {
            Sample sample = sineSource.createSample(timestamp);
            double value = bigSineCounter.evaluate(timestamp);
            sample.setValue("a", value);
            sample.update();
        }
        for(; timestamp <= m_baseTime; timestamp += 300L) {
            Sample sample = sineFull.createSample(timestamp);
            double value = smallSineCounter.evaluate(timestamp);
            sample.setValue("a", value);
            sample.update();
        }
        sineFull.close();
        sineSource.close();
    }

