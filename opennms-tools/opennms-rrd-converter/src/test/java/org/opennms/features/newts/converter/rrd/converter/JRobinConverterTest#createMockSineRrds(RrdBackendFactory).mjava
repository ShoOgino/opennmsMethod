    private void createMockSineRrds(final RrdBackendFactory factory) throws RrdException, IOException {
        final long start = (m_baseTime - (SECONDS_PER_DAY * 56L));
        initializeRrd(m_sineFull, new String[] { "a", "b" }, new String[] { "1:4032", "12:1488", "288:366" });
        initializeRrd(m_sineSourceA, new String[] { "a" }, new String[] { "1:8928", "12:8784" });
        initializeRrd(m_sineSourceB, new String[] { "b" }, new String[] { "1:8928", "12:8784" });
        final RrdDb sineFull;
        final RrdDb sineSourceA;
        final RrdDb sineSourceB;
        if (factory == null) {
            sineFull   = new RrdDb(m_sineFull);
            sineSourceA = new RrdDb(m_sineSourceA);
            sineSourceB = new RrdDb(m_sineSourceB);
        } else {
            sineFull   = new RrdDb(m_sineFull.getAbsolutePath(), factory);
            sineSourceA = new RrdDb(m_sineSourceA.getAbsolutePath(), factory);
            sineSourceB = new RrdDb(m_sineSourceB.getAbsolutePath(), factory);
        }
        Function bigSine = new Sin(start, 15, -10, SECONDS_PER_DAY * 7L);
        Function smallSine = new Sin(start, 7, 5, SECONDS_PER_DAY * 2L);
        Function bigSineCounter = new Counter(0, bigSine);
        Function smallSineCounter = new Counter(0, smallSine);

        long timestamp = start - 300L;
        for(; timestamp <= (m_baseTime - (SECONDS_PER_DAY * 28L)); timestamp += 300L) {
            Sample sampleA = sineSourceA.createSample(timestamp);
            sampleA.setValue("a", bigSineCounter.evaluate(timestamp));
            sampleA.update();
            Sample sampleB = sineSourceB.createSample(timestamp);
            sampleB.setValue("b", Double.NaN);
            sampleB.update();
        }
        for(; timestamp <= m_baseTime; timestamp += 300L) {
            Sample sampleA = sineFull.createSample(timestamp);
            sampleA.setValue("a", smallSineCounter.evaluate(timestamp));
            sampleA.update();
            Sample sampleB = sineSourceB.createSample(timestamp);
            sampleB.setValue("b", Double.NaN);
            sampleB.update();
        }
        sineFull.close();
        sineSourceA.close();
        sineSourceB.close();
    }

