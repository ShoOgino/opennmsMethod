    @Test
    public void testRrdArchiveZero() throws Exception {
        createMockVariationRrds(null);
        RrdDb rrd = new RrdDb(m_variation);
        TimeSeriesDataSource archive = new RrdArchive(rrd.getArchive(0), Arrays.asList(rrd.getDsNames()));
        final int expectedArchiveSize = 4032;
        final int expectedArchiveStep = 300;

        final long end = getMidnightInSeconds(m_baseTime);
        final long start = (end - ((expectedArchiveSize - 1) * expectedArchiveStep));

        assertEquals(end, archive.getEndTime());
        assertEquals(start, archive.getStartTime());
        assertEquals(expectedArchiveStep, archive.getNativeStep());
        assertEquals(expectedArchiveSize, archive.getRows());

        assertEquals(0.5833333333333334D, archive.getDataAt(start).getValue("a"), ACCEPTABLE_DOUBLE_DELTA);
        assertEquals(0.5866666666666667D, archive.getDataAt(start + 300).getValue("a"), ACCEPTABLE_DOUBLE_DELTA);
        assertEquals(0.58D, archive.getDataAt(end).getValue("a"), ACCEPTABLE_DOUBLE_DELTA);
        
        List<RrdEntry> entries = archive.getData(expectedArchiveStep);
        assertEquals(expectedArchiveSize, entries.size());
        assertEquals(start, entries.get(0).getTimestamp());
        assertEquals(end, entries.get(expectedArchiveSize - 1).getTimestamp());
        assertEquals(0.5833333333333334D, entries.get(0).getValue("a"), ACCEPTABLE_DOUBLE_DELTA);
        assertEquals(0.5866666666666667D, entries.get(1).getValue("a"), ACCEPTABLE_DOUBLE_DELTA);
        assertEquals(1.3833333333333334D, entries.get(expectedArchiveSize - 2).getValue("a"), ACCEPTABLE_DOUBLE_DELTA);
        assertEquals(0.58D, entries.get(expectedArchiveSize - 1).getValue("a"), ACCEPTABLE_DOUBLE_DELTA);
        assertTrue(Double.isNaN(entries.get(0).getValue("b")));

        assertEquals(0.5833333333333334D, archive.getDataAt(start + 150).getValue("a"), ACCEPTABLE_DOUBLE_DELTA);
        assertEquals(0.5866666666666667D, archive.getDataAt(start + 450).getValue("a"), ACCEPTABLE_DOUBLE_DELTA);
        assertEquals(0.58D, archive.getDataAt(end + 150).getValue("a"), ACCEPTABLE_DOUBLE_DELTA);

        List<RrdEntry> halfEntries = archive.getData(expectedArchiveStep / 2);
        assertEquals(expectedArchiveSize * 2, halfEntries.size());
        assertEquals(start, halfEntries.get(0).getTimestamp());
        assertEquals(end + (expectedArchiveStep / 2), halfEntries.get((expectedArchiveSize * 2) - 1).getTimestamp());
        assertEquals(0.5833333333333334D, halfEntries.get(0).getValue("a"), ACCEPTABLE_DOUBLE_DELTA);
        assertEquals(0.5833333333333334D, halfEntries.get(1).getValue("a"), ACCEPTABLE_DOUBLE_DELTA);
        assertEquals(0.58D, halfEntries.get((expectedArchiveSize * 2) - 2).getValue("a"), ACCEPTABLE_DOUBLE_DELTA);
        assertEquals(0.58D, halfEntries.get((expectedArchiveSize * 2) - 1).getValue("a"), ACCEPTABLE_DOUBLE_DELTA);
        assertTrue(Double.isNaN(halfEntries.get(0).getValue("b")));
        
        for (int i = 0; i < halfEntries.size(); i++) {
            final RrdEntry halfEntry = halfEntries.get(i);
            final RrdEntry entry = entries.get(i/2);
            assertEquals(halfEntry.getTimestamp(), entry.getTimestamp() + ((i % 2) * (expectedArchiveStep / 2)));
            assertEquals(halfEntry.getValue("a"), entry.getValue("a"), ACCEPTABLE_DOUBLE_DELTA);
            assertEquals(halfEntry.getValue("b"), entry.getValue("b"), ACCEPTABLE_DOUBLE_DELTA);
        }
    }

