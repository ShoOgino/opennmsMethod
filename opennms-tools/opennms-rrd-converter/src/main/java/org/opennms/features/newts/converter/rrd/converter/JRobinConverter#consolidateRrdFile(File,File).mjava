    public void consolidateRrdFile(final File groupFile, final File outputFile) throws IOException, RrdException, ConverterException {
        /*
        final List<RrdDatabase> rrds = new ArrayList<RrdDatabase>();
        rrds.add(new RrdDatabase(new RrdDb(groupFile, true)));
        for (final File individualFile : getMatchingGroupRrds(groupFile)) {
            final RrdDb individualRrd = new RrdDb(individualFile, true);
            rrds.add(new RrdDatabase(individualRrd));
        }
        final TimeSeriesDataSource dataSource = new AggregateTimeSeriesDataSource(rrds);

        final RrdDb outputRrd = new RrdDb(outputFile);
        final RrdDatabaseWriter writer = new RrdDatabaseWriter(outputRrd);

        final long endTime = dataSource.getEndTime();
        // 1 year
        final long startTime = endTime - ONE_YEAR_IN_SECONDS;
        for (long time = startTime; time <= endTime; time += dataSource.getNativeStep()) {
            final RrdEntry entry = dataSource.getDataAt(time);
            writer.write(entry);
        }
        dataSource.close();
        outputRrd.close();
        */
        final RRDv1 groupRrd = RrdConvertUtils.dumpJrb(groupFile);
        LogUtils.debugf(this, "consolidateRrdFile: multi-metric RRD with %d data sources", groupRrd.getDataSources().size());
        int i = 1;
        for (AbstractDS ds : groupRrd.getDataSources()) {
            LogUtils.debugf(this, "consolidateRrdFile: multi-metric data source %d: %s", i++, ds.getName());
        }
        final List<RRDv1> singleMetricFiles = new ArrayList<RRDv1>();
        for (final File individualFile : getMatchingGroupRrds(groupFile)) {
            final RRDv1 singleRrd = RrdConvertUtils.dumpJrb(individualFile);
            LogUtils.debugf(this, "consolidateRrdFile: adding single-metric RRD for data source %s", singleRrd.getDataSource(0).getName());
            singleMetricFiles.add(singleRrd);
        }
        groupRrd.merge(singleMetricFiles);
        RrdConvertUtils.restoreJrb(groupRrd, outputFile);
    }

