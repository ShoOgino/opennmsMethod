	//need to do some better exception handling here
	private static boolean validateProperties() throws IOException, FileNotFoundException, IllegalArgumentException  {
		
		System.out.println("\n\nProperties:\n");
		m_foreignSource = System.getProperty(PROPERTY_FOREIGN_SOURCE, m_foreignSource);
		System.out.println("\t"+PROPERTY_FOREIGN_SOURCE+":"+m_foreignSource);
		
		m_parseDb = Boolean.valueOf(System.getProperty(PROPERTY_PARSE_DB, m_parseDb.toString()));
		System.out.println("\t"+PROPERTY_PARSE_DB+":"+m_parseDb);
		
		
		if (!m_parseDb.booleanValue()) {

			String csvFileName = System.getProperty(PROPERTY_CSV_FILE, m_csvFile.getCanonicalPath());
			System.out.println("\t"+PROPERTY_CSV_FILE+":"+m_csvFile);
			
			m_csvFile = new File(csvFileName);
			if (!m_csvFile.exists()) {
				throw new FileNotFoundException("CSV Input File: "+csvFileName+"; Not Found!");
			}
		} else {
			m_dbSvr = System.getProperty(PROPERTY_DB_SVR, m_dbSvr);
			System.out.println("\t"+PROPERTY_DB_SVR+":"+m_dbSvr);

			m_dbName = System.getProperty(PROPERTY_DB_NAME, m_dbName);
			System.out.println("\t"+PROPERTY_DB_NAME+":"+m_dbName);
			
			m_dbUser = System.getProperty(PROPERTY_DB_USER, m_dbUser);
			System.out.println("\t"+PROPERTY_DB_USER+":"+m_dbUser);
			
			m_dbPass = System.getProperty(PROPERTY_DB_PW, m_dbPass);
			System.out.println("\t"+PROPERTY_DB_PW+":"+m_dbPass);
			
			m_iplikeQuery = System.getProperty(PROPERTY_IPLIKE_QUERY, m_iplikeQuery);
			System.out.println("\t"+PROPERTY_IPLIKE_QUERY+":"+m_iplikeQuery);
			
			m_useNodeId = Boolean.valueOf(System.getProperty(PROPERTY_USE_NODE_ID, m_useNodeId.toString()));
			System.out.println("\t"+PROPERTY_USE_NODE_ID+":"+m_useNodeId);
			
			m_addOnly = Boolean.valueOf(System.getProperty(PROPERTY_ADD_ONLY, m_addOnly.toString()));
			System.out.println("\t"+PROPERTY_ADD_ONLY+":"+m_addOnly);
			
			m_categoryAddExisting = Boolean.valueOf(System.getProperty(PROPERTY_CATEGORY_ADD_EXISTING, m_categoryAddExisting.toString()));
			System.out.println("\t"+PROPERTY_CATEGORY_ADD_EXISTING+":"+m_categoryAddExisting);
			
		}
		
		String fsRepo = System.getProperty(PROPERTY_FS_REPO_PATH, m_repoPath.getCanonicalPath());
		System.out.println("\t"+PROPERTY_FS_REPO_PATH+":"+fsRepo);
		
		m_repoPath = new File(fsRepo);
		
		if (!m_repoPath.exists() || !m_repoPath.isDirectory() || !m_repoPath.canWrite()) {
			throw new IllegalArgumentException("The specified "+PROPERTY_FS_REPO_PATH+": "+m_repoPath.getCanonicalPath()+", either doesn't exist, isn't writable, or isn't a directory.");
		} else {
			m_fsr = new FilesystemForeignSourceRepository();
			m_fsr.setRequisitionPath(m_repoPath.getCanonicalPath());
		}
		
		m_resolveIps = Boolean.valueOf(System.getProperty(PROPERTY_RESOLVE_IPS, m_resolveIps.toString()));
		System.out.println("\t"+PROPERTY_RESOLVE_IPS+":"+m_resolveIps.toString());
		
		String categories = System.getProperty(PROPERTY_CATEGORY_LIST);
		if (categories != null) {
			System.out.println("\t"+PROPERTY_CATEGORY_LIST+":"+categories);
			String[] cats = categories.split(",");
			m_categoryList = new ArrayList<String>();
			for (String cat : cats) {
				m_categoryList.add(cat);
			}
		}
		
		String services = System.getProperty(PROPERTY_SERVICE_LIST);
		if (categories != null) {
			System.out.println("\t"+PROPERTY_SERVICE_LIST+":"+services);
			String[] srvs = services.split(",");
			m_serviceList = new ArrayList<String>();
			for (String srv : srvs) {
				m_serviceList.add(srv);
			}
		}

		System.out.println("\n");
		return true;
	}

