    /**
     * Returns a list of data structures representing the nodes that have SNMP
     * performance data collected.
     * 
     * <p>
     * First the list of RRD files is collected. From those filenames, the IP
     * address is extracted from each. A list of unique IP addresses is created,
     * discarding the duplicates. At the same time, a mapping of unique IP
     * address to RRD files is created. Then a database call is made to
     * determine the node identifier and human-readable label for each node
     * containing the IP addresses. From that list, an array of data structures,
     * <code>QueryableNode</code>s, are created.
     * </p>
     */
    public QueryableNode[] getQueryableNodes() throws SQLException {
        // Get all of the numeric directory names in the RRD directory; these
        // are the nodeids of the nodes that have performance data
        File[] nodeDirs =
	    getRrdDirectory().listFiles(RrdFileConstants.NODE_DIRECTORY_FILTER);

        if (nodeDirs == null || nodeDirs.length == 0) {
	    return new QueryableNode[0];
	}

	List nodeList = new LinkedList();

	// Construct a set containing the nodeIds that are queryable
        IntSet queryableIds = new IntSet();
	for (int i = 0; i < nodeDirs.length; i++) {
	    String fileName = nodeDirs[i].getName();
	    int nodeId = Integer.parseInt(fileName);
	    queryableIds.add(nodeId);
	}

	// create the main stem of the select statement
	StringBuffer select = new StringBuffer("SELECT DISTINCT NODEID, NODELABEL FROM NODE WHERE NODETYPE != 'D' ORDER BY NODELABEL");
	
	Connection conn = Vault.getDbConnection();

	Statement stmt = null;
	ResultSet rs = null;
	try {
	    stmt = conn.createStatement();
	    rs = stmt.executeQuery(select.toString());

	    while (rs.next()) {
		int nodeId = rs.getInt("nodeid");

		if (queryableIds.contains(nodeId)) {
		    String nodeLabel = rs.getString("nodeLabel");
		    nodeList.add(new QueryableNode(nodeId, nodeLabel));
		}
	    }
	} finally {
	    if (rs != null)
		rs.close();
	    if (stmt != null)
		stmt.close();
	    Vault.releaseDbConnection(conn);
	}

	return (QueryableNode[])
	    nodeList.toArray(new QueryableNode[nodeList.size()]);
    }

