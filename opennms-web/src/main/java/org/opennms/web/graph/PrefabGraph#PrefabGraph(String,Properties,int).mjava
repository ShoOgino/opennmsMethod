    public PrefabGraph(String key, Properties props, int order) {
        if (key == null || props == null) {
            throw new IllegalArgumentException("Cannot take null parameters.");
        }

        this.name = key;
        this.order = order;

        this.title = props.getProperty("report." + key + ".name");
        if (this.title == null) {
            throw new IllegalArgumentException("Properties parameter must contain \"report." + key + ".name\" property");
        }

        this.command = props.getProperty("report." + key + ".command");
        if (this.command == null) {
            throw new IllegalArgumentException("Properties parameter must contain \"report." + key + ".command\" property");
        }

        String columnString = props.getProperty("report." + key + ".columns");
        if (columnString == null) {
            throw new IllegalArgumentException("Properties parameter must contain \"report." + key + ".columns\" property");
        }

        this.columns = BundleLists.parseBundleList(columnString);

        String externalValuesString = props.getProperty("report." + key + ".externalValues");
        if (externalValuesString == null) {
            this.externalValues = new String[0];
        } else {
            this.externalValues = BundleLists.parseBundleList(externalValuesString);
        }

	String propertiesValuesString = props.getProperty("report." + key + ".propertiesValues");
	if( propertiesValuesString == null ) {
		this.propertiesValues = new String[0];
	} else {
		this.propertiesValues = BundleLists.parseBundleList(propertiesValuesString);
	}

        // can be null
        this.type = props.getProperty("report." + key + ".type");

        // can be null
        this.description = props.getProperty("report." + key + ".description");
    }

