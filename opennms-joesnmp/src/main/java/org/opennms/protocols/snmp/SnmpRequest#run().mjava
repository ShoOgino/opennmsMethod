    /**
     * Used to process the timeout of an SnmpRequest. The method is invoked by
     * the session timer object. If the request has "expired" then no processing
     * occurs. If the number of retries have exceeded the session parameters
     * then the SnmpHandler's snmpTimeoutError() method is invoked. If an error
     * occurs transmiting the pdu then the snmpInternalError() method is
     * invoked.
     * 
     * @see SnmpHandler
     * @see SnmpPduRequest
     * @see SnmpSession
     */
    public void run() {
        if (m_expired)
            return;

        if (m_timesSent < m_session.getPeer().getRetries()) {
            m_timesSent++;
            try {
                //
                // An SNMP Trap command should only be sent ONCE!
                //
                m_session.transmit(this);
                if (m_pdu instanceof SnmpPduPacket) {
                    if (((SnmpPduPacket) m_pdu).getCommand() != SnmpPduPacket.V2TRAP)
                        m_session.getTimer().schedule(this, m_session.getPeer().getTimeout());
                    else
                        m_expired = true;
                } else if (m_pdu instanceof SnmpPduTrap) {
                    m_expired = true;
                }
            } catch (IOException err) {
                m_expired = true;
                try {
                    m_handler.snmpInternalError(m_session, SnmpSession.ERROR_IOEXCEPTION, m_pdu);
                } catch (Exception e) {
                    // ignore
                }
            } catch (SnmpPduEncodingException err) {
                m_expired = true;
                try {
                    m_handler.snmpInternalError(m_session, SnmpSession.ERROR_ENCODING, m_pdu);
                } catch (Exception e) {
                    // ignore
                }
            } catch (AsnEncodingException err) {
                m_expired = true;
                try {
                    m_handler.snmpInternalError(m_session, SnmpSession.ERROR_ENCODING, m_pdu);
                } catch (Exception e) {
                    // ignore
                }
            }
        } else {
            m_expired = true;
            try {
                m_handler.snmpTimeoutError(m_session, m_pdu);
            } catch (Exception e) {
                // ignore
            }
        }
    }

