    /**
     * Transmits the specified SnmpRequest to the SnmpPeer defined by the
     * session. First the SnmpPdu contained within the request is encoded using
     * the session AsnEncoder, as defined by the SnmpParameters. Once the packet
     * is encoded it is transmitted to the agent defined by SnmpPeer. If an
     * error occurs an appropiate exception is generated.
     * 
     * @param req
     *            The SnmpRequest to transmit
     * 
     * @exception SnmpPduEncodingException
     *                Thrown if an encoding exception occurs at the session
     *                level
     * @exception org.opennms.protocols.snmp.asn1.AsnEncodingException
     *                Thrown if an encoding exception occurs in the AsnEncoder
     *                object.
     * @exception java.io.IOException
     *                Thrown if an error occurs sending the encoded datagram
     * 
     * @see SnmpRequest
     * @see SnmpParameters
     * @see SnmpPeer
     * 
     */
    void transmit(SnmpRequest req) throws SnmpPduEncodingException, AsnEncodingException, java.io.IOException {
        //
        // break down the pieces into usable variables
        //
        SnmpPduPacket pdu = null;
        SnmpPduTrap trap = null;
        SnmpPeer peer = m_peer;
        SnmpParameters parms = peer.getParameters();

        if (req.m_pdu instanceof SnmpPduPacket)
            pdu = (SnmpPduPacket) req.m_pdu;

        if (req.m_pdu instanceof SnmpPduTrap)
            trap = (SnmpPduTrap) req.m_pdu;

        //
        // verify that for a SNMPV1 session that no
        // SNMPV2 packets are transmitted!
        //
        if (pdu != null) {
            switch (pdu.getCommand()) {
            case SnmpPduPacket.INFORM:
            case SnmpPduPacket.V2TRAP:
            case SnmpPduPacket.REPORT:
            case SnmpPduPacket.GETBULK:
                if (parms.getVersion() < SnmpSMI.SNMPV2) {
                    throw new SnmpPduEncodingException("Cannot send pdu, invalid SNMP version");
                }
            }

            //
            // transmit the datagram
            //
            ByteArrayInfo msg = encode(pdu);
            if (pdu.getPeer() == null)
                m_portal.send(m_peer, msg.array(), msg.size());
            else
                m_portal.send(pdu.getPeer(), msg.array(), msg.size());
        } else if (trap != null) {
            ByteArrayInfo msg = encode(trap);
            m_portal.send(m_peer, msg.array(), msg.size());
        } else {
            throw new SnmpPduEncodingException("Invalid PDU type passed to method");
        }
    }

