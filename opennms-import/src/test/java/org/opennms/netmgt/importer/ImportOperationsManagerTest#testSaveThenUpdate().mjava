    @Test
    @JUnitTemporaryDatabase // Relies on specific IDs so we need a fresh database
    @JUnitSnmpAgent(resource="classpath:org/opennms/netmgt/snmp/snmpTestData1.properties", host=TEST_IP_ADDRESS, port=TEST_PORT)
    public void testSaveThenUpdate() throws Exception {


        m_transTemplate.execute(new TransactionCallback<OnmsNode>() {
            public OnmsNode doInTransaction(TransactionStatus status) {
                OnmsServiceType icmp = m_serviceTypeDao.findByName("ICMP");
                OnmsServiceType snmp = m_serviceTypeDao.findByName("SNMP");
                OnmsDistPoller distPoller = m_distPollerDao.get("localhost");
                NetworkBuilder builder = new NetworkBuilder(distPoller);
                builder.addNode("node7").setForeignSource("imported:").setForeignId("7");
                builder.getCurrentNode().getAssetRecord().setDisplayCategory("cat7");
                builder.addInterface("192.168.7.1").setIsManaged("M").setIsSnmpPrimary("P");
                builder.addService(icmp);
                builder.addService(snmp);
                m_nodeDao.save(builder.getCurrentNode());
                return builder.getCurrentNode();
            }
        });

        //m_distPollerDao.clear();

        m_transTemplate.execute(new TransactionCallback<Object>() {
            public Object doInTransaction(TransactionStatus status) {
                OnmsNode node = m_nodeDao.findByForeignId("imported:", "7");
                assertNotNull(node);
                assertEquals("node7", node.getLabel());
                assertEquals("cat7", node.getAssetRecord().getDisplayCategory());
                assertEquals(1, node.getIpInterfaces().size());
                OnmsIpInterface iface = node.getIpInterfaces().iterator().next();
                assertEquals("192.168.7.1", InetAddressUtils.str(iface.getIpAddress()));
                assertEquals("M", iface.getIsManaged());
                assertEquals(2, iface.getMonitoredServices().size());

                System.err.println("###################3 UPDATE ####################");
                m_nodeDao.update(node);
                return null;
            }
        });

    }

