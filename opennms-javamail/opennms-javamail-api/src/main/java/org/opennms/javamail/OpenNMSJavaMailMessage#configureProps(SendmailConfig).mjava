    public static Properties configureProps(final SendmailConfig config) {
        
        Properties props = new Properties();
        
        props.setProperty("mail.debug", String.valueOf(config.isDebug()));
        
        //first set the actual properties defined in the sendmail configuration
        List<JavamailProperty> jmps = config.getJavamailPropertyCollection();
        for (JavamailProperty jmp : jmps) {
            props.setProperty(jmp.getName(), jmp.getValue());
        }
    
        
        final String mailPropsPrefix = new StringBuilder("mail.").append(config.getSendmailProtocol().getTransport()).append('.').toString();
        
        //set the convenience properties
        props.setProperty(mailPropsPrefix+"auth", String.valueOf(config.isUseAuthentication()));
        props.setProperty(mailPropsPrefix+"user", String.valueOf(config.getUserAuth().getUserName()));
        props.setProperty(mailPropsPrefix+"password", String.valueOf(config.getUserAuth().getUserName()));
        props.setProperty(mailPropsPrefix+"starttls.enable", String.valueOf(config.getSendmailProtocol().isStartTls()));
        props.setProperty(mailPropsPrefix+"quitwait", String.valueOf(config.getSendmailProtocol().isQuitWait()));
        props.setProperty(mailPropsPrefix+"port", String.valueOf(config.getSendmailHost().getPort()));
        
        if (config.getSendmailProtocol().isSslEnable()) {
            props.setProperty("mail.smtps.auth", String.valueOf(config.isUseAuthentication()));
            if (!props.containsKey("mail.smtps.socketFactory.class")) {
                props.setProperty("mail.smtps.socketFactory.class", "javax.net.ssl.SSLSocketFactory");
            }
            if (!props.containsKey("mail.smtps.socketFactory.port")) {
                props.setProperty("mail.smtps.socketFactory.port", String.valueOf(config.getSendmailHost().getPort()));
            }
        }
        
        
        return props;
    }

