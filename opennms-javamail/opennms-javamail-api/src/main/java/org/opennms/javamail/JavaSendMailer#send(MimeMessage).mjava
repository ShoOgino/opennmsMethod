    /**
     * Send.
     *
     * @param message the message
     * @throws JavaMailerException the java mailer exception
     */
    public void send(MimeMessage message) throws JavaMailerException {
        Transport t = null;
        if (!m_config.getSendmailProtocol().isPresent() || !m_config.getSendmailHost().isPresent()) {
            throw new JavaMailerException("sendmail-protocol or sendmail-host are not configured!");
        }
        try {
            SendmailProtocol protoConfig = m_config.getSendmailProtocol().get();
            t = m_session.getTransport(protoConfig.getTransport());
            LOG.debug("for transport name '{}' got: {}@{}", protoConfig.getTransport(), t.getClass().getName(), Integer.toHexString(t.hashCode()));

            LoggingTransportListener listener = new LoggingTransportListener();
            t.addTransportListener(listener);

            if ("mta".equals(t.getURLName().getProtocol())) {
                // JMTA throws an AuthenticationFailedException if we call connect()
                LOG.debug("transport is 'mta', not trying to connect()");
            } else {
                final SendmailHost sendmailHost = m_config.getSendmailHost().get();
                if (m_config.isUseAuthentication() && m_config.getUserAuth().isPresent()) {
                    LOG.debug("authenticating to {}", sendmailHost.getHost());
                    final UserAuth userAuth = m_config.getUserAuth().get();
                    t.connect(sendmailHost.getHost(), sendmailHost.getPort(), userAuth.getUserName(), userAuth.getPassword());
                } else {
                    LOG.debug("not authenticating to {}", sendmailHost.getHost());
                    t.connect(sendmailHost.getHost(), sendmailHost.getPort(), null, null);
                }
            }

            t.sendMessage(message, message.getAllRecipients());
            listener.assertAllMessagesDelivered();
        } catch (NoSuchProviderException e) {
            LOG.error("Couldn't get a transport: {}", e, e);
            throw new JavaMailerException("Couldn't get a transport: " + e, e);
        } catch (MessagingException e) {
            LOG.error("Java Mailer messaging exception: {}", e, e);
            throw new JavaMailerException("Java Mailer messaging exception: " + e, e);
        } finally {
            try {
                if (t != null && t.isConnected()) {
                    t.close();
                }
            } catch (MessagingException e) {
                throw new JavaMailerException("Java Mailer messaging exception on transport close: " + e, e);
            }
        }
    }

