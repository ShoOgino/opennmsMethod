    /**
     * Configures the java mail api properties based on the settings ReadMailConfig
     * @param config
     * @return
     */
    private Properties configureProperties(ReadmailConfig config) {
        Properties props = new Properties();
        
        props.setProperty("mail.debug", String.valueOf(config.isDebug()));
        
        //first set the actual properties defined in the sendmail configuration
        List<JavamailProperty> jmps = config.getJavamailPropertyCollection();
        for (JavamailProperty jmp : jmps) {
            props.setProperty(jmp.getName(), jmp.getValue());
        }
        
        String protocol = config.getReadmailHost().getReadmailProtocol().getTransport();
        props.put("mail." + protocol + ".host", config.getReadmailHost().getHost());
        props.put("mail." + protocol + ".user", config.getUserAuth().getUserName());
        props.put("mail." + protocol + ".port", config.getReadmailHost().getPort());
        props.put("mail." + protocol + ".starttls.enable", config.getReadmailHost().getReadmailProtocol().isStartTls());
        props.put("mail.smtp.auth", "true");

        if (config.getReadmailHost().getReadmailProtocol().isSslEnable()) {
            props.put("mail." + protocol + ".socketFactory.port", config.getReadmailHost().getPort());
            props.put("mail." + protocol + ".socketFactory.class", "javax.net.ssl.SSLSocketFactory");
            props.put("mail." + protocol + ".socketFactory.fallback", "false");
        }

        //FIXME: need config for these
        props.put("mail." + protocol + ".connectiontimeout", 3000);
        props.put("mail." + protocol + ".timeout", 3000);
        props.put("mail.store.protocol", protocol);
        
        return props;
    }

