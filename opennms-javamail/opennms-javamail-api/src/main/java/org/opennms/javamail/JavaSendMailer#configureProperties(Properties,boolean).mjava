    /**
     * Configure properties.
     * <p>This method uses a properties file reader to pull in opennms styled javamail properties and sets
     * the actual javamail properties.  This is here to preserve the backwards compatibility but configuration
     * will probably change soon.</p>
     * <p>FIXME definitely will change soon, will be deprecated.</p>
     *
     * @param sendmailConfigDefinedProps the sendmail configuration defined properties
     * @param useJmProps a boolean representing the handling of the deprecated javamail-configuration.properties file.
     */
    private void configureProperties(Properties sendmailConfigDefinedProps, boolean useJmProps) {

        //this loads the properties from the old style javamail-configuration.properties
        //TODO: deprecate this
        Properties props = null;
        try {
            props = JavaMailerConfig.getProperties();

            /* These strange properties from javamail-configuration.properties need to be translated into actual javax.mail properties
             * FIXME: The precedence of the properties file vs. the SendmailConfiguration should probably be addressed here
             * FIXME: if using a valid sendmail config, it probably doesn't make sense to use any of these properties
             */
            if (useJmProps) {
                m_config.setDebug(PropertiesUtils.getProperty(props, "org.opennms.core.utils.debug", m_config.isDebug()));
                if (m_config.getSendmailHost().isPresent()) {
                    final SendmailHost sendmailHost = m_config.getSendmailHost().get();
                    sendmailHost.setHost(PropertiesUtils.getProperty(props, "org.opennms.core.utils.mailHost", sendmailHost.getHost()));
                    sendmailHost.setPort(PropertiesUtils.getProperty(props, "org.opennms.core.utils.smtpport", sendmailHost.getPort()));
                }
                if (m_config.getSendmailProtocol().isPresent()) {
                    final SendmailProtocol sendmailProtocol = m_config.getSendmailProtocol().get();
                    sendmailProtocol.setMailer(PropertiesUtils.getProperty(props, "org.opennms.core.utils.mailer", sendmailProtocol.getMailer()));
                    sendmailProtocol.setTransport(PropertiesUtils.getProperty(props, "org.opennms.core.utils.transport", sendmailProtocol.getTransport()));
                    sendmailProtocol.setMessageContentType(PropertiesUtils.getProperty(props, "org.opennms.core.utils.messageContentType", sendmailProtocol.getMessageContentType()));
                    sendmailProtocol.setCharSet(PropertiesUtils.getProperty(props, "org.opennms.core.utils.charset", sendmailProtocol.getCharSet()));
                    sendmailProtocol.setMessageEncoding(PropertiesUtils.getProperty(props, "org.opennms.core.utils.encoding", sendmailProtocol.getMessageEncoding()));
                    sendmailProtocol.setStartTls(PropertiesUtils.getProperty(props, "org.opennms.core.utils.starttls.enable", sendmailProtocol.isStartTls()));
                    sendmailProtocol.setQuitWait(PropertiesUtils.getProperty(props, "org.opennms.core.utils.quitwait", sendmailProtocol.isQuitWait()));
                    sendmailProtocol.setSslEnable(PropertiesUtils.getProperty(props, "org.opennms.core.utils.smtpssl.enable", sendmailProtocol.isSslEnable()));
                }
                if (m_config.getUserAuth().isPresent()) {
                    final UserAuth userAuth = m_config.getUserAuth().get();
                    userAuth.setUserName(PropertiesUtils.getProperty(props, "org.opennms.core.utils.authenticateUser", userAuth.getUserName()));
                    userAuth.setPassword(PropertiesUtils.getProperty(props, "org.opennms.core.utils.authenticatePassword", userAuth.getPassword()));
                }
                if (m_config.getSendmailMessage().isPresent()) {
                    final SendmailMessage sendmailMessage = m_config.getSendmailMessage().get();
                    sendmailMessage.setFrom(PropertiesUtils.getProperty(props, "org.opennms.core.utils.fromAddress", sendmailMessage.getFrom()));
                }
                m_config.setUseJmta(PropertiesUtils.getProperty(props, "org.opennms.core.utils.useJMTA", m_config.isUseJmta()));
                m_config.setUseAuthentication(PropertiesUtils.getProperty(props, "org.opennms.core.utils.authenticate", m_config.isUseAuthentication()));
            }
        } catch (IOException e) {
            LOG.info("configureProperties: could not load javamail.properties, continuing for is no longer required", e);
        }

        //this sets any javamail properties that were set in the SendmailConfig object
        if (props == null) {
            props = new Properties();
        }

        props.putAll(sendmailConfigDefinedProps);

        if (m_config.getSendmailProtocol().isPresent()) {
            final SendmailProtocol sendmailProtocol = m_config.getSendmailProtocol().get();
            if (!props.containsKey("mail.smtp.starttls.enable")) {
                props.setProperty("mail.smtp.starttls.enable", String.valueOf(sendmailProtocol.isStartTls()));
            }
            if (!props.containsKey("mail.smtp.quitwait")) {
                props.setProperty("mail.smtp.quitwait", String.valueOf(sendmailProtocol.isQuitWait()));
            }
            if (!props.containsKey("mail.smtp.quitwait")) {
                props.setProperty("mail.smtp.quitwait", String.valueOf(sendmailProtocol.isQuitWait()));
            }
            if (sendmailProtocol.isSslEnable()) {
                if (!props.containsKey("mail.smtps.auth")) {
                    props.setProperty("mail.smtps.auth", String.valueOf(m_config.isUseAuthentication()));
                }
                if (!props.containsKey("mail.smtps.socketFactory.class")) {
                    props.setProperty("mail.smtps.socketFactory.class", "javax.net.ssl.SSLSocketFactory");
                }
                if (!props.containsKey("mail.smtps.socketFactory.port") && m_config.getSendmailHost().isPresent()) {
                    props.setProperty("mail.smtps.socketFactory.port", String.valueOf(m_config.getSendmailHost().get().getPort()));
                }
            }
        }

        if (!props.containsKey("mail.smtp.auth")) {
            props.setProperty("mail.smtp.auth", String.valueOf(m_config.isUseAuthentication()));
        }
        if (!props.containsKey("mail.smtp.port") && m_config.getSendmailHost().isPresent()) {
            props.setProperty("mail.smtp.port", String.valueOf(m_config.getSendmailHost().get().getPort()));
        }


    }

