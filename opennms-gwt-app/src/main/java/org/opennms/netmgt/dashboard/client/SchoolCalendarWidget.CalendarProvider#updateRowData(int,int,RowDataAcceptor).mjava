    public void updateRowData(final int startRow, final int maxRows,
        final RowDataAcceptor acceptor) {
      // Check the simple cache first.
      //
      if (startRow == lastStartRow) {
        if (maxRows == lastMaxRows) {
          // Use the cached batch.
          //
          pushResults(acceptor, startRow, lastPeople);
          return;
        }
      }

      // Decide where to get the data.
      // This is very unusual. Normally, you'd set the service entry point
      // only once. But since this demo runs without servlet support, we
      // play a game with URLs to fetch canned RPC responses from static files.
      // So, as you might guess, this is really fragile: changing the number
      // of visible rows in the table will cause different batch sizes, and
      // the URL naming trick below will *definitely* break.
      //
      if (USE_STATIC_RPC_ANSWERS) {
        ServiceDefTarget target = (ServiceDefTarget) calService;
        String staticResponseURL = GWT.getModuleBaseURL();
        staticResponseURL += "calendar" + startRow + ".txt";
        target.setServiceEntryPoint(staticResponseURL);
      }

      // Actually fetch the data remotely.
      //
      calService.getPeople(startRow, maxRows, new AsyncCallback() {
        public void onFailure(Throwable caught) {
          acceptor.failed(caught);
        }

        public void onSuccess(Object result) {
          Person[] people = (Person[]) result;
          lastStartRow = startRow;
          lastMaxRows = maxRows;
          lastPeople = people;
          pushResults(acceptor, startRow, people);
        }

      });

    }

