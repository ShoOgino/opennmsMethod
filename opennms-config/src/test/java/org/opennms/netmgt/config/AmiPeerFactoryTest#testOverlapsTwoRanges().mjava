    /**
     * This tests the merging of a new definition that contains a range of IP addresses that overlaps
     * the end of one range and the beginning of another range in a current definition.
     * 
     * @throws MarshalException
     * @throws ValidationException
     * @throws IOException 
     */
    @Test
    public void testOverlapsTwoRanges() throws IOException {

        String amiConfigXml = "<?xml version=\"1.0\"?>\n" + 
                "<ami-config retry=\"3\" timeout=\"800\"\n" + 
                "   username=\"user\" password=\"password\">\n" + 
                "   <definition>\n" + 
                "       <range begin=\"192.168.0.6\" end=\"192.168.0.12\"/>\n" + 
                "       <range begin=\"192.168.0.20\" end=\"192.168.0.100\"/>\n" + 
                "       <range begin=\"192.168.0.8\" end=\"192.168.0.30\"/>\n" + 
                "   </definition>\n" + 
                "\n" + 
                "</ami-config>\n" + 
                "";

        AmiPeerFactory factory = AmiPeerFactory.getInstance();
        AmiPeerFactory.setAmiConfig(JaxbUtils.unmarshal(AmiConfig.class, amiConfigXml));

        assertEquals(1, AmiPeerFactory.getAmiConfig().getDefinitionCount());
        assertEquals(Integer.valueOf(0), AmiPeerFactory.getAmiConfig().getDefinition(0).getSpecificCount());
        assertEquals(Integer.valueOf(3), AmiPeerFactory.getAmiConfig().getDefinition(0).getRangeCount());

        factory.optimize();

        assertEquals(1, AmiPeerFactory.getAmiConfig().getDefinitionCount());
        assertEquals(Integer.valueOf(0), AmiPeerFactory.getAmiConfig().getDefinition(0).getSpecificCount());
        assertEquals(Integer.valueOf(1), AmiPeerFactory.getAmiConfig().getDefinition(0).getRangeCount());
        assertEquals("192.168.0.6", AmiPeerFactory.getAmiConfig().getDefinition(0).getRange(0).getBegin());
        assertEquals("192.168.0.100", AmiPeerFactory.getAmiConfig().getDefinition(0).getRange(0).getEnd());
    }

