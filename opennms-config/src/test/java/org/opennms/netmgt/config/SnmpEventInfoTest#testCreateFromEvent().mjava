	/**
	 * Tests that a SnmpEventInfo creates an event with all parameters. It also
	 * tests that from a given event a SnmpEventInfo object can be created.
	 * @throws UnknownHostException 
	 */
    @Test
	public void testCreateFromEvent() throws UnknownHostException {
		// create an input event. Each attribute must have a different value!
		SnmpEventInfo initial = new SnmpEventInfo();
		initial.setAuthPassPhrase("authPassPhrase");
		initial.setAuthProtocol("authProtocol");
		initial.setContextEngineId("contextEngineId");
		initial.setContextName("contextName");
		initial.setEngineId("engineId");
		initial.setEnterpriseId("enterpriseId");
		initial.setFirstIPAddress("1.1.1.1");
		initial.setLastIPAddress("1.1.1.9");
		initial.setMaxRepetitions(1000);
		initial.setMaxRequestSize(2000);
		initial.setMaxVarsPerPdu(3000);
		initial.setPort(4000);
		initial.setPrivPassPhrase("privPassPhrase");
		initial.setPrivProtocol("privProtocol");
		initial.setProxyHost("proxyHost");
		initial.setReadCommunityString("readCommunityString");
		initial.setRetryCount(5000);
		initial.setSecurityLevel(6000);
		initial.setSecurityName("securityName");
		initial.setTimeout(7000);
		initial.setVersion("version");
		initial.setWriteCommunityString("writeCommunityString");

		// create an event from object and test mapping
		Event event = initial.createEvent("anySource");
		assertEquals(EventConstants.CONFIGURE_SNMP_EVENT_UEI, event.getUei());
		assertEquals(initial.getFirstIPAddress(), event.getInterface());
		assertTrue("Service is not set", event.getService() != null);
		
		// expected values
		Map<String, String> expectedParmMap = new HashMap<String, String>();
		expectedParmMap.put(EventConstants.PARM_FIRST_IP_ADDRESS, initial.getFirstIPAddress());
		expectedParmMap.put(EventConstants.PARM_LAST_IP_ADDRESS, initial.getLastIPAddress());
	    expectedParmMap.put(EventConstants.PARM_SNMP_AUTH_PASSPHRASE, initial.getAuthPassphrase());
	    expectedParmMap.put(EventConstants.PARM_SNMP_AUTH_PROTOCOL, initial.getAuthProtocol());
	    expectedParmMap.put(EventConstants.PARM_SNMP_CONTEXT_ENGINE_ID, initial.getContextEngineId());
	    expectedParmMap.put(EventConstants.PARM_SNMP_CONTEXT_NAME, initial.getContextName());
	    expectedParmMap.put(EventConstants.PARM_SNMP_ENGINE_ID, initial.getEngineId());
	    expectedParmMap.put(EventConstants.PARM_SNMP_ENTERPRISE_ID, initial.getEnterpriseId());
	    expectedParmMap.put(EventConstants.PARM_SNMP_MAX_REPETITIONS, Integer.toString(initial.getMaxRepetitions()));
	    expectedParmMap.put(EventConstants.PARM_SNMP_MAX_REQUEST_SIZE, Integer.toString(initial.getMaxRequestSize()));
	    expectedParmMap.put(EventConstants.PARM_SNMP_MAX_VARS_PER_PDU, Integer.toString(initial.getMaxVarsPerPdu()));
	    expectedParmMap.put(EventConstants.PARM_PORT, Integer.toString(initial.getPort()));
	    expectedParmMap.put(EventConstants.PARM_SNMP_PRIVACY_PASSPHRASE, initial.getPrivPassPhrase());
	    expectedParmMap.put(EventConstants.PARM_SNMP_PRIVACY_PROTOCOL, initial.getPrivProtocol());
	    expectedParmMap.put(EventConstants.PARM_SNMP_PROXY_HOST, initial.getProxyHost());
	    expectedParmMap.put(EventConstants.PARM_SNMP_READ_COMMUNITY_STRING, initial.getReadCommunityString());
	    expectedParmMap.put(EventConstants.PARM_SNMP_SECURITY_NAME, initial.getSecurityName());
	    expectedParmMap.put(EventConstants.PARM_RETRY_COUNT, Integer.toString(initial.getRetryCount()));
	    expectedParmMap.put(EventConstants.PARM_SNMP_SECURITY_LEVEL, Integer.toString(initial.getSecurityLevel()));
	    expectedParmMap.put(EventConstants.PARM_TIMEOUT, Integer.toString(initial.getTimeout()));
	    expectedParmMap.put(EventConstants.PARM_VERSION, initial.getVersion());
	    expectedParmMap.put(EventConstants.PARM_SNMP_WRITE_COMMUNITY_STRING, initial.getWriteCommunityString());
	    
		// ... check each event param, it must be equal to initial
		for (Parm eachParm : event.getParmCollection()) {
			Object expectedValue = expectedParmMap.get(eachParm.getParmName());
			if (expectedValue == null) fail("expectedValue must not be null. Mapping is not implemented correctly");
			assertEquals(expectedValue, eachParm.getValue().getContent());
		}

		// now map the event back to an SnmpEventInfo-object ...
		// ... and check that second is equally to initial
		SnmpEventInfo second = new SnmpEventInfo(ImmutableMapper.fromMutableEvent(event));
		assertEquals(initial, second);
	}

