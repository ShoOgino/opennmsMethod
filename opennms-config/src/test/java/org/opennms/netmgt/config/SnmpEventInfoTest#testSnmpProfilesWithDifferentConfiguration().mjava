    /**
     * Tests that a new snmp config from profile creates a new definition.
     * @throws IOException
     */
    @Test
    public void testSnmpProfilesWithDifferentConfiguration() throws IOException {

        String snmpConfigXml = "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n" +
                "<snmp-config retry=\"3\" timeout=\"800\" read-community=\"public\" write-community=\"private\" xmlns=\"http://xmlns.opennms.org/xsd/config/snmp\">\n" +
                "    <definition version=\"v1\">\n" +
                "        <range begin=\"192.168.1.15\" end=\"192.168.1.35\"/>\n" +
                "    </definition>\n" +
                "       <profiles>" +
                "           <profile " + "version=\"v2c\">" +
                "             <label>sample</label>" +
                "           </profile>\n" +
                "       </profiles>\n" +
                "</snmp-config>\n" +
                "";

        String expectedConfig = "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n" +
                "<snmp-config retry=\"3\" timeout=\"800\" read-community=\"public\" write-community=\"private\" xmlns=\"http://xmlns.opennms.org/xsd/config/snmp\">\n" +
                "    <definition version=\"v1\">\n" +
                "        <range begin=\"192.168.1.15\" end=\"192.168.1.24\"/>\n" +
                "        <range begin=\"192.168.1.26\" end=\"192.168.1.35\"/>\n" +
                "    </definition>\n" +
                "    <definition version=\"v2c\">\n" +
                "        <specific>192.168.1.25</specific>\n" +
                "    </definition>\n" +
                "       <profiles>" +
                "           <profile " + "version=\"v2c\">" +
                "             <label>sample</label>" +
                "           </profile>\n" +
                "       </profiles>\n" +
                "</snmp-config>\n" +
                "";
        SnmpPeerFactory.setInstance(new SnmpPeerFactory(new StringResource(snmpConfigXml)));
        assertXmlEquals(snmpConfigXml, SnmpPeerFactory.getInstance().getSnmpConfigAsString());

        SnmpProfile snmpProfile = SnmpPeerFactory.getInstance().getProfiles().get(0);
        SnmpAgentConfig snmpAgentConfig = SnmpPeerFactory.getInstance().getAgentConfigFromProfile(snmpProfile, InetAddress.getByName("192.168.1.25"));
        assertFalse("Config should be not be default config", snmpAgentConfig.isDefault());
        SnmpPeerFactory.getInstance().saveAgentConfigAsDefinition(snmpAgentConfig, null, "test");
        String actualConfig = SnmpPeerFactory.getInstance().getSnmpConfigAsString();
        assertXmlEquals(expectedConfig, actualConfig);
    }

