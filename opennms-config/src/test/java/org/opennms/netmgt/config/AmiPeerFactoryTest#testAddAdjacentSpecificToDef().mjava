    /**
     * This tests the merging of a new specific into a definition that already contains a specific
     * that is adjacent.  The two specifics should be converted to a single range in the definition.
     * 
     * @throws MarshalException
     * @throws ValidationException
     * @throws IOException 
     */
    public final void testAddAdjacentSpecificToDef() throws MarshalException, ValidationException, IOException {

        String amiConfigXml = "<?xml version=\"1.0\"?>\n" + 
        "<ami-config retry=\"3\" timeout=\"800\"\n" + 
        "   username=\"user\" password=\"password\">\n" + 
        "   <definition>\n" + 
        "       <specific>192.168.0.5</specific>\n" + 
        "       <specific>192.168.0.6</specific>\n" + 
        "   </definition>\n" + 
        "\n" + 
        "</ami-config>\n" + 
        "";

        AmiPeerFactory factory = AmiPeerFactory.getInstance();
        AmiPeerFactory.setAmiConfig(CastorUtils.unmarshal(AmiConfig.class, new ByteArrayInputStream(amiConfigXml.getBytes("UTF-8"))));

        assertEquals(1, AmiPeerFactory.getAmiConfig().getDefinitionCount());
        assertEquals(2, AmiPeerFactory.getAmiConfig().getDefinition(0).getSpecificCount());
        assertEquals(0, AmiPeerFactory.getAmiConfig().getDefinition(0).getRangeCount());

        factory.optimize();

        assertEquals(1, AmiPeerFactory.getAmiConfig().getDefinitionCount());
        assertEquals(0, AmiPeerFactory.getAmiConfig().getDefinition(0).getSpecificCount());
        assertEquals(1, AmiPeerFactory.getAmiConfig().getDefinition(0).getRangeCount());
        assertEquals("192.168.0.5", AmiPeerFactory.getAmiConfig().getDefinition(0).getRange(0).getBegin());
        assertEquals("192.168.0.6", AmiPeerFactory.getAmiConfig().getDefinition(0).getRange(0).getEnd());
    }

