    /**
     * Parses the given match statement i.e. param[key] or parm[#99] and retrieves the corresponding
     * parameter from the given event.
     *
     * If the parameter is found, it is added to the map and <code>true</code> is returned, otherwise <code>false</code>
     * is returned.
     *
     * @param match notification match statement
     * @param event event to match
     * @param eventParametersToMatch ordered map of event parameters we need to match
     * @return <code>true</code> if the map was modified, <code>false</code> otherwise
     */
    private static boolean appendParameterNameAndValue(String match, Event event, Map<String, String> eventParametersToMatch) {
        String key = null;
        String param = null;
        String value = null;
        try {
            key = match.substring(match.indexOf('[') + 1, match.indexOf(']'));
        } catch (Exception e) {}
        if (key != null) {
            int numkey = 0;
            if (key.startsWith("#")) {
                try {
                    numkey = Integer.parseInt(key.substring(1));
                } catch (Exception e) {}
            }
            int idx = 1;
            for (Parm p : event.getParmCollection()) {
                if (numkey > 0) {
                    if (numkey == idx) {
                        param = p.getParmName();
                        value = p.getValue().getContent();
                    }
                } else {
                    if (p.getParmName().equalsIgnoreCase(key)) {
                        param = p.getParmName();
                        value = p.getValue().getContent();
                    }
                }
                idx++;
            }
        }
        if (param == null || value == null) {
            return false;
        }
        eventParametersToMatch.put(param, value);
        return true;
    }

