    /**
     * <p>acknowledgeNoticeBasedOnAlarms</p>
     *
     * @param event a {@link org.opennms.netmgt.xml.event.Event} object.
     * @return a {@link java.utilCollection} object.
     * @throws java.sql.SQLException if any.
     * @throws java.io.IOException if any.
     */
    public Collection<Integer> acknowledgeNoticeBasedOnAlarms(final Event event) throws SQLException, IOException {
        Set<Integer> notifIDs = new TreeSet<>();
        if (event.getAlarmData() == null || event.getAlarmData().getAlarmType() != 2) {
            return notifIDs;
        }
        final DBUtils dbUtils = new DBUtils(getClass());
        try {
            Connection connection = getConnection();
            dbUtils.watch(connection);
            PreparedStatement statement = connection.prepareStatement("SELECT e.eventId FROM events e, alarms a WHERE e.alarmid = a.alarmid AND a.reductionkey= ?");
            dbUtils.watch(statement);
            statement.setString(1, event.getAlarmData().getClearKey());
            ResultSet results = statement.executeQuery();
            dbUtils.watch(results);
            while (results.next()) {
                int eventID = results.getInt(1);
                notifIDs.addAll(doAcknowledgeNotificationsFromEvent(connection, dbUtils, eventID));
            }
        } finally {
            dbUtils.cleanUp();
        }
        return notifIDs;
    }

