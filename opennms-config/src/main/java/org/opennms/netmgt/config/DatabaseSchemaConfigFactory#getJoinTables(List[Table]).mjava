    /**
     * Return the sequence of tables necessary to join the primary table to the
     * given tables.
     *
     * @param tables
     *            list of Tables to join
     * @return a list of table names, starting with the primary table, going
     *         to each of the given tables, or a zero-length array if no join
     *         exists or only the primary table was specified
     */
    public List<String> getJoinTables(final List<Table> tables) {
        final List<String> joinedTables = new ArrayList<>();

        getReadLock().lock();
        try {
            for (int i = 0; i < tables.size(); i++) {
                final int insertPosition = joinedTables.size();
                String currentTable = tables.get(i).getName();
                while (currentTable != null && !joinedTables.contains(currentTable)) {
                    joinedTables.add(insertPosition, currentTable);
                    final Join next = m_primaryJoins.get(currentTable);
                    if (next != null) {
                        currentTable = next.getTable();
                    } else {
                        currentTable = null;
                    }
                }
            }
    
            return joinedTables;
        } finally {
            getReadLock().unlock();
        }
    }

