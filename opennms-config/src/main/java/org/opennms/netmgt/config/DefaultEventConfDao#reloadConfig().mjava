    private synchronized void reloadConfig() throws DataAccessException {
        try {
            // Load the root event file
            Events events = JaxbUtils.unmarshal(Events.class, m_configResource);
            // Insert events exposed via the service registry
            Events extEvents = m_extContainer.getObject();
            if (extEvents != null) {
                // Events exposed via the registry currently take priority over the events defined
                // in the configuration files. This behavior may change with HZN-1419.
                events.getEvents().addAll(0, extEvents.getEvents());
                if (LOG.isDebugEnabled()) {
                    LOG.debug("Events with the following UEIs are contributed by one or more extensions: {}", extEvents.getEvents().stream()
                        .map(Event::getUei)
                        .collect(Collectors.joining(",")));
                }
            }

            // Hash the list of event files for efficient lookup
            Set<String> eventFiles = new HashSet<>();
            eventFiles.addAll(events.getEventFiles());

            // Copy the loaded event files from the current root to the new root
            // if and only if they exist in the new root
            for (String eventFile : m_events.getEventFiles()) {
                if (!eventFiles.contains(eventFile)) {
                    m_lastModifiedEventFiles.remove(eventFile);
                    continue;
                }
                events.addLoadedEventFile(eventFile, m_events.getLoadEventsByFile(eventFile));
            }

            // Load/reload the event files as necessary
            events.loadEventFilesIfModified(m_configResource, m_lastModifiedEventFiles);

            // Order the events for efficient searching
            events.initialize(m_partition, new EventOrdering());

            m_events = events;
        } catch (Exception e) {
            throw new DataRetrievalFailureException("Unable to load " + m_configResource, e);
        }
    }

