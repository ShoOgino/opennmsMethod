    /**
     * <p>rebuildParameterMap</p>
     *
     * @param notifId a int.
     * @param resolutionPrefix a {@link java.lang.String} object.
     * @param skipNumericPrefix a boolean.
     * @return a {@link java.util.Map} object.
     * @throws java.lang.Exception if any.
     */
    public Map<String, String> rebuildParameterMap(final int notifId, final String resolutionPrefix, final boolean skipNumericPrefix) throws Exception {
        final Map<String, String> parmMap = new HashMap<String, String>();
        Querier querier = new Querier(m_dataSource, "select notifications.*, service.* from notifications left outer join service on notifications.serviceID = service.serviceID  where notifyId = ?") {
            @Override
            public void processRow(ResultSet rs) throws SQLException {

                /*
                 * Note, getString on results is valid for any SQL data type except the new SQL types:
                 *    Blog, Clob, Array, Struct, Ref
                 * of which we have none in this table so this row processor is using getString
                 * to correctly align with annotated types in the map.
                 */
                parmMap.put(
                            NotificationManager.PARAM_TEXT_MSG, 
                            expandNotifParms(
                                             resolutionPrefix, 
                                             Collections.singletonMap("noticeid", String.valueOf(notifId))
                                    ) + rs.getString("textMsg")
                        );
                if (skipNumericPrefix) {
                    parmMap.put(
                                NotificationManager.PARAM_NUM_MSG, 
                                rs.getString("numericMsg")
                            );
                } else {
                    parmMap.put(
                                NotificationManager.PARAM_NUM_MSG, 
                                expandNotifParms(
                                                 resolutionPrefix, 
                                                 Collections.singletonMap("noticeid", String.valueOf(notifId))
                                        ) + rs.getString("numericMsg")
                            );
                }
                parmMap.put(
                            NotificationManager.PARAM_SUBJECT, 
                            expandNotifParms(
                                             resolutionPrefix, 
                                             Collections.singletonMap("noticeid", String.valueOf(notifId))
                                    ) + rs.getString("subject")
                        );
                parmMap.put(NotificationManager.PARAM_NODE, rs.getString("nodeID"));
                parmMap.put(NotificationManager.PARAM_INTERFACE, rs.getString("interfaceID"));
                parmMap.put(NotificationManager.PARAM_SERVICE, rs.getString("serviceName"));
                parmMap.put("noticeid", rs.getString("notifyID"));
                parmMap.put("eventID", rs.getString("eventID"));
                parmMap.put("eventUEI", rs.getString("eventUEI"));

                Notification notification = null;
                try {
                    notification = getNotification(rs.getObject("notifConfigName").toString());
                } catch (IOException e) {
                }

                if (notification != null) {
                    addNotificationParams(parmMap, notification);
                }
            }
        };
        querier.execute(notifId);
        return parmMap;
    }

