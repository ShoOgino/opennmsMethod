    public List<Detector> getListOfDetectors(InetAddress inetAddress, String location) {

        String ipAddress = InetAddressUtils.toIpAddrString(inetAddress);
        if (Strings.isNullOrEmpty(location)) {
            location = LocationUtils.DEFAULT_LOCATION_NAME;
        }
        final String sourceLocation = location;
        final String defaultLocation = getConfiguration().getLocation().orElse(LocationUtils.DEFAULT_LOCATION_NAME);

        // Find the definition that has the IP Address and return the detectors for that definition.
        Optional<Definition> definition = getConfiguration().getDefinitions().stream().filter(def -> {

            //First match should be enough to pass filter.
            boolean specificMatch = def.getSpecifics().stream().anyMatch(specific -> {
                return specific.getLocation().orElse(def.getLocation().orElse(defaultLocation)).equals(sourceLocation)
                        && specific.getAddress().equals(ipAddress);
            });
            if(specificMatch) {
                // IP Address found in specifics.
                return true;
            }
            // Find match in url specifics
            boolean urlSpecficMatch = def.getIncludeUrls().stream().anyMatch(includeUrl -> {
                boolean urlLocationMatch = includeUrl.getUrl().isPresent() &&
                        includeUrl.getLocation().orElse(def.getLocation().orElse(defaultLocation)).equals(sourceLocation);
                if (urlLocationMatch) {
                    List<String> urlSpecifics = m_urlSpecifics.get(includeUrl.getUrl().get());
                    if (urlSpecifics != null) {
                        return urlSpecifics.contains(ipAddress);
                    }
                }
                return false;
            });
            if (urlSpecficMatch) {
                //IP Address found in URL specifics.
                return true;
            }
            // Find match in ranges.
            return def.getIncludeRanges().stream().anyMatch(includeRange ->
                    includeRange.getLocation().orElse(def.getLocation().orElse(defaultLocation)).equals(sourceLocation) &&
                            InetAddressUtils.isInetAddressInRange(ipAddress, includeRange.getBegin(), includeRange.getEnd()));

        }).findFirst();

        if (definition.isPresent()) {
            return definition.get().getDetectors();
        } else {
            return new ArrayList<>();
        }
    }

