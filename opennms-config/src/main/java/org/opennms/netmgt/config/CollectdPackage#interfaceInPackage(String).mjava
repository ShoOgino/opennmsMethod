	/**
	 * This method is used to determine if the named interface is included in
	 * the passed package definition. If the interface belongs to the package
	 * then a value of true is returned. If the interface does not belong to the
	 * package a false value is returned.
	 *
	 * <strong>Note: </strong>Evaluation of the interface against a package
	 * filter will only work if the IP is already in the database.
	 *
	 * @deprecated This function should take normal model objects instead of bare IP 
	 * addresses. Move this implementation into {@link #interfaceInPackage(OnmsIpInterface)}.
	 *
	 * @param iface
	 *            The interface to test against the package.
	 * @return True if the interface is included in the package, false
	 *         otherwise.
	 */
	public boolean interfaceInPackage(final String iface) {
		boolean filterPassed = interfaceInFilter(iface);
	
		if (!filterPassed)
			return false;
	
		//
		// Ensure that the interface is in the specific list or
		// that it is in the include range and is not excluded
		//
	
		byte[] addr = toIpAddrBytes(iface);
	
		boolean has_range_include = hasIncludeRange(iface);
		boolean has_specific = hasSpecific(addr);
	
		has_specific = hasSpecificUrl(iface, has_specific);
		boolean has_range_exclude = hasExcludeRange(iface);
	
		boolean packagePassed = has_specific
				|| (has_range_include && !has_range_exclude);
                if(packagePassed) {
		    LOG.info("interfaceInPackage: Interface {} passed filter and specific/range for package {}?: {}", iface, getName(), packagePassed);
                } else {
		    LOG.debug("interfaceInPackage: Interface {} passed filter and specific/range for package {}?: {}", iface, getName(), packagePassed);
                }
		return packagePassed;
	}

