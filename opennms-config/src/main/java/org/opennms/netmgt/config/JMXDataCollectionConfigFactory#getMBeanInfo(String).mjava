    /**
     * <p>getMBeanInfo</p>
     *
     * @param cName a {@link java.lang.String} object.
     * @return a {@link java.util.Map} object.
     */
    public Map<String, BeanInfo> getMBeanInfo(String cName) {
        Map<String, BeanInfo> map = new HashMap<String, BeanInfo>();

        // Retrieve the appropriate Collection object
        // 
        JmxCollection collection = m_collectionMap.get(cName);

        if (collection == null) {
            LOG.warn("no collection named '{}' was found", cName);
        } else {
            for (Mbean mbean : collection.getMbeans()) {
                BeanInfo beanInfo = new BeanInfo();
                beanInfo.setMbeanName(mbean.getName());
                beanInfo.setObjectName(mbean.getObjectname());
                beanInfo.setKeyField(mbean.getKeyfield());
                beanInfo.setExcludes(mbean.getExclude());
                beanInfo.setKeyAlias(mbean.getKeyAlias());

                List<String> attribNameList = new ArrayList<String>();
                List<String> compAttribNameList = new ArrayList<String>();

                for (CompAttrib myCa : mbean.getCompAttribList()) {
                    for (CompMember myCm : myCa.getCompMemberList()) {
                        attribNameList.add(myCa.getName() + "|" + myCm.getName());
                        compAttribNameList.add(myCa.getName() + "|" + myCm.getName());
                    }
                }

                for (Attrib myA : mbean.getAttribList()) {
                    attribNameList.add(myA.getName());
                }

                beanInfo.setAttributes(attribNameList);
                beanInfo.setCompositeAttributes(compAttribNameList);
                map.put(mbean.getObjectname(), beanInfo);
            }
        }
        return Collections.unmodifiableMap(map);
    }

