    /**
     * <p>getNotifForEvent</p>
     *
     * @param event a {@link org.opennms.netmgt.xml.event.Event} object.
     * @return an array of {@link org.opennms.netmgt.config.notifications.Notification} objects.
     * @throws java.io.IOException if any.
     */
    public Notification[] getNotifForEvent(final Event event) throws IOException {
        update();
        List<Notification> notifList = new ArrayList<Notification>();
        boolean matchAll = getConfigManager().getNotificationMatch();

        // This if statement will check to see if notification should be suppressed for this event.

        if (event == null) {
            LOG.warn("unable to get notification for null event!");
            return null;
        } else if (event.getLogmsg() != null && !(event.getLogmsg().getNotify())) {

            LOG.debug("Event {} is configured to suppress notifications.", event.getUei());
            return null;
        }

        for (Notification curNotif : m_notifications.getNotificationCollection()) {

            LOG.trace("Checking notification {} against event {} with UEI {}", curNotif.getUei(), event.getDbid(), event.getUei());

            if (event.getUei().equals(curNotif.getUei()) || "MATCH-ANY-UEI".equals(curNotif.getUei())) {
                // Match!
            	LOG.debug("Exact match using notification UEI {} for event UEI: {}", curNotif.getUei(), event.getUei());
            } else if (curNotif.getUei().charAt(0) == '~') {
                if (event.getUei().matches(curNotif.getUei().substring(1))) {
                	//Match!
                    LOG.debug("Regex hit using notification UEI {} for event UEI: {}", curNotif.getUei(), event.getUei());
                } else {

                    LOG.trace("Notification regex {} failed to match event UEI: {}", event.getUei(), curNotif.getUei());
                    continue;
                }
            } else {

                LOG.debug("Notification UEI {} did not match UEI of event {}: {}", curNotif.getUei(), event.getDbid(), event.getUei());
                continue;
            }

            /**
             * Check if event severity matches pattern in notification
             */

            LOG.trace("Checking event severity: {} against notification severity: {}", curNotif.getEventSeverity(), event.getSeverity());
            // parameter is optional, return true if not set
            if (!curNotif.getEventSeverity().isPresent()) {
                // Skip matching on severity
            } else if (event.getSeverity().toLowerCase().matches(curNotif.getEventSeverity().get().toLowerCase())) {
                // Severities match
            } else {

                LOG.debug("Event severity: {} did not match notification severity: {}", curNotif.getEventSeverity(), event.getSeverity());
                continue;
            }

            // The notice has to be "on"
            // The notice has to match a severity if configured - currHasSeverity should be true if there is no severity rule 
            // The notice has to match the UEI of the event or MATCH-ANY-UEI
            // If all those things are true:
            // Then the service has to match if configured, the interface if configured, and the node if configured.

            if (curNotif.getStatus().equals("on")) {
                if (nodeInterfaceServiceValid(curNotif, event)) {
                    boolean parmsmatched = getConfigManager().matchNotificationParameters(event, curNotif);

                    if (!parmsmatched) {

                        LOG.debug("Event {} did not match parameters for notice {}", event.getUei(), curNotif.getName());
                        continue;
                    }
                    // Add this notification to the return value
                    notifList.add(curNotif);


                    LOG.debug("Event {} matched notice {}", event.getUei(), curNotif.getName());

                    if (!matchAll)
                        break;
                } else {

                    LOG.debug("Node/interface/service combination in the event was invalid");
                }
            } else {

                LOG.debug("Current notification with UEI {} is turned off.", curNotif.getUei());
            }
        }

        if (!notifList.isEmpty()) {
            return notifList.toArray(new Notification[0]);
        } else {
            return null;
        }
    }

