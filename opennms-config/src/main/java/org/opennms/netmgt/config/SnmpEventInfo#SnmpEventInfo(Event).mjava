    /**
     * <p>Constructor for SnmpEventInfo.</p>
     *
     * @param event a {@link org.opennms.netmgt.xml.event.Event} object.
     */
	@SuppressWarnings("deprecation")
	public SnmpEventInfo(Event event) {
    	 String parmName = null;
         Value parmValue = null;
         String parmContent = null;
         
         if (!event.getUei().equals(EventConstants.CONFIGURE_SNMP_EVENT_UEI)) {
             throw new IllegalArgumentException("Event is not an a \"configure SNMP\" event: "+event.toString());
         }
         	
         for (Parm parm : event.getParmCollection()) {
            parmName = parm.getParmName();
            parmValue = parm.getValue();
            if (parmValue == null) continue;
            parmContent = parmValue.getContent();
            
            try {
                if (parmName.equals(EventConstants.PARM_FIRST_IP_ADDRESS)) {
                    setFirstIPAddress(parmContent);
                } else if (parmName.equals(EventConstants.PARM_LAST_IP_ADDRESS)) {
                    setLastIPAddress(parmContent);
                } else if (parmName.equals(EventConstants.PARM_COMMUNITY_STRING) || parmName.equals(EventConstants.PARM_SNMP_READ_COMMUNITY_STRING)) {
                    setReadCommunityString(parmContent);
                } else if (parmName.equals(EventConstants.PARM_SNMP_WRITE_COMMUNITY_STRING)) {
                	setWriteCommunityString(parmContent);
                } else if (parmName.equals(EventConstants.PARM_RETRY_COUNT)) {
                    setRetryCount(computeIntValue(parmContent));
                } else if (parmName.equals(EventConstants.PARM_TIMEOUT)) {
                    setTimeout(computeIntValue(parmContent));
                } else if (parmName.equals(EventConstants.PARM_VERSION)) {
                    setVersion(parmContent);
                } else if (parmName.equals(EventConstants.PARM_SNMP_MAX_REPETITIONS)) {
                	setMaxRepetitions(computeIntValue(parmContent));
                } else if (parmName.equals(EventConstants.PARM_SNMP_MAX_REQUEST_SIZE)) {
                	setMaxRequestSize(computeIntValue(parmContent));
                } else if (parmName.equals(EventConstants.PARM_SNMP_MAX_VARS_PER_PDU)) {
                	setMaxVarsPerPdu(computeIntValue(parmContent));
                } else if (parmName.equals(EventConstants.PARM_PORT)) {
                    setPort(computeIntValue(parmContent));
                } else if (parmName.equals(EventConstants.PARM_SNMP_AUTH_PASSPHRASE)) {
                	setAuthPassPhrase(parmContent);
                } else if (parmName.equals(EventConstants.PARM_SNMP_AUTH_PROTOCOL)) {
                	setAuthProtocol(parmContent);
                } else if (parmName.equals(EventConstants.PARM_SNMP_SECURITY_LEVEL)) {
                	setSecurityLevel(computeIntValue(parmContent));
                } else if (parmName.equals(EventConstants.PARM_SNMP_SECURITY_NAME)) {
                	setSecurityName(parmContent);
                } else if (parmName.equals(EventConstants.PARM_SNMP_ENGINE_ID)) {
                	setEngineId(parmContent);
                } else if (parmName.equals(EventConstants.PARM_SNMP_ENTERPRISE_ID)) {
                	setEnterpriseId(parmContent);
                } else if (parmName.equals(EventConstants.PARM_SNMP_CONTEXT_ENGINE_ID)) {
                	setContextEngineId(parmContent);
                } else if (parmName.equals(EventConstants.PARM_SNMP_CONTEXT_NAME)) {
                	setContextName(parmContent);
                } else if (parmName.equals(EventConstants.PARM_SNMP_PRIVACY_PASSPHRASE)) {
                	setPrivPassPhrase(parmContent);
                } else if (parmName.equals(EventConstants.PARM_SNMP_PRIVACY_PROTOCOL)) {
                	setPrivProtocol(parmContent);
                } else if (parmName.equals(EventConstants.PARM_SNMP_PROXY_HOST)) {
                	setProxyHost(parmContent);
                }
            } catch (UnknownHostException e) {
                LogUtils.errorf(this, "SnmpEventInfo constructor", e);
                throw new IllegalArgumentException("SnmpEventInfo constructor. "+e.getLocalizedMessage());
            } catch (IllegalArgumentException e) {
            	LogUtils.errorf(this, "SnmpEventInfo constructor", e);
                throw e;
            }
        }
	}

