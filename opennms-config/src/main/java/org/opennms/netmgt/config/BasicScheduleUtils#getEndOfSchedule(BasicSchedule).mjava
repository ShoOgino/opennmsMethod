    /**
     * <p>getEndOfSchedule</p>
     *
     * @param out a {@link org.opennms.netmgt.config.poller.outages.common.BasicSchedule} object.
     * @return a {@link java.util.Calendar} object.
     */
    public static Calendar getEndOfSchedule(final BasicSchedule out) {
        final long curCalTime = System.currentTimeMillis();
        final Calendar cal = new GregorianCalendar();
        cal.setTimeInMillis(curCalTime);

        // check if day is part of outage
        boolean inOutage = false;
        
        final Enumeration<Time> en = out.enumerateTime();
        while (en.hasMoreElements() && !inOutage) {
            final Calendar outCalBegin = new GregorianCalendar();
            final Calendar outCalEnd = new GregorianCalendar();

            final Time oTime = en.nextElement();

            final String oTimeDay = oTime.getDay();
            final String begins = oTime.getBegins();
            final String ends = oTime.getEnds();

            if (oTimeDay != null) {
                // see if outage time was specified as sunday/monday..
                final Integer dayInMap = getDayOfWeekIndex(oTimeDay);
                if (dayInMap != null) {
                    // check if value specified matches current date
                    if (cal.get(Calendar.DAY_OF_WEEK) == dayInMap.intValue()) inOutage = true;
                    outCalBegin.set(Calendar.DAY_OF_WEEK, dayInMap.intValue());
                    outCalEnd.set(Calendar.DAY_OF_WEEK, dayInMap.intValue());
                }
                // else see if outage time was specified as day of month
                else {
                    final int intOTimeDay = Integer.valueOf(oTimeDay).intValue();
    
                    if (cal.get(Calendar.DAY_OF_MONTH) == intOTimeDay) inOutage = true;
    
                    outCalBegin.set(Calendar.DAY_OF_MONTH, intOTimeDay);
                    outCalEnd.set(Calendar.DAY_OF_MONTH, intOTimeDay);
                }
            }

            // if time of day was specified and did not match, continue
            if (oTimeDay != null && !inOutage) {
                continue;
            }

            // set time in out calendars
            setOutCalTime(outCalBegin, begins);
            setOutCalTime(outCalEnd, ends);

            final long outCalBeginTime = outCalBegin.getTime().getTime() / 1000 * 1000;
            final long outCalEndTime = (outCalEnd.getTime().getTime() / 1000 + 1) * 1000;

            if (curCalTime >= outCalBeginTime && curCalTime < outCalEndTime) return outCalEnd;
        }
        return null; // Couldn't find a time period that matches
    }

