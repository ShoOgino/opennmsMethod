    /**
     * In the absence of DAOs and ORMs this creates an Event object from the persisted
     * record.
     *
     * @param eventid a int.
     * @return a populated Event object
     */
    public Event getEvent(final int eventid) {
        // don't switch using event builder since this event is read from the database
        final Event event = new Event();
        Querier querier = new Querier(m_dataSource, "select * from events where eventid = ?", new RowProcessor() {

            @Override
            public void processRow(ResultSet rs) throws SQLException {
                event.setDbid(rs.getInt("eventid"));
                event.setUei(rs.getString("eventuei"));
                event.setNodeid(rs.getLong("nodeid"));
                event.setTime(rs.getDate("eventtime"));
                event.setHost(rs.getString("eventhost"));
                event.setInterface(rs.getString("ipaddr"));
                event.setSnmphost(rs.getString("eventsnmphost"));
                event.setService(getServiceName(rs.getInt("serviceid")));
                event.setCreationTime(rs.getDate("eventcreatetime"));
                event.setSeverity(rs.getString("eventseverity"));
                event.setPathoutage(rs.getString("eventpathoutage"));
                Tticket tticket = new Tticket();
                tticket.setContent(rs.getString("eventtticket"));
                tticket.setState(rs.getString("eventtticketstate"));
                event.setTticket(tticket);
                event.setSource(rs.getString("eventsource"));
            }

            private String getServiceName(int serviceid) {
                SingleResultQuerier querier = new SingleResultQuerier(m_dataSource, "select servicename from service where serviceid = ?");
                return (String)querier.getResult();
            }

        });
        querier.execute(eventid);
        return event;
    }

