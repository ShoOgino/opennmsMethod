    /**
     * <p>acknowledgeNotice</p>
     *
     * @param event a {@link org.opennms.netmgt.xml.event.Event} object.
     * @param uei a {@link java.lang.String} object.
     * @param matchList an array of {@link java.lang.String} objects.
     * @return a {@link java.util.Collection} object.
     * @throws java.sql.SQLException if any.
     * @throws java.io.IOException if any.
     * @throws org.exolab.castor.xml.MarshalException if any.
     * @throws org.exolab.castor.xml.ValidationException if any.
     */
    public Collection<Integer> acknowledgeNotice(final Event event, final String uei, final String[] matchList) throws SQLException, IOException, MarshalException, ValidationException {
        List<Integer> notifIDs = new LinkedList<Integer>();
        final DBUtils dbUtils = new DBUtils(getClass());

        try {
            // First get most recent event ID from notifications 
            // that match the matchList, then get all notifications
            // with this event ID
            Connection connection = getConnection();
            dbUtils.watch(connection);

            // Verify if parameter matching is required
            boolean matchParameters = false;
            for (int i = 0; i < matchList.length; i++) {
                if (matchList[i].startsWith("parm[")) {
                    matchParameters = true;
                    break;
                }
            }

            StringBuffer sql = new StringBuffer(matchParameters ? "SELECT n.eventid FROM notifications n, events e WHERE n.eventid = e.eventid AND n.eventuei=? " : "SELECT n.eventid FROM notifications n WHERE n.eventuei=? ");
            for (int i = 0; i < matchList.length; i++) {
                if (matchList[i].startsWith("parm[")) {
                    sql.append("AND e.eventparms LIKE ? ");
                } else {
                    sql.append("AND n.").append(matchList[i]).append("=? ");
                }
            }
            sql.append("ORDER BY eventid desc limit 1");
            PreparedStatement statement = connection.prepareStatement(sql.toString());
            dbUtils.watch(statement);
            statement.setString(1, uei);

            for (int i = 0; i < matchList.length; i++) {
                if (matchList[i].equals("nodeid")) {
                    statement.setLong(i + 2, event.getNodeid());
                }

                if (matchList[i].equals("interfaceid")) {
                    statement.setString(i + 2, event.getInterface());
                }

                if (matchList[i].equals("serviceid")) {
                    statement.setInt(i + 2, getServiceId(event.getService()));
                }

                if (matchList[i].startsWith("parm[")) {
                    String match = matchList[i];
                    String key = null;
                    String param = null;
                    String value = null;
                    try {
                        key = match.substring(match.indexOf('[') + 1, match.indexOf(']'));
                    } catch (Exception e) {}
                    if (key != null) {
                        int numkey = 0;
                        if (key.startsWith("#")) {
                            try {
                                numkey = Integer.parseInt(key.substring(1));
                            } catch (Exception e) {}
                        }
                        int idx = 0;
                        for (Parm p : event.getParmCollection()) {
                            if (numkey > 0) {
                                if (numkey == idx) {
                                    param = p.getParmName();
                                    value = p.getValue().getContent();
                                }
                            } else {
                                if (p.getParmName().equalsIgnoreCase(key)) {
                                    param = p.getParmName();
                                    value = p.getValue().getContent();
                                }
                            }
                            idx++;
                        }
                    }
                    statement.setString(i + 2, '%' + param + '=' + value + '%');
                }
            }

            ResultSet results = statement.executeQuery();
            dbUtils.watch(results);
            if (results != null && results.next()) {
                int eventID = results.getInt(1);
                notifIDs = doAcknowledgeNotificationsFromEvent(connection, dbUtils, eventID);
            } else {
                LOG.debug("No matching DOWN eventID found");
            }
        } finally {
            dbUtils.cleanUp();
        }
        return notifIDs;
    }

