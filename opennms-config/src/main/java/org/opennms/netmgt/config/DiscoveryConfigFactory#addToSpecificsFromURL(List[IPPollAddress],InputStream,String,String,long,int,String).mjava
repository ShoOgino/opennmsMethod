    /**
     * <p>addToSpecificsFromURL</p>
     *
     * @param specifics a {@link List} object.
     * @param is a {@link InputStream} object.
     * @param timeout a long.
     * @param retries a int.
     * @param url
     * @return a List of IP Addresses retrieved from URL.
     * @throws java.io.IOException if any.
     */
    public static List<String> addToSpecificsFromURL(final List<IPPollAddress> specifics, final InputStream is, final String foreignSource, final String location, final long timeout, final int retries, String url) throws IOException {
        boolean bRet = true;
        List<String> ipAddressList = new ArrayList<>();
        try {
            final BufferedReader buffer = new BufferedReader(new InputStreamReader(is, StandardCharsets.UTF_8));

            String ipLine = null;
            String specIP = null;

            // get each line of the file and turn it into a specific range
            while ((ipLine = buffer.readLine()) != null) {
                ipLine = ipLine.trim();
                if (ipLine.length() == 0 || ipLine.charAt(0) == DiscoveryConfigFactory.COMMENT_CHAR) {
                    // blank line or skip comment
                    continue;
                }

                // check for comments after IP
                final int comIndex = ipLine.indexOf(DiscoveryConfigFactory.COMMENT_STR);
                if (comIndex == -1) {
                    specIP = ipLine;
                } else {
                    specIP = ipLine.substring(0, comIndex);
                    specIP = specIP.trim();
                }

                try {
                    InetAddress specific = InetAddressUtils.addr(specIP);
                    specifics.add(new IPPollAddress(foreignSource, location, specific, timeout, retries));
                    String ipAddress = InetAddressUtils.toIpAddrString(specific);
                    ipAddressList.add(ipAddress);
                } catch (final IllegalArgumentException e) {
                    LOG.warn("Unknown host \'{}\' inside discovery include file: address ignored", specIP);
                }

                specIP = null;
            }
        } catch (final UnsupportedEncodingException e) {
            LOG.error("Your JVM doesn't support UTF-8");
        }
        return ipAddressList;
    }

