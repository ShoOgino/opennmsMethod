    /**
     * Creates an SNMP config definition representing the data in this class.
     * The defintion will either have one specific IP element or one Range element.
     *
     * @return a {@link org.opennms.netmgt.config.snmp.Definition} object.
     */
    public Definition createDef() {
        Definition definition = new Definition();
        if (StringUtils.isNotEmpty(getVersion())) definition.setVersion(getVersion());
        if (getRetryCount() != 0) definition.setRetry(Integer.valueOf(getRetryCount()));
        if (getTimeout() != 0) definition.setTimeout(Integer.valueOf(getTimeout()));
        if (getPort() != 0) definition.setPort(Integer.valueOf(getPort()));
        if (getMaxRepititions() != 0) definition.setMaxRepetitions(Integer.valueOf(getMaxRepititions()));
    	if (getMaxVarsPerPdu() != 0) definition.setMaxVarsPerPdu(Integer.valueOf(getMaxVarsPerPdu()));
    	if (getMaxRequestSize() != 0) definition.setMaxRequestSize(Integer.valueOf(getMaxRequestSize()));
    	
        // version dependend parameters
        if (getVersion() != null && getVersion().equals("v3")) {
        	if (StringUtils.isNotEmpty(getAuthPassprase())) definition.setAuthPassphrase(getAuthPassprase());
        	if (StringUtils.isNotEmpty(getAuthProtcol())) definition.setAuthProtocol(getAuthProtcol());
        	if (StringUtils.isNotEmpty(getContextEngineId())) definition.setContextEngineId(getContextEngineId());
        	if (StringUtils.isNotEmpty(getContextName())) definition.setContextName(getContextName());
        	if (StringUtils.isNotEmpty(getEngineId())) definition.setEngineId(getEngineId());
        	if (StringUtils.isNotEmpty(getEnterpriseId())) definition.setEnterpriseId(getEnterpriseId());
        	if (StringUtils.isNotEmpty(getPrivPassPhrase())) definition.setPrivacyPassphrase(getPrivPassPhrase());
        	if (StringUtils.isNotEmpty(getPrivProtocol())) definition.setPrivacyProtocol(getPrivProtocol());
        	if (StringUtils.isNotEmpty(getSecurityName())) definition.setSecurityName(getSecurityName());
        	if (getSecurityLevel() > 0) definition.setSecurityLevel(getSecurityLevel());
        } else { //v1, v2c or invalid version
        	if (getReadCommunityString() != null) definition.setReadCommunity(getReadCommunityString());
        	if (getWriteCommunityString() != null) definition.setWriteCommunity(getWriteCommunityString());
        }
        
        if (isSpecific()) {
            definition.addSpecific(getFirstIPAddress());
        } else {
            
        	// first ip address of range must be < than last ip address of range
            if (BigInteger.ZERO.compareTo(InetAddressUtils.difference(getFirstIPAddress(), getLastIPAddress())) < 0) {
                LogUtils.errorf(this, "createDef: Can not create Definition when specified last is < first IP address: "+ this);
                throw new IllegalArgumentException("First: "+getFirstIPAddress()+" is greater than: "+getLastIPAddress());
            }
            
            Range range = new Range();
            range.setBegin(getFirstIPAddress());
            range.setEnd(getLastIPAddress());
            definition.addRange(range);
        }
        LogUtils.debugf(this, "createDef: created new Definition from: " + this);
        return definition;
    }

