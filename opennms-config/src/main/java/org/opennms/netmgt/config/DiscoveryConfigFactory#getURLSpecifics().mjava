    /**
     * <p>getURLSpecifics</p>
     *
     * @return a {@link java.util.List} object.
     */
    @Override
    public List<IPPollAddress> getURLSpecifics() {
        final List<IPPollAddress> specifics = new LinkedList<IPPollAddress>();

        getReadLock().lock();
        try {
            Long defaultTimeout = getConfiguration().getTimeout().orElse(DEFAULT_TIMEOUT);
            Integer defaultRetries = getConfiguration().getRetries().orElse(DEFAULT_RETRIES);

            for (final IncludeUrl url : getConfiguration().getIncludeUrls()) {

                long timeout = url.getTimeout().orElse(defaultTimeout);
                int retries = url.getRetries().orElse(defaultRetries);
                if(url.getUrl().isPresent()) {
                    String urlString = url.getUrl().get();
                    List<String> ipAddressList = addToSpecificsFromURL(specifics, urlString, url.getForeignSource().orElse(null), url.getLocation().orElse(null), timeout, retries);
                    m_urlSpecifics.put(urlString, ipAddressList);
                }
            }

            // Add URL specifics from definitions to the specifics list.
            getConfiguration().getDefinitions().forEach(def -> {

                long timeoutFromDef = def.getTimeout().orElse(defaultTimeout);
                int retriesFromDef = def.getRetries().orElse(defaultRetries);

                for (final IncludeUrl url : def.getIncludeUrls()) {

                    long timeout = url.getTimeout().orElse(timeoutFromDef);
                    int retries = url.getRetries().orElse(retriesFromDef);
                    if (url.getUrl().isPresent()) {
                        String urlString = url.getUrl().get();
                        List<String> ipAddressList = addToSpecificsFromURL(specifics,
                                                urlString,
                                                url.getForeignSource().orElse(def.getForeignSource()),
                                                url.getLocation().orElse(def.getLocationName()),
                                                timeout,
                                                retries);
                        m_urlSpecifics.put(urlString, ipAddressList);
                    }
                }
            });

            return specifics;
        } finally {
            getReadLock().unlock();
        }
    }

