    /**
     * <p>isTimeInSchedule</p>
     *
     * @param cal a {@link java.util.Calendar} object.
     * @param sched a {@link org.opennms.netmgt.config.common.BasicSchedule} object.
     * @return a boolean.
     */
    public static boolean isTimeInSchedule(final Calendar cal, final BasicSchedule sched) {
        if (cal == null) {
            LogUtils.warnf(BasicScheduleUtils.class, "isTimeInOutage: calendar is null");
            return false;
        } else if (sched == null) {
            LogUtils.warnf(BasicScheduleUtils.class, "isTimeInOutage: schedule is null");
            return false;
        }

        LogUtils.debugf(BasicScheduleUtils.class, "isTimeInOutage: checking for time '%s' in schedule '%s'", cal.getTime(), sched.getName());

        Calendar outCalBegin = new GregorianCalendar();
        Calendar outCalEnd = new GregorianCalendar();
        
        long curCalTime = cal.getTimeInMillis();
        // check if day is part of outage
        boolean inOutage = false;
        Enumeration<Time> e = sched.enumerateTime();
        while (e.hasMoreElements() && !inOutage) {
            outCalBegin.setTimeInMillis(curCalTime);
            outCalEnd.setTimeInMillis(curCalTime);
    
            final Time oTime = (Time) e.nextElement();
    
            final String oTimeDay = oTime.getDay();
            final String begins = oTime.getBegins();
            final String ends = oTime.getEnds();
    
            if (oTimeDay != null) {
                // see if outage time was specified as sunday/monday..
                final Integer dayInMap = getDayOfWeekIndex(oTimeDay);
                if (dayInMap != null) {
                    // check if value specified matches current date
                    if (cal.get(Calendar.DAY_OF_WEEK) == dayInMap.intValue()) {
                        inOutage = true;
                    }
    
                    outCalBegin.set(Calendar.DAY_OF_WEEK, dayInMap.intValue());
                    outCalEnd.set(Calendar.DAY_OF_WEEK, dayInMap.intValue());
                }
                // else see if outage time was specified as day of month
                else {
                    int intOTimeDay = Integer.valueOf(oTimeDay);
    
                    if (cal.get(Calendar.DAY_OF_MONTH) == intOTimeDay) {
                        inOutage = true;
                    }
    
                    outCalBegin.set(Calendar.DAY_OF_MONTH, intOTimeDay);
                    outCalEnd.set(Calendar.DAY_OF_MONTH, intOTimeDay);
                }
            }
    
            // if time of day was specified and did not match, continue
            if (oTimeDay != null && !inOutage) continue;
    
            // set time in out calendars
            setOutCalTime(outCalBegin, begins);
            setOutCalTime(outCalEnd, ends);
    
            // check if calendar passed is in the out cal range
            LogUtils.debugf(BasicScheduleUtils.class, "isTimeInOutage: checking begin/end time...\n current: %s\n begin: %s\n end: %s", cal.getTime(), outCalBegin.getTime(), outCalEnd.getTime());
    
            // round these to the surrounding seconds since we can only specify
            // this to seconds
            // accuracy in the config file
            final long outCalBeginTime = outCalBegin.getTimeInMillis() / 1000 * 1000;
            final long outCalEndTime = (outCalEnd.getTimeInMillis() / 1000 + 1) * 1000;
    
            if (curCalTime >= outCalBeginTime && curCalTime < outCalEndTime) {
                inOutage = true;
            }
            else {
                inOutage = false;
            }
        }
        return inOutage;
    }

