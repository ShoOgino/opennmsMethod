    /**
     * <p>getSpecifics</p>
     *
     * @return a {@link java.util.List} object.
     */
    @Override
    public List<IPPollAddress> getSpecifics() {
        final List<IPPollAddress> specifics = new LinkedList<IPPollAddress>();

        getReadLock().lock();
        try {
            Long defaultTimeout = null;
            Integer defaultRetries = null;
            if (getConfiguration().getTimeout() != null) defaultTimeout = getConfiguration().getTimeout();
            if (getConfiguration().getRetries() != null) defaultRetries = getConfiguration().getRetries();

            for (final Specific s : getConfiguration().getSpecifics()) {

                long timeout = DEFAULT_TIMEOUT;
                if (s.getTimeout() != null) {
                    timeout = s.getTimeout();
                } else if (defaultTimeout != null) {
                    timeout = defaultTimeout;
                }

                int retries = DEFAULT_RETRIES;
                if (s.getRetries() != null) {
                    retries = s.getRetries();
                } else if (defaultRetries != null) {
                    retries = defaultRetries;
                }

                final String address = s.getAddress();

                try {
                    specifics.add(new IPPollAddress(s.getForeignSource(), s.getLocation(), InetAddressUtils.addr(address), timeout, retries));
                } catch (final IllegalArgumentException e) {
                    LOG.warn("Failed to convert address {}", address, e);
                }
            }
            return specifics;
        } finally {
            getReadLock().unlock();
        }
    }

