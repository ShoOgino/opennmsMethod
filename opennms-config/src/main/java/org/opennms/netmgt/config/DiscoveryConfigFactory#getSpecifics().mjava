    /**
     * <p>getSpecifics</p>
     *
     * @return a {@link java.util.List} object.
     */
    @Override
    public List<IPPollAddress> getSpecifics() {
        final List<IPPollAddress> specifics = new LinkedList<IPPollAddress>();

        getReadLock().lock();
        try {
            Long defaultTimeout = getConfiguration().getTimeout().orElse(DEFAULT_TIMEOUT);
            Integer defaultRetries = getConfiguration().getRetries().orElse(DEFAULT_RETRIES);
            for (final Specific s : getConfiguration().getSpecifics()) {

                long timeout = s.getTimeout().orElse(defaultTimeout);
                int retries = s.getRetries().orElse(defaultRetries);

                final String address = s.getAddress();

                try {
                    specifics.add(new IPPollAddress(s.getForeignSource().orElse(null), s.getLocation().orElse(null), InetAddressUtils.addr(address), timeout, retries));
                } catch (final IllegalArgumentException e) {
                    LOG.warn("Failed to convert address {}", address, e);
                }
            }

            // Map specifics from definitions to IPPollAddress and add them to specifics list.
            getConfiguration().getDefinitions().forEach(def -> {

                long timeoutFromDef = def.getTimeout().orElse(defaultTimeout);
                int retriesFromDef = def.getRetries().orElse(defaultRetries);

                for (final Specific s : def.getSpecifics()) {

                    long timeout = s.getTimeout().orElse(timeoutFromDef);
                    int retries = s.getRetries().orElse(retriesFromDef);

                    final String address = s.getAddress();

                    try {
                        specifics.add(new IPPollAddress(s.getForeignSource().orElse(def.getForeignSource()),
                                                        s.getLocation().orElse(def.getLocationName()),
                                                        InetAddressUtils.addr(address),
                                                        timeout,
                                                        retries));
                    } catch (final IllegalArgumentException e) {
                        LOG.warn("Definition: Specific: Failed to convert address {}", address, e);
                    }
                }

            });

            return specifics;
        } finally {
            getReadLock().unlock();
        }
    }

