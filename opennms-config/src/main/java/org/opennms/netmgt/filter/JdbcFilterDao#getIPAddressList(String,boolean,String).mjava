    private List<InetAddress> getIPAddressList(final String rule, final boolean filterDeleted, final String address) throws FilterParseException {
    	final List<InetAddress> resultList = new ArrayList<>();
    	final boolean filterByAddress = address != null && address.length() > 0;
        String sqlString;

        LOG.debug("Filter.getIPAddressList({})", rule);

        // get the database connection
        Connection conn = null;
        final DBUtils d = new DBUtils(getClass());
        try (final Timer.Context ctx = getIpListTimer.time()) {
            // parse the rule and get the sql select statement
            sqlString = getSQLStatement(rule);

            if (filterDeleted) {
            	if (!sqlString.contains("isManaged")) {
            		sqlString += " AND (ipInterface.isManaged != 'D' or ipInterface.isManaged IS NULL)";
            	}
            }
            if (filterByAddress) {
                sqlString += " AND ipInterface.ipaddr = ?";
            }

            conn = getDataSource().getConnection();
            d.watch(conn);

            LOG.debug("Filter.getIPAddressList({}): SQL statement: {}", rule, sqlString);

            // execute query and return the list of ip addresses
            final ResultSet rset;
            if (filterByAddress) {
                final PreparedStatement preparedStatement = conn.prepareStatement(sqlString);
                preparedStatement.setString(1, address);
                d.watch(preparedStatement);
                rset = preparedStatement.executeQuery();
            } else {
                final Statement stmt = conn.createStatement();
                d.watch(stmt);
                rset = stmt.executeQuery(sqlString);
            }
            d.watch(rset);

            // fill up the array list if the result set has values
            if (rset != null) {
                // Iterate through the result and build the array list
                while (rset.next()) {
                	resultList.add(addr(rset.getString(1)));
                }
            }

        } catch (final FilterParseException e) {
            LOG.warn("Filter Parse Exception occurred getting IP List.", e);
            throw new FilterParseException("Filter Parse Exception occurred getting IP List: " + e.getLocalizedMessage(), e);
        } catch (final SQLException e) {
            LOG.warn("SQL Exception occurred getting IP List.", e);
            throw new FilterParseException("SQL Exception occurred getting IP List: " + e.getLocalizedMessage(), e);
        } catch (final Throwable e) {
            LOG.error("Exception getting database connection.", e);
            throw new UndeclaredThrowableException(e);
        } finally {
            d.cleanUp();
        }

        LOG.debug("Filter.getIPAddressList({}): resultList = {}", rule, resultList);
        return resultList;
    }

