    /** {@inheritDoc} */
    @Override
    public boolean isRuleMatching(final String rule) throws FilterParseException {
        boolean matches = false;
        String sqlString;

        LOG.debug("Filter.isRuleMatching({})", rule);

        final DBUtils d = new DBUtils(getClass());

        // get the database connection
        Connection conn = null;
        try {
            conn = getDataSource().getConnection();
            d.watch(conn);

            // parse the rule and get the sql select statement
            sqlString = getSQLStatement(rule) + " LIMIT 1";
            LOG.debug("Filter.isRuleMatching({}): SQL statement: {}", rule, sqlString);

            // execute query and return the list of ip addresses
            final Statement stmt = conn.createStatement();
            d.watch(stmt);
            final ResultSet rset = stmt.executeQuery(sqlString);
            d.watch(rset);

            // we only want to check if zero or one rows were fetched, so just
            // return the output from rset.next()
            matches = rset.next();
            LOG.debug("isRuleMatching: rule \"{}\" {} an entry in the database", rule, matches? "matches" : "does not match");
        } catch (final FilterParseException e) {
            LOG.warn("Filter Parse Exception occurred testing rule \"{}\" for matching results.", rule, e);
            throw new FilterParseException("Filter Parse Exception occurred testing rule \"" + rule + "\" for matching results: " + e.getLocalizedMessage(), e);
        } catch (final SQLException e) {
            LOG.warn("SQL Exception occurred testing rule \"{}\" for matching results.", e);
            throw new FilterParseException("SQL Exception occurred testing rule \""+ rule + "\" for matching results: " + e.getLocalizedMessage(), e);
        } catch (final Throwable e) {
            LOG.error("Exception getting database connection.", e);
            throw new UndeclaredThrowableException(e);
        } finally {
            d.cleanUp();
        }

        return matches;
    }

