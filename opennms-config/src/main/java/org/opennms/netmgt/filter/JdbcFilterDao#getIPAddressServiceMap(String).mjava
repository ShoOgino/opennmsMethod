    /** {@inheritDoc} */
    @Override
    public Map<InetAddress, Set<String>> getIPAddressServiceMap(final String rule) throws FilterParseException {
        final Map<InetAddress, Set<String>> ipServices = new TreeMap<InetAddress, Set<String>>(new InetAddressComparator());
        String sqlString;

        LOG.debug("Filter.getIPAddressServiceMap({})", rule);

        // get the database connection
        Connection conn = null;
        final DBUtils d = new DBUtils(getClass());
        try {
            conn = getDataSource().getConnection();
            d.watch(conn);

            // parse the rule and get the sql select statement
            sqlString = getIPServiceMappingStatement(rule);
            LOG.debug("Filter.getIPAddressServiceMap({}): SQL statement: {}", rule, sqlString);

            // execute query
            final Statement stmt = conn.createStatement();
            d.watch(stmt);
            final ResultSet rset = stmt.executeQuery(sqlString);
            d.watch(rset);

            // fill up the array list if the result set has values
            if (rset != null) {
                // Iterate through the result and build the array list
                while (rset.next()) {
                    final InetAddress ipaddr = addr(rset.getString(1));

                    if (ipaddr != null) {
                        if (!ipServices.containsKey(ipaddr)) {
                            ipServices.put(ipaddr, new TreeSet<String>());
                        }

                        ipServices.get(ipaddr).add(rset.getString(2));
                    }
                }
            }

        } catch (final FilterParseException e) {
        	LOG.warn("Filter Parse Exception occurred getting IP Service List.", e);
            throw new FilterParseException("Filter Parse Exception occurred getting IP Service List: " + e.getLocalizedMessage(), e);
        } catch (final SQLException e) {
            LOG.warn("SQL Exception occurred getting IP Service List.", e);
            throw new FilterParseException("SQL Exception occurred getting IP Service List: " + e.getLocalizedMessage(), e);
        } catch (final RuntimeException e) {
            LOG.error("Unexpected exception getting database connection.", e);
            throw e;
        } catch (final Error e) {
            LOG.error("Unexpected exception getting database connection.", e);
            throw e;
        } finally {
            d.cleanUp();
        }

        return ipServices;
    }

