    /** {@inheritDoc} */
    @Override
    protected void onInit() {
        final Properties p = System.getProperties();

        final File homeDir = new File(p.getProperty("opennms.home"));
        final File webappsDir = new File(homeDir, "jetty-webapps");

        m_server = new Server();
        final Connector connector = new SelectChannelConnector();
        connector.setStatsOn(true);
        final Integer port = Integer.getInteger("org.opennms.netmgt.jetty.port", m_port);
        connector.setPort(port);

        final String host = System.getProperty("org.opennms.netmgt.jetty.host");
        if (host != null) {
            connector.setHost(host);
        }

        final Integer requestHeaderSize = Integer.getInteger("org.opennms.netmgt.jetty.requestHeaderSize");
        if(requestHeaderSize != null) {
            connector.setRequestHeaderSize(requestHeaderSize);
        }

        m_server.addConnector(connector);

        final Integer ajp_port = Integer.getInteger("org.opennms.netmgt.jetty.ajp-port");
        if (ajp_port != null) {
            final Ajp13SocketConnector ajpConnector = new Ajp13SocketConnector();
            ajpConnector.setStatsOn(true);
            ajpConnector.setPort(ajp_port);
            // Apache AJP connector freaks out with anything larger
            ajpConnector.setRequestHeaderSize(8096);
            m_server.addConnector(ajpConnector);
        }

        final Integer https_port = Integer.getInteger("org.opennms.netmgt.jetty.https-port");
        if (https_port != null) {
            final String keyStorePath = System.getProperty("org.opennms.netmgt.jetty.https-keystore", homeDir+File.separator+"etc"+File.separator+"examples"+File.separator+"jetty.keystore");
            final String keyStorePassword = System.getProperty("org.opennms.netmgt.jetty.https-keystorepassword", "changeit");
            final String keyManagerPassword = System.getProperty("org.opennms.netmgt.jetty.https-keypassword", "changeit");
            final String certificateAlias = System.getProperty("org.opennms.netmgt.jetty.https-cert-alias", null);

            final SslContextFactory contextFactory = new SslContextFactory(keyStorePath);
            contextFactory.setKeyStorePassword(keyStorePassword);
            contextFactory.setKeyManagerPassword(keyManagerPassword);
            if (certificateAlias != null && !"".equals(certificateAlias.trim())) {
                contextFactory.setCertAlias(certificateAlias);
            }

            excludeCipherSuites(contextFactory, https_port);

            final SslSocketConnector sslConnector = new SslSocketConnector(contextFactory);
            sslConnector.setStatsOn(true);
            sslConnector.setPort(https_port);

            final String httpsHost = System.getProperty("org.opennms.netmgt.jetty.https-host");
            if (httpsHost != null) {
                sslConnector.setHost(httpsHost);
            }

            m_server.addConnector(sslConnector);
        }

        final HandlerCollection handlers = new HandlerCollection();
        
        boolean enableRequestLogging = Boolean.getBoolean("org.opennms.netmgt.jetty.enableRequestLogging");
        if (enableRequestLogging) {
            
            File logsDir = new File(homeDir, "logs");
            String logFileTemplate = new File(logsDir, "jetty-yyyy_mm_dd.request.log").getAbsolutePath();
            
            RequestLogHandler requestLogHandler = new RequestLogHandler();
            
            NCSARequestLog requestLog = new NCSARequestLog(logFileTemplate);
            requestLogHandler.setRequestLog(requestLog);
            
            handlers.addHandler(requestLogHandler);
        }

        if (webappsDir.exists()) {
            File rootDir = null;
            for (final File file: webappsDir.listFiles()) {
                if (file.isDirectory()) {
                    final String contextPath;
                    if ("ROOT".equals(file.getName())) {
                        // Defer this to last to avoid nested context order problems
                        rootDir = file;
                        continue;
                    } else {
                        contextPath = "/" + file.getName();
                    }
                    addContext(handlers, file, contextPath);
                }
            }
            if (rootDir != null) {
                // If we deferred a ROOT context, handle that now
                addContext(handlers, rootDir, "/");
            }
        }

        m_server.setHandler(handlers);
        m_server.setStopAtShutdown(true);
    }

