    @Override
    public boolean login() throws LoginException {
        final Callback[] callbacks = new Callback[2];

        callbacks[0] = new NameCallback("Username: ");
        callbacks[1] = new PasswordCallback("Password: ", false);
        try {
            callbackHandler.handle(callbacks);
        } catch (final IOException ioe) {
            throw new LoginException(ioe.getMessage());
        } catch (final UnsupportedCallbackException uce) {
            throw new LoginException(uce.getMessage() + " not available to obtain information from user.");
        }

        user = ((NameCallback) callbacks[0]).getName();
        if (user == null) {
            throw new LoginException("Username can not be null.");
        }

        // password callback get value
        if (((PasswordCallback) callbacks[1]).getPassword() == null) {
            throw new LoginException("Password can not be null.");
        }
        final String password = new String(((PasswordCallback) callbacks[1]).getPassword());

        final User configUser;
        final SpringSecurityUser onmsUser;
        try {
            configUser = getUserConfig().getUser(user);
            onmsUser = getSpringSecurityUserDao().getByUsername(user);
        } catch (final Exception e) {
            final String message = "Failed to retrieve user " + user + " from OpenNMS UserConfig.";
            LOG.debug(message, e);
            throw new LoginException(message);
        }

        if (configUser == null) {
            throw new FailedLoginException("User  " + user + " does not exist.");
        }

        if (!getUserConfig().comparePasswords(user, password)) {
            throw new FailedLoginException("Login failed: passwords did not match.");
        };

        boolean allowed = false;
        principals = new HashSet<Principal>();
        for (final GrantedAuthority auth : onmsUser.getAuthorities()) {
            // not sure if karaf is OK with ROLE_* or wants lower-case *
            final String role = auth.getAuthority().toLowerCase().replaceFirst("^role_", "");
            if ("admin".equals(role)) {
                allowed = true;
            }
            principals.add(new RolePrincipal(role));
            principals.add(new RolePrincipal(auth.getAuthority()));
        }

        if (!allowed) {
            throw new LoginException("User " + user + " is not an administrator!  OSGi console access is forbidden.");
        }

        if (debug) {
            LOG.debug("Successfully logged in {}.", user);
        }
        return true;
    }

