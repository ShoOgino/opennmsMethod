    @Test
    public void canGenerateFeaturesBootList() throws IOException {
        // Create etc/featuresBoot.d
        File featuresBootDotD = tempFolder.newFolder("etc", "featuresBoot.d");
        featuresBootDotD.mkdirs();

        // Add a sub-directory, which should be ignored
        assertTrue("Failed to create subdirectory.", new File(featuresBootDotD, "some-subdirectory").mkdir());

        // Add a file that starts with '.' in the directory, it's contents should be ignored
        Files.write("should-not-be-installed",
                new File(featuresBootDotD, ".ignored.boot"), StandardCharsets.UTF_8);

        // Add a file with features and comments
        Files.write("#this is a comment\n" +
                "  #here's another one that starts with some whitespace\n" +
                "      \t\n" +
                "\t#that was a line that only contained whitespace\n" +
                "feature-1\n" +
                "feature-2/18.0.0\n" +
                "feature-3", new File(featuresBootDotD, "core.boot"), StandardCharsets.UTF_8);

        // Add another file with a name that should be sorted after the previous file
        Files.write("feature-4", new File(featuresBootDotD, "features.boot"), StandardCharsets.UTF_8);

        // Wait for a kar
        Files.write("#plugins!\n" +
                "opennms-oce-plugin wait-for-kar=opennms-oce-plugin", new File(featuresBootDotD, "kar-plugin.boot"), StandardCharsets.UTF_8);

        // Read and verify
        Feature feature1 = Feature.builder().withName("feature-1").build();
        Feature feature2 = Feature.builder().withName("feature-2").withVersion("18.0.0").build();
        Feature feature3 = Feature.builder().withName("feature-3").build();
        Feature feature4 = Feature.builder().withName("feature-4").build();
        Feature ocePluginFeature = Feature.builder().withName("opennms-oce-plugin").withKarDependency("opennms-oce-plugin").build();

        assertEquals(Lists.newArrayList(feature1,
                feature2,
                feature3,
                feature4,
                ocePluginFeature), karafExtender.getFeaturesBoot());
        
        // Now add another file that disables features-1 and feature-2 above
        Files.write("!feature-1\n" +
                "!feature-2/18.0.0\n", new File(featuresBootDotD, "core2.boot"), StandardCharsets.UTF_8);

        // Read and filter
        List<Feature> features = karafExtender.getFeaturesBoot();
        karafExtender.filterFeatures(features);

        // Verify
        assertEquals(Lists.newArrayList(
                feature3,
                feature4,
                ocePluginFeature),
                features);
    }

