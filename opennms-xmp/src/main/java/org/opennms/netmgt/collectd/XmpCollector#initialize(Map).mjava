    /**
     * {@inheritDoc}
     *
     * initialize our XmpCollector with global parameters *
     */
    public void initialize(Map parameters)
    {
        // parameters come from collectd-configuration.xml 
        // and they are the service parameters specified in xml
        // with keyname and value
        // parameter key=collection value=default

        // initialize our data collection factory

        log().debug("initialize(params) called");

        try {
            XmpCollectionFactory.init();
        } catch (Exception e) {
            log().error("initialize: XmpCollectionFactory failed to initialize");
            throw new UndeclaredThrowableException(e);
        }
        
        try {
            XmpPeerFactory.init();
        } catch (Exception e) {
            log().error("initialize: XmpPeerFactory failed to initialize");
            throw new UndeclaredThrowableException(e);
        }

        // initialize authenUser, port, timeout, other parameters
        // want a xmp-config.xml for port, authenUser, timeout, etc.

        try {
            XmpConfigFactory.init();
        } catch (Exception e) {
            log().error("initialize: config factory failed to initialize");
            throw new UndeclaredThrowableException(e);
        }

        // initialize an RRD repository with various parameters 
        // /opt/opennms/share/rrd/snmp/

        File f = new File(XmpCollectionFactory.getInstance().getRrdPath());
        if (!f.isDirectory()) {
            if (!f.mkdirs()) {
                throw new RuntimeException("Unable to create RRD file " + "repository.  Path doesn't already exist and could not make directory: " + 
                                           XmpCollectionFactory.getInstance().getRrdPath());
            }
        }

        // get our top-level object for our protocol config file,
        // xmp-config.xml, already parsed and ready to examine
        XmpConfig protoConfig = XmpConfigFactory.getInstance().getXmpConfig();

        if (protoConfig.hasPort())
            xmpPort = protoConfig.getPort();
        if (protoConfig.hasTimeout())
            timeout = protoConfig.getTimeout();

        // authenUser is optional; if it is present, it will
        // be non-null
        if (protoConfig.getAuthenUser() != null)
            authenUser = protoConfig.getAuthenUser();

        log().debug("initialize: authenUser '"+authenUser+"' port "+xmpPort);
        log().debug("initialize: keystore found? "+sockopts.getKeystoreFound());

        return;

    } /* initialize() */

