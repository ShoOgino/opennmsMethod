    public synchronized void sendNow(final Event event, boolean synchronous) {
        // Expand the event parms
        if (m_expander != null) {
            m_expander.expandEvent(event);
        }
        m_pendingEvents++;
        LOG.debug("StartEvent processing ({} remaining)", m_pendingEvents);
        LOG.debug("Received: {}", new EventWrapper(event));
        m_anticipator.eventReceived(event);

        final Runnable r = new Runnable() {
            @Override
            public void run() {
                try {
                    // Allows external classes to alter the timing/order of events
                    if (m_sendNowHook != null) {
                        m_sendNowHook.beforeBroadcast(event);
                    }

                    m_eventWriter.writeEvent(event);
                    broadcastNow(event);
                    m_anticipator.eventProcessed(event);
                } finally {
                    synchronized(MockEventIpcManager.this) {
                        m_pendingEvents--;
                        LOG.debug("Finished processing event ({} remaining)", m_pendingEvents);
                        MockEventIpcManager.this.notifyAll();
                    }

                    // Allows external classes to alter the timing/order of events
                    if (m_sendNowHook != null) {
                        m_sendNowHook.afterBroadcast(event);
                    }
                }
            }
        };
        
        if (isSynchronous()) {
            r.run();
        } else {
            getScheduler().schedule(r, m_eventDelay, TimeUnit.MILLISECONDS);
        }
    }

