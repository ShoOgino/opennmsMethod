    private List<Path> getMatches(File expectedFileWithPrefix) {
        List<Path> filteredMatches = new LinkedList<Path>();

        // Split the filename into its parent folder and the requested prefix
        String prefix = expectedFileWithPrefix.getName();
        File parent = expectedFileWithPrefix.getParentFile();

        // Find all files in the parent folder that match the prefix
        List<Path> matches;
        try {
            matches = Files.list(parent.toPath())
                    .filter(p -> p.getFileName().toString().startsWith(prefix))
                    .collect(Collectors.toList());
        } catch (IOException e) {
            return filteredMatches;
        }

        // Grab the list of excluded sufixes for this particular expectation
        List<String> suffixesToExclude = m_suffixesToExclude.get(expectedFileWithPrefix);
        if (suffixesToExclude == null) {
            suffixesToExclude = new ArrayList<String>(0);
        }

        // Filter the list of matches
        for (Path match : matches) {
            boolean shouldAdd = true;
            for (String suffix : suffixesToExclude) {
                if (match.getFileName().toString().endsWith(suffix)) {
                    shouldAdd = false;
                    break;
                }
            }

            if (shouldAdd) {
                filteredMatches.add(match);
            }
        }

        return filteredMatches;
    }

