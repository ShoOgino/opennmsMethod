    /**
     * <p>performEdit</p>
     *
     * @param applicationIdString a {@link java.lang.String} object.
     * @param editAction a {@link java.lang.String} object.
     * @param toAdd an array of {@link java.lang.String} objects.
     * @param toDelete an array of {@link java.lang.String} objects.
     */
    @Override
    public void performEditServices(String applicationIdString, String editAction, String[] toAdd, String[] toDelete) {
        if (applicationIdString == null) {
            throw new IllegalArgumentException("applicationIdString cannot be null");
        }
        if (editAction == null) {
            throw new IllegalArgumentException("editAction cannot be null");
        }
        
        OnmsApplication application = findApplication(applicationIdString); 
       
        if (editAction.contains("Add")) { // @i18n
            if (toAdd == null || toAdd.length == 0) {
                return;
            }
           
            for (String idString : toAdd) {
                Integer id;
                try {
                    id = WebSecurityUtils.safeParseInt(idString);
                } catch (NumberFormatException e) {
                    throw new IllegalArgumentException("toAdd element '"
                                                       + idString
                                                       + "' is not an integer");
                }
                OnmsMonitoredService service = m_monitoredServiceDao.get(id);
                if (service == null) {
                    throw new IllegalArgumentException("monitored service with "
                                                       + "id of " + id
                                                       + "could not be found");
                }
                if (service.getApplications().contains(application)) {
                    throw new IllegalArgumentException("monitored service with "
                                                       + "id of " + id
                                                       + "is already a member of "
                                                       + "application "
                                                       + application.getName());
                }
                
                service.addApplication(application);
                m_monitoredServiceDao.save(service);
                sendEvent(application, EventConstants.APPLICATION_CHANGED_EVENT_UEI);
            }
       } else if (editAction.contains("Remove")) { // @i18n
            if (toDelete == null || toDelete.length == 0) {
                return;
            }
            
            for (String idString : toDelete) {
                Integer id;
                try {
                    id = WebSecurityUtils.safeParseInt(idString);
                } catch (NumberFormatException e) {
                    throw new IllegalArgumentException("toDelete element '"
                                                       + idString
                                                       + "' is not an integer");
                }
                OnmsMonitoredService service = m_monitoredServiceDao.get(id);
                if (service == null) {
                    throw new IllegalArgumentException("monitored service with "
                                                       + "id of " + id
                                                       + "could not be found");
                }
                if (!service.getApplications().contains(application)) {
                    throw new IllegalArgumentException("monitored service with "
                                                       + "id of " + id
                                                       + "is not a member of "
                                                       + "application "
                                                       + application.getName());
                }
                
                service.removeApplication(application);
                m_monitoredServiceDao.save(service);
            }

            m_applicationDao.save(application);
            sendEvent(application, EventConstants.APPLICATION_CHANGED_EVENT_UEI);
       } else {
           throw new IllegalArgumentException("editAction of '"
                                              + editAction
                                              + "' is not allowed");
       }
    }

