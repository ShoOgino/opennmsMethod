	/**
	 * <p>
	 * Constructor for SnmpInfo.
	 * </p>
	 * 
	 * @param config
	 *            a {@link org.opennms.netmgt.snmp.SnmpAgentConfig} object.
	 */
	public SnmpInfo(SnmpAgentConfig config) {
		if (config == null) return;

		m_version = config.getVersionAsString();
		if (config.getPort() >= 1) m_port = config.getPort();
		if (config.getTimeout() >= 1) m_timeout = config.getTimeout();
		if (config.getRetries() >= 1) m_retries = config.getRetries();
		if (config.getMaxRepetitions() >= 1) m_maxRepetitions = config.getMaxRepetitions();
		if (config.getMaxVarsPerPdu() >= 1) m_maxVarsPerPdu = config.getMaxVarsPerPdu();
		if (config.getMaxRequestSize() >= 1) m_maxRequestSize = Integer.valueOf(config.getMaxRequestSize());
		// handle a possible proxy host setting
		if (config.getProxyFor() != null) { // switch proxy and address
			m_proxyHost = InetAddressUtils.str(config.getAddress());
		} 
		
		// only set these properties if snmp version is v3
		if (config.isVersion3()) {
			m_securityName = config.getSecurityName();
			m_securityLevel = Integer.valueOf(config.getSecurityLevel());
			m_authPassPhrase = config.getAuthPassPhrase();
			m_authProtocol = config.getAuthProtocol();
			m_privPassPhrase = config.getPrivPassPhrase();
			m_privProtocol = config.getPrivProtocol();
			m_engineId = config.getEngineId();
			m_contextEngineId = config.getContextEngineId();
			m_contextName = config.getContextName();
			m_enterpriseId = config.getEnterpriseId();
		} else { // can only be set if snmp version is not v3
			m_readCommunity = config.getReadCommunity();
			m_writeCommunity = config.getWriteCommunity();
		}
	}

