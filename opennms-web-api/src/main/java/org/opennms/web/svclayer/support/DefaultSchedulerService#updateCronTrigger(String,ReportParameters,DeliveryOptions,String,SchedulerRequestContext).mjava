    @Override
    @Transactional
    public String updateCronTrigger(String cronTrigger, ReportParameters criteria, DeliveryOptions deliveryOptions, String cronExpression, SchedulerRequestContext context) {
        final TriggerKey triggerKey = new TriggerKey(cronTrigger, m_triggerGroup);
        try {
            final Trigger trigger = m_scheduler.getTrigger(triggerKey);
            trigger.getJobDataMap().put("criteria", criteria);
            trigger.getJobDataMap().put("deliveryOptions", deliveryOptions);
            trigger.getJobDataMap().put("cronExpression", cronExpression);
            ((CronTriggerImpl) trigger).setCronExpression(cronExpression);
            m_scheduler.rescheduleJob(triggerKey, trigger);
        } catch(SchedulerException e) {
            LOG.error(SCHEDULER_ERROR, e);
            context.addMessage(new SchedulerMessage(SchedulerMessageSeverity.ERROR, SCHEDULER_ERROR));
            return ERROR;
        } catch (ParseException e) {
            LOG.error(TRIGGER_PARSE_ERROR, e);
            context.addMessage(new SchedulerMessage(SchedulerMessageSeverity.ERROR, TRIGGER_PARSE_ERROR));
            context.addMessage(new SchedulerMessage(SchedulerMessageSeverity.ERROR, e.getMessage()));
            return ERROR;
        }
        return SUCCESS;
    }

