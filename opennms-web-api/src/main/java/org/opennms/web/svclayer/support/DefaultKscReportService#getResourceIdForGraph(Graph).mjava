    private static ResourceId getResourceIdForGraph(Graph graph)  {
        Assert.notNull(graph, "graph argument cannot be null");

        ResourceId resourceId = null;
        if (graph.getResourceId().isPresent()) {
            // Legacy code has encoded resourceId, decode always as there is no easy to way to determine if it is encoded string.
            // If resourceId is not an encoded one, decode will always yield the original.
            // See issue NMS-10309
            try {
                String decodedResourceId = URLDecoder.decode(graph.getResourceId().get(), StandardCharsets.UTF_8.name());
                resourceId = ResourceId.fromString(decodedResourceId);
            } catch (UnsupportedEncodingException e) {
                LOG.error("Error while decoding resourceId", e);
            }
        } else {
            String parentResourceTypeName;
            String parentResourceName;
            String resourceTypeName;
            String resourceName;

            if (graph.getNodeId().isPresent() && !graph.getNodeId().get().equals("null")) {
                parentResourceTypeName = "node";
                parentResourceName = graph.getNodeId().get();
            } else if (graph.getNodeSource().isPresent() && !graph.getNodeSource().get().equals("null")) {
                parentResourceTypeName = "nodeSource";
                parentResourceName = graph.getNodeSource().get();
            } else if (graph.getDomain().isPresent() && !graph.getDomain().get().equals("null")) {
                parentResourceTypeName = "domain";
                parentResourceName = graph.getDomain().get();
            } else {
                throw new IllegalArgumentException("Graph does not have a resourceId, nodeId, or domain.");
            }

            String intf = graph.getInterfaceId().orElse(null);
            if (intf == null || "".equals(intf)) {
                resourceTypeName = "nodeSnmp";
                resourceName = "";
            } else {
                resourceTypeName = "interfaceSnmp";
                resourceName = intf;
            }

            resourceId = ResourceId.get(parentResourceTypeName, parentResourceName).resolve(resourceTypeName, resourceName);
        }

        return resourceId;
    }

