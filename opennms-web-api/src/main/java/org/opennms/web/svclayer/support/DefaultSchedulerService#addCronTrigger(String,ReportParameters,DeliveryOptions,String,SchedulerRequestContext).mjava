    /** {@inheritDoc} */
    @Override
    public String addCronTrigger(String id, ReportParameters criteria,
                                 DeliveryOptions deliveryOptions,
                                 String cronExpression, SchedulerRequestContext context) {

        CronTriggerImpl cronTrigger = null;
        
        try {            
            if (m_reportWrapperService.validate(criteria,id) == false ) {
                LOG.error(PARAMETER_ERROR);
                context.addMessage(new SchedulerMessage(SchedulerMessageSeverity.ERROR, PARAMETER_ERROR));
                return ERROR;
            } else {
                try {
                    cronTrigger = new CronTriggerImpl();
                    cronTrigger.setGroup(m_triggerGroup);
                    cronTrigger.setName(deliveryOptions.getInstanceId());
                    cronTrigger.setJobName(m_jobDetail.getKey().getName());
                    cronTrigger.setCronExpression(cronExpression);
                    // cronTrigger = new CronTrigger(triggerName, m_triggerGroup,
                    // cronExpression);
                } catch (ParseException e) {
                    LOG.error(TRIGGER_PARSE_ERROR, e);
                    context.addMessage(new SchedulerMessage(SchedulerMessageSeverity.ERROR, TRIGGER_PARSE_ERROR));
                    context.addMessage(new SchedulerMessage(SchedulerMessageSeverity.ERROR, e.getMessage()));
                    return ERROR;
                }

                cronTrigger.setJobName(m_jobDetail.getKey().getName());
                cronTrigger.getJobDataMap().put("criteria", criteria);
                cronTrigger.getJobDataMap().put("reportId", id);
                cronTrigger.getJobDataMap().put("mode", ReportMode.SCHEDULED);
                cronTrigger.getJobDataMap().put("deliveryOptions", deliveryOptions);
                try {
                    m_scheduler.scheduleJob(cronTrigger);
                } catch (SchedulerException e) {
                    LOG.error(SCHEDULER_ERROR, e);
                    context.addMessage(new SchedulerMessage(SchedulerMessageSeverity.ERROR, SCHEDULER_ERROR));
                    return ERROR;
                }

                return SUCCESS;
            }
        } catch (ReportServiceLocatorException e) {
            LOG.error(REPORTID_ERROR);
            context.addMessage(new SchedulerMessage(SchedulerMessageSeverity.ERROR, REPORTID_ERROR));
            return ERROR;
        }

        
    }

