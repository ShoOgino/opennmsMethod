    /** {@inheritDoc} */
    @Override
    public DistributedStatusHistoryModel createHistoryModel(
            String locationName, String monitorId, String applicationName,
            String timeSpan, String previousLocationName) {
        List<String> errors = new LinkedList<>();
        
        List<OnmsMonitoringLocation> locationDefinitions = m_monitoringLocationDao.findAll();

        List<RelativeTimePeriod> periods = Arrays.asList(RelativeTimePeriod.getDefaultPeriods());

        Collection<OnmsApplication> applications = m_applicationDao.findAll();
        List<OnmsApplication> sortedApplications = new ArrayList<OnmsApplication>(applications);
        Collections.sort(sortedApplications);

        OnmsMonitoringLocation location = new OnmsMonitoringLocation();
        if (locationName == null) {
            if (!locationDefinitions.isEmpty()) {
                location = locationDefinitions.get(0);
            }
        } else {
            location = m_monitoringLocationDao.get(locationName);
            if (location == null) {
                errors.add("Could not find location definition '" + locationName + "'");
                if (!locationDefinitions.isEmpty()) {
                    location = locationDefinitions.get(0);
                }
            }
        }

        OnmsApplication application = new OnmsApplication();
        if (applicationName == null) {
            if (!sortedApplications.isEmpty()) {
                application = sortedApplications.get(0);
            }
        } else {
            application = m_applicationDao.findByName(applicationName);
            if (application == null) {
                errors.add("Could not find application '" + applicationName + "'");
                if (!sortedApplications.isEmpty()) {
                    application = sortedApplications.get(0);
                }
            }
        }

        /*
        Collection<OnmsLocationMonitor> monitors = m_locationSpecificStatusDao.findByLocationDefinition(location);
        List<OnmsLocationMonitor> sortedMonitors = new LinkedList<OnmsLocationMonitor>(monitors);
        Collections.sort(sortedMonitors);

        OnmsLocationMonitor monitor = null;
        if (monitorId != null && !"".equals(monitorId.trim()) && location.getLocationName().equals(previousLocationName)) {
            for (OnmsLocationMonitor m : sortedMonitors) {
                if (m.getId().equals(monitorId)) {
                    monitor = m;
                    break;
                }
            }
        }

        if (monitor == null && !sortedMonitors.isEmpty()) {
            monitor = sortedMonitors.get(0);
        }
        */

        RelativeTimePeriod period = RelativeTimePeriod.getPeriodByIdOrDefault(timeSpan);
        
        /*
         * Initialize the hierarchy under the service so that we don't get
         * a LazyInitializationException later when the JSP page is pulling
         * data out of the model object.
         */
        Collection<OnmsMonitoredService> memberServices = m_monitoredServiceDao.findByApplication(application);
        for (OnmsMonitoredService service : memberServices) {
            m_locationSpecificStatusDao.initialize(service.getIpInterface());
            m_locationSpecificStatusDao.initialize(service.getIpInterface().getNode());
        }

        Collection<OnmsMonitoredService> applicationMemberServices = m_monitoredServiceDao.findByApplication(application);
        if (applicationMemberServices.isEmpty()) {
            errors.add("There are no services in the application '" + applicationName + "'");
        }
        
        DistributedStatusHistoryModel model = new DistributedStatusHistoryModel(locationDefinitions,
                                                 sortedApplications,
                                                 periods,
                                                 location,
                                                 application,
                                                 applicationMemberServices,
                                                 period,
                                                 errors);
        initializeGraphUrls(model);
        return model;
    }

