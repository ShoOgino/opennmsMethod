    private static void addCriteriaForSnmpParm(OnmsCriteria criteria,
            String snmpParm, String snmpParmValue, String snmpParmMatchType) {
        criteria.createAlias("node.ipInterfaces", "ipInterface");
        criteria.add(Restrictions.ne("ipInterface.isManaged", "D"));

        criteria.createAlias("node.snmpInterfaces", "snmpInterface");
        criteria.add(Restrictions.ne("snmpInterface.collect", "D"));
        if(snmpParmMatchType.equals("contains")) {
            criteria.add(Restrictions.ilike("snmpInterface.".concat(snmpParm), snmpParmValue, MatchMode.ANYWHERE));
        } else if(snmpParmMatchType.equals("equals")) {
            final List<String> acceptedParamNames = Lists.newArrayList(
                    "snmpphysaddr", "snmpifindex", "snmpifdescr", "snmpiftype", "snmpifname",
                    "snmpifspeed", "snmpifadminstatus", "snmpifoperstatus", "snmpifalias", "snmpcollect",
                    "snmplastcapsdpoll", "snmppoll", "snmplastsnmppoll");
            final String snmpParameterName = ("snmp" + snmpParm).toLowerCase();
            if (!acceptedParamNames.contains(snmpParameterName)) {
                throw new IllegalArgumentException("Provided parameter '" + snmpParm + "' is not supported");
            }
            snmpParmValue = snmpParmValue.toLowerCase();
            criteria.add(Restrictions.sqlRestriction("{alias}.nodeid in (select nodeid from snmpinterface where snmpcollect != 'D' and " + snmpParameterName + " = ?)", snmpParmValue, new StringType()));
        }
    }

