    @Override
    public void updateCronTrigger(String cronTrigger, ScheduleConfig scheduleConfig) {
        Objects.requireNonNull(cronTrigger);
        Objects.requireNonNull(scheduleConfig);
        validate(scheduleConfig, ReportMode.SCHEDULED, true);

        final TriggerKey triggerKey = new TriggerKey(cronTrigger, m_triggerGroup);
        final ReportParameters parameters = scheduleConfig.getReportParameters();
        final DeliveryOptions deliveryOptions = scheduleConfig.getDeliveryOptions();
        final String cronExpression = scheduleConfig.getCronExpression();
        TimeZone zone = getTimeZone(parameters);
        try {
            final Trigger trigger = m_scheduler.getTrigger(triggerKey);
            trigger.getJobDataMap().put("criteria", parameters);
            trigger.getJobDataMap().put("deliveryOptions", deliveryOptions);
            trigger.getJobDataMap().put("cronExpression", cronExpression);
            trigger.getJobDataMap().put("timeZone", zone.getID());
            ((CronTriggerImpl) trigger).setCronExpression(cronExpression);
            ((CronTriggerImpl) trigger).setTimeZone(zone);
            m_scheduler.rescheduleJob(triggerKey, trigger);
        } catch(SchedulerException e) {
            LOG.error("Could not update cron trigger {}:{}", cronTrigger, e.getMessage(), e);
            throw new org.opennms.web.svclayer.support.SchedulerException("An unexpected error occurred while updating cron trigger " + cronTrigger, e);
        } catch (ParseException e) {
            LOG.error("Provided cron expression '{}' could not be parsed", cronExpression, e);
            throw new org.opennms.web.svclayer.support.InvalidCronExpressionException(e, cronExpression);
        }
    }

