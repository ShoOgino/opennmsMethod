    @Override
    public GraphResults findResults(ResourceId[] resourceIds, String[] reports, String nodeCriteria, long start, long end, String relativeTime) {
        if (reports == null) {
            throw new IllegalArgumentException("reports argument cannot be null");
        }
        if (end < start) {
            throw new IllegalArgumentException("end time cannot be before start time");
        }

        GraphResults graphResults = new GraphResults();
        graphResults.setStart(new Date(start));
        graphResults.setEnd(new Date(end));
        graphResults.setRelativeTime(relativeTime);
        graphResults.setRelativeTimePeriods(m_periods);
        graphResults.setReports(reports);
        graphResults.setNodeCriteria(nodeCriteria);

        HashMap<ResourceId, List<OnmsResource>> resourcesMap = new HashMap<>();
        for (ResourceId resourceId : resourceIds) {
            LOG.debug("findResults: parent, childType, childName = {}, {}, {}", resourceId.parent, resourceId.type, resourceId.name);
            OnmsResource resource = null;
            if (!resourcesMap.containsKey(resourceId.parent)) {
                List<OnmsResource> resourceList = m_resourceDao.getResourceById(resourceId).getChildResources();
                if (resourceList == null) {
                    LOG.warn("findResults: zero child resources found for {}", resourceId.parent);
                } else {
                    resourcesMap.put(resourceId.parent, resourceList);
                    LOG.debug("findResults: add resourceList to map for {}", resourceId.parent);
                }
            }
            for (OnmsResource r : resourcesMap.get(resourceId.parent)) {
                if (resourceId.type.equals(r.getResourceType().getName())
                        && resourceId.name.equals(r.getName())) {
                    resource = r;
                    LOG.debug("findResults: found resource in map{}", r.toString());
                    break;
                }
            }
            try {
                graphResults.addGraphResultSet(createGraphResultSet(resourceId, resource, reports, graphResults));
            } catch (IllegalArgumentException e) {
                LOG.warn(e.getMessage(), e);
            }
        }

        // GraphAll case where all resources are fetched from node.
        if (!Strings.isNullOrEmpty(nodeCriteria)) {
            OnmsNode node = m_nodeDao.get(nodeCriteria);
            if(node != null) {
                OnmsResource nodeResource = m_resourceDao.getResourceForNode(node);
                if(nodeResource != null) {
                    List<OnmsResource> childResources = nodeResource.getChildResources();
                    for (OnmsResource resource : childResources) {
                        try {
                            graphResults.addGraphResultSet(createGraphResultSet(null, resource, reports, graphResults));
                        } catch (IllegalArgumentException e) {
                            LOG.warn(e.getMessage(), e);
                        }
                    }
                }
            }
        }

        graphResults.setGraphTopOffsetWithText(m_rrdDao.getGraphTopOffsetWithText());
        graphResults.setGraphLeftOffset(m_rrdDao.getGraphLeftOffset());
        graphResults.setGraphRightOffset(m_rrdDao.getGraphRightOffset());

        return graphResults;
    }

