    /**
     * <p>subscribeAll</p>
     *
     * @param viewName a {@link java.lang.String} object.
     * @throws java.io.IOException if any.
     * @throws org.exolab.castor.xml.MarshalException if any.
     * @throws org.exolab.castor.xml.ValidationException if any.
     * @throws org.opennms.netmgt.events.api.EventProxyException if any.
     */
    public static void subscribeAll(final String viewName) throws IOException, MarshalException, ValidationException, EventProxyException {
        if (viewName == null) {
            throw new IllegalArgumentException("Cannot take null parameters.");
        }

        try {
            Logging.withPrefix(LOGGING_PREFIX, new Callable<Void>() {
                @Override public Void call() throws Exception {
                    // get the list of categories from the viewsdisplay.xml
                    ViewsDisplayFactory.init();
                    ViewsDisplayFactory factory = ViewsDisplayFactory.getInstance();

                    final View view = factory.getView(viewName);

                    if (view != null) {
                        // create a JMS connection to subscribe
                        final RTCPostSubscriber subscriber = new RTCPostSubscriber();

                        try {
                            for (final Section section : view.getSectionCollection()) {
                                for (final String categoryName : section.getCategoryCollection()) {
                                    subscriber.subscribe(categoryName);
                                    LOG.info("Sent subscription event to RTC for category: {}",  categoryName);
                                }
                            }
                        } finally {
                            // Close the subscription JMS connection.
                            subscriber.close();
                        }
                    }

                    return null;
                }
            });
        } catch (final Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

