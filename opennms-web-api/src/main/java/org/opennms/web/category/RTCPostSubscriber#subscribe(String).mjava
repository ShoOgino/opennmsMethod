    /**
     * <p>subscribe</p>
     *
     * @param categoryName a {@link java.lang.String} object.
     * @return a {@link java.lang.String} object.
     * @throws java.lang.IllegalArgumentException if any.
     * @throws org.opennms.netmgt.events.api.EventProxyException if any.
     */
    protected void subscribe(final String categoryName) throws IllegalArgumentException, EventProxyException {
        String url;
        String username = "rtc";
        String password = "rtc";

        if (categoryName == null) {
        	throw new IllegalArgumentException("categoryName cannot be null");
        }

        final String usernameProperty = Vault.getProperty("opennms.rtc-client.http-post.username");
        if (usernameProperty != null) {
            username = usernameProperty;
        }

        final String passwordProperty = Vault.getProperty("opennms.rtc-client.http-post.password");
        if (passwordProperty != null) {
            password = passwordProperty;
        }

        String baseUrl = Vault.getProperty("opennms.rtc-client.http-post.base-url");
        if (baseUrl == null) {
            baseUrl = "http://localhost:8080/opennms/rtc/post";
        }

        if (baseUrl.endsWith("/")) {
            url = baseUrl + Util.encode(categoryName);
        } else {
            url = baseUrl + "/" + Util.encode(categoryName);
        }

        final String logUrl = url;
        final String logUsername = username; 
        Logging.withPrefix(LOGGING_PREFIX, new Runnable() {
            @Override 
            public void run() {
                LOG.debug("RTCPostSubscriber initialized: url={}, user={}", logUrl, logUsername);
            }
        });
        sendSubscribeEvent(m_proxy, url, username, password, categoryName);
    }

