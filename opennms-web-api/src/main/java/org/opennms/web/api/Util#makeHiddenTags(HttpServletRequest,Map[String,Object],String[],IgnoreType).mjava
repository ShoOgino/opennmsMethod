    /**
     * Creates hidden tags for all the parameters given in the request plus the
     * additions, except for the parmeters listed in the ignore list.
     *
     * @param request
     *            the <code>HttpServletRequest</code> to read the parameters
     *            from
     * @param additions
     *            a map of extra parameters to create hidden tags for
     * @param ignores
     *            the list of parameters not to create a hidden tag for
     * @param ignoreType
     *            whether the ignore list applies to the request parameters,
     *            values in the additions map, or both
     * @return A string containing an HTML &lt;input type="hidden" name="
     *         <code>paramName</code>" value=" <code>paramValue</code>"
     *         /&gt; tag for each parameter not in the ignore list.
     */
    public static String makeHiddenTags(final HttpServletRequest request, final Map<String,Object> additions, final String[] ignores, final IgnoreType ignoreType) {
        if (request == null || additions == null || ignores == null || ignoreType == null) {
            throw new IllegalArgumentException("Cannot take null parameters.");
        }

        final StringBuilder buffer = new StringBuilder();

        final List<String> ignoreList = Arrays.asList(ignores);

        final Enumeration<String> names = request.getParameterNames();

        while (names.hasMoreElements()) {
        	final String name = names.nextElement();
        	final String[] values = request.getParameterValues(name);

            if ((ignoreType == IgnoreType.ADDITIONS_ONLY || !ignoreList.contains(name)) && values != null) {
            	for (final String value : values) {
                    buffer.append("<input type=\"hidden\" name=\"");
                    buffer.append(WebSecurityUtils.sanitizeString(name));
                    buffer.append("\" value=\"");
                    buffer.append(WebSecurityUtils.sanitizeString(value));
                    buffer.append("\" />");
                    buffer.append("\n");
                }
            }
        }

        for (final Entry<String,Object> entry : additions.entrySet()) {
            final String name = entry.getKey();
            // handle both a String value or a String[] value
        	final Object tmp = entry.getValue();
        	final String[] values = (tmp instanceof String[]) ? ((String[]) tmp) : (new String[] { (String) tmp });

            if ((ignoreType == IgnoreType.REQUEST_ONLY || !ignoreList.contains(name)) && values != null) {
            	for (final String value : values) {
                    buffer.append("<input type=\"hidden\" name=\"");
                    buffer.append(WebSecurityUtils.sanitizeString(name));
                    buffer.append("\" value=\"");
                    buffer.append(WebSecurityUtils.sanitizeString(value));
                    buffer.append("\" />");
                    buffer.append("\n");
                }
            }
        }

        return (buffer.toString());
    }

