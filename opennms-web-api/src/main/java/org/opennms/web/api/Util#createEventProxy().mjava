    /**
     * <p>createEventProxy</p>
     * 
     * @deprecated Use dependency injection to wire in an instance of the {@link EventProxy} instead
     *
     * @return a {@link org.opennms.netmgt.events.api.EventProxy} object.
     */
    public static EventProxy createEventProxy() {
        /*
         * Rather than defaulting to localhost all the time, give an option in properties
         */
    	final String vaultHost = Vault.getProperty("opennms.rtc.event.proxy.host");
    	final String vaultPort = Vault.getProperty("opennms.rtc.event.proxy.port");
    	final String vaultTimeout = Vault.getProperty("opennms.rtc.event.proxy.timeout");

    	final String proxyHostName = vaultHost == null ? "127.0.0.1" : vaultHost;
		final String proxyHostPort = vaultPort == null ? Integer.toString(TcpEventProxy.DEFAULT_PORT) : vaultPort;
		final String proxyHostTimeout = vaultTimeout == null ? Integer.toString(TcpEventProxy.DEFAULT_TIMEOUT) : vaultTimeout;

		InetAddress proxyAddr = null;
        EventProxy proxy = null;

        proxyAddr = InetAddressUtils.addr(proxyHostName);

        if (proxyAddr == null) {
            try {
                proxy = new TcpEventProxy();
            } catch (final UnknownHostException e) {
                // XXX Ewwww!  We should just let the first UnknownException bubble up. 
                throw new UndeclaredThrowableException(e);
            }
        } else {
            proxy = new TcpEventProxy(new InetSocketAddress(proxyAddr, Integer.parseInt(proxyHostPort)), Integer.parseInt(proxyHostTimeout));
        }
        return proxy;
    }

