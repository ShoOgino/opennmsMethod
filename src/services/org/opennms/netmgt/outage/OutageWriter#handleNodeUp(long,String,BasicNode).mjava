    /**
     * Handle node up events. Record the 'nodeUp' event in the outages table -
     * close all open outage entries for the nodeid in the outages table.
     */
    private void handleNodeUp(long eventID, String eventTime, BasicNode node) {
        Category log = ThreadCategory.getInstance(OutageWriter.class);

        if (eventID == -1 || !node.isValid()) {
            log.warn(EventConstants.NODE_UP_EVENT_UEI + " ignored - info incomplete - eventid/nodeid: " + eventID + "/" + node);
            return;
        }

        Connection dbConn = null;
        try {
            dbConn = getConnection();

            int count = 0;

            if (node.openOutageExists(dbConn)) {
                count = node.closeOutages(dbConn, eventID, eventTime);
            } else {
                // Outage table does not have an open record.
                log.warn("\'" + EventConstants.NODE_UP_EVENT_UEI + "\' for " + node + " no open record.");
            }

            // commit work
            DbUtil.commit(dbConn, "nodeUp closed " + count + " outages for nodeid " + node + " in DB", "nodeUp could not be recorded  for nodeId: " + node);

        } catch (SQLException se) {
            DbUtil.rollback(dbConn, "SQL exception while handling \'nodeRegainedService\'", se);
        } finally {
            DbUtil.close(dbConn);
        }
    }

