    /**
     * Handles node down events. Record the 'nodeDown' event in the outages
     * table - create a new outage entry for each active service of the nodeid
     * if service is not already down.
     */
    private void handleNodeDown(long eventID, String eventTime, BasicNode node) {
        if (eventID == -1 || !node.isValid()) {
            ThreadCategory.getInstance(getClass()).warn(EventConstants.NODE_DOWN_EVENT_UEI + " ignored - info incomplete - eventid/nodeid: " + eventID + "/" + node);
            return;
        }

        Connection dbConn = null;
        try {
            dbConn = getConnection();

            node.openOutages(dbConn, eventID, eventTime);

            // commit work
            DbUtil.commit(dbConn, "Outage recorded for all active services for " + node, "nodeDown could not be recorded  for nodeId: " + node);

        } catch (SQLException sqle) {
            DbUtil.rollback(dbConn, "SQL exception while handling \'nodeDown\'", sqle);
        } finally {
            DbUtil.close(dbConn);
        }
    }

