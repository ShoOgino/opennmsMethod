	/**
	 * <P>This method is used to convert the service name into
	 * a service id. It first looks up the information from a
	 * service map in OutagesManager and if no match is found, by performing
	 * a lookup in the database. If the conversion is successful then the
	 * corresponding integer identifier will be returned to the caller.</P>
	 *
	 * @param name		The name of the service
	 *
	 * @return The integer identifier for the service name.
	 *
	 * @throws java.sql.SQLException if there is an error accessing
	 * 	the stored data, the SQL text is malformed, or the result 
	 * 	cannot be obtained.
	 *
	 * @see org.opennms.netmgt.outage.OutageConstants#DB_GET_SVC_ID DB_GET_SVC_ID
	 */
	private long getServiceID(String name)
		throws SQLException
	{
		//
		// Check the name to make sure that it is not null
		//
		if(name == null)
			throw new NullPointerException("The service name was null");

		// ask OutageManager
		//
		long id = OutageManager.getInstance().getServiceID(name);
		if (id != -1)
			return id;

		//
		// talk to the database and get the identifer
		//
		Connection dbConn = null;
		try
		{
			dbConn = DatabaseConnectionFactory.getInstance().getConnection();

	 		// SQL statement to get service id for a servicename from the service table
			PreparedStatement serviceStmt  = dbConn.prepareStatement(OutageConstants.DB_GET_SVC_ID);

			serviceStmt.setString(1, name);
			ResultSet rset = serviceStmt.executeQuery();
			if (rset.next())
			{
				id = rset.getLong(1);
			}

			// close result set
			rset.close();

			// close statement
			if (serviceStmt != null)
				serviceStmt.close();
		}
		finally
		{
			try
			{
				if(dbConn != null)
					dbConn.close();
			}
			catch(SQLException e)
			{
				ThreadCategory.getInstance(getClass()).warn("Exception closing JDBC connection", e);
			}
		}

		// Record the new find
		//
		if (id != -1)
			OutageManager.getInstance().addServiceMapping(name, id);

		//
		// return the id to the caller
		//
		return id;
	}

