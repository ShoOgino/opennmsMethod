    public void init() {
        ThreadCategory.setPrefix(LOG4J_CATEGORY);

        Category log = ThreadCategory.getInstance(getClass());
        
        if (m_eventMgr == null)
            throw new IllegalStateException("OutageManager.m_eventMgr is not set");
        
        if (m_outageMgrConfig == null)  
            throw new IllegalStateException("OutageManager.m_outageMgrConfig is not set");
        
        m_network = new BasicNetwork(getGetNextOutageID());

        // load the outage configuration and get the required attributes
        int numWriters = getNumWriters();

        //
        // Make sure we can connect to the database
        // - Close the open outages for unmanaged interfaces and services
        // - build a mapping of service name to service id from the service
        // table
        //
        java.sql.Connection conn = null;
        try {
            conn = getConnection();

            // close open outages for unmanaged entities
            closeOutages(conn);

            // build the service table map
            buildServiceTableMap(conn);
        } catch (SQLException sqlE) {
            log.fatal("Error closing outages for unmanaged services and interfaces or building servicename to serviceid mapping", sqlE);
            throw new UndeclaredThrowableException(sqlE);
        } finally {
            if (conn != null) {
                try {
                    conn.close();
                } catch (Exception e) {
                }
            }
        }

        m_writerPool = new RunnableConsumerThreadPool("Outage Writer Pool", 0.6f, 1.0f, numWriters);

        if (log.isDebugEnabled())
            log.debug("Created writer pool");

        m_eventReceiver = new BroadcastEventProcessor(this, m_writerPool.getRunQueue());
        if (log.isDebugEnabled())
            log.debug("Created event receiver");

        log.info("OutageManager ready to accept events");
    }

