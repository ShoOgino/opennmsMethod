    /**
     * Handles node lost service events. Record the 'nodeLostService' event in
     * the outages table - create a new outage entry if the service is not
     * already down.
     */
    private void handleNodeLostService(long eventID, String eventTime, BasicService svc) {
        Category log = ThreadCategory.getInstance(OutageWriter.class);

        if (eventID == -1 || !svc.isValid()) {
            log.warn(EventConstants.NODE_LOST_SERVICE_EVENT_UEI + " ignored - info incomplete - eventid/nodeid/ip/svc: " + eventID + "/" + svc);
            return;
        }

        // check that there is no 'open' entry already
        Connection dbConn = null;

        try {
            dbConn = getConnection();
            // check that there is no 'open' entry already
            if (svc.openOutageExists(dbConn)) {
                log.warn("\'" + EventConstants.NODE_LOST_SERVICE_EVENT_UEI + "\' for " + svc + " ignored - table already  has an open record ");
            } else {
                // Set the database commit mode
                dbConn.setAutoCommit(false);

                PreparedStatement newOutageWriter = null;
                if (log.isDebugEnabled())
                    log.debug("handleNodeLostService: creating new outage entry...");
                newOutageWriter = dbConn.prepareStatement(OutageConstants.DB_INS_NEW_OUTAGE);
                newOutageWriter.setLong(1, getNextOutageId(dbConn));
                newOutageWriter.setLong(2, eventID);
                newOutageWriter.setLong(3, svc.getNodeId());
                newOutageWriter.setString(4, svc.getIpAddr());
                newOutageWriter.setLong(5, svc.getServiceId());
                newOutageWriter.setTimestamp(6, convertEventTimeIntoTimestamp(eventTime));


                // execute
                newOutageWriter.executeUpdate();

                // close statement
                newOutageWriter.close();

                // commit work
                DbUtil.commit(log, dbConn, "nodeLostService : " + svc + " recorded in DB", "nodeLostService could not be recorded  for nodeid/ipAddr/service: " + svc);

            }
        } catch (SQLException sqle) {
            DbUtil.rollback(log, dbConn, "SQL exception while handling \'nodeLostService\'", sqle);
        } finally {
            DbUtil.close(log, dbConn);
        }

    }

