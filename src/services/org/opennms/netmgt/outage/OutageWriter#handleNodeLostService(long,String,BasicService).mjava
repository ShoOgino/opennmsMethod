    /**
     * Handles node lost service events. Record the 'nodeLostService' event in
     * the outages table - create a new outage entry if the service is not
     * already down.
     */
    private void handleNodeLostService(long eventID, String eventTime, BasicService svc) {

        Category log = ThreadCategory.getInstance(OutageWriter.class);
       if (eventID == -1 || !svc.isValid()) {
            log.warn(EventConstants.NODE_LOST_SERVICE_EVENT_UEI + " ignored - info incomplete - eventid/nodeid/ip/svc: " + eventID + "/" + svc);
            return;
        }

        // check that there is no 'open' entry already
        Connection dbConn = null;

        try {
            dbConn = getConnection();
            // check that there is no 'open' entry already
            if (!svc.openOutageExists(dbConn)) {
                svc.openOutage(dbConn, eventID, eventTime);
            } else {
                log.warn("\'" + EventConstants.NODE_LOST_SERVICE_EVENT_UEI + "\' for " + svc + " ignored - table already  has an open record ");
            }
            
            // commit work
            DbUtil.commit(dbConn, "nodeLostService : " + svc + " recorded in DB", "outage could not be created for nodeid/ipAddr/service: " + svc);

        } catch (SQLException sqle) {
            DbUtil.rollback(dbConn, "SQL exception while handling \'nodeLostService\'", sqle);
        } finally {
            DbUtil.close(dbConn);
        }

    }

