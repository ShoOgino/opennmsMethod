    /**
     * Hanlde node regained service events. Record the 'nodeRegainedService'
     * event in the outages table - close the outage entry in the table if the
     * service is currently down.
     * @param svc TODO
     */
    private void handleNodeRegainedService(long eventID, String eventTime, BasicService svc) {
        Category log = ThreadCategory.getInstance(OutageWriter.class);

        if (eventID == -1 || !svc.isValid()) {
            log.warn(EventConstants.NODE_REGAINED_SERVICE_EVENT_UEI + " ignored - info incomplete - eventid/nodeid/ip/svc: " + eventID + "/" + svc);
            return;
        }

        Connection dbConn = null;
        try {
            dbConn = getConnection();

            if (svc.openOutageExists(dbConn)) {
                // Set the database commit mode
                dbConn.setAutoCommit(false);

                // Prepare SQL statement used to update the 'regained time' in
                // an open entry
                PreparedStatement outageUpdater = dbConn.prepareStatement(OutageConstants.DB_UPDATE_OUTAGE_FOR_SERVICE);
                outageUpdater.setLong(1, eventID);
                outageUpdater.setTimestamp(2, convertEventTimeIntoTimestamp(eventTime));
                outageUpdater.setLong(3, svc.getNodeId());
                outageUpdater.setString(4, svc.getIpAddr());
                outageUpdater.setLong(5, svc.getServiceId());
                outageUpdater.executeUpdate();

                // close statement
                outageUpdater.close();

                // commit work
                DbUtil.commit(log, dbConn, "nodeRegainedService: closed outage for nodeid/ip/service " + svc + " in DB", "nodeRegainedService could not be recorded  for nodeId/ipAddr/service: " + svc);
            } else {
                // Outage table does not have an open record.
                log.warn("\'" + EventConstants.NODE_REGAINED_SERVICE_EVENT_UEI + "\' for " + svc + " does not have open record.");
            }
        } catch (SQLException se) {
            DbUtil.rollback(log, dbConn, "SQL exception while handling \'nodeRegainedService\'", se);
        } finally {
            DbUtil.close(log, dbConn);
        }
    }

