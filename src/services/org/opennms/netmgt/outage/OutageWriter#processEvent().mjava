        /**
         * Process an event.
	 * Read the event UEI, nodeid, interface and service - depending
	 * on the UEI, read event parms, if necessary, and process as appropriate.
	 */
	private void processEvent()
	{
		Category log = ThreadCategory.getInstance(OutageWriter.class);

		if (m_event == null)
		{
			if(log.isDebugEnabled())
				log.debug("Event is null, nothing to process");
			return;
		}

		if (log.isDebugEnabled())
			log.debug("About to process event: " + m_event.getUei());

		//
		// Check to make sure the event has a uei
		//
		String uei = m_event.getUei();
		if(uei == null)
		{
			// should only get registered events
			if (log.isDebugEnabled())
				log.debug("Event received with null UEI, ignoring event");
			return;
		}
                
		// get eventid
		long eventID = -1;
		if (m_event.hasDbid())
			eventID = m_event.getDbid();

		// convert the node id
		long nodeID = -1;
		if (m_event.hasNodeid())
			nodeID = m_event.getNodeid();

		String ipAddr    = m_event.getInterface();
		String service   = m_event.getService();
		String eventTime = m_event.getTime();
		
		if (log.isDebugEnabled())
			log.debug("processEvent: Event\nuei\t\t" + uei +
					"\neventid\t\t" + eventID +
					"\nnodeid\t\t" + nodeID +
					"\nipaddr\t\t" + ipAddr +
					"\nservice\t\t" + service +
					"\neventtime\t" + (eventTime != null ? eventTime : "<null>"));


		// get service id for the service name
		long serviceID = -1;
		if (service != null)
		{
			try
			{
				serviceID = getServiceID(service);
			}
			catch(SQLException sqlE)
			{
				log.warn("Error converting service name \"" 
						+ service
						+ "\" to an integer identifier, storing -1", sqlE);
			}
		}

		//
		// Check for any of the following UEIs:
		//
		//	nodeLostService 
		//	interfaceDown 
		//	nodeDown 
		//	nodeUp 
		//	interfaceUp 
		//	nodeRegainedService 
		//	deleteService
		// 	interfaceReparented
		//
		if(uei.equals(EventConstants.NODE_LOST_SERVICE_EVENT_UEI))
		{
			handleNodeLostService(eventID, nodeID, ipAddr, serviceID, eventTime);
		}
		else if(uei.equals(EventConstants.INTERFACE_DOWN_EVENT_UEI))
		{
			handleInterfaceDown(eventID, nodeID, ipAddr, eventTime);
		}
		else if(uei.equals(EventConstants.NODE_DOWN_EVENT_UEI))
		{
			handleNodeDown(eventID, nodeID, eventTime);
		}
		else if(uei.equals(EventConstants.NODE_UP_EVENT_UEI))
		{
			handleNodeUp(eventID, nodeID, eventTime);
		}
		else if(uei.equals(EventConstants.INTERFACE_UP_EVENT_UEI))
		{
			handleInterfaceUp(eventID, nodeID, ipAddr, eventTime);
		}
		else if(uei.equals(EventConstants.NODE_REGAINED_SERVICE_EVENT_UEI))
		{
			handleNodeRegainedService(eventID, nodeID, ipAddr, serviceID, eventTime);
		}
		else if(uei.equals(EventConstants.INTERFACE_REPARENTED_EVENT_UEI))
		{
			handleInterfaceReparented(ipAddr, m_event.getParms());
		}
	}

