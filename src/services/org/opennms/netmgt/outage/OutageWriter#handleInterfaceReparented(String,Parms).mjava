    /**
     * <p>
     * Record the 'interfaceReparented' event in the outages table.
     * Change'outages' table entries associated with the old nodeid/interface
     * pairing so that those outage entries will be associated with the new
     * nodeid/interface pairing.
     * </p>
     * 
     * <p>
     * <strong>Note: </strong>This event has no impact on the event id reference
     * fields
     * </p>
     */
    private void handleInterfaceReparented(String ipAddr, Parms eventParms) {
        Category log = ThreadCategory.getInstance(OutageWriter.class);

        if (log.isDebugEnabled())
            log.debug("interfaceReparented event received...");

        if (ipAddr == null || eventParms == null) {
            log.warn(EventConstants.INTERFACE_REPARENTED_EVENT_UEI + " ignored - info incomplete - ip/parms: " + ipAddr + "/" + eventParms);
            return;
        }

        long oldNodeId = -1;
        long newNodeId = -1;

        String parmName = null;
        Value parmValue = null;
        String parmContent = null;

        Enumeration parmEnum = eventParms.enumerateParm();
        while (parmEnum.hasMoreElements()) {
            Parm parm = (Parm) parmEnum.nextElement();
            parmName = parm.getParmName();
            parmValue = parm.getValue();
            if (parmValue == null)
                continue;
            else
                parmContent = parmValue.getContent();

            // old nodeid
            if (parmName.equals(EventConstants.PARM_OLD_NODEID)) {
                try {
                    oldNodeId = Integer.valueOf(parmContent).intValue();
                } catch (NumberFormatException nfe) {
                    log.warn("Parameter " + EventConstants.PARM_OLD_NODEID + " cannot be non-numeric");
                    oldNodeId = -1;
                }

            }

            // new nodeid
            else if (parmName.equals(EventConstants.PARM_NEW_NODEID)) {
                try {
                    newNodeId = Integer.valueOf(parmContent).intValue();
                } catch (NumberFormatException nfe) {
                    log.warn("Parameter " + EventConstants.PARM_NEW_NODEID + " cannot be non-numeric");
                    newNodeId = -1;
                }
            }
        }

        if (newNodeId == -1 || oldNodeId == -1) {
            log.warn("Unable to process 'interfaceReparented' event, invalid event parm.");
            return;
        }

        BasicInterface iface = new BasicInterface(oldNodeId, ipAddr);
        Connection dbConn = null;
        try {
            dbConn = getConnection();

            // Set the database commit mode
            dbConn.setAutoCommit(false);

            // Issue SQL update to change the 'outages' table entries
            // associated with the old nodeid/interface pairing
            // so that those outage entries will be associated with
            // the new nodeid/interface pairing.

            // Prepare SQL statement used to reparent outage table entries -
            // used when a 'interfaceReparented' event is received
            PreparedStatement reparentOutagesStmt = dbConn.prepareStatement(OutageConstants.DB_REPARENT_OUTAGES);
            reparentOutagesStmt.setLong(1, newNodeId);
            reparentOutagesStmt.setLong(2, iface.getNodeId());
            reparentOutagesStmt.setString(3, iface.getIpAddr());
            int count = reparentOutagesStmt.executeUpdate();

            // commit work
            String s = "Reparented " + count + " outages - ip: " + iface.getIpAddr() + " reparented from " + iface.getNodeId() + " to " + newNodeId;
            String f = "reparent outages failed for newNodeId/ipAddr: " + newNodeId + "/" + iface.getIpAddr();
            DbUtil.commit(log, dbConn, s, f);

            // close statement
            reparentOutagesStmt.close();

        } catch (SQLException se) {
            DbUtil.rollback(log, dbConn, "SQL exception while handling \'interfaceReparented\'", se);
        } finally {
            DbUtil.close(log, dbConn);
        }
    }

