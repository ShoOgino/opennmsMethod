	/**
	 * Close the currently open outages for services and interfaces that are
	 * currently unmanaged
	 */
	private void closeOutages(java.sql.Connection dbConn)
			throws SQLException
	{
		Category log = ThreadCategory.getInstance(getClass());

		if (log.isDebugEnabled())
			log.debug("OutageManager getting ready to close currently open outages for unmanaged services and interfaces ..");

		// get the time to which regained times are to be set
		Timestamp closeTime = new Timestamp((new java.util.Date()).getTime());

		// prepare statements
		PreparedStatement closeForServicesStmt = dbConn.prepareStatement(OutageConstants.DB_CLOSE_OUTAGES_FOR_UNMANAGED_SERVICES);
		PreparedStatement closeForInterfacesStmt = dbConn.prepareStatement(OutageConstants.DB_CLOSE_OUTAGES_FOR_UNMANAGED_INTERFACES);

		// set the time
		closeForServicesStmt.setTimestamp(1, closeTime);
		closeForInterfacesStmt.setTimestamp(1, closeTime);

		// close outages in ifservices
		int num = closeForServicesStmt.executeUpdate();

		if (log.isDebugEnabled())
			log.debug("OutageManager closed " + num + " outages for unmanaged services");

		// close outages in ipinterface
		num = closeForInterfacesStmt.executeUpdate();

		if (log.isDebugEnabled())
			log.debug("OutageManager closed " + num + " outages for unmanaged interfaces");

		// close all db resources
		closeForInterfacesStmt.close();
		closeForServicesStmt.close();

		if (log.isDebugEnabled())
		log.debug("OutageManager closed currently open outages for unmanaged services and interfaces");
	}

