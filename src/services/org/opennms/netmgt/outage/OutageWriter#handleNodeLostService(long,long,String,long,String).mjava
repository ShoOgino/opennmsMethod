	/**
	 * <p>Record the 'nodeLostService' event in the outages table - create
	 * a new outage entry if the service is not already down</p>
	 */
	private void handleNodeLostService(long eventID, long nodeID, String ipAddr, long serviceID, String eventTime)
	{
		Category log = ThreadCategory.getInstance(OutageWriter.class);

		if(eventID == -1 || nodeID == -1 || ipAddr == null || serviceID == -1)
		{
			log.warn(EventConstants.NODE_REGAINED_SERVICE_EVENT_UEI + " ignored - info incomplete - eventid/nodeid/ip/svc: " + eventID + "/" + nodeID + "/" + ipAddr + "/" + serviceID);
			return;
		}


		// check that there is no 'open' entry already
		Connection dbConn = null;

		try
		{
			dbConn = DatabaseConnectionFactory.getInstance().getConnection();
                        // check that there is no 'open' entry already
                        if (openOutageExists(dbConn, nodeID, ipAddr, serviceID))
                        {
                                log.warn("\'" + EventConstants.NODE_LOST_SERVICE_EVENT_UEI + "\' for " + nodeID + "/" + ipAddr + "/" + serviceID + " ignored - table already  has an open record ");
                        }
			else
			{
	 			// Prepare SQL statement to get the next outage id from the db sequence
				PreparedStatement getNextOutageIdStmt  = dbConn.prepareStatement(OutageManagerConfigFactory.getInstance().getGetNextOutageID());

				long outageID = -1;

				// Execute the statement to get the next outage id from the sequence
				//
				ResultSet seqRS = getNextOutageIdStmt.executeQuery();
				if (seqRS.next())
				{
					outageID = seqRS.getLong(1);
				}
				seqRS.close();

				// Set the database commit mode
				try
				{
					dbConn.setAutoCommit(false);
				}
				catch (SQLException sqle)
				{
					log.error("Unable to change database AutoCommit to FALSE", sqle);
					return;
				}
//                                // Check the OutageCache to see if an event exists.
//                                OutageEventEntry regainedEvent = OutageEventCache.getInstance().findCacheMatch(eventID,
//                                                                                                nodeID,
//                                                                                                ipAddr,
//                                                                                                serviceID,
//                                                                                                eventTime,
//                                                                                                OutageEventEntry.EVENT_TYPE_LOST_SERVICE);

                                PreparedStatement newOutageWriter = null;
//                                if (regainedEvent == null)
//                                {
                                        // Prepare statement to insert a new outage table entry
                                        if (log.isDebugEnabled())
                                                log.debug("handleNodeLostService: creating new outage entry...");
                                        newOutageWriter = dbConn.prepareStatement(OutageConstants.DB_INS_NEW_OUTAGE);
                                        newOutageWriter.setLong  (1, outageID);
                                        newOutageWriter.setLong  (2, eventID);
                                        newOutageWriter.setLong  (3, nodeID);
                                        newOutageWriter.setString(4, ipAddr);
                                        newOutageWriter.setLong  (5, serviceID);
                                        newOutageWriter.setTimestamp(6, convertEventTimeIntoTimestamp(eventTime));

                                        // Notify the external xmlrpc server when needed
                                        if (m_xmlrpc && m_xmlrpcServerUrl != null) 
                                        {
                                                if (log.isDebugEnabled())
                                                        log.debug("handleNodeLostService: Notify external xmlrpc server...");
                                                
                                                try
                                                {
                                                        XmlRpcNotifier notifier = new XmlRpcNotifier(m_xmlrpcServerUrl, m_event);
                                                        String reply = notifier.sendServiceDownEvent();
                                                        if (log.isDebugEnabled())
                                                                log.debug("handleNodeLostService: The reply from the xmlrpc server is: "
                                                                        + "\n\t\t" + reply);

                                                        
                                                } catch (XmlRpcException xe)
                                                {
                                                        log.warn("handleNodeLostService: Failed to notify xmlrpc server.", xe);
                                                } catch (IOException ioe)
                                                {
                                                        log.warn("handleNodeLostService: Failed to notify xmlrpc server.", ioe);
                                                } 
                                        }
//                                }
//                                else
//                                {
//                                        // Matching regained service event in the cache, so create new
//                                        // outage entry with both lost and regained time.
//
//                                        // Prepare statement to insert a closed outage table entry
//                                        if (log.isDebugEnabled())
//                                                log.debug("handleNodeLostService: creating closed outage entry...");
//                                        newOutageWriter = dbConn.prepareStatement(OutageConstants.DB_INS_CACHE_HIT);
//                                        newOutageWriter.setLong  (1, outageID);
//                                        newOutageWriter.setLong  (2, eventID);
//                                        newOutageWriter.setLong  (3, nodeID);
//                                        newOutageWriter.setString(4, ipAddr);
//                                        newOutageWriter.setLong  (5, serviceID);
//                                        newOutageWriter.setTimestamp(6, convertEventTimeIntoTimestamp(eventTime));
//                                        newOutageWriter.setLong  (7, regainedEvent.getEventId());
//                                        newOutageWriter.setTimestamp(8, convertEventTimeIntoTimestamp(regainedEvent.getEventTime()));
//                                        
//                                        // Notify the external xmlrpc server when needed
//                                        if (m_xmlrpc && m_xmlrpcServerUrl != null) 
//                                        {
//                                                if (log.isDebugEnabled())
//                                                        log.debug("handleNodeLostService: Notify external xmlrpc server...");
//                                                
//                                                try
//                                                {
//                                                        XmlRpcNotifier notifier = new XmlRpcNotifier(m_xmlrpcServerUrl, m_event);
//                                                        String reply = notifier.sendServiceDownEvent();
//                                                        if (log.isDebugEnabled())
//                                                                log.debug("handleNodeLostService: The reply from the xmlrpc server is: "
//                                                                        + "\n\t\t" + reply);
//
//                                                        // the regained service event is in the cache, create a 
//                                                        // regained service event and notify the xmlrpc server.
//                                                        Event regainedServiceEvent = new Event();
//                                                        regainedServiceEvent.setNodeid(m_event.getNodeid());
//                                                        regainedServiceEvent.setInterface(m_event.getInterface());
//                                                        regainedServiceEvent.setService(m_event.getService());
//                                                        regainedServiceEvent.setHost(m_event.getHost());
//                                                        regainedServiceEvent.setTime(regainedEvent.getEventTime());
//                                                        notifier = new XmlRpcNotifier(m_xmlrpcServerUrl, regainedServiceEvent);
//                                                        reply = notifier.sendServiceUpEvent();
//                                                        
//                                                        if (log.isDebugEnabled())
//                                                                log.debug("handleNodeLostService: The reply from the xmlrpc server is: "
//                                                                        + "\n\t\t" + reply);
//
//                                                        
//                                                } catch (XmlRpcException xe)
//                                                {
//                                                        log.warn("handleNodeLostService: Failed to notify xmlrpc server.", xe);
//                                                } catch (IOException ioe)
//                                                {
//                                                        log.warn("handleNodeLostService: Failed to notify xmlrpc server.", ioe);
//                                                }
//                                        }
//                               }

				// execute
				newOutageWriter.executeUpdate();

				// close statement
				newOutageWriter.close();

				// commit work
				try
				{
					dbConn.commit();

					if (log.isDebugEnabled())
						log.debug("nodeLostService : " + nodeID + "/" + ipAddr + "/" + serviceID + " recorded in DB");
				}
				catch(SQLException se)
				{
					log.warn("Rolling back transaction, nodeLostService could not be recorded  for nodeid/ipAddr/service: " + nodeID + "/" + ipAddr + "/" + serviceID, se);


					try 
					{
						dbConn.rollback();
					}
					catch (SQLException sqle)
					{
						log.warn("SQL exception during rollback, reason", sqle);
					}

				}

			}
		}
		catch (SQLException sqle)
		{
			log.warn("SQL exception while handling \'nodeLostService\'", sqle);
		}
		finally
		{
			// close database connection
			try
			{
				if(dbConn != null)
					dbConn.close();
			}
			catch(SQLException e)
			{
				log.warn("Exception closing JDBC connection", e);
			}
		}

	}

