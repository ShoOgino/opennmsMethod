	/**
	 * Read the required properties and set up the logs, the archive etc.
	 *
	 * @exception ArchiverException thrown if a required property is not specified or is incorrect
	 */
	private void init()
		throws ArchiverException
	{
		// The general logs from the events archiver go to this category
		ThreadCategory.setPrefix("OpenNMS.Archiver.Events");
		m_logCat = ThreadCategory.getInstance("OpenNMS.Archiver.Events");

		// The archive logs go to this category
		m_archCat = Category.getInstance("EventsArchiver");

		// set additivity for this to false so that logs from here
		// do not go to the root category
		m_archCat.setAdditivity(false);

		try
		{
			EventsArchiverConfigFactory.init();
			EventsArchiverConfigFactory eaFactory = EventsArchiverConfigFactory.getInstance();

			// get archive age
			String archAgeStr = eaFactory.getArchiveAge();
			long archAge;
			try
			{
				archAge = TimeConverter.convertToMillis(archAgeStr);
			}
			catch (NumberFormatException nfe)
			{
				throw new ArchiverException("Archive age: " + archAgeStr + "- Incorrect format " + nfe.getMessage());
			}

			// set actual time that is to be used for the select from the database
			m_archAge = System.currentTimeMillis() - archAge;

			//
			// get the separator to be used between column names in the archive
			//
			String separator = eaFactory.getSeparator();
			if (separator == null)
			{
				m_archSeparator = "#";
			}
			else
			{
				m_archSeparator = separator;
			}

			// info logs
			if (m_logCat.isInfoEnabled())
			{
				// get this in readable format
				archAgeStr = (new java.util.Date(m_archAge)).toString(); 
				m_logCat.info("Events archive age specified = " + archAgeStr);
				m_logCat.info("Events archive age in millisconds = " + archAge);

				m_logCat.info("Events created before \'" + archAgeStr + " \' will be deleted");
				
				m_logCat.info("Separator to be used in archive: " + m_archSeparator);
			}
		}
		catch(MarshalException ex)
		{
			throw new UndeclaredThrowableException(ex);
		}
		catch(ValidationException ex)
		{
			throw new UndeclaredThrowableException(ex);
		}
		catch(IOException ex)
		{
			throw new UndeclaredThrowableException(ex);
		}

		//
		// Make sure we can connect to the database
		//
		try
		{
			DatabaseConnectionFactory.init();
			m_dbConn = DatabaseConnectionFactory.getInstance().getConnection();
		}
		catch (IOException ie)
		{
			throw new UndeclaredThrowableException(ie);
		}
		catch (MarshalException me)
		{
			throw new UndeclaredThrowableException(me);
		}
		catch (ValidationException ve)
		{
			throw new UndeclaredThrowableException(ve);
		}
		catch (SQLException sqlE)
		{
			throw new UndeclaredThrowableException(sqlE);
		}
		catch (ClassNotFoundException cnfE)
		{
			throw new UndeclaredThrowableException(cnfE);
		}

	}

