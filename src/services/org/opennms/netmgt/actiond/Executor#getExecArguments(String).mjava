    /**
     * <p>
     * Converts a single command to an array that can be passed to the
     * {@link java.lang.Runtime#exec(java.lang.String[]) exec}system call. The
     * element at index zero of the array is the name of the executable to run.
     * Indexs [1..length) are the arguments passed to the executable command.
     * </p>
     * 
     * <p>
     * The input command has is white space trimmed before processing. The basic
     * processing is to split on spaces, except when a double quote or single
     * quote is encountered. Also backspaces(\) should also be handled correctly
     * both in and out of the quotes. Shell escapes with <em>$</em> are not
     * supported.
     * </p>
     * 
     * @param cmd
     *            The command to split into an array.
     * 
     * @return The execution array.
     * 
     */
    private static String[] getExecArguments(String cmd) {
        Category log = ThreadCategory.getInstance(Executor.class);

        // make sure we get rid of excess white space.
        //
        cmd = cmd.trim();

        // get the processing elements.
        //
        StringBuffer buf = new StringBuffer();
        List args = new ArrayList(5);
        char[] chars = cmd.toCharArray();

        boolean dquoted = false;
        boolean squoted = false;
        for (int x = 0; x < chars.length; x++) {
            if (chars[x] == '\\') {
                if (squoted) {
                    buf.append(chars[x]).append(chars[x + 1]);
                    x += 2;
                } else {
                    buf.append(chars[++x]);
                }
            } else if (chars[x] == '\"' && !squoted) {
                dquoted = dquoted ? false : true;
            } else if (chars[x] == '\'') {
                squoted = squoted ? false : true;
            } else if (squoted || dquoted) {
                buf.append(chars[x]);
            } else if (chars[x] == ' ') {
                String arg = buf.toString().trim();

                if (log.isDebugEnabled()) {
                    log.debug("getExecArgument: adding argument: " + arg);
                }

                args.add(arg);
                buf.delete(0, buf.length());

                // trim off the remaining white space
                //
                while (chars[x + 1] == ' ') {
                    x++;
                }
            } else {
                buf.append(chars[x]);
            }
        }

        // Add remaining argument
        //
        if (buf.length() > 0) {
            args.add(buf.toString());
        }
        buf = null;

        // Convert to string array
        //
        String[] results = new String[args.size()];
        return (String[]) args.toArray(results);
    }

