    /**
     * Returns the next element in the internal interator. If the iterator has
     * reached it's end, then the iterator is regenerated and thus this call
     * will always return a valid element.
     * 
     * @param timeout
     *            The maximum time to wait (ignored).
     * 
     * @return The next element in the range(s).
     */
    public synchronized Object remove(long timeout) throws InterruptedException, FifoQueueException {
        Category log = ThreadCategory.getInstance(getClass());
        if (!m_iter.hasNext()) {
            if (log.isDebugEnabled())
                log.debug("remove: end of iterator reached, resetting iterator");

            m_restartTime = System.currentTimeMillis();
            m_isRestarted = true;
            m_iter = iterator();
        }
        doWait(timeout);

        Object rval = null;
        if (m_iter.hasNext())
            rval = m_iter.next();

        return rval;
    }

