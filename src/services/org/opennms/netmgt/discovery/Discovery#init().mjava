    public synchronized void init() {
        ThreadCategory.setPrefix(LOG4J_CATEGORY);
        Category log = ThreadCategory.getInstance();

	if (m_manager != null) {
	    log.error("The discovery service is already running and init() was called");
            throw new IllegalStateException("The discovery service is already running");
	}

        // Initialize the Database configuration factory and verify
        // that we can get a database connection.
        //
        java.sql.Connection ctest = null;
        try {
            DatabaseConnectionFactory.init();
            ctest = DatabaseConnectionFactory.getInstance().getConnection();
        } catch (IOException ie) {
            log.fatal("IOException getting database connection", ie);
            throw new UndeclaredThrowableException(ie);
        } catch (MarshalException me) {
            log.fatal("Marshall Exception getting database connection", me);
            throw new UndeclaredThrowableException(me);
        } catch (ValidationException ve) {
            log.fatal("Validation Exception getting database connection", ve);
            throw new UndeclaredThrowableException(ve);
        } catch (SQLException sqlE) {
            log.fatal("SQL Exception getting database connection", sqlE);
            throw new UndeclaredThrowableException(sqlE);
        } catch (ClassNotFoundException cnfE) {
            log.fatal("Class Not Found Exception getting database connection", cnfE);
            throw new UndeclaredThrowableException(cnfE);
        } finally {
            try {
                if (ctest != null) {
                    ctest.close();
		}
            } catch (Exception e) {
            }
        }

        // Initialize discovery configuration factory
        DiscoveryConfigFactory dFactory = null;
        try {
            DiscoveryConfigFactory.reload();
            dFactory = DiscoveryConfigFactory.getInstance();
        } catch (MarshalException ex) {
            log.error("Failed to load discovery configuration", ex);
            throw new UndeclaredThrowableException(ex);
        } catch (ValidationException ex) {
            log.error("Failed to load discovery configuration", ex);
            throw new UndeclaredThrowableException(ex);
        } catch (IOException ex) {
            log.error("Failed to load discovery configuration", ex);
            throw new UndeclaredThrowableException(ex);
        }

        // Get the discovery configuration from the factory.
        //
        DiscoveryConfiguration cfg = dFactory.getConfiguration();

        //
        // build the lists
        //
        List specifics = new LinkedList();
        List includes = new LinkedList();

        Enumeration e = cfg.enumerateSpecific();
        while (e.hasMoreElements()) {
            Specific s = (Specific) e.nextElement();

            long timeout = 800L;
            if (s.hasTimeout()) {
                timeout = s.getTimeout();
	    } else if (cfg.hasTimeout()) {
                timeout = cfg.getTimeout();
	    }

            int retries = 3;
            if (s.hasRetries()) {
                retries = s.getRetries();
	    } else if (cfg.hasRetries()) {
                retries = cfg.getRetries();
	    }

            try {
                specifics.add(new IPPollAddress(s.getContent(), timeout, retries));
            } catch (UnknownHostException uhE) {
                log.warn("Failed to convert address " + s.getContent(), uhE);
            }
        }

        e = cfg.enumerateIncludeRange();
        while (e.hasMoreElements()) {
            IncludeRange ir = (IncludeRange) e.nextElement();

            long timeout = 800L;
            if (ir.hasTimeout()) {
                timeout = ir.getTimeout();
	    } else if (cfg.hasTimeout()) {
                timeout = cfg.getTimeout();
	    }

            int retries = 3;
            if (ir.hasRetries()) {
                retries = ir.getRetries();
	    } else if (cfg.hasRetries()) {
                retries = cfg.getRetries();
	    }

            try {
                includes.add(new IPPollRange(ir.getBegin(), ir.getEnd(), timeout, retries));
            } catch (UnknownHostException uhE) {
                log.warn("Failed to convert address range (" + ir.getBegin() + ", " + ir.getEnd() + ")", uhE);
            }
        }

        // add addresses from the URL specified to specifics
        //
        e = cfg.enumerateIncludeUrl();
        while (e.hasMoreElements()) {
            IncludeUrl url = (IncludeUrl) e.nextElement();

            long timeout = 800L;
            if (url.hasTimeout()) {
                timeout = url.getTimeout();
	    } else if (cfg.hasTimeout()) {
                timeout = cfg.getTimeout();
	    }

            int retries = 3;
            if (url.hasRetries()) {
                retries = url.getRetries();
	    } else if (cfg.hasRetries()) {
                retries = cfg.getRetries();
	    }

            addToSpecificsFromURL(specifics, url.getContent(), timeout,
				  retries);
        }

        // Setup the exclusion range.
        //
        DiscoveredIPMgr.setExclusionList(cfg.getExcludeRange());

        // Setup the specifics list.
        //
        DiscoveredIPMgr.setSpecificsList(specifics);

        // Build a generator
        m_generator = new IPGenerator(specifics, includes,
				      cfg.getInitialSleepTime(),
				      cfg.getRestartSleepTime());

        // initialize the EventIpcManagerFactory
        EventIpcManagerFactory.init();

        // A queue for responses
        //
        FifoQueue responsive = new FifoQueueImpl();

        try {
            m_eventWriter =
		new SuspectEventGenerator(responsive,
					  cfg.getRestartSleepTime());
        } catch (Exception ex) {
            log.error("Failed to create event writer", ex);
            throw new UndeclaredThrowableException(ex);
        }

        try {
            m_eventReader = new BroadcastEventProcessor();
        } catch (Exception ex) {
            try {
                m_eventWriter.stop();
            } catch (Exception exx) {
            }

	    log.error("Failed to create event reader", ex);
            throw new UndeclaredThrowableException(ex);
        }

        try {
            m_manager = new PingManager(m_generator, responsive,
					(short) 0xbeef, cfg.getThreads(),
					cfg.getPacketsPerSecond());
        } catch (Throwable ex) {
	    ex.printStackTrace();
	    log.error("Failed to create ping manager in init()", ex);
            throw new UndeclaredThrowableException(ex);
        }
    }

