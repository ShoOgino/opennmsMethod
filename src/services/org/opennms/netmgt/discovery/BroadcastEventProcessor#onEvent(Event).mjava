	/**
	 * This method is invoked by the EventIpcManager
	 * when a new event is available for processing.
	 * Each message is examined for its Universal Event Identifier
	 * and the appropriate action is taking based on each UEI.
	 *
	 * @param event	The event 
	 *
	 */
	public void onEvent(Event event)
	{
		Category log = ThreadCategory.getInstance(getClass());

		String eventUei = event.getUei();
		if (eventUei == null)
			return;
			
		if (log.isDebugEnabled())
			log.debug("Received event: " + eventUei);

		if(eventUei.equals(EventConstants.NODE_GAINED_INTERFACE_EVENT_UEI))
		{
			// add to known nodes
			try
			{
				DiscoveredIPMgr.addDiscovered(event.getInterface());
			}
			catch(UnknownHostException uhE)
			{
				ThreadCategory.getInstance(getClass()).warn("Failed to add interface " + event.getInterface() + " to discovered address set", uhE);
			}

			if (log.isDebugEnabled())
				log.debug("Added "  + event.getInterface() + " as discovered");
		}
		else if(eventUei.equals(EventConstants.DISC_PAUSE_EVENT_UEI))
		{
			try
			{
				Discovery.getInstance().pause();
			} catch(IllegalStateException ex) { }
		}
		else if(eventUei.equals(EventConstants.DISC_RESUME_EVENT_UEI))
		{
			try
			{
				Discovery.getInstance().resume();
			} catch(IllegalStateException ex) { }
		} 
		else if (eventUei.equals(EventConstants.INTERFACE_DELETED_EVENT_UEI))
		{
			// remove from known nodes
			try
			{
				DiscoveredIPMgr.removeDiscovered(event.getInterface());
			}
			catch(UnknownHostException uhE)
			{
				ThreadCategory.getInstance(getClass()).warn("Failed to remove interface " + event.getInterface() + " from discovered address set", uhE);
			}

			if (log.isDebugEnabled())
				log.debug("Removed "  + event.getInterface() + " from known node list");
		}
	}

