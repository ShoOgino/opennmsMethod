		/**
		 * <p>The main method that does the work for the pinging
		 * thread. This method reads {@link IPPollAddress IPPollAddress}
		 * instances from the input queue and then polls the 
		 * target using the information.</p>
		 *
		 * <p>While a poll is in process the extended status of the 
		 * fiber will return {@link #POLLING POLLING} otherwise it
		 * should be {@link #IDLE IDLE}.</p>
		 *
		 * <p>If an error occurs then the thread will exit and set
		 * the status to {@link org.opennms.core.fiber.Fiber#STOPPED STOPPED}.
		 * </p>
		 *
		 */
		public void run()
		{
			Category log = ThreadCategory.getInstance(getClass());
			synchronized(this)
			{
				m_status = RUNNING;
				m_xstatus= IDLE;
			}

			try
			{
				for(;;)
				{
					synchronized(this)
					{
						while(m_status == PAUSED)
						{
							if(log.isDebugEnabled())
								log.debug("run: fiber paused, waiting");
							
							wait();

							if(log.isDebugEnabled())
								log.debug("run: fiber wait is over");

							continue;
						}

						if(m_status != RUNNING)
							break;
					}

					IPPollAddress addr = (IPPollAddress) m_addressQ.remove();
					boolean isKnown = false;
					if (addr != null) {
					    isKnown = DiscoveredIPMgr.isDiscoveredOrExcluded(addr.getAddress());
					}
					if(addr != null && !isKnown)
					{
						synchronized(this)
						{
							m_xstatus = POLLING;
							m_target = addr.getAddress();
							m_signaled= false;

							if(log.isDebugEnabled())
								log.debug("run: starting poll");

							// MUST HAVE LOCK TO CALL POLL!
							//
							try
							{
							poll(addr);

							if(log.isDebugEnabled())
								log.debug("run: poll completed");
							}
							catch(NoRouteToHostException ex)
							{
								log.warn("Check discovery configuration, cannot poll broadcast addresses (addr = " + m_target + ")");
								if(log.isDebugEnabled())
									log.debug("run: poll cancelled, invalid address " + m_target, ex);
							}

							m_target = null;
							m_signaled = false;
							m_xstatus = IDLE;
						}
					}
				}
			}
			catch(Throwable t)
			{
				if(m_status != STOP_PENDING)
					log.fatal("run: Error in ping thread, exiting", t);
				else
					log.info("run: pinging thread exiting", t);
				return;
			}
			finally
			{
				m_status = STOPPED;
				if(log.isDebugEnabled())
					log.debug("run: status set to stopped");
			}
		}

