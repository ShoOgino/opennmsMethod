	/**
	 * Responsible for syncing up the 'isManaged' field of the ipInterface table
	 * and the 'status' field of the ifServices table based on the capsd and
	 * poller configurations. Note that the 'sync' only takes place for interfaces
	 * and services that are not deleted or force unmanaged.
	 *
	 * <pre>Here is how the statuses are set:
	 * If an interface is 'unmanaged' based on the capsd configuration,
	 *     ipManaged='U' and status='U'
	 *
	 * If an interface is 'managed' based on the capsd configuration,
	 *   1. If the interface is not in any pacakge, ipManaged='N' and status ='N'
	 *   2. If the interface in atleast one package but the service is not polled by
	 *      by any of the packages, ipManaged='M' and status='N'
	 *   3. If the interface in atleast one package and the service is polled by a
	 *      package that this interface belongs to, ipManaged='M' and status'=A'
	 *</pre>
	 *
	 * @param 	conn	Connection to the database.
	 *
	 * @exception SQLException		Thrown if an error occurs while syncing 
	 * 					the database.
	 */
	public void syncManagementState(Connection conn)
		throws SQLException
	{
		Category log = ThreadCategory.getInstance();

                boolean verifyServer = OpennmsServerConfigFactory.getInstance().verifyServer();
                String localServer = OpennmsServerConfigFactory.getInstance().getServerName();

		if (log.isDebugEnabled())
			log.debug("syncManagementState: local server: " + localServer + " verify server: " + verifyServer);

		if (conn == null)
		{
			log.error("CapsdConfigFactory.syncManagementState: Sync failed...must have valid database connection.");
			return;
		}
		
		// Get default management state.
		//
		String temp = m_config.getManagementPolicy();
		boolean managed_by_default = (temp == null || temp.equalsIgnoreCase("managed"));
		if (log.isDebugEnabled())
			log.debug("syncManagementState: managed_by_default: " + managed_by_default);
		
		//
		// Retrieve list of interfaces and their managed status from the database
		// NOTE:  Interfaces with an 'isManaged' field equal to 'D' (Deleted) or
		// 'F' (Forced Unmanaged) are 
		// not eligible to be managed and will not be included in the interfaces
		// retrieved from the database.  Likewise, interfaces with IP address of
		// '0.0.0.0' will also be excluded by the SQL query.
		//
		
		//prepare the SQL statement to query the database
		PreparedStatement ipRetStmt = null;

                if (verifyServer)
                {
                        ipRetStmt = conn.prepareStatement(SQL_DB_RETRIEVE_IP_INTERFACE_IN_LOCAL_SERVER);
                        ipRetStmt.setString(1, localServer);
                }
                else
                        ipRetStmt = conn.prepareStatement(SQL_DB_RETRIEVE_IP_INTERFACE);
		
		ArrayList ifList = new ArrayList();
		ResultSet result = null;
		try
		{
			//run the statement
			result = ipRetStmt.executeQuery();
		
			// Build array list of CapsdInterface objects representing each
			// of the interfaces retrieved from the database
			while (result.next())
			{
				// Node Id
				int nodeId = result.getInt(1);
				
				// IP address
				String address = result.getString(2);
				if (address == null)
				{
					log.warn("invalid ipInterface table entry, no IP address, skipping...");
					continue;
				}
				
				// Management State
				char managedState = DbIpInterfaceEntry.STATE_UNKNOWN;
				String str = result.getString(3);
				if(str != null)
					managedState = str.charAt(0);
				
				ifList.add(new LightWeightIfEntry(nodeId, 
								LightWeightIfEntry.NULL_IFINDEX, 
								address, 
								managedState, 
								DbIpInterfaceEntry.SNMP_UNKNOWN));
			}
		}
		finally
		{
			result.close();
			ipRetStmt.close();
		}
		
		// For efficiency, prepare the SQL statements in advance
		PreparedStatement ifUpdateStmt = conn.prepareStatement(SQL_DB_UPDATE_IP_INTERFACE);
		PreparedStatement allSvcUpdateStmt = conn.prepareStatement(SQL_DB_UPDATE_ALL_SERVICES_FOR_NIP);

		PreparedStatement svcRetStmt = conn.prepareStatement(SQL_DB_RETRIEVE_IF_SERVICES);
		PreparedStatement svcUpdateStmt = conn.prepareStatement(SQL_DB_UPDATE_SERVICE_FOR_NIP);
		
		// get a handle to the PollerConfigFactory
		PollerConfigFactory pollerCfgFactory = PollerConfigFactory.getInstance();

		try
		{
			// Loop through interface list and determine if there has been a change in 
			// the managed status of the interface based on the newly loaded package
			// configuration data.
			Iterator iter = ifList.iterator();
			while (iter.hasNext())
			{
				LightWeightIfEntry ifEntry = (LightWeightIfEntry)iter.next();

				String ipaddress = ifEntry.getAddress();
				
				// Convert to InetAddress object
				//
				InetAddress ifAddress = null;
				try
				{
					ifAddress = InetAddress.getByName(ipaddress);
				}
				catch (UnknownHostException uhE)
				{
					log.warn("Failed converting ip address " + ipaddress + " to InetAddress.");
					continue;
				}
				
				// Check interface address against Capsd config information to determine 
				// if interface management state should be managed or unmanaged.
				boolean address_is_unmanaged = this.isAddressUnmanaged(ifAddress);
				if (log.isDebugEnabled())
				{
					log.debug("syncManagementState: " + ipaddress + " unmanaged based on capsd config?: " + address_is_unmanaged);
				}
				
				if (address_is_unmanaged)
				{
					// Interface not managed, check current
					// management state for this interface.
					if (ifEntry.getManagementState() != DbIpInterfaceEntry.STATE_UNMANAGED)
					{
						// Update management state to unmanaged for the 
						// interface as well as for its services.

						// Update the 'ipInterface' table
						ifUpdateStmt.setString(1, new String(new char[] { DbIpInterfaceEntry.STATE_UNMANAGED }));
						ifUpdateStmt.setInt(2, ifEntry.getNodeId());
						ifUpdateStmt.setString(3, ipaddress);
						ifUpdateStmt.executeUpdate();

						// Update the 'ifServices' table
						allSvcUpdateStmt.setString(1, new String(new char[] { DbIfServiceEntry.STATUS_UNMANAGED }));
						allSvcUpdateStmt.setInt(2, ifEntry.getNodeId());
						allSvcUpdateStmt.setString(3, ipaddress);
						allSvcUpdateStmt.executeUpdate();
					
						if (log.isDebugEnabled())
						{
							log.debug("syncManagementState: update completed for node/interface: " + 
							ifEntry.getNodeId() + "/" + ipaddress
							+ " to unmanaged");
						}
					}
				}
				else
				{
					// Interface should be managed - check the status against
					// poller config to see if interface will be polled
					// 
					// NOTE: Try to avoid re-evaluating the ip against filters for
					// each service, try to get the first package here and use
					// that for service evaluation
					//
					org.opennms.netmgt.config.poller.Package ipPkg = pollerCfgFactory.getFirstPackageMatch(ipaddress);
					boolean ipToBePolled = false;
					if (ipPkg != null)
						ipToBePolled = true;

					if (log.isDebugEnabled())
						log.debug("syncManagementState: " + ipaddress + " to be polled based on poller config?: " + ipToBePolled);

					if ((ifEntry.getManagementState() == DbIpInterfaceEntry.STATE_MANAGED  && ipToBePolled) ||
					   (ifEntry.getManagementState() == DbIpInterfaceEntry.STATE_NOT_POLLED && !ipToBePolled))
					{
						// current status is right
						if (log.isDebugEnabled())
							log.debug("syncManagementState: " + ipaddress + " - no change in status");
					}
					else
					{
						if (ipToBePolled)
							ifUpdateStmt.setString(1, new String(new char[] { DbIpInterfaceEntry.STATE_MANAGED }));
						else
							ifUpdateStmt.setString(1, new String(new char[] { DbIpInterfaceEntry.STATE_NOT_POLLED }));

						ifUpdateStmt.setInt(2, ifEntry.getNodeId());
						ifUpdateStmt.setString(3, ipaddress);
						ifUpdateStmt.executeUpdate();

						if (log.isDebugEnabled())
						{
							log.debug("syncManagementState: update completed for node/interface: " + 
							ifEntry.getNodeId() + "/" + ipaddress);
						}
					}

					// get services for this nodeid/ip and update
					svcRetStmt.setInt(1, ifEntry.getNodeId());
					svcRetStmt.setString(2, ipaddress);

					ResultSet svcRS = svcRetStmt.executeQuery();
					while(svcRS.next())
					{
						int svcId = svcRS.getInt(1);

						char svcStatus = DbIfServiceEntry.STATUS_UNKNOWN;
						String str = svcRS.getString(2);
						if(str != null)
							svcStatus = str.charAt(0);
				
						String svcName = (String)getServiceIdentifier(new Integer(svcId));
						//
						// try the first package that had the ip first, if
						// service is not enabled, try all packages
						//
						boolean svcToBePolled = false;
						char oldStatus = svcStatus;
						char newStatus = 'U';
						if (ipPkg != null)
						{
							svcToBePolled = pollerCfgFactory.isPolled(svcName, ipPkg);
							if (!svcToBePolled)
								svcToBePolled = pollerCfgFactory.isPolled(ipaddress, svcName);
						}

						if (log.isDebugEnabled())
							log.debug("syncManagementState: " + ipaddress + "/" + svcName + " to be polled based on poller config?: " + svcToBePolled);

						if ((svcStatus == DbIfServiceEntry.STATUS_ACTIVE  && svcToBePolled) ||
						    (svcStatus == DbIfServiceEntry.STATUS_NOT_POLLED && !ipToBePolled))
						{
							// current status is right
							if (log.isDebugEnabled())
								log.debug("syncManagementState: " + ifEntry.getNodeId() + "/" + ipaddress  + "/" + svcName + " status = " +svcStatus + " - no change in status");
						}
						else
						{
							// Update the 'ifServices' table
							if (svcStatus == DbIfServiceEntry.STATUS_SUSPEND  && svcToBePolled)
							{
								svcUpdateStmt.setString(1, new String(new char[] { DbIfServiceEntry.STATUS_FORCED }));
								newStatus = 'F';
							}
							else if (svcToBePolled)
							{
								svcUpdateStmt.setString(1, new String(new char[] { DbIfServiceEntry.STATUS_ACTIVE }));
								newStatus = 'A';
							}
							else
							{
								svcUpdateStmt.setString(1, new String(new char[] { DbIfServiceEntry.STATUS_NOT_POLLED }));
								newStatus = 'N';
							}
							svcUpdateStmt.setInt(2, ifEntry.getNodeId());
							svcUpdateStmt.setString(3, ipaddress);
							svcUpdateStmt.setInt(4, svcId);
							svcUpdateStmt.executeUpdate();
					
							if (log.isDebugEnabled())
							{
								log.debug("syncManagementState: update completed for node/interface/svc: " + 
								ifEntry.getNodeId() + "/" + ipaddress + "/" + svcName +
								" status changed from " + oldStatus + " to " + newStatus);
							}
						}

					} // end ifservices result
				} // interface managed
			} // end while
		}
		finally
		{
			// Close the prepared statements...
			try
			{
				ifUpdateStmt.close();
				allSvcUpdateStmt.close();
				svcRetStmt.close();
				svcUpdateStmt.close();
			}
			catch (Exception e)
			{
				if(log.isDebugEnabled())
				{
					log.debug("Exception while closing prepared statements", e);
				}
			}
		}
	}

