    /**
     * This method will construct the v3 security models in the SNMP4J library.
     * @param def
     */
    private void addUserToSecurityModel(Definition def) {
        OID authProtocol;
        OID privProtocol;
        OctetString authPassphrase;
        OctetString privPassphrase;
        OctetString securityName;
        securityName = null;
        authPassphrase = null;
        authProtocol = null;
        privPassphrase = null;
        privProtocol = null;
        
        if (def.getSecurityName() != null) {
            
            //Work on Authorization
            securityName = createOctetString(def.getSecurityName());
            if (def.getAuthPassphrase() != null) {
                authPassphrase = createOctetString(def.getAuthPassphrase());
                authProtocol = DEFAULT_AUTH_PROTOCOL;
                if (def.getAuthProtocol() != null) {
                    if (def.getAuthProtocol().equals("MD5")) {
                        authProtocol = AuthMD5.ID;
                    } else if (def.getAuthProtocol().equals("SHA")) {
                        authProtocol = AuthSHA.ID;
                    } else {
                        throw new IllegalArgumentException("Authentication protocol unsupported: " + def.getAuthProtocol());
                    }
                }
            }
            
            //Work on Privacy
            if (def.getPrivacyPassphrase() != null) {
                privPassphrase = createOctetString(def.getPrivacyPassphrase());
                privProtocol = DEFAULT_PRIV_PROTOCOL;
                if (def.getPrivacyProtocol() != null) {
                    if (def.getPrivacyProtocol().equals("DES")) {
                        privProtocol = PrivDES.ID;
                    } else if ((def.getPrivacyProtocol().equals("AES128")) || (def.getPrivacyProtocol().equals("AES"))) {
                        privProtocol = PrivAES128.ID;
                    } else if (def.getPrivacyProtocol().equals("AES192")) {
                        privProtocol = PrivAES192.ID;
                    } else if (def.getPrivacyProtocol().equals("AES256")) {
                        privProtocol = PrivAES256.ID;
                    } else {
                        throw new IllegalArgumentException("Privacy protocol " + def.getPrivacyProtocol() + " not supported");
                    }
                }
            }
            
            if (m_usm == null) {
                m_usm = new USM(SecurityProtocols.getInstance(), new OctetString(MPv3.createLocalEngineID()), 0);
                SecurityModels.getInstance().addSecurityModel(m_usm);
            }
            UsmUser user = new UsmUser(securityName, authProtocol, authPassphrase, privProtocol, privPassphrase);
            m_usm.addUser(securityName, user);
        }
    }

