	/**
	 * this method uses the passed address and definition to construct
	 * an appropriate SNMP peer object for use by an SnmpSession. 
	 *
	 * @param addr	The address to construct the snmp peer instance.
	 * @param def	The definition containing the appropriate information.
	 * @param supportedSnmpVersion	SNMP version to associate with the 
	 * 					peer object if SNMP version has
	 * 					not been explicitly configured.
	 *
	 * @return The SnmpPeer matching for the passed address.
	 */
	private SnmpPeer create(InetAddress addr, Definition def, int supportedSnmpVersion)
	{
		// Allocate a new SNMP parameters
		//
		SnmpParameters parms = new SnmpParameters();

		// get the version information, if any
		//
		// If version information is provided it will be used...
		// if not then the passed supportedSnmpVersion variable
		// will be used to set the peer's SNMP version.
		//
		if(def.getVersion() != null)
		{
			if(def.getVersion().equals("v1"))
				parms.setVersion(SnmpSMI.SNMPV1);
			else if(def.getVersion().equals("v2c"))
				parms.setVersion(SnmpSMI.SNMPV2);
		}
		else
		{
			// Verify valid SNMP version provided
			if (supportedSnmpVersion == SnmpSMI.SNMPV1 || 
				 supportedSnmpVersion == SnmpSMI.SNMPV2)
				parms.setVersion(supportedSnmpVersion);
			else
				parms.setVersion(SnmpSMI.SNMPV1);
		} 

		// setup the read community
		//
		if(def.getReadCommunity() != null)
		{
			parms.setReadCommunity(def.getReadCommunity());
		}
		else if(m_config.getReadCommunity() != null)
		{
			parms.setReadCommunity(m_config.getReadCommunity());
		}

		// setup the write community
		//
		if(def.getWriteCommunity() != null)
		{
			parms.setWriteCommunity(def.getWriteCommunity());
		}
		else if(m_config.getWriteCommunity() != null)
		{
			parms.setWriteCommunity(m_config.getWriteCommunity());
		}

		// Allocate a peer for this address
		// and set the parameters
		//
		SnmpPeer peer = new SnmpPeer(addr);
		peer.setParameters(parms);

		// setup the retries
		//
		if(def.hasRetry())
		{
			peer.setRetries(def.getRetry());
		}
		else if(m_config.hasRetry())
		{
			peer.setRetries(m_config.getRetry());
		}

		// setup the timeout
		//
		if(def.hasTimeout())
		{
			peer.setTimeout(def.getTimeout());
		}
		else if(m_config.hasTimeout())
		{
			peer.setTimeout(m_config.getTimeout());
		}

		// check for port changes
		//
		if(def.hasPort())
			peer.setPort(def.getPort());

		// return the peer
		//
		return peer;
	}

