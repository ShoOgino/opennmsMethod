    /**
     * @param poller
     * @return
     */
    private synchronized void createServiceMonitors() {
        Category log = ThreadCategory.getInstance(getClass());
    
        // Load up an instance of each monitor from the config
        // so that the event processor will have them for
        // new incomming events to create pollable service objects.
        //
        log.debug("start: Loading monitors");
    
        Enumeration eiter = enumerateMonitor();
        while (eiter.hasMoreElements()) {
            Monitor monitor = (Monitor) eiter.nextElement();
            try {
                if (log.isDebugEnabled()) {
                    log.debug("start: Loading monitor " + monitor.getService() + ", classname " + monitor.getClassName());
                }
                Class mc = Class.forName(monitor.getClassName());
                ServiceMonitor sm = (ServiceMonitor) mc.newInstance();
    
                // Attempt to initialize the service monitor
                //
                Map properties = null; // properties not currently used
                sm.initialize(this, properties);
    
                m_svcMonitors.put(monitor.getService(), sm);
            } catch (Throwable t) {
                if (log.isEnabledFor(Priority.WARN)) {
                    log.warn("start: Failed to load monitor " + monitor.getClassName() + " for service " + monitor.getService(), t);
                }
            }
        }
    }

