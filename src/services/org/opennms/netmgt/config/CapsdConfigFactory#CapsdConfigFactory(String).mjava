    /**
     * Constructs a new CapsdConfigFactory object for access to the Capsd
     * configuration information.
     * 
     * In addition to loading the configuration from the capsd-configuration.xml
     * file the constructor also inserts any plugins defined in the
     * configuration but not in the database into the 'service' table.
     * 
     * @param configFile
     *            The configuration file to load.
     * @exception java.io.IOException
     *                Thrown if the specified config file cannot be read
     * @exception org.exolab.castor.xml.MarshalException
     *                Thrown if the file does not conform to the schema.
     * @exception org.exolab.castor.xml.ValidationException
     *                Thrown if the contents do not match the required schema.
     */
    private CapsdConfigFactory(String configFile) throws IOException, MarshalException, ValidationException {
        InputStream cfgIn = new FileInputStream(configFile);

        m_config = (CapsdConfiguration) Unmarshaller.unmarshal(CapsdConfiguration.class, new InputStreamReader(cfgIn));
        cfgIn.close();

        // now load the plugins!
        // Map by protocol name and also by class name!
        //
        Enumeration eprotos = m_config.enumerateProtocolPlugin();
        while (eprotos.hasMoreElements()) {
            ProtocolPlugin plugin = (ProtocolPlugin) eprotos.nextElement();
            try {
                if (m_plugins.containsKey(plugin.getClassName())) {
                    Object oplugin = m_plugins.get(plugin.getClassName());
                    m_plugins.put(plugin.getProtocol(), oplugin);
                } else {
                    Class cplugin = Class.forName(plugin.getClassName());
                    Object oplugin = cplugin.newInstance();

                    // map them
                    //
                    m_plugins.put(plugin.getClassName(), oplugin);
                    m_plugins.put(plugin.getProtocol(), oplugin);
                }
            } catch (Throwable t) {
                ThreadCategory.getInstance(getClass()).error("CapsdConfigFactory: failed to load plugin for protocol " + plugin.getProtocol() + ", class-name = " + plugin.getClassName(), t);
            }
        }

        // load address from any specified URLs
        //

        // Load addresses from any urls which have been specified
        //
        m_urlMap = new HashMap();

        Enumeration e = m_config.enumerateIpManagement();
        while (e.hasMoreElements()) {
            IpManagement mgt = (IpManagement) e.nextElement();

            Enumeration f = mgt.enumerateIncludeUrl();
            while (f.hasMoreElements()) {
                String url = f.nextElement().toString();
                if (!m_urlMap.containsKey(url))
                    m_urlMap.put(url, getAddressesFromURL(url));
            }
        }
    }

