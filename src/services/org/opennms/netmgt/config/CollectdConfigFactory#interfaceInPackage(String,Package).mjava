    /**
     * This method is used to determine if the named interface is included in
     * the passed package definition. If the interface belongs to the package
     * then a value of true is returned. If the interface does not belong to the
     * package a false value is returned.
     * 
     * <strong>Note: </strong>Evaluation of the interface against a package
     * filter will only work if the IP is already in the database.
     * 
     * @param iface
     *            The interface to test against the package.
     * @param pkg
     *            The package to check for the inclusion of the interface.
     * 
     * @return True if the interface is included in the package, false
     *         otherwise.
     */
    public synchronized boolean interfaceInPackage(String iface, Package pkg) {
        Category log = ThreadCategory.getInstance(this.getClass());

        boolean filterPassed = interfaceInFilter(iface, pkg, log);

        if (!filterPassed)
            return false;

        //
        // Ensure that the interface is in the specific list or
        // that it is in the include range and is not excluded
        //

        long addr = IPSorter.convertToLong(iface);

        boolean has_range_include = hasIncludeRange(pkg, addr);
        boolean has_specific = hasSpecific(pkg, addr);

        has_specific = hasSpecificUrl(iface, pkg, has_specific);
        boolean has_range_exclude = hasExcludeRange(pkg, addr, has_specific);

        boolean packagePassed = has_specific || (has_range_include && !has_range_exclude);
        log.debug("interfaceInPackage: Interface " + iface + " passed filter and specific/range for package " + pkg.getName() + "?: " + packagePassed);
        return packagePassed;
    }

