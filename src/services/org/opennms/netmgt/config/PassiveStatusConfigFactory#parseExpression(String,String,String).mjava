	/**
     * Parses regular expressions and returns either the expr string
     * or the back reference(s) within the expression.  If the string begins
     * with "~", then it is treated as a regular expression begining with the
     * second character otherwise the expression is treated as a literal and
     * is returned without matching.
     * 
     * If no grouping is used in the string, then the entire match (group 0) is
     * returned.  If there is one or more groups, then the groups are returned
     * concatenated into one string.
     * 
     * Use the pattern to do a very limited printf style formatting of the string
     * using $1 - $9 to reference back references of the expr.  Example:
     *      value = "Channel 9"
     *      expr = "~^(Channel) (9)"
     *      formatPattern = "$1-$2"
     *      
     *      retValue will be: "Channel-9"
     *      
     * @param value
     * @param expr
     * @param formatPattern
     * @return a formatted regex/the literal/or empty string
     */
    public String parseExpression(String value, String expr, String formatPattern) {
        String retValue = "";
        if (expr.startsWith("~")) {
            Pattern p = Pattern.compile(expr.substring(1));
            Matcher m = p.matcher(value);
    
            if (m.matches()) {
                if (m.groupCount() == 0 || formatPattern == null) {
                    retValue = m.group(0);
                } else {
                    retValue = applyFormat(formatPattern, m);
                }
            }
            
        } else {
            //this, in-fact, makes the the field/parm value unused and takes
            //the literal of expr (the value in the config)
            retValue = expr;
        }
        
        return retValue;
    }

