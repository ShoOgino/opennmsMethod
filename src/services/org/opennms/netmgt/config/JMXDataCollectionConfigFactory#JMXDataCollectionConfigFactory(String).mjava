    /**
     * Private constructor
     * 
     * @exception java.io.IOException
     *                Thrown if the specified config file cannot be read
     * @exception org.exolab.castor.xml.MarshalException
     *                Thrown if the file does not conform to the schema.
     * @exception org.exolab.castor.xml.ValidationException
     *                Thrown if the contents do not match the required schema.
     */
    private JMXDataCollectionConfigFactory(String configFile) throws IOException, MarshalException, ValidationException {
        InputStream cfgIn = new FileInputStream(configFile);

        m_config = (JmxDatacollectionConfig) Unmarshaller.unmarshal(JmxDatacollectionConfig.class, new InputStreamReader(cfgIn));
        cfgIn.close();

        // Build collection map which is a hash map of Collection
        // objects indexed by collection name...also build
        // collection group map which is a hash map indexed
        // by collection name with a hash map as the value
        // containing a map of the collections's group names
        // to the Group object containing all the information
        // for that group. So the associations are:
        //
        // CollectionMap
        // collectionName -> Collection
        //
        // CollectionGroupMap
        // collectionName -> groupMap
        // 
        // GroupMap
        // groupMapName -> Group
        //
        // This is parsed and built at initialization for
        // faster processing at run-timne.
        // 
        m_collectionMap = new HashMap();
        m_collectionGroupMap = new HashMap();
        
        // BOZO isn't the collection name defined in the jmx-datacollection.xml file and
        // global to all the mbeans?
        java.util.Collection collections = m_config.getJmxCollectionCollection();
        Iterator citer = collections.iterator();
        while (citer.hasNext()) {
            org.opennms.netmgt.config.collectd.JmxCollection collection = (org.opennms.netmgt.config.collectd.JmxCollection) citer.next();

            // Build group map for this collection
            Map groupMap = new HashMap();

            Mbeans mbeans = collection.getMbeans();
            java.util.Collection groupList = mbeans.getMbeanCollection();
            Iterator giter = groupList.iterator();
            while (giter.hasNext()) {
                Mbean mbean = (Mbean) giter.next();
                groupMap.put(mbean.getName(), mbean);
            }

            m_collectionGroupMap.put(collection.getName(), groupMap);
            m_collectionMap.put(collection.getName(), collection);
        }
    }

