    /**
     * Return a new database connection to the database configured in the
     * <tt>opennms-database.xml</tt>. The database connection is not managed
     * by the factory and must be release by the caller by using the
     * <code>close</code> method.
     * 
     * @return a new database connection to the database configured in the
     *         <tt>opennms-database.xml</tt>
     * 
     * @throws java.sql.SQLException
     *             Thrown if there is an error opening the connection to the
     *             database.
     */
    public Connection getConnection() throws SQLException {

        // lock the database cache for the open
        //
        synchronized (m_dbcCache) {
            Category log = ThreadCategory.getInstance(getClass());
            boolean isTracing = log.isDebugEnabled();

            // look at each reference, removing those
            // that garbage collection has destroyed
            //
            CachedConnection cdbc = null;
            while (cdbc == null && !m_dbcCache.isEmpty()) {
                cdbc = (CachedConnection) m_dbcCache.removeFirst();
                synchronized (cdbc) {
                    if (cdbc.isAvailable() && cdbc.isBad()) {
                        if (isTracing)
                            log.debug("removed bad connection from pool [id=" + cdbc + "]");
                        continue;
                    } else if (cdbc.isAvailable()) {
                        // mark in use and return
                        // to caller. This will now be a
                        // strongly referenced instance
                        //
                        cdbc.markUsed();
                        if (isTracing)
                            log.debug("reusing previous connection [id=" + cdbc + "]");
                    }
                }

                if (!m_dbcCache.isEmpty()) {
                    long age = ((CachedConnection) m_dbcCache.getLast()).age();
                    if (age >= MAX_AGE) {
                        CachedConnection disconnect = (CachedConnection) m_dbcCache.removeLast();
                        if (isTracing)
                            log.debug("removing expired connection [id=" + disconnect + "]");

                        try {
                            disconnect.m_delegate.close();
                        } catch (SQLException e) {
                            if (isTracing)
                                log.debug("An error occured closing delegate", e);
                        }
                    } else if (isTracing) {
                        log.debug("stack bottom is " + age + "ms old");
                        log.debug("stack size is " + m_dbcCache.size());
                    }
                }
            }

            // unable to find one that was not in
            // use so a new one has been allocated
            //
            if (cdbc == null) {
                cdbc = new CachedConnection(DriverManager.getConnection(m_driverUrl, m_driverUser, m_driverPass), this);
                cdbc.markUsed();

                if (isTracing)
                    log.debug("created new JDBC connection, no previous reference available");
            }

            return cdbc;
        }
    }

