    /**
     * Returns the list of protocol plugins and the associated actions for the
     * named address. The currently loaded configuration is used to find, build,
     * and return the protocol information. The returns information has all the
     * necessary element to check the address for capabilities.
     * 
     * @param address
     *            The address to get protocol information for.
     * 
     * @return The array of protocol information instances for the address.
     * 
     */
    public ProtocolInfo[] getProtocolSpecification(InetAddress address) {
        // get a logger
        //
        Category log = ThreadCategory.getInstance(CapsdConfigFactory.class);
    
        // The list of protocols that will be turned into
        // and array and returned to the caller. These are
        // of type ProtocolInfo
        //
        List lprotos = new ArrayList(m_config.getProtocolPluginCount());
    
        // go through all the defined plugins
        //
        Enumeration eplugins = m_config.enumerateProtocolPlugin();
        PLUGINLOOP: while (eplugins.hasMoreElements()) {
            ProtocolPlugin plugin = (ProtocolPlugin) eplugins.nextElement();
            boolean found = false;
    
            // Loop through the specific and ranges to find out
            // if there is a particular protocol specification
            //
            Enumeration epluginconf = plugin.enumerateProtocolConfiguration();
            PLUGINCONFLOOP: while (epluginconf.hasMoreElements()) {
                ProtocolConfiguration pluginConf = (ProtocolConfiguration) epluginconf.nextElement();
    
                // Check specifics first
                //
                Enumeration espec = pluginConf.enumerateSpecific();
                while (espec.hasMoreElements() && !found) {
                    String saddr = (String) espec.nextElement();
                    try {
                        InetAddress taddr = InetAddress.getByName(saddr);
                        if (taddr.equals(address)) {
                            found = true;
                        }
                    } catch (UnknownHostException e) {
                        log.warn("CapsdConfigFactory: failed to convert address " + saddr + " to InetAddress", e);
                    }
                }
    
                // check the ranges
                //
                long laddr = IPSorter.convertToLong(address.getAddress());
                Enumeration erange = pluginConf.enumerateRange();
                while (erange.hasMoreElements() && !found) {
                    Range rng = (Range) erange.nextElement();
    
                    InetAddress start = null;
                    try {
                        start = InetAddress.getByName(rng.getBegin());
                    } catch (UnknownHostException e) {
                        log.warn("CapsdConfigFactory: failed to convert address " + rng.getBegin() + " to InetAddress", e);
                        continue;
                    }
    
                    InetAddress stop = null;
                    try {
                        stop = InetAddress.getByName(rng.getEnd());
                    } catch (UnknownHostException e) {
                        log.warn("CapsdConfigFactory: failed to convert address " + rng.getEnd() + " to InetAddress", e);
                        continue;
                    }
    
                    if (toLong(start) <= laddr && laddr <= toLong(stop)) {
                        found = true;
                    }
                }
    
                // if it has not be found yet then it's not
                // in this particular plugin conf, check the
                // next
                //
                if (!found)
                    continue;
    
                // if found then build protocol
                // specification if on, else next protocol.
                //
                String scan = null;
                if ((scan = pluginConf.getScan()) != null) {
                    if (scan.equals("enable")) {
                        lprotos.add(new ProtocolInfo(plugin.getProtocol(), (Plugin) m_plugins.get(plugin.getProtocol()), null, AUTO_SET));
                        continue PLUGINLOOP;
                    } else if (scan.equals("off")) {
                        continue PLUGINLOOP;
                    }
                } else if ((scan = plugin.getScan()) != null) {
                    if (scan.equals("off"))
                        continue PLUGINLOOP;
                }
    
                // it's either on specifically, or by default
                // so map it parameters
                //
                Map params = new TreeMap();
    
                // add the default first
                //
                Enumeration eparams = plugin.enumerateProperty();
                while (eparams.hasMoreElements()) {
                    Property p = (Property) eparams.nextElement();
                    params.put(p.getKey(), p.getValue());
                }
    
                eparams = pluginConf.enumerateProperty();
                while (eparams.hasMoreElements()) {
                    Property p = (Property) eparams.nextElement();
                    params.put(p.getKey(), p.getValue());
                }
    
                lprotos.add(new ProtocolInfo(plugin.getProtocol(), (Plugin) m_plugins.get(plugin.getProtocol()), params, SCAN));
            } // end ProtocolConfiguration loop
    
            if (!found) // use default config
            {
                // if found then build protocol
                // specification if on, else next protocol.
                //
                String scan = null;
                if ((scan = plugin.getScan()) != null) {
                    if (scan.equals("off"))
                        continue PLUGINLOOP;
                }
    
                // it's either on specifically, or by default
                // so map it parameters
                //
                Map params = new TreeMap();
    
                // add the default first
                //
                Enumeration eparams = plugin.enumerateProperty();
                while (eparams.hasMoreElements()) {
                    Property p = (Property) eparams.nextElement();
                    params.put(p.getKey(), p.getValue());
                }
    
                lprotos.add(new ProtocolInfo(plugin.getProtocol(), (Plugin) m_plugins.get(plugin.getProtocol()), params, SCAN));
            }
    
        } // end ProtocolPlugin
    
        // copy the protocol information to
        // the approriate array and return that
        // result
        //
        ProtocolInfo[] result = new ProtocolInfo[lprotos.size()];
    
        return (ProtocolInfo[]) lprotos.toArray(result);
    }

