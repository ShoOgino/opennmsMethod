    /**
     * Return if time is part of specified outage.
     * 
     * @param cal
     *            the calendar to lookup
     * @param out
     *            the outage
     * 
     * @return true if time is in outage
     */
    public synchronized boolean isTimeInOutage(Calendar cal, Outage out) {
        Category log = ThreadCategory.getInstance(getClass());

        if (log.isDebugEnabled())
            log.debug("isTimeInOutage: checking for time '" + cal.getTime() + "' in outage '" + out.getName() + "'");

        if (out == null)
            return false;

        long curCalTime = cal.getTime().getTime();

        // check if day is part of outage
        boolean inOutage = false;

        // flag indicating that day(which is optional) was not specified in the
        // time

        Enumeration e = out.enumerateTime();
        while (e.hasMoreElements() && !inOutage) {
            Calendar outCalBegin = new GregorianCalendar();
            Calendar outCalEnd = new GregorianCalendar();

            Time oTime = (Time) e.nextElement();

            String oTimeDay = oTime.getDay();
            String begins = oTime.getBegins();
            String ends = oTime.getEnds();

            if (oTimeDay != null) {
                // see if outage time was specified as sunday/monday..
                Integer dayInMap = (Integer) m_dayOfWeekMap.get(oTimeDay);
                if (dayInMap != null) {
                    // check if value specified matches current date
                    if (cal.get(Calendar.DAY_OF_WEEK) == dayInMap.intValue())
                        inOutage = true;

                    outCalBegin.set(Calendar.DAY_OF_WEEK, dayInMap.intValue());
                    outCalEnd.set(Calendar.DAY_OF_WEEK, dayInMap.intValue());
                }
                // else see if outage time was specified as day of month
                else {
                    int intOTimeDay = (new Integer(oTimeDay)).intValue();

                    if (cal.get(Calendar.DAY_OF_MONTH) == intOTimeDay)
                        inOutage = true;

                    outCalBegin.set(Calendar.DAY_OF_MONTH, intOTimeDay);
                    outCalEnd.set(Calendar.DAY_OF_MONTH, intOTimeDay);
                }
            }

            // if time of day was specified and did not match, continue
            if (oTimeDay != null && !inOutage)
                continue;

            // set time in out calendars
            setOutCalTime(outCalBegin, begins);
            setOutCalTime(outCalEnd, ends);

            // check if calendar passed is in the out cal range
            if (log.isDebugEnabled())
                log.debug("isTimeInOutage: checking begin/end time...\n current: " + cal.getTime() + "\n begin: " + outCalBegin.getTime() + "\n end: " + outCalEnd.getTime());
            long outCalBeginTime = outCalBegin.getTime().getTime();
            long outCalEndTime = outCalEnd.getTime().getTime();

            if (curCalTime >= outCalBeginTime && curCalTime <= outCalEndTime)
                inOutage = true;
            else
                inOutage = false;
        }

        return inOutage;

    }

