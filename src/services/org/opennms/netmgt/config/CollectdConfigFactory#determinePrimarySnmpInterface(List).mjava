	/**
	 * This method is responsbile for determining the node's primary SNMP interface
	 * from the specified list of InetAddress objects.
	 * 
	 * @param addressList  List of InetAddress objects representing all the
	 * 			interfaces belonging to a particular node which
	 *			support the "SNMP" service and have a valid ifIndex.
	 * 
	 * @return InetAddress object of the primary SNMP interface or null if none
	 *         of the node's interfaces are eligible.
	 */
	public synchronized InetAddress determinePrimarySnmpInterface(List addressList)
	{
		Category log = ThreadCategory.getInstance(CollectdConfigFactory.class);
		
		InetAddress primaryIf = null;
		
		// For now hard-coding primary interface address selection method to MIN
		String method = SELECT_METHOD_MIN;
		
		// To be selected as the the primary SNMP interface for a node
		// the interface must be included by a Collectd package and
		// that package must include the SNMP service and the service
		// must be enabled.
		//
		// Iterate over interface list and test each  interface
		//
		Iterator iter = addressList.iterator();
		while(iter.hasNext())
		{
			InetAddress ipAddr = (InetAddress)iter.next();
			if (log.isDebugEnabled())
				log.debug("determinePrimarySnmpIf: checking interface " + ipAddr.getHostAddress());
			primaryIf = compareAndSelectPrimaryCollectionInterface("SNMP", ipAddr, primaryIf, method);
		}

		if (log.isDebugEnabled())
			if (primaryIf != null)
				log.debug("determinePrimarySnmpInterface: selected primary SNMP interface: " + primaryIf.getHostAddress());
			else
				log.debug("determinePrimarySnmpInterface: no primary SNMP interface found");
		return primaryIf;
	}

