	/**
	 * This method is responsible for sync'ing the content of the 'service' table
	 * with the protocols listed in the caspd-configuration.xml file.  
	 * 
	 * First a list of services currently contained in the 'service' table in 
	 * the database is built.
	 * 
	 * Next, the list of services defined in capsd-configuration.xml is iterated
	 * over and if any services are defined but do not yet exist in the 'service'
	 * table they are added to the table.
	 * 
	 * Finally, the list of services in the database is iterated over and if 
	 * any service exists in the database but is no longer listed in the
	 * capsd-configuration.xml file then that the following occurs:
	 *    
	 * 	1. All 'outage' table entries which refer to the service are
	 *   	   deleted.
	 * 	2. All 'ifServices' table entries which refer to the service
	 * 	   are deleted.
	 *
	 * Note that the 'service' table entry will remain in the database
	 * since events most likely exist which refer to the service.
	 */
	public void syncServices(Connection conn)
		throws SQLException
	{ 
		Category log = ThreadCategory.getInstance();
		if (conn == null)
		{
			log.error("CapsdConfigFactory.syncServices: Sync failed...must have valid database connection.");
			return;
		}
		
		// synchronize configured services list with
		// the database
		//
		
		PreparedStatement insStmt = conn.prepareStatement(SVCTBL_ADD_SQL);
		PreparedStatement nxtStmt = conn.prepareStatement(NEXT_SVC_ID_SQL);
		PreparedStatement loadStmt= conn.prepareStatement(SVCTBL_LOAD_SQL);
		PreparedStatement delFromOutagesStmt = null;
		PreparedStatement delFromIfServicesStmt = null;

		try
		{
			// go ahead and load the table first if it 
			// can be loaded.
			//
			List serviceNames = new ArrayList();
			ResultSet rs = loadStmt.executeQuery();
			while(rs.next())
			{
				Integer id = new Integer(rs.getInt(1));
				String name = rs.getString(2);

				m_serviceIds.put(id, name);
				m_serviceIds.put(name, id);
				serviceNames.add(name);
			}
			rs.close();

			// Build list of configured protocols from the loaded
			// configuration
			List protocols = new ArrayList();
			Enumeration eplugin = m_config.enumerateProtocolPlugin();
			while(eplugin.hasMoreElements())
			{
				ProtocolPlugin plugin = (ProtocolPlugin)eplugin.nextElement();
				protocols.add(plugin.getProtocol());
			}
				
			// now iterate over the configured protocols
			// and make sure that each is represented in the database.
			//
			Iterator protos = protocols.iterator();
			while(protos.hasNext())
			{
				String protocol = (String)protos.next();
				if(!serviceNames.contains(protocol))
				{
					// get the next identifier
					//
					int id = -1;
					rs = nxtStmt.executeQuery();
					rs.next();
					id = rs.getInt(1);
					rs.close();

					insStmt.setInt(1, id);
					insStmt.setString(2, protocol);
					insStmt.executeUpdate();

					Integer xid = new Integer(id);
					m_serviceIds.put(xid, protocol);
					m_serviceIds.put(protocol, xid);
					
					serviceNames.add(protocol);
				}
			}
			
			// now iterate over the services from the 'service' table
			// and determine if any no longer exist in the list of
			// configured protocols
			//
			Iterator s = serviceNames.iterator();
			while(s.hasNext())
			{
				String service = (String)s.next();
				if (!protocols.contains(service))
				{
					if (log.isDebugEnabled())
						log.debug("syncServices: service " + service + " exists in the database but not in the Capsd config file.");
					
					// Delete 'outage' table entries which refer to the service
					Integer id = (Integer)m_serviceIds.get(service);
					
					if (log.isDebugEnabled())
						log.debug("syncServices: deleting all references to service id " + id + " from the Outages table.");
					delFromOutagesStmt = conn.prepareStatement(DELETE_OUTAGES_SQL);
					delFromOutagesStmt.setInt(1, id.intValue());
					delFromOutagesStmt.executeUpdate();
					
					// Delete 'ifServices' table entries which refer to the service
					if (log.isDebugEnabled())
						log.debug("syncServices: deleting all references to service id " + id + " from the IfServices table.");
					delFromIfServicesStmt = conn.prepareStatement(DELETE_IFSERVICES_SQL);
					delFromIfServicesStmt.setInt(1, id.intValue());
					delFromIfServicesStmt.executeUpdate();
				}
			}
		}
		finally
		{
			if (insStmt != null)
				insStmt.close();
			if (nxtStmt != null)
				nxtStmt.close();
			if (loadStmt != null)
				loadStmt.close();
			if (delFromOutagesStmt != null)
				delFromOutagesStmt.close();
			if (delFromIfServicesStmt != null)
				delFromIfServicesStmt.close();
		}
	}

