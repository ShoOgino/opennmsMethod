	/**
	 * This method is used by the Capabilities poller to lookup the
	 * SNMP peer information associated with the passed host. If 
	 * there is no specific information available then a default
	 * SnmpPeer instance is returned to the caller.
	 *
	 * @param host	The host for locating the SnmpPeer information.
	 * @param supportedSnmpVersion	SNMP version to associate with the 
	 * 					peer object if SNMP version has
	 * 					not been explicitly configured.
	 *
	 * @return The configured SnmpPeer information.
	 *
	 */
	public synchronized SnmpPeer getPeer(InetAddress host, int supportedSnmpVersion)
	{
		// Verify configuration information present!
		//
		if (m_config == null)
		{
			SnmpPeer peer = new SnmpPeer(host);
			
			// Verify valid SNMP version provided
			if (supportedSnmpVersion == SnmpSMI.SNMPV1 || 
				 supportedSnmpVersion == SnmpSMI.SNMPV2)
			{
				peer.getParameters().setVersion(supportedSnmpVersion);
			}
			
			return peer;
		}
		
		SnmpPeer peer = null;
		
		// Attempt to locate the node
		//
		Enumeration edef = m_config.enumerateDefinition();
		DEFLOOP: while(edef.hasMoreElements())
		{
			Definition def = (Definition)edef.nextElement();
			
			// check the specifics first
			//
			Enumeration espec = def.enumerateSpecific();
			while(espec.hasMoreElements())
			{
				String saddr = (String)espec.nextElement();
				try
				{
					InetAddress addr = InetAddress.getByName(saddr);
					if(addr.equals(host))
					{
						// get the information
						peer = create(addr, def, supportedSnmpVersion);
						break DEFLOOP;
					}
				}
				catch(UnknownHostException e)
				{
					Category log = ThreadCategory.getInstance(getClass());
					log.warn("SnmpPeerFactory: could not convert host " + saddr + " to InetAddress", e);
				}
			}
	
			// check the ranges
			//
			long lhost = toLong(host);
			Enumeration erange = def.enumerateRange();
			while(erange.hasMoreElements())
			{
				Range rng = (Range)erange.nextElement();
				try
				{
					InetAddress begin = InetAddress.getByName(rng.getBegin());
					InetAddress end   = InetAddress.getByName(rng.getEnd());
	
					long start = toLong(begin);
					long stop  = toLong(end);

					if(start <= lhost && lhost <= stop)
					{
						peer = create(host, def, supportedSnmpVersion);
						break DEFLOOP;
					}
				}
				catch(UnknownHostException e)
				{
					Category log = ThreadCategory.getInstance(getClass());
					log.warn("SnmpPeerFactory: could not convert host(s) "
						+ rng.getBegin() + " - "
						+ rng.getEnd() + " to InetAddress", e);
				}
			}
		} // end DEFLOOP

		if(peer == null)
		{
			// try defaults!
			//
			peer = new SnmpPeer(host);
			
			// Verify valid SNMP version provided
			if (supportedSnmpVersion == SnmpSMI.SNMPV1 || 
				 supportedSnmpVersion == SnmpSMI.SNMPV2)
			{
				peer.getParameters().setVersion(supportedSnmpVersion);
			}
			
			if(m_config.getReadCommunity() != null || m_config.getWriteCommunity() != null)
			{
				if(m_config.getReadCommunity() != null)
					peer.getParameters().setReadCommunity(m_config.getReadCommunity());
		
				if(m_config.getWriteCommunity() != null)
					peer.getParameters().setWriteCommunity(m_config.getWriteCommunity());
			}

			if(m_config.hasRetry())
				peer.setRetries(m_config.getRetry());

			if(m_config.hasTimeout())
				peer.setTimeout(m_config.getTimeout());
		}

		return peer;

	} // end getPeer();

