	/**
	 * This method updates the 'nodelabel' and 'nodelabelsource' fields of 
	 * the 'node' table for the specified nodeID.
	 *
	 * If nodeLabel parameter is NULL the method will first call computeLabel()
	 * and use the resulting NodeLabel object to update the database.
	 * 
	 * @param nodeID		Unique identifier of the node to be updated.
	 * @param nodeLabel	Object containing label and source values.
	 * @param dbConnection	SQL database connection
	 */
	public static void assignLabel(int nodeID, NodeLabel nodeLabel, Connection dbConnection)
		throws SQLException
	{
		Category log = ThreadCategory.getInstance(NodeLabel.class);
		if (nodeLabel == null)
		{
			if(log.isDebugEnabled())
			log.debug("NodeLabel.assignLabel: nodeLabel obj is null, computing label...");
			nodeLabel = computeLabel(nodeID, dbConnection);
		}
			
		// Issue SQL update to assign the 'nodelabel' && 'nodelabelsource' fields
		// of the 'node' table
		PreparedStatement stmt = dbConnection.prepareStatement(SQL_DB_UPDATE_NODE_LABEL);
		int column = 1;
		
		// Node Label
		if(log.isDebugEnabled())
		log.debug("NodeLabel.assignLabel: Node label: " + nodeLabel.getLabel() + " source: " + nodeLabel.getSource());
		if (nodeLabel.getLabel() != null)
		{
			// nodeLabel may not exceed MAX_NODELABEL_LEN.if it does truncate it
			String label = nodeLabel.getLabel();
			if (label.length() > MAX_NODE_LABEL_LENGTH)
				label = label.substring(0, MAX_NODE_LABEL_LENGTH);
			stmt.setString(column++, label);
		}
		else
			stmt.setNull(column++, java.sql.Types.VARCHAR);
			
		// Node Label Source
		stmt.setString(column++, String.valueOf(nodeLabel.getSource()));
		
		// Node ID
		stmt.setInt(column++, nodeID);
		
		try
		{
			// Issue database update
			stmt.executeUpdate();
		}
		catch(SQLException sqlE)
		{
			throw sqlE;
		}
		finally
		{
			stmt.close();
		}
	}

