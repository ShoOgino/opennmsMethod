	/**
	 * Utility method for loading the address and host name lists from a result set
	 * retrieved from the 'ipInterface' table of the database.
	 *
	 * @param rs	Database result set
	 * @param ipv4AddrList	List of IPv4Address objects representing the node's interfaces
	 * @param ipHostNameList  List of IP host names associated with the node's interfaces.
	 * 
	 * @throws SQLException if there is any problem processing the information in
	 *         the result set.
	 */
	private static void loadAddressList(ResultSet rs, List ipv4AddrList, List ipHostNameList)
		throws SQLException
	{
		Category log = ThreadCategory.getInstance(NodeLabel.class);
		
		// Process result set, store retrieved addresses/host names in lists
		while (rs.next())
		{
			IPv4Address ipv4Addr = new IPv4Address(rs.getString(1));
			ipv4AddrList.add(ipv4Addr);
			String hostName = rs.getString(2);
				
			// As a hack to get around the fact that the 'iphostname' field
			// will contain the IP address of the interface if the IP hostname
			// was not available we check to see if the hostname and  address
			// are equivalent.  The hostname is only added if they are different.
			// If the are the same, an empty string is added to the host name list.
			if (hostName == null || hostName.equals(ipv4Addr.toString()))
				ipHostNameList.add("");
			else
				ipHostNameList.add(hostName);
					
			if(log.isDebugEnabled())
			log.debug("NodeLabel.computeLabel: adding address " + ipv4Addr.toString() + " with hostname: " + hostName);
		}
	}

