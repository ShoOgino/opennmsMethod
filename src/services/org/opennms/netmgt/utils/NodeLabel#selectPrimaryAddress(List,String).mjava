	/**
	 * Returns the primary interface from a list of addresses based on the 
	 * specified selection method.
	 *
	 * @param ipv4AddrList 	List of addresses from which to select the primary interface.
	 * @param method       	String (either "min" or "max") which indicates how the primary
	 * 			interface is to be selected.
	 * 
	 * @return The IPv4Address object from the address list which has been selected
	 * 	   as the primary interface.
	 */
	private static IPv4Address selectPrimaryAddress(List ipv4AddrList, String method)
	{
		Category log = ThreadCategory.getInstance(NodeLabel.class);
		
		// Determine which interface is the primary interface
		// (ie, the interface whose IP address when converted to an
		// integer is the smallest or largest depending upon the 
		// configured selection method.)
		IPv4Address primaryAddr = null;
		Iterator iter = ipv4AddrList.iterator();
		while (iter.hasNext())
		{
			if (primaryAddr == null)
			{
				primaryAddr = (IPv4Address)iter.next();
				
				if(log.isDebugEnabled())
				log.debug("NodeLabel.computeLabel: primaryAddr: " + primaryAddr.toString());
			}
			else
			{
				IPv4Address currentAddr = (IPv4Address)iter.next();
				
				int current = currentAddr.getAddress();
				int primary = primaryAddr.getAddress();
				
				//
				// If the addresses are 128.0.0.0 or greater then
				// we will have to wrap them back into the correct
				// domain
				//
				if(current < 0)
					current += ((long)Integer.MAX_VALUE) + 1L;
					
				if(primary < 0)
					primary += ((long)Integer.MAX_VALUE) + 1L;
				
				if(log.isDebugEnabled())
				log.debug("NodeLabel.computeLabel: comparing current: " + current + " with primary: " + primary + " using method: " + method);

				if (method.equals(SELECT_METHOD_MIN))
				{
					// Smallest address wins
					if (current < primary)
					{
						primaryAddr = currentAddr;
						if(log.isDebugEnabled())
						log.debug("NodeLabel.computeLabel: new primaryAddr: " + primaryAddr.toString());
					}
				}
				else 
				{
					// Largest address wins
					if (current > primary)
					{
						primaryAddr = currentAddr;
						if(log.isDebugEnabled())
						log.debug("NodeLabel.computeLabel: new primaryAddr: " + primaryAddr.toString());
					}
				}
			}
		}
		
		return primaryAddr;
	}

