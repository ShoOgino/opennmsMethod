    /**
     * The <B>exec(String) </B> method runs a process inside of a watched
     * thread. It returns the client's exit code and feeds its STDOUT and STDERR
     * to ExecRunner's out and err strings, where you then use getOutString()
     * and getErrString() to obtain these values. Example:
     * 
     * <pre>
     * 
     * // Execute the program and grab the results
     * try {
     *     ExecRunner er = new ExecRunner();
     *     er.setMaxRunTimeSecs(5);
     *     er.exec(&quot;ls -l&quot;);
     *     if (!er.getMaxRunTimeExceeded()) {
     *         out = er.getOutString();
     *         err = er.getErrString();
     *     } else {
     *         System.out.println(&quot;Maximum run time exceeded!&quot;);
     *     }
     * } catch (Exception e) {
     *     System.out.println(&quot;Error executing &quot; + program + &quot;: &quot; + e.getMessage());
     *     continue;
     * }
     * </pre>
     * 
     * @return The command's return code
     * @param command
     *            The program or command to run
     * @throws IOException
     *             thrown if a problem occurs
     * @throws InterruptedException
     *             thrown if a problem occurs
     */
    public int exec(String command) throws IOException, InterruptedException {

        StringWriter swOut = new StringWriter();
        PrintWriter pwOut = new PrintWriter(swOut, true);

        StringWriter swErr = new StringWriter();
        PrintWriter pwErr = new PrintWriter(swErr, true);

        int rc = exec(command, pwOut, pwErr);

        out = swOut.toString();
        err = swErr.toString();

        return rc;

    }

