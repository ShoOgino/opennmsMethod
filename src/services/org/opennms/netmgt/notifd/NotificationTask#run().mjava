	/**
	*/
	public void run()
	{
		Category log = ThreadCategory.getInstance(getClass());
		
                boolean responded = false;
                try { 
                        responded = NotificationFactory.noticeOutstanding(m_notifyId);
                }
                catch (Exception e)
                {
                        log.error("Unable to get response status on notice #" + m_notifyId, e);
                }
                
		//check to see if someone has responded, if so remove all the brothers 
                if (responded)
		{
			try
			{
				if (UserFactory.getInstance().isUserOnDuty(m_user.getUserId(), Calendar.getInstance()))
				{
                                        //send the notice
                                        CommandExecutor command = new CommandExecutor();
					
                                        for (int i = 0; i < m_commands.length; i++)
					{
						NotificationFactory.updateNoticeWithUserInfo(m_user.getUserId(), 
                                                                                             m_notifyId, 
                                                                                             m_commands[i].getName(),
                                                                                             UserFactory.getInstance().getContactInfo(m_user.getUserId(),
                                                                                                                                      m_commands[i].getName()));
                                                
                                                int returnCode = command.execute(m_commands[i].getExecute(), getArgumentList(m_commands[i]));
						log.debug("command " + m_commands[i].getName() + " return code = " + returnCode);
					}
				}
				else
				{
					log.debug("User " + m_user.getUserId() + " is not on duty, skipping...");
				}
			}
			catch (SQLException e)
			{
				log.debug("Could not insert notice info into database, aborting send notice...", e);
			}
			catch (IOException e)
			{
				log.debug("Could not get user duty schedule information: ", e);
			}
			catch (MarshalException e)
			{
				log.debug("Could not get user duty schedule information: ", e);
			}
			catch (ValidationException e)
			{
				log.debug("Could not get user duty schedule information: ", e);
			}
		}
		else
		{
                        //remove all the related notices that have yet to be sent
			for (int i = 0; i < m_siblings.size(); i++)
			{
				NotificationTask task = (NotificationTask)m_siblings.get(i);
				m_notifTree.remove(task);
			}
		}
	}

