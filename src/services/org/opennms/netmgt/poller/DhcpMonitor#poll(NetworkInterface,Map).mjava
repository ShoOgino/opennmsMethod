	/**
	 * <P>Poll the specified address for DHCP service availability</P>
	 *
	 * @param iface		The network interface to test the service on.
	 * @param parameters	The package parameters (timeout, retry, etc...) to be 
	 *  used for this poll.
	 *
	 * @return The availability of the interface and if a transition event
	 * 	should be supressed.
	 *
	 */
	public int poll(NetworkInterface iface, Map parameters) 
	{
		// Get interface address from NetworkInterface
		//
		if (iface.getType() != iface.TYPE_IPV4)
			throw new NetworkInterfaceNotSupportedException("Unsupported interface type, only TYPE_IPV4 currently supported");

		// Process parameters
		//
		Category log = ThreadCategory.getInstance(getClass());

		// Retries
		//
		int retry = ParameterMap.getKeyedInteger(parameters, "retry", DEFAULT_RETRY);
		int timeout = ParameterMap.getKeyedInteger(parameters, "timeout", DEFAULT_TIMEOUT);
		String rrdPath = ParameterMap.getKeyedString(parameters, "rrd-repository", null);
                String dsName = ParameterMap.getKeyedString(parameters, "ds-name", null);

		if (rrdPath == null)
		{
			log.info("poll: RRD repository not specified in parameters, latency data will not be stored.");
		}

                if (dsName == null)
                {
                        dsName = DS_NAME;
                }

		// Get interface address from NetworkInterface
		//
		InetAddress ipv4Addr = (InetAddress)iface.getAddress();

		if(log.isDebugEnabled())
			log.debug("DhcpMonitor.poll: address: " + ipv4Addr + " timeout: " + timeout + " retry: " + retry);
		
		int serviceStatus = ServiceMonitor.SERVICE_UNAVAILABLE;
		long responseTime = -1;
		try
		{
			// Dhcpd.isServer() returns the response time in milliseconds
			// if the remote box is a DHCP server or -1 if the remote
			// box is NOT a DHCP server.
			// 
			responseTime = Dhcpd.isServer(ipv4Addr, (long)timeout, retry);
			if (responseTime >= 0)
			{
				serviceStatus = ServiceMonitor.SERVICE_AVAILABLE;
			}
		}
		catch(IOException ioE)
		{
			ioE.fillInStackTrace();
			log.warn("DhcpMonitor.poll: An I/O exception occured during DHCP discovery", ioE);
		}

		// Store response time if available
		//
		if (serviceStatus == ServiceMonitor.SERVICE_AVAILABLE)
		{
			// Store response time in RRD
			if (responseTime >= 0 && rrdPath != null)
				this.updateRRD(m_rrdInterface, rrdPath, ipv4Addr, dsName, responseTime);
		}
		
		//
		// return the status of the service
		//
		return serviceStatus;
	}

