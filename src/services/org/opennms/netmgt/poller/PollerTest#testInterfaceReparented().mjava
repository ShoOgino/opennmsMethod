    // interfaceReparented: EventConstants.INTERFACE_REPARENTED_EVENT_UEI
    public void testInterfaceReparented() {
        m_pollerConfig.setNodeOutageProcessingEnabled(true);

        MockNode node1 = m_network.getNode(1);
        MockNode node2 = m_network.getNode(2);

        MockInterface node1Iface = m_network.getInterface(1, "192.168.1.1");
        MockInterface reparentedIface = m_network.getInterface(1, "192.168.1.2");
        MockInterface node2Iface = m_network.getInterface(2, "192.168.1.3");

        Event reparentEvent = MockUtil.createReparentEvent("Test", "192.168.1.2", 1, 2);

        // we are going to repart to node 2 so when we bring down its only
        // current interface
        // we expect an interface down not the whole node.
        EventAnticipator anticipator = m_eventMgr.getEventAnticipator();
        anticipateInterfaceStatusChanged(node2Iface, anticipator, ServiceMonitor.SERVICE_UNAVAILABLE);

        m_poller.init();
        m_poller.start();

        // move the reparted interface and send a reparted event
        reparentedIface.moveTo(node2);
        m_eventMgr.sendEventToListeners(reparentEvent);

        // now bring down the other interface on the new node
        // System.err.println("Bring Down:"+node2Iface);
        node2Iface.bringDown();

        assertEquals(0, anticipator.waitForAnticipated(2000).size());
        assertEquals(0, anticipator.unanticipatedEvents().size());

        // FIXME: the event below is the CORRECT answer but the Poller isn't
        // doing
        // that. I'm going to test for the INCORRECT answer so I can tell if I
        // change the behavior during refactoring.
        // we now bring down the reparented interface and we should get node2
        // down
        // anticipator.reset();
        // anticipateNodeStatusChanged(node2, anticipator,
        // ServiceMonitor.SERVICE_UNAVAILABLE);

        // FIXME: BEGIN INCORRECT BEHAVIOR HERE
        anticipator.reset();
        anticipator.anticipateEvent(MockUtil.createEvent("Test", EventConstants.NODE_DOWN_EVENT_UEI, 1, null, null));
        anticipator.anticipateEvent(MockUtil.createEvent("Test", EventConstants.NODE_LOST_SERVICE_EVENT_UEI, 2, "192.168.1.2", "ICMP"));
        // FIXME: END INCORRECT BEHAVIOR HERE

        // System.err.println("Bring Down:"+reparentedIface);
        reparentedIface.bringDown();

        sleep(5000);

        // MockUtil.printEvents("Anticipated",
        // anticipator.waitForAnticipated(2000));
        assertEquals(0, anticipator.waitForAnticipated(3000).size());
        assertEquals(0, anticipator.unanticipatedEvents().size());

    }

