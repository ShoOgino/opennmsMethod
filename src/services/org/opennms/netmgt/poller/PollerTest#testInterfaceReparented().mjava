    // interfaceReparented: EventConstants.INTERFACE_REPARENTED_EVENT_UEI
    public void testInterfaceReparented() {

        m_pollerConfig.setNodeOutageProcessingEnabled(true);

        MockNode node1 = m_network.getNode(1);
        MockNode node2 = m_network.getNode(2);

        MockInterface node1Iface = m_network.getInterface(1, "192.168.1.1");
        MockInterface reparentedIface = m_network.getInterface(1, "192.168.1.2");
        MockInterface node2Iface = m_network.getInterface(2, "192.168.1.3");
        

        Event reparentEvent = MockUtil.createReparentEvent("Test", "192.168.1.2", 1, 2);

        // we are going to reparent to node 2 so when we bring down its only
        // current interface we expect an interface down not the whole node.
        anticipateDown(node2Iface);

        startDaemons();

        // move the reparted interface and send a reparented event
        m_db.reparentInterface(reparentedIface.getIpAddr(), reparentedIface.getNodeId(), node2.getNodeId());
        reparentedIface.moveTo(node2);
        m_eventMgr.sendEventToListeners(reparentEvent);

        // now bring down the other interface on the new node
        // System.err.println("Bring Down:"+node2Iface);
        node2Iface.bringDown();

        verifyAnticipated(2000);

        // FIXME: the event below is the CORRECT answer but the Poller isn't
        // doing that. I'm going to test for the INCORRECT answer so I can tell if I
        // change the behavior during refactoring. We now bring down the reparented 
        // interface and we should get node2 down
        // m_anticipator.reset();
        // m_anticipator.anticipateEvent(node2.createDownEvent());

        resetAnticipated();
        anticipateDown(node1);
        anticipateDown(reparentedIface);
        // FIXME: END INCORRECT BEHAVIOR HERE

        // System.err.println("Bring Down:"+reparentedIface);
        reparentedIface.bringDown();

        sleep(5000);

        verifyAnticipated(6000);

    }

