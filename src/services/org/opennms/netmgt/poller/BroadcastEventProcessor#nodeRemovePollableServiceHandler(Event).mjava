	/**
	 * This method is responsible for removing a node's
	 * pollable service from the pollable services list
	 */
	private void nodeRemovePollableServiceHandler(Event event)
	{
		Category log = ThreadCategory.getInstance(getClass());

		int nodeId = (int)event.getNodeid();
		String intfc = event.getInterface();
		String svc = event.getService();

		PollableNode pNode = Poller.getInstance().getNode(nodeId);
		if (pNode == null)  // Sanity check
		{
			log.error("Nodeid " + nodeId + " does not exist in pollable node map, unable to remove service from pollable services list.");
			return;
		}

		PollableInterface pInterface = pNode.getInterface(event.getInterface());
		if (pInterface == null)  // Sanity check
		{
			log.error("Interface " + intfc + "on node " + nodeId + " does not exist in pollable node map, unable to remove service from pollable services list.");
			return;
		}

		PollableService pService = pInterface.getService(event.getService());
		if (pService == null)  // Sanity check
		{
			log.error("Service " + svc + "on Interface " + intfc + "on node " + nodeId + " does not exist in pollable node map, unable to remove service from pollable services list.");
			return;
		}

		// acquire lock to 'PollableNode'
		//
		boolean ownLock = false;
		try
		{
			// Attempt to obtain node lock...wait as long as it takes.
			//
			if (log.isDebugEnabled())
				log.debug("nodeRemovePollableServiceHandler: Trying to get node lock for nodeId " + nodeId);

			ownLock = pNode.getNodeLock(WAIT_FOREVER);
			if (ownLock)
			{
				if (log.isDebugEnabled())
					log.debug("nodeRemovePollableServiceHandler: obtained node lock for nodeid: " + nodeId);

				// Mark the service as deleted
				pService.markAsDeleted();
				if (log.isDebugEnabled())
					log.debug("nodeRemovePollableServiceHandler: Marking service " + svc + " for deletion from active polling on node " + nodeId);
			}
			else
			{
				// failed to acquire lock
				log.error("nodeRemovePollableServiceHandler: failed to obtain lock on nodeId " + nodeId);
			}
		}
		catch (InterruptedException iE)
		{
			// failed to acquire lock
			log.error("nodeRemovePollableServiceHandler: thread interrupted...failed to obtain lock on nodeId " + nodeId);
		}
		catch (Throwable t)
		{
			log.error("exception caught processing suspendPollingService event for " + nodeId, t);
		}
		finally
		{
			if (ownLock)
			{
				if (log.isDebugEnabled())
					log.debug("nodeRemovePollableServiceHandler: releasing node lock for nodeid: " + nodeId);
				try
				{
					pNode.releaseNodeLock();
				}
				catch (InterruptedException iE)
				{
					log.error("nodeRemovePollableServiceHandler: thread interrupted...failed to release lock on nodeId " + nodeId);
				}
			}
		}
	}

