	/**
	 * <P>Poll the specified address for FTP service availability</P>
	 *
	 * <P>During the poll an attempt is made to connect on the specified
	 * port (by default TCP port 21).  If the connection request is
	 * successful, the banner line generated by the interface is parsed
	 * and if the extracted return code indicates that we are talking to
	 * an FTP server we continue.  Next, an FTP 'QUIT' command is sent.
	 * Provided that the interface's response is valid we set the
	 * service status to SERVICE_AVAILABLE and return.</P>
	 * @param iface		The network interface to test the service on.
	 * @param parameters	The package parameters (timeout, retry, etc...) to be 
	 *  used for this poll.
	 *
	 * @return The availibility of the interface and if a transition event
	 * 	should be supressed.
	 *
	 */
	public int poll(NetworkInterface iface, Map parameters) 
	{
		// check the interface type
		//
		if(iface.getType() != NetworkInterface.TYPE_IPV4)
			throw new NetworkInterfaceNotSupportedException("Unsupported interface type, only TYPE_IPV4 currently supported");


		// Get the category logger
		//
		Category log = ThreadCategory.getInstance(getClass());

		// get the parameters
		//
		int retry   = ParameterMap.getKeyedInteger(parameters, "retry", DEFAULT_RETRY);
		int port    = ParameterMap.getKeyedInteger(parameters, "port", DEFAULT_PORT);
		int timeout = ParameterMap.getKeyedInteger(parameters, "timeout", DEFAULT_TIMEOUT);
		String userid   = ParameterMap.getKeyedString(parameters, "userid", null);
		String password = ParameterMap.getKeyedString(parameters, "password", null);

		// Extract the address
		//
		InetAddress ipv4Addr = (InetAddress)iface.getAddress();

		if (log.isDebugEnabled())
			log.debug("FtpMonitor.poll: Polling interface: " + ipv4Addr.getHostAddress() + " timeout: " + timeout + " retry: " + retry);
		
		int serviceStatus = ServiceMonitor.SERVICE_UNAVAILABLE;
		for (int attempts=0; attempts <= retry && serviceStatus != ServiceMonitor.SERVICE_AVAILABLE; attempts++)
		{
			Socket portal = null;
			try
			{
				//
				// create a connected socket
				//
				portal = new Socket(ipv4Addr, port);
				// We're connected, so upgrade status to unresponsive
				serviceStatus = SERVICE_UNRESPONSIVE;
				portal.setSoTimeout(timeout);

				BufferedReader lineRdr = new BufferedReader(new InputStreamReader(portal.getInputStream()));
				
				// Tokenize the Banner Line, and check the first 
				// line for a valid return.
				//
				String banner = lineRdr.readLine();
				if (banner == null)
					continue;
				if (MULTILINE.match(banner))
				{
					// Ok we have a multi-line response...first three
					// chars of the response line are the return code.
					// The last line of the response will start with 
					// return code followed by a space.
					String multiLineRC = new String(banner.getBytes(), 0, 3) + " ";
								
					// Create new regExp to look for last line
					// of this mutli line response
					try
					{
						ENDMULTILINE = new RE(multiLineRC);
					}
					catch(RESyntaxException ex)
					{
						throw new java.lang.reflect.UndeclaredThrowableException(ex);
					}
					
					// read until we hit the last line of the multi-line
					// response
					do
					{
						banner = lineRdr.readLine();
					} while (banner != null && !ENDMULTILINE.match(banner));
					if (banner == null)
						continue;
				}

				StringTokenizer t = new StringTokenizer(banner);
				
				int rc = -1;
				try
				{
					rc = Integer.parseInt(t.nextToken());
				}
				catch(NumberFormatException nfE)
				{
					nfE.fillInStackTrace();
					log.warn("Banner page returned invalid result code", nfE);
				}
				
				// Verify that return code is in proper range.
				//
				if (rc >=200 && rc <=299) 
				{
					// 
					// Attempt to login if userid and password available
					//
					boolean bLoginOk = false;
					if (userid == null || userid.length() == 0 || password == null || password.length() == 0)
					{
						bLoginOk = true;
					}
					else
					{
						// send the use string
						//
						String cmd = "user " + userid + "\r\n";
						portal.getOutputStream().write(cmd.getBytes());

						// get the response code.
						//
						String response = null;
						do
						{
							response = lineRdr.readLine();
						} while(response != null && MULTILINE.match(response));
						if (response == null)
							continue;

						t = new StringTokenizer(response);
						rc = Integer.parseInt(t.nextToken());

						// Verify that return code is in proper range.
						//
						if (rc >=200 && rc <=399)
						{
							// send the password
							//
							cmd = "pass " + password + "\r\n";
							portal.getOutputStream().write(cmd.getBytes());
		
							// get the response...check for multi-line response
							//
							response = lineRdr.readLine();							
							if (response == null)
								continue;
								
							if (MULTILINE.match(response))
							{
								// Ok we have a multi-line response...first three
								// chars of the response line are the return code.
								// The last line of the response will start with 
								// return code followed by a space.
								String multiLineRC = new String(response.getBytes(), 0, 3) + " ";
									
								// Create new regExp to look for last line
								// of this mutli line response
								try
								{
									ENDMULTILINE = new RE(multiLineRC);
								}
								catch(RESyntaxException ex)
								{
									throw new java.lang.reflect.UndeclaredThrowableException(ex);
								}
								
								// read until we hit the last line of the multi-line
								// response
								do
								{
									response = lineRdr.readLine();
								} while (response != null && !ENDMULTILINE.match(response));
								if (response == null)
									continue;
							}
							
							// Verify that return code is in proper range.
							//
							if (log.isDebugEnabled())
								log.debug("FtpMonitor.poll: tokenizing respone to check for return code: " + response);
							t = new StringTokenizer(response);
							rc = Integer.parseInt(t.nextToken());
							if (rc >=200 && rc <=299)
							{
								if (log.isDebugEnabled())
									log.debug("FtpMonitor.poll: Login successful, parsed return code: " + rc);
								bLoginOk = true;
							}
							else
							{
								if (log.isDebugEnabled())
									log.debug("FtpMonitor.poll: Login failed, parsed return code: " + rc);
								bLoginOk = false;
							}
						}
					}
					
					if (bLoginOk)
					{
						// FTP should recognize the QUIT command
						//
						String cmd = "QUIT\r\n";
						portal.getOutputStream().write(cmd.getBytes());
					
						// get the returned string, tokenize, and 
						// verify the correct output.
						//
						String response = lineRdr.readLine();
						if (response == null)
							continue;							
						if (MULTILINE.match(response))
						{
							// Ok we have a multi-line response...first three
							// chars of the response line are the return code.
							// The last line of the response will start with 
							// return code followed by a space.
							String multiLineRC = new String(response.getBytes(), 0, 3) + " ";
									
							// Create new regExp to look for last line
							// of this mutli line response
							try
							{
								ENDMULTILINE = new RE(multiLineRC);
							}
							catch(RESyntaxException ex)
							{
								throw new java.lang.reflect.UndeclaredThrowableException(ex);
							}
							
							// read until we hit the last line of the multi-line
							// response
							do
							{
								response = lineRdr.readLine();
							} while (response != null && !ENDMULTILINE.match(response));
							
							if (response == null)
								continue;
						}

						t = new StringTokenizer(response);
						rc = Integer.parseInt(t.nextToken());
						
						// Verify that return code is in proper range.
						//

						if (rc >=200 && rc <=299) 
						{
							serviceStatus = ServiceMonitor.SERVICE_AVAILABLE;
						} 
						// Special Case:  Also want to accept the following ERROR message
						// generated by some FTP servers following a QUIT command without
						// a previously successful login:
						//
						// "530 QUIT  : User not logged in. Please login with USER and PASS first."
						//
						else if (rc == 530 && response.indexOf(FTP_ERROR_530_TEXT) != -1)
						{
							serviceStatus = ServiceMonitor.SERVICE_AVAILABLE;
						}
					}
				}
				
				// If we get this far and the status has not been set
				// to available, then something didn't verify during
				// the banner checking or login/QUIT command process.
				if (serviceStatus != ServiceMonitor.SERVICE_AVAILABLE)
				{
					serviceStatus = ServiceMonitor.SERVICE_UNAVAILABLE;
				}
			}
			catch(NumberFormatException e)
			{
				// Ignore
				e.fillInStackTrace();
				log.info("FtpMonitor.poll: NumberFormatException while polling address: " + ipv4Addr, e);
			}
			catch(NoRouteToHostException e)
			{
				e.fillInStackTrace();
				log.warn("FtpMonitor.poll: No route to host exception for address: " + ipv4Addr, e);
				break; // Break out of for(;;)
			}
			catch(ConnectException e)
			{
				// Ignore
				e.fillInStackTrace();
				log.debug("FtpMonitor.poll: Connection exception for address: " + ipv4Addr, e);
			}
			catch(IOException e)
			{
				// Ignore
				e.fillInStackTrace();
				log.debug("FtpMonitor.poll: IOException while polling address: " + ipv4Addr, e);
			}
			finally
			{
				try
				{
					// Close the socket
					if(portal != null)
						portal.close();
				}
				catch(IOException e) 
				{
					e.fillInStackTrace();
					log.debug("FtpMonitor.poll: Error closing socket.", e);
				}
			}
		}
	
		//
		// return the status of the service
		//
		return serviceStatus;
	}

