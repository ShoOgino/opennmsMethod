    /**
     * This method is responsible for removing a node's pollable service from
     * the pollable services list
     */
    private void nodeRemovePollableServiceHandler(Event event) {
        Category log = ThreadCategory.getInstance(getClass());

        int nodeId = (int) event.getNodeid();
        String intfc = event.getInterface();
        String svc = event.getService();

        final PollableNode pNode = getPoller().findNode(nodeId);
        if (pNode == null) // Sanity check
        {
            log.error("Nodeid " + nodeId + " does not exist in pollable node map, unable to remove service from pollable services list.");
            return;
        }

        PollableInterface pInterface = pNode.findInterface(event.getInterface());
        if (pInterface == null) // Sanity check
        {
            log.error("Interface " + intfc + "on node " + nodeId + " does not exist in pollable node map, unable to remove service from pollable services list.");
            return;
        }

        final PollableService pService = pInterface.findService(event.getService());
        if (pService == null) // Sanity check
        {
            log.error("Service " + svc + "on Interface " + intfc + "on node " + nodeId + " does not exist in pollable node map, unable to remove service from pollable services list.");
            return;
        }

        NodeLocker locker = new NodeLocker(pNode, "nodeRemovePollableServiceHandler") {
            protected void process() {
                Category log = ThreadCategory.getInstance(getClass());
                pService.markAsDeleted();
                if (log.isDebugEnabled())
                    log.debug("nodeRemovePollableServiceHandler: Marking service " + pService.getServiceName() + " for deletion from active polling on node " + pNode.getNodeId());
            }
        };
        locker.lockAndProcess();
    }

