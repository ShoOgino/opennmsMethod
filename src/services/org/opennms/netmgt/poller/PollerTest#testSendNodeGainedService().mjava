    // send a nodeGainedService event:
    // EventConstants.NODE_GAINED_SERVICE_EVENT_UEI
    public void testSendNodeGainedService() {

        m_pollerConfig.setNodeOutageProcessingEnabled(false);

        startPoller();

        MockNode node = m_network.addNode(3, "TestNode");
        m_db.writeNode(node);
        MockInterface iface = m_network.addInterface(3, "10.1.1.1");
        m_db.writeInterface(iface);
        MockService element = m_network.addService(3, "10.1.1.1", "HTTP");
        m_db.writeService(element);
        m_pollerConfig.addService(element);

        MockVisitor gainSvcSender = new MockVisitorAdapter() {
            public void visitService(MockService svc) {
                Event event = MockUtil.createNodeGainedServiceEvent("Test", svc);
                m_eventMgr.sendEventToListeners(event);
            }
        };
        element.visit(gainSvcSender);

        PollAnticipator anticipator = new PollAnticipator();
        element.addAnticipator(anticipator);

        anticipator.anticipateAllServices(element);

        assertEquals(0, anticipator.waitForAnticipated(10000).size());

        EventAnticipator eventAnticipator = m_eventMgr.getEventAnticipator();
        anticipateSvcStatusChanged(element, eventAnticipator, ServiceMonitor.SERVICE_UNAVAILABLE);

        element.bringDown();

        assertEquals(0, eventAnticipator.waitForAnticipated(10000).size());
        assertEquals(0, eventAnticipator.unanticipatedEvents().size());

    }

