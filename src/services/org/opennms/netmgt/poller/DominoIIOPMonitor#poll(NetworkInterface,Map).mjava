	/**
	 * <P>Poll the specified address for service availability</P>
	 *
	 * <P>During the poll an attempt is made to connect on the specified
	 * port.  If the connection request is
	 * successful, the banner line generated by the interface is parsed
	 * and if the banner text indicates that we are talking to
	 * Provided that the interface's response is valid we set the
	 * service status to SERVICE_AVAILABLE and return.</P>
	 *
	 * @param iface		The network interface to test the service on.
	 * @param parameters	The package parameters (timeout, retry, etc...) to be 
	 *  used for this poll.
	 *
	 * @return The availibility of the interface and if a transition event
	 * 	should be supressed.
	 *
	 * @throws java.lang.RuntimeException Thrown if the interface experiences errors
	 * 	during the poll.
	 */
	public int poll(NetworkInterface iface, Map parameters) 
	{
		//
		// Process parameters
		//
		Category log = ThreadCategory.getInstance(getClass());

		//
		// Get interface address from NetworkInterface
		//
		if (iface.getType() != iface.TYPE_IPV4)
			throw new NetworkInterfaceNotSupportedException("Unsupported interface type, only TYPE_IPV4 currently supported");
		
		int retry = getKeyedInteger(parameters, "retry", DEFAULT_RETRY);
		int timeout = getKeyedInteger(parameters, "timeout", DEFAULT_TIMEOUT);
		int IORport = getKeyedInteger(parameters, "ior-port", DEFAULT_IORPORT);
		
		// Port
		//
		int port = getKeyedInteger(parameters, "port", DEFAULT_PORT);
		
		// Get the address instance.
		//
		InetAddress ipv4Addr = (InetAddress)iface.getAddress();
		
		if(log.isDebugEnabled())
			log.debug("poll: address = " + ipv4Addr.getHostAddress()
				  + ", port = " + port + ", timeout = " + timeout
				  + ", retry = " + retry);
		
		int serviceStatus = SERVICE_UNAVAILABLE;
		
		// THIS SHOULD WORK BUT IT DOESN'T, AND I DON'T KNOW WHY, SO WE HAVE TO DO IT THE HARD WAY...
		/*
		Session session  = NotesFactory.createSession(hostname);
		*/
		
		// Lets first try to the the IOR via HTTP, if we can't get that then any other process that can
		// do it the right way won't be able to connect anyway
		//
		try {
			String IOR = retrieveIORText(ipv4Addr.getHostAddress(), IORport);
		} catch (Exception e)
		{
			if(log.isDebugEnabled())
				log.debug("DominoIIOPMonitor: failed to get the corba IOR from " + ipv4Addr, e);
			return serviceStatus;
		}
		
		/* THIS IS THE WAY WE SHOULD BE CONNECTING TO THE DOMINO IIOP STUFF, BUT SINCE IT 'NO WORKY' LEAVE IT OUT */
		/*
		// Initialize the ORB in NCSO.jar.
		java.util.Properties ibm_props = new java.util.Properties();
		ibm_props.put("org.omg.CORBA.ORBClass", "com.ibm.CORBA.iiop.ORB");
		org.omg.CORBA.ORB ibm_orb = org.omg.CORBA.ORB.init(args, ibm_props);
		
		// Bind to initial object using IOR
		org.omg.CORBA.Object ibm_obj = ibm_orb.string_to_object(IOR);
		lotus.domino.corba.IObjectServer rObjectServer = lotus.domino.corba.IObjectServerHelper.narrow(ibm_obj);
		*/
		
		//SO LETS DO IT THE OLD FASHIONED WAY
		for (int attempts=0; attempts <= retry && serviceStatus != SERVICE_AVAILABLE; attempts++)
		{
			Socket portal = null;
			try
			{
				//
				// create a connected socket
				//
				portal = new Socket(ipv4Addr, port);
				portal.setSoTimeout(timeout);
				
				//got here so its up...
				serviceStatus = SERVICE_AVAILABLE;
			}
			catch(NoRouteToHostException e)
			{
				e.fillInStackTrace();
				if(log.isEnabledFor(Priority.WARN))
					log.warn("DominoIIOPMonitor: No route to host exception for address " + ipv4Addr.getHostAddress(), e);
				break; // Break out of for(;;)
			}
			catch(ConnectException e)
			{
				// Ignore
				e.fillInStackTrace();
				if(log.isDebugEnabled())
					log.debug("DominoIIOPMonitor: Connection exception for address: " + ipv4Addr, e);
			}
			catch(IOException e)
			{
				// Ignore
				e.fillInStackTrace();
				if(log.isDebugEnabled())
					log.debug("DominoIIOPMonitor: IOException while polling address: " + ipv4Addr, e);
			}
			finally
			{
				try
				{
					// Close the socket
					if(portal != null)
						portal.close();
				}
				catch(IOException e) 
				{
					e.fillInStackTrace();
					if(log.isDebugEnabled())
						log.debug("DominoIIOPMonitor: Error closing socket.", e);
				}
			}
		}
		
		//
		// return the status of the service
		//
		return serviceStatus;
	}

