    public void testPollInterface() throws Exception {
        m_pollContext.setNodeProcessingEnabled(true);
        m_pollContext.setPollingAllIfCritServiceUndefined(true);

        int nodeId = 1;
        String ipAddr = "192.168.1.1";
        String svcName = "ICMP";
        PollableService pSvc = m_network.getService(nodeId, InetAddress.getByName(ipAddr), svcName);
        PollableInterface iface = pSvc.getInterface();
        
        MockService mSvc = m_mockNetwork.getService(nodeId, ipAddr, svcName);
        MockService mSmtpSvc = m_mockNetwork.getService(nodeId, ipAddr, "SMTP");
        
//        MockUtil.println("--- Bring SMTP Down ----");
//        mSmtpSvc.bringDown();
        
        MockUtil.println("---- Poll ICMP Up ----");
        pSvc.doPoll();
        assertUp(pSvc);
        assertUp(iface);
        assertEquals(false, pSvc.isStatusChanged());
        assertEquals(false, iface.isStatusChanged());
        
        mSvc.bringDown();

        MockUtil.println("---- Poll ICMP Down ----");
        pSvc.doPoll();
        assertDown(pSvc);
        assertDown(iface);
        assertEquals(true, pSvc.isStatusChanged());
        assertEquals(true, iface.isStatusChanged());
        m_network.resetStatusChanged();
        
        mSvc.bringUp();
        
        MockUtil.println("---- Poll ICMP Up ----");
        pSvc.doPoll();
        assertUp(pSvc);
        assertUp(iface);
        assertEquals(true, pSvc.isStatusChanged());
        assertEquals(true, iface.isStatusChanged());
        m_network.resetStatusChanged();

    }

