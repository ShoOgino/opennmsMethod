	/**
	 * <P>Poll the specified address for POP3 service availability.</P>
	 *
	 * <P>During the poll an attempt is made to connect on the specified
	 * port (by default TCP port 110).  If the connection request is
	 * successful, the banner line generated by the interface is parsed
	 * and if the response indicates that we are talking to
	 * an POP3 server we continue.  Next, a POP3 'QUIT' command is sent
	 * to the interface.  Again the response is parsed and verified.  
	 * Provided that the interface's response is valid we set the
	 * service status to SERVICE_AVAILABLE and return.</P>
	 *
	 * @param iface		The network interface to test the service on.
	 * @param parameters	The package parameters (timeout, retry, etc...) to be 
	 *  used for this poll.
	 *
	 * @return The availibility of the interface and if a transition event
	 * 	should be supressed.
	 *
	 */
	public int poll(NetworkInterface iface, Map parameters, org.opennms.netmgt.config.poller.Package pkg) 
	{
		// Get interface address from NetworkInterface
		//
		if (iface.getType() != iface.TYPE_IPV4)
			throw new NetworkInterfaceNotSupportedException("Unsupported interface type, only TYPE_IPV4 currently supported");

		// Process parameters
		//
		Category log = ThreadCategory.getInstance(getClass());

		int retry   = ParameterMap.getKeyedInteger(parameters, "retry", DEFAULT_RETRY);
		int port    = ParameterMap.getKeyedInteger(parameters, "port", DEFAULT_PORT);
		int timeout = ParameterMap.getKeyedInteger(parameters, "timeout", DEFAULT_TIMEOUT) + 1;
                String rrdPath = ParameterMap.getKeyedString(parameters, "rrd-repository", null);
                String dsName = ParameterMap.getKeyedString(parameters, "ds-name", null);

                if (rrdPath == null)
                {
                        log.info("poll: RRD repository not specified in parameters, latency data will not be stored.");
                }
                if (dsName == null)
                {
                        dsName = DS_NAME;
                }

		InetAddress ipv4Addr = (InetAddress)iface.getAddress();

		if (log.isDebugEnabled())
			log.debug("poll: address = " + ipv4Addr + ", port = " + port + ", timeout = " + timeout + ", retry = " + retry);

		int serviceStatus = ServiceMonitor.SERVICE_UNAVAILABLE;
                long responseTime = -1;

		for (int attempts=0; attempts <= retry && serviceStatus != ServiceMonitor.SERVICE_AVAILABLE; attempts++)
		{
                        SocketChannel sChannel = null;
			try
			{
				//
				// create a connected socket
				//
                                long sentTime = System.currentTimeMillis();

                                sChannel = SocketChannelUtil.getConnectedSocketChannel(ipv4Addr, port, timeout);
                                if (sChannel == null)
                                {
                                        log.debug("Pop3Monitor: did not connect to host within timeout: " + timeout +" attempt: " + attempts);
                                        continue;
                                }
                                log.debug("Pop3Monitor: connected to host: " + ipv4Addr + " on port: " + port);

				// We're connected, so upgrade status to unresponsive
				serviceStatus = SERVICE_UNRESPONSIVE;
                                BufferedReader rdr = new BufferedReader(new InputStreamReader(sChannel.socket().getInputStream()));

				
				//
				// Tokenize the Banner Line, and check the first 
				// line for a valid return.
				//
				// Server response should start with: "+OK"
				//
				String banner = rdr.readLine();
                                responseTime = System.currentTimeMillis() - sentTime;

				if (banner == null)
					continue;
				StringTokenizer t = new StringTokenizer(banner);
				
				if (t.nextToken().equals("+OK"))
				{
					//
					// POP3 server should recoginize the QUIT command
					//
					String cmd = "QUIT\r\n";
                                        sChannel.socket().getOutputStream().write(cmd.getBytes());

					
					//
					// Parse the response to the QUIT command
					//
					// Server response should start with: "+OK"
					//
					t = new StringTokenizer(rdr.readLine());
					if (t.nextToken().equals("+OK"))
					{
						serviceStatus = ServiceMonitor.SERVICE_AVAILABLE;
                	                        // Store response time in RRD
        	                                if (responseTime >= 0 && rrdPath != null)
	                                                this.updateRRD(m_rrdInterface, rrdPath, ipv4Addr, dsName, responseTime, pkg);

					}
				}
				
				// If we get this far and the status has not been set
				// to available, then something didn't verify during
				// the banner checking or QUIT command process.
				if (serviceStatus != ServiceMonitor.SERVICE_AVAILABLE)
				{
					serviceStatus = ServiceMonitor.SERVICE_UNAVAILABLE;
				}
			}
			catch(NoRouteToHostException e)
			{
				if(log.isEnabledFor(Priority.WARN))
					log.warn("poll: No route to host exception for address " + ipv4Addr.getHostAddress(), e);
				break; // Break out of for(;;)
			}
                        catch(InterruptedException e)
                        {
                                // Ignore
                                e.fillInStackTrace();
                                if(log.isDebugEnabled())
                                        log.debug("Pop3Monitor: Interrupted exception for address: " + ipv4Addr, e);
                        }
			catch(ConnectException e)
			{
				// Ignore
				if(log.isDebugEnabled())
					log.debug("poll: Connection exception for address " + ipv4Addr.getHostAddress(), e);
			}
			catch(IOException e)
			{
				// Ignore
				if(log.isDebugEnabled())
					log.debug("poll: IOException while polling address " + ipv4Addr.getHostAddress(), e);
			}
			finally
			{
				try
				{
					// Close the socket
                                        if(sChannel != null)
                                                sChannel.close();

				}
				catch(IOException e) 
				{ 
					if(log.isDebugEnabled())
						log.debug("poll: Error closing socket.", e);
				}
			}
		}
	
		//
		// return the status of the service
		//
		return serviceStatus;
	}

