    /**
     * Process the event, construct a new PollableService object representing
     * the node/interface/service/pkg combination, and schedule the service for
     * polling.
     * 
     * If any errors occur scheduling the interface no error is returned.
     * 
     * @param event
     *            The event to process.
     * 
     */
    private void nodeGainedServiceHandler(Event event) {
        Category log = ThreadCategory.getInstance(getClass());

        // Is this the result of a resumePollingService event?
        String whichEvent = "Unexpected Event: " + event.getUei() + ": ";
        if (event.getUei().equals(EventConstants.NODE_GAINED_SERVICE_EVENT_UEI)) {
            whichEvent = "nodeGainedService: ";
        } else if (event.getUei().equals(EventConstants.RESUME_POLLING_SERVICE_EVENT_UEI)) {
            whichEvent = "resumePollingService: ";
        }

        // First make sure the service gained is in active state before trying
        // to
        // schedule

        String ipAddr = event.getInterface();
        int nodeid = (int) event.getNodeid();
        String svcName = event.getService();

        if (!getPoller().getQueryMgr().activeServiceExists(whichEvent, nodeid, ipAddr, svcName)) {
            if (log.isDebugEnabled()) {
                log.debug(whichEvent + nodeid + "/" + ipAddr + "/" + svcName + " not active - hence not scheduled");
            }
            return;
        }

        getPoller().scheduleService(nodeid, ipAddr, svcName);
    }

