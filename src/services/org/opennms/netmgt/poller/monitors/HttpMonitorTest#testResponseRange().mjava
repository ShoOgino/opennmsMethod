    public void testResponseRange() throws UnknownHostException {
        
        if (m_runTests == false) return;
        
        Map m = Collections.synchronizedMap(new TreeMap());
        Parameter p = new Parameter();
        
        ServiceMonitor monitor = new HttpMonitor();
        Package pkg = new Package();
        IPv4NetworkInterface iface = new IPv4NetworkInterface(InetAddress.getByName("www.opennms.org"));
        
        p.setKey("port");
        p.setValue("80");
        m.put(p.getKey(), p.getValue());
        
        p.setKey("retry");
        p.setValue("1");
        m.put(p.getKey(), p.getValue());
        
        p.setKey("timeout");
        p.setValue("2000");
        m.put(p.getKey(), p.getValue());
        
        p.setKey("response");
        p.setValue("100-299");
        m.put(p.getKey(), p.getValue());
        
        PollStatus status = monitor.poll(iface, m, pkg);        
        MockUtil.println("Reason: "+status.getReason());
        assertEquals(ServiceMonitor.SERVICE_UNAVAILABLE, status.getStatusCode());
        assertNotNull(status.getReason());

        p.setKey("response");
        p.setValue("100,200,302,400-500");
        m.put(p.getKey(), p.getValue());
        
        monitor = new HttpMonitor();
        status = monitor.poll(iface, m, pkg);        
        MockUtil.println("Reason: "+status.getReason());
        assertEquals(ServiceMonitor.SERVICE_AVAILABLE, status.getStatusCode());
        assertNull(status.getReason());

        p.setKey("response");
        p.setValue("*");
        m.put(p.getKey(), p.getValue());
        
        monitor = new HttpMonitor();
        status = monitor.poll(iface, m, pkg);        
        MockUtil.println("Reason: "+status.getReason());
        assertEquals(ServiceMonitor.SERVICE_AVAILABLE, status.getStatusCode());
        assertNull(status.getReason());
    }

