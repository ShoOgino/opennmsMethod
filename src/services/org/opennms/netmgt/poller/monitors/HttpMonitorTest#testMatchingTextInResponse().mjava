    public void testMatchingTextInResponse() throws UnknownHostException {
        
        if (m_runTests == false) return;
        
        Map m = Collections.synchronizedMap(new TreeMap());
        Parameter p = new Parameter();
        PollStatus status = null;
        
        ServiceMonitor monitor = new HttpMonitor();
        Package pkg = new Package();
        MonitoredService svc = getMonitoredService(3, "www.opennms.org", "HTTP");

        p.setKey("port");
        p.setValue("80");
        m.put(p.getKey(), p.getValue());
        
        p.setKey("retry");
        p.setValue("1");
        m.put(p.getKey(), p.getValue());
        
        p.setKey("timeout");
        p.setValue("2000");
        m.put(p.getKey(), p.getValue());
        
        p.setKey("response");
        p.setValue("100-499");
        m.put(p.getKey(), p.getValue());
        
        p.setKey("response-text");
        p.setValue("surfing");
        m.put(p.getKey(), p.getValue());
        
        /*
         * Adding this parameter because we get a redirect on www.opennms.org
         */
        p.setKey("host-name");
        p.setValue("www.opennms.com");
        m.put(p.getKey(), p.getValue());

        status = monitor.poll(svc, m, pkg);        
        MockUtil.println("Reason: "+status.getReason());
        assertEquals(ServiceMonitor.SERVICE_UNAVAILABLE, status.getStatusCode());
        assertNotNull(status.getReason());

        p.setKey("response-text");
        p.setValue("consulting");
        m.put(p.getKey(), p.getValue());

        MockUtil.println("\nliteral text check: \"consulting\"");
        monitor = new HttpMonitor();
        status = monitor.poll(svc, m, pkg);
        MockUtil.println("Reason: "+status.getReason());
        assertEquals(ServiceMonitor.SERVICE_AVAILABLE, status.getStatusCode());
        assertNull(status.getReason());

        p.setKey("response-text");
        p.setValue("~.*[Cc]onsulting.*");
        m.put(p.getKey(), p.getValue());

        MockUtil.println("\nregex check: \".*[Cc]consulting.*\"");
        monitor = new HttpMonitor();
        status = monitor.poll(svc, m, pkg);
        MockUtil.println("Reason: "+status.getReason());
        assertEquals(ServiceMonitor.SERVICE_AVAILABLE, status.getStatusCode());
        assertNull(status.getReason());

    }

