    public int poll(NetworkInterface iface, Map parameters, org.opennms.netmgt.config.poller.Package pkg) {

        int status = SERVICE_UNAVAILABLE;
        // Retrieve this interface's SNMP peer object
        //
        Target target = (Target)iface.getAttribute(SNMPV3_TARGET_KEY);
        
        if (target == null)
            throw new RuntimeException("Target object not available for interface " + ((InetAddress) iface.getAddress()));

        //Now poll
        Snmp snmp = null;
        try {
            snmp = SnmpHelpers.createSnmpSession();
            
            //This call is an SNMP4J helper that causes all registered transport mappings to listen 
            snmp.listen();
            PDU requestPDU = SnmpHelpers.createPDU(target.getVersion());
            requestPDU.setType(PDU.GET);
            VariableBinding vb = new VariableBinding(new OID(DEFAULT_OID));
            requestPDU.add(vb);
            
            if (m_log.isDebugEnabled()) {
                //Need this for logging only
                TransportIpAddress address = (TransportIpAddress)target.getAddress();
                m_log.debug("poll: service= SNMP address= " + ((InetAddress) iface.getAddress()).getHostAddress() + 
                        " port= " + address.getPort() + 
                        " oid=" + ParameterMap.getKeyedString(parameters, "oid", DEFAULT_OID) + 
                        " timeout= " + target.getTimeout() + " retries= " + target.getRetries() + 
                        " operator = " + ParameterMap.getKeyedString(parameters, "operator", null) + 
                        " operand = " + ParameterMap.getKeyedString(parameters, "operand", null));
            }

            ResponseEvent responseEvent = snmp.send(requestPDU, target);
            snmp.close();
            status = processResponseEvent(iface, parameters, target, responseEvent);
        } catch (IOException e) {
            m_log.error("SnmpV3Monitor:poll incurred an i/o Error: " +e.getMessage());
        }

        return status;
    }

