    public int poll(NetworkInterface iface, Map parameters, org.opennms.netmgt.config.poller.Package pkg) {
        // Log4j category
        //
        Category log = ThreadCategory.getInstance(getClass());

        int status = SERVICE_UNAVAILABLE;
        InetAddress inetAddress = (InetAddress) iface.getAddress();
        SnmpSession session = null;

        // Retrieve this interface's SNMP peer object
        //
        UserTarget target = (UserTarget) iface.getAttribute(SNMPV3_TARGET_KEY);
        
        if (target == null)
            throw new RuntimeException("UserTarget object not available for interface " + inetAddress);

        String oid = ParameterMap.getKeyedString(parameters, "oid", DEFAULT_OID);
        String operator = ParameterMap.getKeyedString(parameters, "operator", null);
        String operand = ParameterMap.getKeyedString(parameters, "operand", null);

        //Need this for logging only
        TransportIpAddress address = (TransportIpAddress)target.getAddress();
        
        String uname = ParameterMap.getKeyedString(parameters, "security name", DEFAULT_SECURITY_NAME);

        if (log.isDebugEnabled())
            log.debug("poll: service= SNMP address= " + inetAddress.getHostAddress() + " port= " + address.getPort() + " oid=" + oid + " timeout= " + target.getTimeout() + " retries= " + target.getRetries() + " operator = " + operator + " operand = " + operand);

        Snmp snmp = null;
        try {
            snmp = SnmpHelpers.createSnmpSession(target);
            snmp.listen();
            PDU request = SnmpHelpers.createPDU();
            VariableBinding vb = new VariableBinding(new OID(DEFAULT_OID));
            request.add(vb);
            
            PDU response = null;
            ResponseEvent responseEvent;
            responseEvent = snmp.send(request, target);
            snmp.close();
            
            if (responseEvent.getResponse() != null) {
                status = SERVICE_AVAILABLE;
            } else {
                status = SERVICE_UNAVAILABLE;
            }
            
        } catch (IOException e) {
            e.printStackTrace();
        }

        return status;
    }

