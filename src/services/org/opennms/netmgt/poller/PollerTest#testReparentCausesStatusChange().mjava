    public void testReparentCausesStatusChange() {

        m_pollerConfig.setNodeOutageProcessingEnabled(true);

        MockNode node1 = m_network.getNode(1);
        MockNode node2 = m_network.getNode(2);

        MockInterface node1Iface = m_network.getInterface(1, "192.168.1.1");
        MockInterface reparentedIface = m_network.getInterface(1, "192.168.1.2");
        MockInterface node2Iface = m_network.getInterface(2, "192.168.1.3");

        //
        // Plan to bring down both nodes except the reparented interface
        // the node owning the interface should be up while the other is down
        // after reparenting we should got the old owner go down while the other
        // comes up.
        //
        anticipateDown(node2);
        anticipateDown(node1Iface);

        // bring down both nodes but bring iface back up
        node1.bringDown();
        node2.bringDown();
        reparentedIface.bringUp();

        Event reparentEvent = MockUtil.createReparentEvent("Test", "192.168.1.2", 1, 2);

        startDaemons();

        verifyAnticipated(2000);

        resetAnticipated();

        // FIXME: should I expect this to send new events saying that the old
        // node is now down and the new node is now up? YES I SHOULD
        // after moving the interface we expect node down on node1 and node up
        // on node2;
        // anticipateNodeDown(node1);
        // anticipateNodeUp(node2);

        m_db.reparentInterface(reparentedIface.getIpAddr(), reparentedIface.getNodeId(), node2.getNodeId());
        reparentedIface.moveTo(node2);
        m_eventMgr.sendEventToListeners(reparentEvent);

        verifyAnticipated(2000);

    }

