    public void generateEvents() {
        Category log = ThreadCategory.getInstance(getClass());

        // Create date object which will serve as the source
        // for the time on all generated events
        Date date = new java.util.Date();

        if (statusChanged() && getStatus() == PollStatus.STATUS_DOWN) {
            sendEvent(createDownEvent(date));
            resetStatusChanged();
        } else if (statusChanged() && getStatus() == PollStatus.STATUS_UP) {
            sendEvent(createUpEvent(date));
            resetStatusChanged();

            // iterate over the node's interfaces
            // if interface status is DOWN
            // generate interfaceDown event
            // else if interface status is UP
            // iterate over interface's services
            // if service status is DOWN
            // generate serviceDown event
            //
            Iterator i = m_interfaces.values().iterator();
            while (i.hasNext()) {
                PollableInterface pIf = (PollableInterface) i.next();
                if (pIf.getStatus() == PollStatus.STATUS_DOWN) {
                    sendEvent(pIf.createDownEvent(date));
                    pIf.resetStatusChanged();
                } else if (pIf.getStatus() == PollStatus.STATUS_UP) {
                    sendEventsForDownServices(pIf, date);
                }
            }
        } else if (getStatus() == PollStatus.STATUS_UP) {
            //
            Iterator i = m_interfaces.values().iterator();
            while (i.hasNext()) {
                PollableInterface pIf = (PollableInterface) i.next();
                if (pIf.statusChanged() && pIf.getStatus() == PollStatus.STATUS_DOWN) {
                    sendEvent(pIf.createDownEvent(date));
                    pIf.resetStatusChanged();
                } else if (pIf.statusChanged() && pIf.getStatus() == PollStatus.STATUS_UP) {
                    sendEvent(pIf.createUpEvent(date));
                    pIf.resetStatusChanged();

                    sendEventsForDownServices(pIf, date);
                } else {
                    sendEventsForChangedServices(pIf, date);
                }
            }
        }

    }

