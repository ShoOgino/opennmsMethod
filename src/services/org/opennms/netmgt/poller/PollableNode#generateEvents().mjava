	public void generateEvents()
	{
		Category log = ThreadCategory.getInstance(getClass());
		
		Events events = new Events();
		
		// Create date object which will serve as the source
		// for the time on all generated events
		java.util.Date date    = new java.util.Date();

		if (m_statusChangedFlag && m_status == Pollable.STATUS_DOWN)
		{
			// create nodeDown event and add it to the event list
			events.addEvent( createEvent(EventConstants.NODE_DOWN_EVENT_UEI, 
							null, null, date) );
			
			resetStatusChanged();
		}
		else if (m_statusChangedFlag && m_status == Pollable.STATUS_UP)
		{
			// send nodeUp event
			events.addEvent( createEvent(EventConstants.NODE_UP_EVENT_UEI, 
							null, null, date) );
			resetStatusChanged();

			// iterate over the node's interfaces
			//	if interface status is DOWN 
			//		generate interfaceDown event
			//	else if interface status is UP 
			//		iterate over interface's services 
			//			if service status is DOWN
			//				generate serviceDown event
			//
			Iterator i = m_interfaces.values().iterator();
			while (i.hasNext())
			{
				PollableInterface pIf = (PollableInterface)i.next();
				if (pIf.getStatus() == Pollable.STATUS_DOWN)
				{
					events.addEvent( createEvent(EventConstants.INTERFACE_DOWN_EVENT_UEI, 
									pIf.getAddress(), 
									null, 
									date) );
					pIf.resetStatusChanged();
				}
				else if (pIf.getStatus() == Pollable.STATUS_UP)
				{
					Iterator s = pIf.getServices().iterator();
					while (s.hasNext())
					{
						PollableService pSvc = (PollableService)s.next();
						if (pSvc.getStatus() == Pollable.STATUS_DOWN)
						{
							events.addEvent( createEvent(EventConstants.NODE_LOST_SERVICE_EVENT_UEI, 
											pIf.getAddress(), 
											pSvc.getServiceName(),
											date) );
							pSvc.resetStatusChanged();
						}
					}
				}
			}
		}
		else if (m_status == Pollable.STATUS_UP)
		{
			// iterate over the node's interfaces
			// 	if status of interface changed to DOWN
			//		generate interfaceDown event
			//	else if status of interface changed to UP
			//		generate interfaceUp event
			//		iterate over interface's services
			//			if status of service is DOWN
			//				generate serviceDown event
			//	else
			//		iterate over interface's services
			//			if status of service changed to UP
			//				generate serviceUp event
			//			else if status of service changed to DOWN
			//				generate serviceDown event
			//
			Iterator i = m_interfaces.values().iterator();
			while (i.hasNext())
			{
				PollableInterface pIf = (PollableInterface)i.next();
				if (pIf.statusChanged() && pIf.getStatus() == Pollable.STATUS_DOWN)
				{
					events.addEvent( createEvent(EventConstants.INTERFACE_DOWN_EVENT_UEI, 
									pIf.getAddress(), 
									null,
									date) );
					pIf.resetStatusChanged();
				}
				else if (pIf.statusChanged() && pIf.getStatus() == Pollable.STATUS_UP)
				{
					events.addEvent( createEvent(EventConstants.INTERFACE_UP_EVENT_UEI, 
							pIf.getAddress(), 
							null,
							date) );
					pIf.resetStatusChanged();
					
					Iterator s = pIf.getServices().iterator();
					while (s.hasNext())
					{
						PollableService pSvc = (PollableService)s.next();
						if (pSvc.getStatus() == Pollable.STATUS_DOWN)
						{
							events.addEvent( createEvent(EventConstants.NODE_LOST_SERVICE_EVENT_UEI, 
											pIf.getAddress(), 
											pSvc.getServiceName(),
											date) );
							pSvc.resetStatusChanged();
						}
					}
				}
				else
				{
					Iterator s = pIf.getServices().iterator();
					while (s.hasNext())
					{
						PollableService pSvc = (PollableService)s.next();
						if (pSvc.statusChanged() && pSvc.getStatus() == Pollable.STATUS_DOWN)
						{
							events.addEvent( createEvent(EventConstants.NODE_LOST_SERVICE_EVENT_UEI, 
											pIf.getAddress(), 
											pSvc.getServiceName(),
											date) );
							pSvc.resetStatusChanged();
						}
						else if (pSvc.statusChanged() && pSvc.getStatus() == Pollable.STATUS_UP)
						{
							events.addEvent( createEvent(EventConstants.NODE_REGAINED_SERVICE_EVENT_UEI, 
									pIf.getAddress(), 
									pSvc.getServiceName(),
									date) );
							pSvc.resetStatusChanged();
						}
					}
				}
			}
		}
		
		// Send events to eventd
		if (events.getEventCount() > 0)
		{
			try
			{
				Log eventLog = new Log();
				eventLog.setEvents(events);
				getEventManager().sendNow(eventLog);
			}
			catch(RuntimeException e)
			{
				log.error("generateEvents: Failed sending events to eventd...", e);
			}
			catch(Throwable t)
			{
				log.error("generateEvents: Failed sending events to eventd...", t);
			}
		}
	}

