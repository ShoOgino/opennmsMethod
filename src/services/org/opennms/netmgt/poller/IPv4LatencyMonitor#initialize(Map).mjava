	/**
	 * <P>This method is called after the framework creates an
	 * instance of the plug-in. The framework passes the object a proxy
	 * object that can be used to retreive configuration information 
	 * specific to the plug-in. Additionally, any parameters for the 
	 * plug-in from the package definition are passed using the 
	 * parameters element.</P>
	 *
	 * <P>If there is a critical error, like missing service libraries, the
	 * the montior may throw a ServiceMonitorException. If the plug-in 
	 * throws an exception then the plug-in will be disabled in the
	 * framework.</P>
	 *
	 * @param parameters	Not currently used
	 *
	 * @exception java.lang.RuntimeException Thrown if
	 * 	an unrecoverable error occurs that prevents the plug-in from functioning.
	 *
	 */
	public void initialize(Map parameters) 
	{
		// Log4j category
		//
		Category log = ThreadCategory.getInstance(getClass());
		
		// Initialize jni RRD interface.
		// 
		try
		{
			org.opennms.netmgt.rrd.Interface.init();
		}
		catch(SecurityException se)
		{
			log.fatal("initialize: Failed to initialize JNI RRD interface", se);
			throw new UndeclaredThrowableException(se);
		}
		catch(UnsatisfiedLinkError ule)
		{
			log.fatal("initialize: Failed to initialize JNI RRD interface", ule);
			throw new UndeclaredThrowableException(ule);
		}
		
		// Save local reference to singleton instance 
		//
		m_rrdInterface = org.opennms.netmgt.rrd.Interface.getInstance();
		if (log.isDebugEnabled())
			log.debug("initialize: successfully instantiated JNI interface to RRD...");
		
		return;
	}

