    public PollStatus poll() {
        Category log = ThreadCategory.getInstance(getClass());
    
        m_schedule.setLastPoll(System.currentTimeMillis());
        resetStatusChanged();
        
        if (log.isDebugEnabled())
            log.debug("poll: starting new poll for " + this + ":" + m_schedule.getPackageName());
    
        PollStatus status = m_schedule.callMonitor();
    
        // serviceUnresponsive behavior disabled?
        //
        if (!m_schedule.getPollerConfig().serviceUnresponsiveEnabled()) {
            // serviceUnresponsive behavior is disabled, a status
            // of SERVICE_UNRESPONSIVE is treated as SERVICE_UNAVAILABLE
            if (status == PollStatus.STATUS_UNRESPONSIVE)
                status = PollStatus.STATUS_UNRESPONSIVE;
        } else {
            // Update unresponsive flag based on latest status
            // returned by the monitor and generate serviceUnresponsive
            // or serviceResponsive event if necessary.
            //
            if (status == PollStatus.STATUS_UNRESPONSIVE) {
                // Check unresponsive flag to determine if we need
                // to generate a 'serviceUnresponsive' event.
                //
                if (getUnresponsive() == false) {
                    setUnresponsive(true);
                    sendEvent(EventConstants.SERVICE_UNRESPONSIVE_EVENT_UEI, m_schedule.getPropertyMap());
    
                    // Set status back to available, don't want unresponsive
                    // service to generate outage
                    status = PollStatus.STATUS_UP;
                }
            } 
            else if (status == PollStatus.STATUS_UP) {
                // Check unresponsive flag to determine if we
                // need to generate a 'serviceResponsive' event
                if (getUnresponsive() == true) {
                    setUnresponsive(false);
                    sendEvent(EventConstants.SERVICE_RESPONSIVE_EVENT_UEI, m_schedule.getPropertyMap());
                }
            } 
            else if (status == PollStatus.STATUS_DOWN) {    
                // Clear unresponsive flag
                setUnresponsive(false);
            }    
        }
    
        // Any change in status?
        //
        if (status != getStatus()) {
            // get the time of the status change
            //
            setStatusChanged();
            setStatusChangeTime(System.currentTimeMillis());
            adjustSchedule();
    
            // Is node outage processing disabled?
            if (!m_schedule.getPollerConfig().nodeOutageProcessingEnabled()) {
                // node outage processing disabled, go ahead and generate
                // transition events.
                if (log.isDebugEnabled())
                    log.debug("poll: node outage disabled, status change will trigger event.");
    
                // Send the appropriate event
                //
                if (status == PollStatus.STATUS_UP) {
                    sendEvent(EventConstants.NODE_REGAINED_SERVICE_EVENT_UEI, m_schedule.getPropertyMap());
                }    
                else if (status == PollStatus.STATUS_DOWN) { 
                    sendEvent(EventConstants.NODE_LOST_SERVICE_EVENT_UEI, m_schedule.getPropertyMap());
                }
            }
        }
    
        // Set status
        setStatus(status);
    
        // Reschedule the interface
        // 
        // NOTE: rescheduling now handled by PollableService.run()
        // reschedule(false);
    
        return getStatus();
    }

