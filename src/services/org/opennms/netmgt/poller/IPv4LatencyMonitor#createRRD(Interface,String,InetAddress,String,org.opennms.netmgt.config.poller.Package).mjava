	/**
	 * Create an RRD database file for storing latency/response time
	 * data.
	 * 
	 * @param rrdJniInterface 	interface used to issue RRD commands.
	 * @param repository		path to the RRD file repository
	 * @param addr			interface address
	 * @param dsName		data source/RRD file name
	 * 
	 * @return true if RRD file successfully created, false otherwise
	 */
	public boolean createRRD(Interface rrdJniInterface, String repository, InetAddress addr, String dsName, org.opennms.netmgt.config.poller.Package pkg)
	{
		Category log = ThreadCategory.getInstance(this.getClass());
		
		// add interface address to RRD repository path
		String path = repository + File.separator + addr.getHostAddress();
		
		// If a directory does not yet exist for this interface create it.
		//
		File f = new File(path);
		if (!f.isDirectory())
			if (!f.mkdirs())
				throw new RuntimeException("Unable to create RRD file repository, path: " + path);
		
		// add RRD file name to path
		String fullPath = path + File.separator + dsName + ".rrd";
		
		f = new File(fullPath);
		if (f.exists())
		{
			// Already exists, no need to create
			return false;
		}
		else
		{
                        // Build RRA portion of RRD create command
                        //
                        String cmdRRA = new String();
                        List rraList = PollerConfigFactory.getInstance().getRRAList(pkg);
                        Iterator j = rraList.iterator();
                        while (j.hasNext())
                        {
                                String rra = (String)j.next();
                                cmdRRA = cmdRRA.concat(" " + rra);
                        }

			// Build RRD create command
			// 
			// Step size: 	5 minutes
			// RRAs:    	1 week of 5 minute average data
			//              6 months worth of hourly min, max, average data
			String cmd = "create " + fullPath + " --step " +
				PollerConfigFactory.getInstance().getStep(pkg) +
				" DS:" + dsName + ":GAUGE:600:U:U " + 
				cmdRRA;
			
			if (log.isDebugEnabled())
				log.debug("createRRD: issuing RRD create command: " + cmd);
			
			// Issue the RRD 'create' command
			String[] results = Interface.launch(cmd);
		    
			if (log.isDebugEnabled())
				log.debug("createRRD: RRD create command completed for " + addr.getHostAddress());
				
			// Sanity check results array
			if (results == null)
			{
				if(log.isEnabledFor(Priority.ERROR))
				{
					log.error("createRRD: Unexpected failure calling native method launch() with command string: " + cmd);
					log.error("createRRD: No error text available.");
				}
				throw new RuntimeException("RRD database 'create' failed for interface " + addr.getHostAddress());
			}
		    
			// Check error string at index 0, will be null if create was successful
			if (results[0] != null)
			{
				if(log.isEnabledFor(Priority.ERROR))
					log.error("RRD database 'create' failed for " + addr.getHostAddress() + ", reason: " + results[0]);
					throw new RuntimeException("RRD database 'create' failed for interface " + addr.getHostAddress() + ", reason: " + results[0]);
			}
	
			return true;
		}
		
	}

