    /*
     * @see TestCase#setUp()
     */
    protected void setUp() throws Exception {
        super.setUp();
        
        m_pollContext = new MockPollContext();
        m_pollContext.setCriticalServiceName("ICMP");
        
        m_mockNetwork = new MockNetwork();
        m_mockNetwork.addNode(1, "Router");
        m_mockNetwork.addInterface("192.168.1.1");
        m_mockNetwork.addService("ICMP");
        m_mockNetwork.addService("SMTP");
        m_mockNetwork.addInterface("192.168.1.2");
        m_mockNetwork.addService("ICMP");
        m_mockNetwork.addService("SMTP");
        m_mockNetwork.addNode(2, "Server");
        m_mockNetwork.addInterface("192.168.1.3");
        m_mockNetwork.addService("ICMP");
        m_mockNetwork.addService("HTTP");
        m_mockNetwork.addNode(3, "Firewall");
        m_mockNetwork.addInterface("192.168.1.4");
        m_mockNetwork.addService("SMTP");
        m_mockNetwork.addService("HTTP");
        m_mockNetwork.addInterface("192.168.1.5");
        m_mockNetwork.addService("SMTP");
        m_mockNetwork.addService("HTTP");

        m_db = new MockDatabase();
        m_db.populate(m_mockNetwork);
        
        m_network = new PollableNetwork(m_pollContext);
        m_network.createService(1, InetAddress.getByName("192.168.1.1"), "ICMP");
        m_network.createService(1, InetAddress.getByName("192.168.1.1"), "SMTP");
        m_network.createService(1, InetAddress.getByName("192.168.1.2"), "ICMP");
        m_network.createService(1, InetAddress.getByName("192.168.1.2"), "SMTP");
        m_network.createService(2, InetAddress.getByName("192.168.1.3"), "ICMP");
        m_network.createService(2, InetAddress.getByName("192.168.1.3"), "HTTP");
        m_network.createService(3, InetAddress.getByName("192.168.1.4"), "SMTP");
        m_network.createService(3, InetAddress.getByName("192.168.1.4"), "HTTP");
        m_network.createService(3, InetAddress.getByName("192.168.1.5"), "SMTP");
        m_network.createService(3, InetAddress.getByName("192.168.1.5"), "HTTP");
        
        PollableVisitor upper = new PollableVisitorAdaptor() {
            public void visitElement(PollableElement e) {
                e.updateStatus(PollStatus.STATUS_UP);  
            }
            public void visitService(PollableService svc) {
                MockPollConfig pollConfig = new MockPollConfig(m_mockNetwork, svc.getSvcName());
                svc.setPollConfig(pollConfig);
            }
        };
        m_network.visit(upper);
        m_network.resetStatusChanged();
    }

