    public synchronized void init() {

        // Set the category prefix
        ThreadCategory.setPrefix(LOG4J_CATEGORY);

        // get the category logger
        Category log = ThreadCategory.getInstance();

        // create service name to id maps
        createServiceMaps();

        // serviceUnresponsive behavior enabled/disabled?
        log.debug("start: serviceUnresponsive behavior: " + (getPollerConfig().serviceUnresponsiveEnabled() ? "enabled" : "disabled")); 

        createScheduler();

        // Schedule the interfaces currently in the database
        //
        try {
            log.debug("start: Scheduling existing interfaces");

            scheduleExistingInterfaces();
        } catch (SQLException sqlE) {
            log.error("start: Failed to schedule existing interfaces", sqlE);
        }

        // Create an event receiver. The receiver will
        // receive events, process them, creates network
        // interfaces, and schedulers them.
        //
        try {
            log.debug("start: Creating event broadcast event processor");

            m_receiver = new BroadcastEventProcessor(this);
        } catch (Throwable t) {
            log.fatal("start: Failed to initialized the broadcast event receiver", t);

            throw new UndeclaredThrowableException(t);
        }
        
        m_initialized = true;

    }

