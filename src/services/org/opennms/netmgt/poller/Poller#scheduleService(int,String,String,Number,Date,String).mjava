    private void scheduleService(int nodeId, String ipAddr, String serviceName, Number svcLostEventId, Date date, String svcLostUei) {
        Category log = ThreadCategory.getInstance();

        Package pkg = findPackageForService(ipAddr, serviceName);
        if (pkg == null) {
            log.warn("Active service "+serviceName+" on "+ipAddr+" not configured for any package");
            return;
        }
        
        ServiceMonitor monitor = m_pollerConfig.getServiceMonitor(serviceName);
        if (monitor == null) {
            log.info("Could not find service monitor associated with service "+serviceName);
            return;
        }
        
        InetAddress addr;
        try {
            addr = InetAddress.getByName(ipAddr);
        } catch (UnknownHostException e) {
            log.error("Could not convert "+ipAddr+" as an InetAddress "+ipAddr);
            return;
        }
        
        PollableService svc = m_network.createService(nodeId, addr, serviceName);
        PollableServiceConfig pollConfig = new PollableServiceConfig(svc, m_pollerConfig, m_pollOutagesConfig, pkg, m_scheduler);
        Schedule schedule = new Schedule(svc, pollConfig, m_scheduler);
        svc.setPollConfig(pollConfig);
        svc.setSchedule(schedule);
        
        
        if (svcLostEventId == null) 
            svc.updateStatus(PollStatus.STATUS_UP);
        else {
            svc.updateStatus(PollStatus.STATUS_DOWN);
            
            InitCause causeSetter = new InitCause();
            PollEvent cause = new DbPollEvent(svcLostEventId.intValue(), date);
            causeSetter.setCause(cause);
            
            if (EventConstants.NODE_LOST_SERVICE_EVENT_UEI.equals(svcLostUei)) {
                svc.visit(causeSetter);
            } else if (EventConstants.INTERFACE_DOWN_EVENT_UEI.equals(svcLostUei)) {
                svc.getInterface().visit(causeSetter);
            } else if (EventConstants.NODE_DOWN_EVENT_UEI.equals(svcLostUei)) {
                svc.getNode().visit(causeSetter);
            }
        }
        
        schedule.schedule();

    }

