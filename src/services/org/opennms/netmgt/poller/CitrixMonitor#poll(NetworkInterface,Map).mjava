	/**
	 * <P>Poll the specified address for Citrix service availability</P>
	 *
	 * <P>During the poll an attempt is made to connect on the specified
	 * port (by default  port 1494).  If the connection request is
	 * successful, the banner line generated by the interface is parsed
	 * and if the extracted return code indicates that we are talking to
	 * an Citrix server ('ICA' appears in the response) we set the
	 * service status to SERVICE_AVAILABLE and return.</P>
	 * @param iface		The network interface to test the service on.
	 * @param parameters	The package parameters (timeout, retry, etc...) to be 
	 *  used for this poll.
	 *
	 * @return The availibility of the interface and if a transition event
	 * 	should be supressed.
	 *
	 */
	public int poll(NetworkInterface iface, Map parameters) 
	{
		// check the interface type
		//
		if(iface.getType() != NetworkInterface.TYPE_IPV4)
			throw new NetworkInterfaceNotSupportedException("Unsupported interface type, only TYPE_IPV4 currently supported");


		// Get the category logger
		//
		Category log = ThreadCategory.getInstance(getClass());

		// get the parameters
		//
		int retry   = ParameterMap.getKeyedInteger(parameters, "retry", DEFAULT_RETRY);
		int port    = ParameterMap.getKeyedInteger(parameters, "port", DEFAULT_PORT);
		int timeout = ParameterMap.getKeyedInteger(parameters, "timeout", DEFAULT_TIMEOUT);
		//don't let the user set the timeout to 0, an infinite loop will occur if the server is down
		if (timeout==0)
			timeout=10;
		
		// Extract the address
		//
		InetAddress ipv4Addr = (InetAddress)iface.getAddress();
		String host = ipv4Addr.getHostAddress();
		
		if (log.isDebugEnabled())
			log.debug("CitrixMonitor.poll: Polling interface: " + host + " timeout: " + timeout + " retry: " + retry);
		
		int serviceStatus = ServiceMonitor.SERVICE_UNAVAILABLE;
		for (int attempts=0; attempts <= retry && serviceStatus != ServiceMonitor.SERVICE_AVAILABLE; attempts++)
		{
			Socket portal = null;
			try
			{
				// create a connected socket
				//
				portal = new Socket(host, port);
				// We're connected, so upgrade status to unresponsive
				serviceStatus = SERVICE_UNRESPONSIVE;
				portal.setSoTimeout(timeout); 

				// Allocate a line reader
				//
				BufferedReader reader = new BufferedReader(new InputStreamReader(portal.getInputStream()));
				StringBuffer buffer = new StringBuffer();
				
				// Not an infinite loop...socket timeout will break this out
				// of the loop if "ICA" string is never read.
				//
				while (serviceStatus!=ServiceMonitor.SERVICE_AVAILABLE)
				{
					buffer.append((char)reader.read());
					if (buffer.toString().indexOf("ICA")>-1)
					{
						serviceStatus = ServiceMonitor.SERVICE_AVAILABLE;
					}
					else
					{
						serviceStatus = ServiceMonitor.SERVICE_UNAVAILABLE;
					}
				}
			}
			catch(ConnectException cE)
			{
				// Connection refused!!  No need to perform retries.
				//
				cE.fillInStackTrace();
				log.debug("CitrixPlugin: connection refused by host " + host, cE);
				serviceStatus = ServiceMonitor.SERVICE_UNAVAILABLE;
				break;
			}
			catch(NoRouteToHostException e)
			{
				// No route to host!!  No need to perform retries.
				e.fillInStackTrace();
				log.info("CitrixPlugin: Unable to test host " + host + ", no route available", e);
				serviceStatus = ServiceMonitor.SERVICE_UNAVAILABLE;
				break;
			}
			catch(InterruptedIOException e)
			{
				// no logging necessary, this is "expected" behavior
				//
				serviceStatus = ServiceMonitor.SERVICE_UNAVAILABLE;
			}
			catch(IOException e)
			{
				log.info("CitrixPlugin: Error communicating with host " + host, e);
				serviceStatus = ServiceMonitor.SERVICE_UNAVAILABLE;
			}
			catch(Throwable t)
			{
				log.warn("CitrixPlugin: Undeclared throwable exception caught contacting host " + host, t);
				serviceStatus = ServiceMonitor.SERVICE_UNAVAILABLE;
			}
			finally
			{
				try
				{
					if(portal != null)
						portal.close();
				}
				catch(IOException e) { }
			}
		}
	
		//
		// return the status of the service
		//
		return serviceStatus;
	}

