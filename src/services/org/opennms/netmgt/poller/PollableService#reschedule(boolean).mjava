	/**
	 * This method is called to reschedule the service for polling. 
	 *
	 * NOTE:  Scheduler calls reschedule() with reUseInterval parm 
	 *	  set to true in the event that a scheduled outage
	 * 	  is in effect when a service is popped from the interval
	 * 	  queue for polling.
	 *
	 * @param reUseInterval Flag which controls how the interval
	 * 			at which to reschedule the interface
	 * 			is determined.  If true, value of
	 * 			m_lastInterval is used.  Otherwise
	 * 			recalculateInterval() is called to
	 * 			recalculate the interval.
	 */
	void reschedule(boolean reUseInterval)
	{
		Category log = ThreadCategory.getInstance(getClass());
		
		// Determine interval at which to reschedule the interface
		// 
		long interval = 0L;

		if (reUseInterval)
		{
			interval = m_lastInterval;
		}
		else
		{
			// Recalculate polling interval
			// 
			// NOTE:  interval of -1 indicates interface/service
			//        pair has exceeded the downtime model and
			//        is to be deleted.
			interval = recalculateInterval();
			
			if(interval < 0)
			{
				// Generate 'deleteService' event
				sendEvent(EventConstants.DELETE_SERVICE_EVENT_UEI, null);
	
				// Delete this pollable service from the service updates 
				// map maintained by the Scheduler and mark any 
				// equivalent pollable services (scheduled via other packages)
				// as deleted.  The services marked as deleted will subsequently
				// be removed the next time the sheduler pops them from the
				// interval queues for polling.
				//
				this.cleanupScheduledServices();
				
				// remove this service from the interfaces' service list 
				// so it is no longer polled via node outage processing
				//
				m_pInterface.removeService(this);
				
				return; // Return without rescheduling
			} // end delete event
		}
		
		this.reschedule(interval);
	}

