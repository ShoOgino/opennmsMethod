	/**
	 * This an alternative entry point into the class. This was originally
	 * created in order to support the PollableServiceProxy, which needed
	 * the option of handling its own scheduling and needed to keep the
	 * PollableService from rescheduling itself.
	 *
	 * In addition to allowing this, it also allows exceptions that require
	 * a rescheduling decision to pass back up the stack.  In all other ways,
	 * this method works the same as run().
	 *
	 * @param reschedule set this to true if you want the pollable service 
	 * to reschedule itself when done processing.
	 *
	 * @throws LockUnavailableException If it was unable to obtain a node
	 *                                  lock
	 * @throws ThreadInterruped If the thread was interrtuped while
	 *                          waiting for a node lock.
	 */
	public void run(boolean reschedule)
		throws LockUnavailableException, InterruptedException
	{
		this.doRun(reschedule);
	}

