    /**
     * Constructs a new instance of a pollable service object that is polled
     * using the passed monitor. The service is scheduled based upon the values
     * in the packages.
     * 
     * @param pInterface
     *            The interface to poll
     * @param svcName
     *            The name of the service being polled.
     * @param pkg
     *            The package with the polling information
     * 
     */
    PollableService(PollableInterface pInterface, String svcName, Package pkg, PollStatus status, Date svcLostDate) {
        super(status);
        m_pInterface = pInterface;
        m_netInterface = new IPv4NetworkInterface(pInterface.getAddress());
        m_deletionFlag = false;

        m_pollableServices = getPoller().getPollableServiceList();

        ServiceConfig svcConfig = new ServiceConfig(getPoller(), pkg, svcName);
        m_schedule = new Schedule(this, svcConfig);
        m_schedule.setLastPoll(0L);

        // Set status change values.
        setStatusChangeTime(0L);
        resetStatusChanged();
        if (getStatus() == PollStatus.STATUS_DOWN) {
            if (svcLostDate == null)
                throw new IllegalArgumentException("The svcLostDate parm cannot be null if status is UNAVAILABLE!");

            setStatusChangeTime(svcLostDate.getTime());
        }
        setUnresponsive(false);

    }

