	/**
	 * Constructs a new instance of a pollable service object that is 
	 * polled using the passed monitor. The service is scheduled based
	 * upon the values in the packages.
	 *
	 * @param pInterface		The interface to poll
	 * @param svcName	The name of the service being polled.
	 * @param pkg		The package with the polling information
	 *
	 */
	PollableService(	PollableInterface pInterface,
				String		svcName,
				Package pkg,
				int status,
				Date svcLostDate)
	{
		m_pInterface	= pInterface;
		m_address	= pInterface.getAddress(); // IPv4NetworkInterface address
		m_package	= pkg;
		m_status	= status;
		m_deletionFlag	= false;
        
		m_monitor	= getPoller().getServiceMonitor(svcName);
		m_scheduler	= getPoller().getScheduler();
		m_pollableServices = getPoller().getPollableServiceList();
		
		m_pollImmediate = true;  // set for immediate poll
		m_lastScheduledPoll = 0L;
		m_lastPoll	  = 0L;
		m_lastInterval = 0L;
			
		// Set status change values.  
		m_statusChangeTime = 0L;
		m_statusChangedFlag = false;
		if (m_status == ServiceMonitor.SERVICE_UNAVAILABLE)
		{
			if (svcLostDate == null)
				throw new IllegalArgumentException("The svcLostDate parm cannot be null if status is UNAVAILABLE!");
			
			m_statusChangeTime = svcLostDate.getTime();
		}
		m_unresponsiveFlag = false;
		
		// find the service matching the name
		//
		Service svc = null;
		Enumeration esvc = m_package.enumerateService();
		while(esvc.hasMoreElements())
		{
			Service s = (Service)esvc.nextElement();
			if(s.getName().equalsIgnoreCase(svcName))
			{
				svc = s;
				break;
			}
		}
		if(svc == null)
			throw new RuntimeException("Service name not part of package!");
		
		// save reference to the service
		m_service    = svc;
		
		// add property list for this service/package combination if
		// it doesn't already exist in the service property map
		//
		m_svcPropKey = m_package.getName() + "." + m_service.getName();
		synchronized(SVC_PROP_MAP)
		{
			if(! SVC_PROP_MAP.containsKey(m_svcPropKey))
			{
				Map m = Collections.synchronizedMap(new TreeMap());
				Enumeration ep = m_service.enumerateParameter();
				while(ep.hasMoreElements())
				{
					Parameter p = (Parameter)ep.nextElement();
					m.put(p.getKey(), p.getValue());
				}

				SVC_PROP_MAP.put(m_svcPropKey, m);
			}
		}
	}

