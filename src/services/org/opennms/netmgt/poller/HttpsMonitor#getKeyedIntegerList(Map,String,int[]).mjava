	/**
	 * This method is used to lookup a specific key in 
	 * the map. If the mapped value is a string is is converted
	 * to an interger and the original string value is replaced
	 * in the map. The converted value is returned to the caller.
	 * If the value cannot be converted then the default value is
	 * used.
	 *
	 * @return The int value associated with the key.
	 */
	final static int[] getKeyedIntegerList(Map map, String key, int[] defList)
	{
		int[] result = defList;
		Object oValue = map.get(key);

		if(oValue != null && oValue instanceof int[])
		{
			result = (int[]) oValue;
		}
		else if(oValue != null)
		{
			List tmpList = new ArrayList(5);

			// Split on spaces, commas, colons, or semicolons
			//
			StringTokenizer ints = new StringTokenizer(oValue.toString(), " ;:,");
			while(ints.hasMoreElements())
			{
				try
				{
					int x = Integer.parseInt(ints.nextToken());
					tmpList.add(new Integer(x));
				}
				catch(NumberFormatException e)
				{
					ThreadCategory.getInstance(HttpMonitor.class).warn("getKeyedIntegerList: list member for key " + key + " is malformed", e);
				}
			}
			result = new int[tmpList.size()];

			for(int x = 0; x < result.length; x++)
				result[x] = ((Integer)tmpList.get(x)).intValue();

			map.put(key, result);
		} 
		return result;
	}

