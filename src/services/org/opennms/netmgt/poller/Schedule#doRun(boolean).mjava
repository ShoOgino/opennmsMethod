    /**
     * @param allowedToRescheduleMyself
     * @param m_svc
     * @throws LockUnavailableException
     * @throws InterruptedException
     */
    void doRun(boolean allowedToRescheduleMyself) throws LockUnavailableException, InterruptedException {
        // Update last scheduled poll time if allowedToRescheduleMyself
        // flag is true
        if (allowedToRescheduleMyself)
            setLastScheduledPoll(System.currentTimeMillis());
        
        Category log = ThreadCategory.getInstance(m_svc.getClass());
        
        // Is the service marked for deletion? If so simply return.
        //
        if (m_svc.isDeleted()) {
            if (log.isDebugEnabled()) {
                log.debug("PollableService doRun: Skipping service marked as deleted on " + m_svc + ", status = " + m_svc.getStatus());
            }
        } else {
            
            // Check scheduled outages to see if any apply indicating
            // that the poll should be skipped
            //
            if (getServiceConfig().scheduledOutage(m_svc)) {
                // Outage applied...reschedule the service and return
                if (allowedToRescheduleMyself) {
                    reschedule(true);
                }
                
            } else {
                
                doPoll();
                setPollImmediate(false);

                // reschedule the service for polling
                if (allowedToRescheduleMyself) {
                    reschedule(false);
                }
                
            }
        }
    }

