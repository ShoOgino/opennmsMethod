	/**
	 * Update an RRD database file with latency/response time data.
	 * 
	 * @param rrdJniInterface 	interface used to issue RRD commands.
	 * @param repository		path to the RRD file repository
	 * @param addr			interface address
	 * @param value			value to update the RRD file with
	 * 
	 * @return true if RRD file successfully created, false otherwise
	 */
	public void updateRRD(Interface rrdJniInterface, String repository, InetAddress addr, String dsName, long value)
	{
		Category log = ThreadCategory.getInstance(this.getClass());
		
		// Create RRD if it doesn't already exist
		createRRD(rrdJniInterface, repository, addr, dsName);
		
		// Build complete path
		String fullPath = repository + File.separator + addr.getHostAddress() + File.separator + dsName + ".rrd";
		
		// update RRD database
		String cmd = "update " + fullPath + " N:" + String.valueOf(value);
		
		if (log.isDebugEnabled())
			log.debug("updateRRD: issuing RRD update command: " + cmd);

		// Issue the RRD 'create' command
		String[] results = rrdJniInterface.launch(cmd);
		
		if (log.isDebugEnabled())
			log.debug("updateRRD: RRD update command completed for " + addr.getHostAddress());
			
		// Sanity check results array
		if (results == null)
		{
			if(log.isEnabledFor(Priority.ERROR))
			{
				log.error("updateRRD: Unexpected failure calling native method launch() with command string: " + cmd);
				log.error("updateRRD: No error text available.");
			}
			throw new RuntimeException("RRD database 'update' failed for interface " + addr.getHostAddress());
		}
	    
		// Check error string at index 0, will be null if create was successful
		if (results[0] != null)
		{
			if(log.isEnabledFor(Priority.ERROR))
				log.error("RRD database 'update' failed for " + addr.getHostAddress() + ", reason: " + results[0]);
				throw new RuntimeException("RRD database 'update' failed for interface " + addr.getHostAddress() + ", reason: " + results[0]);
		}
	}

