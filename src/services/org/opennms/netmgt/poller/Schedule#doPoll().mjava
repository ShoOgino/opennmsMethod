    void doPoll() throws InterruptedException {
        Category log = ThreadCategory.getInstance(m_svc.getClass());
        // NodeId
        PollableNode pNode = m_svc.getNode();
        int nodeId = pNode.getNodeId();
    
        // Is node outage processing enabled?
        if (getServiceConfig().getPollerConfig().nodeOutageProcessingEnabled()) {
    
            /*
             * Acquire lock to 'PollableNode'
             */
            boolean ownLock = false;
            try {
                // Attempt to obtain node lock...wait no longer than 500ms
                // We don't want to tie up the thread for long periods of time
                // waiting for the lock on the PollableNode to be released.
                if (log.isDebugEnabled())
                    log.debug("run: ------------- requesting node lock for nodeid: " + nodeId + " -----------");
    
                if (!(ownLock = pNode.getNodeLock(500)))
                    throw new LockUnavailableException("failed to obtain lock on nodeId " + nodeId);
            } catch (InterruptedException iE) {
                // failed to acquire lock
                throw new InterruptedException("failed to obtain lock on nodeId " + nodeId + ": " + iE.getMessage());
            }
            // Now we have a lock
    
            if (ownLock) // This is probably redundant, but better to be
                            // sure.
            {
                try {
                    // Make sure the node hasn't been deleted.
                    if (!pNode.isDeleted()) {
                        if (log.isDebugEnabled())
                            log.debug("run: calling poll() for " + m_svc);
    
                        pNode.poll(m_svc);
    
                        if (log.isDebugEnabled())
                            log.debug("run: call to poll() finished for " + m_svc);
                    }
                } finally {
                    if (log.isDebugEnabled())
                        log.debug("run: ----------- releasing node lock for nodeid: " + nodeId + " ----------");
                    try {
                        pNode.releaseNodeLock();
                    } catch (InterruptedException iE) {
                        log.error("run: thread interrupted...failed to release lock on nodeId " + nodeId);
                    }
                }
            }
        } else {
            // Node outage processing disabled so simply poll the service
            if (log.isDebugEnabled())
                log.debug("run: node outage processing disabled, polling: " + m_svc);
            m_svc.poll();
        }
        
        
    }

