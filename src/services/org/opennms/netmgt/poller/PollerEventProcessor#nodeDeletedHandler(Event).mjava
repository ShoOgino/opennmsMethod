    /**
     * This method is responsible for removing the node specified in the
     * nodeDeleted event from the Poller's pollable node map.
     */
    private void nodeDeletedHandler(Event event) {
        Category log = ThreadCategory.getInstance(getClass());

        int nodeId = (int) event.getNodeid();
        final String sourceUei = event.getUei();

        // Extract node label and transaction No. from the event parms
        long txNo = -1L;
        Parms parms = event.getParms();
        if (parms != null) {
            String parmName = null;
            Value parmValue = null;
            String parmContent = null;

            Enumeration parmEnum = parms.enumerateParm();
            while (parmEnum.hasMoreElements()) {
                Parm parm = (Parm) parmEnum.nextElement();
                parmName = parm.getParmName();
                parmValue = parm.getValue();
                if (parmValue == null)
                    continue;
                else
                    parmContent = parmValue.getContent();

                // get the external transaction number
                if (parmName.equals(EventConstants.PARM_TRANSACTION_NO)) {
                    String temp = parmContent;
                    if (log.isDebugEnabled())
                        log.debug("nodeDeletedHandler:  parmName: " + parmName + " /parmContent: " + parmContent);
                    try {
                        txNo = Long.valueOf(temp).longValue();
                    } catch (NumberFormatException nfe) {
                        log.warn("nodeDeletedHandler: Parameter " + EventConstants.PARM_TRANSACTION_NO + " cannot be non-numberic", nfe);
                        txNo = -1;
                    }
                }
            }
        }

        final PollerNode pNode = getPoller().findNode(nodeId);
        if (pNode == null) // Sanity check
        {
            log.error("Nodeid " + nodeId + " does not exist in pollable node map, unable to delete node.");
            if (isXmlRPCEnabled()) {
                int status = EventConstants.XMLRPC_NOTIFY_FAILURE;
                XmlrpcUtil.createAndSendXmlrpcNotificationEvent(txNo, sourceUei, "Node does not exist in pollable node map.", status, "OpenNMS.Poller");
            }
            return;
        }

        
        final long transNum = txNo;
        NodeLocker locker = new NodeLocker(pNode, "nodeDeletedHandler") {
            protected void process() {
                deleteNode(pNode);
            }
            protected void handleLockFailed() {
                if (isXmlRPCEnabled()) {
                    int status = EventConstants.XMLRPC_NOTIFY_FAILURE;
                    XmlrpcUtil.createAndSendXmlrpcNotificationEvent(transNum, sourceUei, "Internal error.", status, "OpenNMS.Poller");
                }
            }
            protected void handleException(Throwable t) {
                if (isXmlRPCEnabled()) {
                    int status = EventConstants.XMLRPC_NOTIFY_FAILURE;
                    XmlrpcUtil.createAndSendXmlrpcNotificationEvent(transNum, sourceUei, t.getMessage(), status, "OpenNMS.Poller");
                }
                
            }
        };
        locker.lockAndProcess();
    }

