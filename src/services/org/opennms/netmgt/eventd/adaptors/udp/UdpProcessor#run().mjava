	/**
	 * The event processing execution context.
	 */
	public void run()
	{
		// The runnable context
		//
		m_context = Thread.currentThread();

		// get a logger
		//
		ThreadCategory.setPrefix(m_logPrefix);
		Category log = ThreadCategory.getInstance(getClass());
		boolean isTracing = log.isDebugEnabled();

		if(m_stop)
		{
			if(isTracing)
				log.debug( "Stop flag set before thread started, exiting");
			return;
		}
		else if(isTracing)
			log.debug( "Thread context started");

		// This loop is labeled so that it can be
		// exited quickly when the thread is interrupted
		//
		RunLoop:
		while(!m_stop)
		{
			if(isTracing)
				log.debug( "Waiting on a new datagram to arrive");

			UdpReceivedEvent re = null;
			synchronized(m_eventsIn)
			{
				// wait for an event to show up.
				// wait in 1/2 second intervals
				//
				while(m_eventsIn.isEmpty())
				{
					try
					{
						m_eventsIn.wait(500);
					}
					catch(InterruptedException ie)
					{
						if(isTracing)
							log.debug( "Thread interrupted");
						break RunLoop;
					}

					if(m_stop)
					{
						if(isTracing)
							log.debug( "Stop flag is set");
						break RunLoop;
					}
				}
				re = (UdpReceivedEvent) m_eventsIn.remove(0);
			}

			if(isTracing)
				log.debug( "A new request has arrived");


			// Convert the Event
			//
			Event[] events = null;
			try
			{
				if(isTracing)
				{
					log.debug( "Event from " + re.getSender().getHostAddress() + ":" + re.getPort());
					log.debug( "Unmarshalling Event text {"
						+ System.getProperty("line.separator")
						+ re.getXmlData()
						+ System.getProperty("line.separator")
						+ "}");
				}
				events = re.unmarshal().getEvents().getEvent();
			}
			catch(MarshalException e)
			{
				log.warn("Failed to unmarshal the event from " + re.getSender().getHostAddress() + ":" + re.getPort(), e);
				continue;
			}
			catch(ValidationException e)
			{
				log.warn("Failed to validate the event from " + re.getSender().getHostAddress() + ":" + re.getPort(), e);
				continue;
			}

			if(events == null || events.length == 0)
			{
				if(isTracing)
					log.debug( "The event log record contained no events");
				continue;
			}
			else if(isTracing)
			{
				log.debug( "Processing " + events.length + " events");
			}


			// process the event
			//
			synchronized(m_handlers)
			{
				// get the list of events from the event log.
				// Also, get an iterator to walk over the set
				// of event handlers
				//
				Iterator iter = m_handlers.iterator();
				while(iter.hasNext())
				{
					// iterate over the list of the events
					// from the received documents.
					//
					for(int ndx = 0; ndx < events.length; ndx++)
					{
						try
						{
							// shortcut and, both sides of the and statment WILL execute
							// regardless of the other side's value
							//
							if(((EventHandler)iter.next()).processEvent(events[ndx]))
							{
								re.ackEvent(events[ndx]);
							}
						}
						catch(Throwable t)
						{
							log.warn("Failed to process received UDP event, exception follows", t);
						}

					} // end event processing loop

				} // end handler loop
			}

			if(isTracing)
				log.debug( "event processing complete, forwarding to receipt generator");

			synchronized(m_eventUuidsOut)
			{
				m_eventUuidsOut.add(re);
				// Don't notify, let them batch up!
			}

		} // end RunLoop
		
		if(isTracing)
			log.debug( "Context finished, returning");

	} // end run()

