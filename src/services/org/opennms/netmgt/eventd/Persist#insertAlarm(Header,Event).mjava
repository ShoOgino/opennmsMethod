    /**
     * Insert values into the ALARMS table
     * 
     * @exception java.sql.SQLException
     *                Thrown if there is an error adding the event to the
     *                database.
     * @exception java.lang.NullPointerException
     *                Thrown if a required resource cannot be found in the
     *                properties file.
     */
    private void insertAlarm(Header eventHeader, Event event) throws SQLException {
        int alarmID = -1;
        Category log = ThreadCategory.getInstance(AlarmWriter.class);
        
        alarmID = getNextId();
        if (log.isDebugEnabled()) log.debug("AlarmWriter: DBID: "+ alarmID);

        //Column 1, alarmId
        m_insStmt.setInt(1, alarmID);
        
        //Column 2, eventUie
        m_insStmt.setString(2, Constants.format(event.getUei(), EVENT_UEI_FIELD_SIZE));
        
        //Column 3, dpName
        m_insStmt.setString(3, (eventHeader != null) ? Constants.format(eventHeader.getDpName(), EVENT_DPNAME_FIELD_SIZE) : "undefined");
        
        // Column 4, nodeID
        int nodeid = (int) event.getNodeid();
        m_insStmt.setInt(4, event.hasNodeid() ? nodeid : -1);
        
        // Column 5, ipaddr
        m_insStmt.setString(5, (event.getInterface() != null ? event.getInterface() : "0.0.0.0"));
        
        //Column 6, serviceId
        //
        // convert the service name to a service id
        //
        int svcId = -1;
        if (event.getService() != null) {
            try {
                svcId = getServiceID(event.getService());
            } catch (SQLException sqlE) {
                log.warn("AlarmWriter.insertAlarm: Error converting service name \"" + event.getService() + "\" to an integer identifier, storing -1", sqlE);
            }
        }
        m_insStmt.setInt(6, svcId);

        //Column 7, reductionKey
        m_insStmt.setString(7, event.getReductionKey());
        
        //Column 8, counter
        m_insStmt.setInt(8, 1);
        
        //Column 9, serverity
        set(m_insStmt, 9, Constants.getSeverity(event.getSeverity()));

        //Column 10, lastEventId
        m_insStmt.setInt(10, event.getDbid());
        
        //Column 11, firstEventTime
        java.sql.Timestamp eventTime = getEventTime(event, log);
        m_insStmt.setTimestamp(11, eventTime);
        
        //Column 12, lastEventTime
        m_insStmt.setTimestamp(12, eventTime);
        
        //Column 13, description
        set(m_insStmt, 13, Constants.format(event.getDescr(), EVENT_DESCR_FIELD_SIZE));

        //Column 14, logMsg
        if (event.getLogmsg() != null) {
            // set log message
            set(m_insStmt, 14, Constants.format(event.getLogmsg().getContent(), EVENT_LOGMSG_FIELD_SIZE));
        } else {
            m_insStmt.setNull(14, Types.VARCHAR);
        }

        //Column 15, operInstruct
        set(m_insStmt, 15, Constants.format(event.getOperinstruct(), EVENT_OPERINSTRUCT_FIELD_SIZE));
        
        //Column 16, tticketId
        //Column 17, tticketState
        if (event.getTticket() != null) {
            set(m_insStmt, 16, Constants.format(event.getTticket().getContent(), EVENT_TTICKET_FIELD_SIZE));
            int ttstate = 0;
            if (event.getTticket().getState().equals("on"))
                ttstate = 1;
            set(m_insStmt, 17, ttstate);
        } else {
            m_insStmt.setNull(16, Types.VARCHAR);
            m_insStmt.setNull(17, Types.INTEGER);
        }

        //Column 18, mouseOverText
        set(m_insStmt, 18, Constants.format(event.getMouseovertext(), EVENT_MOUSEOVERTEXT_FIELD_SIZE));

        //Column 19, suppressedUntil
        //FIXME:
        m_insStmt.setTimestamp(19, eventTime);
        
        //Column 20, suppressedUser
        m_insStmt.setString(20, null);
        
        //Column 21, suppressedTime
        //FIXME:
        m_insStmt.setTimestamp(21, eventTime);
        
        //Column 22, alarmAckUser
        m_insStmt.setString(22, null);
        
        //Column 23, alarmAckTime
        m_insStmt.setTimestamp(23, eventTime);
        
        if (log.isDebugEnabled())
            log.debug("m_insStmt is: "+m_insStmt.toString());

        m_insStmt.executeUpdate();

        if (log.isDebugEnabled())
            log.debug("SUCCESSFULLY added " + event.getUei() + " related  data into the ALARMS table");
   
    }

