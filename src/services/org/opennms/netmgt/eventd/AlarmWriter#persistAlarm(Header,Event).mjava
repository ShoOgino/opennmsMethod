    /**
     * The method that inserts the event into the database
     * 
     * @param eventHeader
     *            the event header
     * @param event
     *            the actual event to be inserted
     */
    public void persistAlarm(Header eventHeader, Event event) throws SQLException {
        if (event != null) {
            Category log = ThreadCategory.getInstance(AlarmWriter.class);

            // Check value of <logmsg> attribute 'dest', if set to
            // "donotpersist" then simply return, the uei is not to be
            // persisted to the database
            String logdest = event.getLogmsg().getDest();
            if (logdest.equals("donotpersist") || event.getReductionKey() == null) {
                log.debug("AlarmWriter: uei '" + event.getUei() + "' marked as 'doNotPersist' or reductionKey is null.");
                return;
            } else {
                if (log.isDebugEnabled()) {
                    log.debug("AlarmWriter dbRun for : " + event.getUei() + " nodeid: " + event.getNodeid() + " ipaddr: " + event.getInterface() + " serviceid: " + event.getService());
                }
            }

            /*
             * Try twice incase the transaction fails.  This could happen if 2 or more threads query the db
             * at the same time and determine that insert needs to happen.  One insert will complete the other
             * will fail.  The next time through the loop, the alarm will be reduced with an update. 
             */
            int attempt = 1;
            boolean notUpdated = true;
            while (attempt <= 2 && notUpdated) {
                try {
                    insertOrUpdateAlarm(eventHeader, event);
                    m_dbConn.commit();
                    notUpdated = false;
                } catch (SQLException e) {
                    log.warn("Error in attempt: "+attempt+" inserting alarm into the datastore", e);
                    try {
                        m_dbConn.rollback();
                        m_dbConn.setAutoCommit(false);
                    } catch (Exception e2) {
                        log.warn("Rollback of transaction failed!", e2);
                    }
                    if (attempt > 1)
                        throw e;
                }
                attempt++;
            }

            if (log.isDebugEnabled())
                log.debug("AlarmWriter finished for : " + event.getUei());
        }
    }

