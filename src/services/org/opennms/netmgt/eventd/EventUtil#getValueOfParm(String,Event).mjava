    /**
     * Get the value of the parm for the event
     * 
     * @param parm
     *            the parm for which value is needed from the event
     * @param event
     *            the event whose parm value is required
     * 
     * @return value of the event parm/element
     */
    public static String getValueOfParm(String parm, Event event) {
        String retParmVal = null;

        if (parm.equals(TAG_UEI)) {
            retParmVal = event.getUei();
        }
        if (parm.equals(TAG_EVENT_DB_ID)) {
            if (event.hasDbid()) {
                retParmVal = Integer.toString(event.getDbid());
            } else {
                retParmVal = "eventid-unknown";
            }
        } else if (parm.equals(TAG_SOURCE)) {
            retParmVal = event.getSource();
        } else if (parm.equals(TAG_NODEID)) {
            retParmVal = Long.toString(event.getNodeid());
        } else if (parm.equals(TAG_NODELABEL)) {
            retParmVal = Long.toString(event.getNodeid());
            String nodeLabel = null;
            if (event.getNodeid() > 0) {
                try {
                    nodeLabel = getNodeLabel(event.getNodeid());
                } catch (SQLException sqlE) {
                    // do nothing
                }
            }
            if (nodeLabel != null)
                retParmVal = nodeLabel;
            else
                retParmVal = "Unknown";
        } else if (parm.equals(TAG_TIME)) {
            retParmVal = event.getTime();
        } else if (parm.equals(TAG_HOST)) {
            retParmVal = event.getHost();
        } else if (parm.equals(TAG_INTERFACE)) {
            retParmVal = event.getInterface();
        } else if (parm.equals(TAG_INTERFACE_RESOLVE)) {
            retParmVal = event.getInterface();
            try {
                java.net.InetAddress inet = java.net.InetAddress.getByName(retParmVal);
                retParmVal = inet.getHostName();
            } catch (java.net.UnknownHostException e) {
            }
        } else if (parm.equals(TAG_SNMPHOST)) {
            retParmVal = event.getSnmphost();
        } else if (parm.equals(TAG_SERVICE)) {
            retParmVal = event.getService();
        } else if (parm.equals(TAG_SNMP)) {
            Snmp info = event.getSnmp();
            if (info == null)
                retParmVal = null;
            else {
                StringBuffer snmpStr = new StringBuffer(info.getId());
                if (info.getIdtext() != null)
                    snmpStr.append(ATTRIB_DELIM + escape(info.getIdtext().trim(), ATTRIB_DELIM));
                else
                    snmpStr.append(ATTRIB_DELIM + "undefined");

                snmpStr.append(ATTRIB_DELIM + info.getVersion());

                if (info.hasSpecific())
                    snmpStr.append(ATTRIB_DELIM + Integer.toString(info.getSpecific()));
                else
                    snmpStr.append(ATTRIB_DELIM + "undefined");

                if (info.hasGeneric())
                    snmpStr.append(ATTRIB_DELIM + Integer.toString(info.getGeneric()));
                else
                    snmpStr.append(ATTRIB_DELIM + "undefined");

                if (info.getCommunity() != null) {
                    snmpStr.append(ATTRIB_DELIM + info.getCommunity().trim());
                } else
                    snmpStr.append(ATTRIB_DELIM + "undefined");

                retParmVal = snmpStr.toString();
            }
        } else if (parm.equals(TAG_SNMP_ID)) {
            Snmp info = event.getSnmp();
            if (info != null) {
                retParmVal = info.getId();
            }
        } else if (parm.equals(TAG_SNMP_IDTEXT)) {
            Snmp info = event.getSnmp();
            if (info != null && info.getIdtext() != null) {
                retParmVal = info.getIdtext();
            }
        } else if (parm.equals(TAG_SNMP_VERSION)) {
            Snmp info = event.getSnmp();
            if (info != null) {
                retParmVal = info.getVersion();
            }
        } else if (parm.equals(TAG_SNMP_SPECIFIC)) {
            Snmp info = event.getSnmp();
            if (info != null && info.hasSpecific()) {
                retParmVal = Integer.toString(info.getSpecific());
            }
        } else if (parm.equals(TAG_SNMP_GENERIC)) {
            Snmp info = event.getSnmp();
            if (info != null && info.hasGeneric()) {
                retParmVal = Integer.toString(info.getGeneric());
            }
        } else if (parm.equals(TAG_SNMP_COMMUNITY)) {
            Snmp info = event.getSnmp();
            if (info != null && info.getCommunity() != null) {
                retParmVal = info.getCommunity();
            }
        } else if (parm.equals(TAG_SEVERITY)) {
            retParmVal = event.getSeverity();
        } else if (parm.equals(TAG_OPERINSTR)) {
            retParmVal = event.getOperinstruct();
        } else if (parm.equals(TAG_MOUSEOVERTEXT)) {
            retParmVal = event.getMouseovertext();
        } else if (parm.equals(PARMS_VALUES)) {
            if (event.getParms() != null && event.getParms().getParmCount() <= 0)
                retParmVal = null;

            else {
                StringBuffer ret = new StringBuffer();

                Parms parms = event.getParms();
                Enumeration en = parms.enumerateParm();
                while (en.hasMoreElements()) {
                    Parm evParm = (Parm) en.nextElement();
                    Value parmValue = evParm.getValue();
                    if (parmValue == null)
                        continue;

                    String parmValueStr = getValueAsString(parmValue);
                    if (parmValueStr == null)
                        continue;

                    if (ret.length() == 0) {
                        ret.append(parmValueStr);
                    } else {
                        ret.append(SPACE_DELIM + parmValueStr);
                    }
                }

                retParmVal = ret.toString();
            }
        } else if (parm.equals(PARMS_NAMES)) {
            if (event.getParms() != null && event.getParms().getParmCount() <= 0)
                retParmVal = null;

            else {
                StringBuffer ret = new StringBuffer();

                Parms parms = event.getParms();
                if (parm != null) {
                    Enumeration en = parms.enumerateParm();
                    while (en.hasMoreElements()) {
                        Parm evParm = (Parm) en.nextElement();
                        String parmName = evParm.getParmName();
                        if (parmName == null)
                            continue;

                        if (ret.length() == 0) {
                            ret.append(parmName.trim());
                        } else {
                            ret.append(SPACE_DELIM + parmName.trim());
                        }
                    }
                }

                retParmVal = ret.toString();
            }
        } else if (parm.equals(PARMS_ALL)) {
            if (event.getParms() != null && event.getParms().getParmCount() <= 0)
                retParmVal = null;

            else {
                StringBuffer ret = new StringBuffer();

                Parms parms = event.getParms();
                if (parms != null) {
                    Enumeration en = parms.enumerateParm();
                    while (en.hasMoreElements()) {
                        Parm evParm = (Parm) en.nextElement();
                        String parmName = evParm.getParmName();
                        if (parmName == null)
                            continue;

                        Value parmValue = evParm.getValue();
                        if (parmValue == null)
                            continue;

                        String parmValueStr = getValueAsString(parmValue);
                        if (ret.length() != 0) {
                            ret.append(SPACE_DELIM);
                        }

                        ret.append(parmName.trim() + NAME_VAL_DELIM + "\"" + parmValueStr + "\"");
                    }
                }

                retParmVal = ret.toString();
            }
        } else if (parm.equals(NUM_PARMS_STR)) {
            if (event.getParms() != null) {
                int count = event.getParms().getParmCount();
                retParmVal = String.valueOf(count);
            }
        } else if (parm.startsWith(PARM_NUM_PREFIX)) {
            Parms eventParms = event.getParms();
            int end = parm.lastIndexOf(PARM_END_SUFFIX);
            if (end != -1 && eventParms != null) {
                // Get the value between the '#' and ']'
                String eparmname = parm.substring(PARM_NUM_PREFIX_LENGTH, end);
                int parmNum = -1;
                try {
                    parmNum = Integer.parseInt(eparmname);
                } catch (NumberFormatException nfe) {
                    parmNum = -1;
                    retParmVal = null;
                }

                if (parmNum > 0 && parmNum <= eventParms.getParmCount()) {
                    Parm evParm = eventParms.getParm(parmNum - 1);

                    // get parm value
                    Value eparmval = evParm.getValue();
                    if (eparmval != null) {
                        retParmVal = getValueAsString(eparmval);
                    }
                } else {
                    retParmVal = null;
                }
            }
        } else if (parm.startsWith(PARM_BEGIN)) {
            if (parm.length() > PARM_BEGIN_LENGTH) {
                int end = parm.indexOf(PARM_END_SUFFIX, PARM_BEGIN_LENGTH);
                if (end != -1) {
                    // Get the value between the '[' and ']'
                    String eparmname = parm.substring(PARM_BEGIN_LENGTH, end);

                    Parms parms = event.getParms();
                    if (parms != null) {
                        Enumeration en = parms.enumerateParm();
                        while (en.hasMoreElements()) {
                            Parm evParm = (Parm) en.nextElement();
                            String parmName = evParm.getParmName();
                            if (parmName != null && parmName.trim().equals(eparmname)) {
                                // get parm value
                                Value eparmval = evParm.getValue();
                                if (eparmval != null) {
                                    retParmVal = getValueAsString(eparmval);
                                    break;
                                }
                            }
                        }
                    }
                }
            }
        }

        return (retParmVal == null ? null : retParmVal.trim());
    }

