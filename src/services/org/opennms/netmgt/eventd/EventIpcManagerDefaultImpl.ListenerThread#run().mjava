		/**
		 * <p>The run method preforms the actual work for 
		 * the runnable. It loops infinitely until the shutdown
		 * flag is set, during which time it processes queue
		 * elements. Each element in the queue should be a 
		 * instance of {@link org.opennms.netmgt.xml.event.Event}. 
		 * After each event is read, the 'onEvent' method of the listener
		 * is invoked.</p>
		 *
		 */
		public void run()
		{
			Category log = ThreadCategory.getInstance(this.getClass());
			if(log.isDebugEnabled())
				log.debug("In ListenerThread " + m_listener.getName() + " run");

			while(!m_shutdown)
			{
				Object obj = null;
				try
				{
					obj = m_queue.remove(500);
					if(obj == null)
						continue;
				}
				catch(InterruptedException ie)
				{
					m_shutdown = true;
					break;	
				}
				catch(FifoQueueException fqE)
				{
					m_shutdown = true;
					break; 
				}

				try
				{
					if(obj != null && obj instanceof Event)
					{
						Event event = (Event)obj;

						if(log.isDebugEnabled())
							log.debug("run: calling onEvent on " + m_listener.getName() + " for event " + event.getUei());
						m_listener.onEvent(event);
						
					}
				}
				catch(Throwable t)
				{
					log.warn("run: an unexpected error occured during ListenerThread " + m_listener.getName() + " run", t);

				}
			}

		}

