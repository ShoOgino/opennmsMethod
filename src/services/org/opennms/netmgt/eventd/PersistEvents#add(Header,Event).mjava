    /**
     * Insert values into the EVENTS table
     * 
     * @exception java.sql.SQLException
     *                Thrown if there is an error adding the event to the
     *                database.
     * @exception java.lang.NullPointerException
     *                Thrown if a required resource cannot be found in the
     *                properties file.
     */
    protected void add(Header eventHeader, Event event) throws SQLException {
        int eventID = -1;

        Category log = ThreadCategory.getInstance(EventWriter.class);

        // events next id from sequence
        //

        // Execute the statementto get the next event id
        //
        ResultSet rs = m_getNextEventIdStmt.executeQuery();
        rs.next();
        eventID = rs.getInt(1);
        rs.close();
        rs = null;

        if (log.isDebugEnabled())
            log.debug("EventWriter: DBID: " + eventID);

        synchronized (event) {
            event.setDbid(eventID);
        }

        //
        // Set up the sql information now
        //

        // eventID
        m_eventInsStmt.setInt(1, eventID);

        // eventUEI
        m_eventInsStmt.setString(2, Constants.format(event.getUei(), EVENT_UEI_FIELD_SIZE));

        // nodeID
        int nodeid = (int) event.getNodeid();
        set(m_eventInsStmt, 3, event.hasNodeid() ? nodeid : -1);

        // eventTime
        java.sql.Timestamp eventTime = null;
        try {
            java.util.Date date = EventConstants.parseToDate(event.getTime());
            eventTime = new java.sql.Timestamp(date.getTime());
            m_eventInsStmt.setTimestamp(4, eventTime);
        } catch (java.text.ParseException pe) {
            log.warn("Failed to convert time " + event.getTime() + " to java.sql.Timestamp, Setting current time instead", pe);

            eventTime = new java.sql.Timestamp((new java.util.Date()).getTime());
            m_eventInsStmt.setTimestamp(4, eventTime);
        }

        //
        // Resolve the event host to a hostname using
        // the ipinterface table
        //
        String hostname = event.getHost();
        if (hostname != null) {
            try {
                hostname = getHostName(hostname);
            } catch (SQLException sqlE) {
                // hostname can be null - so do nothing
                // use the IP
                hostname = event.getHost();
            }
        }

        // eventHost
        set(m_eventInsStmt, 5, Constants.format(hostname, EVENT_HOST_FIELD_SIZE));

        // ipAddr
        set(m_eventInsStmt, 6, Constants.format(event.getInterface(), EVENT_INTERFACE_FIELD_SIZE));

        // eventDpName
        m_eventInsStmt.setString(7, (eventHeader != null) ? Constants.format(eventHeader.getDpName(), EVENT_DPNAME_FIELD_SIZE) : "undefined");

        // eventSnmpHost
        set(m_eventInsStmt, 8, Constants.format(event.getSnmphost(), EVENT_SNMPHOST_FIELD_SIZE));

        //
        // convert the service name to a service id
        //
        int svcId = -1;
        if (event.getService() != null) {
            try {
                svcId = getServiceID(event.getService());
            } catch (SQLException sqlE) {
                log.warn("EventWriter.add: Error converting service name \"" + event.getService() + "\" to an integer identifier, storing -1", sqlE);
            }
        }

        // service identifier
        set(m_eventInsStmt, 9, svcId);

        // eventSnmp
        if (event.getSnmp() != null)
            m_eventInsStmt.setString(10, SnmpInfo.format(event.getSnmp(), EVENT_SNMP_FIELD_SIZE));
        else
            m_eventInsStmt.setNull(10, Types.VARCHAR);

        // eventParms
        set(m_eventInsStmt, 11, (event.getParms() != null) ? Parameter.format(event.getParms()) : null);

        // eventCreateTime
        java.sql.Timestamp eventCreateTime = new java.sql.Timestamp((new java.util.Date()).getTime());
        m_eventInsStmt.setTimestamp(12, eventCreateTime);

        // eventDescr
        set(m_eventInsStmt, 13, Constants.format(event.getDescr(), EVENT_DESCR_FIELD_SIZE));

        // eventLoggroup
        set(m_eventInsStmt, 14, (event.getLoggroupCount() > 0) ? Constants.format(event.getLoggroup(), EVENT_LOGGRP_FIELD_SIZE) : null);

        // eventLogMsg
        // eventLog
        // eventDisplay
        if (event.getLogmsg() != null) {
            // set log message
            set(m_eventInsStmt, 15, Constants.format(event.getLogmsg().getContent(), EVENT_LOGMSG_FIELD_SIZE));
            String logdest = event.getLogmsg().getDest();
            // if 'logndisplay' set both log and display
            // column to yes
            if (logdest.equals("logndisplay")) {
                set(m_eventInsStmt, 16, MSG_YES);
                set(m_eventInsStmt, 17, MSG_YES);
            }
            // if 'logonly' set log column to true
            else if (logdest.equals("logonly")) {
                set(m_eventInsStmt, 16, MSG_YES);
                set(m_eventInsStmt, 17, MSG_NO);
            }
            // if 'displayonly' set display column to true
            else if (logdest.equals("displayonly")) {
                set(m_eventInsStmt, 16, MSG_NO);
                set(m_eventInsStmt, 17, MSG_YES);
            }
            // if 'suppress' set both log and display to false
            else if (logdest.equals("suppress")) {
                set(m_eventInsStmt, 16, MSG_NO);
                set(m_eventInsStmt, 17, MSG_NO);
            }
        } else {
            m_eventInsStmt.setNull(15, Types.VARCHAR);

            // If this is an event that had no match in the event conf
            // mark it as to be logged and displayed so that there
            // are no events that slip through the system
            // without the user knowing about them

            set(m_eventInsStmt, 16, MSG_YES);
            set(m_eventInsStmt, 17, MSG_YES);
        }

        // eventSeverity
        set(m_eventInsStmt, 18, Constants.getSeverity(event.getSeverity()));

        // eventPathOutage
        set(m_eventInsStmt, 19, (event.getPathoutage() != null) ? Constants.format(event.getPathoutage(), EVENT_PATHOUTAGE_FIELD_SIZE) : null);

        // eventCorrelation
        set(m_eventInsStmt, 20, (event.getCorrelation() != null) ? org.opennms.netmgt.eventd.db.Correlation.format(event.getCorrelation(), EVENT_CORRELATION_FIELD_SIZE) : null);

        // eventSuppressedCount
        m_eventInsStmt.setNull(21, Types.INTEGER);

        // eventOperInstruct
        set(m_eventInsStmt, 22, Constants.format(event.getOperinstruct(), EVENT_OPERINSTRUCT_FIELD_SIZE));

        // eventAutoAction
        set(m_eventInsStmt, 23, (event.getAutoactionCount() > 0) ? AutoAction.format(event.getAutoaction(), EVENT_AUTOACTION_FIELD_SIZE) : null);

        // eventOperAction / eventOperActionMenuText
        if (event.getOperactionCount() > 0) {
            List a = new ArrayList();
            List b = new ArrayList();

            Enumeration en = event.enumerateOperaction();
            while (en.hasMoreElements()) {
                Operaction eoa = (Operaction) en.nextElement();
                a.add(eoa);
                b.add(eoa.getMenutext());
            }

            set(m_eventInsStmt, 24, OperatorAction.format(a, EVENT_OPERACTION_FIELD_SIZE));
            set(m_eventInsStmt, 25, Constants.format(b, EVENT_OPERACTION_MENU_FIELD_SIZE));
        } else {
            m_eventInsStmt.setNull(24, Types.VARCHAR);
            m_eventInsStmt.setNull(25, Types.VARCHAR);
        }

        // eventNotification, this column no longer needed
        m_eventInsStmt.setNull(26, Types.VARCHAR);

        // eventTroubleTicket / eventTroubleTicket state
        if (event.getTticket() != null) {
            set(m_eventInsStmt, 27, Constants.format(event.getTticket().getContent(), EVENT_TTICKET_FIELD_SIZE));
            int ttstate = 0;
            if (event.getTticket().getState().equals("on"))
                ttstate = 1;

            set(m_eventInsStmt, 28, ttstate);
        } else {
            m_eventInsStmt.setNull(27, Types.VARCHAR);
            m_eventInsStmt.setNull(28, Types.INTEGER);
        }

        // eventForward
        set(m_eventInsStmt, 29, (event.getForwardCount() > 0) ? org.opennms.netmgt.eventd.db.Forward.format(event.getForward(), EVENT_FORWARD_FIELD_SIZE) : null);

        // event mouseOverText
        set(m_eventInsStmt, 30, Constants.format(event.getMouseovertext(), EVENT_MOUSEOVERTEXT_FIELD_SIZE));

        // eventAckUser
        if (event.getAutoacknowledge() != null && event.getAutoacknowledge().getState().equals("on")) {

            set(m_eventInsStmt, 31, Constants.format(event.getAutoacknowledge().getContent(), EVENT_ACKUSER_FIELD_SIZE));

            // eventAckTime - if autoacknowledge is present,
            // set time to event create time
            set(m_eventInsStmt, 32, eventCreateTime);
        } else {
            m_eventInsStmt.setNull(31, Types.INTEGER);
            m_eventInsStmt.setNull(32, Types.TIMESTAMP);
        }

        // eventSource
        set(m_eventInsStmt, 33, Constants.format(event.getSource(), EVENT_SOURCE_FIELD_SIZE));

        // execute
        m_eventInsStmt.executeUpdate();

        if (log.isDebugEnabled())
            log.debug("SUCCESSFULLY added " + event.getUei() + " related  data into the EVENTS table");
    }

