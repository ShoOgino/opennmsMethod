    /**
     * <p>
     * Handling the mask values ending with '%' is a pain since the hashcodes
     * will need to work in reverse!
     * 
     * <p>
     * For e.g. consider mask values '.1.3.6.1.4.1.9%' and '.1.3.6.1.4.1.%'
     * normal hashcodes will mean '.1.3.6.1.4.1.9%' will have a larger hashcode.
     * However when we try a match in the eventconf(which uses a treemap of
     * eventkeys to get the event keys in an ordered fashion), we want
     * '.1.3.6.1.4.1.9%' to be a better match than '.1.3.6.1.4.1.%' - i.e.we
     * want '.1.3.6.1.4.1.9%' to have a lesser hashcode than '.1.3.6.1.4.1.%' -
     * hence this method. Only a lot of testing will reveal conflicts etc.
     * though
     * </p>
     */
    private int evaluateHashCode(String value) {
        int h = 0;
        if (value == null)
            return h;

        int length = value.length();
        if (value.startsWith(".1.")) // eid?
        {
            StringBuffer newValue = new StringBuffer();
            for (int i = 0; i < length; i++) {
                char tc = value.charAt(i);
                if (tc != '.')
                    newValue.append(tc);
            }

            value = newValue.toString();
            length = value.length();
        }

        if (value.endsWith("%")) {
            char val[] = value.toCharArray();
            int len = value.length();
            int lastIndex = len - 1;

            for (int i = 0; i <= lastIndex; i++) {
                if (i != 0)
                    h = 31 * h / i - val[i];
                else
                    h = 31 * h - val[i];
            }
        } else
            h = value.hashCode();

        return h;
    }

