	public void init()
	{
		ThreadCategory.setPrefix(LOG4J_CATEGORY);
		Category log = ThreadCategory.getInstance();

		// load the eventd configuration
		EventdConfigFactory eFactory = null;
		try
		{
			EventdConfigFactory.reload();
			eFactory = EventdConfigFactory.getInstance();
		}
                catch(FileNotFoundException ex)
                {
                        log.error("Failed to load eventd configuration. File Not Found:", ex);
                        throw new UndeclaredThrowableException(ex);
                }
		catch(MarshalException ex)
		{
			log.error("Failed to load eventd configuration", ex);
			throw new UndeclaredThrowableException(ex);
		}
		catch(ValidationException ex)
		{
			log.error("Failed to load eventd configuration", ex);
			throw new UndeclaredThrowableException(ex);
		}
		catch(IOException ex)
		{
			log.error("Failed to load eventd configuration", ex);
			throw new UndeclaredThrowableException(ex);
		}

		// Get a database connection and create the service table map
		//
		java.sql.Connection tempConn = null;
		try
		{
			DatabaseConnectionFactory.init();
			tempConn = DatabaseConnectionFactory.getInstance().getConnection();

			// create the service table map
			//
			PreparedStatement stmt = tempConn.prepareStatement(EventdConstants.SQL_DB_SVC_TABLE_READ);
			ResultSet rset = stmt.executeQuery();
			while(rset.next())
			{
				int svcid      = rset.getInt(1);
				String svcname = rset.getString(2);
				
				m_serviceTableMap.put(svcname, new Integer(svcid));
			}

			rset.close();
			stmt.close();
		}
		catch (IOException ie)
		{
			log.fatal("IOException getting database connection", ie);
			throw new UndeclaredThrowableException(ie);
		}
		catch (MarshalException me)
		{
			log.fatal("Marshall Exception getting database connection", me);
			throw new UndeclaredThrowableException(me);
		}
		catch (ValidationException ve)
		{
			log.fatal("Validation Exception getting database connection", ve);
			throw new UndeclaredThrowableException(ve);
		}
		catch (SQLException sqlE)
		{
			throw new UndeclaredThrowableException(sqlE);
		}
		catch (ClassNotFoundException cnfE)
		{
			throw new UndeclaredThrowableException(cnfE);
		}
		finally
		{
			try
			{
				if(tempConn != null)
					tempConn.close();
			} 
			catch(SQLException sqlE) 
			{
				log.warn("An error occured closing the database connection, ignoring", sqlE);
			}
		}

		// load configuration(eventconf)
		//
		try
		{
			File configFile = ConfigFileConstants.getFile(ConfigFileConstants.EVENT_CONF_FILE_NAME);
			EventConfigurationManager.loadConfiguration(configFile.getPath());
		}
		catch(MarshalException ex)
		{
			log.error("Failed to load eventd configuration", ex);
			throw new UndeclaredThrowableException(ex);
		}
		catch(ValidationException ex)
		{
			log.error("Failed to load eventd configuration", ex);
			throw new UndeclaredThrowableException(ex);
		}
		catch(IOException ex)
		{
			log.error("Failed to load events configuration", ex);
			throw new UndeclaredThrowableException(ex);
		}

		//
		// Create all the threads
		//

		m_tcpReceiver = null;
		m_udpReceiver = null;
		try
		{
			String timeoutReq = eFactory.getSocketSoTimeoutRequired();
			m_tcpReceiver = new TcpEventReceiver(eFactory.getTCPPort());
			m_udpReceiver = new UdpEventReceiver(eFactory.getUDPPort());

			m_tcpReceiver.addEventHandler(this);
			m_udpReceiver.addEventHandler(this);

		}
		catch (IOException e)
		{
			log.error("Error starting up the TCP/UDP threads of eventd",e);
			throw new UndeclaredThrowableException(e);
		}
		

		//
		// Start all the threads
		//

		if(log.isDebugEnabled())
			log.debug("EventIpcManagerFactory init");

		EventIpcManagerFactory.init();
	}

