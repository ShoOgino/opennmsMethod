	/**
	 * Performs threshold checking on an directory which contains one or
	 * more RRD files containing latency/response time information.  
	 * ThresholdEntity objects are stored for performing threshold
	 * checking.  
	 * 
	 * @param directory		RRD repository directory
	 * @param nodeId		Node identifier of interface being checked
	 * @param ipAddr		IP address of the interface being checked
	 * @param interval		Configured thresholding interval
	 * @param date 			Source for timestamp to be used for all 
	 * 					generated events
	 * @param thresholdMap		Map of configured interface level ThresholdEntity 
	 * 					objects	keyed by datasource name.
	  * @param events		Castor events object containing any
	 * 					events to be generated as a result
	 * 					of threshold checking.
	 * 
	 * @throws IllegalArgumentException if path parameter is not a directory.
	 */
	private void checkRrdDir(File directory, 
				int nodeId,
				InetAddress ipAddr,
				int interval,
				Date date,
				Map thresholdMap,
				Events events)
		throws IllegalArgumentException
	{
		Category log = ThreadCategory.getInstance(getClass());
		
		// Sanity Check
		if (directory == null ||
			ipAddr == null ||
			date == null 	||
			thresholdMap == null ||
			events == null)
		{
			throw new IllegalArgumentException("Null parameters not permitted.");
		}
		
		if (log.isDebugEnabled())
			log.debug("checkPerformanceDir: threshold checking dir: " + directory.getAbsolutePath());
		
		// Iterate over directory contents and threshold
		// check any RRD files which represent datasources
		// in the threshold maps.
		//
		File[] files = directory.listFiles(RrdFileConstants.RRD_FILENAME_FILTER);
		
		if (files == null)
			return;
		
		for (int i=0; i<files.length; i++)
		{
			// File name has format: <datsource>.rrd
			// Must strip off ".rrd" portion.
			String filename = files[i].getName();
			String datasource = filename.substring(0, filename.indexOf(".rrd"));
			
			// Lookup the ThresholdEntity object corresponding
			// to this datasource.  
			//
			ThresholdEntity threshold = (ThresholdEntity)thresholdMap.get(datasource);
			if (threshold != null)
			{
				// Use RRD JNI interface to "fetch" value of the
				// datasource from the RRD file
				//
				Double dsValue = null;
				try
				{
					dsValue = RrdUtils.fetchLastValue(files[i].getAbsolutePath(), interval);
				}
				catch (NumberFormatException nfe)
				{
					log.warn("Unable to convert retrieved value for datasource '" + datasource + "' to a double, skipping evaluation.");
				}
                 catch (RrdException e) {
                     log.error("An error occurred retriving the last value for datasource '"+ datasource + "'", e);
                 }
				
				if (dsValue != null && !dsValue.isNaN())
				{
					// Evaluate the threshold
					// 
					// ThresholdEntity.evaluate() returns an integer value
					// which indicates which threshold values were
					// triggered and require an event to be generated (if any).
					// 
					int result = threshold.evaluate(dsValue.doubleValue());
					if (result != ThresholdEntity.NONE_TRIGGERED)
					{
						if (result == ThresholdEntity.HIGH_AND_LOW_TRIGGERED ||
							result == ThresholdEntity.HIGH_TRIGGERED)
						{
							events.addEvent(createEvent(nodeId,
										ipAddr,
										dsValue.doubleValue(),
										threshold.getHighThreshold(),
										EventConstants.HIGH_THRESHOLD_EVENT_UEI, 
										date));
						}
						
						if (result == ThresholdEntity.HIGH_AND_LOW_TRIGGERED ||
							result == ThresholdEntity.LOW_TRIGGERED)
						{
							events.addEvent(createEvent(nodeId,
										ipAddr,
										dsValue.doubleValue(),
										threshold.getLowThreshold(),
										EventConstants.LOW_THRESHOLD_EVENT_UEI, 
										date));
						}

						if (result == ThresholdEntity.HIGH_AND_LOW_REARMED ||
							result == ThresholdEntity.HIGH_REARMED)
						{
							events.addEvent(createEvent(nodeId,
										ipAddr,
										dsValue.doubleValue(),
										threshold.getHighThreshold(),
										EventConstants.HIGH_THRESHOLD_REARM_EVENT_UEI, 
										date));
						}
						
						if (result == ThresholdEntity.HIGH_AND_LOW_REARMED ||
							result == ThresholdEntity.LOW_REARMED)
						{
							events.addEvent(createEvent(nodeId,
										ipAddr,
										dsValue.doubleValue(),
										threshold.getLowThreshold(),
										EventConstants.LOW_THRESHOLD_REARM_EVENT_UEI, 
										date));
						}
					}
				}
			}
		}
	}

