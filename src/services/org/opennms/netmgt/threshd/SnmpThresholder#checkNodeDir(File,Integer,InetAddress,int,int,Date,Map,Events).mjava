    /**
     * Performs threshold checking on an SNMP RRD node directory.
     * 
     * @param directory
     *            RRD repository directory
     * @param nodeId
     *            Node identifier
     * @param primary
     *            Primary SNMP interface address
     * @param interval
     *            Configured thresholding interval
     * @param range
     *            Time interval before last possible PDP is considered
     *            "out of date"
     * @param date
     *            Source for timestamp to be used for all generated events
     * @param thresholdMap
     *            Map of node level ThresholdEntity objects keyed by datasource
     *            name.
     * @param events
     *            Castor events object containing any events to be generated as
     *            a result of threshold checking.
     * 
     * @throws IllegalArgumentException
     *             if path parameter is not a directory.
     */
    private void checkNodeDir(File directory, Integer nodeId, InetAddress primary, int interval, int range, Date date, Map thresholdMap, Events events) throws IllegalArgumentException {
		Category log = log();

        // Sanity Check
        if (directory == null || nodeId == null || primary == null || date == null || thresholdMap == null || events == null) {
            throw new IllegalArgumentException("Null parameters not permitted.");
        }

        if (log.isDebugEnabled())
            log.debug("checkNodeDir: threshold checking node dir: " + directory.getAbsolutePath());

        // Iterate over directory contents and threshold
        // check any RRD files which represent datasources
        // in the threshold maps.
        //
        File[] files = directory.listFiles(RrdFileConstants.RRD_FILENAME_FILTER);

        if (files == null)
            return;

        for (int i = 0; i < files.length; i++) {
            // File name has format: <datsource><extension>
            // Must strip off <extension> portion.
            String filename = files[i].getName();
            String datasource = filename.substring(0, filename.indexOf(RrdUtils.get_extension()));

            // Lookup the ThresholdEntity object corresponding
            // to this datasource.
            //
            ThresholdEntity threshold = (ThresholdEntity) thresholdMap.get(datasource);
            if (threshold != null) {

                // Get the value to use for the ds-label from this threshold
                String dsLabelValue = "Unknown";
                String propertiesFile = directory + "/strings.properties";
                Properties stringProps = new Properties();
                try {
                        stringProps.load(new FileInputStream(propertiesFile));
                        dsLabelValue = stringProps.getProperty(threshold.getDatasourceLabel());
                } catch (FileNotFoundException e) {
                        log.debug ("Label: No strings.properties file found for node id: " + nodeId + " looking here: " + propertiesFile);
                } catch (NullPointerException e) {
                        log.debug ("Label: No data source label for node id: " + nodeId );
                } catch (java.io.IOException e) {
                        log.debug ("Label: I/O exception when looking for strings.properties file for node id: "+ nodeId + " looking here: " + propertiesFile);
                }


                // Use RRD JNI interface to "fetch" value of the
                // datasource from the RRD file
                //
                Double dsValue = null;
		
                try {
                	if (range != 0) {
                		if (log.isDebugEnabled())
                            log.debug("checking values within " + range + " mS of last possible PDP");
                		dsValue = RrdUtils.fetchLastValueInRange(files[i].getAbsolutePath(), interval, range);
                	} else {
                		if (log.isDebugEnabled())
                            log.debug("checking value of last possible PDP only");
                		dsValue = RrdUtils.fetchLastValue(files[i].getAbsolutePath(), interval);
                	}
                } catch (NumberFormatException nfe) {
                    log.warn("Unable to convert retrieved value for datasource '" + datasource + "' to a double, skipping evaluation.");
                } catch (RrdException e) {
                    log.error("An error occurred retriving the last value for datasource '" + datasource + "'", e);
                }

                if (dsValue != null && !dsValue.isNaN()) {
                    // Evaluate the threshold
                    // 
                    // ThresholdEntity.evaluate() returns an integer value
                    // which indicates which threshold values were
                    // triggered and require an event to be generated (if any).
                    // 
                    int result = threshold.evaluate(dsValue.doubleValue());
                    if (result != ThresholdEntity.NONE_TRIGGERED) {
                        if (result == ThresholdEntity.HIGH_AND_LOW_TRIGGERED || result == ThresholdEntity.HIGH_TRIGGERED) {
                            events.addEvent(createEvent(nodeId, primary, null, dsValue.doubleValue(), threshold.getHighThreshold(), EventConstants.HIGH_THRESHOLD_EVENT_UEI, date, dsLabelValue));
                        }

                        if (result == ThresholdEntity.HIGH_AND_LOW_TRIGGERED || result == ThresholdEntity.LOW_TRIGGERED) {
                            events.addEvent(createEvent(nodeId, primary, null, dsValue.doubleValue(), threshold.getLowThreshold(), EventConstants.LOW_THRESHOLD_EVENT_UEI, date, dsLabelValue));
                        }

                        if (result == ThresholdEntity.HIGH_AND_LOW_REARMED || result == ThresholdEntity.HIGH_REARMED) {
                            events.addEvent(createEvent(nodeId, primary, null, dsValue.doubleValue(), threshold.getHighThreshold(), EventConstants.HIGH_THRESHOLD_REARM_EVENT_UEI, date, dsLabelValue));
                        }

                        if (result == ThresholdEntity.HIGH_AND_LOW_REARMED || result == ThresholdEntity.LOW_REARMED) {
                            events.addEvent(createEvent(nodeId, primary, null, dsValue.doubleValue(), threshold.getLowThreshold(), EventConstants.LOW_THRESHOLD_REARM_EVENT_UEI, date, dsLabelValue));
                        }
                    }
                }
            }
        }
    }

