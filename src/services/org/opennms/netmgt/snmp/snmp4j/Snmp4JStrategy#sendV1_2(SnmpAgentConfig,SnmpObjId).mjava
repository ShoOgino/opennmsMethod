    /**
     * This method sends an SNMP4J v1/v2 request and uses no helper methods and
     * is used in testing only.
     * 
     * @deprecated
     * @param agentConfig
     * @param oid
     * @return
     */
    private SnmpValue sendV1_2(SnmpAgentConfig agentConfig, SnmpObjId oid) {

        TransportMapping transport = null;
        try {
            transport = new DefaultUdpTransportMapping();
            Snmp session = new Snmp(transport);
            session.listen();
            
            CommunityTarget target = new CommunityTarget();
            ((CommunityTarget)target).setCommunity(createOctetString(agentConfig.getReadCommunity()));
            target.setAddress(convertAddress(agentConfig.getAddress(), agentConfig.getPort()));
            target.setRetries(agentConfig.getRetries());
            target.setTimeout(agentConfig.getTimeout());
            target.setVersion(convertVersion(agentConfig.getVersion()));
            
            PDU pdu = new PDU();
            pdu.add(new VariableBinding(new OID(oid.toString())));
            pdu.setType(convertPduType(agentConfig.getPduType()));
            
            ResponseEvent responseEvent = null;
            responseEvent = session.send(pdu, target);
            PDU response = responseEvent.getResponse();
            if (response.size() < 1) {
                return null;
            } else {
                return new Snmp4JValue(response.get(0).getVariable());
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                transport.close();
            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
        return null;
    }

