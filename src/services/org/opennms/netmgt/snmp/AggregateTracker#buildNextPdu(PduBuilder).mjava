    public ResponseProcessor buildNextPdu(final PduBuilder pduBuilder) {
        
        // first process the child trackers that aren't finished up to maxVars 
        int count = 0;
        int maxVars = pduBuilder.getMaxVarsPerPdu();
        final List builders = new ArrayList(m_children.length);
        for (int i = 0; i < m_children.length && count < maxVars; i++) {
            CollectionTracker subTracker = m_children[i];
            if (!subTracker.isFinished()) {
                ChildTrackerPduBuilder subPduBuilder = new ChildTrackerPduBuilder(maxVars-count);
                ResponseProcessor rp = subTracker.buildNextPdu(subPduBuilder);
                subPduBuilder.setResponseProcessor(rp);
                builders.add(subPduBuilder);
                count += subPduBuilder.size();
            }
        }
        
        // set the nonRepeaters in the passed in pduBuilder and store indices in the childTrackers
        int nonRepeaters = 0;
        for (Iterator it = builders.iterator(); it.hasNext();) {
            ChildTrackerPduBuilder subBuilder = (ChildTrackerPduBuilder) it.next();
            subBuilder.setNonRepeaterStartIndex(nonRepeaters);
            subBuilder.addNonRepeaters(pduBuilder);
            nonRepeaters += subBuilder.getNonRepeaters();
        }
        
        // set the repeaters in the passed in pduBuilder and store indices in the childTrackers
        int maxRepititions = Integer.MAX_VALUE;
        int repeaters = 0;
        for (Iterator it = builders.iterator(); it.hasNext();) {
            ChildTrackerPduBuilder subBuilder = (ChildTrackerPduBuilder) it.next();
            subBuilder.setRepeaterStartIndex(nonRepeaters+repeaters);
            subBuilder.addRepeaters(pduBuilder);
            maxRepititions = Math.min(maxRepititions, subBuilder.getMaxRepititions());
            repeaters += subBuilder.getRepeaters();
        }
        
        // set the non repeaters and max repititions
        pduBuilder.setNonRepeaters(nonRepeaters);
        pduBuilder.setMaxRepititions(maxRepititions == Integer.MAX_VALUE ? 1 : maxRepititions);
        
        // construct a response processor that tracks the changes and informs the response processors
        // for the child trackers
        return new ChildTrackerResponseProcessor(pduBuilder, builders, nonRepeaters, repeaters);
    }

