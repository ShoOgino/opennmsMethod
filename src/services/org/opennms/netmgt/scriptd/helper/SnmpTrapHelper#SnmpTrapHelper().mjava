	/**
	 * Constructs a new SNMPTrapHelper.
	 */
	public SnmpTrapHelper()
	{
		
		// create the trap session

		try
		{
			// The port -1 tells SnmpPortal to find any unused port on 
			// the system.
			m_trapSession = new SnmpTrapSession(this, -1);
		}

		catch (Exception e)
		{
			Category log = ThreadCategory.getInstance(SnmpTrapHelper.class);
			log.error("SnmpTrapHelper failed to open trap session: " + e.getMessage());
		}

    // create and populate the factory map
    
		m_factoryMap = new HashMap();

		m_factoryMap.put(EventConstants.TYPE_SNMP_OCTET_STRING, new SnmpOctetStringFactory());
		m_factoryMap.put(EventConstants.TYPE_SNMP_INT32, new SnmpInt32Factory());
		m_factoryMap.put(EventConstants.TYPE_SNMP_NULL, new SnmpNullFactory());
		m_factoryMap.put(EventConstants.TYPE_SNMP_OBJECT_IDENTIFIER, new SnmpObjectIdFactory());
		m_factoryMap.put(EventConstants.TYPE_SNMP_IPADDRESS, new SnmpIPAddressFactory());
		m_factoryMap.put(EventConstants.TYPE_SNMP_TIMETICKS, new SnmpTimeTicksFactory());
		m_factoryMap.put(EventConstants.TYPE_SNMP_COUNTER32, new SnmpCounter32Factory());
		m_factoryMap.put(EventConstants.TYPE_SNMP_GAUGE32, new SnmpGauge32Factory());
		m_factoryMap.put(EventConstants.TYPE_SNMP_OPAQUE, new SnmpOpaqueFactory());
		m_factoryMap.put(EventConstants.TYPE_SNMP_COUNTER64, new SnmpCounter64Factory());
	}

