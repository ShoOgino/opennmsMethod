    /**
     * This method will returns a JFreeChart bar chart constructed based on XML configuration.
     * 
     * @param chartName Name specified in chart-configuration.xml
     * @return <code>JFreeChart</code> constructed from the chartName
     * @throws MarshalException
     * @throws ValidationException
     * @throws IOException
     * @throws SQLException
     */
    public static JFreeChart getBarChart(String chartName) throws MarshalException, ValidationException, IOException, SQLException {

        BarChart chartConfig = null;
        Connection conn = null;
        chartConfig = getBarChartConfigByName(chartName);
        
        if (chartConfig == null) {
            throw new IllegalArgumentException("getBarChart: Invalid chart name.");
        }
        
        /*
         * Get a database connection and create a JDBC based data set.
         */
        conn = DatabaseConnectionFactory.getInstance().getConnection();
        DefaultCategoryDataset baseDataSet = new DefaultCategoryDataset();
        JDBCCategoryDataset dataSet = null;
        
        /*
         * Configuration can contain more than one series.  This loop adds
         * single series data sets returned from sql query to a base data set
         * to be displayed in a the chart. 
         */
        Iterator it = chartConfig.getSeriesDefCollection().iterator();
        while (it.hasNext()) {
            SeriesDef def = (SeriesDef) it.next();
            dataSet = new JDBCCategoryDataset(conn, def.getJdbcDataSet().getSql());
            
            for (int i = 0; i < dataSet.getRowCount(); i++) {
                for (int j = 0; j < dataSet.getColumnCount(); j++) {
                    baseDataSet.addValue(dataSet.getValue(i, j), def.getSeriesName(), dataSet.getColumnKey(j));
                }
            }
        }

        
        PlotOrientation po = (chartConfig.getPlotOrientation() == "horizontal" ? PlotOrientation.HORIZONTAL : PlotOrientation.VERTICAL);
        
        JFreeChart barChart = ChartFactory.createBarChart(chartConfig.getTitle().getValue(),
                chartConfig.getDomainAxisLabel(),
                chartConfig.getRangeAxisLabel(),
                baseDataSet,
                po,
                chartConfig.getShowLegend(),
                chartConfig.getShowToolTips(),
                chartConfig.getShowUrls());
        
        /*
         * Add subtitles.
         */
        for (it = chartConfig.getSubTitleCollection().iterator(); it.hasNext();) {
            SubTitle subTitle = (SubTitle) it.next();
            Title title = subTitle.getTitle();
            String value = title.getValue();
            barChart.addSubtitle(new TextTitle(value));
        }
        
        /*
         * Set the series colors and labels
         */
        CategoryPlot plot = barChart.getCategoryPlot();
        BarRenderer renderer = (BarRenderer)plot.getRenderer();
        
        CategoryItemLabelGenerator generator = new StandardCategoryItemLabelGenerator();
        SeriesDef[] seriesDefs = chartConfig.getSeriesDef();
        for (int i = 0; i < seriesDefs.length; i++) {
            SeriesDef seriesDef = seriesDefs[i];
            Rgb rgb = seriesDef.getRgb();
            Paint paint = new Color(rgb.getRed().getRgbColor(), rgb.getGreen().getRgbColor(), rgb.getBlue().getRgbColor());
            renderer.setSeriesPaint(i, paint);
            if (seriesDef.getUseLabels())
                renderer.setSeriesItemLabelGenerator(i, generator);
        }

        return barChart;
        
    }

