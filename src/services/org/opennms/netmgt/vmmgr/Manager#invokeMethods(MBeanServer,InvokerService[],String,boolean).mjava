    private static List invokeMethods(MBeanServer server,
                                      InvokerService[] invokerServices,
                                      String at, boolean reverse) {
        Category log = ThreadCategory.getInstance(Manager.class);

        Integer[] serviceIndexes = new Integer[invokerServices.length];
        for (int i = 0; i < invokerServices.length; i++) {
            if (!reverse) {
                serviceIndexes[i] = new Integer(i);
            } else {
                serviceIndexes[i] = new Integer(invokerServices.length - 1 - i);
            }
        }

        List resultInfo = new ArrayList(invokerServices.length);
        for (int pass = 0, end = getEndPass(invokerServices); pass <= end;
             pass++) {
            if (log.isDebugEnabled()) {
                log.debug("starting pass " + pass);
            }
            
            for (int i = 0; i < serviceIndexes.length; i++) {
                int j = serviceIndexes[i].intValue();
                if (invokerServices[j].isBadService()) {
                    break;
                }
                Invoke[] todo = invokerServices[j].getService().getInvoke();
                for (int k = 0; todo != null && k < todo.length; k++) {
                    if (todo[k].getPass() != pass
                            || !at.equals(todo[k].getAt())) {
                        continue;
                    }
                    
                    ObjectInstance mbean = invokerServices[j].getMbean();

                    try {
                        Object result = invoke(server, todo[k], mbean);
                        resultInfo.add(new InvokerResult(mbean, result, null));
                    } catch (Throwable t) {
                        resultInfo.add(new InvokerResult(mbean, null, t));
                    }
                }
            }
        }
        
        return resultInfo;
    }

