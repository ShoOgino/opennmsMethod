    public static void main(String[] argv) {
	String invokeUrl = s_defaultInvokeUrl;
	boolean verbose = false;
	
        ThreadCategory.setPrefix(LOG4J_CATEGORY);
        Category log = ThreadCategory.getInstance(Manager.class);

	/*
	 * Setup Authenticator so that we can provide authentication, if
	 * needed, when go to connect to the URL
	 */
	Authenticator.setDefault(getAuthenticator());

        // set up the JMX logging
        mx4j.log.Log.redirectTo(new mx4j.log.Log4JLogger());

	for (int i = 0; i < argv.length; i++) {
	    if (argv[i].equals("-h")) {
		System.out.println("Usage: java org.opennms.netmgt.vmmgr.Manager [<options>] <command>");
		System.out.println("Accepted options:");
		System.out.println("        -v              Verbose mode.");
		System.out.println("        -u <URL>        Alternate invoker URL.");
		System.out.println("");
		System.out.println("Accepted commands: start, stop, status");
		System.out.println("");
		System.out.println("The default invoker URL is: " +
				   s_defaultInvokeUrl);
		System.exit(0);
	    } else if (argv[i].equals("-v")) {
		verbose = true;
	    } else if (argv[i].equals("-u")) {
		invokeUrl = argv[i + 1];
		i++;
	    } else if (i != (argv.length - 1)) {
		System.err.println("Invalid command-line option: \"" + argv[i]
				   + "\".  Use \"-h\" option for help.");
		System.exit(1);
	    } else {
		break;
	    }
	}

	if (argv.length == 0) {
	    System.err.println("You must specify a command.  Use \"-h\"" +
			       " option for help");
	}

	String command = argv[argv.length - 1];

        if ("start".equals(command)) {
            MBeanServer server = MBeanServerFactory.createMBeanServer("OpenNMS");
            start(server);
        } else if ("stop".equals(command)) {
            try {
                URL invoke = new URL(invokeUrl + "&operation=stop");
                InputStream in = invoke.openStream();
                int ch;
                while ((ch = in.read()) != -1) {
                    System.out.write((char) ch);
		}
                in.close();
                System.out.println("");
                System.out.flush();
            } catch (Throwable t) {
                log.error("error invoking stop command", t);
		System.exit(1);
            }
        } else if ("status".equals(command)) {
            try {
		StatusGetter statusGetter = new StatusGetter();

		statusGetter.setVerbose(verbose);
		statusGetter.setInvokeURL(new URL(invokeUrl +
						  "&operation=status"));

		statusGetter.queryStatus();

		if (statusGetter.getStatus() ==
		    StatusGetter.STATUS_NOT_RUNNING ||
		    statusGetter.getStatus() ==
		    StatusGetter.STATUS_CONNECTION_REFUSED) {
		    System.exit(3); // According to LSB: 3 - service not running
		} else if (statusGetter.getStatus() ==
			   StatusGetter.STATUS_PARTIALLY_RUNNING) {
		    /*
		     * According to LSB: reserved for application
		     * So, I say 160 - partially running
		     */
		    System.exit(160);
		} else if (statusGetter.getStatus() ==
			   StatusGetter.STATUS_RUNNING) {
		    System.exit(0); // everything should be good and running
		} else {
		    String message = "Unknown status returned from " +
			"statusGetter.getStatus(): " +
			statusGetter.getStatus();
		    System.err.println(message);
		    log.error(message);
		    System.exit(1);
		}
            } catch (Throwable t) {
                log.error("error invoking status command", t);
		System.exit(1);
            }
	} else if ("exit".equals(command)) {
            try {
                URL invoke = new URL(invokeUrl + "&operation=doSystemExit");
                InputStream in = invoke.openStream();
                int ch;
                while ((ch = in.read()) != -1) {
                    System.out.write((char) ch);
		}
                in.close();
                System.out.println("");
                System.out.flush();
            } catch (Throwable t) {
                log.error("error invoking exit command", t);
		System.exit(1);
            }
        } else {
	    System.err.println("Invalid command \"" + command + "\".");
	    System.err.println("Use \"-h\" option for help.");
	    System.exit(1);
	}
    }

