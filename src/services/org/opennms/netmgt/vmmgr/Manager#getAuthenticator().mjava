    public static Authenticator getAuthenticator() {
        ServiceConfigFactory sfact = null;
        try {
            ServiceConfigFactory.init();
            sfact = ServiceConfigFactory.getInstance();
        } catch (Exception e) {
            throw new java.lang.reflect.UndeclaredThrowableException(e);
        }

        // allocate some storage locations
        //
        Service[] services = sfact.getServices();

        Category log = ThreadCategory.getInstance(Manager.class);

        for (int i = 0; i < services.length; i++) {
	    if (!services[i].getName().equals(":Name=HttpAdaptorMgmt")) {
		continue;
	    }

            org.opennms.netmgt.config.service.Attribute[] attribs =
		services[i].getAttribute();

            if (attribs == null) {
		// the AuthenticationMethod is not set, so no authentication
		return null;
	    }

	    boolean usingBasic = false;
	    for (int j = 0; j < attribs.length; j++) {
		if (attribs[j].getName().equals("AuthenticationMethod")) {
		    if (!attribs[j].getValue().getContent().equals("basic")) {
			log.error("AuthenticationMethod is \"" +
				  attribs[j].getValue() +
				  "\", but only \"basic\" is " +
				  "supported");
			return null;
		    }
		    usingBasic = true;
		    break;
		}
	    }

	    Invoke[] invokes = services[i].getInvoke();
	    for (int j = 0; invokes != null && j < invokes.length; j++) {
		if (invokes[j].getMethod().equals("addAuthorization")) {
		    Argument[] args = invokes[j].getArgument();
		    if (args != null && args.length == 2 &&
			args[0].getContent().equals("manager")) {
			final String username = args[0].getContent();
			final String password = args[1].getContent();
			return new Authenticator() {
				protected PasswordAuthentication
				    getPasswordAuthentication() {
				    return new PasswordAuthentication(username,
								      password.toCharArray());
				}
			    };
		    }
		}
	    }
	}
	return null;
    }

