    public static void start(MBeanServer server) {
        ServiceConfigFactory sfact = null;
        try {
            ServiceConfigFactory.init();
            sfact = ServiceConfigFactory.getInstance();
        } catch (Exception e) {
            throw new java.lang.reflect.UndeclaredThrowableException(e);
        }

        // allocate some storage locations
        //
        Service[] services = sfact.getServices();
        ObjectInstance[] mbeans = new ObjectInstance[services.length];
        BitSet badSvcs = new BitSet(services.length);

        Category log = ThreadCategory.getInstance(Manager.class);
        boolean isTracing = log.isDebugEnabled();

        // preload the classes and register a new instance
        // with the MBeanServer
        //
        for (int i = 0; i < services.length; i++) {
            try {
                // preload the class
                //
                if (isTracing)
                    log.debug("loading class " + services[i].getClassName());

                Class cinst = Class.forName(services[i].getClassName());

                // get a new instance of the
                // class
                //
                if (isTracing)
                    log.debug("create new instance of " + services[i].getClassName());

                Object bean = cinst.newInstance();

                // register the mbean
                //
                if (isTracing)
                    log.debug("registering mbean instance " + services[i].getName());

                ObjectName name = new ObjectName(services[i].getName());
                mbeans[i] = server.registerMBean(bean, name);

                org.opennms.netmgt.config.service.Attribute[] attribs = services[i].getAttribute();
                if (attribs != null) {
                    for (int j = 0; j < attribs.length; j++) {
                        if (isTracing)
                            log.debug("setting attribute " + attribs[j].getName());

                        server.setAttribute(name, getAttribute(attribs[j]));
                    }
                }
            } catch (Throwable t) {
                log.error("An error occured loading the mbean " + services[i].getName() + " of type " + services[i].getClassName() + " it will be skipped", t);
                badSvcs.set(i);
            }
        }

        // now that everything is initialized, invoke the
        // methods
        //
        int pass = 0;
        int end = 0;
        while (pass <= end) {
            if (isTracing)
                log.debug("starting pass " + pass);
            for (int i = 0; i < services.length && !badSvcs.get(i); i++) {
                Invoke[] todo = services[i].getInvoke();
                for (int j = 0; todo != null && j < todo.length; j++) {
                    if (todo[j].getPass() == pass && (todo[j].getAt() == null || todo[j].getAt().equals("start"))) {
                        // invoke!
                        //
                        try {
                            // get the arguments
                            //
                            Argument[] args = todo[j].getArgument();
                            Object[] parms = new Object[0];
                            String[] sig = new String[0];
                            if (args != null && args.length > 0) {
                                parms = new Object[args.length];
                                sig = new String[args.length];
                                for (int k = 0; k < parms.length; k++) {
                                    parms[k] = getArgument(args[k]);
                                    sig[k] = parms[k].getClass().getName();
                                }
                            }

                            if (isTracing)
                                log.debug("Invoking " + todo[j].getMethod() + " on object " + mbeans[i].getObjectName());

                            server.invoke(mbeans[i].getObjectName(), todo[j].getMethod(), parms, sig);
                        } catch (Throwable t) {
                            log.error("An error occured invoking operation " + todo[j].getMethod() + " on MBean " + mbeans[i].getObjectName(), t);
                        }
                    } // end if this pass

                    end = (end <= todo[j].getPass() ? todo[j].getPass() : end);

                } // end invoke loop

            } // end services loop

            ++pass;

        } // end passes
        if (isTracing)
            log.debug("Startup complete");
    }

