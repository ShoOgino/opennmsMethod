	private void populateOutages(RTCNode rtcN, PreparedStatement outagesGetStmt) {
		// read outages
		//
		// the window for which outages are to be read - the current
		// time minus the rollingWindow
		//
		long window = (new java.util.Date()).getTime() - RTCManager.getRollingWindow();
		Timestamp windowTS = new Timestamp(window);

		//
		// Read closed outages in the above window and outages that are
		// still open
		//
		ResultSet outRS = null;
		try {
			//
			// get outages
			//
			outagesGetStmt.setLong(1, rtcN.getNodeID());
			outagesGetStmt.setString(2, rtcN.getIP());
			outagesGetStmt.setString(3, rtcN.getSvcName());
			outagesGetStmt.setTimestamp(4, windowTS);
			outagesGetStmt.setTimestamp(5, windowTS);
			outRS = outagesGetStmt.executeQuery();
			while (outRS.next()) {
				int outColIndex = 1;
				Timestamp lostTimeTS = outRS.getTimestamp(outColIndex++);
				Timestamp regainedTimeTS = outRS.getTimestamp(outColIndex++);

				addOutageToRTCNode(rtcN, lostTimeTS, regainedTimeTS);
			}
		} catch (SQLException sqle2) {
			if (log().isDebugEnabled())
				log().debug("Error getting outages information for nodeid: " + rtcN.getNodeID() + "\tip:" + rtcN.getIP(), sqle2);

		} catch (Exception e2) {
			if (log().isDebugEnabled())
				log().debug("Unknown error while reading outages for nodeid: " + rtcN.getNodeID() + "\tip: " + rtcN.getIP(), e2);

		} finally {
			// finally close the result set
			try {
				if (outRS != null)
					outRS.close();
			} catch (Exception e) {
				if (log().isDebugEnabled())
					log().debug("Exception while closing the outages result set ", e);
			}
		}
	}

