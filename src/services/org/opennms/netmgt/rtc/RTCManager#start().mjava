	/**
	 * <pre>Read the rtc configuration xml, create and start all the subthreads
	 *
	 * It reads and checks all the configurable properties - if any
	 * of the required properties is not present/incorrect, throws an
	 * exception
	 *
	 * It then creates the DataManager that initializes data from the database
	 * and then starts the data updatera(s) and the data sender</pre>
	 */
	public void start()
	{
		m_status = STARTING;

		ThreadCategory.setPrefix(LOG4J_CATEGORY);

		Category log = ThreadCategory.getInstance(getClass());

		//
		// Start all the threads
		//
		if(log.isDebugEnabled())
		{
			log.debug("Starting updater pool");
		}

		m_updaterPool.start();

		if(log.isDebugEnabled())
		{
			log.debug("Starting data sender ");
		}

		m_dataSender.start();

		if(log.isDebugEnabled())
		{
			log.debug("Updater threads and datasender started");
		}

		// set the user refresh timer
		m_timer.schedule((m_userTask = new RTCTimerTask(USERTIMER)), 0, m_userRefreshInterval);
		if (log.isDebugEnabled())
			log.debug(USERTIMER + " scheduled");

		//
		// Subscribe to events
		//
		try
		{
			m_eventReceiver.start();
		}
		catch( Throwable t)
		{
			m_dataSender.stop();
			if(log.isDebugEnabled())
				log.debug("DataSender shutdown");

			m_updaterPool.stop();
			if(log.isDebugEnabled())
				log.debug("Updater pool shutdown");

			m_timer.cancel();
			if(log.isDebugEnabled())
				log.debug("Timer cancelled");

			throw new UndeclaredThrowableException(t);
		}

		m_status = RUNNING;

		if(log.isDebugEnabled())
		{
			log.debug("RTC ready to receive events");
		}
	}

