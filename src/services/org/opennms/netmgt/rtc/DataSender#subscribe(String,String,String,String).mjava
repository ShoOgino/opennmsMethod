    /**
     * Subscribe - Add the recd. URL and related info to the category->Urls map
     * so the sendData() can send out to appropriate Urls for each category.
     * Also send the latest info for the category
     */
    public synchronized void subscribe(String url, String catlabel, String user, String passwd) {
        Category log = ThreadCategory.getInstance(this.getClass());

        // send category data to the newly subscribed URL
        // look up info for this category
        RTCCategory cat = (RTCCategory) m_categories.get(catlabel);
        if (cat == null) {
            // oops! category for which we have no info!
            log.warn("RTC: No information available for category: " + catlabel);
            return;
        }

        // create new HttpPostInfo
        HttpPostInfo postInfo = null;
        try {
            postInfo = new HttpPostInfo(url, catlabel, user, passwd);
        } catch (MalformedURLException mue) {
            log.warn("ERROR subscribing: Invalid URL \'" + url + "\' - Data WILL NOT be SENT to the specified url");
            return;
        }

        // Add the URL to the list for the specified category
        List urlList = (List) m_catUrlMap.get(catlabel);
        if (urlList == null) {
            // create one
            urlList = new ArrayList();
            urlList.add(postInfo);
            m_catUrlMap.put(catlabel, urlList);
        } else {
            // add to list
            if (!urlList.contains(postInfo))
                urlList.add(postInfo);
            else {
                if (log.isDebugEnabled()) {
                    log.debug("Already subscribed to URL: " + url + "\tcatlabel: " + catlabel + "\tuser:" + user + " - IGNORING LATEST subscribe event");
                }

                return;
            }
        }

        if (log.isDebugEnabled()) {
            log.debug("Subscribed to URL: " + url + "\tcatlabel: " + catlabel + "\tuser:" + user);
        }

        // send data
        try {
            // Run at a higher than normal priority since we do have to send
            // the update on time
            int oldPriority = setCurrentThreadPriority(Thread.MAX_PRIORITY);

            EuiLevel euidata = m_euiMapper.convertToEuiLevelXML(cat);

            Reader inr = new PipedMarshaller(euidata).getReader();

            if (log.isDebugEnabled())
                log.debug("DataSender: posting data to: " + url);

            InputStream inp = HttpUtils.post(postInfo.getURL(), inr, user, passwd, 8 * HttpUtils.DEFAULT_POST_BUFFER_SIZE);

            byte[] tmp = new byte[1024];
            int bytesRead;
            while ((bytesRead = inp.read(tmp)) != -1) {
                if (log.isDebugEnabled()) {
                    if (bytesRead > 0)
                        log.debug("DataSender: post response: " + new String(tmp, 0, bytesRead));
                }
            }

            inp.close();
            inr.close();

            // return current thread to its previous priority
            oldPriority = setCurrentThreadPriority(oldPriority);

            if (log.isDebugEnabled())
                log.debug("DataSender: posted data for category: " + catlabel);
        } catch (IOException ioE) {
            log.warn("DataSender:  Unable to send category \'" + catlabel + "\' to URL \'" + url + "\': ", ioE);
            setCurrentThreadPriority(Thread.NORM_PRIORITY);
        } catch (java.lang.OutOfMemoryError oe) {
            log.warn("DataSender:  Unable to send category \'" + catlabel + "\' to URL \'" + url + "\': ", oe);
            setCurrentThreadPriority(Thread.NORM_PRIORITY);
        } catch (RuntimeException e) {
            log.warn("DataSender:  Unable to send category \'" + catlabel + "\' to URL \'" + url + "\': ", e);
            setCurrentThreadPriority(Thread.NORM_PRIORITY);
        } catch (Throwable t) {
            log.warn("DataSender:  Unable to send category \'" + catlabel + "\' to URL \'" + url + "\': ", t);
            setCurrentThreadPriority(Thread.NORM_PRIORITY);
        }
    }

