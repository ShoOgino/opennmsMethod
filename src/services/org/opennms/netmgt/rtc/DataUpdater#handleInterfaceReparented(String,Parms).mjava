	/**
	 * Record the interfaceReparented info in the datastore
	 */
	private void handleInterfaceReparented(String ip, Parms eventParms)
	{
		Category log = ThreadCategory.getInstance(DataUpdater.class);

		if(ip == null || eventParms == null)
		{
			log.warn(m_event.getUei() + " ignored - info incomplete - ip/parms: " + ip + "/" + eventParms);
			return;
		}

		// old nodeid
		long oldNodeId = -1;

		// new nodeid
		long newNodeId = -1;

		String parmName = null;
		Value parmValue = null;
		String parmContent = null;

		Enumeration parmEnum = eventParms.enumerateParm();
		while(parmEnum.hasMoreElements())
		{
			Parm parm = (Parm)parmEnum.nextElement();
			parmName  = parm.getParmName();
			parmValue = parm.getValue();
			if (parmValue == null)
				continue;
			else 
				parmContent = parmValue.getContent();

			// old nodeid
			if (parmName.equals(EventConstants.PARM_OLD_NODEID))
			{
				String temp = parmContent;
				try
				{
					oldNodeId = Long.valueOf(temp).longValue();
				}
				catch (NumberFormatException nfe)
				{
					log.warn("Parameter " +  EventConstants.PARM_OLD_NODEID + " cannot be non-numeric", nfe);
					oldNodeId = -1;
				}
			}

			// new nodeid
			else if(parmName.equals(EventConstants.PARM_NEW_NODEID))
			{
				String temp = parmContent;
				try
				{
					newNodeId = Long.valueOf(temp).longValue();
				}
				catch (NumberFormatException nfe)
				{
					log.warn("Parameter " +  EventConstants.PARM_NEW_NODEID + " cannot be non-numeric",nfe);
					newNodeId = -1;
				}
			}

		}

		if (oldNodeId == -1 || newNodeId == -1)
		{
			log.warn(m_event.getUei() + " did not have all required information for " + ip + " Values contained old nodeid: " + oldNodeId + " new nodeid: " + newNodeId);
		}
		else
		{
			DataManager dataMgr = RTCManager.getInstance().getDataManager();
			dataMgr.interfaceReparented(ip, oldNodeId, newNodeId);
			if(log.isDebugEnabled()) 
				log.debug(m_event.getUei() + " reparented ip: " + ip + " from " + oldNodeId + " to " + newNodeId);

		}

	}

