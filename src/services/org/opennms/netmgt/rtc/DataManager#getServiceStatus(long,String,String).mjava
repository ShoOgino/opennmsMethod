	/**
	 * Get the 'ismanaged' status for the nodeid, ipaddr combination
	 *
	 * @param nodeid	the nodeid of the interface
	 * @param ip		the interface for which the status is required
	 * @param svc		the service for which status is required
	 *
	 * @return 	the 'status' from the ifservices table
	 */
	private char getServiceStatus(long nodeid, String ip, String svc)
	{
		//
		// check the 'status' flag
		//
		char status='\0';
		ResultSet  statusRS=null;

		Connection dbConn = null;
		try
		{
			dbConn = DatabaseConnectionFactory.getInstance().getConnection();

			// Prepare statement to get the 'status' flag for a nodeid/IP/service
			PreparedStatement svcStatusGetStmt = dbConn.prepareStatement(RTCConstants.DB_GET_SERVICE_STATUS);
		
			svcStatusGetStmt.setLong(1, nodeid);
			svcStatusGetStmt.setString(2, ip);
			svcStatusGetStmt.setLong(3, getServiceID(svc));
			statusRS = svcStatusGetStmt.executeQuery();
			if (statusRS.next())
			{
				String statusStr = statusRS.getString(1); 
				status = statusStr.charAt(0);
			}

			// close statement
			svcStatusGetStmt.close();
		}
		catch (SQLException ipe)		
		{
			Category log = ThreadCategory.getInstance(DataManager.class);
			log.warn("Error reading status for: " + nodeid + "/" + ip + "/" + svc, ipe);

			status = '\0';
		}
		finally
		{
			try
			{
				if (statusRS != null)
					statusRS.close();
			}
			catch (Exception e)
			{
				Category log = ThreadCategory.getInstance(DataManager.class);
				if (log.isDebugEnabled())
					log.debug("Exception while closing the service status result set",e);
			}

			try
			{
				if(dbConn != null)
					dbConn.close();
			}
			catch(SQLException e)
			{
				ThreadCategory.getInstance(getClass()).warn("Exception closing JDBC connection", e);
			}
		
		}

		return status;
	}

