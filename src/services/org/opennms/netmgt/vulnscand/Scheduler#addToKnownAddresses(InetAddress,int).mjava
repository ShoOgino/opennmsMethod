	/**
	* Creates a NessusScanConfiguration object representing the specified node and
	* adds it to the known node list for scheduling.
	*
	* @param address 	the internet address.
	* @param scanLevel 	the scan level.
	*
	* @throws SQLException if there is any problem accessing the database
	*/
	void addToKnownAddresses(InetAddress address, int scanLevel)
		throws SQLException
	{
		Category log = ThreadCategory.getInstance(getClass());

		// Retrieve last poll time for the node from the ipInterface
		// table.
		Connection db = null;
		try
		{
			db = DatabaseConnectionFactory.getInstance().getConnection();
			PreparedStatement ifStmt = db.prepareStatement(SQL_GET_LAST_POLL_TIME);
			ifStmt.setString(1, address.getHostAddress());
			ResultSet rset = ifStmt.executeQuery();
			if (rset.next())
			{
				Timestamp lastPolled = rset.getTimestamp(1);
				if(lastPolled != null && rset.wasNull() == false)
				{
					if (log.isDebugEnabled())
						log.debug("scheduleAddress: adding node " + address.toString() + " with last poll time " + lastPolled);
					m_knownAddresses.add(new NessusScanConfiguration(address, scanLevel, lastPolled, m_interval));
				}
			}
			else
			{
				if (log.isDebugEnabled())
					log.debug("scheduleAddress: adding ipAddr " + address.toString() + " with no previous poll");
				m_knownAddresses.add(new NessusScanConfiguration(address, scanLevel, new Timestamp(0), m_interval));
			}
		}
		finally
		{
			if(db != null)
			{
				try { db.close(); }
				catch(Exception e) { }
			}
		}
	}

