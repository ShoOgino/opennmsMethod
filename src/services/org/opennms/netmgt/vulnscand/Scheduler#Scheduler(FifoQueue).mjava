	/**
	* Constructs a new instance of the scheduler.
	*
	*/
	Scheduler(FifoQueue rescanQ)
		throws SQLException
	{
		Category log = ThreadCategory.getInstance(Scheduler.class);

		m_scheduledScanQ = rescanQ;

		m_name = FIBER_NAME;
		m_status = START_PENDING;
		m_worker = null;

		m_knownAddresses = Collections.synchronizedList(new LinkedList());

		// Get rescan interval from configuration factory
		//
		m_interval = VulnscandConfigFactory.getInstance().getRescanFrequency();
		if (log.isDebugEnabled())
			log.debug("Scheduler: rescan interval(millis): " + m_interval);

		// Get initial rescan sleep time from configuration factory
		//
		m_initialSleep = VulnscandConfigFactory.getInstance().getInitialSleepTime();
		if (log.isDebugEnabled())
			log.debug("Scheduler: initial rescan sleep time(millis): " + m_initialSleep);

		// Load the list of IP addresses from the config file and schedule
		// them in the appropriate level

		VulnscandConfigFactory configFactory = VulnscandConfigFactory.getInstance();
		VulnscandConfiguration config = configFactory.getConfiguration();

		// If the status of the daemon is "true" (meaning "on")...
		if (config.getStatus())
		{
			Enumeration scanLevels = config.enumerateScanLevel();

			while(scanLevels.hasMoreElements())
			{
				ScanLevel scanLevel = (ScanLevel)scanLevels.nextElement();
				int level = scanLevel.getLevel();

				// Grab the list of included addresses for this level
				Set levelAddresses = configFactory.getAllIpAddresses(scanLevel);

				// If scanning of the managed IPs is enabled...
				if (configFactory.getManagedInterfacesStatus())
				{
					// And the managed IPs are set to be scanned at the current level...
					if (configFactory.getManagedInterfacesScanLevel() == level)
					{
						// Then schedule those puppies to be scanned
						levelAddresses.add(getAllManagedInterfaces());
						log.info("Scheduled the managed interfaces at scan level " + level + ".");
					}
				}

				// Remove all of the excluded addresses (the excluded
				// addresses are cached, so this operation is lighter
				// than constructing the exclusion list each time)
				levelAddresses.removeAll(configFactory.getAllExcludes());

				log.info("Adding " + levelAddresses.size() + " addresses to the vulnerability scan scheduler.");

				Iterator itr = levelAddresses.iterator();
				while (itr.hasNext())
				{
					String nextAddress = (String)itr.next();
					try
					{
						addToKnownAddresses(InetAddress.getByName(nextAddress), level);
					}
					catch (UnknownHostException ex)
					{
						log.error("Could not add invalid address to schedule: " + nextAddress, ex);
					}
				}
			}
		}
		else
		{
			log.info("Vulnerability scanning is DISABLED.");
		}
	}

