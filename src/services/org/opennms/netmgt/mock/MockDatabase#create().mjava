    public void create() {
        update("shutdown");
        update("create table node (" +
                   "nodeID integer, " +
                   "dpName      varchar(12)," +
                   "nodeCreateTime  timestamp not null," +
                   "nodeParentID    integer," +
                   "nodeType    char(1)," +
                   "nodeSysOID  varchar(256)," +
                   "nodeSysName varchar(256)," +
                   "nodeSysDescription  varchar(256)," +
                   "nodeSysLocation varchar(256)," +
                   "nodeSysContact  varchar(256)," +
                   "nodeLabel   varchar(256)," +
                   "nodeLabelSource char(1)," +
                   "nodeNetBIOSName varchar(16)," +
                   "nodeDomainName  varchar(16)," +
                   "operatingSystem varchar(64)," +
                   "lastCapsdPoll   timestamp," +
                   //"constraint fk_dpName foreign key (dpName) references distPoller," +
                   "constraint pk_nodeID primary key (nodeID)" +
        ")");
        
        update("create table ipInterface (" +
                   "nodeID integer, " +
                   "ipAddr varchar(16) not null, " +
                   "ifIndex         integer," +
                   "ipHostname      varchar(256)," +
                   "ipStatus        integer," +
                   "ipLastCapsdPoll     timestamp," +
                   "isSnmpPrimary           char(1)," +
                   "isManaged char(1), " +
                   "constraint fk_nodeID1 foreign key (nodeID) references node ON DELETE CASCADE" +
        ");");
        
        update("create table snmpInterface (" +
                "nodeID integer, " +
                "ipAddr varchar(16) not null, " +
		        "snmpIpAdEntNetMask varchar(16), " +
		        "snmpPhysAddr char(12)," +
                "ifIndex integer," +
                "snmpIfDesc varchar(256)," +
                "snmpIfType integer," +
                "snmpIfName varchar(32)," +
                "snmpIfSpeed integer," +
                "snmpIfAdminStatus integer," +
                "snmpIfOperStatus integer," +
                "snmpIfAlias varchar(32)," +
                "constraint fk_nodeID2 foreign key (nodeID) references node ON DELETE CASCADE" +
        ");");
        
        update("create table service (" +
                   "serviceID integer, " +
                   "serviceName varchar(32) not null, " +
                   "constraint pk_serviceID primary key (serviceID)" +
        ")");
        
        update("create table ifServices (" +
                   "nodeID          integer, " +
                   "ipAddr          varchar(16) not null," +
                   "ifIndex         integer," +
                   "serviceID       integer," +
                   "lastGood        timestamp," +
                   "lastFail        timestamp," +
                   "qualifier       char(16)," +
                   "status              char(1)," +
                   "source          char(1)," +
                   "notify                  char(1), " +
                   "constraint fk_nodeID3 foreign key (nodeID) references node ON DELETE CASCADE," +
                   "constraint fk_serviceID1 foreign key (serviceID) references service ON DELETE CASCADE" +
        ");");
        
        update("create table events (" +
                   "eventID         integer," +
                   "eventUei        varchar(256) not null," +
                   "nodeID          integer," +
                   "eventTime       timestamp not null," +
                   "eventHost       varchar(256)," +
                   "eventSource     varchar(128) not null," +
                   "ipAddr          varchar(16)," +
                   "eventDpName     varchar(12) not null," +
                   "eventSnmphost       varchar(256)," +
                   "serviceID       integer," +
                   "eventSnmp       varchar(256)," +
                   "eventParms      longvarchar," +
                   "eventCreateTime     timestamp not null," +
                   "eventDescr      varchar(4000)," +
                   "eventLoggroup       varchar(32)," +
                   "eventLogmsg     varchar(256)," +
                   "eventSeverity       integer not null," +
                   "eventPathOutage     varchar(1024)," +
                   "eventCorrelation    varchar(1024)," +
                   "eventSuppressedCount    integer," +
                   "eventOperInstruct   varchar(1024)," +
                   "eventAutoAction     varchar(256)," +
                   "eventOperAction     varchar(256)," +
                   "eventOperActionMenuText varchar(64)," +
                   "eventNotification   varchar(128)," +
                   "eventTticket        varchar(128)," +
                   "eventTticketState   integer," +
                   "eventForward        varchar(256)," +
                   "eventMouseOverText  varchar(64)," +
                   "eventLog        char(1) not null," +
                   "eventDisplay        char(1) not null," +
                   "eventAckUser        varchar(256)," +
                   "eventAckTime        timestamp," +
                   "constraint pk_eventID primary key (eventID)," +
                   "constraint fk_nodeID6 foreign key (nodeID) references node ON DELETE CASCADE" +
        ")");
        
        update("create table outages (" +
                   "outageID        integer," +
                   "svcLostEventID      integer," +
                   "svcRegainedEventID  integer," +
                   "nodeID          integer," +
                   "ipAddr          varchar(16) not null," +
                   "serviceID       integer," +
                   "ifLostService       timestamp not null," +
                   "ifRegainedService   timestamp," +
                   "constraint pk_outageID primary key (outageID)," +
                   "constraint fk_eventID1 foreign key (svcLostEventID) references events (eventID) ON DELETE CASCADE," +
                   "constraint fk_eventID2 foreign key (svcRegainedEventID) references events (eventID) ON DELETE CASCADE," +
                   "constraint fk_nodeID4 foreign key (nodeID) references node (nodeID) ON DELETE CASCADE," +
                   "constraint fk_serviceID2 foreign key (serviceID) references service (serviceID) ON DELETE CASCADE" +
        ")");
        
        update("create table notifications (" + 
                "       textMsg      varchar(4000) not null," + 
                "       subject      varchar(256)," +
                "       numericMsg   varchar(256)," + 
                "       notifyID        integer," + 
                "       pageTime     timestamp," + 
                "       respondTime  timestamp," + 
                "       answeredBy   varchar(256)," + 
                "       nodeID      integer," + 
                "       interfaceID  varchar(16)," + 
                "       serviceID    integer," +
                "       queueID      varchar(256), " +
                "       eventID      integer," + 
                "       eventUEI     varchar(256) not null," + 
                "                   constraint pk_notifyID primary key (notifyID)," + 
                "                   constraint fk_nodeID7 foreign key (nodeID) references node (nodeID) ON DELETE CASCADE," + 
                "                   constraint fk_eventID3 foreign key (eventID) references events (eventID) ON DELETE CASCADE" + 
                "       )");
        
        update("create table usersNotified (\n" + 
                "        userID          varchar(256) not null," + 
                "        notifyID        integer," + 
                "        notifyTime      timestamp," + 
                "        media           varchar(32)," + 
                "        contactinfo     varchar(64)," + 
                "           constraint fk_notifID2 foreign key (notifyID) references notifications (notifyID) ON DELETE CASCADE" + 
                ");");
        
        //TODO: Create alarms table
        
        update("create table alarms (\n" +
        "   alarmID             INTEGER NOT NULL,\n" +
        "   eventUei            VARCHAR(256) NOT NULL,\n" +
        "   dpName              VARCHAR(12) NOT NULL,\n" +
        "   nodeID              INTEGER,\n" +
        "   ipaddr              VARCHAR(16),\n" +
        "   serviceID           INTEGER NOT NULL,\n" +
        "   reductionKey        VARCHAR(256),\n" +
        "   counter             INTEGER NOT NULL,\n" +
        "   severity                INTEGER NOT NULL,\n" +
        "   lastEventID         INTEGER,\n" +
        "   firstEventTime      TIMESTAMP NOT NULL,\n" +
        "   lastEventTime       TIMESTAMP NOT NULL,\n" +
        "   description         VARCHAR(4000),\n" +
        "   logMsg              VARCHAR(256),\n" +
        "   operInstruct            VARCHAR(1024),\n" +
        "   tticketID           VARCHAR(128),\n" +
        "   tticketState            INTEGER,\n" +
        "   mouseOverText       VARCHAR(64),\n" +
        "   suppressedUntil     TIMESTAMP,\n" +
        "   suppressedUser      TIMESTAMP,\n" +
        "   suppressedTime      TIMESTAMP,\n" +
        "   alarmAckUser            VARCHAR(256),\n" +
        "   alarmAckTime            TIMESTAMP,\n" +
        "             CONSTRAINT pk_alarmID primary key (alarmID),"+
        "             CONSTRAINT fk_nodeIDak FOREIGN KEY (nodeID) REFERENCES node (nodeID) ON DELETE CASCADE,"+
        "             CONSTRAINT fk_eventIDak2 FOREIGN KEY (lastEventID)  REFERENCES events (eventID) ON DELETE CASCADE"+
        ");");
        
        update("CREATE UNIQUE INDEX alarm_reductionkey_idx ON alarms(reductionKey)");
        update("create sequence outageNxtId start with 1");
        update("create sequence eventNxtId start with 1");
        update("create sequence alarmNxtId start with 1");
        update("create sequence notifNxtId start with 1");
        update("create table seqQueryTable (row integer)");
        update("insert into seqQueryTable (row) values (0)");
        
    }

