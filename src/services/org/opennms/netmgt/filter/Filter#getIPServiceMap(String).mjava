    public Map getIPServiceMap(String rule) {
        Map ipServices = new TreeMap();

        // parse the rule
        parseRule(rule);
        // return getIPServiceMappingStatement();

        // get the database connection
        Connection conn = null;
        try {
            DatabaseConnectionFactory.init();
            conn = DatabaseConnectionFactory.getInstance().getConnection();

            // execute query and return the list of ip addresses
            //
            Statement stmt = conn.createStatement();
            ResultSet rset = stmt.executeQuery(getIPServiceMappingStatement());

            // fill up the array list if the result set has values
            //
            if (rset != null) {
                // Iterate through the result and build the array list
                while (rset.next()) {
                    String ipaddr = rset.getString(1);

                    if (ipServices.containsKey(ipaddr)) {
                        Map services = (Map) ipServices.get(ipaddr);
                        services.put(rset.getString(2), null);
                    } else {
                        Map services = new TreeMap();
                        services.put(rset.getString(2), null);
                        ipServices.put(ipaddr, services);
                    }
                }
            }

            try {
                rset.close();
            } catch (SQLException e) {
            }

            try {
                stmt.close();
            } catch (SQLException e) {
            }
        } catch (SQLException e) {
            Category log = ThreadCategory.getInstance(getClass());
            log.info("SQL Exception occured getting IP List", e);
            throw new UndeclaredThrowableException(e);
        } catch (IOException ie) {
            Category log = ThreadCategory.getInstance(getClass());
            log.fatal("IOException getting database connection", ie);
            throw new UndeclaredThrowableException(ie);
        } catch (MarshalException me) {
            Category log = ThreadCategory.getInstance(getClass());
            log.fatal("Marshall Exception getting database connection", me);
            throw new UndeclaredThrowableException(me);
        } catch (ValidationException ve) {
            Category log = ThreadCategory.getInstance(getClass());
            log.fatal("Validation Exception getting database connection", ve);
            throw new UndeclaredThrowableException(ve);
        } catch (ClassNotFoundException e) {
            Category log = ThreadCategory.getInstance(getClass());
            log.fatal("Class Not Found Exception getting database connection", e);
            throw new UndeclaredThrowableException(e);
        } finally {
            if (conn != null) {
                try {
                    conn.close();
                } catch (SQLException e) {
                }
            }
        }

        return ipServices;
    }

