        /**
	 * This method should be called if you want to put constraints on the node,
	 * interface or service that is returned in the rule. This is useful to see if a 
	 * particular node, interface, or service matches in the rule, and is primarily used
	 * to filter notices. A subselect is built containing joins constrained by node, interface,
	 * and service if they are not null or blank. This select is then anded with the filter rule
	 * to get the complete SQL statement.
	 * @param nodeId a node id to constrain against
	 * @param ipaddr an ipaddress to constrain against
	 * @param service a service name to constrain against
	 */
        public void setConstraintTranslation(long nodeId, String ipaddr, String service)
        {
                //m_select = new StringBuffer("SELECT DISTINCT ipInterface.ipAddr");
		m_selectList.add("ipInterface.ipAddr");
                m_selectModifier = "DISTINCT";
                
                m_from   = new StringBuffer(" FROM ");
		m_where  = new StringBuffer(" WHERE ");
		
		StringBuffer subSelect = new StringBuffer("ipInterface.ipAddr in (SELECT ipInterface.ipAddr");
		StringBuffer subFrom   = new StringBuffer(" FROM ipinterface");
		StringBuffer subWhere  = new StringBuffer(" WHERE ");
		boolean subQueryRequired = false;
		boolean needAnd = false;
		if (nodeId != 0)
		{
			subFrom.append(", node");
			subWhere.append("(node.nodeId = ipInterface.nodeId AND node.nodeid = " + nodeId + ") ");
			subQueryRequired = true;
			needAnd = true;
		}
		
		if (ipaddr != null && !ipaddr.equals(""))
		{
			//already added ipinterface table to subselect
			subWhere.append( (needAnd ? " AND " : " ")).append("ipInterface.ipAddr = '" + ipaddr + "' ");
			subQueryRequired = true;
			needAnd = true;
		}
		
		if (service != null && !service.equals(""))
		{
			subFrom.append(", ifservices, service");
			subWhere.append( (needAnd ? " AND " : " ")).append("(ifServices.serviceID = service.serviceID AND service.serviceName = '" + service + "'");
			subWhere.append(" AND ipInterface.ipAddr = ifServices.ipAddr)");
			subQueryRequired = true;
			needAnd = true;
		}
		
		m_where.append("(");
		
		if (subQueryRequired)
		{
			m_where.append(subSelect.toString()).append(subFrom.toString()).append(subWhere.toString()).append(") AND ");
		}
		
		Table t = findTableByVisableColumn("ipAddr");
		m_from.append(t.getName());
		m_tables.add(t);
        }

