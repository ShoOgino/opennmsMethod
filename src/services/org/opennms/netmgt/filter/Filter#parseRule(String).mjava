	/**
	 * This method is used to parse and valiate a rule into
	 * its graph tree. If the parser cannot validate the rule
	 * then an exception is generated.
	 *
	 * @param rule	The rule to parse.
	 *
	 * @throws FilterParseException Thrown if the rule cannot be parsed.
	 */
	public void parseRule(String rule)
		throws FilterParseException
	{
		if (rule != null && rule.length() > 0)
		{
			try
			{
				// Create a Parser instance. 
				Parser p = new Parser( new Lexer( new PushbackReader( new StringReader(rule))));
				
				// Parse the input. 
				m_parseTree = p.parse();
			}
			catch(ParserException e)
			{
				Category log = ThreadCategory.getInstance(getClass());
				log.error("Failed to parse the filter rule: " + rule, e);
				throw new FilterParseException("Parse error in " + rule, e);
			}
			catch(LexerException e)
			{
				Category log = ThreadCategory.getInstance(getClass());
				log.error("Failed to parse filter rule: " + rule, e);
				throw new FilterParseException("Parse error in " + rule, e);
			}
			catch(IOException e)
			{
				Category log = ThreadCategory.getInstance(getClass());
				log.error("Failed to parse filter rule: " + rule, e);
				throw new FilterParseException("Parse error in " + rule, e);
			}
		}
		else
		{
			throw new FilterParseException("Parse error, rule is null or empty");
		}
	}

