	/**
	 * Validate the identifier.
	 */
    	private String validateIdent(String ident)
	{
		StringBuffer buffer = null;
		Enumeration etbl = m_schema.enumerateTable();
		OUTER: while(etbl.hasMoreElements())
		{
			Table t = (Table)etbl.nextElement();
			Enumeration ecol = t.enumerateColumn();
			while(ecol.hasMoreElements())
			{
				Column col = (Column)ecol.nextElement();
				if(col.getVisable() == null || col.getVisable().equalsIgnoreCase("true"))
				{
					if(col.getName().equalsIgnoreCase(ident))
					{
						if(!m_tables.contains(t))
						{
							if(m_tables.size() == 0)
								m_from.append(t.getName());
							else
								m_from.append(", ").append(t.getName());

							m_tables.add(t);
						}
						buffer = new StringBuffer(t.getName()).append('.').append(ident);
						break OUTER;
					}
				}
			}
		}

		if(buffer == null && ident.startsWith(VIRTUAL_COLUMN_PREFIX))
		{
			// should check against some form of 
			// service identifier table, but for now I'm 
			// removing this check since it's just used
			// internally
			//
			buffer = buildVirtualColumnClause(ident);
		}
		else if(buffer == null)
		{
			throw new FilterParseException("The token " + ident + " is an illegal column value.");
		}

		return buffer.toString();
	}

