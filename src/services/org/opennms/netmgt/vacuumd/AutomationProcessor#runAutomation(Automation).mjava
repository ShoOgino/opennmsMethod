    /**
     * Called by the run method to execute the sql statements
     * of triggers and actions defined for an automation.  An
     * automation may have 0 or 1 trigger and must have 1 action.
     * If the automation doesn't have a trigger than the action
     * must not contain any tokens. 
     * 
     * @param auto
     * @return
     * @throws SQLException
     */
    public boolean runAutomation(Automation auto) throws SQLException {
        
        if (getLog().isDebugEnabled())
            getLog().debug("runAutomation: "+auto.getName()+" running...");
        
        boolean actionStatus = false;
        boolean hasTrigger = false;

        String triggerSQL = null;

        if (hasTrigger(auto)) {
            triggerSQL = getTriggerSQL(auto);
            hasTrigger = true;
        }

        String actionSQL = getAutomationSQL(auto);
        
        if (getLog().isDebugEnabled()) {
            getLog().debug("runAutomation: "+auto.getName()+" trigger statement is: "+triggerSQL);
            getLog().debug("runAutomation: "+auto.getName()+" action statement is: "+actionSQL);
        }
        
        Collection actionColumns = getTokenizedColumns(actionSQL);
        
        DbConnectionFactory dcf = DatabaseConnectionFactory.getInstance();
        Connection conn = null;
        Statement triggerStatement = null;
        ResultSet triggerResultSet = null;
        int resultRows = 0;
        
        if (getLog().isDebugEnabled())
            getLog().debug("runAutomation: Executing trigger: "+auto.getTriggerName());
            
        try {
            conn = dcf.getConnection();

            if (hasTrigger) {
                //get a scrollable ResultSet so that we can count the rows and move back to the
                //beginning for processing.
                triggerStatement = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
                triggerResultSet = triggerStatement.executeQuery(triggerSQL);
                
                //determine if number of rows required by the trigger row-count and operator were
                //met by the trigger query, if so we'll run the action
                resultRows = countRows(triggerResultSet);
                if (resultRows < 1)
                    return actionStatus;
                int triggerRowCount = VacuumdConfigFactory.getInstance().getTrigger(auto.getTriggerName()).getRowCount();
                String triggerOperator = VacuumdConfigFactory.getInstance().getTrigger(auto.getTriggerName()).getOperator();
                if (!triggerRowCheck(triggerRowCount, triggerOperator, resultRows))
                    return actionStatus;
                
                //Verfiy the trigger ResultSet returned the require columns for the action statement
                if (!resultSetHasRequiredActionColumns(triggerResultSet, actionColumns))
                    return actionStatus;                
            }
            
            PreparedStatement actionStatement = null;
            
            if (getLog().isDebugEnabled())
                getLog().debug("runAutomation: running action: "+auto.getActionName());
            
            try {
                if (hasTrigger) {
                    triggerResultSet.beforeFirst();
                    conn.setAutoCommit(false);
                    
                    //Loop through the select results
                    while (triggerResultSet.next()) {
                        
                        //Convert the sql to a PreparedStatement
                        actionStatement = convertActionToPreparedStatement(triggerResultSet, actionSQL, conn);
                        actionStatement.executeUpdate();            
                    }
                } else {
                    
                    //No trigger defined, just running the action.
                    if (getTokenCount(actionSQL) != 0) {
                            getLog().info("runAutomation: not running action: "+auto.getActionName()+".  Action contains tokens in an automation ("+auto.getName()+") with no trigger.");
                        return actionStatus;
                    }
                    actionStatement = convertActionToPreparedStatement(triggerResultSet, actionSQL, conn);
                    actionStatement.executeUpdate();
                }
                
                conn.commit();
                
            } catch (SQLException e) {
                conn.rollback();
                getLog().warn("runAutomation: Could not execute update on action: "+auto.getActionName());
                getLog().warn(e.getMessage());
            } finally {
                if (actionStatement != null) {
                    getLog().debug("runAutomation: closing action statement.");
                    actionStatement.close();                    
                }
            }
            
            actionStatus = true;
            
        } catch (SQLException e) {
            getLog().warn("runAutomation: Could not execute trigger: "+auto.getTriggerName());
            getLog().warn(e.getMessage());
        } finally {
            getLog().debug("runAutomation: Closing trigger resultset.");
            if (hasTrigger) {
                getLog().debug("runAutomation: Closing trigger statement.");
                triggerResultSet.close();
            }
            getLog().debug("runAutomation: Closing database connection.");
            conn.close();
        }
        
        return actionStatus;
    }

