    /**
     * This method is invoked by the EventIpcManager when a new event is
     * available for processing. Currently only text based messages are
     * processed by this callback. Each message is examined for its Universal
     * Event Identifier and the appropriate action is taking based on each UEI.
     * 
     * @param event
     *            The event.
     * 
     */
    public void onEvent(Event event) {
        try {

            String eventUei = event.getUei();
            if (eventUei == null) {
                return;
            }

            log().debug("Received event: " + eventUei);

            notifyEventReceived(event);

            if (eventUei.equals(EventConstants.NEW_SUSPECT_INTERFACE_EVENT_UEI)) {
                handleNewSuspect(event);
            } else if (eventUei.equals(EventConstants.FORCE_RESCAN_EVENT_UEI)) {
                handleForceRescan(event);
            } else if (event.getUei().equals(EventConstants.UPDATE_SERVER_EVENT_UEI)) {
                handleUpdateServer(event);
            } else if (event.getUei().equals(EventConstants.UPDATE_SERVICE_EVENT_UEI)) {
                handleUpdateService(event);
            } else if (event.getUei().equals(EventConstants.ADD_NODE_EVENT_UEI)) {
                handleAddNode(event);
            } else if (event.getUei().equals(EventConstants.DELETE_NODE_EVENT_UEI)) {
                handleDeleteNode(event);
            } else if (event.getUei().equals(EventConstants.ADD_INTERFACE_EVENT_UEI)) {
                handleAddInterface(event);
            } else if (event.getUei().equals(EventConstants.DELETE_INTERFACE_EVENT_UEI)) {
                handleDeleteInterface(event);
            } else if (event.getUei().equals(EventConstants.DELETE_SERVICE_EVENT_UEI)) {
                handleDeleteService(event);
            } else if (event.getUei().equals(EventConstants.CHANGE_SERVICE_EVENT_UEI)) {
                handleChangeService(event);
            } else if (eventUei.equals(EventConstants.NODE_ADDED_EVENT_UEI)) {
                handleNodeAdded(event);
            } else if (eventUei.equals(EventConstants.NODE_DELETED_EVENT_UEI)) {
                handleNodeDeleted(event);
            } else if (eventUei.equals(EventConstants.DUP_NODE_DELETED_EVENT_UEI)) {
                handleDupNodeDeleted(event);
            }
            notifyEventSuccess(event);
        } catch (InsufficientInformationException ex) {
            log().info("BroadcastEventProcessor: insufficient information in event, discarding it: " + ex.getMessage());
            notifyEventError(event, "Invalid parameters: ", ex);
        } catch (FailedOperationException ex) {
            log().error("BroadcastEventProcessor: operation failed for event: " + event.getUei() + ", exception: " + ex.getMessage());
            notifyEventError(event, "processing failed: ", ex);
        }
    } // end onEvent()

