	/**
	 * Process the event,  add a node with the specified node label and interface 
         * to the database
	 *
	 * @param event	The event to process.
	 */
	private void addNodeHandler(Event event)
	{
	        String ipaddr = event.getInterface();
                String sourceUei = event.getUei();

                Category log = ThreadCategory.getInstance(getClass());
		if (log.isDebugEnabled())
			log.debug("addNodeHandler:  processing addNode event for " + ipaddr);
			
		// Extract node label and transaction No. from the event parms
		String nodeLabel = null;
                long txNo = -1L;
		Parms parms = event.getParms();
		if (parms != null)
		{
			String parmName = null;
			Value parmValue = null;
			String parmContent = null;
		
			Enumeration parmEnum = parms.enumerateParm();
			while(parmEnum.hasMoreElements())
			{
				Parm parm = (Parm)parmEnum.nextElement();
				parmName  = parm.getParmName();
				parmValue = parm.getValue();
				if (parmValue == null)
					continue;
				else 
					parmContent = parmValue.getContent();
	
				//  get node label
				if (parmName.equals(EventConstants.PARM_NODE_LABEL))
				{
					nodeLabel = parmContent;
		                        if (log.isDebugEnabled())
			                        log.debug("addNodeHandler:  parmName: " + parmName
                                                        + " /parmContent: " + parmContent);
				}
				else if (parmName.equals(EventConstants.PARM_TRANSACTION_NO))
                                {
                                        String temp = parmContent;
		                        if (log.isDebugEnabled())
			                        log.debug("addNodeHandler:  parmName: " + parmName
                                                        + " /parmContent: " + parmContent);
                                        try
                                        {
                                                txNo = Long.valueOf(temp).longValue();
                                        }
                                        catch (NumberFormatException nfe)
                                        {
                                                log.warn("addNodeHandler: Parameter " + EventConstants.PARM_TRANSACTION_NO 
                                                        + " cannot be non-numberic", nfe);
                                                txNo = -1L;
                                        }
                                }
			}
		}

                boolean invalidParameters = ((ipaddr == null) || (nodeLabel == null));
                if (m_xmlrpc)
                        invalidParameters = invalidParameters || (txNo == -1L);
                
                if (invalidParameters)
                {
		        if (log.isDebugEnabled())
		                log.debug("addNodeHandler:  Invalid parameters." );

                        if (m_xmlrpc)
                        {
                                int status = EventConstants.XMLRPC_NOTIFY_FAILURE;
                                XmlrpcUtil.createAndSendXmlrpcNotificationEvent(txNo, sourceUei, "Invalid parameters", 
                                        status, "OpenNMS.Capsd");
                        }
                        
			return;
		}
                
                java.sql.Connection dbConn = null;
		PreparedStatement stmt = null;
		try
		{
			dbConn = DatabaseConnectionFactory.getInstance().getConnection();
		
			stmt = dbConn.prepareStatement(SQL_QUERY_IPINTERFACE_EXIST);
	
			stmt.setString(1, nodeLabel);
			stmt.setString(2, ipaddr);
	
			ResultSet rs = stmt.executeQuery();
			log.debug("addNodeHandler: node " + nodeLabel + " with IPAddress " 
                                    + ipaddr  + " progressing to the checkpoint.");
			while(rs.next())
			{
				if (log.isDebugEnabled())
				{
					log.debug("addNodeHandler: node " + nodeLabel + " with IPAddress " 
                                        + ipaddr + " already exist in the database.");
				}
                                
                                if (m_xmlrpc)
                                {
                                        int status = EventConstants.XMLRPC_NOTIFY_SUCCESS;
                                        XmlrpcUtil.createAndSendXmlrpcNotificationEvent( txNo, 
                                                                              sourceUei, 
                                                                              "Node allready exist.",
                                                                              status,
                                                                              "OpenNMS.Capsd");
                                }
			        return;
			}

                        // the node does not exist in the database. Add the node with the specified
                        // node label and add the ipaddress to the database.
                        addNode(dbConn, nodeLabel, ipaddr, txNo, sourceUei);

		}
		catch(SQLException sqlE)
		{
			log.error("addNodeHandler: SQLException during add node and ipaddress to tables", sqlE);
                        if (m_xmlrpc)
                        {
                                int status = EventConstants.XMLRPC_NOTIFY_FAILURE;
                                XmlrpcUtil.createAndSendXmlrpcNotificationEvent(txNo, sourceUei, 
                                                        sqlE.getMessage(), status, "OpenNMS.Capsd");
                        }
		}
		catch(java.net.UnknownHostException e)
		{
			log.error("addNodeHandler: can not solve unknow host.", e);
                        if (m_xmlrpc)
                        {
                                int status = EventConstants.XMLRPC_NOTIFY_FAILURE;
                                XmlrpcUtil.createAndSendXmlrpcNotificationEvent(txNo, sourceUei, e.getMessage(), 
                                        status, "OpenNMS.Capsd"); 
                        }
		}
		finally
		{
			// close the statement
			if (stmt != null)
				try { stmt.close(); } catch(SQLException sqlE) { };

			// close the connection
			if (dbConn != null)
				try { dbConn.close(); } catch(SQLException sqlE) { };					
		}
		
	}

