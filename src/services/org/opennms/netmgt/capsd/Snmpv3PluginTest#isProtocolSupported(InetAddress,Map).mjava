    public boolean isProtocolSupported(InetAddress address, Map qualifiers) {

        InetAddress inetAddress = address;
        String port =  (qualifiers.get("port") == null ? DEFAULT_PORT : (String)qualifiers.get("port"));
        String timeout = (qualifiers.get("timeout") == null ? DEFAULT_TIMEOUT : (String)qualifiers.get("timeout"));
        String retry = (qualifiers.get("retry") == null ? DEFAULT_RETRY : (String)qualifiers.get("retry"));
        String forceVersion = (qualifiers.get("forced version") == null ? DEFAULT_VERSION : (String)qualifiers.get("forced version"));
        String vbValue = (String)qualifiers.get("vbvalue");
        String oid = ParameterMap.getKeyedString(qualifiers, "vbname", DEFAULT_OID);
        
        boolean isSupported = false;
        
        MPv3.setEnterpriseID(5813);
        
        String transportAddress = inetAddress.getHostAddress() + "/" + DEFAULT_PORT;
        
        Address targetAddress = new UdpAddress(transportAddress);
        Snmp snmp = null;
        try {
            snmp = createSnmpSession();
            UserTarget target = new UserTarget();
            target.setSecurityLevel(SecurityLevel.NOAUTH_NOPRIV);
            target.setVersion(SnmpConstants.version3);
            target.setAddress(targetAddress);
            target.setRetries(Integer.parseInt(retry));
            target.setTimeout(Integer.parseInt(timeout));
            target.setSecurityName(DEFAULT_SECURITY_NAME);
            snmp.listen();
            PDU request = createPDU(target);
            VariableBinding vb = new VariableBinding(new OID(DEFAULT_OID));
            request.add(vb);
            
            PDU response = null;
            ResponseEvent responseEvent;
            responseEvent = snmp.send(request, target);
            snmp.close();
            
            if (responseEvent.getResponse() != null) {
                MockUtil.println(responseEvent.getResponse().toString());
                return true;
            } else {
                return false;
            }

            
        } catch (IOException e) {
            e.printStackTrace();
        }

        return isSupported;
    }

