  	/**
   	* Checking method, receives all the parameters as a Map.
	* Currently supported:
   	* <ul>
   	* <li> <b>port</b>     - Port where the JDBC server is listening (defaults to DEFAULT_PORT). Type: Integer
   	* <li> <b>user</b>     - Database user (defaults to DEFAULT_DATABASE_USER if not provided). Type String
   	* <li> <b>password</b> - Database password (defaults to DEFAULT_DATABASE_PASSWORD). Type String
   	* <li> <b>timeout</b> - Timeout
   	* <li> <b>retry</b> - How many times will try to check for the service
   	* </ul>
   	* @param address Address of the JDBC server to poll
   	* @param qualifiers Set of properties to be passed to the JDBC driver.
   	* @throws NullPointerException if the properties or the address are not defined
   	* @return True if a JDBC server is running on this server, false otherwise
   	*/
  	public boolean isProtocolSupported(InetAddress address, Map qualifiers) 
	{
    		Category log = ThreadCategory.getInstance(getClass());

    		boolean status = false;

    		if (address == null) {
	    		throw new NullPointerException(getClass().getName() + ": Internet address cannot be null");
    		}
    		if (qualifiers == null) {
	    		throw new NullPointerException(getClass().getName() + ": Map argument cannot be null");
    		}

		String db_user = ParameterMap.getKeyedString(qualifiers, "user", DBTools.DEFAULT_DATABASE_USER);
		String db_pass = ParameterMap.getKeyedString(qualifiers, "password", DBTools.DEFAULT_DATABASE_PASSWORD);
		String db_hostname = address.getCanonicalHostName();
		String db_url = ParameterMap.getKeyedString(qualifiers, "url", DBTools.DEFAULT_URL);
                int timeout = ParameterMap.getKeyedInteger(qualifiers, "timeout", DEFAULT_TIMEOUT);
                int retries = ParameterMap.getKeyedInteger(qualifiers, "retry", DEFAULT_RETRY);
		String db_driver = ParameterMap.getKeyedString(qualifiers, "driver", DBTools.DEFAULT_JDBC_DRIVER);

		try 
		{
			status = isServer(db_user, db_pass, db_hostname, db_url, timeout, retries, db_driver);
		} 
		catch (Exception exp) {
			log.info(exp.toString());
		} 
		return status;
  	}

