    /**
     * Creates a NodeInfo object representing the specified node and adds it to
     * the known node list for scheduling.
     * 
     * @param nodeId
     *            Id of node to be scheduled
     * 
     * @throws SQLException
     *             if there is any problem accessing the database
     */
    void scheduleNode(int nodeId) throws SQLException {
        Category log = ThreadCategory.getInstance(getClass());

        // Retrieve last poll time for the node from the ipInterface
        // table.
        Connection db = null;
        try {
            db = DatabaseConnectionFactory.getInstance().getConnection();
            PreparedStatement ifStmt = db.prepareStatement(SQL_GET_LAST_POLL_TIME);
            ifStmt.setInt(1, nodeId);
            ResultSet rset = ifStmt.executeQuery();
            if (rset.next()) {
                Timestamp lastPolled = rset.getTimestamp(1);
                if (lastPolled != null && rset.wasNull() == false) {
                    if (log.isDebugEnabled())
                        log.debug("scheduleNode: adding node " + nodeId + " with last poll time " + lastPolled);
                    m_knownNodes.add(new NodeInfo(nodeId, lastPolled, m_interval));
                }
            } else
                log.warn("scheduleNode: Failed to retrieve last polled time from database for nodeid " + nodeId);
        } finally {
            if (db != null) {
                try {
                    db.close();
                } catch (Exception e) {
                }
            }
        }
    }

