	/**
	 * Process the event, add or remove a specified interface from an opennms server. An 'action'
         * parameter wraped in the event will tell which action to take to the interface, and a 'nodelabel'
         * parameter wraped in the event will tell the node that the interface resides on. The interface 
         * ipaddress and the opennms server hostname is included in the event.
	 *
	 * @param event	The event to process.
	 */
	private void updateServerHandler(Event event)
	{
	        String ipaddr = event.getInterface();
                String hostName = getLocalServer();
                String sourceUei = event.getUei();

                Category log = ThreadCategory.getInstance(getClass());
		if (log.isDebugEnabled())
			log.debug("updateServerHandler:  processing updateServer event for: " 
                                + ipaddr + " on OpenNMS server: " + hostName);

                // Extract action, nodeLabel and external transaction number from 
                // the event parms
                //
		String action = null;
                String nodeLabel = null;
                long txNo = -1L;
                
		Parms parms = event.getParms();
		if (parms != null)
		{
                                
			String parmName = null;
			Value parmValue = null;
			String parmContent = null;
		
			Enumeration parmEnum = parms.enumerateParm();
			while(parmEnum.hasMoreElements())
			{
				Parm parm = (Parm)parmEnum.nextElement();
				parmName  = parm.getParmName();
				parmValue = parm.getValue();
				if (parmValue == null)
					continue;
                                else 
					parmContent = parmValue.getContent();
				//  get the action and nodelabel
				if (parmName.equals(EventConstants.PARM_ACTION))
				{
					action = parmContent;
		                        if (log.isDebugEnabled())
			                        log.debug("updateServerHandler:  ParmName:" + parmName 
                                                + " / ParmContent: " + parmContent);
				} 
                                else	if (parmName.equals(EventConstants.PARM_NODE_LABEL))
				{
					nodeLabel = parmContent;
		                        if (log.isDebugEnabled())
			                        log.debug("updateServerHandler:  ParmName:" + parmName 
                                                + " / ParmContent: " + parmContent);
				}
				else if (parmName.equals(EventConstants.PARM_TRANSACTION_NO))
                                {
                                        String temp = parmContent;
		                        if (log.isDebugEnabled())
			                        log.debug("updateServerHandler:  parmName: " + parmName
                                                        + " /parmContent: " + parmContent);
                                        try
                                        {
                                                txNo = Long.valueOf(temp).longValue();
                                        }
                                        catch (NumberFormatException nfe)
                                        {
                                                log.warn("updateServerHandler: Parameter " + EventConstants.PARM_TRANSACTION_NO 
                                                        + " cannot be non-numberic", nfe);
                                                txNo = -1L;
                                        }
                                }
						
			}
		}
                
                // Notify the external xmlrpc server receiving of the event.
                //
                if (m_xmlrpc)
                {
                        StringBuffer message = new StringBuffer("Received event: UpdateServer-- action: ").append(action);
                        message.append(". nodeLabel/ipaddr/hostname: ").append(nodeLabel).append("/");
                        message.append(ipaddr).append("/").append(hostName);
                        int status = EventConstants.XMLRPC_NOTIFY_RECEIVED;
                        createAndSendXmlrpcNotificationEvent(txNo, sourceUei,message.toString(), status); 
                }
		boolean invalidParameters = ((ipaddr == null) || (hostName == null) || (nodeLabel == null) || (action == null));
                if (m_xmlrpc)
                        invalidParameters = invalidParameters || (txNo == -1L);
                
                if (invalidParameters)
                {
		        if (log.isDebugEnabled())
		                log.debug("updateServerHandler:  Invalid parameters." );
                        
                        if (m_xmlrpc)
                        {
                                int status = EventConstants.XMLRPC_NOTIFY_FAILURE;
                                createAndSendXmlrpcNotificationEvent( txNo, sourceUei,
                                                                      "Invalid parameters.", status); 
                        }
                        
			return;
		}

		java.sql.Connection dbConn = null;
		PreparedStatement stmt = null;
		try
		{
			dbConn = DatabaseConnectionFactory.getInstance().getConnection();

                        // Verify if the interface already exists on the NMS server 
			stmt = dbConn.prepareStatement(SQL_QUERY_INTERFACE_ON_SERVER);
	
			stmt.setString(1, ipaddr);
                        stmt.setString(2, hostName);
	
			ResultSet rs = stmt.executeQuery();
	
			rs = stmt.executeQuery();
			while(rs.next())
			{
				if (log.isDebugEnabled())
				{
					log.debug("updateServer: the Interface "  + ipaddr + 
                                                " on NMS server: " + hostName + " already exists in the database.");
				}
                                
                                // The interface exists on the NMS server, a 'DELETE operation could be performed,
                                // but just return for the 'ADD' operation.
                                if (action.equalsIgnoreCase("DELETE"))
                                {
                                        // Delete all services on the specified interface in interface/service mapping
                                        //
				        if (log.isDebugEnabled())
				        {
					        log.debug("updateServer: delete all services on the interface: " + ipaddr
                                                        + " in the interface/service mapping." );
				        }
			                stmt = dbConn.prepareStatement(SQL_DELETE_ALL_SERVICES_INTERFACE_MAPPING);
			                stmt.setString(1, ipaddr);
			                stmt.executeUpdate();

                                        
                                        // Delete the interface on interface/server mapping
				        if (log.isDebugEnabled())
				        {
					        log.debug("updateServer: delete interface: " + ipaddr
                                                        + " on NMS server: " + hostName);
				        }
			                stmt = dbConn.prepareStatement(SQL_DELETE_INTERFACE_ON_SERVER);
			                stmt.setString(1, ipaddr);
			                stmt.setString(2, hostName);
			                stmt.executeUpdate();
                                        
                                        //Create a deleteInterface event to eventd.
                                        createAndSendDeleteInterfaceEvent(nodeLabel, ipaddr, hostName, 
                                                                          txNo, sourceUei);
                                }
			        else // could not perform 'ADD' since the service already exists.
                                {
                                        log.warn("updateServerHandler: the interface " + ipaddr 
                                                + " already exist on NMS server: " + hostName 
                                                + ". Could not perform 'ADD' operation.");
                                        
                                        if (m_xmlrpc)
                                        {
                                                int status = EventConstants.XMLRPC_NOTIFY_SUCCESS;
                                                createAndSendXmlrpcNotificationEvent( txNo, sourceUei,
                                                                      "Interface already exists.", status); 
                                        }
                                }
                                
                                return;
			}
                        stmt.close();
                        
                        // the interface does not exist on the NMS server yet, an 'ADD' operation could
                        // be performed. In any other cases, log error message.
                        if (action.equalsIgnoreCase("ADD"))
                        {
                                stmt = dbConn.prepareStatement(SQL_ADD_INTERFACE_TO_SERVER);

                                stmt.setString(1, ipaddr);
                                stmt.setString(2, hostName);
                                stmt.executeUpdate();
                                
			        if (log.isDebugEnabled())
			        {
				        log.debug("updateServerHandler: added interface " + ipaddr  
                                               + " into NMS server: " + hostName);
			        }

                                //Create a addInterface event and process it. 
                                createAndSendAddInterfaceEvent(nodeLabel, ipaddr, hostName, txNo, sourceUei);

                        }
                        else 
                        {
                                log.error("updateServerHandler: could not delete non-existing interface: " + ipaddr
                                + " on NMS server: " + hostName);
                                
                                if (m_xmlrpc)
                                {
                                        int status = EventConstants.XMLRPC_NOTIFY_SUCCESS;
                                        createAndSendXmlrpcNotificationEvent( txNo, sourceUei,
                                                              "Interface not exist yet.", status); 
                                }
                        }
		}
		catch(SQLException sqlE)
		{
			log.error("SQLException during updateServer on database.", sqlE);
                        if (m_xmlrpc)
                        {
                                int status = EventConstants.XMLRPC_NOTIFY_FAILURE;
                                createAndSendXmlrpcNotificationEvent( txNo, sourceUei,
                                                              sqlE.getMessage(), status); 
                        }
		}
		finally
		{
			// close the statement
			if (stmt != null)
				try { stmt.close(); } catch(SQLException sqlE) { };

			// close the connection
			if (dbConn != null)
				try { dbConn.close(); } catch(SQLException sqlE) { };					
		}
		
	}

