	/**
	 * Returns the Internet address at the corresponding index. If
	 * the address cannot be resolved then a null reference is returned.
	 * 
	 * @param ifIndex	The index to search for.
	 *
	 * @throws java.lang.IndexOutOfBoundsException Thrown if the index cannot
	 * 	be resolved due to an incomplete table.
	 */
	InetAddress[] getIfAddressAndMask(int ifIndex)
	{
		if(m_ipAddrTable == null || m_ipAddrTable.getEntries() == null)
		{
			throw new IndexOutOfBoundsException("Illegal Index, no table present");
		}
		
		Iterator i = m_ipAddrTable.getEntries().iterator();
		while(i.hasNext())
		{
			IpAddrTableEntry entry = (IpAddrTableEntry)i.next();
			SnmpInt32 ndx = (SnmpInt32)entry.get(IpAddrTableEntry.IP_ADDR_IF_INDEX);
			if(ndx != null && ndx.getValue() == ifIndex)
			{
				// found it
				// extract the address
				//
				SnmpIPAddress ifAddr = (SnmpIPAddress)entry.get(IpAddrTableEntry.IP_ADDR_ENT_ADDR);
				SnmpIPAddress ifMask = (SnmpIPAddress)entry.get(IpAddrTableEntry.IP_ADDR_ENT_NETMASK);
				if(ifAddr != null)
				{
					try
					{
						InetAddress[] pair = new InetAddress[2];
						pair[0] = ifAddr.convertToIpAddress();
						pair[1] = ifMask.convertToIpAddress();
						return pair;
					}
					catch(SnmpBadConversionException e)
					{
						Category log = ThreadCategory.getInstance(getClass());
						log.error("Failed to convert snmp collected address: " + ifAddr, e);
					}
				}
			}
		}
		return null;
	}

