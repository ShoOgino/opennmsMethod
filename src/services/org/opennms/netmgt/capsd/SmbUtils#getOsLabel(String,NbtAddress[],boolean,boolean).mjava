    /**
     * Returns the operating system label to be associated with a node in 'node'
     * table in the databse. This call should be made after an attempt to
     * determine if the interface supports Microsoft Exchange. This is
     * determined by the {@link MSExchangePlugin MSExchangePlugin}class.
     * 
     * @param nativeOS
     *            OS string returned by jCIFS following SMB session
     *            establishment with the remote host.
     * @param addresses
     *            array of NbtAddress objects associated with the remote host
     *            being tested.
     * @param isSamba
     *            <em>true</em> if it has been derived that the remote system
     *            is running Samba.
     * @param hasExchange
     *            <em>true</em> if the service supports microsoft exhange.
     * 
     * @return The Operating system label
     */
    static String getOsLabel(String nativeOS, NbtAddress[] addresses, boolean isSamba, boolean hasExchange) {
        String osLabel = null;

        // Given the operating system value returned by
        // jCIFS via SMB (nativeOS) now see if we can derive
        // anything else from the SMB data we've collected
        // in order to be more precise with our OS label.
        //
        if (nativeOS == null) {
            // HACK: nativeOS will be null if the share enumeration
            // failed for the remote host. If however the box is
            // running Samba we can safely assume the OS is either
            // Linux or UNIX.
            //
            if (isSamba) {
                osLabel = "Linux/UNIX";
            } else if (hasExchange) {
                osLabel = "Windows Server"; // Don't know if we have Win 2000 or
                                            // NT 4.0
            }
        } else if (nativeOS.length() == 0) {
            // HACK: Windows 95/98 boxes don't appear to give us the operating
            // system so if we have successfully enumerate the shares on a
            // server
            // but the operating system return is an emtpy string then we will
            // assume
            // it is a Win 95/98 box.
            //
            osLabel = "Windows 95/98";
        } else if (nativeOS.equalsIgnoreCase("Unix")) {
            // jCIFS reports "Unix" but the remote OS may actually
            // be Linux.
            //
            osLabel = "Linux/UNIX";
        } else if (nativeOS.equalsIgnoreCase("Windows 5.0")) {
            // jCIFS reports "Windows 5.0"...switch this to "Windows 2000"
            //
            nativeOS = "Windows 2000";

            if (hasExchange || isNTServer(addresses))
                osLabel = nativeOS.concat(" Server");
            else
                osLabel = nativeOS;
        } else if (nativeOS.startsWith("Windows NT")) {
            // Windows NT
            //
            if (hasExchange || isNTServer(addresses))
                osLabel = nativeOS.concat(" Server");
            else
                osLabel = nativeOS;
        } else {
            osLabel = nativeOS;
        }

        return osLabel;
    }

