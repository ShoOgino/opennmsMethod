	/**
	 * Process the event,  add the specified interface into database. If the associated 
         * node does not exist in the database yet, add a node into the database.
	 *
	 * @param event	The event to process.
	 */
	private void addInterfaceHandler(Event event)
	{
                String ipaddr = event.getInterface();

		Category log = ThreadCategory.getInstance(getClass());
		if (log.isDebugEnabled())
			log.debug("addInterfaceHandler:  processing addInterface event for " + ipaddr);

		// Extract node label and transaction No. from the event parms
		String nodeLabel = null;
                long txNo = -1L;
		Parms parms = event.getParms();
		if (parms != null)
		{
			String parmName = null;
			Value parmValue = null;
			String parmContent = null;
		
			Enumeration parmEnum = parms.enumerateParm();
			while(parmEnum.hasMoreElements())
			{
				Parm parm = (Parm)parmEnum.nextElement();
				parmName  = parm.getParmName();
				parmValue = parm.getValue();
				if (parmValue == null)
					continue;
				else 
					parmContent = parmValue.getContent();
	
				//  get node label
				if (parmName.equals(EventConstants.PARM_NODE_LABEL))
				{
					nodeLabel = parmContent;
		                        if (log.isDebugEnabled())
			                        log.debug("addInterfaceHandler:  parmName: " + parmName
                                                        + " /parmContent: " + parmContent);
				}
				else if (parmName.equals(EventConstants.PARM_TRANSACTION_NO))
                                {
                                        String temp = parmContent;
		                        if (log.isDebugEnabled())
			                        log.debug("addInterfaceHandler:  parmName: " + parmName
                                                        + " /parmContent: " + parmContent);
                                        try
                                        {
                                                txNo = Long.valueOf(temp).longValue();
                                        }
                                        catch (NumberFormatException nfe)
                                        {
                                                log.warn("addInterfaceHandler: Parameter " + EventConstants.PARM_TRANSACTION_NO 
                                                        + " cannot be non-numberic", nfe);
                                                txNo = -1L;
                                        }
                                }
						
			}
		}

                boolean invalidParameters = ((ipaddr == null) || (nodeLabel == null));
                if (m_xmlrpc)
                        invalidParameters = invalidParameters || (txNo == -1L);

                if (invalidParameters)
                {
		        if (log.isDebugEnabled())
		                log.debug("addInterfaceHandler:  Invalid parameters." );

                        if (m_xmlrpc)
                        {
                                try
                                {
                                        XmlRpcNotifier notifier = new XmlRpcNotifier(m_xmlrpcServerUrl);
                                        String reply = notifier.notifyFailure(txNo, event.getUei(), "Invalid parameters");
		                        if (log.isDebugEnabled())
			                        log.debug("addInterfaceHandler: Notify failure with xmlrpc: \n\t\t" + reply); 
                                }
                                catch (XmlRpcException xe)
                                {
                                        log.warn("addInterfaceHandler: XMLRPC failure. ", xe);
                                }
                                catch (IOException ioe)
                                {
                                        log.warn("addInterfaceHandler: IOException on XMLRPC. ", ioe);
                                }
                        }
                        
			return;
		}
                
		// First make sure the specified node label and ipaddress do not exist in the database
                // before trying to add them in. 
		java.sql.Connection dbConn = null;
		PreparedStatement stmt = null;
		try
		{
			dbConn = DatabaseConnectionFactory.getInstance().getConnection();
		
			stmt = dbConn.prepareStatement(SQL_QUERY_IPINTERFACE_EXIST);
	
			stmt.setString(1, nodeLabel);
			stmt.setString(2, ipaddr);
	
			ResultSet rs = stmt.executeQuery();
			while(rs.next())
			{
				if (log.isDebugEnabled())
				{
					log.debug("addInterfaceHandler: node " + nodeLabel + " with IPAddress " 
                                        + ipaddr + " already exist in the database.");
				}
                                
                                if (m_xmlrpc)
                                {
                                        try
                                        {
                                                XmlRpcNotifier notifier = new XmlRpcNotifier(m_xmlrpcServerUrl);
                                                String reply = notifier.notifySuccess(txNo, event.getUei(), 
                                                        "interface already exists on the node.");
		                                if (log.isDebugEnabled())
			                                log.debug("addInterfaceHandler: Notify failure with xmlrpc: \n\t\t" + reply); 
                                        }
                                        catch (XmlRpcException xe)
                                        {
                                                log.warn("addInterfaceHandler: XMLRPC failure. ", xe);
                                        }
                                        catch (IOException ioe)
                                        {
                                                log.warn("addInterfaceHandler: IOException on XMLRPC. ", ioe);
                                        }
                                }
			        return;
			}
                        stmt.close();
                        
                        // There is no ipinterface associated with the specified nodeLabel exist
                        // in the database. Verify if a node with the nodeLabel already exist in 
                        // the database. If not, create a node with the nodeLabel and add it to the 
                        // database, and also add the ipaddress associated with this node to the 
                        // database. If the node with the nodeLabel exists in the node table, just 
                        // add the ip address to the database.
                        stmt = dbConn.prepareStatement(SQL_QUERY_NODE_EXIST);
                        stmt.setString(1, nodeLabel);

                        rs = stmt.executeQuery();

                        while (rs.next())
                        {

		                if (log.isDebugEnabled())
			                log.debug("addInterfaceHandler:  add interface: " + ipaddr
                                                + " to the database.");
                                                
                                // Node already exists. Add the ipaddess to the ipinterface table
                                InetAddress ifaddr = InetAddress.getByName(ipaddr);
                                int nodeId = rs.getInt(1);
                                String dpName = rs.getString(2);
                                
                                DbIpInterfaceEntry ipInterface = DbIpInterfaceEntry.create(nodeId, ifaddr); 
                                ipInterface.setHostname(ifaddr.getHostName());
                                ipInterface.setManagedState(DbIpInterfaceEntry.STATE_MANAGED);
                                ipInterface.setPrimaryState(DbIpInterfaceEntry.SNMP_NOT_ELIGIBLE);
                                ipInterface.store(dbConn);

                                // create a nodeEntry 
                                DbNodeEntry nodeEntry = DbNodeEntry.get(nodeId, dpName);
                                createAndSendNodeGainedInterfaceEvent(nodeEntry, ifaddr, txNo);
                                if (m_xmlrpc)
                                {
                                        try
                                        {
                                                XmlRpcNotifier notifier = new XmlRpcNotifier(m_xmlrpcServerUrl);
                                                String message = new String("Successfully added interface: ") + ipaddr 
                                                        + " to node: " + nodeLabel;
                                                String reply = notifier.notifySuccess(txNo, event.getUei(), message); 
                		                if (log.isDebugEnabled())
                			                log.debug("addInterfaceHandler: Notify failure with xmlrpc: \n\t\t" + reply); 
                                        }
                                        catch (XmlRpcException xe)
                                        {
                                                log.warn("addInterfaceHandler: XMLRPC failure. ", xe);
                                        }
                                        catch (IOException ioe)
                                        {
                                                log.warn("addInterfaceHandler: IOException on XMLRPC. ", ioe);
                                        }
                                }
                                return;
                        }
                        
                        // The node does not exist in the database, add the node and
                        // the ipinterface into the database.
                        addNode(dbConn, nodeLabel, ipaddr, txNo);
		}
		catch(SQLException sqlE)
		{
			log.error("addInterfaceHandler: SQLException during add node and ipaddress to the database.", sqlE);
                        if (m_xmlrpc)
                        {
                                try
                                {
                                        XmlRpcNotifier notifier = new XmlRpcNotifier(m_xmlrpcServerUrl);
                                        String reply = notifier.notifyFailure(txNo, event.getUei(), sqlE.getMessage());
		                        if (log.isDebugEnabled())
			                        log.debug("addInterfaceHandler: Notify failure with xmlrpc: \n\t\t" + reply); 
                                }
                                catch (XmlRpcException xe)
                                {
                                        log.warn("addInterfaceHandler: XMLRPC failure. ", xe);
                                }
                                catch (IOException ioe)
                                {
                                        log.warn("addInterfaceHandler: IOException on XMLRPC. ", ioe);
                                }
                        }
		}
		catch(java.net.UnknownHostException e)
		{
			log.error("addInterfaceHandler: can not solve unknow host.", e);
                        if (m_xmlrpc)
                        {
                                try
                                {
                                        XmlRpcNotifier notifier = new XmlRpcNotifier(m_xmlrpcServerUrl);
                                        String reply = notifier.notifyFailure(txNo, event.getUei(), e.getMessage());
		                        if (log.isDebugEnabled())
			                        log.debug("addInterfaceHandler: Notify failure with xmlrpc: \n\t\t" + reply); 
                                }
                                catch (XmlRpcException xe)
                                {
                                        log.warn("addInterfaceHandler: XMLRPC failure. ", xe);
                                }
                                catch (IOException ioe)
                                {
                                        log.warn("addInterfaceHandler: IOException on XMLRPC. ", ioe);
                                }
                        }
		}
		finally
		{
			// close the statement
			if (stmt != null)
				try { stmt.close(); } catch(SQLException sqlE) { };

			// close the connection
			if (dbConn != null)
				try { dbConn.close(); } catch(SQLException sqlE) { };					
		}
	}

