    /**
     * Checks if a given server is listening o a given interface
     * @param hostname
     *            name of the RDBMS server
     * @param user
     *            Database user
     * @param password
     *            Database password
     * @param db_url
     *            Database connection url
     * @param timeout
     *            Default login timeout
     * @param retries
     *            Number of retrys before giving up a connection attempts
     * @param db_driver
     *            JDBC driver to use
     * 
     * @see DBTools#constructUrl
     */

    private boolean isServer(String hostname, Map qualifiers) {
    	
        String user = ParameterMap.getKeyedString(qualifiers, "user", DBTools.DEFAULT_DATABASE_USER);
        String password = ParameterMap.getKeyedString(qualifiers, "password", DBTools.DEFAULT_DATABASE_PASSWORD);
        String db_url = ParameterMap.getKeyedString(qualifiers, "url", DBTools.DEFAULT_URL);
        int timeout = ParameterMap.getKeyedInteger(qualifiers, "timeout", DEFAULT_TIMEOUT);
        int retries = ParameterMap.getKeyedInteger(qualifiers, "retry", DEFAULT_RETRY);
        String db_driver = ParameterMap.getKeyedString(qualifiers, "driver", DBTools.DEFAULT_JDBC_DRIVER);


        boolean status = false;
        Connection con = null;
        Statement statement = null;
        boolean connected = false;

        for (int attempts = 1; attempts <= retries && !connected;) {
            log().info("Trying to detect JDBC server on '" + hostname + "', attempts #: " + attempts);
            try {

                log().debug("Loading JDBC driver: '" + db_driver + "'");
                Driver driver = (Driver)Class.forName(db_driver).newInstance();
                log().debug("JDBC driver loaded: '" + db_driver + "'");

                String url = DBTools.constructUrl(db_url, hostname);
                log().debug("Constructed JDBC url: '" + url + "'");

                Properties props = new Properties();
                props.setProperty("user", user);
                props.setProperty("password", password);
                props.setProperty("timeout", String.valueOf(timeout/1000));
                con = driver.connect(url, props);
                connected = true;
                log().debug("Got database connection: '" + con + "' (" + url + ", " + user + ", " + password + ")");
                
                status = checkStatus(con, qualifiers);

                if (status)
                	log().info("JDBC server detected on: '" + hostname + "', attempts #:" + attempts);
                
            } catch (Exception e) {
                log().info(e);
            } finally {
                attempts++;
                closeStmt(statement);
                closeConn(con);
            }
        }
        return status;
    }

