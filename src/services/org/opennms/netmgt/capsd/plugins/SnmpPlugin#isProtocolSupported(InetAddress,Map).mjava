    /**
     * Returns true if the protocol defined by this plugin is supported. If the
     * protocol is not supported then a false value is returned to the caller.
     * The qualifier map passed to the method is used by the plugin to return
     * additional information by key-name. These key-value pairs can be added to
     * service events if needed.
     * 
     * @param address
     *            The address to check for support.
     * @param qualifiers
     *            The map where qualification are set by the plugin.
     * 
     * @return True if the protocol is supported by the address.
     */
    public boolean isProtocolSupported(InetAddress address, Map qualifiers) {
        try {

            String oid = ParameterMap.getKeyedString(qualifiers, "vbname", DEFAULT_OID);
            SnmpPeer peer = SnmpPeerFactory.getInstance().getPeer(address);
            String expectedValue = null;
            if (qualifiers != null) {
                // "port" parm
                //
                if (qualifiers.get("port") != null) {
                    int port = ParameterMap.getKeyedInteger(qualifiers, "port", peer.getPort());
                    peer.setPort(port);
                }
                
                // "timeout" parm
                //
                if (qualifiers.get("timeout") != null) {
                    int timeout = ParameterMap.getKeyedInteger(qualifiers, "timeout", peer.getTimeout());
                    peer.setTimeout(timeout);
                }
                
                // "retry" parm
                //
                if (qualifiers.get("retry") != null) {
                    int retry = ParameterMap.getKeyedInteger(qualifiers, "retry", peer.getRetries());
                    peer.setRetries(retry);
                }
                
                // "force version" parm
                //
                if (qualifiers.get("force version") != null) {
                    String version = (String) qualifiers.get("force version");
                    if (version.equalsIgnoreCase("snmpv1"))
                        peer.getParameters().setVersion(SnmpSMI.SNMPV1);
                    else if (version.equalsIgnoreCase("snmpv2"))
                        peer.getParameters().setVersion(SnmpSMI.SNMPV2);
                }
                
                // "vbvalue" parm
                //
                if (qualifiers.get("vbvalue") != null) {
                    expectedValue = (String) qualifiers.get("vbvalue");
                }
            }
            
            String retrievedValue = getNextValue(peer, oid);
            
            if (retrievedValue != null) {
                return (expectedValue == null ? true : retrievedValue.equals(expectedValue));
            }
            return false;
            
        } catch (Throwable t) {
            throw new UndeclaredThrowableException(t);
        }
        
    }

