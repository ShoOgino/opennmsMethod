    /**
     * <P>
     * Test to see if the paassed host-port pair is an endpoint for a TCP
     * server. If there is a TCP server at the destination value then a
     * connection is made using the params variable data and a check is
     * requested from the remote NSClient service.
     * </P>
     * 
     * @param host
     *            The remote host to connect to.
     * @param port
     *            The remote port on the host.
     * @param command
     *            The command to execute on the remote server.
     * @param retries
     *            The number of retries to attempt when connecting.
     * @param timeout
     *            The TCP socket timeout to use.
     * @param params
     *            The NSClient parameters used to validate the response.
     * @return The NsclientPacket the server sent, updated by NsclientManager
     *         to contain the proper result code based on the params passed.
     */
    private NsclientPacket isServer(InetAddress host, int port,
            String command, int retries, int timeout,
            NsclientCheckParams params) {
        boolean isAServer = false;

        // get a logger.
        Category log = ThreadCategory.getInstance(getClass());

        for (int attempts = 0; attempts <= retries && !isAServer; attempts++) {
            try {
                NsclientManager client = new NsclientManager(
                                                             host.getHostAddress(),
                                                             port);
                NsclientPacket response = null;

                client.setTimeout(timeout);
                client.init();

                response = client.processCheckCommand(
                                                      NsclientManager.convertStringToType(command),
                                                      params);
                log.debug("NsclientPlugin: " + command + ": "
                        + response.getResponse());
                isAServer = true;

                return response;
            } catch (NsclientException e) {
                log.debug("NsclientPlugin: Check failed: " + e.getMessage());
                log.error("NsclientManager returned exception: "
                        + e.getMessage() + " : " + e.getCause().getMessage());
                isAServer = false;
            }
        }
        return null;
    }

