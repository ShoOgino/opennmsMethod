    /**
	 * Marks a node deleted and creates an event for it if necessary.
	 * 
	 * @param dbConn
	 *            the database connection
	 * @param source
	 *            the source to use for constructed events
	 * @param nodeId
	 *            the node to delete
	 * @param txNo
	 *            a transaction number to associate with this deletion
	 * @return a List containing the node deleted event if necessary
	 * @throws SQLException
	 *             if a database error occurs
	 */
    private List markNodeDeleted(Connection dbConn, String source, long nodeId, long txNo) throws SQLException {
        final String DB_FIND_INTERFACE = "UPDATE node SET nodeType = 'D' WHERE nodeid = ? and nodeType != 'D'";
        Category log = ThreadCategory.getInstance(getClass());
        PreparedStatement stmt = null;
        List eventsToSend = new LinkedList();

        stmt = dbConn.prepareStatement(DB_FIND_INTERFACE);
        stmt.setLong(1, nodeId);
        int count = stmt.executeUpdate();
        stmt.close();

        if (log.isDebugEnabled()) log.debug("markServicesDeleted: marked service deleted: " + nodeId);

        if (count > 0)
            return Collections.singletonList(EventUtils.createNodeDeletedEvent(source, nodeId, txNo));
        else
            return Collections.EMPTY_LIST;
    }

