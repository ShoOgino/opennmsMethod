	/**
	 * This method is responsible for generating a interfaceReparented event and
	 * sending it to Eventd.
	 *
	 * @param ipAddr   IP address of interface which was reparented
	 * @param ipHostName  IP Host Name for the interface
	 * @param newNodeId  Interface's new nodeID
	 * @param oldNodeId  Interface's old nodeID
	 * @param reparentNodeEntry  DbNodeEntry object with all info associated with the reparent node 
	 */
	private synchronized void sendInterfaceReparentedEvent(String ipAddr, String ipHostName, int newNodeId, int oldNodeId, DbNodeEntry reparentNodeEntry)
	{
		Category log = ThreadCategory.getInstance(getClass());
		if(log.isDebugEnabled())
			log.debug("sendInterfaceReparentedEvent: ipAddr: " + ipAddr + " ipHostName: " + ipHostName + " newNodeId: " + newNodeId + " oldNodeId: " + oldNodeId);
		
		// Make sure host name not null
		if (ipHostName == null)
			ipHostName = "";
			
		// create the event to be sent
		Event newEvent = new Event();
		
		newEvent.setUei(EventConstants.INTERFACE_REPARENTED_EVENT_UEI);
		
		newEvent.setSource("OpenNMS.Capsd");
		
		newEvent.setNodeid(newNodeId);
		
		newEvent.setHost(Capsd.getLocalHostAddress());
		
		newEvent.setInterface(ipAddr);
		
		newEvent.setTime(EventConstants.formatToString(new java.util.Date()));

		// Add appropriate parms
		Parms eventParms = new Parms();
		Parm eventParm = null;
		Value parmValue = null;
		
		// Add IP host name
		eventParm = new Parm();
		eventParm.setParmName(EventConstants.PARM_IP_HOSTNAME);
		parmValue = new Value();
		parmValue.setContent(ipHostName);
		eventParm.setValue(parmValue);
		eventParms.addParm(eventParm);
		
		// Add old nodeid
		eventParm = new Parm();
		eventParm.setParmName(EventConstants.PARM_OLD_NODEID);
		parmValue = new Value();
		parmValue.setContent(String.valueOf(oldNodeId));
		eventParm.setValue(parmValue);
		eventParms.addParm(eventParm);
		
		// Add new nodeid
		eventParm = new Parm();
		eventParm.setParmName(EventConstants.PARM_NEW_NODEID);
		parmValue = new Value();
		parmValue.setContent(String.valueOf(newNodeId));
		eventParm.setValue(parmValue);
		eventParms.addParm(eventParm);
		
		// Add nodeLabel and nodeLabelSource
		eventParm = new Parm();
		eventParm.setParmName(EventConstants.PARM_NODE_LABEL);
		parmValue = new Value();
		parmValue.setContent(reparentNodeEntry.getLabel());
		eventParm.setValue(parmValue);
		eventParms.addParm(eventParm);
		
		eventParm = new Parm();
		eventParm.setParmName(EventConstants.PARM_NODE_LABEL_SOURCE);
		parmValue = new Value();
		parmValue.setContent(new String(new char[]{ reparentNodeEntry.getLabelSource() }));
		eventParm.setValue(parmValue);
		eventParms.addParm(eventParm);
		
		if (reparentNodeEntry.getSystemName() != null)
		{
			eventParm = new Parm();
			eventParm.setParmName(EventConstants.PARM_NODE_SYSNAME);
			parmValue = new Value();
			parmValue.setContent(reparentNodeEntry.getSystemName());
			eventParm.setValue(parmValue);
			eventParms.addParm(eventParm);
		}
		
		if (reparentNodeEntry.getSystemDescription() != null)
		{
			eventParm = new Parm();
			eventParm.setParmName(EventConstants.PARM_NODE_SYSDESCRIPTION);
			parmValue = new Value();
			parmValue.setContent(reparentNodeEntry.getSystemDescription());
			eventParm.setValue(parmValue);
			eventParms.addParm(eventParm);
		}
			
		// Add Parms to the event
		newEvent.setParms(eventParms);
		
		// Send event to Eventd
		try
		{
			EventIpcManagerFactory.getInstance().getManager().sendNow(newEvent);

		}
		catch(Throwable t)
		{
			log.warn("run: unexpected throwable exception caught during send to middleware", t);
		}
	}

