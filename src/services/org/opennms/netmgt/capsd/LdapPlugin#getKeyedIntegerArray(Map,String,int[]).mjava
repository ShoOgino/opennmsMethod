	/**
	 * This method is used to lookup a specific key in 
	 * the map. If the mapped value is a string is is converted
	 * to an interger and the original string value is replaced
	 * in the map. The converted value is returned to the caller.
	 * If the value cannot be converted then the default value is
	 * used.
	 *
	 * @return The int array value associated with the key.
	 */
	final static int[] getKeyedIntegerArray(Map map, String key, int[] defValue)
	{
		int[] result = defValue;
		Object oValue = map.get(key);

		if(oValue != null && oValue instanceof String)
		{
			List list = new ArrayList(8);
			StringTokenizer ntoks = new StringTokenizer(oValue.toString(), ":,; ");
			while(ntoks.hasMoreTokens())
			{
				String p = ntoks.nextToken();
				try
				{
					int v = Integer.parseInt(p);
					list.add(new Integer(v));
				}
				catch(NumberFormatException ne)
				{
					ThreadCategory.getInstance(HttpPlugin.class).info("getKeyedIntegerArray: Failed to convert token " + p + " for key " + key);
				}
			}
			result = new int[list.size()];
			Iterator i = list.iterator();
			int ndx = 0;
			while(i.hasNext())
				result[ndx++] = ((Integer)i.next()).intValue();
			
			map.put(key, result);
		} 
		else if(oValue != null)
		{
			result = ((int[])oValue);
		}
		return result;
	}

