    /**
     * <p>
     * Preforms the collection for the targeted internet address. The success or
     * failure of the collection should be tested via the <code>failed</code>
     * method.
     * </p>
     * 
     * <p>
     * No synchronization is preformed, so if this is used in a separate thread
     * context synchornization must be added.
     * </p>
     * 
     */
    public void run() {

        m_sysGroup = new SystemGroup(m_address);
        m_ifTable = new IfTable(m_address);
        m_ipAddrTable = new IpAddrTable(m_address);
        m_ifXTable = new IfXTable(m_address);
        
        SnmpWalker walker = SnmpWalker.create(m_address, "system/ifTable/ifXTable/ipAddrTable", 50, new CollectionTracker[] { m_sysGroup, m_ifTable, m_ipAddrTable, m_ifXTable});
        walker.start();

        try {
            // wait a maximum of five minutes!
            //
            // FIXME: Why do we do this. If we are successfully processing responses shouldn't we keep going?
            walker.waitFor(300000);
        } catch (InterruptedException e) {
            m_sysGroup = null;
            m_ifTable = null;
            m_ipAddrTable = null;
            m_ifXTable = null;

            log().warn("IfSnmpCollector: collection interrupted, exiting", e);
            return;
        }

        // Log any failures
        //
        if (!this.hasSystemGroup())
            log().info("IfSnmpCollector: failed to collect System group for " + m_address.getHostAddress());
        if (!this.hasIfTable())
            log().info("IfSnmpCollector: failed to collect ifTable for " + m_address.getHostAddress());
        if (!this.hasIpAddrTable())
            log().info("IfSnmpCollector: failed to collect ipAddrTable for " + m_address.getHostAddress());
        if (!this.hasIfXTable())
            log().info("IfSnmpCollector: failed to collect ifXTable for " + m_address.getHostAddress());
    }

