    /**
     * Returns the InetAddress object of the primary SNMP interface (if one
     * exists).
     * 
     * @param dbc
     *            Database connection.
     * @param node
     *            DbNodeEntry object representing the interface's parent node
     *            table entry
     * 
     * @throws SQLException
     *             if an error occurs updating the ipInterface table
     * @return Old SNMP primary interface address.
     */
    static InetAddress getPrimarySnmpInterfaceFromDb(Connection dbc, DbNodeEntry node) throws SQLException {
        Category log = ThreadCategory.getInstance(SuspectEventProcessor.class);

        // Get old primary SNMP interface if one exists
        //
        log.debug("getPrimarySnmpInterfaceFromDb: retrieving old primary snmp interface...");
        InetAddress oldPrimarySnmpIf = null;

        // Prepare SQL statement
        PreparedStatement stmt = dbc.prepareStatement("SELECT ipAddr FROM ipInterface WHERE nodeId=? AND isSnmpPrimary='P' AND isManaged!='D'");
        stmt.setInt(1, node.getNodeId());

        // Execute statement
        ResultSet rs = null;
        try {
            rs = stmt.executeQuery();
            if (rs.next()) {
                String oldPrimaryAddr = rs.getString("ipAddr");
                if (oldPrimaryAddr != null) {
                    try {
                        oldPrimarySnmpIf = InetAddress.getByName(oldPrimaryAddr);
                        log.debug("getPrimarySnmpInterfaceFromDb: old primary Snmp interface is " + oldPrimarySnmpIf.getHostAddress());
                    } catch (UnknownHostException e) {
                        log.warn("Failed converting IP address " + oldPrimaryAddr);
                    }
                }
            }
        } catch (SQLException sqlE) {
            throw sqlE;
        } finally {
            try {
                stmt.close(); // automatically closes the result set as well
            } catch (Exception e) {
                // Ignore
            }
        }

        return oldPrimarySnmpIf;
    }

