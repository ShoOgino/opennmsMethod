	/**
	 * This method is responsible for determining the primary IP interface 
	 * for the node being rescanned.
	 *
	 * @param collectorMap 	Map of IfCollector objects containing data collected
	 * 			from all of the node's interfaces.
	 * 
	 * @return InetAddress 	The primary IP interface for the node or null if
	 *   			a primary interface for the node could not be determined.
	 */
	private InetAddress determinePrimaryIpInterface(Map collectorMap)
	{
		Category log = ThreadCategory.getInstance(getClass());
		
		// For now hard-coding primary interface address selection method to MIN
		String method = SELECT_METHOD_MIN;
		
		List ifList = new ArrayList();
		Collection values = collectorMap.values();
		Iterator iter = values.iterator();
		InetAddress primaryIf = null;
		while(iter.hasNext())
		{
			IfCollector ifc = (IfCollector)iter.next();
			InetAddress currIf = ifc.getTarget();

			if (primaryIf == null)
			{
				primaryIf = currIf;
				continue;
			}
			else
			{
				// Test the target interface of the collector first.
				primaryIf = SuspectEventProcessor.compareAndSelectPrimary(currIf, primaryIf, method);
				
				// Now test each of the collected subtargets
				if (ifc.hasAdditionalTargets())
				{
					Map subTargets = ifc.getAdditionalTargets();
					Set keys = subTargets.keySet();
					Iterator siter = keys.iterator();
					
					while(siter.hasNext())
					{
						currIf = (InetAddress)siter.next();
						primaryIf = SuspectEventProcessor.compareAndSelectPrimary(currIf, primaryIf, method);
					}
				}
			}
		}
		
		if (log.isDebugEnabled())
			if (primaryIf != null)
				log.debug("determinePrimaryIpInterface: selected primary interface: " + primaryIf.getHostAddress());
			else
				log.debug("determinePrimaryIpInterface: no primary interface found");
		return primaryIf;
	}

