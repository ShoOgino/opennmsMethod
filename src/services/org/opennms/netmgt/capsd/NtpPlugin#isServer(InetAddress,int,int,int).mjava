	/**
	 *
	 * @param nserver	The address for the NTP server test.
	 * @param port		The port to test for NTP
	 * @param timeout	Timeout in milliseconds
	 *
	 * @return True if server, false if not.
	 */
	private boolean isServer(InetAddress nserver, int port, int retries, int timeout)
	{
		boolean isAServer = false;
		Category log = ThreadCategory.getInstance(getClass());
		
		// Allocate a communication socket
		//
		DatagramSocket socket = null;
		try 
		{
			// Allocate a socket
			//
			socket = new DatagramSocket();
			socket.setSoTimeout(timeout);

			// Allocate a receive buffer
			//
			byte[] data = new byte[512];

			for(int count = 0; count < retries && !isAServer; count++)
			{
				try 
				{
					// Construct a new DNS Address Request
					//
					NtpMessage request = new NtpMessage();

					// build the datagram packet used to request the address.
					//
					byte[] buf = new NtpMessage().toByteArray();
					DatagramPacket outpkt = new DatagramPacket(buf, buf.length, nserver, port);

					// send the output packet
					//
					socket.send(outpkt);

					// receive a resposne
					//
					DatagramPacket inpkt = new DatagramPacket(data, data.length);
					socket.receive(inpkt);
					if(inpkt.getAddress().equals(nserver))
					{
//						try
//						{
							NtpMessage msg = new NtpMessage(inpkt.getData());
							isAServer = true;
//						}
//						catch(IOException ex)
//						{
//							log.debug("Failed to match response to request, an IOException occured", ex);
//						}
					}
				} 
				catch (InterruptedIOException ex)
				{
					// discard this exception, do next loop
					//
				}
			} 
		} 
		catch (IOException ex) 
		{
			log.warn("isServer: An I/O exception during NTP resolution test.", ex);
		}
		finally
		{
			if(socket != null)
				socket.close();
		}

		return isAServer;
	}

