        /**
         * This method is responsible for generating a changeService  event 
         * and sending it to eventd..
         *
         * @param ipaddr        IP address of the interface where the service resides.
         * @param service       the service to be changed(add or remove).
         * @param action        what operation to perform for the service/interface pair.
         * @param txNo          the external transaction No.
         * @param callerUei     the uei of the caller event.
         */
        private void createAndSendChangeServiceEvent( String ipaddr, String service, String action, 
                                                      long txNo, String callerUei)
        {
		Category log = ThreadCategory.getInstance(getClass());
		if (log.isDebugEnabled())
			log.debug("createAndSendChangeServiceEvent:  processing updateService event for service:  " 
                                + service + " on interface: " + ipaddr);
        
                Event newEvent = new Event();
                newEvent.setUei(EventConstants.CHANGE_SERVICE_EVENT_UEI);
                newEvent.setSource("OpenNMS.capsd");
                newEvent.setInterface(ipaddr);
                newEvent.setService(service);
                newEvent.setTime(EventConstants.formatToString(new java.util.Date()));

                // Add appropriate parms
                Parms eventParms = new Parms();
                Parm eventParm = null;
                Value parmValue = null;

                eventParm = new Parm();
                eventParm.setParmName(EventConstants.PARM_ACTION);
                parmValue = new Value();
                parmValue.setContent(action);
                eventParm.setValue(parmValue);
                eventParms.addParm(eventParm);

                eventParm = new Parm();
                eventParm.setParmName(EventConstants.PARM_TRANSACTION_NO);
                parmValue = new Value();
                parmValue.setContent((new Long(txNo)).toString());
                eventParm.setValue(parmValue);
                eventParms.addParm(eventParm);
                
                // Add Parms to the event
                newEvent.setParms(eventParms);
                
                // Send event to Eventd
                try
                {
                        EventIpcManagerFactory.getInstance().getManager().sendNow(newEvent);

                        if (log.isDebugEnabled())
                                log.debug("createAndSendChangeServiceEvent: successfully sent " 
                                        + " changeService event service: " + service 
                                        + " on interface: " + ipaddr);
                }
                catch(Throwable t)
                {
                        log.warn("run: unexpected throwable exception caught during send to middleware", t);
                        int status = EventConstants.XMLRPC_NOTIFY_FAILURE;
                        createAndSendXmlrpcNotificationEvent( txNo, callerUei,
                                                "caught unexpected throwable exception.", status);
                }
        }                

