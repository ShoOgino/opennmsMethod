	private boolean isServer(InetAddress host, int port, int retries, int timeout)
	{
		Category log = ThreadCategory.getInstance(getClass());

		boolean isAServer = false;
		for(int attempts = 0; attempts <= retries && !isAServer; attempts++)
		{
                        SocketChannel sChannel = null;
			try
			{
                                sChannel = SocketChannelUtil.getConnectedSocketChannel(host, port, timeout);
                                if (sChannel == null)
                                {
                                        log.debug("MSExchangePlugin: did not connect to host within timeout: " + timeout +" attempt: " + attempts);
                                        continue;
                                }
                                log.debug("MSExchangePlugin: connected to host: " + host + " on port: " + port);

                                // Allocate a line reader
                                //
                                BufferedReader lineRdr = new BufferedReader(new InputStreamReader(sChannel.socket().getInputStream()));

				// Read the banner line and see if it contains the
				// substring "Microsoft Exchange"
				//
				String banner = lineRdr.readLine();
				int rc = banner.indexOf(BANNER_STRING);
				if (rc > -1)
					isAServer = true;
			}
			catch(ConnectException e)
			{
				// Connection refused!!  No need to perform retries.
				//
				log.debug("isServer: Connection refused to " + host.getHostAddress() + ":" + port);
				break;
			}
			catch(NoRouteToHostException e)
			{
				// No Route to host!!!
				//
				e.fillInStackTrace();
				log.info("isServer: Failed to connect to host " + host.getHostAddress() + ", no route to host", e);
				throw new UndeclaredThrowableException(e);
			}
			catch(InterruptedIOException e)
			{
				// ignore this
			}
			catch(IOException e)
			{
				log.info("isServer: Unexpected I/O exception occured with host " + host.getHostAddress() + " on port " + port, e);
			}
			catch(Throwable t)
			{
				log.error("isServer: Undeclared throwable caught communicating with host " + host.getHostAddress() + " on port " + port, t);
			}
			finally
			{
				try
				{
                                        if(sChannel != null)
                                                sChannel.close();
				}
				catch(IOException e) { }
			}
		}

		return isAServer;
	}

