    /**
     * Returns the netmask address at the corresponding index. If the address
     * cannot be resolved then a null reference is returned.
     * 
     * NOTE: If an interface has more than one IP address associated with it
     * only the FIRST match is returned.
     * 
     * @param ifIndex
     *            The index to search for.
     * 
     * @throws java.lang.IndexOutOfBoundsException
     *             Thrown if the index cannot be resolved due to an incomplete
     *             table.
     */
    InetAddress getMask(int ifIndex) {
        if (m_ipAddrTable == null || m_ipAddrTable.getEntries() == null) {
            throw new IndexOutOfBoundsException("Illegal Index, no table present");
        }

        Iterator i = m_ipAddrTable.getEntries().iterator();
        while (i.hasNext()) {
            IpAddrTableEntry entry = (IpAddrTableEntry) i.next();
            SnmpInt32 ndx = (SnmpInt32) entry.get(IpAddrTableEntry.IP_ADDR_IF_INDEX);
            if (ndx != null && ndx.getValue() == ifIndex) {
                // found it
                // extract the address
                //
                SnmpIPAddress maskAddr = (SnmpIPAddress) entry.get(IpAddrTableEntry.IP_ADDR_ENT_NETMASK);
                if (maskAddr != null) {
                    try {
                        return maskAddr.convertToIpAddress();
                    } catch (SnmpBadConversionException e) {
                        Category log = ThreadCategory.getInstance(getClass());
                        log.error("Failed to convert snmp netmask: " + maskAddr, e);
                    }
                }
            }
        }
        return null;
    }

