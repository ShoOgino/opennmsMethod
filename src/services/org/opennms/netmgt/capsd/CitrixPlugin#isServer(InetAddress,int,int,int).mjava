	/**
	 * <P>Test to see if the passed host-port pair is the 
	 * endpoint for an Citrix server. If there is an Citrix server
	 * at that destination then a value of true is returned
	 * from the method. Otherwise a false value is returned 
	 * to the caller.</P>
	 *
	 * @param host	The remote host to connect to.
	 * @param port 	The remote port on the host.
	 *
	 * @return True if server supports Citrix on the specified 
	 *	port, false otherwise
	 */
	private boolean isServer(InetAddress host, int port, int retries, int timeout)
	{
		// get a log to send errors
		//
		Category log = ThreadCategory.getInstance(getClass());
                
                //don't let the user set the timeout to 0, an infinite loop will occur if the server is down
                if (timeout==0)
                        timeout=10;
                
		boolean isAServer = false;
		for (int attempts=0; attempts <= retries && !isAServer; attempts++)
		{
			Socket portal = null;
			try
			{
				// create a connected socket
				//
				portal = new Socket(host, port);
				portal.setSoTimeout(timeout); // 3 second blocking time!

				// Allocate a line reader
				//
				BufferedReader reader = new BufferedReader(new InputStreamReader(portal.getInputStream()));
                                StringBuffer buffer = new StringBuffer();
				while(!isAServer)
                                {
                                        buffer.append((char)reader.read());
                                        if (buffer.toString().indexOf("ICA")>-1)
                                        {
                                                isAServer=true;
                                        }
                                }
                        }
                        catch(ConnectException cE)
			{
				// Connection refused!!  No need to perform retries.
				//
				cE.fillInStackTrace();
				log.debug("CitrixPlugin: connection refused by host " + host.getHostAddress(), cE);
				isAServer = false;
				break;
			}
			catch(NoRouteToHostException e)
			{
				// No route to host!!  No need to perform retries.
				e.fillInStackTrace();
				log.info("CitrixPlugin: Unable to test host " + host.getHostAddress() + ", no route available", e);
				isAServer = false;
				throw new UndeclaredThrowableException(e);
			}
			catch(InterruptedIOException e)
			{
				// no logging necessary, this is "expected" behavior
				//
				isAServer = false;
			}
			catch(IOException e)
			{
				log.info("CitrixPlugin: Error communicating with host " + host.getHostAddress(), e);
				isAServer = false;
			}
			catch(Throwable t)
			{
				log.warn("CitrixPlugin: Undeclared throwable exception caught contacting host " + host.getHostAddress(), t);
				isAServer = false;
			}
			finally
			{
				try
				{
					if(portal != null)
						portal.close();
				}
				catch(IOException e) { }
			}
		}

		//
		// return the success/failure of this
		// attempt to contact an ftp server.
		//
		return isAServer;
	}

