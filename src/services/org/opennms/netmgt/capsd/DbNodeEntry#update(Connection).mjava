    /**
     * Updates an existing record in the OpenNMS node table.
     * 
     * @param c
     *            The connection used for the update.
     * 
     * @throws java.sql.SQLException
     *             Thrown if an error occurs with the connection
     */
    private void update(Connection c) throws SQLException {
        if (!m_fromDb)
            throw new IllegalStateException("The record does not exists in the database");

        Category log = ThreadCategory.getInstance(getClass());

        // first extract the next node identifier
        //
        StringBuffer sqlText = new StringBuffer("UPDATE node SET ");

        char comma = ' ';
        if ((m_changed & CHANGED_PARENT_ID) == CHANGED_PARENT_ID) {
            sqlText.append(comma).append("nodeParentID = ?");
            comma = ',';
        }

        if ((m_changed & CHANGED_TYPE) == CHANGED_TYPE) {
            sqlText.append(comma).append("nodeType = ?");
            comma = ',';
        }

        if ((m_changed & CHANGED_CREATE_TIME) == CHANGED_CREATE_TIME) {
            sqlText.append(comma).append("nodeCreateTime = ?");
            comma = ',';
        }

        if ((m_changed & CHANGED_SYSOID) == CHANGED_SYSOID) {
            sqlText.append(comma).append("nodeSysOID = ?");
            comma = ',';
        }

        if ((m_changed & CHANGED_SYSNAME) == CHANGED_SYSNAME) {
            sqlText.append(comma).append("nodeSysName = ?");
            comma = ',';
        }

        if ((m_changed & CHANGED_SYSDESCR) == CHANGED_SYSDESCR) {
            sqlText.append(comma).append("nodeSysDescription = ?");
            comma = ',';
        }

        if ((m_changed & CHANGED_SYSLOC) == CHANGED_SYSLOC) {
            sqlText.append(comma).append("nodeSysLocation = ?");
            comma = ',';
        }

        if ((m_changed & CHANGED_SYSCONTACT) == CHANGED_SYSCONTACT) {
            sqlText.append(comma).append("nodeSysContact = ?");
            comma = ',';
        }

        if ((m_changed & CHANGED_LABEL) == CHANGED_LABEL) {
            sqlText.append(comma).append("nodeLabel = ?");
            comma = ',';
        }

        if ((m_changed & CHANGED_LABEL_SOURCE) == CHANGED_LABEL_SOURCE) {
            sqlText.append(comma).append("nodeLabelSource = ?");
            comma = ',';
        }

        if ((m_changed & CHANGED_NETBIOS_NAME) == CHANGED_NETBIOS_NAME) {
            sqlText.append(comma).append("nodeNetBIOSName = ?");
            comma = ',';
        }

        if ((m_changed & CHANGED_DOMAIN_NAME) == CHANGED_DOMAIN_NAME) {
            sqlText.append(comma).append("nodeDomainName = ?");
            comma = ',';
        }

        if ((m_changed & CHANGED_OS) == CHANGED_OS) {
            sqlText.append(comma).append("operatingSystem = ?");
            comma = ',';
        }

        if ((m_changed & CHANGED_POLLTIME) == CHANGED_POLLTIME) {
            sqlText.append(comma).append("lastCapsdPoll = ?");
            comma = ',';
        }

        sqlText.append(" WHERE nodeID = ? AND dpName = ?");

        log.debug("DbNodeEntry.update: SQL update statment = " + sqlText.toString());

        // create the Prepared statment and then
        // start setting the result values
        //
        PreparedStatement stmt = null;
        try {
            stmt = c.prepareStatement(sqlText.toString());
            sqlText = null;

            int ndx = 1;
            if ((m_changed & CHANGED_PARENT_ID) == CHANGED_PARENT_ID)
                if (m_parentId == -1)
                    stmt.setNull(ndx++, Types.INTEGER);
                else
                    stmt.setInt(ndx++, m_parentId);

            if ((m_changed & CHANGED_TYPE) == CHANGED_TYPE)
                stmt.setString(ndx++, new String(new char[] { m_type }));

            if ((m_changed & CHANGED_CREATE_TIME) == CHANGED_CREATE_TIME) {
                if (m_createTime == null) {
                    stmt.setNull(ndx++, Types.TIMESTAMP);
                } else {
                    stmt.setTimestamp(ndx++, m_createTime);
                }
            }

            if ((m_changed & CHANGED_SYSOID) == CHANGED_SYSOID) {
                if (m_sysoid == null)
                    stmt.setNull(ndx++, Types.VARCHAR);
                else
                    stmt.setString(ndx++, m_sysoid);
            }

            if ((m_changed & CHANGED_SYSNAME) == CHANGED_SYSNAME) {
                if (m_sysname == null)
                    stmt.setNull(ndx++, Types.VARCHAR);
                else
                    stmt.setString(ndx++, m_sysname);
            }

            if ((m_changed & CHANGED_SYSDESCR) == CHANGED_SYSDESCR) {
                if (m_sysdescr == null)
                    stmt.setNull(ndx++, Types.VARCHAR);
                else
                    stmt.setString(ndx++, m_sysdescr);
            }

            if ((m_changed & CHANGED_SYSLOC) == CHANGED_SYSLOC) {
                if (m_syslocation == null)
                    stmt.setNull(ndx++, Types.VARCHAR);
                else
                    stmt.setString(ndx++, m_syslocation);
            }

            if ((m_changed & CHANGED_SYSCONTACT) == CHANGED_SYSCONTACT) {
                if (m_syscontact == null)
                    stmt.setNull(ndx++, Types.VARCHAR);
                else
                    stmt.setString(ndx++, m_syscontact);
            }

            if ((m_changed & CHANGED_LABEL) == CHANGED_LABEL) {
                if (m_label == null)
                    stmt.setNull(ndx++, Types.VARCHAR);
                else
                    stmt.setString(ndx++, m_label);
            }

            if ((m_changed & CHANGED_LABEL_SOURCE) == CHANGED_LABEL_SOURCE) {
                stmt.setString(ndx++, new String(new char[] { m_labelSource }));
            }

            if ((m_changed & CHANGED_NETBIOS_NAME) == CHANGED_NETBIOS_NAME) {
                if (m_nbName == null)
                    stmt.setNull(ndx++, Types.VARCHAR);
                else
                    stmt.setString(ndx++, m_nbName);
            }

            if ((m_changed & CHANGED_DOMAIN_NAME) == CHANGED_DOMAIN_NAME) {
                if (m_nbDomainName == null)
                    stmt.setNull(ndx++, Types.VARCHAR);
                else
                    stmt.setString(ndx++, m_nbDomainName);
            }

            if ((m_changed & CHANGED_OS) == CHANGED_OS) {
                if (m_os == null)
                    stmt.setNull(ndx++, Types.VARCHAR);
                else
                    stmt.setString(ndx++, m_os);
            }

            if ((m_changed & CHANGED_POLLTIME) == CHANGED_POLLTIME) {
                if (m_lastPoll != null) {
                    stmt.setTimestamp(ndx++, m_lastPoll);
                } else
                    stmt.setNull(ndx++, Types.TIMESTAMP);
            }

            stmt.setInt(ndx++, m_nodeId);
            stmt.setString(ndx++, m_dpName);

            // Run the insert
            //
            int rc = stmt.executeUpdate();
            log.debug("DbNodeEntry.update: update result = " + rc);

            // clear the mask and mark as backed
            // by the database
            //
            m_changed = 0;
        } finally {
            if (stmt != null) stmt.close();
        }
    }

