	/**
	 * <P>Test to see if the passed host-port pair is the 
	 * endpoint for an IMAP server. If there is an IMAP server
	 * at that destination then a value of true is returned
	 * from the method. Otherwise a false value is returned 
	 * to the caller.</P>
	 *
	 * @param host	The remote host to connect to.
	 * @param port 	The remote port on the host.
	 *
	 * @return True if server supports IMAP on the specified 
	 *	port, false otherwise
	 */
	private boolean isServer(InetAddress host, int port, int retries, int timeout)
	{
		Category log = ThreadCategory.getInstance(getClass());

		boolean isAServer = false;
		for (int attempts=0; attempts <= retries && !isAServer; attempts++)
		{
			Socket  portal    = null;
			try
			{
				//
				// create a connected socket
				//
				portal = new Socket(host, port);
				portal.setSoTimeout(timeout); // blocking time!

				BufferedReader lineRdr = new BufferedReader(new InputStreamReader(portal.getInputStream()));
			
				//
				// Check the banner line for a valid return.
				//
				String banner = lineRdr.readLine();
				if(banner != null && banner.startsWith(IMAP_START_RESPONSE_PREFIX))
				{
					//
					// Send the LOGOUT
					//
					portal.getOutputStream().write(IMAP_LOGOUT_REQUEST.getBytes());
								
					//
					// get the returned string, tokenize, and 
					// verify the correct output.
					//
					String response = lineRdr.readLine();
					if(response != null && response.startsWith(IMAP_BYE_RESPONSE_PREFIX))
					{
						response = lineRdr.readLine();
						if(response != null && response.startsWith(IMAP_LOGOUT_RESPONSE_PREFIX))
						{
							isAServer = true;
						}
					}
				}
			}
			catch(ConnectException cE)
			{
				// Connection refused!!  No need to perform retries.
				//
				cE.fillInStackTrace();
				log.debug("ImapPlugin: host " + host.getHostAddress() + " refused connection", cE);
				isAServer = false;
				break;
			}
			catch(NoRouteToHostException e)
			{
				// No Route to host!!! Skip retries.
				//
				e.fillInStackTrace();
				log.info("ImapPlugin: unable to connect to remote imap server, no route to host " + host.getAddress(), e);
				isAServer = false;
				throw new UndeclaredThrowableException(e);
			}
			catch(InterruptedIOException e)
			{
				// this is expected
				isAServer = false;
			}
			catch(IOException e)
			{
				log.info("ImapPlugin: unexpected I/O exception caught during imap test to host " + host.getHostAddress(), e);
				isAServer = false;
			}
			catch(Throwable t)
			{
				log.warn("ImapPlugin: undeclared throwable exception caught testing host " + host.getHostAddress(), t);
				isAServer = false;
			}
			finally
			{
				try
				{
					if(portal != null)
						portal.close();
				}
				catch(IOException e) { }
			}
		}

		//
		// return the success/failure of this
		// attempt to contact an ftp server.
		//
		return isAServer;
	}

