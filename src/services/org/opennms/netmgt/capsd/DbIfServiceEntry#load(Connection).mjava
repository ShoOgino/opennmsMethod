	/**
	 * Load the current interface from the database. If the interface
	 * was modified, the modifications are lost. The nodeid
	 * and ip address must be set prior to this call.
	 *
	 * @param c	The connection used to load the data.
	 *
	 * @throws java.sql.SQLException Thrown if an error occurs
	 * 	with the connection
	 */
	private boolean load(Connection c)
		throws SQLException
	{
		if(!m_fromDb)
			throw new IllegalStateException("The record does not exists in the database");

		Category log = ThreadCategory.getInstance(getClass());

		// create the Prepared statment and then
		// start setting the result values
		//
		PreparedStatement stmt = c.prepareStatement(SQL_LOAD_REC);
		stmt.setInt(1, m_nodeId);
		stmt.setString(2, m_ipAddr.getHostAddress());
		stmt.setInt(3, m_serviceId);

		// Run the insert
		//
		ResultSet rset = stmt.executeQuery();
		if(!rset.next())
		{
			rset.close();
			stmt.close();
			return false;
		}

		// extract the values.
		//
		int ndx = 1;

		// get the ifIndex
		//
		m_ifIndex = rset.getInt(ndx++);
		if(rset.wasNull())
			m_ifIndex = -1;

		// get the last good time
		//
		m_lastGood = rset.getTimestamp(ndx++);

		// get the last fail time
		//
		m_lastFail = rset.getTimestamp(ndx++);

		// get the qualifier
		//
		m_qualifier = rset.getString(ndx++);
		if(rset.wasNull())
			m_qualifier = null;

		// get the status
		//
		String str = rset.getString(ndx++);
		if(str != null && !rset.wasNull())
			m_status = str.charAt(0);
		else
			m_status = STATUS_UNKNOWN;

		// get the source
		//
		str = rset.getString(ndx++);
		if(str != null && !rset.wasNull())
			m_source = str.charAt(0);
		else
			m_source = SOURCE_UNKNOWN;

		// get the notify
		//
		str = rset.getString(ndx++);
		if(str != null && !rset.wasNull())
			m_notify = str.charAt(0);
		else
			m_notify = NOTIFY_UNKNOWN;

		rset.close();
		stmt.close();

		// clear the mask and mark as backed
		// by the database
		//
		m_changed = 0;
		return true;
	}

