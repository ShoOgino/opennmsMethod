	/**
	 * This method is responsible for reparenting an interface's database
	 * table entries under its new node identifier.  The following tables
	 * are updated:
	 *
	 * 	ipInterface
	 *  	snmpInterface
	 * 	ifServices
	 *
	 * @param dbc		Database connection
	 * @param ifAddr	Interface to be reparented.
	 * @param newNodeId	Interface's new node identifier
	 * @param oldNodeId	Interfaces' old node identifier
	 * 
	 * @throws SQLException if a database error occurs during reparenting. 
	 */
	private void reparentInterface(Connection  dbc,
				InetAddress 	ifAddr,
				int             ifIndex,
				int 		newNodeId,
				int		oldNodeId)
		throws SQLException
	{
		Category log = ThreadCategory.getInstance(getClass());

                String ipaddr = ifAddr.getHostAddress();
		
		// Reparent the interface
		//
		PreparedStatement ifLookupStmt = dbc.prepareStatement(SQL_DB_REPARENT_IP_INTERFACE_LOOKUP);
		PreparedStatement ifDeleteStmt = dbc.prepareStatement(SQL_DB_REPARENT_IP_INTERFACE_DELETE);
		PreparedStatement ipInterfaceStmt = dbc.prepareStatement(SQL_DB_REPARENT_IP_INTERFACE);
		PreparedStatement snmpIfLookupStmt = dbc.prepareStatement(SQL_DB_REPARENT_SNMP_IF_LOOKUP);
		PreparedStatement snmpIfDeleteStmt = dbc.prepareStatement(SQL_DB_REPARENT_SNMP_IF_DELETE);
		PreparedStatement snmpInterfaceStmt = dbc.prepareStatement(SQL_DB_REPARENT_SNMP_INTERFACE);
		PreparedStatement ifServicesLookupStmt = dbc.prepareStatement(SQL_DB_REPARENT_IF_SERVICES_LOOKUP);
		PreparedStatement ifServicesDeleteStmt = dbc.prepareStatement(SQL_DB_REPARENT_IF_SERVICES_DELETE);
		PreparedStatement ifServicesStmt = dbc.prepareStatement(SQL_DB_REPARENT_IF_SERVICES);
		
		try
		{
			log.debug("reparentInterfaces: reparenting address/ifIndex/nodeID: " 
                                + ipaddr + "/" + ifIndex + "/" + newNodeId);
			
			// Look for matching nodeid/ifindex for the entry to be reparented
			boolean ifAlreadyExists = false;
			ifLookupStmt.setInt(1, newNodeId);
			ifLookupStmt.setString(2, ipaddr);
			ResultSet rs = ifLookupStmt.executeQuery();
			if (rs.next())
			{
				// Looks like we got a match so just delete
				// the entry from the old node
				log.debug("interface with ifindex " + ifIndex + " already exists under new node " 
                                        + newNodeId + " in ipinterface table, deleting from under old node " + oldNodeId);
				ifAlreadyExists = true;
				
				ifDeleteStmt.setInt(1, oldNodeId);
				ifDeleteStmt.setString(2, ipaddr);
				
				ifDeleteStmt.executeUpdate();
			}
			
			if (ifAlreadyExists == false)
			{
				// Update the 'ipinterface' table entry so that this
				// interface's nodeID is set to the value of reparentNodeID
				//
				log.debug("interface with ifindex " + ifIndex 
                                        + " does not yet exist under new node " + newNodeId + " in ipinterface table, reparenting.");
				
			        ipInterfaceStmt.setInt(1, newNodeId);
			        ipInterfaceStmt.setInt(2, oldNodeId);
			        ipInterfaceStmt.setString(3, ipaddr);
					
			        // execute and log
			        ipInterfaceStmt.executeUpdate();
			}
                        
			// SNMP interface
			//
			// NOTE:  Only reparent SNMP interfaces if we have valid ifIndex
			if (ifIndex < 1)
			{
				log.debug("reparentInterfaces: don't have a valid ifIndex, skipping snmpInterface table reparenting.");
			}
			else
			{
				// NOTE:  Now that the snmpInterface table is uniquely keyed
				//        by nodeId and ifIndex we must only reparent the
				//        old entry if there isn't already an entry with 
				//        the same nodeid/ifindex pairing.  If it can't
				//        be reparented it will be deleted.
				
				// Look for matching nodeid/ifindex for the entry to be reparented
				boolean alreadyExists = false;
				snmpIfLookupStmt.setInt(1, newNodeId);
				snmpIfLookupStmt.setString(2, ipaddr);
				snmpIfLookupStmt.setInt(3, ifIndex);
				rs = snmpIfLookupStmt.executeQuery();
				if (rs.next())
				{
					// Looks like we got a match so just delete
					// the entry from the old node
					log.debug("interface with ifindex " + ifIndex + " already exists under new node " 
                                                + newNodeId + " in snmpinterface table, deleting from under old node " + oldNodeId);
					alreadyExists = true;
					
					snmpIfDeleteStmt.setInt(1, oldNodeId);
					snmpIfDeleteStmt.setString(2, ipaddr);
					snmpIfDeleteStmt.setInt(3, ifIndex);
					
					snmpIfDeleteStmt.executeUpdate();
				}
				
				if (alreadyExists == false)
				{
					// Update the 'snmpinterface' table entry so that this
					// interface's nodeID is set to the value of reparentNodeID
					//
					log.debug("interface with ifindex " + ifIndex + " does not yet exist under new node " 
                                                + newNodeId + " in snmpinterface table, reparenting.");
					
					snmpInterfaceStmt.setInt(1, newNodeId);
					snmpInterfaceStmt.setInt(2, oldNodeId);
					snmpInterfaceStmt.setString(3, ipaddr);
					snmpInterfaceStmt.setInt(4, ifIndex);
							
					// execute and log
					snmpInterfaceStmt.executeUpdate();
				}
			}
			
			// Look for matching nodeid/ifindex for the entry to be reparented
			boolean ifsAlreadyExists = false;
			ifServicesLookupStmt.setInt(1, newNodeId);
			ifServicesLookupStmt.setString(2, ipaddr);
			ifServicesLookupStmt.setInt(3, ifIndex);
			rs = ifServicesLookupStmt.executeQuery();
			if (rs.next())
			{
				// Looks like we got a match so just delete
				// the entry from the old node
				log.debug("interface with ifindex " + ifIndex + " already exists under new node " 
                                        + newNodeId + " in ifservices table, deleting from under old node " + oldNodeId);
				ifsAlreadyExists = true;
				
				ifServicesDeleteStmt.setInt(1, oldNodeId);
				ifServicesDeleteStmt.setString(2, ipaddr);
				
				ifServicesDeleteStmt.executeUpdate();
			}
			
			if (ifsAlreadyExists == false)
			{
				// Update the 'snmpinterface' table entry so that this
				// interface's nodeID is set to the value of reparentNodeID
				//
				log.debug("interface with ifindex " + ifIndex + " does not yet exist under new node " 
                                        + newNodeId + " in ifservices table, reparenting.");
				
			        // Update the 'nodeID' field of all 'ifservices' table entries for 
		        	// the reparented interfaces.
			        ifServicesStmt.setInt(1, newNodeId);
		        	ifServicesStmt.setInt(2, oldNodeId);
		        	ifServicesStmt.setString(3, ipaddr);
					
			        // execute and log
			        ifServicesStmt.executeUpdate();
			}

			log.debug("reparentInterface: reparented " + ipaddr + 
						" : ifIndex: " + ifIndex +
						" : oldNodeID: " + oldNodeId + 
						" newNodeID: " + newNodeId);
		}	
		catch(SQLException sqlE)
		{
			log.error("SQLException while reparenting addr/ifindex/nodeid " + ipaddr + "/" + ifIndex + "/" + oldNodeId);
			throw sqlE;
		}
		finally
		{
                        try 
                        {
			        ifLookupStmt.close();
                                ifDeleteStmt.close();
                                ipInterfaceStmt.close();
			        snmpIfLookupStmt.close();
			        snmpIfDeleteStmt.close(); 
			        snmpInterfaceStmt.close();
                                ifServicesLookupStmt.close();
                                ifServicesDeleteStmt.close();
			        ifServicesStmt.close();
                        }
                        catch (SQLException e) {}
		}
	}

