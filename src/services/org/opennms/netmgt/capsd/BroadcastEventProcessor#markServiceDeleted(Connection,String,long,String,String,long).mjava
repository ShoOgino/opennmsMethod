    /**
     * Marks the service deleted in the database and returns a serviceDeleted event for the
     * service, if and only if the service existed
     * 
     * @param dbConn
     *            the database connection
     * @param source
     *            the source for any events sent
     * @param nodeId
     *            the node the service resides on
     * @param ipAddr
     *            the interface the service resides on
     * @param service
     *            the name of the service
     * @param txNo
     *            a transaction number to associate with this deletion
     * @return a List containing a service deleted event.
     * @throws SQLException
     *             if an error occurs communicating with the database
     */
    private List markServiceDeleted(Connection dbConn, String source, long nodeId, String ipAddr, String service, long txNo) throws SQLException {
        Category log = ThreadCategory.getInstance(getClass());
        PreparedStatement stmt = null;

        final String DB_MARK_SERVICE_DELETED = "UPDATE ifservices SET status='D' " + "WHERE ifservices.serviceID = service.serviceID "
                + "AND ifservices.nodeID=? AND ifservices.ipAddr=? AND service.serviceName=?";

        stmt = dbConn.prepareStatement(DB_MARK_SERVICE_DELETED);
        stmt.setLong(1, nodeId);
        stmt.setString(2, ipAddr);
        stmt.setString(3, service);
        int count = stmt.executeUpdate();

        if (log.isDebugEnabled()) log.debug("markServiceDeleted: marked service deleted: " + nodeId + "/" + ipAddr + "/" + service);

        stmt.close();

        if (count > 0)
            return Collections.singletonList(EventUtils.createServiceDeletedEvent(source, nodeId, ipAddr, service, txNo));
        else
            return Collections.EMPTY_LIST;
    }

