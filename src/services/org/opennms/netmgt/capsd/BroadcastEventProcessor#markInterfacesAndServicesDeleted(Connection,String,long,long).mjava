    /**
     * Marks all the interfaces and services for a given node deleted and
     * constructs events for each. The order of events is significant
     * representing the hierarchy, service events preceed the event for the
     * interface the service is on
     * 
     * @param dbConn
     *            the database connection
     * @param source
     *            the source for use in the constructed events
     * @param nodeId
     *            the node whose interfaces and services are to be deleted
     * @param txNo
     *            a transaction number to associate with this deletion
     * @return a List of events indicating which nodes and services have been
     *         deleted
     * 
     * @throws SQLException
     */
    private List markInterfacesAndServicesDeleted(Connection dbConn, String source, long nodeId, long txNo) throws SQLException {
        List eventsToSend = new LinkedList();

        final String DB_FIND_IFS_FOR_NODE = "SELECT ipinterface.ipaddr FROM ipinterface WHERE ipinterface.nodeid = ? and ipinterface.ismanaged != 'D'";

        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
            stmt = dbConn.prepareStatement(DB_FIND_IFS_FOR_NODE);
            stmt.setLong(1, nodeId);
            rs = stmt.executeQuery();

            Set ipAddrs = new HashSet();
            while (rs.next()) {
                String ipAddr = rs.getString(1);
                log().debug("found interface " + ipAddr + " for node " + nodeId);
                ipAddrs.add(ipAddr);
            }

            for (Iterator it = ipAddrs.iterator(); it.hasNext();) {
                String ipAddr = (String) it.next();
                log().debug("deleting interface " + ipAddr + " for node " + nodeId);
                eventsToSend.addAll(markAllServicesForInterfaceDeleted(dbConn, source, nodeId, ipAddr, txNo));
                eventsToSend.addAll(markInterfaceDeleted(dbConn, source, nodeId, ipAddr, txNo));
            }

            return eventsToSend;
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (stmt != null) stmt.close();
            }
        }        
    }

