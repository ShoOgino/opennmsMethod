	/**
	 * This method is responsible for creating and sending a 'duplicateIPAddress' 
	 * event to Eventd
	 * 
	 * @param nodeId	Interface's parent node identifier.
	 * @param ipAddr	Interface's IP address
	 */
	private void createAndSendDuplicateIpaddressEvent(int nodeId, String ipAddr)
	{
		Category log = ThreadCategory.getInstance(getClass());
				
		// create the event to be sent
		Event newEvent = new Event();
		
		newEvent.setUei(EventConstants.DUPLICATE_IPINTERFACE_EVENT_UEI);
		newEvent.setSource("OpenNMS.Capsd");
		newEvent.setNodeid(nodeId);
		newEvent.setHost(Capsd.getLocalHostAddress());
		newEvent.setInterface(ipAddr);
		newEvent.setTime(EventConstants.formatToString(new java.util.Date()));
		
		// Add appropriate parms
		Parms eventParms = new Parms();
		Parm eventParm = null;
		Value parmValue = null;
		
		// Add IP host name
		eventParm = new Parm();
		eventParm.setParmName(EventConstants.PARM_IP_HOSTNAME);
		parmValue = new Value();
                String hostName = null;
                try
                {
                        hostName = InetAddress.getByName(ipAddr).getHostName();
                }
                catch ( UnknownHostException ue)
                {
                        hostName = "";
                }
		parmValue.setContent(hostName);
		eventParm.setValue(parmValue);
		eventParms.addParm(eventParm);
		
		// Add discovery method 
		eventParm = new Parm();
		eventParm.setParmName(EventConstants.PARM_METHOD);
		parmValue = new Value();
		parmValue.setContent("icmp");
		eventParm.setValue(parmValue);
		eventParms.addParm(eventParm);
		
		// Add Parms to the event
		newEvent.setParms(eventParms);
                
		// Send event to Eventd
		try
		{
			EventIpcManagerFactory.getInstance().getManager().sendNow(newEvent);

		        if (log.isDebugEnabled())
				log.debug("createAndSendDuplicateIpaddressEvent: successfully sent duplicateIPAddress event for interface: " + ipAddr);
	        }
		catch(Throwable t)
		{
			log.warn("run: unexpected throwable exception caught during send to middleware", t);
		}
	}

