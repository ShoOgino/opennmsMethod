    /**
     * Inserts the new interface into the ipInterface table of the OpenNMS
     * databasee.
     * 
     * @param c
     *            The connection to the database.
     * 
     * @throws java.sql.SQLException
     *             Thrown if an error occurs with the connection
     */
    private void insert(Connection c) throws SQLException {
        if (m_fromDb)
            throw new IllegalStateException("The record already exists in the database");

        Category log = ThreadCategory.getInstance(getClass());

        // first extract the next node identifier
        //
        StringBuffer names = new StringBuffer("INSERT INTO snmpInterface (nodeID,snmpIfIndex");
        StringBuffer values = new StringBuffer("?,?");

        if ((m_changed & CHANGED_IFADDRESS) == CHANGED_IFADDRESS) {
            values.append(",?");
            names.append(",ipAddr");
        }

        if ((m_changed & CHANGED_NETMASK) == CHANGED_NETMASK) {
            values.append(",?");
            names.append(",snmpIpAdEntNetMask");
        }

        if ((m_changed & CHANGED_PHYSADDR) == CHANGED_PHYSADDR) {
            values.append(",?");
            names.append(",snmpPhysAddr");
        }

        if ((m_changed & CHANGED_DESCRIPTION) == CHANGED_DESCRIPTION) {
            values.append(",?");
            names.append(",snmpIfDescr");
        }

        if ((m_changed & CHANGED_IFTYPE) == CHANGED_IFTYPE) {
            values.append(",?");
            names.append(",snmpIfType");
        }

        if ((m_changed & CHANGED_IFNAME) == CHANGED_IFNAME) {
            values.append(",?");
            names.append(",snmpIfName");
        }

        if ((m_changed & CHANGED_IFSPEED) == CHANGED_IFSPEED) {
            values.append(",?");
            names.append(",snmpIfSpeed");
        }

        if ((m_changed & CHANGED_IFADMINSTATUS) == CHANGED_IFADMINSTATUS) {
            values.append(",?");
            names.append(",snmpIfAdminStatus");
        }

        if ((m_changed & CHANGED_IFOPERSTATUS) == CHANGED_IFOPERSTATUS) {
            values.append(",?");
            names.append(",snmpIfOperStatus");
        }

        names.append(") VALUES (").append(values).append(')');
        log.debug("DbSnmpInterfaceEntry.insert: SQL insert statment = " + names.toString());

        // create the Prepared statment and then
        // start setting the result values
        //
        PreparedStatement stmt = c.prepareStatement(names.toString());
        names = null;

        int ndx = 1;
        stmt.setInt(ndx++, m_nodeId);
        stmt.setInt(ndx++, m_ifIndex);

        if ((m_changed & CHANGED_IFADDRESS) == CHANGED_IFADDRESS)
            stmt.setString(ndx++, m_ipAddr.getHostAddress());

        if ((m_changed & CHANGED_NETMASK) == CHANGED_NETMASK)
            stmt.setString(ndx++, m_netmask.getHostAddress());

        if ((m_changed & CHANGED_PHYSADDR) == CHANGED_PHYSADDR)
            stmt.setString(ndx++, m_physAddr);

        if ((m_changed & CHANGED_DESCRIPTION) == CHANGED_DESCRIPTION)
            stmt.setString(ndx++, m_ifDescription);

        if ((m_changed & CHANGED_IFTYPE) == CHANGED_IFTYPE)
            stmt.setInt(ndx++, m_ifType);

        if ((m_changed & CHANGED_IFNAME) == CHANGED_IFNAME)
            stmt.setString(ndx++, m_ifName);

        if ((m_changed & CHANGED_IFSPEED) == CHANGED_IFSPEED)
            stmt.setInt(ndx++, m_ifSpeed);

        if ((m_changed & CHANGED_IFADMINSTATUS) == CHANGED_IFADMINSTATUS)
            stmt.setInt(ndx++, m_ifAdminStatus);

        if ((m_changed & CHANGED_IFOPERSTATUS) == CHANGED_IFOPERSTATUS)
            stmt.setInt(ndx++, m_ifOperStatus);

        // Run the insert
        //
        int rc = stmt.executeUpdate();
        log.debug("DbSnmpInterfaceEntry.insert: SQL update result = " + rc);
        stmt.close();

        // clear the mask and mark as backed
        // by the database
        //
        m_fromDb = true;
        m_changed = 0;
    }

