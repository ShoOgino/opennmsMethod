	/**
	 * Start the Capsd threads.
	 */
	public void init()
	{
		ThreadCategory.setPrefix(LOG4J_CATEGORY);
		Category log = ThreadCategory.getInstance();

		// Initialize the Capsd configuration factory.
		//
		try
		{
			CapsdConfigFactory.reload();
		}
		catch(MarshalException ex)
		{
			log.error("Failed to load Capsd configuration", ex);
			throw new UndeclaredThrowableException(ex);
		}
		catch(ValidationException ex)
		{
			log.error("Failed to load Capsd configuration", ex);
			throw new UndeclaredThrowableException(ex);
		}
		catch(IOException ex)
		{
			log.error("Failed to load Capsd configuration", ex);
			throw new UndeclaredThrowableException(ex);
		}
		
		// Initialize the poller configuration factory.
		//
		try
		{
			PollerConfigFactory.reload();
		}
		catch(MarshalException ex)
		{
			log.error("Failed to load poller configuration", ex);
			throw new UndeclaredThrowableException(ex);
		}
		catch(ValidationException ex)
		{
			log.error("Failed to load poller configuration", ex);
			throw new UndeclaredThrowableException(ex);
		}
		catch(IOException ex)
		{
			log.error("Failed to load poller configuration", ex);
			throw new UndeclaredThrowableException(ex);
		}
		
		// Initialize the collectd configuration factory.
		//
		try
		{
			CollectdConfigFactory.reload();
		}
		catch(MarshalException ex)
		{
			log.error("Failed to load collectd configuration", ex);
			throw new UndeclaredThrowableException(ex);
		}
		catch(ValidationException ex)
		{
			log.error("Failed to load collectd configuration", ex);
			throw new UndeclaredThrowableException(ex);
		}
		catch(IOException ex)
		{
			log.error("Failed to load collectd configuration", ex);
			throw new UndeclaredThrowableException(ex);
		}
		
		// Initialize the Database configuration factory
		//
		try
		{
			DatabaseConnectionFactory.reload();
		}
		catch (IOException ie)
		{
			log.fatal("IOException loading database config", ie);
			throw new UndeclaredThrowableException(ie);
		}
		catch (MarshalException me)
		{
			log.fatal("Marshall Exception loading database config", me);
			throw new UndeclaredThrowableException(me);
		}
		catch (ValidationException ve)
		{
			log.fatal("Validation Exception loading database config", ve);
			throw new UndeclaredThrowableException(ve);
		}
		catch (ClassNotFoundException ce)
		{
			log.fatal("Class lookup failure loading database config", ce);
			throw new UndeclaredThrowableException(ce);
		}
		
		// Initialize the SNMP Peer Factory
		//
		try
		{
			SnmpPeerFactory.reload();
		}
		catch(MarshalException ex)
		{
			log.error("Failed to load SNMP configuration", ex);
			throw new UndeclaredThrowableException(ex);
		}
		catch(ValidationException ex)
		{
			log.error("Failed to load SNMP configuration", ex);
			throw new UndeclaredThrowableException(ex);
		}
		catch(IOException ex)
		{
			log.error("Failed to load SNMP configuration", ex);
			throw new UndeclaredThrowableException(ex);
		}
		
		// Get connection to the database and use it to sync the 
		// content of the database with the latest configuration
		// information.
		// 
		// First any new services are added to the services table
		// with a call to syncServices().
		//
		// Secondly the management state of interfaces and services
		// in the database is updated based on the latest configuration
		// information with a call to syncManagementState()
		//
		// Lastly the primary snmp interface state ('isSnmpPrimary')
		// of all interfaces which support SNMP is updated based on 
		// the latest configuration information via a call to syncSnmpPrimaryState()
		java.sql.Connection conn = null;
		try
		{
			conn = DatabaseConnectionFactory.getInstance().getConnection();
			if (log.isDebugEnabled())
			{
				log.debug("init: Loading services into database...");
			}
			CapsdConfigFactory.getInstance().syncServices(conn);
			if (log.isDebugEnabled())
			{
				log.debug("init: Syncing management state...");
			}
			CapsdConfigFactory.getInstance().syncManagementState(conn);
			if (log.isDebugEnabled())
			{
				log.debug("init: Syncing primary SNMP interface state...");
			}
			CapsdConfigFactory.getInstance().syncSnmpPrimaryState(conn);
		}
		catch (SQLException sqlE)
		{
			log.fatal("SQL Exception while syncing database with latest configuration information.", sqlE);
			throw new UndeclaredThrowableException(sqlE);
		}
		catch (Throwable t)
		{
			log.fatal("Unknown error while syncing database with latest configuration information.", t);
			throw new UndeclaredThrowableException(t);
		}
		finally
		{
			try
			{
				if(conn != null)
				{
					conn.close();
				}
			}
			catch(Exception e) { }
		}
		
		// Create the suspect event and rescan thread pools
		//
		m_suspectRunner = new RunnableConsumerThreadPool("Capsd Suspect Pool", 
								 0.0f, 
								 0.0f, 
								 CapsdConfigFactory.getInstance().getMaxSuspectThreadPoolSize());
		
		m_rescanRunner = new RunnableConsumerThreadPool("Capsd Rescan Pool", 
								0.0f, // Only stop thread if nothing in queue
								0.0f, // Always start thread if queue is not 
								      // empty and max threads has not been reached.
								CapsdConfigFactory.getInstance().getMaxRescanThreadPoolSize());
								
		// Create the rescan scheduler
		//
		if(log.isDebugEnabled())
		{
			log.debug("init: Creating rescan scheduler");
		}
		try
		{
			// During instantiation, the scheduler will load the
			// list of known nodes from the database
			m_scheduler = new Scheduler(m_rescanRunner.getRunQueue());
		}
		catch(SQLException sqlE)
		{
			log.error("Failed to initialize the rescan scheduler.", sqlE);
			throw new UndeclaredThrowableException(sqlE);
		}
		catch(Throwable t)
		{
			log.error("Failed to initialize the rescan scheduler.", t);
			throw new UndeclaredThrowableException(t);
		}
		
		// Create an event receiver. 
		//
		try
		{
			if(log.isDebugEnabled())
			{
				log.debug("init: Creating event broadcast event receiver");
			}

			m_receiver = new BroadcastEventProcessor(m_suspectRunner.getRunQueue(), m_scheduler);
		}
		catch(Throwable t)
		{
			log.error("Failed to initialized the broadcast event receiver", t);
			throw new UndeclaredThrowableException(t);
		}
	}

