	/**
	 * This method is responsible for creating all the necessary interface-level
	 * events for the node and sending them to Eventd.
	 * 
	 * @param node			DbNodeEntry object for the parent node.
	 * @param useExistingNode  	TRUE if existing node was used, FALSE if new
	 * 				node was created.
	 * @param ifaddr		Target interface address
	 * @param collector		Interface collector containing SNMP and SMB info.	
	 */
	private void sendInterfaceEvents(DbNodeEntry node,
					boolean	    useExistingNode,
					InetAddress ifaddr,
					IfCollector collector)
	{
		Category log = ThreadCategory.getInstance(getClass());
		
		// Go ahead and send events for the target interface
		//
		
		// nodeGainedInterface
		//
		if (log.isDebugEnabled())
			log.debug("sendInterfaceEvents: sending node gained interface event for " + ifaddr.getHostAddress());
			
		createAndSendNodeGainedInterfaceEvent(node.getNodeId(), ifaddr);

		// nodeGainedService
		//
		log.debug("sendInterfaceEvents: processing supported services for " + ifaddr.getHostAddress());
		Iterator iproto = collector.getSupportedProtocols().iterator();
		while(iproto.hasNext())
		{
			IfCollector.SupportedProtocol p = (IfCollector.SupportedProtocol)iproto.next();
			if (log.isDebugEnabled())
				log.debug("sendInterfaceEvents: sending event for service: " + p.getProtocolName());
			createAndSendNodeGainedServiceEvent(node,
							    ifaddr,
							    p.getProtocolName(),
							    null);
		}
		
		// If the useExistingNode flag is set to TRUE we're done, none of the
		// sub-targets should have been added.
		//
		if (useExistingNode)
			return;
			
		// If SNMP info available send events for sub-targets
		//
		if(collector.hasSnmpCollection() && !collector.getSnmpCollector().failed())
		{
			IfSnmpCollector snmpc = collector.getSnmpCollector();

			Map extraTargets = collector.getAdditionalTargets();
			Iterator iter = extraTargets.keySet().iterator();
			while(iter.hasNext())
			{
				InetAddress xifaddr = (InetAddress)iter.next();

				// nodeGainedInterface
				//
				createAndSendNodeGainedInterfaceEvent(node.getNodeId(), xifaddr);
	
				// nodeGainedService
				//
				List supportedProtocols = (List)extraTargets.get(xifaddr);
				log.debug("interface " + xifaddr + " supports " + supportedProtocols.size() + " protocols.");
				if (supportedProtocols != null)
				{
					iproto = supportedProtocols.iterator();
					while(iproto.hasNext())
					{
						IfCollector.SupportedProtocol p = (IfCollector.SupportedProtocol)iproto.next();	
						createAndSendNodeGainedServiceEvent(node,
										xifaddr,
										p.getProtocolName(),
										null);
					}
				}
			}
		}
	}

