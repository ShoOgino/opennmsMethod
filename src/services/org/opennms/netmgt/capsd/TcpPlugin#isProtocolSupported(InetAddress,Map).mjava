	/**
	 * Returns true if the protocol defined by this
	 * plugin is supported. If the protocol is not 
	 * supported then a false value is returned to the 
	 * caller. The qualifier map passed to the method is
	 * used by the plugin to return additional information
	 * by key-name. These key-value pairs can be added to 
	 * service events if needed.
	 *
	 * @param address	The address to check for support.
	 * @param qualiier	The map where qualification are set
	 *			by the plugin.
	 *
	 * @return True if the protocol is supported by the address.
	 */
	public boolean isProtocolSupported(InetAddress address, Map qualifiers)
	{
		int retries = DEFAULT_RETRY;
		int timeout = DEFAULT_TIMEOUT;
		int port    = -1;

		String banner = null;
		String match  = null;

		if(qualifiers != null)
		{
			retries = getKeyedInteger(qualifiers, "retry", DEFAULT_RETRY);
			timeout = getKeyedInteger(qualifiers, "timeout", DEFAULT_TIMEOUT);
			port    = getKeyedInteger(qualifiers, "port", -1);
			banner  = getKeyedString(qualifiers, "banner", null);
			match   = getKeyedString(qualifiers, "match", null);
		}

		// verify the port
		//
		if(port == -1)
			throw new IllegalArgumentException("The port must be specified when doing TCP discovery");

		try
		{
			StringBuffer bannerResult = null;
			RE regex = null;
			if(match == null && (banner == null || banner.equals("*")))
			{
				regex = null;
			}
			else if(match != null)
			{
				regex = new RE(match);
				bannerResult = new StringBuffer();
			}
			else if(banner != null)
			{
				regex = new RE(banner);
				bannerResult = new StringBuffer();
			}

			boolean result = isServer(address, port, retries, timeout, regex, bannerResult);
			if(result && qualifiers != null)
			{
				if(bannerResult != null && bannerResult.length() > 0)
					qualifiers.put("banner", bannerResult.toString());
			}

			return result;
		}
		catch(RESyntaxException e)
		{
			throw new java.lang.reflect.UndeclaredThrowableException(e);
		}
	}

