    /**
     * Process the event, add or remove a specified interface/service pair into the database.
     * this event will cause an changeService event with the specified action. An 'action'
     * parameter wraped in the event will tell which action to take to the service on the
     * specified interface. The ipaddress of the interface, the service name must be included
     * in the event.
     * 
     * @param event
     *            The event to process.
     * @throws InsufficientInformationException
     *             if there is missing information in the event
     * @throws FailedOperationException
     *             if the operation fails for some reason
     */
    private void handleUpdateService(Event event) throws InsufficientInformationException, FailedOperationException {
        //Category log = ThreadCategory.getInstance(getClass());

        EventUtils.checkInterface(event);
        EventUtils.checkService(event);
        EventUtils.requireParm(event, EventConstants.PARM_ACTION);
        if (isXmlRpcEnabled()) {
            EventUtils.requireParm(event, EventConstants.PARM_TRANSACTION_NO);
        }

        long txNo = EventUtils.getLongParm(event, EventConstants.PARM_TRANSACTION_NO, -1L);
        String action = EventUtils.getParm(event, EventConstants.PARM_ACTION);

        Category log = ThreadCategory.getInstance(getClass());
        if (log.isDebugEnabled())
                log.debug("handleUpdateService:  processing updateService event for : " + event.getService() + " on : " + event.getInterface());

        List eventsToSend = null;
        Connection dbConn = null;
        try {
            dbConn = DatabaseConnectionFactory.getInstance().getConnection();
            dbConn.setAutoCommit(false);

            eventsToSend = doUpdateService(dbConn, event.getInterface(), event.getService(), action, txNo);

        } catch (SQLException sqlE) {
            log.error("SQLException during handleUpdateService on database.", sqlE);
            throw new FailedOperationException(sqlE.getMessage());
        } finally {

            if (dbConn != null) try {
                if (eventsToSend != null) {
                    dbConn.commit();
                    for (Iterator it = eventsToSend.iterator(); it.hasNext();) {
                        EventUtils.sendEvent((Event) it.next(), event.getUei(), txNo, isXmlRpcEnabled());
                    }
                } else {
                    dbConn.rollback();
                }
            } catch (SQLException ex) {
            } finally {
                if (dbConn != null) try { dbConn.close(); } catch (SQLException ex) {}
            }
        }

    }

