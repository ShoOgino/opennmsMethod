        /**
         * This method is responsible for generating a deleteNode event and sending
         * it to eventd..
         *
         * @param hostName      the Host server name. 
         * @param nodeLabel     the node label of the deleted node.
         * @param txNo          the external transaction No of the event.
         * @param callerUei     the uei of the caller event.
         */
        private void createAndSendDeleteNodeEvent(String hostName, String nodeLabel, long txNo, String callerUei)
        {
		Category log = ThreadCategory.getInstance(getClass());
		if (log.isDebugEnabled())
                        log.debug("createdAndSendDeleteNodeEvent: processing deleteInterface event... "); 
        
                Event newEvent = new Event();
                newEvent.setUei(EventConstants.DELETE_NODE_EVENT_UEI);
                newEvent.setSource("OpenNMS.Capsd");
                newEvent.setHost(hostName);
                newEvent.setTime(EventConstants.formatToString(new java.util.Date()));

                // Add appropriate parms
                Parms eventParms = new Parms();
                Parm eventParm = null;
                Value parmValue = null;

                eventParm = new Parm();
                eventParm.setParmName(EventConstants.PARM_NODE_LABEL);
                parmValue = new Value();
                parmValue.setContent(nodeLabel);
                eventParm.setValue(parmValue);
                eventParms.addParm(eventParm);

                eventParm = new Parm();
                eventParm.setParmName(EventConstants.PARM_TRANSACTION_NO);
                parmValue = new Value();
                parmValue.setContent((new Long(txNo)).toString());
                eventParm.setValue(parmValue);
                eventParms.addParm(eventParm);

                // Add Parms to the event
                newEvent.setParms(eventParms);

                // Send event to Eventd
                try
                {
                        EventIpcManagerFactory.getInstance().getManager().sendNow(newEvent);

                        if (log.isDebugEnabled())
                                log.debug("createAndSendDeleteNodeEvent: successfully sent deleteNode event for node: " 
                                        + nodeLabel);
                }
                catch(Throwable t)
                {
                        log.warn("run: unexpected throwable exception caught during send to middleware", t);
                        if (m_xmlrpc)
                        {
                                int status = EventConstants.XMLRPC_NOTIFY_FAILURE;
                                createAndSendXmlrpcNotificationEvent(txNo, callerUei, 
                                                "caught unexpected throwable exception.", status);
                        }
                }
        }                

