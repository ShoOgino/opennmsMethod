	/**
	 * This method is responsble for inserting a new entry into the ipInterface
	 * table and all its supported protocols into ifservices table for a given node.
	 * 
	 * @param node		DbNodeEntry object representing the rescaning interface's
	 *                      parent node table entry
	 * @param ifaddr	Rescaning interface
	 * @param protocols	Protocols supported by the interface.
	 * @param snmpc		SNMP collector or null if SNMP not supported.
	 * 
	 * @throws SQLException if there is a problem updating the ipInterface table.
	 */
	private void addDuplicateInterface( DbNodeEntry node,
				   InetAddress ifaddr,
                                   List protocols,
				   IfSnmpCollector snmpc)
		throws SQLException
	{
		Category log = ThreadCategory.getInstance(getClass());

		CapsdConfigFactory cFactory = CapsdConfigFactory.getInstance();
		PollerConfigFactory pollerCfgFactory = PollerConfigFactory.getInstance();

		Date now = new Date();

		// if there is no snmp information then it's a
		// simple addtion to the database
		//
		if(snmpc != null || !snmpc.failed())
		{
			if (log.isDebugEnabled())
				log.debug("RescanProcessor: add interface " + ifaddr.getHostAddress()
                                        + " for nodeId: " + node.getNodeId());
                                        
			DbIpInterfaceEntry ipIfEntry = DbIpInterfaceEntry.create(node.getNodeId(), ifaddr);
			ipIfEntry.setLastPoll(now);
			ipIfEntry.setHostname(ifaddr.getHostName());

			// The package filter evaluation requires that the ip be in the
			// database - at this point the ip is NOT in db, so insert as active
			// and update afterward
			//
			// Try to avoid re-evaluating the ip against filters for
			// each service, try to get the first package here and use
			// that for service evaluation
			//
			boolean addrUnmanaged = cFactory.isAddressUnmanaged(ifaddr);
			if(addrUnmanaged)
				ipIfEntry.setManagedState(DbIpInterfaceEntry.STATE_UNMANAGED);
			else
				ipIfEntry.setManagedState(DbIpInterfaceEntry.STATE_MANAGED);

			ipIfEntry.setPrimaryState(DbIpInterfaceEntry.SNMP_NOT_ELIGIBLE);

			ipIfEntry.store();

			// now update if necessary
			org.opennms.netmgt.config.poller.Package ipPkg = null;
			if (!addrUnmanaged)
			{
				boolean ipToBePolled = false;
				ipPkg = pollerCfgFactory.getFirstPackageMatch(ifaddr.getHostAddress());
				if (ipPkg != null)
					ipToBePolled = true;

				if (!ipToBePolled)
				{
					// update ismanaged to 'N' in ipinterface
					ipIfEntry.setManagedState(DbIpInterfaceEntry.STATE_NOT_POLLED);
					ipIfEntry.store();
				}
			}

			int ifIndex = -1;
			if((ifIndex = snmpc.getIfIndex(ifaddr)) != -1)
			{
			        // Just set primary state to secondary for now.  The primary SNMP interface
			        // won't be selected until after all interfaces have been inserted
			        // into the database. This is because the interface must already be in
			        // the database for filter rule evaluation to succeed.
				ipIfEntry.setPrimaryState(DbIpInterfaceEntry.SNMP_SECONDARY);
			
				ipIfEntry.setIfIndex(ifIndex);
				int status = snmpc.getAdminStatus(ifIndex);
				if(status != -1)
					ipIfEntry.setStatus(status);
			}
			else
			{
				// Address does not have a valid ifIndex associated with it
				// so set primary state to NOT_ELIGIBLE.
				ipIfEntry.setPrimaryState(DbIpInterfaceEntry.SNMP_NOT_ELIGIBLE);
			}

			ipIfEntry.store();
	                createNodeGainedInterfaceEvent(ipIfEntry);
                        createDuplicateIpAddressEvent(ipIfEntry);

			// Add supported protocols
			if (log.isDebugEnabled())
				log.debug("RescanProcessor: add supported protocols for interface " + ifaddr.getHostAddress()
                                        + " /nodeId: " + node.getNodeId());
			addSupportedProtocols(node, 
						ipIfEntry, 
					        protocols, 
						addrUnmanaged, 
						ifIndex, 
						ipPkg);

                }			
	}

