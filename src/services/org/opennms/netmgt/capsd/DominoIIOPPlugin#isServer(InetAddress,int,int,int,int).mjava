	/**
	 * <P>Test to see if the passed host-port pair is the 
	 * endpoint for a Domino IIOP server. If there is a IIOP server
	 * at that destination then a value of true is returned
	 * from the method. Otherwise a false value is returned 
	 * to the caller.  In order to return true the remote host
	 * must generate a banner line which contains the text from
	 * the bannerMatch argument.</P>
	 *
	 * @param host	The remote host to connect to.
	 * @param port 	The remote port on the host.
	 * @param iorPort The remote port in which to find the IOR via HTTP.
	 *
	 * @return True if a connection is established with the host and the banner line
	 *		contains the bannerMatch text.
	 */
	private boolean isServer(InetAddress host, int port, int retries, int timeout, int iorPort)
	{
		Category log = ThreadCategory.getInstance(getClass());

		boolean isAServer = false;
		for (int attempts=0; attempts <= retries && !isAServer; attempts++)
		{
			// Lets first try to the the IOR via HTTP, if we can't get that then any other process that can
			// do it the right way won't be able to connect anyway
			//
			try {
				String IOR = retrieveIORText(host.getHostAddress(), iorPort);
			} 
			catch(FileNotFoundException e)
			{
                                // This is an expected exception
                                //
                                isAServer = false;
			}
			catch (Exception e)
			{
				if(log.isDebugEnabled())
					log.debug("DominoIIOPMonitor: failed to get the corba IOR from " + host.getHostAddress());
				isAServer = false;
				break;
			}
			
                        SocketChannel sChannel = null;
			try
			{
				//
				// create a connected socket
				//
                                sChannel = SocketChannelUtil.getConnectedSocketChannel(host, port, timeout);
                                if (sChannel == null)
                                {
                                        log.debug("DominoIIOPPlugin: did not connect to host within timeout: " + timeout +" attempt: " + attempts);
                                        continue;
                                }
                                log.debug("DominoIIOPPlugin: connected to host: " + host + " on port: " + port);
	
				isAServer = true;
			}
			catch(ConnectException e)
			{
				// Connection refused!!  No need to perform retries.
				//
				log.debug("DominoIIOPMonitor: Connection refused to " + host.getHostAddress() + ":" + port);
				isAServer = false;
				break;
			}
			catch(NoRouteToHostException e)
			{
				// No Route to host!!!
				//
				e.fillInStackTrace();
				log.info("DominoIIOPMonitor: Could not connect to host " + host.getHostAddress() + ", no route to host", e);
				isAServer = false;
				throw new UndeclaredThrowableException(e);
			}
			catch(InterruptedIOException e)
			{
				// This is an expected exception
				//
				isAServer = false;
			}
			catch(IOException e)
			{
				log.info("DominoIIOPMonitor: An expected I/O exception occured connecting to host " + host.getHostAddress() + " on port " + port);
				isAServer = false;
			}
                        catch(InterruptedException e)
                        {
                                log.warn("DominoIIOPPlugin: thread interrupted while testing host " + host.getHostAddress(), e);
                                isAServer = false;
                                break;
                        }
			catch(Throwable t)
			{
				isAServer = false;
				log.warn("DominoIIOPMonitor: An undeclared throwable exception was caught connecting to host " + host.getHostAddress()
					 + " on port " + port, t);
			}
			finally
			{
				try
				{
					if(sChannel != null)
						sChannel.close();
				}
				catch(IOException e) { }
			}
		}

		//
		// return the success/failure of this
		// attempt to contact an IIOP server.
		//
		return isAServer;
	}

