    /**
     * Process an addNode event.
     * 
     * @param event
     *            The event to process.
     * @throws InsufficientInformationException
     *             if the event is missing information
     * @throws FailedOperationException
     *             if an error occurs during processing
     */
    private void handleAddNode(Event event) throws InsufficientInformationException, FailedOperationException {
        //        Category log = ThreadCategory.getInstance(getClass());

        EventUtils.requireParm(event, EventConstants.PARM_NODE_LABEL);
        if (isXmlRpcEnabled()) {
            EventUtils.requireParm(event, EventConstants.PARM_TRANSACTION_NO);
        }

        String ipaddr = event.getInterface();
        String sourceUei = event.getUei();
        String nodeLabel = EventUtils.getParm(event, EventConstants.PARM_NODE_LABEL);
        long txNo = EventUtils.getLongParm(event, EventConstants.PARM_TRANSACTION_NO, -1L);
        {

            Category log = ThreadCategory.getInstance(getClass());

            if (log.isDebugEnabled()) log.debug("addNodeHandler:  processing addNode event for " + ipaddr);
        }
        Connection dbConn = null;
        List eventsToSend = null;
        try {
            dbConn = DatabaseConnectionFactory.getInstance().getConnection();
            dbConn.setAutoCommit(false);

            eventsToSend = doAddNode(dbConn, nodeLabel, ipaddr, txNo);
        } catch (SQLException sqlE) {
            Category log = ThreadCategory.getInstance(getClass());
            log.error("addNodeHandler: SQLException during add node and ipaddress to tables", sqlE);
            throw new FailedOperationException("database error: " + sqlE.getMessage(), sqlE);
        } finally {
            if (dbConn != null) try {
                if (eventsToSend != null) {
                    dbConn.commit();
                    for (Iterator it = eventsToSend.iterator(); it.hasNext();) {
                        EventUtils.sendEvent((Event) it.next(), event.getUei(), txNo, isXmlRpcEnabled());
                    }
                } else {
                    dbConn.rollback();
                }
            } catch (SQLException ex) {
            } finally {
                if (dbConn != null) try { dbConn.close(); } catch (SQLException ex) {}
            }
        }

    }

