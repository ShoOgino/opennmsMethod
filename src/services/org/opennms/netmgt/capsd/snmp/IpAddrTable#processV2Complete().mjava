    private void processV2Complete() {
        // Convert SNMP variable binding list to an array
        // for processing
        //
        SnmpVarBind[] tempStorage = new SnmpVarBind[m_snmpVarBindList.size()];
        tempStorage = (SnmpVarBind[]) m_snmpVarBindList.toArray(tempStorage);
        // since the MIB does not store the number of
        // interfaces that have
        // IP addresses, the method must resort to an
        // alternative. By
        // counting the number of values found for the
        // ipAddrIfIndex variable,
        // we'll have the number of interfaces with IP's.
        // Each IP-bound
        // interface will have a value for each MIB variable
        // listed
        //
        int numInterfaces = 0;
        SnmpObjectId ipAddrIfIndex = new SnmpObjectId(IP_ADDR_IF_INDEX);
        while (ipAddrIfIndex.compare(tempStorage[numInterfaces].getName()) > 0)
            numInterfaces++;
        // store the IP Address Table data for each
        // interface into a map.
        //
        int numEntries = IpAddrTableEntry.getElementListSize();
        for (int if_index = 0; if_index < numInterfaces; if_index++) {
            SnmpVarBind[] vblist = new SnmpVarBind[numEntries];
            for (int vb_index = 0; vb_index < numEntries; vb_index++) {
                vblist[vb_index] = tempStorage[if_index + (vb_index * numInterfaces)];
            }
            processTableRow(vblist);
        }
    }

