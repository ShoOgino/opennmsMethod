	/**
	 * Returns all Internet addresses at the corresponding index. If
	 * the address cannot be resolved then a null reference is returned.
	 * 
	 * @param   ipAddrEntries List of IpAddrTableEntry objects to search
	 * @param ifIndex	The index to search for.
	 *
	 * @return list of InetAddress objects representing each of the
	 *         interfaces IP addresses.
	 */
	public static List getIpAddresses(List ipAddrEntries, int ifIndex)
	{
		if (ifIndex == -1 || ipAddrEntries == null)
		{
			return null;
		}
		
		List addresses = new ArrayList();
		
		Iterator i = ipAddrEntries.iterator();
		while(i.hasNext())
		{
			IpAddrTableEntry entry = (IpAddrTableEntry)i.next();
			SnmpInt32 ndx = (SnmpInt32)entry.get(IpAddrTableEntry.IP_ADDR_IF_INDEX);
			if(ndx != null && ndx.getValue() == ifIndex)
			{
				// found it
				// extract the address
				//
				SnmpIPAddress ifAddr = (SnmpIPAddress)entry.get(IpAddrTableEntry.IP_ADDR_ENT_ADDR);
				if(ifAddr != null)
				{
					try
					{
						addresses.add(ifAddr.convertToIpAddress());
					}
					catch(SnmpBadConversionException e)
					{
						Category log = ThreadCategory.getInstance(IpAddrTable.class);
						log.error("Failed to convert snmp collected address: " + ifAddr, e);
					}
				}
			}
		}
		return addresses;
	}

