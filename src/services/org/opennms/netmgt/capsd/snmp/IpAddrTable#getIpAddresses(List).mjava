    /**
     * Returns all Internet addresses in the ipAddrEntry list. If the address
     * cannot be resolved then a null reference is returned.
     * 
     * @param ipAddrEntries
     *            List of IpAddrTableEntry objects to search
     * 
     * @return list of InetAddress objects representing each of the interfaces
     *         IP addresses.
     */
    public static List getIpAddresses(List ipAddrEntries) {
        if (ipAddrEntries == null) {
            return null;
        }

        List addresses = new ArrayList();

        Iterator i = ipAddrEntries.iterator();
        while (i.hasNext()) {
            IpAddrTableEntry entry = (IpAddrTableEntry) i.next();
            SnmpInt32 ndx = (SnmpInt32) entry.get(IpAddrTableEntry.IP_ADDR_IF_INDEX);
            if (ndx != null) {
                // extract the addresses
                //
                ThreadCategory.getInstance(IpAddrTable.class).debug("Running new and improved (read working) getIpAddresses");
                SnmpIPAddress ifAddr = (SnmpIPAddress) entry.get(IpAddrTableEntry.IP_ADDR_ENT_ADDR);
                if (ifAddr != null) {
                    try {
                        addresses.add(ifAddr.convertToIpAddress());
                    } catch (SnmpBadConversionException e) {
                        Category log = ThreadCategory.getInstance(IpAddrTable.class);
                        log.error("Failed to convert snmp collected address: " + ifAddr, e);
                    }
                }

            }
        }
        return addresses;
    }

