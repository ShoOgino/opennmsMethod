	/**
	 * <P>This method is used to find the corresponding IP Address
	 * for the indexed interface. The list of IP Address entries are
	 * searched until <EM>the first</EM> IP Address is found for the
	 * interface. The IP Address is then returned as a string. If
	 * there is no interface corresponding to the index then a null
	 * is returned to the caller.</P>
	 *
	 * @param   ipAddrEntries List of IpAddrTableEntry objects to search
	 * @param   ifIndex  The interface index to search for
	 *
	 * @return  IP Address for the indexed interface.
	 */
	public static InetAddress getIpAddress(List ipAddrEntries, int ifIndex)
	{
		Category log = ThreadCategory.getInstance(IpAddrTable.class);
		
		if (ifIndex == -1 || ipAddrEntries == null)
		{
			return null;
		}

		Iterator iter = ipAddrEntries.iterator();
		while(iter.hasNext())
		{
			IpAddrTableEntry ipAddrEntry = (IpAddrTableEntry)iter.next();
			
			SnmpInt32 snmpIpAddrIndex = (SnmpInt32)ipAddrEntry.get(IpAddrTableEntry.IP_ADDR_IF_INDEX);
			
			if (snmpIpAddrIndex == null)
			{
				continue;
			}

			int ipAddrIndex = snmpIpAddrIndex.getValue();

			if (ipAddrIndex ==  ifIndex)
			{
				SnmpIPAddress snmpAddr = (SnmpIPAddress)ipAddrEntry.get(IpAddrTableEntry.IP_ADDR_ENT_ADDR);
			    
				if (snmpAddr != null /*&& !snmpAddr.toString().startsWith("127")*/) 
				{
					InetAddress addr = null;
					try 
					{
						addr = snmpAddr.convertToIpAddress();
					}
					catch (SnmpBadConversionException e)
					{
						log.warn("getIpAddress: Unable to convert SnmpIPAddress " + snmpAddr.toString() + " to InetAddress.", e);
						addr = null;
					}
					
					return addr;
				}
						    
			}
	
		}

		return null;
	}

