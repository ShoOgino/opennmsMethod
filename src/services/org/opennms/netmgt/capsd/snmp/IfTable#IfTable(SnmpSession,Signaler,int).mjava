	/**
	 * <P>Constructs an IfTable object that is used to collect
	 * the interface elements from the remote agent. Once all
	 * the interfaces are collected, or there is an error in
	 * the collection the signaler object is <EM>notified</EM>
	 * to inform other threads.</P>
	 *
	 * @param session	The session with the remote agent.
	 * @param signaler	The object to notify waiters.
	 *
	 * @see IfTableEntry
	 */
	public IfTable(SnmpSession session, Signaler signaler, int version)
	{
		m_signal  = signaler;
		m_entries = new ArrayList(2); // not synchronized.
		m_error   = false;
		
		m_version = version;
		m_stopAt = IfTableEntry.stop_oid();
		
		//first process, attain ifNumber.
		SnmpPduRequest pdu = IfTableEntry.getIfNumberPdu();
		m_ifNumberRequestId = pdu.getRequestId();
		Category log = ThreadCategory.getInstance(getClass());
		if(log.isDebugEnabled())
		{
			log.debug("<ctor>: ifNumber retrieval pdu request id: " + m_ifNumberRequestId);
		}

		session.send(pdu, this);
	}

