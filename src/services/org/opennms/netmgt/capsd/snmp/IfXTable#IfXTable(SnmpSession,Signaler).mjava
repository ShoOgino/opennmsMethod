    /**
     * <P>
     * Constructs an IfXTable object that is used to collect the interface
     * elements from the remote agent. Once all the interfaces are collected, or
     * there is an error in the collection the signaler object is <EM>notified
     * </EM> to inform other threads.
     * </P>
     * 
     * @param session
     *            The session with the remote agent.
     * @param signaler
     *            The object to notify waiters.
     * 
     * @see IfXTableEntry
     */
    public IfXTable(SnmpSession session, Signaler signaler) {
        m_signal = signaler;
        m_entries = new ArrayList(2); // not synchronized.
        m_error = false;

        m_version = SnmpSMI.SNMPV1;
        m_stopAt = IfXTableEntry.stop_oid();

        // first process, attain ifNumber.
        SnmpPduRequest pdu = IfXTableEntry.getIfNumberPdu();
        m_ifNumberRequestId = pdu.getRequestId();
        ThreadCategory.getInstance(getClass()).debug("IfXTable: ifNumber retrieval pdu request id: " + m_ifNumberRequestId);

        session.send(pdu, this);
    }

