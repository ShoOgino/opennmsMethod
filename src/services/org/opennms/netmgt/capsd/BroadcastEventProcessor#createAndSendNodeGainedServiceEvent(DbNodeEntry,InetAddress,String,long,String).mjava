        /**
         * This method is responsible for generating a nodeGainedService event and sending
         * it to eventd..
         *
         * @param nodeEntry     The node that gained the service.
         * @param ifaddr        the interface gained the service.
         * @param service       the service gained.
         * @param txNo          the transaction no.
         * @param callerUei     the uei of the caller event.
         *
         */
        private void createAndSendNodeGainedServiceEvent(DbNodeEntry nodeEntry, InetAddress ifaddr, 
                                                         String service, long txNo, String callerUei)
        {
		Category log = ThreadCategory.getInstance(getClass());
		if (log.isDebugEnabled())
			log.debug("createAndSendNodeGainedServiceEvent:  nodeId/interface/service  " 
                        + nodeEntry.getNodeId() + "/" + ifaddr.getHostAddress() + "/" + service);
        
                Event newEvent = new Event();
                newEvent.setUei(EventConstants.NODE_GAINED_SERVICE_EVENT_UEI);
                newEvent.setSource("OpenNMS.Capsd");
                newEvent.setNodeid(nodeEntry.getNodeId());
                newEvent.setHost(Capsd.getLocalHostAddress());
                newEvent.setInterface(ifaddr.getHostAddress());
                newEvent.setService(service);
                newEvent.setTime(EventConstants.formatToString(new java.util.Date()));

                // Add appropriate parms
                Parms eventParms = new Parms();
                Parm eventParm = null;
                Value parmValue = null;

                // Add IP host name
                eventParm = new Parm();
                eventParm.setParmName(EventConstants.PARM_IP_HOSTNAME);
                parmValue = new Value();
                parmValue.setContent(ifaddr.getHostName());
                eventParm.setValue(parmValue);
                eventParms.addParm(eventParm);
                
                // Add Node Label
                eventParm = new Parm();
                eventParm.setParmName(EventConstants.PARM_NODE_LABEL);
                parmValue = new Value();
                parmValue.setContent(nodeEntry.getLabel());
                eventParm.setValue(parmValue);
                eventParms.addParm(eventParm);

                // Add Node Label source
                eventParm = new Parm();
                eventParm.setParmName(EventConstants.PARM_NODE_LABEL_SOURCE);
                parmValue = new Value();
                char labelSource[] = new char[] {nodeEntry.getLabelSource()};
                parmValue.setContent(new String(labelSource));
                eventParm.setValue(parmValue);
                eventParms.addParm(eventParm);

                // Add sysName if available
                if (nodeEntry.getSystemName() != null)
                {
                        eventParm = new Parm();
                        eventParm.setParmName(EventConstants.PARM_NODE_SYSNAME);
                        parmValue = new Value();
                        parmValue.setContent(nodeEntry.getSystemName());
                        eventParm.setValue(parmValue);
                        eventParms.addParm(eventParm);
                }

                // Add sysDescr if available
                if (nodeEntry.getSystemDescription() != null)
                {
                        eventParm = new Parm();
                        eventParm.setParmName(EventConstants.PARM_NODE_SYSDESCRIPTION);
                        parmValue = new Value();
                        parmValue.setContent(nodeEntry.getSystemDescription());
                        eventParm.setValue(parmValue);
                        eventParms.addParm(eventParm);
                }
                
                // Add Parms to the event
                newEvent.setParms(eventParms);
                
                // Send event to Eventd
                try
                {
                        EventIpcManagerFactory.getInstance().getManager().sendNow(newEvent);

                        if (log.isDebugEnabled())
                                log.debug("createdAndSendNodeGainedServiceEvent: successfully sent nodeGainedService event "
                                        + "for nodeid/interface/service: " 
                                        + nodeEntry.getNodeId() + "/"
                                        + ifaddr.getHostAddress() + "/" + service);
                                        
                }
                catch(Throwable t)
                {
                        log.warn("run: unexpected throwable exception caught during send to middleware", t);
                        if (m_xmlrpc)
                        {
                                int status = EventConstants.XMLRPC_NOTIFY_FAILURE;
                                createAndSendXmlrpcNotificationEvent(txNo, callerUei, 
                                                "caught unexpected throwable exception.", status);
                        }
                }
        }                

