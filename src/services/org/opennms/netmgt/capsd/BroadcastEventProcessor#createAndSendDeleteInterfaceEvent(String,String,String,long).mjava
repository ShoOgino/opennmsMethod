        /**
         * This method is responsible for generating a deleteInterface  event 
         * and sending it to eventd..
         *
         * @param nodeLabel     the node label of the node where the interface resides.
         * @param ipaddr        IP address of the interface to be deleted.
         * @param hostName      the Host server name.
         * @param txNo          the external transaction No.
         */
        private void createAndSendDeleteInterfaceEvent(String nodeLabel, String ipaddr, String hostName, long txNo)
        {
		Category log = ThreadCategory.getInstance(getClass());
		if (log.isDebugEnabled())
			log.debug("createAndSendDeleteInterfaceEvent:  processing updateServer event for interface:  " 
                                + ipaddr + " on server: " + hostName);
        
                Event newEvent = new Event();
                newEvent.setUei(EventConstants.DELETE_INTERFACE_EVENT_UEI);
                newEvent.setSource("OpenNMS.capsd");
                newEvent.setInterface(ipaddr);
                newEvent.setHost(hostName);
                newEvent.setTime(EventConstants.formatToString(new java.util.Date()));

                // Add appropriate parms
                Parms eventParms = new Parms();
                Parm eventParm = null;
                Value parmValue = null;

                eventParm = new Parm();
                eventParm.setParmName(EventConstants.PARM_NODE_LABEL);
                parmValue = new Value();
                parmValue.setContent(nodeLabel);
                eventParm.setValue(parmValue);
                eventParms.addParm(eventParm);

                eventParm = new Parm();
                eventParm.setParmName(EventConstants.PARM_TRANSACTION_NO);
                parmValue = new Value();
                parmValue.setContent((new Long(txNo)).toString());
                eventParm.setValue(parmValue);
                eventParms.addParm(eventParm);
                
                // Add Parms to the event
                newEvent.setParms(eventParms);
                
                // Send event to Eventd
                try
                {
                        EventIpcManagerFactory.getInstance().getManager().sendNow(newEvent);

                        if (log.isDebugEnabled())
                                log.debug("createdAndSendDeleteInterfaceEvent: successfully sent " 
                                        + " deleteInterface event for interface: " + ipaddr 
                                        + " node: " + nodeLabel);
                }
                catch(Throwable t)
                {
                        log.warn("run: unexpected throwable exception caught during send to middleware", t);
                        if (m_xmlrpc)
                        {
                                try
                                {
                                        XmlRpcNotifier notifier = new XmlRpcNotifier(m_xmlrpcServerUrl);
                                        String reply = notifier.notifyFailure(txNo, newEvent.getUei(), 
                                                "caught unexpected throwable exception.");
		                        if (log.isDebugEnabled())
			                        log.debug("createAndSendDeleteInterfaceEvent: Notify failure with xmlrpc:\n\t\t" + reply); 
                                }
                                catch (XmlRpcException xe)
                                {
                                        log.warn("createAndSendDeleteInterfaceEvent: XMLRPC failure. ", xe);
                                }
                                catch (IOException ioe)
                                {
                                        log.warn("createAndSendDeleteInterfaceEvent: IOException on XMLRPC. ", ioe);
                                }
                        }
                }
        }                

