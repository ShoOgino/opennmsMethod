    /**
	 * Mark all the services associated with a given interface as deleted and
	 * create service deleted events for each one that gets deleted
	 * 
	 * @param dbConn
	 *            the database connection
	 * @param nodeId
	 *            the node that interface resides on
	 * @param ipAddr
	 *            the ipAddress of the interface
	 * @param txNo
	 *            a transaction number that can be associated with this deletion
	 * @return a List of serviceDeleted events, one for each service marked
	 * @throws SQLException
	 *             if a database error occurs
	 */
	private List markAllServicesForInterfaceDeleted(Connection dbConn,
			String source, long nodeId, String ipAddr, long txNo)
			throws SQLException {
		Category log = ThreadCategory.getInstance(getClass());
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
			List eventsToSend = new LinkedList();

			final String DB_FIND_SERVICES_FOR_INTERFACE = "SELECT service.serviceName, ifservices.status FROM ifservices as ifservices, service as service WHERE ifservices.nodeID = ? and ifservices.ipAddr = ? and ifservices.status != 'D' and ifservices.serviceID = service.serviceID";
			stmt = dbConn.prepareStatement(DB_FIND_SERVICES_FOR_INTERFACE,
					ResultSet.TYPE_SCROLL_INSENSITIVE,
					ResultSet.CONCUR_UPDATABLE);
			stmt.setLong(1, nodeId);
			stmt.setString(2, ipAddr);
			rs = stmt.executeQuery();

			while (rs.next()) {
				String service = rs.getString(1);
				rs.updateString(2, "D");
				rs.updateRow();
				eventsToSend.add(EventUtils.createServiceDeletedEvent(source,
						nodeId, ipAddr, service, txNo));
			}

			if (log.isDebugEnabled())
				log.debug("markServicesDeleted: marked service deleted: "
						+ nodeId + "/" + ipAddr);

			return eventsToSend;
		} finally {
			try {
				if (rs != null)
					rs.close();
				if (stmt != null)
					stmt.close();
			} catch (SQLException e) {
			}

		}
	}

