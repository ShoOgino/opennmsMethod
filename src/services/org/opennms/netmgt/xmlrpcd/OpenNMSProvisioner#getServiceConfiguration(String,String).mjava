    public Map getServiceConfiguration(String pkgName, String serviceId) {
        if (pkgName == null)
            throw new NullPointerException("pkgName is null");
        if (serviceId == null)
            throw new NullPointerException("serviceId is null");

        Package pkg = m_pollerConfig.getPackage(pkgName);
        if (pkg == null)
            throw new IllegalArgumentException(pkgName+" is not a valid poller package name");
        
        Service svc = m_pollerConfig.getServiceInPackage(serviceId, pkg);
        if (svc == null)
            throw new IllegalArgumentException("Could not find service "+serviceId+" in package "+pkgName);
        
        Map m = new HashMap();
        m.put("serviceid", serviceId);
        m.put("interval", new Integer((int)svc.getInterval()));
        
        for(int i = 0; i < svc.getParameterCount(); i++) {
            Parameter param = svc.getParameter(i);
            String key = param.getKey();
            String valStr = param.getValue();
            Object val = valStr;
            if ("retry".equals(key)) {
                key = "retries";
                val = Integer.decode(valStr);
            } else if ("timeout".equals(key)) {
                val = Integer.decode(valStr);
            } else if ("port".equals(key)) {
                val = Integer.decode(valStr);
            } else if ("response".equals(key)) {
                val = valStr;
            } else if ("response text".equals(key)) {
                key = "response_text";
            } else if ("response-text".equals(key)) {
                key = "response_text";
            }
            
            m.put(key, val);
        }
        
        for(int i = 0; i < pkg.getDowntimeCount(); i++) {
            Downtime dt = pkg.getDowntime(i);
            String suffix = (i == 0 ? "" : ""+i);
            if ((dt.hasEnd()) || (dt.getDelete() != null && !"false".equals(dt.getDelete()))) {
                m.put("downtime_interval"+suffix, new Integer((int)dt.getInterval()));
                int duration = (!dt.hasEnd() ? Integer.MAX_VALUE : (int)(dt.getEnd() - dt.getBegin()));
                m.put("downtime_duration"+suffix, new Integer(duration));
            }   
        }
        
        return m;
    }

