    /**
     * This constructs a graphDef by parsing the rrdtool style command and using
     * the values to create the JRobin graphDef. It does not understand the 'AT
     * style' time arguments however. Also there may be some rrdtool parameters
     * that it does not understand. These will be ignored. The graphDef will be
     * used to construct an RrdGraph and a PNG image will be created. An input
     * stream returning the bytes of the PNG image is returned.
     */
    public InputStream createGraph(String command, File workDir) throws IOException, org.opennms.netmgt.rrd.RrdException {
        Category log = ThreadCategory.getInstance(getClass());
        try {
            InputStream tempIn = null;
            String[] commandArray = tokenize(command, " \t", false);

            RrdGraphDef graphDef = new RrdGraphDef();
            long start = 0;
            long end = 0;
            for (int i = 0; i < commandArray.length; i++) {
                String arg = commandArray[i];
                if (arg.startsWith("--start=")) {
                    start = Long.parseLong(arg.substring("--start=".length()));
                    log.debug("JRobin start time: " + start);
                } else if (arg.equals("--start")) {
                    if (i + 1 < commandArray.length) {
                        start = Long.parseLong(commandArray[++i]);
                        log.debug("JRobin start time: " + start);
                    } else {
                        throw new IllegalArgumentException("--start must be followed by a start time");
                    }
                } else if (arg.startsWith("--end=")) {
                    end = Long.parseLong(arg.substring("--end=".length()));
                    log.debug("JRobin end time: " + end);
                } else if (arg.equals("--end")) {
                    if (i + 1 < commandArray.length) {
                        end = Long.parseLong(commandArray[++i]);
                        log.debug("JRobin end time: " + start);
                    } else {
                        throw new IllegalArgumentException("--end must be followed by an end time");
                    }
                } else if (arg.startsWith("--title=")) {
                    String[] title = tokenize(arg, "=", true);
                    graphDef.setTitle(title[1]);
                } else if (arg.equals("--title")) {
                    if (i + 1 < commandArray.length) {
                        graphDef.setTitle(commandArray[++i]);
                    } else {
                        throw new IllegalArgumentException("--title must be followed by a title");
                    }
                } else if (arg.startsWith("DEF:")) {
                    String definition = arg.substring("DEF:".length());
                    String[] def = tokenize(definition, ":", true);
                    String[] ds = tokenize(def[0], "=", true);
                    File dsFile = new File(workDir, ds[1]);
                    graphDef.datasource(ds[0], dsFile.getAbsolutePath(), def[1], def[2]);
                } else if (arg.startsWith("CDEF:")) {
                    String definition = arg.substring("CDEF:".length());
                    String[] cdef = tokenize(definition, "=", true);
                    graphDef.datasource(cdef[0], cdef[1]);
                } else if (arg.startsWith("LINE1:")) {
                    String definition = arg.substring("LINE1:".length());
                    String[] line1 = tokenize(definition, ":", true);
                    String[] color = tokenize(line1[0], "#", true);
                    graphDef.line(color[0], getColor(color[1]), line1[1]);
                } else if (arg.startsWith("LINE2:")) {
                    String definition = arg.substring("LINE2:".length());
                    String[] line2 = tokenize(definition, ":", true);
                    String[] color = tokenize(line2[0], "#", true);
                    graphDef.line(color[0], getColor(color[1]), line2[1], 2);

                } else if (arg.startsWith("LINE3:")) {
                    String definition = arg.substring("LINE3:".length());
                    String[] line3 = tokenize(definition, ":", true);
                    String[] color = tokenize(line3[0], "#", true);
                    graphDef.line(color[0], getColor(color[1]), line3[1], 3);

                } else if (arg.startsWith("GPRINT:")) {
                    String definition = arg.substring("GPRINT:".length());
                    String gprint[] = tokenize(definition, ":", true);
                    String format = gprint[2];
                    format = format.replaceAll("%(\\d*\\.\\d*)lf", "@$1");
                    format = format.replaceAll("%s", "@s");
                    log.debug("gprint: oldformat = " + gprint[2] + " newformat = " + format);
                    graphDef.gprint(gprint[0], gprint[1], format);

                } else if (arg.startsWith("AREA:")) {
                    String definition = arg.substring("AREA:".length());
                    String area[] = tokenize(definition, ":", true);
                    String[] color = tokenize(area[0], "#", true);
                    graphDef.area(color[0], getColor(color[1]), area[1]);

                } else if (arg.startsWith("STACK:")) {
                    String definition = arg.substring("STACK:".length());
                    String stack[] = tokenize(definition, ":", true);
                    String[] color = tokenize(stack[0], "#", true);
                    graphDef.stack(color[0], getColor(color[1]), stack[1]);
                } else {
                    log.warn("JRobin: Unrecognized graph argument: " + arg);
                }
            }
            graphDef.setTimePeriod(start, end);

            log.debug("JRobin Finished tokenizing checking: start time: " + start + "; end time: " + end);

            RrdGraph graph = new RrdGraph(graphDef, false);

            byte[] bytes = graph.getPNGBytes();

            tempIn = new ByteArrayInputStream(bytes);

            return tempIn;
        } catch (Exception e) {
            log.error("JRobin:exception occurred creating graph", e);
            throw new org.opennms.netmgt.rrd.RrdException("An exception occurred creating the graph.", e);
        }
    }

