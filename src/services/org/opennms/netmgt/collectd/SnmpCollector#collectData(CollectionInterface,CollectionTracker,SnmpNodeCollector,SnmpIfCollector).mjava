	private void collectData(CollectionInterface iface,
			CollectionTracker ifNumber, SnmpNodeCollector nodeCollector,
			SnmpIfCollector ifCollector) throws CollectionWarning {
		try {
			InetAddress address = iface.getInetAddress();
			List trackers = new ArrayList(3);

			if (ifNumber != null) {
				trackers.add(ifNumber);
			}
			if (nodeCollector != null) {
				trackers.add(nodeCollector);
			}
			if (ifCollector != null) {
				trackers.add(ifCollector);
			}

			SnmpAgentConfig agentConfig = SnmpPeerFactory.getInstance()
					.getAgentConfig(address);

			// now collect the data
			SnmpWalker walker = SnmpUtils.createWalker(agentConfig,
					"SnmpCollectors for " + address.getHostAddress(),
					(CollectionTracker[]) trackers
							.toArray(new CollectionTracker[trackers.size()]));
			walker.start();

			if (log().isDebugEnabled()) {
				log().debug(
						"collect: successfully instantiated "
								+ "SnmpNodeCollector() for "
								+ iface.getHostAddress());
			}

			// wait for collection to finish
			walker.waitFor();

			if (log().isDebugEnabled()) {
				log().debug(
						"collect: node SNMP query for address "
								+ iface.getHostAddress() + " complete.");
			}

			// Was the node collection successful?
			if (walker.failed()) {
				// Log error and return COLLECTION_FAILED
				throw new CollectionWarning("collect: collection failed for "
						+ iface.getHostAddress());
			}

			iface.setMaxVarsPerPdu(walker.getMaxVarsPerPdu());
		} catch (InterruptedException e) {
			Thread.currentThread().interrupt();
			throw new CollectionWarning("collect: Collection of node SNMP "
					+ "data for interface " + iface.getHostAddress()
					+ " interrupted!", e);
		}
	}

