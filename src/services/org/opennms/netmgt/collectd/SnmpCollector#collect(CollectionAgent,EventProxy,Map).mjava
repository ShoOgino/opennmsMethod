	/**
	 * Perform data collection.
	 * 
	 * @param agent
	 *            Network interface to be data collected.
	 * @param eventProxy
	 *            Eventy proxy for sending events.
	 * @param parameters
	 *            Key/value pairs from the package to which the interface
	 *            belongs.
	 */
	public int collect(CollectionAgent agent, EventProxy eventProxy, Map parameters) {
	    try {

	        final ForceRescanState forceRescanState = new ForceRescanState(agent, eventProxy);
	        final ServiceParameters params = new ServiceParameters(parameters);

	        OnmsSnmpCollection snmpCollection = new OnmsSnmpCollection(params);

	        CollectionSet collectionSet = snmpCollection.createCollectionSet(agent);
	        collectionSet.verifyCollectionIsNecessary();


	        collectionSet.collect();

	        if (collectionSet.rescanNeeded())
	            forceRescanState.rescanIndicated();

	        params.logIfAliasConfig();

	        collectionSet.visit(new ResourceVisitor() {

	            public void visitResource(CollectionResource resource) {
	                if (resource.shouldPersist(params)) {
	                    // FIXME: make sure we don't store attributes that don't make the ifType
	                    resource.storeAttributes(getRrdBaseDir());
	                }
	            }

	        });

	        // return the status of the collection
	        return ServiceCollector.COLLECTION_SUCCEEDED;
	    } catch (CollectionError e) {
	        return e.reportError();
	    } catch (Throwable t) {
	        return this.unexpected(agent, t);
	    }
	}

