	/**
	 * Perform data collection.
	 * 
	 * @param agent
	 *            Network interface to be data collected.
	 * @param eventProxy
	 *            Eventy proxy for sending events.
	 * @param parameters
	 *            Key/value pairs from the package to which the interface
	 *            belongs.
	 */
	public int collect(CollectionAgent agent, EventProxy eventProxy, Map parameters) {
        final ForceRescanState forceRescanState = new ForceRescanState(agent, eventProxy);
        final ServiceParameters params = new ServiceParameters(parameters);
       
        try {
        
            agent.getCollectionSet().collect();

            if (agent.getCollectionSet().rescanNeeded())
                forceRescanState.rescanIndicated();
            
            // Update RRD with values retrieved in SNMP collection
            params.logIfAliasConfig();
            
            agent.getCollectionSet().visit(new ResourceVisitor() {

                public void visitResource(CollectionResource resource) {
                    if (resource.shouldPersist(params)) {
                        resource.storeAttributes(getRrdBaseDir());
                    }
                }
                
            });
            
        	// return the status of the collection
        	return ServiceCollector.COLLECTION_SUCCEEDED;
        } catch (CollectionError e) {
        	return e.reportError();
        } catch (Throwable t) {
        	return this.unexpected(agent, t);
        }
	}

