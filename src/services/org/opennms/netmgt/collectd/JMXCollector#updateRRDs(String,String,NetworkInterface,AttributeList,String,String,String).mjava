    /**
     * This method is responsible for building an RRDTool style 'update'
     * command which is issued via the RRD JNI interface in order to push the
     * latest JMX-collected values into the interface's RRD database.
     * 
     * @param collectionName
     *            JMX data Collection name from
     *            'jmx-datacollection-config.xml'
     * @param iface
     *            NetworkInterface object of the interface currently being
     *            polled
     * @param nodeCollector
     *            Node level MBean data collected via JMX for the polled
     *            interface
     * @param ifCollector
     *            Interface level MBean data collected via JMX for the polled
     *            interface
     * @exception RuntimeException
     *                Thrown if the data source list for the interface is
     *                null.
     */

    private boolean updateRRDs(String objectName, String collectionName,
            NetworkInterface iface, AttributeList attributeList,
            String collectionDir, String keyField, String substitutions) {

        Category log = ThreadCategory.getInstance(getClass());
        InetAddress ipaddr = (InetAddress) iface.getAddress();

        JMXNodeInfo nodeInfo = (JMXNodeInfo) iface.getAttribute(NODE_INFO_KEY);

        boolean rrdError = false;

        /*
         * -----------------------------------------------------------
         * Node data
         * -----------------------------------------------------------
         */
        log.debug("updateRRDs: processing node-level collection...");

        /*
         * Build path to node RRD repository. createRRD() will make the
         * appropriate directories if they do not already exist.
         */
        String nodeRepository = m_rrdPath + File.separator
                + String.valueOf(nodeInfo.getNodeId());

        /*
         * Iterate over the node datasource list and issue RRD update
         * commands to update each datasource which has a corresponding
         * value in the collected JMX data
         */
        HashMap dsMap = nodeInfo.getDsMap();

        try {
            for (int i = 0; i < attributeList.size(); i++) {
                Attribute attribute = (Attribute) attributeList.get(i);
                JMXDataSource ds = (JMXDataSource) dsMap.get(objectName + "|"
                        + attribute.getName());

                if (keyField == null) {
                    try {
                        createRRD(collectionName, ipaddr, nodeRepository, ds,
                                  collectionDir, null);
                        RrdUtils.updateRRD(ipaddr.getHostAddress(),
                                           nodeRepository + "/" + collectionDir,
                                           ds.getName(),
                                           attribute.getValue().toString());
                    } catch (Throwable e1) {
                    }
                } else {
                    try {
                        String key = fixKey(keyField, ds.getName(),
                                            substitutions);
                        createRRD(collectionName, ipaddr, nodeRepository, ds,
                                  collectionDir, key);
                        if (key.equals("")) {
                            RrdUtils.updateRRD(ipaddr.getHostAddress(),
                                               nodeRepository + "/"
                                                       + collectionDir,
                                               ds.getName(), ""
                                                       + attribute.getValue());
                        } else {
                            RrdUtils.updateRRD(ipaddr.getHostAddress(),
                                               nodeRepository + "/"
                                                       + collectionDir, key
                                                       + "_" + ds.getName(),
                                               "" + attribute.getValue());
                        }
                    } catch (Throwable e1) {
                        // log.debug("Error updating: " ds.getName());
                    }
                }
                try {
                    Thread.sleep(1100);
                } catch (Exception te) {

                }
            }
        } catch (Throwable e) {
            // log.error("RRD Error", e);
            rrdError = true;
        }
        return rrdError;
    }

