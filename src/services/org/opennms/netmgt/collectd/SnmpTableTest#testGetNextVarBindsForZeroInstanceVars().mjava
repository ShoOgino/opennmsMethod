    public void testGetNextVarBindsForZeroInstanceVars() {
        addSysDescr();
        addSysName();
        SnmpCollectionTracker tracker = new SnmpCollectionTracker(m_objList);

        final int[] callCount = new int[3];
        final Iterator it = m_objList.iterator();
        ResponseProcessor rp = tracker.buildNextPdu(new PduBuilder() {
            public void addOid(SnmpObjId snmpObjId) {
                callCount[0]++;
                MibObject mibObj = (MibObject)it.next();
                assertEquals(SnmpObjId.get(mibObj.getOid()), snmpObjId);
            }
            public void setNonRepeaters(int numNonRepeaters) {
                callCount[1]++;
            }
            public void setMaxRepititions(int maxRepititions) {
                callCount[2]++;
            }
        });
        assertNotNull(rp);
        
        assertEquals(m_objList.size(), callCount[0]);
        assertEquals(1, callCount[1]);
        assertEquals(1, callCount[2]);
        
        // create responses
        for (int i = 0; i < m_objList.size(); i++) {
            MibObject mibObj = (MibObject)m_objList.get(i);
            rp.processResponse(SnmpObjId.get(mibObj.getOid(), "0"), "response"+i);
        } 
        
        // TODO make sure it processed the results correctly
        Map store = tracker.getDataForInstance(new SnmpInstId("0"));
        assertNotNull(store);
        
        for (int i = 0; i < m_objList.size(); i++) {
            MibObject mibObj = (MibObject)m_objList.get(i);
            assertEquals("response"+i, store.get(SnmpObjId.get(mibObj.getOid())));
        } 
        
    }

