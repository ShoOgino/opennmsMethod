    /**
     * This method is responsible for building a list of RRDDataSource objects
     * from the provided list of MBeanObject objects.
     * 
     * @param collectionName
     *            Collection name
     * @param oidList
     *            List of MBeanObject objects defining the oid's to be collected
     *            via JMX.
     * 
     * @return list of RRDDataSource objects
     */

    private HashMap buildDataSourceList(String collectionName, Map attributeMap) {

        // Log4j category
        //
        Category log = ThreadCategory.getInstance(getClass());
        
        log.debug("buildDataSourceList - ***");

        // Retrieve the RRD expansion data source list which contains all
        // the expansion data source's. Use this list as a basis
        // for building a data source list for the current interface.
        //

        HashMap dsList = new HashMap();

        // Loop through the MBean object list to be collected for this interface
        // and add a corresponding RRD data source object. In this manner
        // each interface will have RRD files create which reflect only the data
        // sources pertinent to it.
        //

        log.debug("attributeMap size: " + attributeMap.size());
        Iterator objNameIter = attributeMap.keySet().iterator();
        while (objNameIter.hasNext()) {
        	   String objectName = objNameIter.next().toString();
        	   
        	   log.debug("ObjectName: " + objectName);
        	   
        	    ArrayList list = (ArrayList)attributeMap.get(objectName);
        	    log.debug("Attributes: " + list.size());
        	    
        	    Iterator iter = list.iterator();
        	    while (iter.hasNext()) {
                    Attrib attr = (Attrib) iter.next();
                    RRDDataSource ds = null;

                    // Verify that this object has an appropriate "integer" data type
                    // which can be stored in an RRD database file (must map to one of
                    // the supported RRD data source types: COUNTER or GAUGE).
                    String ds_type = RRDDataSource.mapType(attr.getType());
                    if (ds_type != null) {
                        // Passed!! Create new data source instance for this MBean
                        // object
                        // Assign heartbeat using formula (2 * step) and hard code
                        // min & max values to "U" ("unknown").
                        ds = new RRDDataSource();
                        ds.setHeartbeat(2 * JMXDataCollectionConfigFactory
                                .getInstance().getStep(collectionName));
                        // For completeness, adding a minval option to the variable.
                        String ds_minval = attr.getMinval();
                        if (ds_minval == null) {
                            ds_minval = "U";
                        }
                        ds.setMax(ds_minval);

                        // In order to handle counter wraps, we need to set a max
                        // value for the variable.
                        String ds_maxval = attr.getMaxval();
                        if (ds_maxval == null) {
                            ds_maxval = "U";
                        }

                        ds.setMax(ds_maxval);
                        ds.setInstance(collectionName);

                        // Truncate MBean object name/alias if it exceeds 19 char max
                        // for
                        // RRD data source names.
                        String ds_name = attr.getAlias();
                        if (ds_name.length() > MAX_DS_NAME_LENGTH) {
                            if (log.isEnabledFor(Priority.WARN))
                                log.warn("buildDataSourceList: alias '"
                                                + attr.getAlias()
                                                + "' exceeds 19 char maximum for RRD data source names, truncating.");
                            char[] temp = ds_name.toCharArray();
                            ds_name = String.copyValueOf(temp, 0, MAX_DS_NAME_LENGTH);
                        }
                        ds.setName(ds_name);

                        // Map MBean object data type to RRD data type
                        ds.setType(ds_type);

                        // Assign the data source object identifier and instance
                        //ds.setName(attr.getName());
                        ds.setOid(attr.getName());

            //            if (log.isDebugEnabled())
                            log.debug("buildDataSourceList: ds_name: " + ds.getName()
                                    + " ds_oid: " + ds.getOid() + "."
                                    + ds.getInstance() + " ds_max: " + ds.getMax()
                                    + " ds_min: " + ds.getMin());

                        // Add the new data source to the list
                        dsList.put(objectName + "|" + attr.getName(), ds);
                    } else if (log.isEnabledFor(Priority.WARN)) {
                        log.warn("buildDataSourceList: Data type '"
                                        + attr.getType()
                                        + "' not supported.  Only integer-type data may be stored in RRD.");
                        log.warn("buildDataSourceList: MBean object '"
                                + attr.getAlias()
                                + "' will not be mapped to RRD data source.");
                    }
        	    }
        }

        return dsList;
    }

