	/**
	 * <P>This method is part of the SnmpHandler interface and called when
	 * an internal error happens in a session. This is usually the result
	 * of an I/O error. This method will not be called if the session times
	 * out sending a packet, see snmpTimeoutError for timeout handling.</P>
	 *
	 * @param session	The session that had an unexpected error
	 * @param error		The error condition
	 * @param pdu		The PDU being sent when the error occured
	 *
	 * @see #snmpTimeoutError
	 * @see org.opennms.protocols.snmp.SnmpHandler SnmpHandler
	 */
	public void snmpInternalError(SnmpSession session, int error, SnmpSyntax pdu)
	{
		// Log4j category
		//
		Category log = ThreadCategory.getInstance(getClass());
		
		if (log.isDebugEnabled())
			log.debug("snmpInternalError: interface SNMP collection failed for interface " + session.getPeer().getPeer().toString() + ", SnmpSession errCode: " + error);

		m_error = true;

		if(m_signal != null)
		{
			if (log.isDebugEnabled())
				log.debug("snmpInternalError: synchronizing on signal...");

			synchronized(m_signal)
			{
				if (log.isDebugEnabled())
					log.debug("snmpInternalError: calling signalAll....");

				m_signal.signalAll();

				if (log.isDebugEnabled())
					log.debug("snmpInternalError: back from calling signalAll....");
			}
		}
		
		synchronized(this)
		{
			this.notifyAll();
		}
	}

