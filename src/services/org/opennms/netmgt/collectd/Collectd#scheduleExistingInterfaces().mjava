    /**
     * Schedule existing interfaces for data collection.
     * 
     * @throws SQLException
     *             if database errors encountered.
     */
    private void scheduleExistingInterfaces() throws SQLException {
        // get the category logger
        //
        Category log = ThreadCategory.getInstance();

        // Database connection
        java.sql.Connection dbConn = null;

        PreparedStatement stmt = null;
        try {
            dbConn = DatabaseConnectionFactory.getInstance().getConnection();
            stmt = dbConn.prepareStatement(SQL_RETRIEVE_INTERFACES);

            // Loop through loaded collectors and schedule for each one present
            //
            Set svcNames = m_svcCollectors.keySet();
            Iterator i = svcNames.iterator();
            while (i.hasNext()) {
                String svcName = (String) i.next();
                ServiceCollector collector = (ServiceCollector) m_svcCollectors.get(svcName);

                if (log.isDebugEnabled())
                    log.debug("scheduleExistingInterfaces: dbConn = " + dbConn + ", svcName = " + svcName);

                // Retrieve list of interfaces from the database which
                // support the service collected by this collector
                //
                try {
                    stmt.setString(1, svcName); // Service name
                    ResultSet rs = stmt.executeQuery();

                    // Iterate over result set and schedule each
                    // interface/service
                    // pair which passes the criteria
                    //
                    while (rs.next()) {
                        int nodeId = rs.getInt(1);
                        String ipAddress = rs.getString(2);

                        scheduleInterface(nodeId, ipAddress, svcName, true);
                    } // end while more interfaces in result set

                    rs.close();
                } catch (SQLException sqle) {
                    log.warn("scheduleExistingInterfaces: SQL exception while querying ipInterface table", sqle);
                    throw sqle;
                }
            } // end while more service collectors
        } finally {
            if (stmt != null) {
                try {
                    stmt.close();
                } catch (Exception e) {
                    if (log.isDebugEnabled())
                        log.debug("scheduleExistingInterfaces: an exception occured closing the SQL statement", e);
                }
            }

            if (dbConn != null) {
                try {
                    dbConn.close();
                } catch (Throwable t) {
                    if (log.isDebugEnabled())
                        log.debug("scheduleExistingInterfaces: an exception occured closing the SQL connection", t);
                }
            }
        }
    }

