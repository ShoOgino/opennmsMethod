	public Collection getSpecificationsForInterface(OnmsIpInterface iface, String svcName) {
		Collection matchingPkgs = new LinkedList();

        CollectdConfigFactory cCfgFactory = CollectdConfigFactory.getInstance();
        CollectdConfiguration cConfig = getConfig();
        Enumeration epkgs = cConfig.enumeratePackage();
        
        
        /*
         * Compare interface/service pair against each collectd package
         * For each match, create new SnmpCollector object and
         * schedule it for collection
         */
        while (epkgs.hasMoreElements()) {
            Package pkg = (Package) epkgs.nextElement();
            CollectionSpecification collectionSpec = new CollectionSpecification(pkg, svcName, getServiceCollector(svcName));

            /*
             * Make certain the the current service is in the package
             * and enabled!
             */
             if (!cCfgFactory.serviceInPackageAndEnabled(svcName, pkg)) {
                if (log().isDebugEnabled()) {
                    log().debug("scheduleInterface: address/service: " + iface + '/' + svcName + " not scheduled, service is not "
                              + "enabled or does not exist in package: "
                              + pkg.getName());
                }
                continue;
            }

            // Is the interface in the package?
            if (!cCfgFactory.interfaceInPackage(iface.getIpAddress(), pkg)) {
                if (log().isDebugEnabled()) {
                    log().debug("scheduleInterface: address/service: " + iface + '/' + svcName + " not scheduled, interface "
                              + "does not belong to package: " + pkg.getName());
                }
                continue;
            }
            
            
            matchingPkgs.add(collectionSpec);
        }
		return matchingPkgs;
	}

