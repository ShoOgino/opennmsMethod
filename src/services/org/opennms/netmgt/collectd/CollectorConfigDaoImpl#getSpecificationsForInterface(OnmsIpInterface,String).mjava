	public Collection getSpecificationsForInterface(OnmsIpInterface iface, String svcName) {
		Collection matchingPkgs = new LinkedList();

        CollectdConfigFactory cCfgFactory = CollectdConfigFactory.getInstance();
        
        /*
         * Compare interface/service pair against each collectd package
         * For each match, create new SnmpCollector object and
         * schedule it for collection
         */
        CollectdConfig config = cCfgFactory.getCollectdConfig();
        for (Iterator it = config.getPackages().iterator(); it.hasNext();) {
			CollectdPackage wpkg = (CollectdPackage) it.next();
			Package pkg = wpkg.getPackage();
        
            /*
             * Make certain the the current service is in the package
             * and enabled!
             */
             if (!wpkg.serviceInPackageAndEnabled(svcName)) {
                if (log().isDebugEnabled()) {
                    log().debug("scheduleInterface: address/service: " + iface + '/' + svcName + " not scheduled, service is not "
                              + "enabled or does not exist in package: "
                              + pkg.getName());
                }
                continue;
            }

            // Is the interface in the package?
            if (!wpkg.interfaceInPackage(iface.getIpAddress())) {
                if (log().isDebugEnabled()) {
                    log().debug("scheduleInterface: address/service: " + iface + '/' + svcName + " not scheduled, interface "
                              + "does not belong to package: " + pkg.getName());
                }
                continue;
            }
            
            Collection outageCalendars = new LinkedList();
            Enumeration enumeration = pkg.enumerateOutageCalendar();
            while (enumeration.hasMoreElements()) {
				String outageName = (String) enumeration.nextElement();
				outageCalendars.add(m_scheduledOutagesDao.get(outageName));
			}
            
            
            matchingPkgs.add(new CollectionSpecification(pkg, svcName, outageCalendars, getServiceCollector(svcName)));
        }
		return matchingPkgs;
	}

