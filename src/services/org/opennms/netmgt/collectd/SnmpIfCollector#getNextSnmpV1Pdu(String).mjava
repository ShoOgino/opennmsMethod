	/**
	 * This method constructs the next SnmpPduPacket (pdu) for sending
	 * to the remote node.
	 * 
	 * For SNMPv1, GET commands are built. Each constructed PDU contains 
	 * varbinds for all the objects to be collected for a single interface.  
	 * For objects whose instance id 
	 * is determined by ifIndex (such as ifOctetsIn or ifOctetsOut in the ifTable) 
	 * the interface index will be appended to the oid name within the varbind.  
	 * Therefore, for an SNMPv1 based collection the number of PDUs generated
	 * will be equal to the number interfaces in the remote node's ifTable.  As 
	 * each GET response is received the response count is incremented and 
	 * each subsequent call to getNextSnmpV1Pdu() will generate a PDU for collecting
	 * data pertaining to the next interface in the ifTable.
	 *
	 * @param ifAddress 	Interface address of the remote agent
	 * 
	 * @return An SnmpPduPacket appropriate for the SNMP version supported.
	 *
	 * @see org.opennms.protocols.snmp.SnmpNull		SnmpNull
	 * @see org.opennms.protocols.snmp.SnmpPduPacket 	SnmpPduPacket
	 */
	private SnmpPduPacket getNextSnmpV1Pdu(String ifAddress)
	{
		// Log4j category
		//
		Category log = ThreadCategory.getInstance(getClass());
		
		Integer index = null;
		SnmpPduPacket pdu = null;

		pdu = new SnmpPduRequest(SnmpPduPacket.GET);
		index = new Integer(m_indexArray[m_responses]);
		m_objList = ((IfInfo)m_ifMap.get(index)).getOidList();		
		if (log.isDebugEnabled())
			log.debug("getNextSnmpV1Pdu: ifindex: " + index + " oidListIndex=" + m_oidListIndex + " objCount=" + m_objList.size());
		
		pdu.setRequestId(SnmpPduPacket.nextSequence());
		
		// Generate new SnmpVarBind object.  Add each oid from the
		// object list until max var count is reached or there are no
		// more objects to collect.
		Object[] oidArray = m_objList.toArray();
		for (int ii=m_oidListIndex; 
			ii < m_objList.size() && (ii-m_oidListIndex) < m_maxVarsPerPdu;
			ii++)
		{
			MibObject mibObject = ((MibObject)oidArray[ii]);
			
			SnmpObjectId oid = null;
			String instance = mibObject.getInstance();
			
			// instance must be one of the following:
			//      1) null.  In this case the object's oid value is used as-is.
			// 	2) a special keyword which indicates a specific
			// 	value will be retrieved and appended to the object's oid.
			//	Currently the only supported keywords are:
			//		"ifIndex" - current interface's ifIndex is retrieved from the database
			//		"ifAddress" - current interface's IP address
			//	3) an integer value indicating the instance of the MIB object to be
			// 	retrieved.  This value will be appended to the object's oid.
			//
			if (instance == null)
			{
				oid = new SnmpObjectId(mibObject.getOid());
			}
			else if (instance.equals(MibObject.INSTANCE_IFINDEX))
			{
				// Verify that we have a valid ifIndex value
				if (index.intValue() == -1)
				{
					if(log.isEnabledFor(Priority.WARN))
					{
						log.warn("getNextSnmpV1Pdu: valid 'ifIndex' value unavailable for interface " + ifAddress + " and MIB object: " + mibObject.getOid());
						log.warn("getNextSnmpV1Pdu: substituting instance value 0.");
					}
					oid = new SnmpObjectId(mibObject.getOid() + ".0");
				}
				else
				{
					oid = new SnmpObjectId(mibObject.getOid() + "." + index.toString());
				}
			}
			else if (instance.equals(MibObject.INSTANCE_IFADDRESS))
			{
				// Append current interface's ip Address
				oid = new SnmpObjectId(mibObject.getOid() + "." + ifAddress);
			}
			else 
			{
				// Attempt to convert the instance string to an integer value
				// If the instance string cannot be converted to an integer just
				// use an instance string of "0".
				int temp = -1;
				try 
				{
					temp = Integer.parseInt(instance);
				}
				catch (NumberFormatException nfe)
				{
					instance = "0";  
				}

				oid = new SnmpObjectId(mibObject.getOid() + "." + instance);
			}	
			
			// Add the variable binding to the pdu
			if (log.isDebugEnabled()) 
				log.debug("getNextSnmpV1Pdu: adding oid to pdu: " + oid.toString());

			pdu.addVarBind(new SnmpVarBind(oid));
		}	
		
		if (log.isDebugEnabled())
			log.debug("getNextSnmpV1Pdu: finished building next pdu, num vars in pdu=" + pdu.getLength());
		return pdu;
	}

