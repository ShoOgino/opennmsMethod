    public ResponseProcessor buildNextPdu(PduBuilder pduBuilder) {
        
        int maxVars = Math.min(m_maxVarsPerPdu, m_colList.size());
        final List nonRepeaters = new ArrayList(maxVars);
        final List repeaters = new ArrayList(maxVars);
        int count = 0;
        for(int i = 0; i < m_colList.size() && count < m_maxVarsPerPdu; i++) {
            int index = i;
            SnmpColumn col = (SnmpColumn)m_colList.get(index);
            if (col.hasOidForNext()) {
                count++;
                if (col.isNonRepeater())
                    nonRepeaters.add(col);
                else
                    repeaters.add(col);
            }
        }
        
        for (Iterator it = nonRepeaters.iterator(); it.hasNext();) {
            SnmpColumn col = (SnmpColumn) it.next();
            pduBuilder.addOid(col.getOidForNext());
        }
        
        for (Iterator it = repeaters.iterator(); it.hasNext();) {
            SnmpColumn col = (SnmpColumn) it.next();
            pduBuilder.addOid(col.getOidForNext());
        }
        
       
        pduBuilder.setNonRepeaters(nonRepeaters.size());
        pduBuilder.setMaxRepititions(10);
        return new ResponseProcessor() {
            
            int currIndex = 0;
            
            public SnmpColumn getColumn() {
                if (currIndex < nonRepeaters.size())
                    return (SnmpColumn)nonRepeaters.get(currIndex);
                
                int repeaterIndex = (currIndex - nonRepeaters.size()) % repeaters.size();
                
                return (SnmpColumn)repeaters.get(repeaterIndex);
            }

            public void processResponse(SnmpObjId snmpObjId, Object val) {
                
                SnmpColumn col = getColumn();
                SnmpInstId inst = col.addResult(snmpObjId, val);
                if (inst != null) {
                    Map instMap = (Map)m_instanceMaps.get(inst);
                    if (instMap == null) {
                        instMap = new HashMap();
                        m_instanceMaps.put(inst, instMap);
                    }
                    instMap.put(col.getBase(), val);
                }
                currIndex++;
            }
            
        };
    }

