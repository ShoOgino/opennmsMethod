	/**
	 * This method is responsible for building an RRD-style update command for 
	 * the specified data source name.  Generated update command string has the
	 * following format:
	 *
	 * 	update <rrdFile> N:<value>
	 *
	 * @param repository	Directory where RRD file resides
	 * @param ds		RRD data source object.
	 * @param collectorEntry  Map of retrieved SNMP values for node or interface from 
	 * 			which the 'values' portion of the update command are taken.
	 * 
	 * @return "RRD_ERROR" if there was some error while attemnpting to build the 
	 *   			update string. 
	 *         RRD-style update command string if update is required.
	 *         null if no update is required because no SNMP value was retrieved for 
	 * 	 		the specified data source.
	 */
	private String buildRRDUpdateCmd(String repository, RRDDataSource ds, SNMPCollectorEntry collectorEntry)
	{
		// Log4j category
		//
		Category log = ThreadCategory.getInstance(getClass());
		
		String rrdFile = repository + File.separator + ds.getName() + ".rrd";
		
		boolean rrdError = false;
		String dsValue = null;
		
		// Build RRD 'update' command
		// Determine if the specified RRD data source matches a MIB object collected 
		// via SNMP. 
			
		// Make sure we have an actual object id value.
		if (ds.getOid() == null)
			return null;
				
		String instance = null;
		if (ds.getInstance().equals(MibObject.INSTANCE_IFINDEX))
			instance = (String)collectorEntry.get(SNMPCollectorEntry.IF_INDEX);
		else
			instance = ds.getInstance();
 
		String fullOid = ds.getOid() + "." + instance;
 
		SnmpSyntax snmpVar = (SnmpSyntax)collectorEntry.get(fullOid);  
		if (snmpVar == null)
		{
			// No value retrieved matching this oid
			return null;
		}
		else
		{
			if (log.isDebugEnabled())
				log.debug("issueRRDUpdate: name:oid:value -  " + ds.getName() + ":" + fullOid + ":" + snmpVar.toString());
				
			// RRD only supports the storage of integer data types.  If we see a
			// data type other than those listed below an error will be logged
			// and no RRD update will take place.
			// Am I missing any SNMP data types here?
			switch (snmpVar.typeId())
			{
				case SnmpSMI.SMI_INTEGER:
					dsValue= String.valueOf(((SnmpInt32)snmpVar).getValue());
					break;
				case SnmpSMI.SMI_COUNTER32:
					dsValue = String.valueOf(((SnmpCounter32)snmpVar).getValue());
					break;
				case SnmpSMI.SMI_COUNTER64:
					dsValue = String.valueOf(((SnmpCounter64)snmpVar).getValue());
					break;
				case SnmpSMI.SMI_GAUGE32:
					dsValue = String.valueOf(((SnmpGauge32)snmpVar).getValue());
					break;
				// *NOTE* Same as SnmpSMI.SMI_GAUGE32
				//case SnmpSMI.SMI_UNSIGNED32:
				//	dsValue = ((SnmpUInt32)snmpVar).getValue();
				//	break;
				case SnmpSMI.SMI_TIMETICKS:
					dsValue = String.valueOf(((SnmpTimeTicks)snmpVar).getValue());
					break;
				case SnmpSMI.SMI_STRING:
					dsValue = ((SnmpOctetString)snmpVar).toString();
					
					// Validate that the octet string value represents an
					// integer/double value, otherwise it can't be stored in the RRD database
					try
					{
						new Double(dsValue);
					}
					catch (NumberFormatException nfE)
					{
						rrdError = true;
						log.warn("buildRRDUpdateCmd: number format exception attempting to convert octet string value '" + 
							dsValue + "' to a numeric value for data source '" + ds.getName() + "'");
					}
					break;
				default:
					rrdError = true;
					if(log.isEnabledFor(Priority.WARN))
					{
						log.warn("buildRRDUpdateCmd: SNMP value of data source '" + 
								ds.getName() + 
								"' is not one of the supported data types by RRD, invalid typeID: " + 
								snmpVar.typeId());
						log.warn("buildRRDUpdateCmd: Valid RRD data types are:  COUNTER, GAUGE, DERIVE, & ABSOLUTE.  Please check content of 'DataCollection.xml' file.");
					}
					break;
			}
		}
		
		// Build  RRD 'update' command string
		String cmd = null;
		if (rrdError)
		{
			cmd = RRD_ERROR;
		}
		else if (dsValue != null)
		{
			cmd = "update " + rrdFile + " N:" + dsValue;
		}
		 
		return cmd;
		}

