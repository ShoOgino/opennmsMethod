    private SnmpPeer getPeer(NetworkInterface iface, Map parameters) throws CollectionError {
        SnmpPeer peer = (SnmpPeer) iface.getAttribute(SNMP_PEER_KEY);
        {
        if (peer == null)
            throw new CollectionError("SnmpPeer object not available for interface " + getInetAddress(iface));
        
        // Get configuration parameters
        //
        int timeout = ParameterMap.getKeyedInteger(parameters, "timeout", peer.getTimeout());
        int retries = ParameterMap.getKeyedInteger(parameters, "retries", peer.getRetries());
        int port = ParameterMap.getKeyedInteger(parameters, "port", peer.getPort());
        String oid = ParameterMap.getKeyedString(parameters, "oid", DEFAULT_OBJECT_IDENTIFIER);
        
        if (log().isDebugEnabled())
            log().debug("collect: service= " + SERVICE_NAME + " address= " + peer.getPeer().getHostAddress() + " collectionName=" + getCollectionName(parameters) + " port= " + port + " oid=" + oid + " timeout= " + timeout + " retries= " + retries);
        
        // set port, timeout and retries on SNMP peer object
        //
        peer.setPort(port);
        peer.setTimeout(timeout);
        peer.setRetries(retries);
        
        if (log().isDebugEnabled()) {
            String nl = System.getProperty("line.separator");
            log().debug("collect: SnmpPeer configuration: address: " + peer.getPeer() + nl + "      version: " + ((peer.getParameters().getVersion() == SnmpSMI.SNMPV1) ? "SNMPv1" : "SNMPv2") + nl + "      timeout: " + peer.getTimeout() + nl + "      retries: " + peer.getRetries() + nl + "      read commString: " + peer.getParameters().getReadCommunity() + nl + "      write commString: " + peer.getParameters().getWriteCommunity());
        }
        }
        return peer;
    }

