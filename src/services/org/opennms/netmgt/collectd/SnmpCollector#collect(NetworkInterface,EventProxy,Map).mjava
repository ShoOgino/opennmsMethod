    /**
     * Perform data collection.
     * 
     * @param iface
     *            Network interface to be data collected.
     * @param eproxy
     *            Eventy proxy for sending events.
     * @param parameters
     *            Key/value pairs from the package to which the interface
     *            belongs.
     */
    public int collect(NetworkInterface iface, EventProxy eproxy, Map parameters) {
        try {
            
            // -----------------------------------------------------------
            // 
            // Collect node and interface MIB data from the remote agent
            //
            // -----------------------------------------------------------
            SnmpNodeCollector nodeCollector = null;
            // construct the nodeCollector
            if (!getNodeInfo(iface).getOidList().isEmpty()) {
                nodeCollector = new SnmpNodeCollector(getInetAddress(iface), getNodeInfo(iface).getOidList());
            }
            
            IfNumberTracker ifNumber = null;
            SnmpIfCollector ifCollector = null;
            // construct the ifCollector
            if (hasInterfaceOids(iface)) {
                ifCollector = new SnmpIfCollector(getInetAddress(iface), getIfMap(iface));
                ifNumber = new IfNumberTracker();
            } 
            

            collectData(iface, ifNumber, nodeCollector, ifCollector);
            
            if (hasInterfaceOids(iface)) {
                int savedIfCount = getSavedIfCount(iface);
                
                int ifCount = ifNumber.getIfNumber();
                
                saveIfCount(iface, ifCount);
                
                log().debug("collect: interface: " + getHostAddress(iface) + " ifCount: " + ifCount + " savedIfCount: " + savedIfCount);
                
                // If saved interface count differs from the newly retreived
                // interface count the following must occur:
                // 
                // 1. generate forceRescan event so Capsd will rescan the
                // node, update the database, and generate the appropriate
                // events back to the poller.
                // 
                if (savedIfCount != -1) {
                    if (ifCount != savedIfCount) {
                        log().info("Number of interfaces on primary SNMP interface " + getHostAddress(iface) + " has changed, generating 'ForceRescan' event. ");
                        generateForceRescanEvent(getHostAddress(iface), eproxy);
                    }
                }
            }
            
            // Update RRD with values retrieved in SNMP collection
            boolean rrdError = updateRRDs(getCollectionName(parameters), iface, nodeCollector, ifCollector);
            
            if (rrdError) {
                log().warn("collect: RRD error during update for " + getHostAddress(iface));
            }
            
            //
            // return the status of the collection
            //
            return COLLECTION_SUCCEEDED;
        } catch (CollectionError e) {
            if (e.getCause() == null)
                log().error(e.getMessage());
            else
                log().error(e.getMessage(), e.getCause());
            return COLLECTION_FAILED;
        } catch (CollectionWarning e) {
            if (e.getCause() == null)
                log().warn(e.getMessage());
            else
                log().warn(e.getMessage(), e.getCause());
            return COLLECTION_FAILED;
        } catch (Throwable t) {
            log().error("Unexpected error during node SNMP collection for " + getHostAddress(iface), t);
            return COLLECTION_FAILED;
        }
    }

