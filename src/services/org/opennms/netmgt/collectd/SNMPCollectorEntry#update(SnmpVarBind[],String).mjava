    /**
     * <P>
     * This method is used to update this entry's map with the current
     * information from the agent.
     * 
     * </P>
     * This does not clear out any column in the actual row that does not have a
     * definition.
     * </P>
     * 
     * @param vars
     *            Array of SnmpVarBind objects containing all the SNMP data
     *            collected for a particular interface.
     * @param ifIndex
     *            The ifIndex (as a String) of the interface for which the
     *            collected SNMP data is relevant.
     * 
     */
    public void update(SnmpVarBind[] vars, String ifIndex) {
        // Log4j category
        //
        if (log().isDebugEnabled())
            log().debug("update: updating SNMPCollectorEntry map for ifIndex: " + ifIndex);

        try {
            // Iterate over the list of MibObjects representing the
            // objects configured for collection. For each MIB object
            // iterate over the SnmpVarBind array looking for the matching
            // variable. If a match is found, insert the SNMP-retrieved value
            // into the entry's map indexed by its object identifier.
            //
            for (int x = 0; x < m_objList.size(); x++) {
                MibObject mibObject = (MibObject) m_objList.get(x);

                // Build fullOid.
                //
                String instance = null;
                if (mibObject.getInstance().equals(MibObject.INSTANCE_IFINDEX))
                    instance = ifIndex;
                else
                    instance = mibObject.getInstance();

                String fullOid = mibObject.getOid() + "." + instance;

                SnmpObjectId id = new SnmpObjectId(fullOid);

                for (int y = 0; y < vars.length; y++) {
                    if (vars[y] != null && id.isRootOf(vars[y].getName())) {
                        try {
                            put(fullOid, vars[y].getValue());
                            if (log().isDebugEnabled())
                                log().debug("update: added oid:value pair: " + fullOid + " : " + vars[y].getValue());
                        } catch (NullPointerException e) {
                            if (log().isDebugEnabled())
                                log().debug("update: a null pointer exception occured", e);
                        }

                        break;
                    }
                }
            }
        } catch (Throwable t) {
            if (log().isEnabledFor(Priority.WARN))
                log().warn("update: unexpected exception: ", t);
        }
    }

