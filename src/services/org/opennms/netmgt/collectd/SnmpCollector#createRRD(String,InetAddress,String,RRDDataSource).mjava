	/**
	 * Creates a single RRD file for the specified RRD data source.
	 * 
	 * @param collectionName	Name of the collection 
	 * @param ipaddr		Interface address
	 * @param directory		RRD repository directory
	 * @param ds			RRD data source 
	 * 
	 * @return TRUE if new RRD file created, FALSE if RRD file was not created 
	 *            because it already existed.
	 */
	public boolean createRRD(String collectionName, InetAddress ipaddr, String directory, RRDDataSource ds)
	{
		Category log = ThreadCategory.getInstance(getClass());
		
		String fileName = ds.getName() + ".rrd";
		
		if (log.isDebugEnabled())
			log.debug("createRRD: rrd path and file name to create: " + directory + File.separator + fileName);

		// Create directories if necessary
		//
		File f = new File(directory);
		if (!f.isDirectory())
			if (!f.mkdirs())
				throw new RuntimeException("Unable to create RRD repository directory: " + directory);
				
		// Create the RRD file if it does not already exists for the current data source
		String completePath = directory + File.separator + fileName;
		f = new File(completePath);
		if (f.exists())
		{
			// Already exists, no need to create
			return false;
		}
		else
		{
			// Build RRD create command prefix
			String cmdPrefix = "create " + completePath + " --step " + 
				DataCollectionConfigFactory.getInstance().getStep(collectionName);
		    
			// Build datasource portion of RRD create command
			//
			String cmdDS = " DS:" + ds.getName() + ":" + 
						ds.getType() + ":" + 
						ds.getHeartbeat() + ":" + 
						ds.getMin() + ":" + 
						ds.getMax();

			// Build RRA portion of RRD create command
			//
			String cmdRRA = new String();
			List rraList = DataCollectionConfigFactory.getInstance().getRRAList(collectionName);
			Iterator j = rraList.iterator();
			while (j.hasNext())
			{
				String rra = (String)j.next();
				cmdRRA = cmdRRA.concat(" " + rra);
			}
		    
			// Put it all together...
			String cmd = cmdPrefix + cmdDS + cmdRRA;
		
			// Issue the RRD 'create' command
			if (log.isDebugEnabled())
				log.debug("createRRD: issuing RRD create command: " + cmd);

			String[] results = m_rrdInterface.launch(cmd);
		    
			// Sanity check results array
			if (results == null)
			{
				if(log.isEnabledFor(Priority.ERROR))
				{
					log.error("createRRD: Unexpected failure calling native method launch() with command string: " + cmd);
					log.error("createRRD: No error text available.");
				}
				throw new RuntimeException("RRD database 'create' failed for primary SNMP interface " + ipaddr.getHostAddress());
			}
		    
			// Check error string at index 0, will be null if create was successful
			if (results[0] != null)
			{
				if(log.isEnabledFor(Priority.ERROR))
					log.error("RRD database 'create' failed for " + ipaddr.getHostAddress() + ", reason: " + results[0]);
					throw new RuntimeException("RRD database 'create' failed for primary SNMP interface " + ipaddr.getHostAddress() + ", reason: " + results[0]);
			}
	
			return true;
		}
	}

