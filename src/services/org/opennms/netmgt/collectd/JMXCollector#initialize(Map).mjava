    /**
     * <P>
     * Initialize the service collector.
     * </P>
     * 
     * <P>
     * During initialization the JMX collector: - Initializes various
     * configuration factories. - Verifies access to the database - Verifies
     * access to RRD file repository - Verifies access to JNI RRD shared library -
     * Determines if JMX to be stored for only the node'sprimary interface or
     * for all interfaces.
     * </P>
     * 
     * @param parameters
     *            Not currently used.
     * 
     * @exception RuntimeException
     *                Thrown if an unrecoverable error occurs that prevents the
     *                plug-in from functioning.
     *  
     */

    public void initialize(Map parameters) {
        
        // Log4j category
        //
        Category log = ThreadCategory.getInstance(getClass());
        
        // Get local host name (used when generating threshold events)
        try {            
            m_host = InetAddress.getLocalHost().getHostName();
        } catch (UnknownHostException e) {            
            if (log.isEnabledFor(Priority.WARN))            
              log.warn("initialize: Unable to resolve local host name.", e);            
            m_host = "unresolved.host";
        }
        
        // Initialize the JMXDataCollectionConfigFactory
        try {
            JMXDataCollectionConfigFactory.reload();

        } catch (MarshalException ex) {
            if (log.isEnabledFor(Priority.FATAL))
                log.fatal("initialize: Failed to load data collection configuration",ex);
            throw new UndeclaredThrowableException(ex);
        } catch (ValidationException ex) {
            if (log.isEnabledFor(Priority.FATAL))
                log.fatal("initialize: Failed to load data collection configuration",ex);
            throw new UndeclaredThrowableException(ex);
        } catch (IOException ex) {
            if (log.isEnabledFor(Priority.FATAL))
                log.fatal("initialize: Failed to load data collection configuration",ex);
            throw new UndeclaredThrowableException(ex);
        }

        // Make sure we can connect to the database
        //
        java.sql.Connection ctest = null;
        try {
            DatabaseConnectionFactory.init();
            ctest = DatabaseConnectionFactory.getInstance().getConnection();
        } catch (IOException ie) {
            if (log.isEnabledFor(Priority.FATAL))
                log.fatal("initialize: IOException getting database connection", ie);
            throw new UndeclaredThrowableException(ie);
        } catch (MarshalException me) {
            if (log.isEnabledFor(Priority.FATAL))
                log.fatal("initialize: Marshall Exception getting database connection",me);
            throw new UndeclaredThrowableException(me);
        } catch (ValidationException ve) {
            if (log.isEnabledFor(Priority.FATAL))
                log.fatal("initialize: Validation Exception getting database connection",ve);
            throw new UndeclaredThrowableException(ve);
        } catch (SQLException sqlE) {
            if (log.isEnabledFor(Priority.FATAL))
                log.fatal("initialize: Failed getting connection to the database.",sqlE);
            throw new UndeclaredThrowableException(sqlE);
        } catch (ClassNotFoundException cnfE) {
            if (log.isEnabledFor(Priority.FATAL))
                log.fatal("initialize: Failed loading database driver.", cnfE);
            throw new UndeclaredThrowableException(cnfE);

        } finally {
            if (ctest != null) {
                try {
                    ctest.close();
                } catch (Throwable t) {
                    if (log.isEnabledFor(Priority.WARN))
                        log.warn("initialize: an exception occured while closing the JDBC connection",t);
                }
            }
        }
        
        // Save local reference to singleton instance
        //
        // m_rrdInterface = org.opennms.netmgt.rrd.Interface.getInstance();

        if (log.isDebugEnabled())
            log.debug("initialize: successfully instantiated JNI interface to RRD...");
        return;
    }

