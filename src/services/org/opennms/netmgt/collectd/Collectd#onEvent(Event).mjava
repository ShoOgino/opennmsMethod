	/**
	 * This method is invoked by the JMS topic session when a new event is
	 * available for processing. Currently only text based messages are
	 * processed by this callback. Each message is examined for its Universal
	 * Event Identifier and the appropriate action is taking based on each UEI.
	 * @param event
	 *            The event message.
	 * @param processor TODO
	 * 
	 */
	public void onEvent(Event event) {
	    // print out the uei
	    //
	    if (log().isDebugEnabled()) {
	        log().debug("received event, uei = " + event.getUei());
	    }
	
	if(event.getUei().equals(EventConstants.SCHEDOUTAGES_CHANGED_EVENT_UEI)) {
		log().warn("Reloading Collectd config factory");
		//Reload the collectd configuration
		try {
			CollectdConfigFactory.reload();
		} catch (Exception e) {
			e.printStackTrace();
			log().error("Failed to reload CollectdConfigFactory because "+e.getMessage());
		}
		refreshServicePackages();
	}
	else if(!event.hasNodeid() && !event.getUei().equals(EventConstants.CONFIGURE_SNMP_EVENT_UEI)) 
	{
		// For all other events, if the event doesn't have a nodeId it can't be processed.
		log().info("no database node id found, discarding event");
	    } else if (event.getUei().equals(EventConstants.NODE_GAINED_SERVICE_EVENT_UEI)) {
	        // If there is no interface then it cannot be processed
	        //
	        if (event.getInterface() == null || event.getInterface().length() == 0) {
	            log().info("no interface found, discarding event");
	        } else {
	            this.nodeGainedServiceHandler(event);
	        }
	    } else if (event.getUei().equals(EventConstants.PRIMARY_SNMP_INTERFACE_CHANGED_EVENT_UEI)) {
	        // If there is no interface then it cannot be processed
	        //
	        if (event.getInterface() == null || event.getInterface().length() == 0) {
	            log().info("no interface found, discarding event");
	        } else {
	            this.primarySnmpInterfaceChangedHandler(event);
	        }
	    } else if (event.getUei().equals(EventConstants.REINITIALIZE_PRIMARY_SNMP_INTERFACE_EVENT_UEI)) {
	        // If there is no interface then it cannot be processed
	        //
	        if (event.getInterface() == null || event.getInterface().length() == 0) {
	            log().info("no interface found, discarding event");
	        } else {
	            this.reinitializePrimarySnmpInterfaceHandler(event);
	        }
	    } else if (event.getUei().equals(EventConstants.INTERFACE_REPARENTED_EVENT_UEI)) {
	        // If there is no interface then it cannot be processed
	        //
	        if (event.getInterface() == null || event.getInterface().length() == 0) {
	            log().info("no interface found, discarding event");
	        } else {
	            this.interfaceReparentedHandler(event);
	        }
	    } else if (event.getUei().equals(EventConstants.NODE_DELETED_EVENT_UEI) || event.getUei().equals(EventConstants.DUP_NODE_DELETED_EVENT_UEI)) {
	        // NEW NODE OUTAGE EVENTS
	        this.nodeDeletedHandler(event);
	    } else if (event.getUei().equals(EventConstants.INTERFACE_DELETED_EVENT_UEI)) {
	        // If there is no interface then it cannot be processed
	        //
	        if (event.getInterface() == null || event.getInterface().length() == 0) {
	            log().info("no interface found, discarding event");
	        } else {
	            this.interfaceDeletedHandler(event);
	        }
	    } else if (event.getUei().equals(EventConstants.SERVICE_DELETED_EVENT_UEI)) {
	        // If there is no interface then it cannot be processed
	        //
	        if (event.getInterface() == null || event.getInterface().length() == 0) {
	            log().info("no interface found, discarding event");
	        } else if (event.getService() == null || event.getService().length() == 0) {
	            // If there is no service then it cannot be processed
	            //
	            log().info("no service found, discarding event");
	        } else {
	            this.serviceDeletedHandler(event);
	        }
	    } else if (event.getUei().equals(EventConstants.CONFIGURE_SNMP_EVENT_UEI)) {
	        this.configureSNMPHandler(event);
	    }
	
	}

