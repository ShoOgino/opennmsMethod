	/**
     * @param ds
     * @param collectorEntry
     * @param log
     * @param dsVal
     * @return
     * @throws Exception
     */
    public String getRRDValue(RRDDataSource ds, SNMPCollectorEntry collectorEntry) throws IllegalArgumentException {
        Category log = ThreadCategory.getInstance(getClass());
        String dsVal = null;
        
		// Make sure we have an actual object id value.
		if (ds.getOid() == null) 
			return null;
        		
		String instance = null;
		if (ds.getInstance().equals(MibObject.INSTANCE_IFINDEX))
			instance = (String)collectorEntry.get(SNMPCollectorEntry.IF_INDEX);
		else
			instance = ds.getInstance();
 
		String fullOid = ds.getOid() + "." + instance;
 
		SnmpSyntax snmpVar = (SnmpSyntax)collectorEntry.get(fullOid);  
		if (snmpVar == null)
			// No value retrieved matching this oid
			return null;

        if (log.isDebugEnabled())
				log.debug("issueRRDUpdate: name:oid:value -  " + ds.getName() + ":" + fullOid + ":" + snmpVar.toString());
				
			// RRD only supports the storage of integer data types.  If we see a
			// data type other than those listed below an error will be logged
			// and no RRD update will take place.
			// Am I missing any SNMP data types here?
			switch (snmpVar.typeId())
			{
				case SnmpSMI.SMI_INTEGER:
                     return snmpVar.toString();
				case SnmpSMI.SMI_COUNTER32:
					return snmpVar.toString();
				case SnmpSMI.SMI_COUNTER64:
					return snmpVar.toString();
				case SnmpSMI.SMI_GAUGE32:
					return snmpVar.toString();
				// *NOTE* Same as SnmpSMI.SMI_GAUGE32
				//case SnmpSMI.SMI_UNSIGNED32:
				//	dsValue = ((SnmpUInt32)snmpVar).getValue();
				//	break;
				case SnmpSMI.SMI_TIMETICKS:
					return ""+(((SnmpTimeTicks)snmpVar).getValue());
				case SnmpSMI.SMI_STRING:
					String dsValue = ((SnmpOctetString)snmpVar).toString();
					
					// Validate that the octet string value represents an
					// integer/double value, otherwise it can't be stored in the RRD database
					try
					{
						new Double(dsValue);
                          return dsValue;
					}
					catch (NumberFormatException nfE)
					{
						throw new IllegalArgumentException("number format exception attempting to convert octet string value '" + 
							dsValue + "' to a numeric value for data source '" + ds.getName() + "'");
                       
					}
				default:
                    throw new IllegalArgumentException("SNMP value of data source '" + 
                            ds.getName() + 
                            "' is not one of the supported data types by RRD, invalid typeID: " + 
                            snmpVar.typeId() + " Valid RRD data types are:  COUNTER, GAUGE, DERIVE, & ABSOLUTE.  Please check content of 'DataCollection.xml' file.");
			}
    }

