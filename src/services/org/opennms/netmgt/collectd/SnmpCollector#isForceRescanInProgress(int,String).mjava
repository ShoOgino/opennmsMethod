	/**
	 * This method is responsible for determining if a forced rescan has been
	 * started, but is not yet complete for the given nodeID
	 * 
	 * @param int
	 *            nodeID the nodeID of the node being checked
	 */
	private boolean isForceRescanInProgress(int nodeID, String addr) {
		Category log = ThreadCategory.getInstance(getClass());
		java.sql.Connection dsConn = null;
		boolean force = true;

		try {
			dsConn = DataSourceFactory.getInstance().getConnection();

			PreparedStatement stmt1 = dsConn
					.prepareStatement(SQL_GET_LATEST_FORCED_RESCAN_EVENTID);
			PreparedStatement stmt2 = dsConn
					.prepareStatement(SQL_GET_LATEST_RESCAN_COMPLETED_EVENTID);
			stmt1.setInt(1, nodeID);
			stmt1.setString(2, addr);
			stmt2.setInt(1, nodeID);
			try {
				// Issue database query
				ResultSet rs1 = stmt1.executeQuery();
				if (rs1.next()) {
					int forcedRescanEventId = rs1.getInt(1);
					try {
						ResultSet rs2 = stmt2.executeQuery();
						if (rs2.next()) {
							if (rs2.getInt(1) > forcedRescanEventId) {
								force = false;
							} else {
								if (log.isDebugEnabled()) {
									log.debug("Rescan already pending on "
											+ "node " + nodeID);
								}
							}
						}
					} catch (SQLException e) {
						throw e;
					} finally {
						stmt2.close();
					}
				} else {
					force = false;
				}
			} catch (SQLException e) {
				throw e;
			} finally {
				stmt1.close();
			}
		} catch (SQLException e) {
			log.error("Failed getting connection to the database.", e);
			throw new UndeclaredThrowableException(e);
		} finally {
			// Done with the database so close the connection
			try {
				dsConn.close();
			} catch (SQLException e) {
				log
						.info("SQLException while closing database connection",
								e);
			}
		}
		return force;
	}

