    /**
     * Initialize the service collector. During initialization the SNMP
     * collector:
     * <ul>
     * <li>Initializes various configuration factories.</li>
     * <li>Verifies access to the database.</li>
     * <li>Verifies access to RRD file repository.</li>
     * <li>Verifies access to JNI RRD shared library.</li>
     * <li>Determines if SNMP to be stored for only the node's primary
     * interface or for all interfaces.</li>
     * </ul>
     * 
     * @param parameters
     *            Not currently used.
     * @exception RuntimeException
     *                Thrown if an unrecoverable error occurs that prevents
     *                the plug-in from functioning.
     */
    public void initialize(Map parameters) {
        // Log4j category
        Category log = log();

        // Get local host name (used when generating threshold events)
        try {
            m_host = InetAddress.getLocalHost().getHostName();
        } catch (UnknownHostException e) {
            log.warn("initialize: Unable to resolve local host name.", e);
            m_host = "unresolved.host";
        }

        // Initialize the SnmpPeerFactory
        try {
            SnmpPeerFactory.init();
        } catch (MarshalException ex) {
            log.fatal("initialize: Failed to load SNMP configuration", ex);
            throw new UndeclaredThrowableException(ex);
        } catch (ValidationException ex) {
            log.fatal("initialize: Failed to load SNMP configuration", ex);
            throw new UndeclaredThrowableException(ex);
        } catch (IOException ex) {
            log.fatal("initialize: Failed to load SNMP configuration", ex);
            throw new UndeclaredThrowableException(ex);
        }

        // Initialize the DataCollectionConfigFactory
        try {
            DataCollectionConfigFactory.reload();

        } catch (MarshalException ex) {
            log.fatal("initialize: Failed to load data collection "
                    + "configuration", ex);
            throw new UndeclaredThrowableException(ex);
        } catch (ValidationException ex) {
            log.fatal("initialize: Failed to load data collection "
                    + "configuration", ex);
            throw new UndeclaredThrowableException(ex);
        } catch (IOException ex) {
            log.fatal("initialize: Failed to load data collection "
                    + "configuration", ex);
            throw new UndeclaredThrowableException(ex);
        }

        // Make sure we can connect to the database
        java.sql.Connection ctest = null;
        try {
            DatabaseConnectionFactory.init();
            ctest = DatabaseConnectionFactory.getInstance().getConnection();
        } catch (IOException ie) {
            log.fatal("initialize: IOException getting database connection",
                      ie);
            throw new UndeclaredThrowableException(ie);
        } catch (MarshalException me) {
            log.fatal("initialize: Marshall Exception getting database "
                    + "connection", me);
            throw new UndeclaredThrowableException(me);
        } catch (ValidationException ve) {
            log.fatal("initialize: Validation Exception getting database "
                    + "connection", ve);
            throw new UndeclaredThrowableException(ve);
        } catch (SQLException sqlE) {
            log.fatal("initialize: Failed getting connection to the "
                    + "database.", sqlE);
            throw new UndeclaredThrowableException(sqlE);
        } catch (ClassNotFoundException cnfE) {
            log.fatal("initialize: Failed loading database driver.", cnfE);
            throw new UndeclaredThrowableException(cnfE);
        } finally {
            if (ctest != null) {
                try {
                    ctest.close();
                } catch (Throwable t) {
                    log.warn(
                             "initialize: an exception occured while closing "
                                     + "the JDBC connection", t);
                }
            }
        }

        // Get path to RRD repository
        m_rrdPath = DataCollectionConfigFactory.getInstance().getRrdRepository();
        if (m_rrdPath == null) {
            throw new RuntimeException("Configuration error, failed to "
                    + "retrieve path to RRD repository.");
        }

        /*
         * TODO: make a path utils class that has the below in it strip the
         * File.separator char off of the end of the path.
         */
        if (m_rrdPath.endsWith(File.separator)) {
            m_rrdPath = m_rrdPath.substring(
                                            0,
                                            (m_rrdPath.length()
                                                    - File.separator.length()));
        }
        if (log.isDebugEnabled()) {
            log.debug("initialize: SNMP RRD file repository path: "
                    + m_rrdPath);
        }

        /*
         * If the RRD file repository directory does NOT already exist, create
         * it.
         */
        File f = new File(m_rrdPath);
        if (!f.isDirectory()) {
            if (!f.mkdirs()) {
                throw new RuntimeException("Unable to create RRD file "
                        + "repository, path: " + m_rrdPath);
            }
        }

        try {
            RrdUtils.initialize();
        } catch (RrdException e) {
            log.error("initialize: Unable to initialize RrdUtils", e);
            throw new RuntimeException("Unable to initialize RrdUtils", e);
        }

        // Save local reference to singleton instance
        // m_rrdInterface = org.opennms.netmgt.rrd.Interface.getInstance();
        log.debug("initialize: successfully instantiated JNI interface "
                + "to RRD...");

        return;
    }

