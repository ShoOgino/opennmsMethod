	/** 
	 * This method is responsible for handling interfaceDeleted events.
	 * 
	 * @param event	The event to process.
	 *
	 */
	private void interfaceDeletedHandler(Event event)
	{
		Category log = ThreadCategory.getInstance(getClass());
		
		int nodeId = (int)event.getNodeid();
		String ipAddr = event.getInterface();
				
		// Iterate over the collectable services list and mark any entries
		// which match the deleted nodeId/IP address pair for deletion
		synchronized(m_collectableServices)
		{
			CollectableService cSvc = null;
			ListIterator liter = m_collectableServices.listIterator();
			while (liter.hasNext())
			{
				cSvc = (CollectableService)liter.next();
				
				// Only interested in entries with matching nodeId and IP address
				InetAddress addr = (InetAddress)cSvc.getAddress();
				if ( !(cSvc.getNodeId() == nodeId && 
						addr.getHostName().equals(ipAddr)) )
					continue;
				
				synchronized(cSvc)
				{
					// Retrieve the CollectorUpdates object associated with
					// this CollectableService if one exists. 
					CollectorUpdates updates = cSvc.getCollectorUpdates();
					
					// Now set the update's deletion flag so the next
					// time it is selected for execution by the scheduler
					// the collection will be skipped and the service will not
					// be rescheduled.
					updates.markForDeletion();
				}
				
				// Now safe to remove the collectable service from 
				// the collectable services list
				liter.remove();
			}
		}
			
		if (log.isDebugEnabled())
			log.debug("interfaceDeletedHandler: processing of interfaceDeleted event for " + 
				nodeId + "/" + ipAddr + " completed.");
	}

