    /**
     * Returns a DHCP DISCOVER, INFORM, or REQUEST  message that can be sent to
     * the DHCP server. DHCP server should respond with a DHCP OFFER, ACK, or 
     * NAK message in response..
     * 
     * @param (InetAddress) addr
     *            The address to poll
     * 
     * @param (byte) mType
     *            The type of DHCP message to send
     *            (DISCOVER, INFORM, or REQUEST)
     * 
     * @return The message to send to the DHCP server.
     * 
     */
    private static Message getPollingRequest(InetAddress addr, byte mType) {
        Category log = ThreadCategory.getInstance(Poller.class);
        int xid = 0;
        synchronized (Poller.class) {
            xid = ++m_nextXid;
        }
        DHCPMessage messageOut = new DHCPMessage();
	byte[] rawIp = addr.getAddress();
        // if targetOffset = true, we don't want to REQUEST the DHCP server's own IP
        // so change it by 1, trying to avoid the subnet address
        // and the broadcast address.
        if ( targetOffset ) {
            if (rawIp[3] % 2 == 0 && rawIp[3] != 0) {
                --rawIp[3];
            } else {
                ++rawIp[3];
            }
        }
        // fill DHCPMessage object
        //
        messageOut.setOp((byte) 1);
        messageOut.setHtype((byte) 1);
        messageOut.setHlen((byte) 6);
        messageOut.setXid(xid);
        messageOut.setSecs((short) 0);
        messageOut.setChaddr(s_hwAddress); // set hardware address
        if(relayMode) {
            messageOut.setHops((byte) 1);
            messageOut.setGiaddr(s_myIpAddress); // set relay address for replies
        } else {
            messageOut.setHops((byte) 0);
            messageOut.setFlags(BROADCAST_FLAG);
        }

        messageOut.setOption(MESSAGE_TYPE, new byte[] { mType });
        if(mType == DHCPMessage.REQUEST) {
            if (reqTargetIp) {
                messageOut.setOption(REQUESTED_IP, rawIp);
                messageOut.setCiaddr(rawIp);
            } else {
                messageOut.setOption(REQUESTED_IP, s_requestIpAddress);
                messageOut.setCiaddr(s_requestIpAddress);
            }
        }
        if(mType == DHCPMessage.INFORM) {
          messageOut.setOption(REQUESTED_IP, s_myIpAddress);
          messageOut.setCiaddr(s_myIpAddress);
        }

        return new Message(addr, messageOut);
    }

