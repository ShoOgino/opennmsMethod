		/**
		 * Does the work of the thread.  Listens for unicasted responses
		 * from the DHCP server.  If a response is received it will be
		 * forwarded to the client which requested that the DHCP request
		 * be generated.
		 */
		public void run ()
		{
			Category log = ThreadCategory.getInstance(this.getClass());
			
			if (log.isDebugEnabled())
			log.debug("Unicast listener thread " + this.getName() + " running...");
			
			// set socket timeout to 1 second so the value of m_keepListening
			// can be checked periodically
			try
			{
				m_incomingUdp.setSoTimeout(1000);
			}
			catch (IOException ioE)
			{
				log.error("UnicastListener.run: unable to set socket timeout, reason: " + ioE.getLocalizedMessage());
				log.debug(ioE);
				m_keepListening = true;
			}
			
			// According to RFC 2131 a DHCP client must be prepared to receive a 
			// DHCP message up to 576 bytes.  Although larger messages can 
			// be negotiated between the DHCP client and server if desired.
			//
			// Allocating a 2k buffer which should be more than sufficient.
			// Any incoming packet larger than this size will cause an
			// arrayOutOfBoundsException to be generated, in that case an
			// error message will be logged and the packet will be discarded.
			//
			byte[] dgbuf = new byte[2048];

			// Wait for any incoming unicast responses.
			//
			while(m_keepListening)
			{
				try
				{
					DatagramPacket pkt = new DatagramPacket(dgbuf, dgbuf.length);
					m_incomingUdp.receive(pkt);
					Message msg = new Message(pkt.getAddress(), new DHCPMessage(pkt.getData()));
	
					try
					{
						m_client.sendMessage(msg);
					}
					catch(IOException ex)
					{
						log.warn("Error sending unicast response to client " + m_client.getName());
					}
				}
				catch(InterruptedIOException ex)
				{
					// Check exit flag
					continue;
				}
				catch(ArrayIndexOutOfBoundsException oobE)
				{
					// Packet was too large for buffer...log and discard
					log.debug("UnicastListener.run: array out of bounds exception.", oobE);
					log.warn("UnicastListener.run: malformed DHCP packet, packet too large for buffer (buffer sz=" + dgbuf.length + "), discarding packet.");
				}
				catch (IOException ioE)
				{
					log.error("UnicastListener.run: io exception receiving response", ioE);
					m_keepListening=false;
				}
				catch (Exception E)
				{
					log.error("UnicastListener.run: exception receiving response", E);
					m_keepListening=false;
				}
			}
			
			if (log.isDebugEnabled())
				log.debug("Unicast listener thread " + this.getName() + " exiting...");
		}

