	/**
	 * The constructor
	 */
	TrapQueueProcessor(FifoQueue backlog, boolean newSuspect,
			EventIpcManager eventMgr) {
		m_backlogQ = backlog;
		m_newSuspect = newSuspect;
		m_eventMgr = eventMgr;
		try {
			m_localAddr = InetAddress.getLocalHost().getHostName();
		} catch (UnknownHostException uhE) {
			Category log = ThreadCategory.getInstance(getClass());
			m_localAddr = "localhost";
			log.error("<ctor>: Error looking up local hostname", uhE);
		}
		
		m_syntaxToEvents = new SyntaxToEvent[] {
			new SyntaxToEvent(SnmpInt32.class, EventConstants.TYPE_SNMP_INT32,
				EventConstants.XML_ENCODING_TEXT),
			new SyntaxToEvent(SnmpNull.class, EventConstants.TYPE_SNMP_NULL,
				EventConstants.XML_ENCODING_TEXT),
			new SyntaxToEvent(SnmpObjectId.class, EventConstants.TYPE_SNMP_OBJECT_IDENTIFIER,
				EventConstants.XML_ENCODING_TEXT),
			new SyntaxToEvent(SnmpIPAddress.class, EventConstants.TYPE_SNMP_IPADDRESS,
				EventConstants.XML_ENCODING_TEXT),
			new SyntaxToEvent(SnmpTimeTicks.class, EventConstants.TYPE_SNMP_TIMETICKS,
				EventConstants.XML_ENCODING_TEXT),
			new SyntaxToEvent(SnmpCounter32.class, EventConstants.TYPE_SNMP_COUNTER32,
				EventConstants.XML_ENCODING_TEXT),
			new SyntaxToEvent(SnmpGauge32.class, EventConstants.TYPE_SNMP_GAUGE32,
				EventConstants.XML_ENCODING_TEXT),
			new SyntaxToEvent(SnmpOpaque.class, EventConstants.TYPE_SNMP_OPAQUE,
				EventConstants.XML_ENCODING_BASE64),
			new SyntaxToEvent(SnmpCounter64.class, EventConstants.TYPE_SNMP_COUNTER64,
				EventConstants.XML_ENCODING_TEXT),
			new SyntaxToEvent(Object.class, EventConstants.TYPE_STRING,
				EventConstants.XML_ENCODING_TEXT)
		};
	}

