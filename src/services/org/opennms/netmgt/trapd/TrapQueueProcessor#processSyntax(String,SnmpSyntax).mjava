	public Parm processSyntax(String name, SnmpSyntax obj) {
		Category log = ThreadCategory.getInstance(getClass());
		Value val = new Value();

		if (obj instanceof SnmpInt32) {
			val.setType(EventConstants.TYPE_SNMP_INT32);
			val.setEncoding(EventConstants.XML_ENCODING_TEXT);
			val.setContent(EventConstants.toString(
					EventConstants.XML_ENCODING_TEXT, obj));
		} else if (obj instanceof SnmpNull) {
			val.setType(EventConstants.TYPE_SNMP_NULL);
			val.setEncoding(EventConstants.XML_ENCODING_TEXT);
			val.setContent(EventConstants.toString(
					EventConstants.XML_ENCODING_TEXT, obj));
		} else if (obj instanceof SnmpObjectId) {
			val.setType(EventConstants.TYPE_SNMP_OBJECT_IDENTIFIER);
			val.setEncoding(EventConstants.XML_ENCODING_TEXT);
			val.setContent(EventConstants.toString(
					EventConstants.XML_ENCODING_TEXT, obj));
		} else if (obj instanceof SnmpIPAddress) {
			val.setType(EventConstants.TYPE_SNMP_IPADDRESS);
			val.setEncoding(EventConstants.XML_ENCODING_TEXT);
			val.setContent(EventConstants.toString(
					EventConstants.XML_ENCODING_TEXT, obj));
		} else if (obj instanceof SnmpTimeTicks) {
			val.setType(EventConstants.TYPE_SNMP_TIMETICKS);
			val.setEncoding(EventConstants.XML_ENCODING_TEXT);
			val.setContent(EventConstants.toString(
					EventConstants.XML_ENCODING_TEXT, obj));
		} else if (obj instanceof SnmpCounter32) {
			val.setType(EventConstants.TYPE_SNMP_COUNTER32);
			val.setEncoding(EventConstants.XML_ENCODING_TEXT);
			val.setContent(EventConstants.toString(
					EventConstants.XML_ENCODING_TEXT, obj));
		} else if (obj instanceof SnmpGauge32) {
			val.setType(EventConstants.TYPE_SNMP_GAUGE32);
			val.setEncoding(EventConstants.XML_ENCODING_TEXT);
			val.setContent(EventConstants.toString(
					EventConstants.XML_ENCODING_TEXT, obj));
		} else if (obj instanceof SnmpOpaque) {
			val.setType(EventConstants.TYPE_SNMP_OPAQUE);
			val.setEncoding(EventConstants.XML_ENCODING_BASE64);
			val.setContent(EventConstants.toString(
					EventConstants.XML_ENCODING_BASE64, obj));
		} else if (obj instanceof SnmpOctetString) {
			//
			// check for non-printable characters. If they
			// exist then print the string out as hexidecimal
			//
			boolean asHex = false;
			byte[] data = ((SnmpOctetString) obj).getString();
			for (int x = 0; x < data.length; x++) {
				byte b = data[x];
				if ((b < 32 && b != 9 && b != 10 && b != 13 && b != 0)
						|| b == 127) {
					asHex = true;
					break;
				}
			}

			data = null;

			String encoding = asHex ? EventConstants.XML_ENCODING_BASE64
					: EventConstants.XML_ENCODING_TEXT;

			val.setType(EventConstants.TYPE_SNMP_OCTET_STRING);
			val.setEncoding(encoding);
			val.setContent(EventConstants.toString(encoding, obj));

			// DEBUG
			if (!asHex && log.isDebugEnabled()) {
				log.debug("snmpReceivedTrap: string varbind: "
						+ (((SnmpOctetString) obj).toString()));
			}
		} else if (obj instanceof SnmpCounter64) {
			val.setType(EventConstants.TYPE_SNMP_COUNTER64);
			val.setEncoding(EventConstants.XML_ENCODING_TEXT);
			val.setContent(EventConstants.toString(
					EventConstants.XML_ENCODING_TEXT, obj));
		} else {
			val.setType(EventConstants.TYPE_STRING);
			val.setEncoding(EventConstants.XML_ENCODING_TEXT);
			val.setContent(obj.toString());
		}

		Parm parm = new Parm();
		parm.setParmName(name);
		parm.setValue(val);

		return parm;
	}

