	/**
	 * Process a V1 trap and convert it to an event. Once the event is
	 * formatted, send it to eventd.
	 * 
	 * @param info
	 *            V1 trap
	 */
	private void process(V1TrapInformation info) {
		Category log = ThreadCategory.getInstance(getClass());

		SnmpPduTrap pdu = info.getPdu();
		InetAddress agent = info.getAgent();

		IPv4Address addr = new IPv4Address(agent);
		// XXX Why do we get the trapInterface from the PDU here, whereas for V2, we get it from
		// the agent address?
		String trapInterface = pdu.getAgentAddress().toString();
		// I've changed it to match the way that we do things in V2 so that my test for V1 succeeds.
		//String trapInterface = addr.toString();

		Event event = new Event();
		event.setSource("trapd");
		event.setHost(addr.toString());
		event.setSnmphost(trapInterface);
		event.setInterface(trapInterface);
		event.setTime(org.opennms.netmgt.EventConstants
				.formatToString(new java.util.Date()));

		String ipNodeId = TrapdIPMgr.getNodeId(trapInterface);

		if (ipNodeId != null) {
			int intNodeId = Integer.parseInt(ipNodeId);
			event.setNodeid((long) intNodeId);
		}

		if (log.isDebugEnabled()) {
			log.debug("V1 trap - trapInterface: " + trapInterface);
		}

		//
		// set the snmp information
		//
		Snmp snmpInfo = new Snmp();

		// id
		// 
		// NOTE: Force leading "." (dot) on all id's
		String entId = pdu.getEnterprise().toString();
		if (!entId.startsWith(".")) {
			entId = "." + entId;
		}
		snmpInfo.setId(entId);

		// version
		snmpInfo.setVersion("v1");

		// specific
		snmpInfo.setSpecific(pdu.getSpecific());

		// generic
		snmpInfo.setGeneric(pdu.getGeneric());

		// community
		snmpInfo.setCommunity(new String(info.getCommunity().getString()));

		// time-stamp
		snmpInfo.setTimeStamp(pdu.getTimeStamp());

		event.setSnmp(snmpInfo);

		Parms parms = new Parms();

		for (int i = 0; i < pdu.getLength(); i++) {
			String name = pdu.getVarBindAt(i).getName().toString();
			SnmpSyntax obj = pdu.getVarBindAt(i).getValue();

			parms.addParm(processSyntax(name, obj));
		} // end for loop

		event.setParms(parms);
		
		processTrapEvent(event, trapInterface, ipNodeId);
	}

