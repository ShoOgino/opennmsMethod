	/**
	 * Convenience method for retrieving the list of known IP addresses
	 * from the database.
	 */
	private ArrayList getKnownIpList()
		throws SQLException
	{
		ArrayList knownIps = new ArrayList();

		java.sql.Connection conn = null;
		try
		{
			DatabaseConnectionFactory.reload();
			conn = DatabaseConnectionFactory.getInstance().getConnection();
			//conn.setReadOnly(true);

			//get the list of known ip addresses
			Statement stmt = conn.createStatement();

			// The first column should be the ip address.
			ResultSet rs = stmt.executeQuery(GET_KNOWN_IPS);

			// construct known nodes vector
			while(rs.next())
			{
				String ipAddr = rs.getString(1);
				knownIps.add(ipAddr);
			}

			try
			{
				rs.close();
			}
			catch(SQLException sqlE)
			{
				Category log = ThreadCategory.getInstance(getClass());

				log.warn("An error occured closing the result set, ignoring", sqlE);
			}

			try
			{
				stmt.close();
			}
			catch(SQLException sqlE)
			{
				Category log = ThreadCategory.getInstance(getClass());

				log.warn("An error occured closing the statement, ignoring", sqlE);
			}
		}
		catch (IOException ie)
		{
			Category log = ThreadCategory.getInstance(getClass());
			log.fatal("IOException getting database connection", ie);
			throw new UndeclaredThrowableException(ie);
		}
		catch (MarshalException me)
		{
			Category log = ThreadCategory.getInstance(getClass());
			log.fatal("Marshall Exception getting database connection", me);
			throw new UndeclaredThrowableException(me);
		}
		catch (ValidationException ve)
		{
			Category log = ThreadCategory.getInstance(getClass());
			log.fatal("Validation Exception getting database connection", ve);
			throw new UndeclaredThrowableException(ve);
		}
		catch (ClassNotFoundException e)
		{
			Category log = ThreadCategory.getInstance(getClass());
			log.fatal("Failed to find database driver", e);
			throw new UndeclaredThrowableException(e);
		}
		finally
		{
			try
			{
				if(conn != null)
					conn.close();
			}
			catch(SQLException sqlE)
			{
				Category log = ThreadCategory.getInstance(getClass());
				log.warn("An error occured releasing the database connection, ignoring", sqlE);
			}
		}

		return knownIps;
	}

