    /**
     * This method is invoked by the EventIpcManager when a new event is
     * available for processing. Each message is examined for its Universal
     * Event Identifier and the appropriate action is taking based on each UEI.
     * 
     * @param event
     *            The event
     * 
     */
    public void onEvent(Event event) {
        Category log = ThreadCategory.getInstance(getClass());

        String eventUei = event.getUei();
        if (eventUei == null)
            return;

        if (log.isDebugEnabled())
            log.debug("Received event: " + eventUei);

        if (eventUei.equals(EventConstants.NODE_GAINED_INTERFACE_EVENT_UEI)) {
            // add to known nodes
            if (Long.toString(event.getNodeid()) != null && event.getInterface() != null) {
                TrapdIPMgr.setNodeId(event.getInterface(), event.getNodeid());
            }
            if (log.isDebugEnabled())
                log.debug("Added " + event.getInterface() + " to known node list");
        } else if (eventUei.equals(EventConstants.INTERFACE_DELETED_EVENT_UEI)) {
            // remove from known nodes
            if (event.getInterface() != null) {
                TrapdIPMgr.removeNodeId(event.getInterface());
            }
            if (log.isDebugEnabled())
                log.debug("Removed " + event.getInterface() + " from known node list");
        } else if (eventUei.equals(EventConstants.INTERFACE_REPARENTED_EVENT_UEI)) {
            // add to known nodes
            if (Long.toString(event.getNodeid()) != null && event.getInterface() != null) {
                TrapdIPMgr.setNodeId(event.getInterface(), event.getNodeid());
            }
            if (log.isDebugEnabled())
                log.debug("Reparented " + event.getInterface() + " to known node list");
        }
    }

