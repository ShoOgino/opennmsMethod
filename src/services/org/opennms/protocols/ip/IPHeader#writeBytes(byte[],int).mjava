    /**
     * Stores the IP header as an array of bytes into the passed data buffer.
     * The IP header is written starting at the specified offset, and the new
     * offset is returned to the caller.
     * 
     * @param data
     *            The location to write the data
     * @param offset
     *            The offset to start storing information.
     * 
     * @return The new offset just beyond the last written byte.
     * 
     */
    public int writeBytes(byte[] data, int offset) {
        data[offset++] = (byte) ((m_version << 4) | (m_hdrlen & 0xf));
        data[offset++] = (byte) m_tos;
        data[offset++] = (byte) ((m_length >> 8) & 0xff);
        data[offset++] = (byte) (m_length & 0xff);
        data[offset++] = (byte) ((m_identity >> 8) & 0xff);
        data[offset++] = (byte) (m_identity & 0xff);
        data[offset++] = (byte) ((m_flags << 5) | ((m_fragOffset >> 8) & 0xff));
        data[offset++] = (byte) (m_fragOffset & 0xff);
        data[offset++] = (byte) m_ttl;
        data[offset++] = (byte) m_protocol;
        data[offset++] = (byte) ((m_checksum >> 8) & 0xff);
        data[offset++] = (byte) (m_checksum & 0xff);
        data[offset++] = (byte) ((m_srcAddr >> 24) & 0xff);
        data[offset++] = (byte) ((m_srcAddr >> 16) & 0xff);
        data[offset++] = (byte) ((m_srcAddr >> 8) & 0xff);
        data[offset++] = (byte) (m_srcAddr & 0xff);
        data[offset++] = (byte) ((m_dstAddr >> 24) & 0xff);
        data[offset++] = (byte) ((m_dstAddr >> 16) & 0xff);
        data[offset++] = (byte) ((m_dstAddr >> 8) & 0xff);
        data[offset++] = (byte) (m_dstAddr & 0xff);
        System.arraycopy(m_options, 0, data, offset, m_options.length);
        offset += m_options.length;
        return offset;
    }

