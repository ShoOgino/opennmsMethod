    /**
     * Returns a list of options that are associated with the IP header.
     * 
     * @return The list of current options.
     */
    public List getOptions() throws InstantiationException {
        //
        // check for null data first
        //
        if (m_options == null)
            return new ArrayList();

        //
        // Process the options
        //
        List options = new ArrayList();
        int offset = 0;
        while (offset < m_options.length) {
            switch ((int) m_options[offset++] & 0xff) {
            case Option.CODE_END_OF_OPTION_LIST:
                options.add(new EndOfOptions());
                break;

            case Option.CODE_LOOSE_SOURCE_ROUTE: {
                LooseSourceRouteOption opt = new LooseSourceRouteOption();
                int addrs = ((int) m_options[offset] & 0xff) - 3;
                offset += 2;

                for (int i = 0; i < addrs / 4; i++) {
                    int ip = 0;
                    for (int j = 0; j < 4; j++)
                        ip = ip << 8 + ((int) m_options[offset++] & 0xff);

                    opt.add(new IPv4Address(ip));
                }
                options.add(opt);
            }
                break;

            case Option.CODE_STRICT_SOURCE_ROUTE: {
                StrictSourceRouteOption opt = new StrictSourceRouteOption();
                int addrs = ((int) m_options[offset] & 0xff) - 3;
                offset += 2;

                for (int i = 0; i < addrs / 4; i++) {
                    int ip = 0;
                    for (int j = 0; j < 4; j++)
                        ip = ip << 8 + ((int) m_options[offset++] & 0xff);

                    opt.add(new IPv4Address(ip));
                }
                options.add(opt);
            }
                break;

            case Option.CODE_ROUTE_RECORD: {
                LooseSourceRouteOption opt = new LooseSourceRouteOption();
                int addrs = ((int) m_options[offset] & 0xff) - 3;
                offset += 2;

                for (int i = 0; i < addrs / 4; i++) {
                    int ip = 0;
                    for (int j = 0; j < 4; j++)
                        ip = ip << 8 + ((int) m_options[offset++] & 0xff);

                    opt.add(new IPv4Address(ip));
                }
                options.add(opt);
            }
                break;

            default:
                throw new InstantiationException("Unsupported Option Type");

            } // end switch
        }

        return options;
    } // end method

