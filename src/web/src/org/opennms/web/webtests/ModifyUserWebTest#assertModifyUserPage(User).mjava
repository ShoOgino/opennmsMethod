    private void assertModifyUserPage(User user) {
        
        assertNotNull(user.getUserId());
        assertFalse("".equals(user.getUserId()));
        
        assertTitleEquals("Modify User | User Admin | OpenNMS Web Console");
        assertHeaderPresent("Modify User", null, new String[] {"Home", "Admin", "Users and Groups", "User List", "Modify User"});
        assertFooterPresent(null);

        assertTextPresent("Modify User: "+user.getUserId());
        
        setWorkingForm("modifyUser");
        assertFormElementEquals("userID", user.getUserId());
        assertFormElementEquals("fullName", (user.getFullName() == null ? "" : user.getFullName()));
        assertFormElementEquals("userComments", (user.getUserComments() == null ? "" : user.getUserComments()));
        assertFormElementEquals("email", getContact(user, "email"));
        assertFormElementEquals("pemail", getContact(user, "pemail"));
        assertFormElementEquals("xmppAddress", getContact(user, "xmppAddress"));
        assertFormElementEquals("numericalService", getServiceProvider(user, "numericPage"));
        assertFormElementEquals("numericalPin", getContact(user, "numericPage"));
        assertFormElementEquals("textService", getServiceProvider(user, "textPage"));
        assertFormElementEquals("textPin", getContact(user, "textPage"));
        
        String[] dutySchedules = user.getDutySchedule();
        assertFormElementEquals("dutySchedules", String.valueOf(dutySchedules.length));
        for(int i = 0; i < dutySchedules.length; i++) {
            DutySchedule sched = new DutySchedule(dutySchedules[i]);
            assertFormElementPresent("deleteDuty"+i);
            assertCheckboxSelection("duty"+i+"Mo", sched.hasDay(DutySchedule.MONDAY));
            assertCheckboxSelection("duty"+i+"Tu", sched.hasDay(DutySchedule.TUESDAY));
            assertCheckboxSelection("duty"+i+"We", sched.hasDay(DutySchedule.WEDNESDAY));
            assertCheckboxSelection("duty"+i+"Th", sched.hasDay(DutySchedule.THURSDAY));
            assertCheckboxSelection("duty"+i+"Fr", sched.hasDay(DutySchedule.FRIDAY));
            assertCheckboxSelection("duty"+i+"Sa", sched.hasDay(DutySchedule.SATURDAY));
            assertCheckboxSelection("duty"+i+"Su", sched.hasDay(DutySchedule.SUNDAY));
            assertFormElementEquals("duty"+i+"Begin", String.valueOf(sched.getStartTime()));
            assertFormElementEquals("duty"+i+"End", String.valueOf(sched.getStopTime()));
        }
        
        //getTester().dumpResponse();
        
        OncallSchedule[] schedules = user.getOncallSchedule();
        assertFormElementEquals("oncallScheduleCount", String.valueOf(schedules.length));
        assertFormElementPresent("schedAction");
        assertFormElementPresent("schedIndex");
        assertFormElementPresent("schedTimeIndex");
        for(int i = 0; i < schedules.length; i++) {
            OncallSchedule sched = schedules[i];
            String schedPrefix = "oncallSchedule["+i+"]";
            assertFormElementEquals(schedPrefix+".name", sched.getName());
            assertTextInElement(schedPrefix+".type", sched.getType());
            assertButtonPresent(schedPrefix+".doDelete");
            Time times[] = sched.getTime();
            assertFormElementEquals(schedPrefix+".timeCount", String.valueOf(times.length));
            for(int timeIndex = 0; timeIndex < times.length; timeIndex++) {
                Time time = times[timeIndex];
                String timePrefix = schedPrefix+".time["+timeIndex+"]";
                
                if ("specific".equals(sched.getType())) {
                    assertFormElementNotPresent(timePrefix+".day");
                } else {
                    assertFormElementEquals(timePrefix+".day", time.getDay());
                }
                assertFormElementEquals(timePrefix+".begins", time.getBegins());
                assertFormElementEquals(timePrefix+".ends", time.getEnds());
                assertFormElementPresent(timePrefix+".doDeleteTime");
            }
            assertButtonPresent(schedPrefix+".addTime");
            
            
        }
        assertFormElementPresent("addOncallType");
        assertButtonPresent("addOncallSchedule");
        
        assertButtonPresent("addSchedulesButton");
        assertButtonPresent("removeSchedulesButton");
        assertButtonPresent("saveUserButton");
        assertButtonPresent("cancelButton");
        
        
        
        
        
    }

