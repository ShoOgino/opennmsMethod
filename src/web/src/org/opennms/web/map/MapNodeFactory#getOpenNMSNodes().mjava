    /**
     * get node data from OpenNMS and massage it into the appropriate
     * form for the MapNode class
     */

    public Vector getOpenNMSNodes() {
	Node[] onmsNodes = null;
	OutageModel oModel = new OutageModel();    
	Vector nodes = new Vector();
	Vector outages = new Vector();

	try {
	    OutageSummary[] summaries = oModel.getCurrentOutageSummaries();
	    for(int i = 0; i < summaries.length; i++) {
		OutageSummary summary = summaries[i];
		int nodeId = summary.getNodeId();
		outages.add(new Integer(nodeId));
	    }
	}
	catch(Exception e) {
	    log("Exception in NodeFactory.getOpenNMSNodes()");
	    log("Exception in OutageModel.getCurrentOutageSummaries()");
	    log(e.toString());
	}


	CategoryModel cModel;

	AssetModel aModel = new AssetModel();

	// create and add a rootnode with NodeID of 0 to represent the
	// OpenNMS server.  this is kind of ugly and could be changed
	// without disturbing anyone if someone thinks of a better way
	// of representing this "root" node

	MapNode rootNode = new MapNode();
	rootNode.setNodeID(0);
	rootNode.setHostname("OpenNMS");
	rootNode.setNodeParent(-1);
	rootNode.setRTC(100.0);
	rootNode.setStatus("Up");
	rootNode.setIconName("opennms");
	nodes.add(rootNode);

	try {
	    onmsNodes = NetworkElementFactory.getAllNodes();
	}
	catch(SQLException e) {
	    log("Exception in NodeFactory.getOpenNMSNodes()");
	    log("SQLException in NodeFactory.getOpenNMSNodes()");
	    log(e.toString());
	}

	
	// we're inlining this logic here instead of calling
	// getAsset() for each node, since that generates a lot of
	// database traffic

        Asset[] assetarray = null;
	try {
	    assetarray = aModel.getAllAssets( );
	}
	catch(Exception e) {
	    log("Exception in NodeFactory.getOpenNMSNodes()");
	    log("Exception in AssetMode.getAsset()");
	    log(e.toString());
	}

	Hashtable assets = new Hashtable();

	for(int i = 0; i < assetarray.length; i++) {
	    Asset a = assetarray[i];
	    assets.put(new Integer(a.getNodeId()), a);
	}

	for(int i = 0; i < onmsNodes.length; i++) {
	    Node n = onmsNodes[i];
	    MapNode mn = new MapNode();
	    Asset asset;
	    double overallRtcValue = 0.0;
	    boolean isNew = false;

	    if( assets.containsKey(new Integer(n.getNodeId()))) {
		asset = (Asset)assets.get(new Integer(n.getNodeId()));
	    } else {
		asset = new Asset();
		isNew = true;        
	    }
		
	    try {
		// I wish I could inline this logic too, since this
		// also generates lots of database sessions
		
		cModel = CategoryModel.getInstance();
		overallRtcValue = cModel.getNodeAvailability(n.getNodeId());
	    }
	    catch(Exception e) {
		log("Exception in NodeFactory.getOpenNMSNodes()");
		log("Exception in CategoryModel.getInstance()");
		log(e.toString());
	    }

	    mn.setNodeID(n.getNodeId());
	    mn.setHostname(n.getLabel());
	    mn.setNodeParent(n.getNodeParent());
	    mn.setRTC(overallRtcValue);

	    if(isNew) {
		mn.setIconName("unspecified");
	    } else {
		mn.setIconName(asset.getCategory().toLowerCase());
	    }
	    // mn.setIconName("other");

	    if(outages.contains(new Integer(n.getNodeId()))) {
		mn.setStatus("Outage");
	    } else {
		mn.setStatus("Up");
	    }

	    nodes.add(mn);
	}

	return nodes;
    }

