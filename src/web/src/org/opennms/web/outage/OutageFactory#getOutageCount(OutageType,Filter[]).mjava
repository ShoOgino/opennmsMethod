    /**
     * Count the number of outages for a given acknowledgement type.
     */
    public static int getOutageCount( OutageType ackType, Filter[] filters ) throws SQLException {
        if( ackType == null || filters == null ) {
            throw new IllegalArgumentException( "Cannot take null parameters." );
        }

        int outageCount = 0;
        Connection conn = Vault.getDbConnection();

        try {            
            StringBuffer select = new StringBuffer(
                    "SELECT COUNT(OUTAGEID) AS OUTAGECOUNT FROM OUTAGES " +
                    "JOIN NODE USING(NODEID) " +
                    "JOIN IPINTERFACE ON OUTAGES.NODEID=IPINTERFACE.NODEID AND OUTAGES.IPADDR=IPINTERFACE.IPADDR " +
                    "JOIN IFSERVICES ON OUTAGES.NODEID=IFSERVICES.NODEID AND OUTAGES.IPADDR=IFSERVICES.IPADDR AND OUTAGES.SERVICEID=IFSERVICES.SERVICEID " +
                    "LEFT OUTER JOIN SERVICE ON OUTAGES.SERVICEID=SERVICE.SERVICEID " +
                    "LEFT OUTER JOIN NOTIFICATIONS ON SVCLOSTEVENTID=NOTIFICATIONS.NOTIFYID " +
                    "WHERE (NODE.NODETYPE != 'D' AND IPINTERFACE.ISMANAGED != 'D' AND IFSERVICES.STATUS != 'D') " +
                    "AND " );
            select.append( getOutageTypeClause( ackType ));

            for( int i=0; i < filters.length; i++ ) {
                select.append( " AND " );
                select.append( filters[i].getSql() );
            }

            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(select.toString());
    
            if( rs.next() ) {
                outageCount = rs.getInt( "OUTAGECOUNT" );                
            }
          
            rs.close();
            stmt.close();
        }
        finally {
            Vault.releaseDbConnection( conn );
        }

        return outageCount;
    }

