    public static Filter getFilter( String filterString ) {
        if( filterString == null ) {
            throw new IllegalArgumentException( "Cannot take null parameters." );
        }

        Filter filter = null;

        StringTokenizer tokens = new StringTokenizer( filterString, "=" );
        String type  = tokens.nextToken();
        String value = tokens.nextToken();

        if(type.equals(NodeFilter.TYPE)) {
            filter = new NodeFilter(Integer.parseInt(value));
        }
        else if(type.equals(InterfaceFilter.TYPE)) {
            filter = new InterfaceFilter(value);
        }
        else if(type.equals(ServiceFilter.TYPE)) {
            filter = new ServiceFilter(Integer.parseInt(value));
        }
        else if(type.equals(OutageFilter.TYPE)) {
            filter = new OutageFilter(Integer.parseInt(value));
        }
        else if(type.equals(NegativeNodeFilter.TYPE)) {
            filter = new NegativeNodeFilter(Integer.parseInt(value));
        }
        else if(type.equals(NegativeInterfaceFilter.TYPE)) {
            filter = new NegativeInterfaceFilter(value);
        }
        else if(type.equals(NegativeServiceFilter.TYPE)) {
            filter = new NegativeServiceFilter(Integer.parseInt(value));
        }
        else if( type.equals( LostServiceDateBeforeFilter.TYPE )) {
            filter = new LostServiceDateBeforeFilter(Long.parseLong(value));
        }
        else if( type.equals( LostServiceDateAfterFilter.TYPE )) {
            filter = new LostServiceDateAfterFilter(Long.parseLong(value));
        }        
        else if( type.equals( RegainedServiceDateBeforeFilter.TYPE )) {
            filter = new RegainedServiceDateBeforeFilter(Long.parseLong(value));
        }
        else if( type.equals( RegainedServiceDateAfterFilter.TYPE )) {
            filter = new RegainedServiceDateAfterFilter(Long.parseLong(value));
        }                

        return( filter );
    }

