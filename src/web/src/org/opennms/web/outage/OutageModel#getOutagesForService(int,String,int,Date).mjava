    /**
     * Get all current outages and any resolved outages since the given time for
     * the given service.
     *
     * @param nodeId this is the node to query
     * @param ipAddr this is the interface to query
     * @param serviceId this is the service to query
     * @param time no resolved outages older than this time will be returned
     * @return All current outages and resolved outages no older than <code>time</code>.
     */
    public Outage[] getOutagesForService( int nodeId, String ipAddr, int serviceId, Date time ) throws SQLException {
        if( ipAddr == null || time == null ) {
            throw new IllegalArgumentException( "Cannot take null parameters." );
            }
            
        Outage[] outages = new Outage[0];
        Connection conn = Vault.getDbConnection();
        long timeLong = time.getTime();

        try {
            PreparedStatement stmt = conn.prepareStatement("SELECT outages.iflostservice, outages.ifregainedservice, outages.nodeID, node.nodeLabel, outages.ipaddr, ipinterface.iphostname, service.servicename, outages.serviceId from outages, node, ipinterface, service where outages.nodeid=? and outages.ipaddr=? and outages.serviceid=? and node.nodeid=outages.nodeid and outages.serviceid=service.serviceid and ipinterface.ipaddr=outages.ipaddr and (ifregainedservice >= ? or ifregainedservice is null) order by iflostservice desc");
            stmt.setInt(1, nodeId);
            stmt.setString(2, ipAddr);
            stmt.setInt(3, serviceId);
            stmt.setTimestamp(4, new Timestamp(timeLong));
            ResultSet rs = stmt.executeQuery();
    
            outages = rs2Outages(rs);
            
            rs.close();
            stmt.close();
        }
        finally {
            Vault.releaseDbConnection( conn );
        }

        return outages;
    }

