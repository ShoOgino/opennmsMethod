    /**
     * This method returns the data from the result set as an array of Node
     * objects.
     */
    protected static Node[] rs2Nodes(ResultSet rs) throws SQLException {
        if (rs == null) {
            throw new IllegalArgumentException("Cannot take null parameters.");
        }

        Node[] nodes = null;
        Vector vector = new Vector();

        while (rs.next()) {
            Node node = new Node();

            Object element = new Integer(rs.getInt("nodeId"));
            node.m_nodeId = ((Integer) element).intValue();

            element = rs.getString("dpName");
            node.m_dpname = (String) element;

            element = rs.getTimestamp("nodeCreateTime");
            if (element != null)
                node.m_nodeCreateTime = EventConstants.formatToString(new Date(((Timestamp) element).getTime()));

            element = new Integer(rs.getInt("nodeParentID"));
            if (element != null) {
                node.m_nodeParent = ((Integer) element).intValue();
            }

            element = rs.getString("nodeType");
            if (element != null) {
                node.m_nodeType = ((String) element).charAt(0);
            }

            element = rs.getString("nodeSysOID");
            node.m_nodeSysId = (String) element;

            element = rs.getString("nodeSysName");
            node.m_nodeSysName = (String) element;

            element = rs.getObject("nodeSysDescription");
            node.m_nodeSysDescr = (String) element;

            element = rs.getString("nodeSysLocation");
            node.m_nodeSysLocn = (String) element;

            element = rs.getString("nodeSysContact");
            node.m_nodeSysContact = (String) element;

            element = rs.getString("nodelabel");
            node.m_label = (String) element;

            element = rs.getString("operatingsystem");
            node.m_operatingSystem = (String) element;

            vector.addElement(node);
        }

        nodes = new Node[vector.size()];

        for (int i = 0; i < nodes.length; i++) {
            nodes[i] = (Node) vector.elementAt(i);
        }

        return (nodes);
    }

