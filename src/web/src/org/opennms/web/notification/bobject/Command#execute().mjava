	/**This method executes the command using a Process. The method will decide if 
	   an input stream needs to be used.
	   @return int, the return code of the command
	*/
	public int execute()
	{
		int returnCode = 0;
		
		List args = new ArrayList();
		Argument curArg = null;
		
		args.add(m_commandName);
		
		//put the non streamed arguments into the argument array
		for (int i = 0; i < m_arguments.size(); i++)
		{
			curArg = (Argument)m_arguments.get(i);
			
			//only non streamed arguments go into this list
			if (!curArg.isStreamed())
			{
				if (!curArg.getSubstitution().equals(""))
				{
					args.add(curArg.getSubstitution());
				}
				if (curArg.getValue() != null && !curArg.getValue().equals(""))
				{
					args.add(curArg.getValue());
				}
			}
		}
		
		//System.out.println("Sending: " + args);
		
		try
		{
			//set up the process
			String arguments[] = new String[args.size()];
			arguments = (String[])args.toArray(arguments);
			
			Process command = Runtime.getRuntime().exec(arguments);
			
			//see if we need to build a streamed argument buffer
			if (m_useStream)
			{
				//make sure the output we are writting is buffered
				BufferedWriter processInput = new BufferedWriter( new OutputStreamWriter(command.getOutputStream()));
				
				StringBuffer buffer = new StringBuffer();
				
				//now write each streamed argument to the processes input buffer
				for (int i = 0; i < m_arguments.size(); i++)
				{
					curArg = (Argument)m_arguments.get(i);
					
					if (curArg.isStreamed())
					{
						if (!curArg.getSubstitution().equals(""))
						{
							buffer.append(curArg.getSubstitution());
						}
						if (!curArg.getValue().equals(""))
						{
							buffer.append(curArg.getValue());
						}
					}
				}
				
				//put the streamed argumetns into the stream
				processInput.write(buffer.toString());
				
				processInput.flush();
				processInput.close();
			}
			
			returnCode = command.waitFor();
		}
		catch(IOException e)
		{
			System.out.println(e);
		}
		catch(InterruptedException e)
		{
			System.out.println(e);
		}
		
		return returnCode; //System.out.println("command complete with return code " + returnCode);
	}

