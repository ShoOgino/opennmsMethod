    public static MatchingAsset[] searchAssets( String columnName, String searchText ) throws SQLException {
        if( columnName == null || searchText == null ) {
            throw new IllegalArgumentException( "Cannot take null parameters." );
        }

        MatchingAsset[] assets = new MatchingAsset[0];
        Connection conn = Vault.getDbConnection();
        Vector vector = new Vector();

        try {
            PreparedStatement stmt = conn.prepareStatement( "SELECT NODEID, NODE.NODELABEL, " + columnName + " FROM ASSETS WHERE LOWER(" + columnName + ") LIKE ? AND ASSETS.NODEID=NODE.NODEID" );
            stmt.setString( 1, "%" + searchText.toLowerCase() + "%" );
            
            ResultSet rs = stmt.executeQuery();

            while( rs.next() ) {
                MatchingAsset asset = new MatchingAsset();

                Object element = new Integer(rs.getInt("nodeID"));
                asset.nodeId = ((Integer)element).intValue();
                asset.nodeLabel = rs.getString( "nodelabel" );  
                asset.matchingValue = rs.getString( columnName );
                asset.columnSearched = columnName;

                vector.addElement( asset );
            }

            rs.close();
            stmt.close();
        }
        finally {
            Vault.releaseDbConnection( conn );
        }

        assets = new MatchingAsset[vector.size()];

        for( int i=0; i < assets.length; i++ ) {
            assets[i] = (MatchingAsset)vector.elementAt(i);
        }
        
        return( assets );
    }

