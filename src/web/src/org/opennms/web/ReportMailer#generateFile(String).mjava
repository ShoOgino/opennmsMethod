    /** returns the fully-qualified filename of the generated PDF report */
    protected void generateFile(String shellScript) throws IOException, InterruptedException {
        if (shellScript == null) {
            throw new IllegalArgumentException("Cannot take null parameters.");
        }

        String[] cmdArgs;
        cmdArgs = new String[3];
        int i = 0;
        cmdArgs[i++] = shellScript;
        if (commandParms != null) {
            if (!commandParms.equals(""))
                cmdArgs[i++] = commandParms;
        } else
            cmdArgs[i++] = "";
        if (null != format) {
            if (!format.equals(""))
                cmdArgs[i] = format;
        } else
            cmdArgs[i] = "";
        if (log.isDebugEnabled()) {
            log.debug("Command Line Args " + cmdArgs[0]);
            log.debug("Command Line Args " + cmdArgs[1]);
            log.debug("Command Line Args " + cmdArgs[2]);
        }

        // java.lang.Process process = Runtime.getRuntime().exec( cmdArgs );
		// TODO: Add code to generate "calendar" as well as "classic" reports
        try {
            AvailabilityReport.generateReport(getLogoUrl(), getCategoryName(), getFormat(), getMonthFormat());
        } catch (Exception e) {
            log.error("Caught exception generating report: ", e);
        }

        // get the stderr to see if the command failed
        // BufferedReader err = new BufferedReader(new
        // InputStreamReader(process.getErrorStream()));

        /*
         * if( err.ready() ) { //get the error message StringWriter tempErr =
         * new StringWriter(); Util.streamToStream(err, tempErr); String
         * errorMessage = tempErr.toString();
         * 
         * //log the error message if(log.isDebugEnabled()) log.debug("Read from
         * stderr: " + errorMessage);
         * 
         * throw new IOException("Could not generate outage report" ); }
         * 
         * //wait until the file is completely generated process.waitFor();
         */

    }

