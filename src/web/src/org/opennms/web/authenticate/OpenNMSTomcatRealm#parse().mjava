    /**
     * Convenience method for parsing the users.xml file.
     * 
     * <p>
     * This method is synchronized so only one thread at a time can parse the
     * users.xml file and create the <code>principal</code> instance variable.
     * </p>
     */
    protected synchronized void parse() {
        // reset the principals cache
        this.principals = new HashMap();

        try {
            // load the regular users
            UserFactory.reload();
            UserFactory factory = UserFactory.getInstance();
            this.log.debug("Reloaded the users.xml file into memory");

            Map map = factory.getUsers();
            this.log.debug("Loaded " + map.size() + " users into memory");

            Iterator iterator = map.keySet().iterator();

            while (iterator.hasNext()) {
                String key = (String) iterator.next();
                OpenNMSPrincipal principal = new OpenNMSPrincipal((User) map.get(key));
                this.principals.put(key, principal);
            }

            this.log.debug("Loaded the regular users into the principal cache");
        } catch (MarshalException e) {
            this.log.error("Could not parse the users.xml file", e);
        } catch (ValidationException e) {
            this.log.error("Could not parse the users.xml file", e);
        } catch (FileNotFoundException e) {
            this.log.error("Could not find the users.xml file", e);
        } catch (Exception e) {
            this.log.error("Unexpected exception parsing users.xml file", e);
        }

        try {
            // load the "magic" users
            Map[] maps = this.parseMagicUsers();
            Map magicUserToPasswordMapping = maps[0];
            this.magicRoleMapping = maps[1];
            this.log.debug("Loaded the magic user config file");

            Iterator iterator = magicUserToPasswordMapping.keySet().iterator();

            while (iterator.hasNext()) {
                String name = (String) iterator.next();
                String password = (String) magicUserToPasswordMapping.get(name);

                User magicUser = new User();
                magicUser.setUserId(name);
                magicUser.setPassword(UserFactory.encryptPassword(password));

                this.principals.put(name, new OpenNMSPrincipal(magicUser));
            }

            this.log.debug("Loaded the magic users into the principal cache");

            this.magicUsersLastModified = this.magicUsersFile.lastModified();
            this.log.debug("Updated the magic user file last modified time stamp to " + this.magicUsersLastModified);
        } catch (FileNotFoundException e) {
            this.log.error("Could not find the magic users file", e);
        } catch (IOException e) {
            this.log.error("Could not read the magic users file", e);
        } catch (Exception e) {
            this.log.error("Unexpected exception parsing users.xml file", e);
        }
    }

