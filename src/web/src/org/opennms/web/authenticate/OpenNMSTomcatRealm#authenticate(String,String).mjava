    /**
     * Return the Principal associated with the specified username and
     * credentials, if there is one; otherwise return <code>null</code>.
     *
     * @param username Username of the Principal to look up
     * @param credentials Password or other credentials to use in
     *  authenticating this username
     */
    public Principal authenticate(String username, String credentials) {
        if( username == null || credentials == null ) {
            //throw new IllegalArgumentException( "Cannot take null parameters." );
            return null;
        }

        //check everytime to see if the users.xml file has changed
        //if( this.isParseNecessary() ) {
            this.parse();
        //}

        OpenNMSPrincipal principal = (OpenNMSPrincipal)this.principals.get( username );

        if( principal != null && !principal.comparePasswords( credentials ) ) {
            principal = null;

            this.log.info( "Wrong password for " + username );
        }

        if( principal == null ) {
            this.log.info( "Could not authenticate " + username );
        }
        else {
            this.log.info( "Authenticated " + username );
        }
    
        return( principal );
    }

