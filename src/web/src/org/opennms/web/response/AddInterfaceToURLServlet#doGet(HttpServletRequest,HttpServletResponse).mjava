    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String nodeId = request.getParameter("node");
        String endUrl = request.getParameter("endUrl");

        if (nodeId == null) {
            throw new MissingParameterException("node", new String[] { "node", "endUrl" });
        }

        if (endUrl == null) {
            throw new MissingParameterException("endUrl", new String[] { "node", "endUrl" });
        }

        // should return an empty array if no queryable interfaces available

        ArrayList intfs = new ArrayList();
        try {
            intfs = this.model.getQueryableInterfacesForNode(nodeId);
        } catch (Exception e) {
            throw new ServletException("Could not query interfaces", e);
        }

        if (intfs == null) {
            // shouldn't ever happen, but just in case
            throw new ServletException("Unexpected value: a null array");
        }

        this.log("DEBUG: Found these interfaces for node " + nodeId + ":");
        for (int i = 0; i < intfs.size(); i++) {
            this.log("DEBUG: " + i + "=" + intfs.get(i));
        }

        String[] ignores = new String[] { "endUrl" };

        switch (intfs.size()) {
        case 0: {
            // there are no queryable interfaces, but there must be
            // information in the directory, otherwise the given nodeid would
            // never have
            // been chooseable from the UI.
            throw new ServletException("Could not find any interfaces to query");
        }

        case 1: {
            // add the interface, and redirect to end url
            HashMap additions = new HashMap();
            additions.put("intf", intfs.get(0));

            String queryString = Util.makeQueryString(request, additions, ignores);

            // this is a servlet context-relative URL (ie external URL), so
            // we have to add the base URL; the base URL contains a trailing
            // slash, so I do not add one here
            response.sendRedirect(Util.calculateUrlBase(request) + endUrl + "?" + queryString);
            break;
        }

        default: {
            // redirect to the chooseInterfaceUrl
            String queryString = Util.makeQueryString(request);

            response.sendRedirect(Util.calculateUrlBase(request)
				  + this.chooseInterfaceUrl + "?"
				  + queryString);
            break;
        }
        }
    }

