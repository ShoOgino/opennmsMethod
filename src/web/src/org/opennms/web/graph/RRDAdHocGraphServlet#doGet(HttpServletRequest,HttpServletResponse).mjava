    /**
     * Checks the parameters passed to this servlet, and if all are okay, executes
     * the RRDTool command in another process and pipes its PNG output to the
     * <code>ServletOutputStream</code> back to the requesting web browser.
     */
    public void doGet( HttpServletRequest request, HttpServletResponse response ) throws ServletException, IOException {
        String rrdDir = request.getParameter( "rrddir" );
        String start  = request.getParameter( "start" );
        String end    = request.getParameter( "end" );

        if( rrdDir == null || start == null || end == null ) {
            response.setContentType( "image/png" );
            Util.streamToStream( this.getServletContext().getResourceAsStream( "/images/rrd/missingparams.png"), response.getOutputStream() );
            return;
        }
        
        if( !RrdFileConstants.isValidRRDName(rrdDir) ) {
            this.log("Illegal RRD directory: " + rrdDir);
            throw new IllegalArgumentException("Illegal RRD directory: " + rrdDir);
        }

        // begin inserted code
        String command = createAdHocCommand( request, rrdDir, start, end );

        if(command == null) {
            response.setContentType( "image/png" );
            Util.streamToStream( this.getServletContext().getResourceAsStream( "/images/rrd/missingparams.png"), response.getOutputStream() );
            return;
        }
        
        InputStream tempIn = null;
        ServletOutputStream out = response.getOutputStream();
        try {
            
            this.log( "Executing RRD command in this directory: " + workDir );
            this.log( command );
            
            
            tempIn = RrdUtils.createGraph(command, workDir);
            
        } catch (RrdException e) {
            this.log("Read from stderr: "+e.getMessage());
            response.setContentType( "image/png" );
            Util.streamToStream( this.getServletContext().getResourceAsStream( "/images/rrd/error.png"), out );
        }
        
        if (tempIn != null) {
            response.setContentType( this.mimeType );
            Util.streamToStream( tempIn, out );
            
            tempIn.close();
        }
        out.close();

        // end inserted code
    }

