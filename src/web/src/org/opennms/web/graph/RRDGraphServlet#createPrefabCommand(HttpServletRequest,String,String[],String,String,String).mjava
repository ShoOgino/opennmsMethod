    protected String createPrefabCommand(HttpServletRequest request, String reportName, String[] rrds, String propertiesFile, String start, String end) throws ServletException {
        PrefabGraph graph = (PrefabGraph) this.reportMap.get(reportName);

        if (graph == null) {
            throw new IllegalArgumentException("Unknown report name: " + reportName);
        }

        StringBuffer buf = new StringBuffer();
        buf.append(this.commandPrefix);
        buf.append(" ");
        buf.append(graph.getCommand());
        String command = buf.toString();

        // remember rrdtool wants the time in seconds, not milliseconds;
        // java.util.Date.getTime() returns milliseconds, so divide by 1000
        String starttime = Long.toString(Long.parseLong(start) / 1000);
        String endtime = Long.toString(Long.parseLong(end) / 1000);

        HashMap translationMap = new HashMap();

        for (int i = 0; i < rrds.length; i++) {
            String key = "{rrd" + (i + 1) + "}";
            translationMap.put(RE.simplePatternToFullRegularExpression(key), rrds[i]);
        }

        translationMap.put(RE.simplePatternToFullRegularExpression("{startTime}"), starttime);
        translationMap.put(RE.simplePatternToFullRegularExpression("{endTime}"), endtime);
	Properties externalProperties = new Properties();
	if (propertiesFile != null) {
		try {
			externalProperties.load(new FileInputStream(
						this.workDir + File.separator + propertiesFile));
		} catch (Exception e1) {
			//Do nothing - just have no properties.
		}
	}


        // names of values specified outside of the RRD data (external values)
        String[] externalValues = graph.getExternalValues();

        if (externalValues != null || externalValues.length > 0) {
            for (int i = 0; i < externalValues.length; i++) {
                String value = request.getParameter(externalValues[i]);

                if (value == null) {
                    throw new MissingParameterException(externalValues[i]);
                } else {
                    translationMap.put(RE.simplePatternToFullRegularExpression("{" + externalValues[i] + "}"), value);
                }
            }
        }

	//names of values specified that come from properties files
	String[] propertiesValues = graph.getPropertiesValues();
	if (propertiesValues != null || propertiesValues.length > 0) {
		for (int i = 0; i < propertiesValues.length; i++) {
			String value = (externalProperties.getProperty(propertiesValues[i]) == null ? "Unknown" : externalProperties.getProperty(propertiesValues[i]));
			if (value == null) {
				throw new MissingParameterException(propertiesValues[i]);
			} else {
				translationMap.put(
					RE.simplePatternToFullRegularExpression(
						"{" + propertiesValues[i] + "}"),
					value);
			}
		}
	}


        try {
            Iterator iter = translationMap.keySet().iterator();

            while (iter.hasNext()) {
                String s1 = (String) iter.next();
                String s2 = (String) translationMap.get(s1);

                // replace s1 with s2
                RE re = new RE(s1);
                command = re.subst(command, s2);
            }
        } catch (RESyntaxException e) {
            throw new ServletException("Invalid regular expression syntax, check rrd-properties file", e);
        }

        return command;
    }

