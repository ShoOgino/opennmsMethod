    public PrefabGraph[] getQueries(String nodeOrDomain, String intf,
                                    boolean includeNodeQueries, boolean isNode) { 
        Category log = ThreadCategory.getInstance(this.getClass());
        if (nodeOrDomain == null || intf == null) {
            throw new IllegalArgumentException("Cannot take null parameters.");
        }
	log.debug("getQueries: nodeordomain:intf:includeNodeQueries:isNode " + nodeOrDomain + ":" + intf + ":" + includeNodeQueries + ":" + isNode);

        // create a temporary list of queries to return
        List returnList = new LinkedList();

        // get the full list of all possible queries
        PrefabGraph[] queries = getQueries();

        // get all the data sources supported by this interface (and possibly
        // node)
        List availDataSourceList = getDataSourceList(nodeOrDomain, intf,
						     includeNodeQueries, isNode);

        // for each query, see if all the required data sources are available
        // in the available data source list, if so, add that query to the
        // returnList
        for (int i = 0; i < queries.length; i++) {
            List requiredList = Arrays.asList(queries[i].getColumns());

            if (availDataSourceList.containsAll(requiredList)) {
                if(isNode || queries[i].getExternalValues().length == 0) {
                    returnList.add(queries[i]);
                }
            }
        }

        // put the queries in returnList into an array
        PrefabGraph[] availQueries = (PrefabGraph[])
	    returnList.toArray(new PrefabGraph[returnList.size()]);

        return availQueries;
    }

