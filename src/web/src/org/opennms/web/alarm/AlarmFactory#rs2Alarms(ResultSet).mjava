    /**
     * Convenience method for translating a <code>java.sql.ResultSet</code>
     * containing event information into an array of <code>Alarm</code>
     * objects.
     */
    protected static Alarm[] rs2Alarms(ResultSet rs) throws SQLException {
        Alarm[] alarms = null;
        Vector vector = new Vector();

        while (rs.next()) {
            Alarm alarm = new Alarm();

            Object element = new Integer(rs.getInt("alarmID"));
            alarm.id = ((Integer) element).intValue();

            element = rs.getObject("counter");
            alarm.count = ((Integer) element).intValue();

            element = rs.getString("eventUei");
            alarm.uei = (String) element;

//            element = rs.getString("alarmSnmp");
//            alarm.snmp = (String) element;

            element = rs.getTimestamp("lasteventtime");
            alarm.lasteventtime = new Date(((Timestamp) element).getTime());

            element = rs.getTimestamp("firsteventtime");
            alarm.firsteventtime = new Date(((Timestamp) element).getTime());

//            element = rs.getString("alarmHost");
//            alarm.host = (String) element;

//            element = rs.getString("alarmSnmpHost");
//            alarm.snmphost = (String) element;

//            element = rs.getString("alarmDpName");
//            alarm.dpName = (String) element;

//            element = rs.getString("alarmParms");
//            alarm.parms = (String) element;

            // node id can be null
            element = rs.getObject("nodeID");
            if (element == null) {
                alarm.nodeID = new Integer(0);
            } else {
                alarm.nodeID = (Integer) element;
            }

            element = rs.getString("ipAddr");
            alarm.ipAddr = (String) element;

            element = rs.getObject("serviceID");
            alarm.serviceID = (Integer) element;

            element = rs.getString("nodeLabel");
            alarm.nodeLabel = (String) element;

            element = rs.getString("serviceName");
            alarm.serviceName = (String) element;

//            element = rs.getTimestamp("alarmCreateTime");
//            alarm.createTime = new Date(((Timestamp) element).getTime());

            element = rs.getString("description");
            alarm.description = (String) element;

//            element = rs.getString("alarmLoggroup");
//            alarm.logGroup = (String) element;

            element = rs.getString("logmsg");
            alarm.logMessage = (String) element;

            element = new Integer(rs.getInt("severity"));
            alarm.severity = ((Integer) element).intValue();

            element = rs.getString("OperInstruct");
            alarm.operatorInstruction = (String) element;

//            element = rs.getString("alarmAutoAction");
//            alarm.autoAction = (String) element;

//            element = rs.getString("alarmOperAction");
//            alarm.operatorAction = (String) element;

//            element = rs.getString("alarmOperActionMenuText");
//            alarm.operatorActionMenuText = (String) element;

//            element = rs.getString("alarmNotification");
//            alarm.notification = (String) element;

            element = rs.getString("TTicketID");
            alarm.troubleTicket = (String) element;

            element = rs.getObject("TTicketState");
            alarm.troubleTicketState = (Integer) element;

//            element = rs.getString("alarmForward");
//            alarm.forward = (String) element;

            element = rs.getString("MouseOverText");
            alarm.mouseOverText = (String) element;

            element = rs.getString("alarmAckUser");
            alarm.acknowledgeUser = (String) element;

            element = rs.getTimestamp("alarmAckTime");
            if (element != null) {
                alarm.acknowledgeTime = new Date(((Timestamp) element).getTime());
            }

            vector.addElement(alarm);
        }

        alarms = new Alarm[vector.size()];

        for (int i = 0; i < alarms.length; i++) {
            alarms[i] = (Alarm) vector.elementAt(i);
        }

        return alarms;
    }

