    /**
     * Return a string that represents the fully qualified URL
     * for our servlet context, suitable for use in the HTML
     * <em>base</em> tag.
     *
     * <p>As an example, suppose your host was www.mycompany.com,
     * you are serving from port 80, and your web application name
     * was "opennms," then this method would return: 
     * <code>http://www.mycompany.com:80/opennms/</code></p>
     *
     * @param request the servlet request you are servicing
     */
    public static String calculateUrlBase( HttpServletRequest request ) {
        if( request == null ) {
            throw new IllegalArgumentException( "Cannot take null parameters." );
        }

        //get what the web browser thinks is the URL
        StringBuffer buffer = request.getRequestURL();

        //get a string version of the buffer so we can search in it
        String string = buffer.toString();

        //find the "//" in something like "http://host" 
        int schemeSlashesIndex = string.indexOf("//");
        
        //find the "/" at the end of "http://host:port/"
        int schemeHostPortIndex  = string.indexOf("/", schemeSlashesIndex+2);

        //truncate everything after the base scheme, host, and port values
        buffer.setLength(schemeHostPortIndex);

        String context = request.getContextPath();

        //if the context is not the root context 
        if(!context.equals("")) {
            //context will always start with a slash
            buffer.append(context);            
	}

        //add a trailing slash        
        buffer.append("/");

        return buffer.toString();
    }

