    public List getTableColumnsFromDB(String table) throws Exception {
	Statement st = m_dbconnection.createStatement();
	ResultSet rs;
	LinkedList r = new LinkedList();

	if (!tableExists(table)) {
	    return r;
	}

	String query = 
	    "SELECT " +
	    "        a.attname, " +
	    "        format_type(a.atttypid, a.atttypmod), " +
	    "        a.attnotnull " +
	    "FROM " +
	    "        pg_attribute a " +
	    "WHERE " +
	    "        a.attrelid = " +
	    "                (SELECT oid FROM pg_class WHERE relname = '" +
	                       table + "') AND " +
	    "        a.attnum > 0 ";

	if (m_pg_version >= 7.3) {
	    query = query + "AND a.attisdropped = false ";
	}

	query = query +
	    "ORDER BY " +
	    "        a.attnum";

	rs = st.executeQuery(query);

	while (rs.next()) {
	    Column c = new Column();
	    c.setName(rs.getString(1));
	    c.parseColumnType(rs.getString(2));
	    c.setNotNull(rs.getBoolean(3));

	    r.add(c);
	}

	if (m_pg_version > 7.3) {
	    // XXX the [1] on conkey and confkey is a hack and assumes that
	    //     we have at most one constrained column and at most one
	    //     referenced foreign column (which is correct with the current
	    //     database layout.
	    query =
		"SELECT " +
		"       c.conname, " +
		"	c.contype, " +
		"	a.attname, " +
		"	d.relname, " +
		"	b.attname " +
		"FROM " +
		"	pg_class d RIGHT JOIN " +
		"	  (pg_attribute b RIGHT JOIN " +
		"	    (pg_constraint c JOIN pg_attribute a " +
		"	      ON c.conrelid = a.attrelid AND " +
		"	         a.attnum = c.conkey[1]) " +
		"	    ON c.confrelid = b.attrelid AND " +
		"	       b.attnum = c.confkey[1]) " +
		"	  ON b.attrelid = d.oid " +
		"WHERE " +
		"	a.attrelid = " +
	        "         (SELECT oid FROM pg_class WHERE relname = '" +
		table.toLowerCase() + "');";

	    rs = st.executeQuery(query);

	    while (rs.next()) {
		Constraint constraint;
		if (rs.getString(2).equals("p")) {
		    constraint = new Constraint(rs.getString(1), rs.getString(3));
		} else if (rs.getString(2).equals("f")) {
		    constraint = new Constraint(rs.getString(1), rs.getString(3),
						rs.getString(4), rs.getString(5));
		} else {
		    throw new Exception("Do not support constraint type \"" +
					rs.getString(2) + "\" in constraint \"" +
					rs.getString(1) + "\"");
		}

		Column c = findColumn(r, constraint.getColumn());
		if (c == null) {
		    throw new Exception("Got a constraint for column \"" +
					constraint.getColumn() + "\" of table " +
					table + ", but could not find column.  " +
					"Constraint: " + constraint);
		}

		c.addConstraint(constraint);
	    }
	} else {

	    query =
		"SELECT " +
		"        c.relname, " +
		"        a.attname " +
		"FROM " +
		"        pg_index i, " +
		"        pg_class c, " + 
		"        pg_attribute a " +
		"WHERE " +
		"        i.indrelid = " +
		"          (SELECT oid FROM pg_class WHERE relname = '" +
		             table.toLowerCase() + "') AND " +
		"        i.indisprimary = 't' AND " +
		"        i.indrelid = a.attrelid AND " +
		"        i.indkey[0] = a.attnum AND " +
		"        i.indexrelid = c.relfilenode";

	    rs = st.executeQuery(query);
	    while (rs.next()) {
		Constraint constraint = 
		    new Constraint(rs.getString(1), rs.getString(2));

		Column c = findColumn(r, constraint.getColumn());
		if (c == null) {
		    throw new Exception("Got a constraint for column \"" +
					constraint.getColumn() + "\" of table " +
					table + ", but could not find column.  " +
					"Constraint: " + constraint);
		}

		c.addConstraint(constraint);
	    }


	    query =
		"SELECT " +
		"        tgconstrname, " +
		"        tgargs " + 
		"FROM " +
		"        pg_trigger t " +
		"WHERE " +
		"        t.tgrelid = (SELECT oid FROM pg_class WHERE relname = '" +
		           table.toLowerCase() + "') AND " +
		"        t.tgfoid = (SELECT oid FROM pg_proc WHERE proname = " +
		"          'RI_FKey_check_ins')";
	    rs = st.executeQuery(query);

	    while (rs.next()) {
		String name = rs.getString(1);
		String[] args = new String(rs.getBytes(2)).split("\000");

		Constraint constraint = 
		    new Constraint(rs.getString(1), args[4],
				   args[2], args[5]);

		Column c = findColumn(r, constraint.getColumn());
		if (c == null) {
		    throw new Exception("Got a constraint for column \"" +
					constraint.getColumn() + "\" of table " +
					table + ", but could not find column.  " +
					"Constraint: " + constraint);
		}

		c.addConstraint(constraint);
	    }
	}

	return r;
    }

