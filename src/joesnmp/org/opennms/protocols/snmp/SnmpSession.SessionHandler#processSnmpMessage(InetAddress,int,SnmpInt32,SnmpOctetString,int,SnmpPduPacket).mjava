        public void processSnmpMessage(InetAddress agent, int port, SnmpInt32 version, SnmpOctetString community, int pduType, SnmpPduPacket pdu) throws SnmpPduEncodingException {
            //
            // now find the request and
            // inform
            //
            boolean isExpired = false;
            SnmpRequest req = null;
            synchronized (m_requests) {
                //
                // ensures that we get the proper
                // state information
                //
                req = findRequest(pdu);
                if (req != null)
                    isExpired = req.m_expired;
            }

            if (isExpired == false) {
                int cmd = -1;
                if (req != null && req.m_pdu instanceof SnmpPduPacket)
                    cmd = ((SnmpPduPacket) req.m_pdu).getCommand();
                else {
                    cmd = pdu.getCommand();
                    pdu.setPeer(new SnmpPeer(agent, port));
                }

                switch (cmd) {
                case SnmpPduPacket.SET: {
                    String tst = new String(community.getString());
                    String wr = m_peer.getParameters().getWriteCommunity();
                    if (!tst.equals(wr)) {
                        throw new SnmpPduEncodingException("Invalid community string");
                    }
                }
                    break;

                case SnmpPduPacket.GET:
                case SnmpPduPacket.GETNEXT:
                case SnmpPduPacket.RESPONSE:
                case SnmpPduPacket.INFORM:
                case SnmpPduPacket.GETBULK:
                case SnmpPduPacket.REPORT: {
                    String tst = new String(community.getString());
                    String rd = m_peer.getParameters().getReadCommunity();
                    if (!tst.equals(rd)) {
                        throw new SnmpPduEncodingException("Invalid community string");
                    }
                }
                    break;

                default:
                    throw new SnmpPduEncodingException("Invalid PDU Type for session received");
                }
                if (req != null) {
                    req.m_expired = true; // mark it as expired
                    req.m_handler.snmpReceivedPdu(req.m_session, ((SnmpPduRequest) pdu).getCommand(), (SnmpPduRequest) pdu);
                } else {
                    m_defHandler.snmpReceivedPdu(null, cmd, pdu);
                }
            }
        }

