	/**
	 * Cancels the current outstanding reqeust as defined
	 * by the SnmpPduPacket's requestId method.
	 *
	 * @param requestId	The request to cancel
	 *
	 * @see SnmpPduPacket
	 *
	 * @throws java.lang.IllegalStateException Throw if the session has been closed.
	 */
	public void cancel(int requestId)
	{
		//
		// check to ensure that the session is still open
		//
		synchronized(m_sync)
		{
			if(m_stopRun) // session has been closed!
				throw new IllegalStateException("illegal operation, the session has been closed");
		}
		
		synchronized(m_requests)
		{
			if(m_requests.size() > 0)
			{
				ListIterator iter = m_requests.listIterator();
				while(iter.hasNext())
				{
					//
					// While the method owns the lock remove any expired
					// request and any request with a matching request id
					//
					SnmpRequest req = (SnmpRequest)iter.next();
					if(req.m_expired || (req.m_pdu instanceof SnmpPduPacket 
					                     && ((SnmpPduPacket)req.m_pdu).getRequestId() == requestId)) 
					{
						req.m_expired = true;
						iter.remove();
					}
				}
			}
		}
	}

