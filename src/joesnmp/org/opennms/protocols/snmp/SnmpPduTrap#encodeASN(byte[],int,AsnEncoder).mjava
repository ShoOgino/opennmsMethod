	/**
	 * Encodes the protocol data unit using the passed encoder and stores
	 * the results in the passed buffer. An exception is thrown if an 
	 * error occurs with the encoding of the information. 
	 *
	 * @param buf		The buffer to write the encoded information.
	 * @param offset	The offset to start writing information
	 * @param encoder	The encoder object.
	 *
	 * @return The offset of the byte immediantly after the last encoded byte.
	 *
	 * @exception AsnEncodingException Thrown if the encoder finds an error in the
	 *	buffer.
	 */
	public int encodeASN(byte[]	buf, 
			     int	offset,
			     AsnEncoder	encoder) throws AsnEncodingException
	{
		int begin = offset;
		
		//
		// encode the enterprise id & address
		//
		offset = m_enterprise.encodeASN(buf, offset, encoder);
		offset = m_agentAddr.encodeASN(buf, offset, encoder);
				//
		// encode the request id, error status (non-repeaters),
		// and error index (max-repititions).
		//
		{
			SnmpInt32 val = new SnmpInt32(m_generic);
			offset = val.encodeASN(buf, offset, encoder);
			val.setValue(m_specific);
			offset = val.encodeASN(buf, offset, encoder);
		}

		//
		// next is the timestamp
		//
		{
			SnmpTimeTicks val = new SnmpTimeTicks(m_tstamp);
			offset = val.encodeASN(buf, offset, encoder);
		}

		//
		// mark the beginning of the vblist
		//
		int vbbegin = offset;

		//
		// Now encode the SnmpVarBinds!
		//
		int sz = m_variables.size();
		for(int x = 0; x < sz; x++)
		{
			SnmpVarBind ref = (SnmpVarBind) m_variables.get(x);
			offset = ref.encodeASN(buf, offset, encoder);
		}

		//
		// now mark the end of the varbinds
		//
		int pivot = offset;

		//
		// build the header for the varbind list
		//
		offset = encoder.buildHeader(buf, 
					     offset,
					     SnmpVarBind.ASNTYPE,
					     pivot - vbbegin);

		//
		// rotate the varbind header to the front.
		// Then reset the pivot point
		//
		SnmpUtil.rotate(buf, vbbegin, pivot, offset);
		pivot = offset;


		//
		// Now encode the header for the PDU,
		// then rotate the header to the front.
		//
		offset = encoder.buildHeader(buf, 
					     offset, 
					     typeId(), 
					     pivot - begin);
		SnmpUtil.rotate(buf, begin, pivot, offset);

		return offset;
	}

