	/**
	 * Decodes the protocol data unit from the passed buffer. If an error
	 * occurs during the decoding sequence then an AsnDecodingException is
	 * thrown by the method. The value is decoded using the AsnEncoder
	 * passed to the object.
	 *
	 * @param buf		The encode buffer 
	 * @param offset	The offset byte to begin decoding
	 * @param encoder	The decoder object.
	 *
	 * @return The index of the byte immediantly after the last decoded
	 *	byte of information.
	 *
	 * @exception AsnDecodingException Thrown by the encoder if an error
	 *	occurs trying to decode the data buffer.
	 */
	public int decodeASN(byte[]	buf, 
			     int	offset, 
			     AsnEncoder encoder) throws AsnDecodingException
	{
		Object[] rVals = encoder.parseHeader(buf, offset);

		offset		= ((Integer)rVals[0]).intValue();
		int cmd		= ((Byte)rVals[1]).intValue();
		int length	= ((Integer)rVals[2]).intValue();
		int begin	= offset;

		//
		// set the command
		//
		if(cmd < 0)
			cmd += 256; // wrap the value to a positive quantity!
		if(TRAP != cmd)
			throw new AsnDecodingException("Invalid SNMP command, Not a Trap");

		offset = m_enterprise.decodeASN(buf, offset, encoder);
		offset = m_agentAddr.decodeASN(buf, offset, encoder);

		//
		// get an 32-bit integer to decode values
		//
		{
			SnmpInt32 val = new SnmpInt32();
		
			offset = val.decodeASN(buf, offset, encoder);
			m_generic = val.getValue();

			offset = val.decodeASN(buf, offset, encoder);
			m_specific = val.getValue();
		}

		//
		// Get the timestamp
		//
		{
			SnmpTimeTicks val = new SnmpTimeTicks();
			offset = val.decodeASN(buf, offset, encoder);
			m_tstamp = val.getValue();
		}

		//
		// get the total length of all
		// the variables
		//
		rVals		= encoder.parseHeader(buf, offset);
		offset		= ((Integer)rVals[0]).intValue();
		length		= ((Integer)rVals[2]).intValue();
		byte asnType	= ((Byte)rVals[1]).byteValue();

		//
		// check the ASN.1 type
		// 
		if(asnType != SnmpVarBind.ASNTYPE)
			throw new AsnDecodingException("Invalid SNMP variable list");

		//
		// set the beginning
		//
		begin = offset;

		//
		// clean out the current variables
		//
		m_variables.clear();

		//
		// decode the SnmpVarBinds
		//
		SnmpVarBind vb = new SnmpVarBind();
		while(length > 0)
		{
			offset = vb.decodeASN(buf, offset, encoder);
			length-= (offset - begin);
			begin  = offset;

			//
			// add the varbind
			//
			m_variables.add(vb.duplicate());
		}

		return offset;	
	}

