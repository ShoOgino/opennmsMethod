	/**
	 *
	 * The buildLength() method is used to encode an ASN.1 length
	 * into the specified byte buffer. The method is defined in
	 * the AsnEncoder interface.
	 *
	 * @param buf		The output buffer of encoded bytes.
	 * @param startOffset	The offset from the start of the buffer where the 
	 *			method should start writing the encoded data.
	 * @param asnLength	The length to be encoded.
	 *
	 * @return	Returns the new offset for the next encoding routine.
	 *		If the startOffset is subtracted from the return value
	 *		then the length of the encoded data can be determined.
	 *
	 * @exception	AsnEncodingException	Thrown if an error occurs encoding
	 *			the datatype.
	 */
	public int buildLength(byte[]	buf, 
			       int	startOffset,
			       int	asnLength) throws AsnEncodingException
	{
		if(asnLength <= 0x7f)
		{
			// 
			// check the buffer length
			//
			if((buf.length - startOffset) < 1)
				throw new AsnEncodingException("Buffer overflow error");

			buf[startOffset++] = (byte)(asnLength & 0x7f);
		}
		else if(asnLength <= 0xff)
		{
			//
			// check the buffer length
			//
			if((buf.length - startOffset) < 2)
				throw new AsnEncodingException("Buffer overflow error");

			buf[startOffset++] = (byte)(0x01 | LONG_LENGTH);
			buf[startOffset++] = (byte)(asnLength & 0xff);
		}
		else // 0xff < asnLength <= 0xffff
		{
			//
			// check the buffer length
			//
			if((buf.length - startOffset) < 3)
				throw new AsnEncodingException("Buffer overflow error");

			buf[startOffset++] = (byte)(0x02 | LONG_LENGTH);
			buf[startOffset++] = (byte)((asnLength >>> 8) & 0xff);
			buf[startOffset++] = (byte)(asnLength & 0xff);
		}
		return startOffset;
	}

