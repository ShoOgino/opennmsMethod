	/**
	 *
	 * The buildString() method is used to encode an ASN.1 string value
	 * into the specified byte buffer.
	 *
	 * @param buf		The output buffer of encoded bytes.
	 * @param startOffset	The offset from the start of the buffer where the 
	 *			method should start writing the encoded data.
	 * @param asnType	The ASN.1 type to place in the buffer
	 * @param opaque	An array of bytes to encode into the string.
	 *
	 * @return	Returns the new offset for the next encoding routine.
	 *		If startOffset is subtracted from the return value
	 *		then the length of the encoded data can be determined.
	 *
	 * @exception	AsnEncodingException	Thrown if an error occurs encoding
	 *			the datatype.
	 * 
	 */
	public int buildString(byte[]	buf,
			       int	startOffset,
			       byte	asnType,
			       byte[]	opaque) throws AsnEncodingException
	{
		//
		// get the length of the data
		//
		int asnLength = opaque.length;

		//
		// build the header
		//
		startOffset = buildHeader(buf, startOffset, asnType, asnLength);

		//
		// check the data length verses the remaining buffer
		// and then copy the data
		//
		if((buf.length - startOffset) < opaque.length)
			throw new AsnEncodingException("Insufficent buffer length");

		try
		{
			copy(opaque,		// source
			     0,			// source offset
			     buf,		// destination
			     startOffset,	// destination offset
			     opaque.length);	// bytes to copy
		}
		catch(ArrayIndexOutOfBoundsException err)
		{
			throw new AsnEncodingException("Buffer overflow error");
		}

		//
		// return the new offset
		//
		return startOffset + opaque.length;
	}

