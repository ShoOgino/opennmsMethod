	/**
	 * Computes the availability of the node. The rolling window 
	 * (in milliseconds) 
	 * @param endTime End Time of the rolling window in milliseconds.
	 * @return percentage availability of node for the last week.
	 */
	public double getPercentAvail(long endTime, long rollingWindow)
	{
		double percent = 0;
		long outage = 0;
		int serviceCount = 0;

		if(m_interfaces != null && m_interfaces.size() > 0)
		{
			ListIterator lstIter = m_interfaces.listIterator();
			while(lstIter.hasNext())
			{
				Interface intf = (Interface)lstIter.next();
				if(intf != null)
				{
					long down = intf.getDownTime(endTime, rollingWindow);
					if(down > 0)
						outage += down;
					serviceCount += intf.getServiceCount();
				}
			}
		}
		if(serviceCount > 0)
		{
			m_downTime = outage;
			m_totalWindow = rollingWindow * serviceCount;
			m_serviceCount = serviceCount;
			double denom = rollingWindow * serviceCount * 1.0d;
			double num = 1.0d * outage;
			percent = 100.0 * (1.0 - (num / denom));
		}
		else
			percent = 100.0;
		m_percentAvail = percent;
		return percent;
	}

