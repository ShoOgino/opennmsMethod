    /**
     * Returns a list of outage / out-since pairs for the rolling window
     * specified
     * 
     * @param curTime
     *            the current time from which the down time is to be calculated
     * @param rollingWindow
     *            the last window for which the downtime is to be calculated
     * 
     */
    public List getServiceOutages(String nodeName, long curTime, long rollingWindow) {
        if (nodeName == null)
            return null;

        // for each individual outage, get the downtime
        // 
        // calculate effective start time
        long startTime = curTime - rollingWindow;
        List retList = new ArrayList();

        Iterator iter = iterator();
        while (iter.hasNext()) {
            Outage svcTime = (Outage) iter.next();

            // ignore if the outage doesnt fall within the window.
            //
            if (svcTime.getRegainedTime() > 0) {
                if (svcTime.getRegainedTime() <= startTime)
                    continue;
            } else {
                if (svcTime.getLostTime() > curTime)
                    continue;
            }

            long outFrom = startTime;
            if (startTime < svcTime.getLostTime()) {
                outFrom = svcTime.getLostTime();
            }
            long outtime = svcTime.getDownTime(curTime, rollingWindow);
            OutageSince outageSince = null;
            if (outtime > 0)
                outageSince = new OutageSince(nodeName, outFrom, outtime);
            if (outageSince != null)
                retList.add(outageSince);
        }

        return retList;
    }

