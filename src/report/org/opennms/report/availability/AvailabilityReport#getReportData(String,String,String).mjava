    /**
     * This when invoked generates the data into report castor classes.
     * 
     * @param logourl
     *            location of the logo to be displayed on the report
     * @param categoryName
     *            of the logo to be displayed on the report
     * @param reportFormat
     *            Report Format ("SVG" / all)
     * 
     */
    public void getReportData(String logourl, String categoryName, String reportFormat) throws ValidationException, MarshalException, IOException, Exception {
        ThreadCategory.setPrefix(LOG4J_CATEGORY);
        Category log = ThreadCategory.getInstance(this.getClass());
        if (log.isDebugEnabled()) {
            log.debug("inside getReportData");
            log.debug("Category name  " + categoryName);
            log.debug("Report format   " + reportFormat);
            log.debug("logo  " + logourl);
        }

        m_report.setLogo(logourl);
        ViewInfo viewInfo = new ViewInfo();
        m_report.setViewInfo(viewInfo);
        org.opennms.report.availability.Categories categories = new org.opennms.report.availability.Categories();
        m_report.setCategories(categories);
        AvailabilityData availData = new AvailabilityData(categoryName, m_report, reportFormat);
        File file = new File(ConfigFileConstants.getHome() + "/share/reports/AvailReport.xml");
        try {
            FileWriter fileWriter = new FileWriter(file);
            Marshaller.marshal(m_report, fileWriter);
            if (log.isDebugEnabled())
                log.debug("The xml marshalled from the castor classes is saved in " + ConfigFileConstants.getHome() + "/share/reports/AvailReport.xml");
            fileWriter.close();
        } catch (ValidationException validex) {
            if (log.isEnabledFor(Priority.FATAL))
                log.fatal("ValidationException ", validex);
        } catch (MarshalException marex) {
            if (log.isEnabledFor(Priority.FATAL))
                log.fatal("MarshalException ", marex);
        } catch (IOException ioe) {
            if (log.isEnabledFor(Priority.FATAL))
                log.fatal("IOException ", ioe);
        }
    }

