    /**
     * Last Months Top N Service Outages.
     * 
     * @param catSections
     *            Castors sections
     * @param label
     *            Section name in the xml
     * @param descr
     *            Section descr.
     */
    private void lastMonTopNServiceOutages(CatSections catSections, String label, String descr) {
        ThreadCategory.setPrefix(LOG4J_CATEGORY);
        org.apache.log4j.Category log = ThreadCategory.getInstance(this.getClass());
        // Result is a map of outage / lost time
        //

        // For each monitored service, get all individual outages.
        //
        TreeMap treeMap = null;
        Set serviceNames = m_services.keySet();
        Iterator iterator = serviceNames.iterator();
        while (iterator.hasNext()) {
            treeMap = new TreeMap();
            String service = (String) iterator.next();
            Map ifSvcOutageList = (Map) m_services.get(service);
            Set keysIfServices = ifSvcOutageList.keySet();
            Iterator ifSvcIter = keysIfServices.iterator();
            while (ifSvcIter.hasNext()) {
                IfService ifservice = (IfService) ifSvcIter.next();
                if (ifservice != null) {
                    OutageSvcTimesList outageSvcList = (OutageSvcTimesList) ifSvcOutageList.get(ifservice);
                    if (outageSvcList != null) {
                        long rollingWindow = m_daysInLastMonth * ROLLING_WINDOW;
                        List svcOutages = outageSvcList.getServiceOutages(ifservice.getNodeName(), m_endLastMonthTime, rollingWindow);
                        Iterator iter = svcOutages.iterator();
                        while (iter.hasNext()) {
                            OutageSince outageSince = (OutageSince) iter.next();
                            if (outageSince != null) {
                                long outage = outageSince.getOutage() / 1000;
                                List tmpList = (List) treeMap.get(new Long(outage));
                                if (tmpList == null)
                                    tmpList = new ArrayList();
                                tmpList.add(outageSince);
                                treeMap.put(new Long(-1 * outage), tmpList);
                            }
                        }
                    }
                }
            }
            log.debug("Top 20 service outages from the list " + treeMap);
            Set outageKeys = treeMap.keySet();
            Iterator lstIter = outageKeys.iterator();
            int top20Count = 0;
            Rows rows = new Rows();
            loop: while (lstIter.hasNext()) {
                Long outage = (Long) lstIter.next();
                List list = (List) treeMap.get(outage);
                ListIterator listIterator = list.listIterator();
                while (listIterator.hasNext()) {
                    OutageSince outageSince = (OutageSince) listIterator.next();
                    top20Count++;
                    String nodeName = outageSince.getNodeName();

                    Value nodeValue = new Value();
                    nodeValue.setContent(nodeName);
                    nodeValue.setType("title");

                    Value value = new Value();
                    long outtime = outageSince.getOutage() / 1000;
                    int hrs = (new Long(outtime / (60 * 60))).intValue();
                    int remain = (new Long(outtime % (60 * 60))).intValue();
                    int mins = remain / (60);
                    remain = remain % (60);
                    int secs = remain;
                    log.debug("Outage : " + outtime + " in mins " + hrs + " hrs " + mins + " mins " + secs + " secs ");
                    value.setContent(hrs + " hrs " + mins + " mins " + secs + " secs ");
                    value.setType("data");

                    Value datevalue = new Value();
                    SimpleDateFormat fmt = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss");
                    datevalue.setContent(fmt.format(new Date(outageSince.getOutTime())));
                    datevalue.setType("other");

                    Row row = new Row();
                    row.addValue(nodeValue);
                    row.addValue(value);
                    row.addValue(datevalue);
                    rows.addRow(row);

                    if (top20Count >= 20) {
                        break loop;
                    }
                }
            }
            Col col = new Col();
            col.addColTitle(0, "Node Name");
            col.addColTitle(1, "Duration Of Outage");
            col.addColTitle(2, "Service Lost Time");
            Section section = new Section();
            section.setCol(col);
            section.setRows(rows);
            section.setSectionName(label + " " + service);
            section.setSectionTitle(label + " " + service);
            section.setSectionDescr(descr + " " + service);
            section.setSectionIndex(m_sectionIndex);
            m_sectionIndex++;
            catSections.addSection(section);
        }
    }

