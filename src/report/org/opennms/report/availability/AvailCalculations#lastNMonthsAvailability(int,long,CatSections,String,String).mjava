	/**
	 * Last N Months Availability
	 *
	 * @param nMonths Number of months for which the availability computations are made.
         * @param endTime End time
         * @param catSections Castors sections
         * @param label Section name in the xml
         * @param descr Section descr.
	 */
	private void lastNMonthsAvailability( int nMonths, long endTime , CatSections catSections, String label, String descr)
	{
		ThreadCategory.setPrefix(LOG4J_CATEGORY);
		org.apache.log4j.Category log = ThreadCategory.getInstance(this.getClass());
                log.debug("Inside lastNMonthsAvailability");
                Rows rows = new Rows();
                int numMonths = 0;
		
		int numDays = getDaysForMonth(endTime);
		Calendar calendar = new GregorianCalendar();
		calendar.setTime (new Date(endTime));
		int month = calendar.get(Calendar.MONTH);
		int year = calendar.get(Calendar.YEAR);
		int day = calendar.get(Calendar.DAY_OF_MONTH);
		calendar.set(year, month, numDays, 23, 59, 59);
		endTime = calendar.getTime().getTime();
		SimpleDateFormat fmt = new SimpleDateFormat("MMM, yyyy");
		String periodEnd = fmt.format(new java.util.Date(endTime));
		TreeMap treeMap = new TreeMap ();	// Holds all the month/percent values to be displayed in order on pdf.
		String periodFrom = null;

                while(numMonths++ < nMonths)
                {
                        int serviceCount = 0;
                        long outage = 0;
			log.debug("Number of days " + numDays + " in month of " + new Date(endTime ));
			long rollingWindow = numDays * ROLLING_WINDOW * 1l;
                        //
                        // get the outage and service count.
                        //
                        ListIterator listIter = m_nodes.listIterator();
                        while(listIter.hasNext())
                        {
                                Node node = (Node)listIter.next();
                                serviceCount += node.getServiceCount();
                                outage += node.getOutage(endTime, rollingWindow);
                        }
			double percentAvail;
			if(serviceCount > 0)
	                        percentAvail = 100.0 * (1 - (outage * 1.0)/(1.0 * serviceCount * rollingWindow));
			else
				percentAvail = 100.0;

			treeMap.put(new java.util.Date(endTime) , formatNumber(percentAvail + ""));

			periodFrom = fmt.format(new java.util.Date(endTime));
			calendar = new GregorianCalendar();
			calendar.setTime (new Date(endTime));
			month = calendar.get(Calendar.MONTH);
			year = calendar.get(Calendar.YEAR);
			day = calendar.get(Calendar.DAY_OF_MONTH);
			calendar.set(year, month-1, 1, 0, 0, 0);
			endTime = calendar.getTime().getTime();
			month = calendar.get(Calendar.MONTH);
			year = calendar.get(Calendar.YEAR);
			day = calendar.get(Calendar.DAY_OF_MONTH);
			numDays = getDaysForMonth(endTime);
			calendar.set(year, month, numDays, 23, 59, 59);
			endTime = calendar.getTime().getTime();
                }

		Set keyDates = treeMap.keySet();
		Iterator iter = keyDates.iterator();
		while(iter.hasNext())
		{
			Date key = (Date)iter.next();
                        Value dateValue = new Value();
			SimpleDateFormat fmtmp = new SimpleDateFormat("MMM");
                        dateValue.setContent(fmtmp.format(key)+"");
                        dateValue.setType("title");

                        Value value = new Value();
			String percent = (String)treeMap.get(key);
                        value.setContent(percent);
                        value.setType("data");

                        Row row = new Row();
                        row.addValue(dateValue);
                        row.addValue(value);
                        rows.addRow(row);
		}

                Col col = new Col();
                col.addColTitle(0, "Date");
                col.addColTitle(1, "Percentage Availability");
                Section section = new Section();
                section.setCol(col);
                section.setRows(rows);
                section.setSectionName("last12MoAvail");
                section.setSectionTitle(label);
                section.setSectionDescr(descr);
                section.setPeriod(periodFrom + " to " + periodEnd);
		section.setSectionIndex(m_sectionIndex);
		m_sectionIndex++;
                catSections.addSection(section);
                log.debug("Leaving lastNMonthsAvailability");
	}

