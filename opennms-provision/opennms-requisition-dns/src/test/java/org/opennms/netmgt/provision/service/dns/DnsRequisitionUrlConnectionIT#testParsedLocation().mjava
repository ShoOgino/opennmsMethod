    @Test
    @JUnitDNSServer(port=9153, zones={
            @DNSZone(name = "hs-fulda.de", entries = {
                    @DNSEntry(hostname = "g51onms.g51", data = "72.14.204.2"),
                    @DNSEntry(hostname = "e46onms.e46", data = "72.14.204.3"),
            })
    })
    public void testParsedLocation() throws IOException, JAXBException {
        final String urlString = "dns://localhost:9153/hs-fulda.de/?expression=^.*\\.[a-z][0-9][0-9]\\.hs-fulda\\.de\\.$&location=~"+ URLEncoder.encode("^(?:.*\\.|)(.*?)\\.hs-fulda\\.de\\.$","UTF-8");
        final Resource resource = new UrlResource(urlString);

        Assert.assertEquals(urlString, resource.getURL().toString());
        Assert.assertNotNull(resource);

        final InputStream resourceStream = resource.getInputStream();
        final JAXBContext context = JAXBContext.newInstance(Requisition.class);
        final Unmarshaller unmarshaller = context.createUnmarshaller();
        unmarshaller.setSchema(null);
        final Requisition requisition = (Requisition) unmarshaller.unmarshal(resourceStream);

        Assert.assertEquals(2, requisition.getNodeCount());

        final RequisitionNode node1 = requisition.getNodes().stream().filter(e->e.getNodeLabel().contains("e46")).findFirst().get();
        final RequisitionNode node2 = requisition.getNodes().stream().filter(e->e.getNodeLabel().contains("g51")).findFirst().get();
        Assert.assertEquals("e46", node1.getLocation());
        Assert.assertEquals("g51", node2.getLocation());

        resourceStream.close();
    }

