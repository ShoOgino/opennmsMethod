    /* (non-Javadoc)
     * @see org.opennms.netmgt.utils.jmx.connectors.ConnectionFactory#getMBeanServer()
     */
    /**
     * <p>getMBeanServerConnection</p>
     *
     * @param propertiesMap a {@link java.util.Map} object.
     * @param address a {@link java.net.InetAddress} object.
     * @return a {@link org.opennms.netmgt.provision.support.jmx.connectors.JBossConnectionWrapper} object.
     */
    public static JBossConnectionWrapper getMBeanServerConnection(Map<String,Object> propertiesMap, InetAddress address) {
        
        JBossConnectionWrapper wrapper = null;
        //IsolatingClassLoader   icl     = null;
        ClassLoader icl = null;
        final ClassLoader originalLoader = Thread.currentThread().getContextClassLoader();
                
        String connectionType = ParameterMap.getKeyedString(propertiesMap, "factory", "RMI");
        String timeout        = ParameterMap.getKeyedString(propertiesMap, "timeout", "3000");
        String jbossVersion   = ParameterMap.getKeyedString(propertiesMap, "version", "4");
        String port           = ParameterMap.getKeyedString(propertiesMap, "port",    "1099");

        
        if (connectionType == null) {
            return null;
        }

        if (jbossVersion == null || jbossVersion.startsWith("4")) {
            icl = createIsolatingClassloader(originalLoader, new File(System.getProperty("opennms.home") + "/lib/jboss/jbossall-client.jar"));
        } else if (jbossVersion.startsWith("3")){
            icl = createIsolatingClassloader(originalLoader, new File(System.getProperty("opennms.home") + "/lib/jboss/jbossall-client32.jar"));
        }

        if (icl == null) {
            return null;
        }
        
        Thread.currentThread().setContextClassLoader(icl);
        
        try {
            if (connectionType.equals("RMI")) {
                InitialContext ctx = null;

                try {

                    Hashtable<String, String> props = new Hashtable<String, String>();

                    //"org.jboss.naming.NamingContextFactory"
                    props.put(Context.INITIAL_CONTEXT_FACTORY, "org.jnp.interfaces.NamingContextFactory");
                    props.put(Context.PROVIDER_URL, "jnp://" + InetAddressUtils.str(address) + ":" + port);
                    props.put(Context.URL_PKG_PREFIXES, "org.jboss.naming:org.jnp.interfaces");
                    props.put("jnp.sotimeout", timeout);

                    try {
                        ctx = new InitialContext(props);
                        Object rmiAdaptor = ctx.lookup("jmx/rmi/RMIAdaptor");
                        wrapper = new JBossConnectionWrapper(MBeanServerProxy.buildServerProxy(rmiAdaptor));
                    } catch (final Throwable t) {
                        LogUtils.debugf(JBossConnectionFactory.class, t, "Unable to connect to JBOSS");
                    }
                } finally {
                    try {
                        if (ctx != null) {
                            ctx.close();
                        }
                    } catch (Throwable e1) {
                        // ignore
                    }
                }
            } else if (connectionType.equals("HTTP")) {
                InitialContext ctx = null;
                // String invokerSuffix = null;

                try {

                    Hashtable<String, String> props = new Hashtable<String, String>();
                    props.put(Context.INITIAL_CONTEXT_FACTORY, "org.jboss.naming.HttpNamingContextFactory");
                    props.put(Context.PROVIDER_URL, "http://" + InetAddressUtils.str(address) + ":" + port + "/invoker/JNDIFactory");
                    props.put("jnp.sotimeout", timeout);

                    ctx = new InitialContext(props);

                    Object rmiAdaptor = ctx.lookup("jmx/rmi/RMIAdaptor");
                    wrapper = new JBossConnectionWrapper(MBeanServerProxy.buildServerProxy(rmiAdaptor));

                } catch (Throwable e) {
                    //log.debug("JBossConnectionFactory - unable to get MBeanServer using HTTP on " + InetAddressUtils.str(address) + invokerSuffix);
                } finally {
                    try {
                        if (ctx != null) {
                            ctx.close();
                        }
                    } catch (NamingException e1) {
                        //log.debug("JBossConnectionFactory error closing initial context");
                    }
                }
            }
        } finally {
            Thread.currentThread().setContextClassLoader(originalLoader);
        }
        return wrapper;
    }

