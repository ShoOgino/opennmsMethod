    /**
     * <p>getRunnable</p>
     *
     * @return a {@link java.lang.Runnable} object.
     * @throws java.lang.Exception if any.
     */
    @Override
    protected Runnable getRunnable() throws Exception {
        return new Runnable(){
            
            @Override
            public void run(){
                try{
                    OutputStream out = null;
                    BufferedReader in = null;
                    try {
                        getServerSocket().setSoTimeout(getTimeout());
                        setSocket(getServerSocket().accept());
                        
                        if(getThreadSleepLength() > 0) { Thread.sleep(getThreadSleepLength()); }
                        getSocket().setSoTimeout(getTimeout());
                        
                        out = getSocket().getOutputStream();
                        if(getBanner() != null){sendBanner(out);};
                        
                        
                        in = new BufferedReader(new InputStreamReader(getSocket().getInputStream()));
                        attemptConversation(in, out);
                    } finally {
                        IOUtils.closeQuietly(in);
                        IOUtils.closeQuietly(out);
                        getSocket().close();
                    }
                }catch(Throwable e){
                    throw new UndeclaredThrowableException(e);
                } finally {
                    try {
                        stopServer();
                    } catch (final IOException e) {
                        LogUtils.debugf(this, e, "unable to stop server");
                    }
                }
            }
            
        };
    }

