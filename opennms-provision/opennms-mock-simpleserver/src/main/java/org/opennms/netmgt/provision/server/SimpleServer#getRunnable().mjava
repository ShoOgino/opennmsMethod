    /**
     * <p>getRunnable</p>
     *
     * @return a {@link java.lang.Runnable} object.
     * @throws java.lang.Exception if any.
     */
    protected Runnable getRunnable() throws Exception {
        return new Runnable(){
            
            public void run(){
                OutputStream out = null;
                InputStreamReader isr = null;
                BufferedReader in = null;
                try{
                    if (getTimeout() > 0) {
                        getServerSocket().setSoTimeout(getTimeout());
                    }
                    while (!m_stopped) {
                        setSocket(getServerSocket().accept());
                        if (m_threadSleepLength > 0) {
                            Thread.sleep(m_threadSleepLength);
                        }
                        if (getTimeout() > 0) {
                            getSocket().setSoTimeout(getTimeout());
                        }
                        out = getSocket().getOutputStream();
                        if (getBanner() != null) {
                            sendBanner(out);
                        }
                        isr = new InputStreamReader(getSocket().getInputStream());
                        in = new BufferedReader(isr);
                        attemptConversation(in, out);
                    }
                } catch (final Exception e){
                    LogUtils.infof(this, e, "error during conversation");
                } finally {
                    IOUtils.closeQuietly(in);
                    IOUtils.closeQuietly(isr);
                    IOUtils.closeQuietly(out);
                    m_latch.countDown();
                    try {
                        // just in case we're stopping because of an exception
                        stopServer();
                    } catch (final IOException e) {
                        LogUtils.infof(this, e, "error while stopping server");
                    }
                }
            }
            
        };
    }

