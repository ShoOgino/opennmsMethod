    /**
     * <p>getRunnable</p>
     *
     * @return a {@link java.lang.Runnable} object.
     * @throws java.lang.Exception if any.
     */
    protected Runnable getRunnable() throws Exception {
        return new Runnable(){
            
            @Override
            public void run(){
                OutputStream out = null;
                InputStreamReader isr = null;
                BufferedReader in = null;
                try{
                    if (getTimeout() > 0) {
                        getServerSocket().setSoTimeout(getTimeout());
                    }
                    while (!m_stopped && getServerThread() != null) {
                        long startTime = 0;
                        try {
                            setSocket(getServerSocket().accept());
                            if (getTimeout() > 0) {
                                getSocket().setSoTimeout(getTimeout());
                            }
                            out = getSocket().getOutputStream();
                            startTime = System.currentTimeMillis();
                            if (m_threadSleepLength > 0) {
                                Thread.sleep(m_threadSleepLength);
                            }
                            if (getBanner() != null) {
                                sendBanner(out);
                            }
                            isr = new InputStreamReader(getSocket().getInputStream());
                            in = new BufferedReader(isr);
                            attemptConversation(in, out);
                        } finally {
                            // Sleep to make sure we connect at least as long as the timeout that is set
                            long sleepMore = startTime + getTimeout() - System.currentTimeMillis();
                            if (sleepMore > 0) {
                                try { Thread.sleep(sleepMore); } catch (InterruptedException e) {}
                            }
                            
                            IOUtils.closeQuietly(in);
                            IOUtils.closeQuietly(isr);
                            IOUtils.closeQuietly(out);
                            // TODO: Upgrade IOUtils so that we can use this function
                            // IOUtils.closeQuietly(getSocket());
                            getSocket().close();
                        }
                    }
                } catch (final InterruptedException e) {
                    if (m_stopped) {
                        LogUtils.debugf(this, e, "interrupted, shutting down");
                    } else {
                        LogUtils.infof(this, e, "interrupted while listening");
                    }
                    Thread.currentThread().interrupt();
                } catch (final Exception e){
                    if (m_stopped) {
                        if (LogUtils.isTraceEnabled(this)) {
                            LogUtils.tracef(this, e, "error during conversation");
                        }
                    } else {
                        LogUtils.infof(this, e, "error during conversation");
                    }
                } finally {
                    try {
                        // just in case we're stopping because of an exception
                        stopServer();
                    } catch (final IOException e) {
                        LogUtils.infof(this, e, "error while stopping server");
                    }
                }
            }
            
        };
    }

