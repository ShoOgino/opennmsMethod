    @Test
    public void testScriptPolicy() throws Exception {
        // create one node
        OnmsNode node1 = new OnmsNode();
        node1.setNodeId("1");
        node1.setLocation(new OnmsMonitoringLocation("Default", ""));

        final OnmsIpInterface iface1_1 = new OnmsIpInterface();
        iface1_1.setIpAddress(InetAddress.getByName("172.16.0.1"));
        iface1_1.setIsSnmpPrimary(PrimaryType.PRIMARY);

        final OnmsIpInterface iface1_2 = new OnmsIpInterface();
        iface1_2.setIpAddress(InetAddress.getByName("172.17.0.1"));
        iface1_2.setIsSnmpPrimary(PrimaryType.SECONDARY);

        final OnmsIpInterface iface1_3 = new OnmsIpInterface();
        iface1_3.setIpAddress(InetAddress.getByName("192.168.0.10"));
        iface1_3.setIsSnmpPrimary(PrimaryType.NOT_ELIGIBLE);

        node1.addIpInterface(iface1_1);
        node1.addIpInterface(iface1_2);
        node1.addIpInterface(iface1_3);

        node1.setForeignSource("nodes");
        node1.setForeignId("1");
        node1.setLabel("Node-1-Foo");

        // create another one
        OnmsNode node2 = new OnmsNode();
        node2.setNodeId("2");
        node2.setLocation(new OnmsMonitoringLocation("Default", ""));

        final OnmsIpInterface iface2_1 = new OnmsIpInterface();
        iface2_1.setIpAddress(InetAddress.getByName("172.16.0.1"));
        iface2_1.setIsSnmpPrimary(PrimaryType.PRIMARY);

        final OnmsIpInterface iface2_2 = new OnmsIpInterface();
        iface2_2.setIpAddress(InetAddress.getByName("172.17.0.1"));
        iface2_2.setIsSnmpPrimary(PrimaryType.SECONDARY);

        final OnmsIpInterface iface2_3 = new OnmsIpInterface();
        iface2_3.setIpAddress(InetAddress.getByName("192.168.0.20"));
        iface2_3.setIsSnmpPrimary(PrimaryType.NOT_ELIGIBLE);

        node2.addIpInterface(iface2_1);
        node2.addIpInterface(iface2_2);
        node2.addIpInterface(iface2_3);

        node2.setForeignSource("nodes");
        node2.setForeignId("2");
        node2.setLabel("Node-2-Bar");

        // create policy that matches only the first node
        final ScriptPolicy p = new ScriptPolicy(Paths.get("src", "test", "resources").toAbsolutePath());
        p.setLabel("~.*Foo$");
        p.setMatchBehavior("ALL_PARAMETERS");
        p.setScript("policy.groovy");
        NodeDao mockNodeDao = Mockito.mock(NodeDao.class);
        when(mockNodeDao.get(Mockito.eq(1))).thenReturn(node1);
        when(mockNodeDao.get(Mockito.eq(2))).thenReturn(node2);
        p.setNodeDao(mockNodeDao);
        p.setSessionUtils(new MockSessionUtils());

        node1 = p.apply(node1, Collections.emptyMap());

        // check that the data of the first node is altered
        assertEquals(PrimaryType.NOT_ELIGIBLE, node1.getIpInterfaceByIpAddress("172.16.0.1").getIsSnmpPrimary());
        assertEquals(PrimaryType.NOT_ELIGIBLE, node1.getIpInterfaceByIpAddress("172.17.0.1").getIsSnmpPrimary());
        assertEquals(PrimaryType.PRIMARY, node1.getIpInterfaceByIpAddress("192.168.0.10").getIsSnmpPrimary());
        assertEquals("custom-location", node1.getLocation().getLocationName());

        node2 = p.apply(node2, Collections.emptyMap());

        // check that the second node is not modified
        assertEquals(PrimaryType.PRIMARY, node2.getIpInterfaceByIpAddress("172.16.0.1").getIsSnmpPrimary());
        assertEquals(PrimaryType.SECONDARY, node2.getIpInterfaceByIpAddress("172.17.0.1").getIsSnmpPrimary());
        assertEquals(PrimaryType.NOT_ELIGIBLE, node2.getIpInterfaceByIpAddress("192.168.0.20").getIsSnmpPrimary());
        assertEquals("Default", node2.getLocation().getLocationName());
    }

