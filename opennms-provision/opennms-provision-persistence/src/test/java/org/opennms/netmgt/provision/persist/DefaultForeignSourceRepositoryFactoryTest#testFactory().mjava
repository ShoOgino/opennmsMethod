    /**
     * Test factory.
     */
    @Test
    public void testFactory() {
        // Testing default implementation

        assertTrue(m_foreignSourceRepositoryFactory.getDeployedRepository() instanceof FilesystemForeignSourceRepository);
        assertTrue(m_foreignSourceRepositoryFactory.getPendingRepository() instanceof FilesystemForeignSourceRepository);

        // Testing custom implementation

        m_foreignSourceRepositoryFactory.setRepositoryStrategy(FactoryStrategy.fastFile);
        assertTrue(m_foreignSourceRepositoryFactory.getDeployedRepository() instanceof FasterFilesystemForeignSourceRepository);
        assertTrue(m_foreignSourceRepositoryFactory.getPendingRepository() instanceof FasterFilesystemForeignSourceRepository);

        m_foreignSourceRepositoryFactory.setRepositoryStrategy(FactoryStrategy.fused);
        assertTrue(m_foreignSourceRepositoryFactory.getDeployedRepository() instanceof FusedForeignSourceRepository);
        assertTrue(m_foreignSourceRepositoryFactory.getPendingRepository() instanceof FusedForeignSourceRepository);

        m_foreignSourceRepositoryFactory.setRepositoryStrategy(FactoryStrategy.caching);
        assertTrue(m_foreignSourceRepositoryFactory.getDeployedRepository() instanceof CachingForeignSourceRepository);
        assertTrue(m_foreignSourceRepositoryFactory.getPendingRepository() instanceof CachingForeignSourceRepository);

        m_foreignSourceRepositoryFactory.setRepositoryStrategy(FactoryStrategy.fastCaching);
        assertTrue(m_foreignSourceRepositoryFactory.getDeployedRepository() instanceof CachingForeignSourceRepository);
        assertTrue(m_foreignSourceRepositoryFactory.getPendingRepository() instanceof CachingForeignSourceRepository);

        m_foreignSourceRepositoryFactory.setRepositoryStrategy(FactoryStrategy.queueing);
        assertTrue(m_foreignSourceRepositoryFactory.getDeployedRepository() instanceof QueueingForeignSourceRepository);
        assertTrue(m_foreignSourceRepositoryFactory.getPendingRepository() instanceof QueueingForeignSourceRepository);

        m_foreignSourceRepositoryFactory.setRepositoryStrategy(FactoryStrategy.fastQueueing);
        assertTrue(m_foreignSourceRepositoryFactory.getDeployedRepository() instanceof QueueingForeignSourceRepository);
        assertTrue(m_foreignSourceRepositoryFactory.getPendingRepository() instanceof QueueingForeignSourceRepository);
    }

