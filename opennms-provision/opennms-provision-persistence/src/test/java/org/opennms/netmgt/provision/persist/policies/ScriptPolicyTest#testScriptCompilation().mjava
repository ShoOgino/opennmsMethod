    @Test
    public void testScriptCompilation() throws Exception {
        // create one node
        OnmsNode node1 = new OnmsNode();
        node1.setNodeId("1");
        node1.setLocation(new OnmsMonitoringLocation("Default", ""));

        final OnmsIpInterface iface1_1 = new OnmsIpInterface();
        iface1_1.setIpAddress(InetAddress.getByName("172.16.0.1"));
        iface1_1.setIsSnmpPrimary(PrimaryType.PRIMARY);

        final OnmsIpInterface iface1_2 = new OnmsIpInterface();
        iface1_2.setIpAddress(InetAddress.getByName("172.17.0.1"));
        iface1_2.setIsSnmpPrimary(PrimaryType.SECONDARY);

        final OnmsIpInterface iface1_3 = new OnmsIpInterface();
        iface1_3.setIpAddress(InetAddress.getByName("192.168.0.10"));
        iface1_3.setIsSnmpPrimary(PrimaryType.NOT_ELIGIBLE);

        node1.addIpInterface(iface1_1);
        node1.addIpInterface(iface1_2);
        node1.addIpInterface(iface1_3);

        node1.setForeignSource("nodes");
        node1.setForeignId("1");
        node1.setLabel("Node-1-Foo");

        // create temporary file...
        final File scriptFile = File.createTempFile("foobar", ".groovy");

        // ...and attach it to the ScriptPolicy
        final ScriptPolicy p = new ScriptPolicy(Paths.get("src", "test", "resources").toAbsolutePath());
        p.setLabel("~.*");
        p.setMatchBehavior("ALL_PARAMETERS");
        p.setScript(scriptFile.getAbsolutePath());

        // create script file's content and modify lastModified
        createScriptFile(scriptFile, 1, false);

        // first run, it should compile and results in a "Test #1" node label
        node1 = p.apply(node1);
        assertEquals("Test #1", node1.getLabel());
        Thread.sleep(500);

        // update script file's content and leave lastModified unchanged
        createScriptFile(scriptFile, 2, true);

        // second run with an unmodified lastModified, it should not compile and should still results in a "Test #1" node label
        node1 = p.apply(node1);
        assertEquals("Test #1", node1.getLabel());
        Thread.sleep(500);

        // update script file's content and modify lastModified
        createScriptFile(scriptFile, 3, false);

        // third run with a modified lastModified, it should compile and result in a "Test #3" node label
        node1 = p.apply(node1);
        assertEquals("Test #3", node1.getLabel());
    }

