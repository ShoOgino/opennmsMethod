    /* (non-Javadoc)
     * @see java.lang.Runnable#run()
     */
    @Override
    @SuppressWarnings("unchecked")
    public void run() {
        LOG.info("starting run loop");
        try (WatchService watcher = m_path.getFileSystem().newWatchService()) {
            LOG.debug("registering create watcher on {}", m_path.toAbsolutePath().toString());
            m_path.register(watcher, StandardWatchEventKinds.ENTRY_CREATE, StandardWatchEventKinds.ENTRY_DELETE, StandardWatchEventKinds.ENTRY_MODIFY);
            LOG.debug("watcher registration complete for {}", m_path.toAbsolutePath().toString());
            synchronized (this) {
                this.notifyAll();
            }
            while (true) {
                if (m_thread.isInterrupted()) {
                    break;
                }
                WatchKey key = null;
                try {
                    LOG.debug("waiting for create event");
                    key = watcher.take();
                    LOG.debug("got an event, process it");
                } catch (InterruptedException ie) {
                    LOG.info("interruped, must be time to shut down...");
                    break;
                }

                for (WatchEvent<?> watchEvent : key.pollEvents()) {
                    WatchEvent.Kind<?> kind = watchEvent.kind();
                    Path pathChanged = ((WatchEvent<Path>) watchEvent).context();
                    final String fileName = pathChanged.toString();
                    final File file = new File(m_directory, fileName);
                    if (file.isDirectory()) { // Ignoring changes on directories.
                        LOG.debug("{} is a directory, ignoring.", file);
                        continue;
                    }
                    if (kind == StandardWatchEventKinds.OVERFLOW) {
                        LOG.debug("overflow receiving, ignoring changes.");
                        continue;
                    } else if (kind == StandardWatchEventKinds.ENTRY_CREATE) {
                        LOG.info("file '{}' created. Ignoring...", fileName);
                    } else if (kind == StandardWatchEventKinds.ENTRY_MODIFY) {
                        LOG.info("file '{}' modified. Removing entry from cache.", fileName);
                        m_contents.remove(fileName);
                    } else if (kind == StandardWatchEventKinds.ENTRY_DELETE) {
                        LOG.info("file '{}' deleted. Removing entry from cache.", fileName);
                        m_contents.remove(fileName);
                    }
                    // IMPORTANT: The key must be reset after processed
                    if (! key.reset()) {
                        break;
                    }
                }
            }
        } catch (IOException ioe) {
            LOG.error(ioe.getMessage(), ioe);
        }
        LOG.info("existing run loop");
    }

