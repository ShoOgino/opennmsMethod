    /** {@inheritDoc} */
    @Override
    public OnmsIpInterface act(OnmsIpInterface iface) {
        OnmsSnmpInterface snmpiface = iface.getSnmpInterface();
        switch (m_action) {
        case DO_NOT_PERSIST: 
            LogUtils.debugf(this, "NOT Peristing %s according to policy", iface);
            return null;
        case MANAGE:
            LogUtils.debugf(this, "Managing %s according to policy", iface);
            iface.setIsManaged("M");
            return iface;
        case UNMANAGE:
            LogUtils.debugf(this, "Unmanaging %s according to policy", iface);
            iface.setIsManaged("U");
            return iface;
        case ENABLE_SNMP_POLL:
            LogUtils.debugf(this, "Snmp Polling %s according to policy", iface);
            snmpiface.setPoll("P");
            iface.setSnmpInterface(snmpiface);
            return iface;
        case DISABLE_SNMP_POLL:
            LogUtils.debugf(this, "Disable Snmp Polling %s according to policy", iface);
            snmpiface.setPoll("N");
            iface.setSnmpInterface(snmpiface);
            return iface;
        case DISABLE_COLLECTION:
            LogUtils.debugf(this, "Disabled collection for %s according to policy", iface);
            snmpiface.setCollectionEnabled(false);
            iface.setSnmpInterface(snmpiface);
            return iface;
        case ENABLE_COLLECTION:
            LogUtils.debugf(this, "Enabled collection for %s according to policy", iface);
            snmpiface.setCollectionEnabled(true);
            iface.setSnmpInterface(snmpiface);
            return iface;
        default:
            return iface;    
        }
    }

