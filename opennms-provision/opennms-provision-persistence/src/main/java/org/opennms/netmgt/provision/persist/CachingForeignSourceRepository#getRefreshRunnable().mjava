    protected Runnable getRefreshRunnable() {
        return new Runnable() {
            @Override
            public void run() {
                writeLock();
                try {

                    // clear foreign source name cache
                    m_foreignSourceNames = null;

                    // clear the foreign source cache
                    if (m_dirtyForeignSources.size() > 0) {
                        for (final String dirtyForeignSource : m_dirtyForeignSources) {
                            final ForeignSource fs = getForeignSourceMap().get(dirtyForeignSource);
                            try {
                                if (fs == null) {
                                    final ForeignSource current = m_foreignSourceRepository.getForeignSource(dirtyForeignSource);
                                    if (current != null) {
                                        m_foreignSourceRepository.delete(current);
                                    }
                                } else {
                                    m_foreignSourceRepository.save(fs);
                                }
                            } catch (final ForeignSourceRepositoryException e) {
                                LOG.error("Failed to persist foreign source {}", dirtyForeignSource, e);
                            }
                        }
                        m_dirtyForeignSources.clear();
                    }
                    m_foreignSources = null;

                    // clear the requisition cache
                    if (m_dirtyRequisitions.size() > 0) {
                        for (final String dirtyRequisition : m_dirtyRequisitions) {
                            final Requisition r = getRequisitionMap().get(dirtyRequisition);
                            try {
                                if (r == null) {
                                    final Requisition current = m_foreignSourceRepository.getRequisition(dirtyRequisition);
                                    if (current != null) {
                                        m_foreignSourceRepository.delete(r);
                                    }
                                } else {
                                    m_foreignSourceRepository.save(r);
                                }
                            } catch (final ForeignSourceRepositoryException e) {
                                LOG.error("Failed to persist requisition {}", dirtyRequisition, e);
                            }
                        }
                        m_dirtyForeignSources.clear();
                    }
                    m_requisitions = null;

                } finally {
                    writeUnlock();
                }
            }
        };
    }

