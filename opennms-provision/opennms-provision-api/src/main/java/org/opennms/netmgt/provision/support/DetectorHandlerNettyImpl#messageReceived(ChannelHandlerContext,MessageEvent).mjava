    /** {@inheritDoc} */
    @Override
    public void messageReceived(ChannelHandlerContext ctx, MessageEvent message) {
        try {
            final AsyncClientConversation<Request, Response> conversation = getConversation();
            LogUtils.debugf(this, "Client Receiving: %s", message.getMessage().toString().trim());
            LogUtils.debugf(this, "Conversation: %s", conversation);

            if(conversation.hasExchanges() && conversation.validate((Response)message.getMessage())) {

                Object request = conversation.getRequest();

                if (request != null) {
                    LogUtils.debugf(this, "Writing request: %s", request);
                    ctx.getChannel().write(request);
                } else if (request == null && conversation.isComplete()) {
                    LogUtils.debugf(this, "Closing channel: %s", conversation);
                    //getFuture().setServiceDetected(true);
                    ctx.getChannel().close();
                } else {
                    //getFuture().setServiceDetected(false);
                    LogUtils.debugf(this, "Closing channel, detection failed: %s", conversation);
                    ctx.getChannel().close();
                    Channels.fireExceptionCaught(ctx, new ServiceDetectionFailedException());
                }
            } else {
                LogUtils.debugf(this, "Invalid response: %s", message.getMessage().toString().trim());
                //getFuture().setServiceDetected(false);
                ctx.getChannel().close();
                Channels.fireExceptionCaught(ctx, new ServiceDetectionFailedException());
            }
        } catch(Throwable e) {
            LogUtils.debugf(this, e, "Exception caught!");
            ctx.getChannel().close();
            Channels.fireExceptionCaught(ctx, e);
        }
    }

