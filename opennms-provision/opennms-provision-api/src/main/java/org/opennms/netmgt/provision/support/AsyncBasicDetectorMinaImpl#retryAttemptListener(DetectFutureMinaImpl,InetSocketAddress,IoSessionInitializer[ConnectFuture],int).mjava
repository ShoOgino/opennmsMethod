    /**
     * Handles the retry attempts. Listens to see when the ConnectFuture is finished and checks if there was 
     * an exception thrown. If so, it then attempts a retry if there are more retries.
     * 
     * @param connector
     * @param detectFuture
     * @param address
     * @param retryAttempt
     * @return IoFutureListener<ConnectFuture>
     */
    private final IoFutureListener<ConnectFuture> retryAttemptListener(final DetectFutureMinaImpl detectFuture, final InetSocketAddress address, final IoSessionInitializer<ConnectFuture> init, final int retryAttempt) {
        return new IoFutureListener<ConnectFuture>() {

            @Override
            public void operationComplete(ConnectFuture future) {
                final Throwable cause = future.getException();

                if (cause != null) {
                    if (cause instanceof IOException) {
                        if (retryAttempt == 0) {
                            LOG.info("Service {} detected false: {}: {}",getServiceName(), cause.getClass().getName(), cause.getMessage());
                            detectFuture.setServiceDetected(false);
                        } else {
                            LOG.info("Connection exception occurred: {} for service {}, retrying attempt {}", cause, getServiceName(), retryAttempt);
                            future = m_connectionFactory.reConnect(address, init, createDetectorHandler(detectFuture));
                            future.addListener(retryAttemptListener(detectFuture, address, init, retryAttempt - 1));
                        }
                    } else {
                        LOG.info("Threw a Throwable and detection is false for service {}", getServiceName(), cause);
                        detectFuture.setServiceDetected(false);
                    }
                }
            }
        };
    }

