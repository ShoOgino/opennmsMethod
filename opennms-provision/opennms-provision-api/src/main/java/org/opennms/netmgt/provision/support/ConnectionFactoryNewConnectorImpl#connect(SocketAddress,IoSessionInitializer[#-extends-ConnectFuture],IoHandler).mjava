    /**
     * <p>Connect to a remote socket. If org.opennms.netmgt.provision.maxConcurrentConnections
     * is set, this may block until a connection slot is available.</p>
     * 
     * <p>You must dispose both the {@link ConnectionFactoryNewConnectorImpl} and {@link ConnectFuture} when done
     * by calling {@link #dispose(ConnectionFactoryNewConnectorImpl, ConnectFuture)}.</p>
     * 
     * @param remoteAddress
     * 		Destination address
     * @param init
     * 		Initialiser for the IoSession
     * @return
     * 		ConnectFuture from a Mina connect call
     */
    @Override
    public ConnectFuture connect(SocketAddress remoteAddress, IoSessionInitializer<? extends ConnectFuture> init, IoHandler handler) {
        SocketConnector connector = getSocketConnector(getTimeout(), handler);
        InetSocketAddress localAddress = null;
        synchronized (m_portMutex) {
            if (m_port.get() == null) {
                // Fetch a new ephemeral port
                localAddress = new InetSocketAddress(0);
                m_port.set(localAddress.getPort());
            } else {
                localAddress = new InetSocketAddress(m_port.get());
            }
        }
        final ConnectFuture cf = connector.connect(remoteAddress, localAddress, init);
        cf.addListener(portSwitcher(connector, remoteAddress, init, handler));
        cf.addListener(connectorDisposer(connector));
        return cf;
    }

