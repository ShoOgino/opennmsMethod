    /** {@inheritDoc} */
    @Override
    public DetectFuture isServiceDetected(final InetAddress address, final DetectorMonitor monitor) throws Exception {
        m_connector = s_connectorFactory.getConnector();
        
        final DetectFuture future = new DefaultDetectFuture(this);
        
        // Set connect timeout.
        m_connector.setConnectTimeoutMillis( getTimeout() );
        m_connector.setHandler( createDetectorHandler(future) );
        
        if(isUseSSLFilter()) {
            final SslFilter filter = new SslFilter(createClientSSLContext());
            filter.setUseClientMode(true);
            m_connector.getFilterChain().addFirst("SSL", filter);
        }
        
        m_connector.getFilterChain().addLast( "logger", getLoggingFilter() != null ? getLoggingFilter() : new LoggingFilter() );
        m_connector.getFilterChain().addLast( "codec", getProtocolCodecFilter());
        m_connector.getSessionConfig().setIdleTime( IdleStatus.READER_IDLE, getIdleTime() );

        // Start communication
        final InetSocketAddress socketAddress = new InetSocketAddress(address, getPort());
        final ConnectFuture cf = m_connector.connect( socketAddress );
        cf.addListener(retryAttemptListener( m_connector, future, socketAddress, getRetries() ));
        
        return future;
    }

