    /**
     * <p>Get a new ConnectionFactory. If there is already a Factory with the
     * desired timeout, you will get that one; otherwise a new one is created.</p>
     * 
     * <p>If org.opennms.netmgt.provision.maxConcurrentConnectors is set, this may
     * block until a connector is available.</p>
     * 
     * @param timeoutInMillis
     * 		Connection timeout
     * @return
     * 		An appropriate Factory
     */
    public static final ConnectionFactory getFactory(int timeoutInMillis) {
        synchronized (s_connectorPool) {
            ConnectionFactory factory = s_connectorPool.get(timeoutInMillis);
            if (factory == null) {
                LogUtils.debugf(ConnectionFactoryConnectorPoolImpl.class, "Creating a ConnectionFactory for timeout %d, there are %d factories total", timeoutInMillis, s_connectorPool.size());
                ConnectionFactory newFactory = createConnectionFactory(timeoutInMillis);
                factory = s_connectorPool.putIfAbsent(timeoutInMillis, newFactory);
                // If there was no previous value for the factory in the map...
                if (factory == null) {
                    // ...then use the new value.
                    factory = newFactory;
                } else {
                    LogUtils.debugf(ConnectionFactoryConnectorPoolImpl.class, "ConnectionFactory for timeout %d was already created in another thread!", timeoutInMillis);
                    // Dispose of the new unused factory
                    dispose(newFactory);
                }
            }
            factory.m_references++;
            return factory;
        }
    }

