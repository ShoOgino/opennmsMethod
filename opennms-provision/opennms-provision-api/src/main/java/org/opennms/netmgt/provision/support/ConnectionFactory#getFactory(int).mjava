    /**
     * Get a new ConnectionFactory. If there is already a Factory with the
     * desired timeout, you will get that one; otherwise a new one is created.
     * <p>
     * If org.opennms.netmgt.provision.maxConcurrentConnectors is set, this may
     * block until a connector is available.
     * 
     * @param timeoutInMillis
     * 		Connection timeout
     * @return
     * 		An appropriate Factory
     */
    public static ConnectionFactory getFactory(int timeoutInMillis) {
        if (s_availableConnectors != null) {
            s_availableConnectors.acquireUninterruptibly();
        }
        ConnectionFactory factory = s_connectorPool.get(timeoutInMillis);
        if (factory == null) {
            LogUtils.debugf(ConnectionFactory.class, "Creating a ConnectionFactory for timeout %d, there are already %d factories", timeoutInMillis, s_connectorPool.size());
            ConnectionFactory newFactory = new ConnectionFactory(timeoutInMillis);
            factory = s_connectorPool.putIfAbsent(timeoutInMillis, newFactory);
            // If there was no previous value for the factory in the map...
            if (factory == null) {
                // ...then use the new value.
                factory = newFactory;
            } else {
                LogUtils.debugf(ConnectionFactory.class, "ConnectionFactory for timeout %d was already created in another thread!", timeoutInMillis);
            }
        }
        factory.m_references++;
        return factory;
    }

