    /** {@inheritDoc} */
    @Override
    public final void processPendingOperationForNode(final AdapterOperation op) throws ProvisioningAdapterException {
        if (log().isDebugEnabled()) {
            log().debug("processPendingOperationForNode: " + op.getType() + " for node: " + op.getNodeId() );
        }
        switch (op.getType()) {
        case ADD:
            m_template.execute(new TransactionCallback<Object>() {
                @Override
                public Object doInTransaction(TransactionStatus arg0) {
                    log().debug("processPendingOperationForNode: calling doAddNode() for node: " + op.getNodeId() );
                    doAddNode(op.getNodeId());
                    return null;
                }
            });
            break;
        case UPDATE:
            m_template.execute(new TransactionCallback<Object>() {
                @Override
                public Object doInTransaction(TransactionStatus arg0) {
                    log().debug("processPendingOperationForNode: calling doUpdateNode() for node: " + op.getNodeId() );
                    doUpdateNode(op.getNodeId());
                    return null;
                }
            });
            break;
        case DELETE:
            m_template.execute(new TransactionCallback<Object>() {
                @Override
                public Object doInTransaction(TransactionStatus arg0) {
                    log().debug("processPendingOperationForNode: calling doDeleteNode() for node: " + op.getNodeId() );
                    doDeleteNode(op.getNodeId());
                    return null;
                }
            });
            break;
        case CONFIG_CHANGE:
            m_template.execute(new TransactionCallback<Object>() {
                @Override
                public Object doInTransaction(TransactionStatus arg0) {
                    log().debug("processPendingOperationForNode: calling doNotifyConfigChange() for node: " + op.getNodeId() );
                    doNotifyConfigChange(op.getNodeId());
                    return null;
                }
            });
            break;
        default:
            log().warn("unknown operation: " + op.getType());
        }
    }

