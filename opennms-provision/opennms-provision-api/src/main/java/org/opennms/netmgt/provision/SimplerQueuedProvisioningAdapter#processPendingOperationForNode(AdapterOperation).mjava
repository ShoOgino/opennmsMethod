    /** {@inheritDoc} */
    @Override
    public final void processPendingOperationForNode(final AdapterOperation op) throws ProvisioningAdapterException {
        LOG.debug("processPendingOperationForNode: {} for node ID: {}", op.getType(), op.getNodeId());
        switch (op.getType()) {
        case ADD:
            m_template.execute(new TransactionCallback<Object>() {
                @Override
                public Object doInTransaction(TransactionStatus arg0) {
                    LOG.debug("processPendingOperationForNode: calling doAddNode() for node ID: {}", op.getNodeId());
                    doAddNode(op.getNodeId());
                    return null;
                }
            });
            break;
        case UPDATE:
            m_template.execute(new TransactionCallback<Object>() {
                @Override
                public Object doInTransaction(TransactionStatus arg0) {
                    LOG.debug("processPendingOperationForNode: calling doUpdateNode() for node ID: {}", op.getNodeId());
                    doUpdateNode(op.getNodeId());
                    return null;
                }
            });
            break;
        case DELETE:
            m_template.execute(new TransactionCallback<Object>() {
                @Override
                public Object doInTransaction(TransactionStatus arg0) {
                    LOG.debug("processPendingOperationForNode: calling doDeleteNode() for node ID: {}", op.getNodeId() );
                    doDeleteNode(op.getNodeId());
                    return null;
                }
            });
            break;
        case CONFIG_CHANGE:
            m_template.execute(new TransactionCallback<Object>() {
                @Override
                public Object doInTransaction(TransactionStatus arg0) {
                    LOG.debug("processPendingOperationForNode: calling doNotifyConfigChange() for node ID: {}", op.getNodeId() );
                    doNotifyConfigChange(op.getNodeId());
                    return null;
                }
            });
            break;
        default:
            LOG.warn("unknown operation: {}", op.getType());
        }
    }

