    /**
     * <p>Constructor for PluginWrapper.</p>
     *
     * @param clazz a {@link java.lang.Class} object.
     * @throws java.lang.ClassNotFoundException if any.
     */
    public PluginWrapper(Class<?> clazz) throws ClassNotFoundException {
        m_className = clazz.getName();
        BeanWrapper wrapper = new BeanWrapperImpl(Class.forName(m_className));

        for (PropertyDescriptor pd : wrapper.getPropertyDescriptors()) {
            if (pd.getName().equals("class")) {
                continue;
            }
            final Method m = pd.getReadMethod();
            if (m != null) {
                if (m.isAnnotationPresent(Require.class)) {
                    Set<String> values = new TreeSet<String>();
                    Require a = m.getAnnotation(Require.class);
                    for (String key: a.value()) {
                        values.add(key);
                    }
                    m_required.put(pd.getName(), values);
                } else {
                    m_optional.put(pd.getName(), new HashSet<String>());
                }
            }
        }
    }

