    /**
     * <p>Connect to a remote socket. If org.opennms.netmgt.provision.maxConcurrentConnections
     * is set, this may block until a connection slot is available.</p>
     * 
     * <p>You must dispose both the {@link ConnectionFactoryConnectorPoolImpl} and {@link ConnectFuture} when done
     * by calling {@link #dispose(ConnectionFactoryConnectorPoolImpl, ConnectFuture)}.</p>
     * 
     * @param remoteAddress
     * 		Destination address
     * @param init
     * 		Initialiser for the IoSession
     * @return
     * 		ConnectFuture from a Mina connect call
     */
    @Override
    public ConnectFuture connect(SocketAddress remoteAddress, IoSessionInitializer<? extends ConnectFuture> init, IoHandler handler) {
        for (int retries = 0; retries < 3; retries++) { 
            synchronized (m_connectorMutex) {
                if (m_connector == null) {
                    // Sanity check for null connector instance
                    LogUtils.debugf(this, "Found a null NioSocketConnector, creating a new one with timeout %d", getTimeout());
                    m_connector = getSocketConnector(getTimeout(), handler);
                }

                try {
                    /*
                     * Set the handler each time since we are reusing this connector for every incoming
                     * connect() call.
                     */
                    m_connector.setHandler(handler);

                    InetSocketAddress localAddress = null;
                    synchronized (m_portMutex) {
                        if (m_port == null) {
                            // Fetch a new ephemeral port
                            localAddress = new InetSocketAddress(InetAddressUtils.getLocalHostAddress(), 0);
                            m_port = localAddress.getPort();
                        } else {
                            localAddress = new InetSocketAddress(InetAddressUtils.getLocalHostAddress(), m_port);
                        }
                    }

                    /*
                     * Use the 3-argument call to connect(). If you use the 2-argument version without
                     * the localhost port, the call will end up doing a name lookup which seems to fail
                     * intermittently in unit tests.
                     *
                     * @see http://issues.opennms.org/browse/NMS-5309
                     */
                    ConnectFuture cf = m_connector.connect(remoteAddress, localAddress, init);
                    cf.addListener(portSwitcher(m_connector, remoteAddress, init, handler));
                    return cf;
                } catch (Throwable e) {
                    LogUtils.debugf(this, e, "Caught exception on factory %s, retrying: %s", this, e);
                    m_connector.dispose();
                    m_connector = getSocketConnector(getTimeout(), handler);
                    continue;
                }
            }
        }
        throw new IllegalStateException("Could not connect to socket because of excessive RejectedExecutionExceptions");
    }

