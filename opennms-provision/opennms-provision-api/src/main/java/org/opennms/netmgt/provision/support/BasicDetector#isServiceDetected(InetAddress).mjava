    /** {@inheritDoc} */
    @Override
    public final boolean isServiceDetected(final InetAddress address) {
    	final String ipAddr = InetAddressUtils.str(address);
    	final int port = getPort();
    	final int retries = getRetries();
        final int timeout = getTimeout();
        LogUtils.infof(this, "isServiceDetected: Checking address: %s for %s capability on port %s", ipAddr, getServiceName(), getPort());

        final Client<Request, Response> client = getClient();
        for (int attempts = 0; attempts <= retries; attempts++) {

            try {
                client.connect(address, port, timeout);
                LogUtils.infof(this, "isServiceDetected: Attempting to connect to address: %s, port: %d, attempt: #%s", ipAddr, port, attempts);
                
                if (attemptConversation(client)) {
                    return true;
                }
                
            } catch (ConnectException e) {
                // Connection refused!! Continue to retry.
                LogUtils.infof(this, e, "isServiceDetected: %s: Unable to connect to address: %s port %d, attempt #%s",getServiceName(), ipAddr, port, attempts);
            } catch (NoRouteToHostException e) {
                // No Route to host!!!
                LogUtils.infof(this, e, "isServiceDetected: %s: No route to address %s was available", getServiceName(), ipAddr);
            } catch (InterruptedIOException e) {
                // Expected exception
                LogUtils.infof(this, e, "isServiceDetected: %s: Did not connect to to address %s port %d within timeout: %d attempt: %d", getServiceName(), ipAddr, port, timeout, attempts);
            } catch (IOException e) {
                LogUtils.errorf(this, e, "isServiceDetected: %s: An unexpected I/O exception occured contacting address %s port %d",getServiceName(), ipAddr, port);
            } catch (Throwable t) {
                LogUtils.errorf(this, t, "isServiceDetected: %s: Unexpected error trying to detect %s on address %s port %d", getServiceName(), getServiceName(), ipAddr, port);
            } finally {
                client.close();
            }
        }
        return false;
    }

