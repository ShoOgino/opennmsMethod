    /**
     * <P>
     * Reads the resource record from the input stream.
     * </P>
     *
     * @return The DNSAddressRR that is in response to the address request.
     * @exception java.io.IOException
     *                Thrown if data does not decode to a DNSAddressRRl.
     * @throws java.io.IOException if any.
     */
    public DNSAddressRR readRR() throws IOException {
        final String rrName = readDomainName();
        final int rrType = readShort();
        final int rrClass = readShort();
        final long rrTTL = readInt();
        final int rrDataLen = readShort();

        //
        // Convert the length of data in this byte array input stream
        // into a "substream" of data. The only way this could get
        // complicated is if there are multiple threads using this
        // stream. If that is the case then synchronization code
        // should be used to wrap the next two lines -- Weave
        //
        final DNSInputStream rrDNSIn = new DNSInputStream(buf, pos, rrDataLen);
        pos += rrDataLen;
        try {
            return new DNSAddressRR(rrName, rrType, rrClass, rrTTL, rrDNSIn);
        } catch (Throwable ex) {
            throw new IOException("Unknown DNSAddressRR (type " + " (" + rrType + "))" + "\nOriginating Exception: " + ex.getMessage());
        } finally {
            if (rrDNSIn != null) {
                rrDNSIn.close();
            }
        }
    }

