    /**
     * {@inheritDoc}
     *
     * Returns true if the protocol defined by this plugin is supported. If
     * the protocol is not supported then a false value is returned to the
     * caller. The qualifier map passed to the method is used by the plugin to
     * return additional information by key-name. These key-value pairs can be
     * added to service events if needed.
     */
    @Override
    public boolean isServiceDetected(InetAddress address, DetectorMonitor detectMonitor) {
        try {
            SnmpAgentConfig agentConfig = getAgentConfigFactory().getAgentConfig(address);
            configureAgentPTR(agentConfig);
            configureAgentVersion(agentConfig);

            // Get the OpenManage chassis status
            String chassisStatus = getValue(agentConfig, CHASSIS_STATUS_OID);

            // If no chassis status received, do not detect the protocol and quit
            if (chassisStatus == null) {
                log().warn("isServiceDetected: Cannot receive chassis status");
                return false;
            } else {
                log().debug("isServiceDetected: OpenManageChassis: " + chassisStatus);
            }

            // Validate chassis status, check status is somewhere between OTHER and NON_RECOVERABLE
            if  (Integer.parseInt(chassisStatus.toString()) >= DELL_STATUS.OTHER.value() && 
                    Integer.parseInt(chassisStatus.toString()) <= DELL_STATUS.NON_RECOVERABLE.value()) {
                // OpenManage chassis status detected
                if (log().isDebugEnabled()) {
                    log().debug("isServiceDetected: OpenManageChassis: is valid, protocol supported.");
                }
                return true;
            }
        } catch (Throwable t) {
            throw new UndeclaredThrowableException(t);
        }
        return false;
    }

