    /** {@inheritDoc} */
    @Override
    public boolean isServiceDetected(InetAddress address, DetectorMonitor detectMonitor) {
        try {

            SnmpAgentConfig agentConfig = getAgentConfigFactory().getAgentConfig(address);
            String expectedValue = null;
            
            configureAgentPTR(agentConfig);
            
            configureAgentVersion(agentConfig);
            
            if (getVbvalue() != null) {
                expectedValue = getVbvalue();
            } else {
                log().error(getServiceName() + ": Expected value for SNMP table " + getOid() + " is null. Vbvalue is required.");
                return false;
            }
            
            if (this.m_isTable) {
                log().debug(getServiceName() + ": Table detect enabled");

                Map<SnmpInstId, SnmpValue> table = getTable(agentConfig, getOid());
                if (table != null) {
                    for (Map.Entry<SnmpInstId, SnmpValue> e : table.entrySet()) {
                        log().debug(getServiceName() + ": retrieved value [" + e.getValue().toString() + "] expected value [" + expectedValue + "]");
                        if (e.getValue().toString().equals(expectedValue)) {
                            log().debug(getServiceName() + ": expected value matched");
                            return true;
                        }
                    }
                } else {
                    log().error(getServiceName() + ": SNMP table " + getOid() + " is null.");
                    return false;
                }
            } else {
                log().debug(getServiceName() + ": Table detect disabled");
                String retrievedValue = getValue(agentConfig, getOid());
                log().debug(getServiceName() + ": retrieved value [" + retrievedValue + "] expected value [" + expectedValue + "]");
                if (retrievedValue != null && expectedValue != null) {
                    return (Pattern.compile(expectedValue).matcher(retrievedValue).matches());
                } else {
                    return (retrievedValue != null);
                }
            }
        } catch (Throwable t) {
            throw new UndeclaredThrowableException(t);
        }
        return false;
    }

