    /**
     * {@inheritDoc}
     *
     * Returns true if the protocol defined by this plugin is supported. If
     * the protocol is not supported then a false value is returned to the
     * caller. The qualifier map passed to the method is used by the plugin to
     * return additional information by key-name. These key-value pairs can be
     * added to service events if needed.
     */
    @Override
    public boolean isServiceDetected(InetAddress address, DetectorMonitor detectMonitor) {
        try {
            SnmpAgentConfig agentConfig = getAgentConfigFactory().getAgentConfig(address);
            configureAgentPTR(agentConfig);
            configureAgentVersion(agentConfig);

            Map<SnmpInstId, SnmpValue> tagResults = SnmpUtils.getOidValues(agentConfig, "CiscoIpSlaDetector", SnmpObjId.get(RTT_ADMIN_TAG_OID));
            if (tagResults == null) {
                log().warn("isServiceDetected: No admin tags received!");
                return false;
            }

            Map<SnmpInstId, SnmpValue> operStateResults = SnmpUtils.getOidValues(agentConfig, "CiscoIpSlaDetector", SnmpObjId.get(RTT_OPER_STATE_OID));
            if (operStateResults == null) {
                log().warn("isServiceDetected: No operational states received!");
                return false;
            }

            // Iterate over the list of configured IP SLAs
            for (Entry<SnmpInstId,SnmpValue> ipslaEntry : tagResults.entrySet()) {
                SnmpValue status = operStateResults.get(ipslaEntry.getKey());
                log().debug("isServiceDetected: " + "admin-tag=" + m_adminTag + " value=" + formatValue(ipslaEntry.getValue()) + " oper-state=" + status.toInt());
                //  Check if a configured IP SLA with specific tag exist and is the operational state active 
                if (m_adminTag.equals(formatValue(ipslaEntry.getValue())) && status.toInt() == RTT_MON_OPER_STATE_ACTIVE) {
                    log().debug("isServiceDetected: admin tag found");
                    return true;
                }
            }
        } catch (Throwable t) {
            throw new UndeclaredThrowableException(t);
        }
        return false;
    }

