    /**
     * {@inheritDoc}
     *
     * Returns true if the protocol defined by this plugin is supported. If
     * the protocol is not supported then a false value is returned to the
     * caller. The qualifier map passed to the method is used by the plugin to
     * return additional information by key-name. These key-value pairs can be
     * added to service events if needed.
     */
    @Override
    public boolean isServiceDetected(InetAddress address, DetectorMonitor detectMonitor) {
        boolean detected = false;
        
        SnmpAgentConfig agentConfig = getAgentConfigFactory().getAgentConfig(address);
        
        configureAgentPTR(agentConfig);

        configureAgentVersion(agentConfig);
        
        try {
            /*
             * Get two maps one with all configured administration tags and one with 
             * operational status
             */
            Map<SnmpInstId, SnmpValue> tagResults = getTable(agentConfig, RTT_ADMIN_TAG_OID);
            if (tagResults == null || tagResults.isEmpty()) {
                log().warn(getServiceName() + ": No admin tags received! ");
                return detected;
            }

            Map<SnmpInstId, SnmpValue> operStateResults = getTable(agentConfig,RTT_OPER_STATE_OID);
            if (operStateResults == null || operStateResults.isEmpty()) {
                log().warn(getServiceName() + ": No oper status received! ");
                return detected;
            }
            
            // Iterate over the list of configured IP SLAs
            for (SnmpInstId ipslaInstance : tagResults.keySet()) {
                log().debug(getServiceName() + " detect: [" + tagResults.get(ipslaInstance).toString() + "] compared with [" + getVbvalue() + "]");
                /*
                 * Check if a configured IP SLA with specific tag exist and the
                 * the operational state ACTIVE(6), detected with first match.
                 */
                if (tagResults.get(ipslaInstance).toString().equals(getVbvalue())
                        && operStateResults.get(ipslaInstance).toInt() == RTT_MON_OPER_STATE.ACTIVE.value()) {
                    log().debug(getServiceName()
                                        + ": admin tag [" + getVbvalue() + "] found and status is "
                                        + operStateResults.get(ipslaInstance).toInt());
                    detected = true;
                    break; // detected leave for()
                } else {
                    log().debug(getServiceName()
                                + ": admin tag [" + getVbvalue() + "] found and status is "
                                + operStateResults.get(ipslaInstance).toInt());
                    detected = false; // not detected, check next or return with not detected
                }
            }
        } catch (NullPointerException e) {
            log().warn("SNMP not available or CISCO-RTT-MON-MIB not supported!");
        } catch (NumberFormatException e) {
            log().warn("Number operator used on a non-number "
                               + e.getMessage());
        } catch (IllegalArgumentException e) {
            log().warn("Invalid Snmp Criteria: " + e.getMessage());
        } catch (Throwable t) {
            log().warn("Unexpected exception during SNMP poll of interface "
                               + address.getHostAddress(), t);
        }
        return detected; // return detected
    }

