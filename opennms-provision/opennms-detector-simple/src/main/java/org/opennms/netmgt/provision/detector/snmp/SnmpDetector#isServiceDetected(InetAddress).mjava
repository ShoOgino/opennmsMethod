    /** {@inheritDoc} */
    @Override
    public boolean isServiceDetected(InetAddress address) {
        try {
            SnmpAgentConfig agentConfig = getAgentConfigFactory().getAgentConfig(address);
            configureAgentPTR(agentConfig);
            configureAgentVersion(agentConfig);

            final String expectedValue = getVbvalue();
            if (this.m_isTable) {
                LOG.debug(getServiceName() + ": table detect enabled");
                final SnmpObjId snmpObjId = SnmpObjId.get(getOid());
                final Map<SnmpInstId, SnmpValue> table = SnmpUtils.getOidValues(agentConfig, DEFAULT_SERVICE_NAME, snmpObjId);
                final List<String> retrievedValues = table.values().stream().map(snmpValue -> m_hex ? snmpValue.toHexString() : snmpValue.toString()).collect(Collectors.toList());
                return isServiceDetected(this.matchType, retrievedValues, expectedValue);
            } else {
                final String retrievedValue = getValue(agentConfig, getOid(), m_hex);
                // we have to ensure that if expectedValue is defined, we use ANY, this is due to backwards compatibility
                MatchType matchType = this.matchType;
                if (matchType == null && expectedValue != null) {
                    matchType = MatchType.Any;
                }
                return isServiceDetected(matchType, Lists.newArrayList(retrievedValue), expectedValue);
            }
        } catch (Throwable t) {
            throw new UndeclaredThrowableException(t);
        }
    }

