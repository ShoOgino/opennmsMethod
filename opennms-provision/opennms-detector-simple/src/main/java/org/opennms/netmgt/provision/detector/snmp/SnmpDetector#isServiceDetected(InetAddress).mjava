    /** {@inheritDoc} */
    @Override
    public boolean isServiceDetected(InetAddress address) {
        try {

            SnmpAgentConfig agentConfig = getAgentConfigFactory().getAgentConfig(address);
            String expectedValue = null;
            
            configureAgentPTR(agentConfig);
            
            configureAgentVersion(agentConfig);
            
            if (getVbvalue() != null) {
                expectedValue = getVbvalue();
            }

            if (this.m_isTable) {
                LOG.debug(getServiceName() + ": Table detect enabled");
                SnmpObjId snmpObjId = SnmpObjId.get(getOid());

                Map<SnmpInstId, SnmpValue> table = SnmpUtils.getOidValues(agentConfig, DEFAULT_SERVICE_NAME, snmpObjId);
                for (Map.Entry<SnmpInstId, SnmpValue> e : table.entrySet()) {
                    String retrievedValue;
                    if (m_hex) {
                        retrievedValue = e.getValue().toHexString();
                    } else {
                        retrievedValue = e.getValue().toString();
                    }
                    LOG.debug(getServiceName() + ": retrieved value [" + retrievedValue + "]");

                    if (retrievedValue != null && expectedValue != null &&
                            Pattern.compile(expectedValue).matcher(retrievedValue).matches()) {
                        LOG.debug(getServiceName() + ": expected value matched");
                        return true;
                    } else if (retrievedValue != null) {
                        return true;
                    }
                }
                return false;
            } else {
                String retrievedValue = getValue(agentConfig, getOid());

                if (retrievedValue != null && expectedValue != null) {
                    return (Pattern.compile(expectedValue).matcher(retrievedValue).matches());
                } else {
                    return (retrievedValue != null);
                }
            }
        } catch (Throwable t) {
            throw new UndeclaredThrowableException(t);
        }
    }

