    @Test
    @JUnitTemporaryDatabase // Relies on records created in @Before so we need a fresh database
    public void testDontDeleteRequisitionedService() throws Exception {
    	
    	assertFalse(m_provisionService.isRequisitionedEntityDeletionEnabled());
    	
        // This test assumes that discovery is disabled
        assertFalse(m_provisionService.isDiscoveryEnabled());
        
        importFromResource("classpath:/deleteService.xml");
        
        //Verify distpoller count
        assertEquals(1, getDistPollerDao().countAll());
        
        //Verify node count
        assertEquals(1, getNodeDao().countAll());
        
        //Verify ipinterface count
        assertEquals(4, getInterfaceDao().countAll());
        
        //Verify ifservices count
        assertEquals(6, getMonitoredServiceDao().countAll());
        
        //Verify service count
        assertEquals(2, getServiceTypeDao().countAll());

        // Locate the service to be deleted
        final OnmsNode node = m_nodeDao.findByForeignId("deleteService", "4243");
        assertNotNull(node);
        final int nodeid = node.getId();

        
        m_eventAnticipator.reset();

        m_mockEventIpcManager.sendEventToListeners(deleteService(nodeid, "10.201.136.163", "HTTP"));
        
        // there is no event to wait for so make sure we don't get anything..
        m_eventAnticipator.waitForAnticipated(5000);
        m_eventAnticipator.verifyAnticipated();
        
        // Make sure the service is still there
        assertEquals(6, getMonitoredServiceDao().countAll());

    }

