    @Test
    @JUnitSnmpAgents({
        @JUnitSnmpAgent(host="172.20.2.201", resource="classpath:snmpTestData3.properties"),
        @JUnitSnmpAgent(host="172.20.2.204", resource="classpath:snmpTestData3.properties")
    })
    public void testDowntimeModelDeleteServiceEventDiscoveryEnabledDeletionDisabledDiscoveredNode() throws Exception {
        System.setProperty("org.opennms.provisiond.enableDiscovery", "true");
        assertTrue(m_provisionService.isDiscoveryEnabled());

        System.setProperty("org.opennms.provisiond.enableDeletionOfRequisitionedEntities", "false");
        assertFalse(m_provisionService.isRequisitionedEntityDeletionEnabled());

        final NewSuspectScan scan = m_provisioner.createNewSuspectScan(addr("172.20.2.201"), null);
        runScan(scan);
        assertEquals(2, m_ipInterfaceDao.findAll().size());
        LOG.debug("ifaces = {}", m_ipInterfaceDao.findAll());
        final List<OnmsIpInterface> ifaces = m_ipInterfaceDao.findByIpAddress("172.20.2.201");
        assertEquals(1, ifaces.size());
        final OnmsNode node = ifaces.iterator().next().getNode();
        assertEquals(2, node.getIpInterfaces().size());
        assertEquals(2, getMonitoredServiceDao().findAll().size()); // SNMP on each of the 2 interfaces
        m_eventAnticipator.reset();

        // the service and interface should be deleted
        // since there is another interface, the node remains
        m_eventAnticipator.anticipateEvent(serviceDeleted(node.getId(), "172.20.2.201", "SNMP"));
        m_eventAnticipator.anticipateEvent(interfaceDeleted(node.getId(), "172.20.2.201"));
        getScheduledExecutor().resume();
        m_mockEventIpcManager.sendEventToListeners(deleteService(node.getId(), "172.20.2.201", "SNMP"));
        m_eventAnticipator.waitForAnticipated(10000);
        m_eventAnticipator.verifyAnticipated();
    }

