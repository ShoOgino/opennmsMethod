    @Test
    public void canTriggerNewSuspectScanWhenMonitoringSystemIsNotFound() throws InterruptedException {
        // Build a provisioner that overrides the 'createNewSuspectScan' call and saves the arguments from the last call
        final AtomicReference<InetAddress> ipAddressRef = new AtomicReference<>();
        final AtomicReference<String> foreignSourceRef = new AtomicReference<>();
        final AtomicReference<String> locationRef = new AtomicReference<>();
        final Provisioner provisioner = new Provisioner() {
            @Override
            public NewSuspectScan createNewSuspectScan(InetAddress ipAddress, String foreignSource, String location) {
                ipAddressRef.set(ipAddress);
                foreignSourceRef.set(foreignSource);
                locationRef.set(location);
                return mock(NewSuspectScan.class, RETURNS_DEEP_STUBS);
            }
        };

        // Mock the necessary facilities
        ProvisionService provisionService = mock(ProvisionService.class);
        when(provisionService.isDiscoveryEnabled()).thenReturn(true);
        provisioner.setProvisionService(provisionService);

        MonitoringSystemDao monitoringSystemDao = mock(MonitoringSystemDao.class);
        provisioner.setMonitoringSystemDao(monitoringSystemDao);

        // Create the newSuspect event
        Event newSuspectEvent = new EventBuilder(EventConstants.NEW_SUSPECT_INTERFACE_EVENT_UEI, "test")
                .setInterface(InetAddressUtils.ONE_TWENTY_SEVEN)
                // Reference a dist poller (or monitoring system) which does not exist
                // The MonitoringSystemDao we provide is a mock anyways, so it'll always return null
                .setDistPoller("non-existent")
                .getEvent();

        // Trigger the newSuspect
        provisioner.handleNewSuspectEvent(ImmutableMapper.fromMutableEvent(newSuspectEvent));
        // Wait for the runnable to complete
        final CountDownLatch latch = new CountDownLatch(1);
        provisioner.getNewSuspectExecutor().execute(latch::countDown);
        latch.await(1, TimeUnit.MINUTES);

        // Make sure we tried to lookup the monitoring system from the given id
        verify(monitoringSystemDao, times(1)).get("non-existent");

        // Validate the arguments passed to createNewSuspectScan call
        assertThat(ipAddressRef.get(), equalTo(InetAddressUtils.ONE_TWENTY_SEVEN));
        assertThat(foreignSourceRef.get(), equalTo(null));
        assertThat(locationRef.get(), equalTo(MonitoringLocationDao.DEFAULT_MONITORING_LOCATION_ID));
    }

