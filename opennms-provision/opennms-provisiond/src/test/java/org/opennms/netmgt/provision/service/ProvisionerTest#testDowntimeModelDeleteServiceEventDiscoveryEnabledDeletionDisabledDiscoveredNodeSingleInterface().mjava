    @Test
    @JUnitSnmpAgents({
        @JUnitSnmpAgent(host="198.51.100.201", resource="classpath:snmpwalk-system.properties")
    })
    public void testDowntimeModelDeleteServiceEventDiscoveryEnabledDeletionDisabledDiscoveredNodeSingleInterface() throws Exception {
        System.setProperty("org.opennms.provisiond.enableDiscovery", "true");
        assertTrue(m_provisionService.isDiscoveryEnabled());

        System.setProperty("org.opennms.provisiond.enableDeletionOfRequisitionedEntities", "false");
        assertFalse(m_provisionService.isRequisitionedEntityDeletionEnabled());

        final NewSuspectScan scan = m_provisioner.createNewSuspectScan(addr("198.51.100.201"), null);
        runScan(scan);

        assertEquals(1, m_ipInterfaceDao.findAll().size());
        LOG.debug("ifaces = {}", m_ipInterfaceDao.findAll());
        final List<OnmsIpInterface> ifaces = m_ipInterfaceDao.findByIpAddress("198.51.100.201");
        assertEquals(1, ifaces.size());
        final OnmsNode node = ifaces.iterator().next().getNode();
        assertEquals(1, node.getIpInterfaces().size());
        m_eventAnticipator.reset();

        // everything up to the node should be deleted, since there is only a single interface with a single service
        // since there is another interface, the node remains
        m_eventAnticipator.anticipateEvent(serviceDeleted(node.getId(), "198.51.100.201", "SNMP"));
        m_eventAnticipator.anticipateEvent(interfaceDeleted(node.getId(), "198.51.100.201"));
        m_eventAnticipator.anticipateEvent(nodeDeleted(node.getId()));
        getScheduledExecutor().resume();
        m_mockEventIpcManager.sendEventToListeners(deleteService(node.getId(), "198.51.100.201", "SNMP"));
        m_eventAnticipator.waitForAnticipated(10000);
        m_eventAnticipator.verifyAnticipated();
    }

