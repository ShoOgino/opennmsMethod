    @Test
    @JUnitSnmpAgents({
            @JUnitSnmpAgent(host="192.168.3.1", port=161, resource="classpath:/snmpwalk-space.properties"),
            @JUnitSnmpAgent(host="10.0.0.4", port=161, resource="classpath:/snmpwalk-space.properties")
    })
    public void testNMS13118_NMS13109() throws Exception {
        final String[] ueis = { EventConstants.PROVISION_SCAN_COMPLETE_UEI, EventConstants.PROVISION_SCAN_ABORTED_UEI, EventConstants.IMPORT_SUCCESSFUL_UEI };
        final CountDownLatch eventReceived = anticipateEvents(1, ueis);

        // import the requisition
        m_provisioner.importModelFromResource(m_resourceLoader.getResource("classpath:/NMS-13118-1.xml"), Boolean.TRUE.toString());
        waitForEverything();
        eventReceived.await(5, TimeUnit.MINUTES);

        List<OnmsNode> nodes = m_nodeDao.findAll();

        // check that only one node exists
        assertEquals(1, nodes.size());

        // get the node
        OnmsNode node = nodes.get(0);

        // check that the metadata still exists
        assertThat(node.getMetaData().size(), is(2));
        assertThat(node.getMetaData(), containsInAnyOrder(
                new OnmsMetaData("nodeCustomContext1", "nodeKey1", "nodeValue1"),
                new OnmsMetaData("nodeCustomContext2", "nodeKey2", "nodeValue2")
        ));
        assertThat(node.getIpInterfaceByIpAddress("10.0.0.4").getMetaData().size(), is(0));
        assertThat(node.getIpInterfaceByIpAddress("192.168.3.1").getMetaData().size(), is(1));
        assertThat(node.getIpInterfaceByIpAddress("192.168.3.1").getMetaData(), containsInAnyOrder(
                new OnmsMetaData("interfaceCustomContext3","interfaceKey3","interfaceValue3")
        ));

        // now add custom meta-data, see NMS-13109
        node.addMetaData("nodeCustomContext3", "nodeKey3", "nodeValue3");
        node.addMetaData("nodeCustomContext1", "nodeKey1", "modifiedNodeValue1"); // this should be overwritten on next sync
        node.getIpInterfaceByIpAddress("192.168.3.1").getMetaData().add(new OnmsMetaData("interfaceCustomContext4", "interfaceKey4", "interfaceValue4"));
        node.getIpInterfaceByIpAddress("10.0.0.4").getMonitoredServiceByServiceType("ICMP").getMetaData().add(new OnmsMetaData("serviceCustomContext2", "serviceKey2", "serviceValue2"));
        m_nodeDao.update(node);

        // run a node scan, so policies are applied for node and interfaces
        final NodeScan scan = m_provisioner.createNodeScan(node.getId(), "nms13118", "1", new OnmsMonitoringLocation());
        final Task t = scan.createTask();
        t.schedule();
        t.waitFor();

        // import again without scanning the node
        m_provisioner.importModelFromResource(m_resourceLoader.getResource("classpath:/NMS-13118-2.xml"), Boolean.TRUE.toString());
        waitForEverything();
        eventReceived.await(5, TimeUnit.MINUTES);

        // check that still only one node exists
        nodes = m_nodeDao.findAll();
        assertEquals(1, nodes.size());

        // get the node
        node = nodes.get(0);

        // check that the metadata still exists
        assertThat(node.getMetaData().size(), is(4));
        assertThat(node.getMetaData(), containsInAnyOrder(
                new OnmsMetaData("nms13118-nodeCustomContext1", "nodeKey1", "nodeValue1"),
                new OnmsMetaData("nodeCustomContext1", "nodeKey1", "nodeValue1"),
                new OnmsMetaData("nodeCustomContext2", "nodeKey2", "nodeValue2"),
                new OnmsMetaData("nodeCustomContext3", "nodeKey3", "nodeValue3")
        ));
        assertThat(node.getIpInterfaceByIpAddress("10.0.0.4").getMetaData().size(), is(1));
        assertThat(node.getIpInterfaceByIpAddress("10.0.0.4").getMetaData(), containsInAnyOrder(
                new OnmsMetaData("nms13118-interfaceCustomContext3","interfaceKey3","interfaceValue3")
        ));
        assertThat(node.getIpInterfaceByIpAddress("192.168.3.1").getMetaData().size(), is(3));
        assertThat(node.getIpInterfaceByIpAddress("192.168.3.1").getMetaData(), containsInAnyOrder(
                new OnmsMetaData("nms13118-interfaceCustomContext2","interfaceKey2","interfaceValue2"),
                new OnmsMetaData("interfaceCustomContext3","interfaceKey3","interfaceValue3"),
                new OnmsMetaData("interfaceCustomContext4", "interfaceKey4", "interfaceValue4")
        ));
        assertThat(node.getIpInterfaceByIpAddress("192.168.3.1").getMonitoredServiceByServiceType("ICMP").getMetaData().size(), is(1));
        assertThat(node.getIpInterfaceByIpAddress("192.168.3.1").getMonitoredServiceByServiceType("ICMP").getMetaData(),
                containsInAnyOrder(new OnmsMetaData("serviceCustomContext1", "serviceKey1", "serviceValue1")));
        assertThat(node.getIpInterfaceByIpAddress("10.0.0.4").getMonitoredServiceByServiceType("ICMP").getMetaData().size(), is(1));
        assertThat(node.getIpInterfaceByIpAddress("10.0.0.4").getMonitoredServiceByServiceType("ICMP").getMetaData(),
                containsInAnyOrder(new OnmsMetaData("serviceCustomContext2", "serviceKey2", "serviceValue2")));
    }

