    @Test
    public void testDeleteNode() throws Exception {

        // This test assumes that discovery is disabled
        assertFalse(m_provisionService.isDiscoveryEnabled());

        importFromResource("classpath:/deleteService.xml", Boolean.TRUE.toString());

        //Verify distpoller count
        assertEquals(1, getDistPollerDao().countAll());

        //Verify node count
        assertEquals(1, getNodeDao().countAll());

        //Verify ipinterface count
        assertEquals(4, getInterfaceDao().countAll());

        //Verify ifservices count
        assertEquals(6, getMonitoredServiceDao().countAll());

        //Verify service count
        assertEquals(2, getServiceTypeDao().countAll());

        // Locate the service to be deleted
        final OnmsNode node = m_nodeDao.findByForeignId("deleteService", "4243");
        assertNotNull(node);
        final int nodeid = node.getId();
        m_eventAnticipator.reset();

        m_eventAnticipator.anticipateEvent(serviceDeleted(nodeid, "10.136.160.1", "ICMP"));
        m_eventAnticipator.anticipateEvent(serviceDeleted(nodeid, "10.136.160.1", "HTTP"));
        m_eventAnticipator.anticipateEvent(interfaceDeleted(nodeid, "10.136.160.1"));

        m_eventAnticipator.anticipateEvent(serviceDeleted(nodeid, "10.201.136.163", "ICMP"));
        m_eventAnticipator.anticipateEvent(serviceDeleted(nodeid, "10.201.136.163", "HTTP"));
        m_eventAnticipator.anticipateEvent(interfaceDeleted(nodeid, "10.201.136.163"));

        m_eventAnticipator.anticipateEvent(serviceDeleted(nodeid, "10.201.136.161", "ICMP"));
        m_eventAnticipator.anticipateEvent(interfaceDeleted(nodeid, "10.201.136.161"));

        m_eventAnticipator.anticipateEvent(serviceDeleted(nodeid, "10.201.136.167", "ICMP"));
        m_eventAnticipator.anticipateEvent(interfaceDeleted(nodeid, "10.201.136.167"));

        m_eventAnticipator.anticipateEvent(nodeDeleted(nodeid));

        m_mockEventIpcManager.sendEventToListeners(deleteNode(nodeid));

        // this only waits until all the anticipated events are received so it is fast unless there is a bug
        m_eventAnticipator.waitForAnticipated(10000);
        m_eventAnticipator.verifyAnticipated();

        // check for correct event parameters, see NMS-10554
        final Event nodeDeletedEvent = m_eventAnticipator.getAnticipatedEventsReceived().stream()
                .filter(e -> EventConstants.NODE_DELETED_EVENT_UEI.equals(e.getUei()))
                .findFirst()
                .orElse(null);

        assertNotNull(nodeDeletedEvent);

        assertEquals("4243", nodeDeletedEvent.getParm(EventConstants.PARM_FOREIGN_ID).getValue().getContent());
        assertEquals("deleteService", nodeDeletedEvent.getParm(EventConstants.PARM_FOREIGN_SOURCE).getValue().getContent());
        assertEquals("10.136.160.1", nodeDeletedEvent.getParm(EventConstants.PARM_INTERFACE).getValue().getContent());
        assertEquals("apknd", nodeDeletedEvent.getParm(EventConstants.PARM_NODE_LABEL).getValue().getContent());
        assertEquals("Default", nodeDeletedEvent.getParm(EventConstants.PARM_LOCATION).getValue().getContent());
    }

