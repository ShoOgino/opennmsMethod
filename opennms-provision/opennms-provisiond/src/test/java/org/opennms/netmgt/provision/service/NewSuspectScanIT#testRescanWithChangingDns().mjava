    @Test(timeout=300000)
    public void testRescanWithChangingDns() throws Exception {
        try {
            final int nextNodeId = m_nodeDao.getNextNodeId();

            //Verify empty database
            assertEquals(1, getDistPollerDao().countAll());
            assertEquals(0, getNodeDao().countAll());
            assertEquals(0, getInterfaceDao().countAll());
            assertEquals(0, getMonitoredServiceDao().countAll());
            assertEquals(0, getServiceTypeDao().countAll());
            assertEquals(0, getSnmpInterfaceDao().countAll());

            m_provisionService.setHostnameResolver(new HostnameResolver() {
                @Override public String getHostname(final InetAddress addr) {
                    return "oldNodeLabel";
                }
            });

            final EventAnticipator anticipator = m_eventSubscriber.getEventAnticipator();
            anticipator.anticipateEvent(new EventBuilder(EventConstants.NODE_ADDED_EVENT_UEI, "Provisiond").setNodeid(nextNodeId).getEvent());
            anticipator.anticipateEvent(new EventBuilder(EventConstants.NODE_GAINED_INTERFACE_EVENT_UEI, "Provisiond").setNodeid(nextNodeId).setInterface(addr("198.51.100.201")).getEvent());
            anticipator.anticipateEvent(new EventBuilder(EventConstants.PROVISION_SCAN_COMPLETE_UEI, "Provisiond").setNodeid(nextNodeId).getEvent());

            final NewSuspectScan scan = m_provisioner.createNewSuspectScan(addr("198.51.100.201"), null, null);
            runScan(scan);

            anticipator.verifyAnticipated(20000, 0, 0, 0, 0);

            //Verify distpoller count
            assertEquals(1, getDistPollerDao().countAll());

            //Verify node count
            assertEquals(1, getNodeDao().countAll());

            //Verify node info
            assertEquals(Integer.valueOf(nextNodeId), getNodeDao().findAll().iterator().next().getId());
            assertEquals("oldNodeLabel", getNodeDao().findAll().iterator().next().getLabel());
            assertEquals(NodeLabelSource.HOSTNAME, getNodeDao().findAll().iterator().next().getLabelSource());
            assertEquals(MonitoringLocationDao.DEFAULT_MONITORING_LOCATION_ID, getNodeDao().findAll().iterator().next().getLocation().getLocationName());

            //Verify ipinterface count
            assertEquals("Unexpected number of interfaces found: " + getInterfaceDao().findAll(), 1, getInterfaceDao().countAll());
            
            //Verify ifservices count - discover snmp service on other if
            assertEquals("Unexpected number of services found: "+getMonitoredServiceDao().findAll(), 0, getMonitoredServiceDao().countAll());

            //Verify service count
            assertEquals(0, getServiceTypeDao().countAll());

            //Verify snmpInterface count
            assertEquals(0, getSnmpInterfaceDao().countAll());

            m_provisionService.setHostnameResolver(new HostnameResolver() {
                @Override public String getHostname(final InetAddress addr) {
                    return "newNodeLabel";
                }
            });

            final ForceRescanScan rescan = m_provisioner.createForceRescanScan(nextNodeId);
            runScan(rescan);

            assertEquals(Integer.valueOf(nextNodeId), getNodeDao().findAll().iterator().next().getId());
            assertEquals("newNodeLabel", getNodeDao().findAll().iterator().next().getLabel());
            assertEquals(NodeLabelSource.HOSTNAME, getNodeDao().findAll().iterator().next().getLabelSource());
        } finally {
            m_provisionService.setHostnameResolver(new DefaultHostnameResolver());
        }
    }

