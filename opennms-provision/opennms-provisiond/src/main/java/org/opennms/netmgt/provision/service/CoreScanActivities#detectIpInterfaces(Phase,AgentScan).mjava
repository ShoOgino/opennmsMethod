    @Activity( lifecycle = "agentScan", phase = "detectIpInterfaces" )
    public void detectIpInterfaces(final Phase currentPhase, final AgentScan agentScan) throws InterruptedException {
        SnmpAgentConfig agentConfig = m_agentConfigFactory.getAgentConfig(agentScan.getAgentAddress());
        Assert.notNull(m_agentConfigFactory, "agentConfigFactory was not injected");

        final Set<String> provisionedIps = new HashSet<String>();
        for(OnmsIpInterface provisioned : agentScan.getNode().getIpInterfaces()) {
            provisionedIps.add(provisioned.getIpAddress());
        }
        
        
        final IPInterfaceTableTracker ipIfTracker = new IPInterfaceTableTracker() {
            @Override
            public void processIPInterfaceRow(IPInterfaceRow row) {
                System.out.println("Processing row with ipAddr "+row.getIpAddress());
                provisionedIps.remove(row.getIpAddress());
                if (!row.getIpAddress().startsWith("127.0.0")) {
                    final OnmsIpInterface iface = row.createInterfaceFromRow();
                    iface.setIpLastCapsdPoll(agentScan.getScanStamp());
                    iface.setIsManaged("M");
                    
                    Runnable r = ipUpdater(currentPhase, agentScan, iface);
                    
                    currentPhase.add(r, "write");
                    
                }
            }
        };
        
        SnmpWalker walker = SnmpUtils.createWalker(agentConfig, "ipAddrTable", ipIfTracker);
        walker.start();
        walker.waitFor();
        
        // After processing the snmp provided interfaces then we need to scan any that 
        // were provisioned but missing from the ip table
        for(String ipAddr : provisionedIps) {
            OnmsIpInterface iface = agentScan.getNode().getIpInterfaceByIpAddress(ipAddr);
            iface.setIpLastCapsdPoll(agentScan.getScanStamp());
            iface.setIsManaged("M");
            
            currentPhase.add(ipUpdater(currentPhase, agentScan, iface), "write");
            
        }
        
        
        System.err.println("detectIpInterfaces");
    }

