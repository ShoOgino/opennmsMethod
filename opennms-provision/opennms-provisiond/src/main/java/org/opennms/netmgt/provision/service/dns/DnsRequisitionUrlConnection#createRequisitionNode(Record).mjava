    /**
     * Creates an instance of the JaxB annotated RequisionNode class.
     * 
     * @param rec
     * @return a populated RequisitionNode based on defaults and data from the
     *   A record returned from a DNS zone transfer query.
     */
    private RequisitionNode createRequisitionNode(Record rec) {
        String addr = null;
        if ("A".equals(Type.string(rec.getType()))) {
            ARecord arec = (ARecord)rec;
            addr = StringUtils.stripStart(arec.getAddress().toString(), "/");
        } else if ("AAAA".equals(Type.string(rec.getType()))) {
            AAAARecord aaaarec = (AAAARecord)rec;
            addr = aaaarec.rdataToString();
        } else {
            throw new IllegalArgumentException("Invalid record type " + Type.string(rec.getType()) + ". A or AAAA expected.");
        }

        RequisitionNode n = new RequisitionNode();
        
        String host = rec.getName().toString();
        String nodeLabel = StringUtils.stripEnd(StringUtils.stripStart(host, "."), ".");

        n.setBuilding(getForeignSource());
        
        switch(m_foreignIdHashSource) {
            case 1:
                n.setForeignId(computeHashCode(nodeLabel));
                log().debug("Generating foreignId from hash of nodelabel " + nodeLabel);
                break;
            case 2:
                n.setForeignId(computeHashCode(addr));
                log().debug("Generating foreignId from hash of ipAddress " + addr);
                break;
            case 3:
                n.setForeignId(computeHashCode(nodeLabel+addr));
                log().debug("Generating foreignId from hash of nodelabel+ipAddress " + nodeLabel + addr);
                break;
            default:
                n.setForeignId(computeHashCode(nodeLabel));
                log().debug("Default case: Generating foreignId from hash of nodelabel " + nodeLabel);
                break;
        }
        n.setNodeLabel(nodeLabel);
        
        RequisitionInterface i = new RequisitionInterface();
        i.setDescr("DNS-" + Type.string(rec.getType()));
        i.setIpAddr(addr);
        i.setSnmpPrimary("P");
        i.setManaged(Boolean.TRUE);
        i.setStatus(Integer.valueOf(1));
        
        for (String service : m_services) {
            service = service.trim();
            i.insertMonitoredService(new RequisitionMonitoredService(service));
            log().debug("Adding provisioned service " + service);
            }
        
        n.putInterface(i);
        
        return n;
    }

