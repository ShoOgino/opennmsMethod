	/**
	 * <p>foundInterface</p>
	 *
	 * @param ipAddr a {@link java.lang.String} object.
	 * @param descr a {@link java.lang.Object} object.
	 * @param snmpPrimary a {@link InterfaceSnmpPrimaryType} object.
	 * @param managed a boolean.
	 * @param status a int.
	 */
	public void foundInterface(String ipAddr, Object descr, InterfaceSnmpPrimaryType snmpPrimary, boolean managed, int status) {
		
		if (ipAddr == null || "".equals(ipAddr.trim())) {
		    log().error(String.format("Found interface on node %s with an empty ipaddr! Ignoring!", m_node.getLabel()));
			return;
		}

        m_currentInterface = new OnmsIpInterface(ipAddr, m_node);
        m_currentInterface.setIsManaged(status == 3 ? "U" : "M");
        m_currentInterface.setIsSnmpPrimary(PrimaryType.get(snmpPrimary.toString()));
        
        if (InterfaceSnmpPrimaryType.P.equals(snmpPrimary)) {
        	final InetAddress addr = InetAddressUtils.addr(ipAddr);
        	if (addr == null) {
        		LogUtils.errorf(this, "Unable to resolve address of snmpPrimary interface for node %s with address '%s'", m_node.getLabel(), ipAddr);
        	} else {
        		m_scanManager = new ScanManager(addr);
        	}
        }
        
        //FIXME: verify this doesn't conflict with constructor.  The constructor already adds this
        //interface to the node.
        m_node.addIpInterface(m_currentInterface);
    }

