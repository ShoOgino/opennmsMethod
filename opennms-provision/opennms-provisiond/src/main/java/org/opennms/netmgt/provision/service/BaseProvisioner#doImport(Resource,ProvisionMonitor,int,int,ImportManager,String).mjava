    private void doImport(Resource resource, final ProvisionMonitor monitor,
            final int scanThreads, final int writeThreads,
            ImportManager importManager, final String foreignSource) throws Exception {
        
        importManager.getClass();
        
        ExecutorService executor = null;
        
        final Task<Resource, SpecFile> loader = new Task<Resource, SpecFile>(executor) {

            @Override
            public SpecFile execute(Resource resource) throws Exception {
                return loadSpecFile(resource, foreignSource, monitor);
            }
            
        };
        
        

        
        final Task<SpecFile, ImportOperationsManager> auditor = new Task<SpecFile, ImportOperationsManager>(executor) {

            @Override
            public ImportOperationsManager execute(SpecFile specFile) throws Exception {
                monitor.beginAuditNodes();
                ImportOperationsManager opsMgr = auditNodes(specFile, monitor);
                monitor.finishAuditNodes();
                return opsMgr;
            }
        };
        
        
        
        final Task<ImportOperationsManager, Void> persistor = new Task<ImportOperationsManager, Void>(executor) {

            @Override
            public Void execute(ImportOperationsManager opsMgr) throws Exception {
                opsMgr.persistOperations(writeThreads, scanThreads, monitor);
                return null;
            }
            
        };
        
        
        
        final Task<SpecFile, Void> relator = new Task<SpecFile, Void>(executor) {

            @Override
            public Void execute(SpecFile specFile) throws Exception {
                monitor.beginRelateNodes();
                
                relateNodes(specFile);
                
                monitor.finishRelateNodes();
                return null;
            }
            
        };
        
        
        final Task<Resource, Void> importer = new Task<Resource, Void>(executor) {

            @Override
            public Void execute(Resource resource) throws Exception {
                monitor.beginImporting();

                SpecFile specFile = loader.execute(resource);
                ImportOperationsManager opsMgr = auditor.execute(specFile);
                persistor.execute(opsMgr);
                relator.execute(specFile);
                
            
                monitor.finishImporting();
                return null;
            }
            
        };
        
        importer.execute(resource);

    }

