        public void detectIpInterfaces(final BatchTask currentPhase) {
        	LogUtils.debugf(this, "detecting IP interfaces (phase = %s)", currentPhase);
            if (!isAborted()) { 
            	LogUtils.debugf(this, "we are not aborted");
            	final SnmpAgentConfig agentConfig = getAgentConfigFactory().getAgentConfig(getAgentAddress());
                Assert.notNull(getAgentConfigFactory(), "agentConfigFactory was not injected");

                // mark all provisioned interfaces as 'in need of scanning' so we can mark them
                // as scanned during ipAddrTable processing
                final Set<InetAddress> provisionedIps = new HashSet<InetAddress>();
                if (getForeignSource() != null) {
                    for(final OnmsIpInterface provisioned : getNode().getIpInterfaces()) {
                        provisionedIps.add(provisioned.getIpAddress());
                    }
                }

                final IPInterfaceTableTracker ipIfTracker = new IPInterfaceTableTracker() {
                	@Override
                	public void processIPInterfaceRow(final IPInterfaceRow row) {
                		final String ipAddress = row.getIpAddress();
                		LogUtils.debugf(this, "Processing row with ipAddr %s", ipAddress);
                		storeIfIndexIpAddress(row.getIfIndex(), row.getIpAddress());
                		if (!ipAddress.startsWith("127.0.0.") && !ipAddress.equals("0000:0000:0000:0000:0000:0000:0000:0001")) {

                            // mark any provisioned interface as scanned
                            provisionedIps.remove(ipAddress);

                            // save the interface
                            OnmsIpInterface iface = row.createInterfaceFromRow();
                            iface.setIpLastCapsdPoll(getScanStamp());

                            // add call to the ip interface is managed policies
                            iface.setIsManaged("M");

                            final List<IpInterfacePolicy> policies = getProvisionService().getIpInterfacePoliciesForForeignSource(getForeignSource() == null ? "default" : getForeignSource());
                            for(final IpInterfacePolicy policy : policies) {
                                if (iface != null) {
                                    iface = policy.apply(iface);
                                }
                            }
        
                            if (iface != null) {
                                currentPhase.add(ipUpdater(currentPhase, iface), "write");
                            }
        
                        }
                    }
                };

                final IPAddressTableTracker ipAddressTracker = new IPAddressTableTracker() {
                	@Override
                	public void processIPAddressRow(final IPAddressRow row) {
                		final String ipAddress = row.getIpAddress();
						LogUtils.debugf(this, "Processing row with ipAddr %s", ipAddress);
                		
                		if (!ipAddress.startsWith("127.0.0.") && !ipAddress.equals("0000:0000:0000:0000:0000:0000:0000:0001")) {
	                        // mark any provisioned interface as scanned
	                        provisionedIps.remove(ipAddress);
	
	                        OnmsIpInterface iface = row.createInterfaceFromRow();
	                        iface.setIpLastCapsdPoll(getScanStamp());
	                        iface.setIsManaged("M");
	
                            final List<IpInterfacePolicy> policies = getProvisionService().getIpInterfacePoliciesForForeignSource(getForeignSource() == null ? "default" : getForeignSource());
                            for(final IpInterfacePolicy policy : policies) {
                                if (iface != null) {
                                    iface = policy.apply(iface);
                                }
                            }
        
                            if (iface != null) {
                                currentPhase.add(ipUpdater(currentPhase, iface), "write");
                            }
                		}
                	}
                };

                final SnmpWalker walker = SnmpUtils.createWalker(agentConfig, "ipAddressTables", ipAddressTracker, ipIfTracker);
                walker.start();
        
                try {
                    walker.waitFor();
        
                    if (walker.timedOut()) {
                        abort("Aborting node scan : Agent timed out while scanning the IP address tables");
                    }
                    else if (walker.failed()) {
                        abort("Aborting node scan : Agent failed while scanning the IP address tables : " + walker.getErrorMessage());
                    }
                    else {
        
        
                        // After processing the snmp provided interfaces then we need to scan any that 
                        // were provisioned but missing from the ip table
                        for(InetAddress ipAddr : provisionedIps) {
                            OnmsIpInterface iface = getNode().getIpInterfaceByIpAddress(ipAddr);
                            iface.setIpLastCapsdPoll(getScanStamp());
                            iface.setIsManaged("M");
        
                            currentPhase.add(ipUpdater(currentPhase, iface), "write");
        
                        }
        
                        debugf(this, "Finished phase %s", currentPhase);
        
                    }
                } catch (InterruptedException e) {
                    abort("Aborting node scan : Scan thread failed while waiting for the IP address tables");
                }
        
            }
        }

