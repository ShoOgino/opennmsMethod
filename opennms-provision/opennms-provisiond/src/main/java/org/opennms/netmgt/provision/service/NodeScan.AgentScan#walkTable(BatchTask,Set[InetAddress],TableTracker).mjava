		private void walkTable(final BatchTask currentPhase, final Set<InetAddress> provisionedIps, final TableTracker tracker) {
            final OnmsNode node = getNode();
			infof(this, "detecting IP interfaces for node %d/%s/%s using table tracker %s", node.getId(), node.getForeignSource(), node.getForeignId(), tracker);

			if (isAborted()) {
				debugf(this, "'%s' is marked as aborted; skipping scan of table %s", currentPhase, tracker);
			} else {
	            Assert.notNull(getAgentConfigFactory(), "agentConfigFactory was not injected");
	
	        	final SnmpAgentConfig agentConfig = getAgentConfigFactory().getAgentConfig(getAgentAddress());
	
				final SnmpWalker walker = SnmpUtils.createWalker(agentConfig, "IP address tables", tracker);
				walker.start();
	      
				try {
				    walker.waitFor();
	      
				    if (walker.timedOut()) {
				        abort("Aborting node scan : Agent timed out while scanning the IP address tables");
				    }
				    else if (walker.failed()) {
				        abort("Aborting node scan : Agent failed while scanning the IP address tables : " + walker.getErrorMessage());
				    } else {
	      
				        // After processing the snmp provided interfaces then we need to scan any that 
				        // were provisioned but missing from the ip table
				        for(final InetAddress ipAddr : provisionedIps) {
				            final OnmsIpInterface iface = node.getIpInterfaceByIpAddress(ipAddr);
				            iface.setIpLastCapsdPoll(getScanStamp());
				            iface.setIsManaged("M");
	      
				            currentPhase.add(ipUpdater(currentPhase, iface), "write");
	      
				        }
	      
				        debugf(this, "Finished phase %s", currentPhase);
	      
				    }
				} catch (final InterruptedException e) {
				    abort("Aborting node scan : Scan thread failed while waiting for the IP address tables");
				}
			}
		}

