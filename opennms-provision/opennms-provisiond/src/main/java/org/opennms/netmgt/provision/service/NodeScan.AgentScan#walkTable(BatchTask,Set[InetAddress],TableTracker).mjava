        private void walkTable(final BatchTask currentPhase, final Set<InetAddress> provisionedIps, final TableTracker tracker) {
            final OnmsNode node = getNode();
            LOG.info("detecting IP interfaces for node {}/{}/{} using table tracker {}", node.getId(), node.getForeignSource(), node.getForeignId(), tracker);

            if (isAborted()) {
                LOG.debug("'{}' is marked as aborted; skipping scan of table {}", currentPhase, tracker);
            } else {
                Assert.notNull(getAgentConfigFactory(), "agentConfigFactory was not injected");

                try {
                    final SnmpAgentConfig agentConfig = getAgentConfigFactory().getAgentConfig(getAgentAddress());
                    m_provisionService.getLocationAwareSnmpClient().walk(agentConfig, tracker)
                        .withDescription("IP address tables")
                        .withLocation(getLocationName())
                        .execute()
                        .get();

                    // After processing the SNMP provided interfaces then we need to scan any that
                    // were provisioned but missing from the ip table
                    for(final InetAddress ipAddr : provisionedIps) {
                        final OnmsIpInterface iface = node.getIpInterfaceByIpAddress(ipAddr);

                        if (iface != null) {
                            iface.setIpLastCapsdPoll(getScanStamp());
                            iface.setIsManaged("M");

                            currentPhase.add(ipUpdater(currentPhase, iface), "write");
                        }
                    }

                    LOG.debug("Finished phase {}", currentPhase);
                } catch (ExecutionException e) {
                    abort("Aborting node scan : Agent failed while scanning the IP address tables : " + e.getMessage());
                } catch (final InterruptedException e) {
                abort("Aborting node scan : Scan thread failed while waiting for the IP address tables");
                }
            }
        }

