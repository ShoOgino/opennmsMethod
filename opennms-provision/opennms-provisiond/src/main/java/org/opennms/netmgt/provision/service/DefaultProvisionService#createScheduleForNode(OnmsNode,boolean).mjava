    private NodeScanSchedule createScheduleForNode(OnmsNode node, boolean force) {
        Assert.notNull(node, "Node may not be null");
        String actualForeignSource = node.getForeignSource();
        if (actualForeignSource == null && !isDiscoveryEnabled()) {
            info("Not scheduling node %s to be scanned since it has a null foreignSource and handling of discovered nodes is disabled in provisiond", node);
            return null;
        }

        String effectiveForeignSource = actualForeignSource == null ? "default" : actualForeignSource;
        try {
            ForeignSource fs = m_foreignSourceRepository.getForeignSource(effectiveForeignSource);

            Duration scanInterval = fs.getScanInterval();
            Duration initialDelay = Duration.ZERO;
            if (node.getLastCapsdPoll() != null && !force) {
                DateTime nextPoll = new DateTime(node.getLastCapsdPoll().getTime()).plus(scanInterval);
                DateTime now = new DateTime();
                if (nextPoll.isAfter(now)) {
                    initialDelay = new Duration(now, nextPoll);
                }
            }

            NodeScanSchedule nSchedule = new NodeScanSchedule(node.getId(), actualForeignSource, node.getForeignId(), initialDelay, scanInterval);

            return nSchedule;
        } catch (ForeignSourceRepositoryException e) {
            log().warn(String.format("unable to get foreign source '%s' from repository", effectiveForeignSource), e);
            return null;
        }
    }

