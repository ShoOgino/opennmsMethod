    /**
     * Builds a Requisition based on the A records returned in a zone transfer from the
     * specified zone.
     * 
     * @return an instance of the JaxB annotated Requistion class than can be marshaled
     *   into the XML and streamed to the Provisioner
     *   
     * @throws IOException
     * @throws ZoneTransferException
     */
    private Requisition buildRequisitionFromZoneTransfer() throws IOException, ZoneTransferException {
        
	ZoneTransferIn xfer = null;
        List<Record> records = null;
        
        LogUtils.debugf(this, "connecting to host %s:%d", m_url.getHost(), m_port);
        try { 
            xfer = ZoneTransferIn.newIXFR(new Name(m_zone), 
                                        m_serial.longValue(), 
                                        m_fallback.booleanValue(), 
                                        m_url.getHost(), 
                                        m_port,
                                        m_key);
               records = getRecords(xfer);
       } catch (ZoneTransferException e) // Fallbacking to AXFR
       {
             String message = "IXFR not supported trying AXFR: "+e;
             log().warn(message, e);
             xfer = ZoneTransferIn.newAXFR(new Name(m_zone), m_url.getHost(), m_key);
             records = getRecords(xfer);
       }

  
        Requisition r = null;
        
        if (records.size() > 0) {
            
            //for now, set the foreign source to the specified dns zone
            r = new Requisition(getForeignSource());
            
            for (Record rec : records) {
                if (matchingRecord(rec)) {
                    r.insertNode(createRequisitionNode(rec));
                }
            }
        }
        
        return r;
    }

