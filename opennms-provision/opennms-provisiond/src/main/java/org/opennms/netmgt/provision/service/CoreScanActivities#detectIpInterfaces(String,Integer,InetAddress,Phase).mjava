    @Activity( lifecycle = "agentScan", phase = "detectIpInterfaces" )
    public void detectIpInterfaces(@Attribute("foreignSource") final String foreignSource, final Integer nodeId, final InetAddress primaryAddress, final Phase currentPhase) throws InterruptedException {
        SnmpAgentConfig agentConfig = m_agentConfigFactory.getAgentConfig(primaryAddress);
        Assert.notNull(m_agentConfigFactory, "agentConfigFactory was not injected");
        
        final IPInterfaceTableTracker ipIfTracker = new IPInterfaceTableTracker() {
            @Override
            public void processIPInterfaceRow(IPInterfaceRow row) {
                System.out.println("Processing row with ipAddr "+row.getIpAddress());
                if (!row.getIpAddress().startsWith("127.0.0")) {
                    final OnmsIpInterface iface = row.createInterfaceFromRow();
                    Runnable r = new Runnable() {
                        public void run() {
                            System.out.println("Saving OnmsIpInterface "+iface);
                            m_provisionService.updateIpInterfaceAttributes(nodeId, iface);
                            
                            LifeCycleInstance lifeCycle = currentPhase.createNestedLifeCycle("ipInterfaceScan");
                            lifeCycle.setAttribute("foreignSource", foreignSource);
                            lifeCycle.setAttribute("nodeId", nodeId);
                            lifeCycle.setAttribute("ipAddress", iface.getInetAddress());
                            lifeCycle.trigger();

                        }
                    };
                    currentPhase.add(r, "write");
                    
                    
                    
                    
                }
            }
        };
        
        SnmpWalker walker = SnmpUtils.createWalker(agentConfig, "ipAddrTable", ipIfTracker);
        walker.start();
        walker.waitFor();
        
        System.err.println("detectIpInterfaces");
    }

