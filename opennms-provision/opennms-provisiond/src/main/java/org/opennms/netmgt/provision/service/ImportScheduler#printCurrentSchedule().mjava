    private void printCurrentSchedule() {
        
        try {
            LOG.info("calendarNames: {}", String.join(", ", getScheduler().getCalendarNames().toArray(new String[0])));
            LOG.info("current executing jobs: {}", StringUtils.arrayToCommaDelimitedString(getScheduler().getCurrentlyExecutingJobs().toArray()));
            LOG.info("current job names: {}", getScheduler().getJobKeys(GroupMatcher.<JobKey>groupEquals(JOB_GROUP)).stream().map(JobKey::getName).collect(Collectors.joining(", ")));
            LOG.info("scheduler metadata: {}", getScheduler().getMetaData());
            LOG.info("trigger names: {}", getScheduler().getTriggerKeys(GroupMatcher.<TriggerKey>groupEquals(JOB_GROUP)).stream().map(TriggerKey::getName).collect(Collectors.joining(", ")));
            
            for (TriggerKey key : getScheduler().getTriggerKeys(GroupMatcher.<TriggerKey>groupEquals(JOB_GROUP))) {
                String triggerName = key.getName();
                CronTrigger t = (CronTrigger) getScheduler().getTrigger(key);
                LOG.info("trigger: {}, calendar name: {}, cron expression: {}, URL: {}, rescanExisting: {}, next fire time: {}, previous fire time: {}, time zone: {}, priority: {}",
                         triggerName,
                         t.getCalendarName(),
                         t.getCronExpression(),
                         t.getJobDataMap().get(ImportJob.URL),
                         t.getJobDataMap().get(ImportJob.RESCAN_EXISTING),
                         t.getNextFireTime(),
                         t.getPreviousFireTime(),
                         t.getTimeZone(),
                         t.getPriority());
            }
            
        } catch (Throwable e) {
            LOG.error("printCurrentSchedule: {}", e.getLocalizedMessage(), e);
        }
        
    }

