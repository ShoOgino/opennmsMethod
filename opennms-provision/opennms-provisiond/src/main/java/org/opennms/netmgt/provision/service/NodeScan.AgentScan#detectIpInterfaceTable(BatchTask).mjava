        public void detectIpInterfaceTable(final BatchTask currentPhase) {
        	final OnmsNode node = getNode();

			// mark all provisioned interfaces as 'in need of scanning' so we can mark them
            // as scanned during ipAddrTable processing
            final Set<InetAddress> provisionedIps = new HashSet<InetAddress>();
            if (getForeignSource() != null) {
                for(final OnmsIpInterface provisioned : node.getIpInterfaces()) {
                    provisionedIps.add(provisioned.getIpAddress());
                }
            }

            final IPInterfaceTableTracker ipIfTracker = new IPInterfaceTableTracker() {
            	@Override
            	public void processIPInterfaceRow(final IPInterfaceRow row) {
            		final String ipAddress = row.getIpAddress();
            		infof(this, "Processing IPInterface table row with ipAddr %s for node %d/%s/%s", ipAddress, node.getId(), node.getForeignSource(), node.getForeignId());
            		if (ipAddress != null && !ipAddress.startsWith("127.0.0.") && !ipAddress.equals("0000:0000:0000:0000:0000:0000:0000:0001")) {

                        // mark any provisioned interface as scanned
                        provisionedIps.remove(ipAddress);

                        // save the interface
                        OnmsIpInterface iface = row.createInterfaceFromRow();
                        iface.setIpLastCapsdPoll(getScanStamp());

                        // add call to the ip interface is managed policies
                        iface.setIsManaged("M");

                        final List<IpInterfacePolicy> policies = getProvisionService().getIpInterfacePoliciesForForeignSource(getForeignSource() == null ? "default" : getForeignSource());
                        for(final IpInterfacePolicy policy : policies) {
                            if (iface != null) {
                                iface = policy.apply(iface);
                            }
                        }
    
                        if (iface != null) {
                            currentPhase.add(ipUpdater(currentPhase, iface), "write");
                        }
    
                    }
                }
            };

            walkTable(currentPhase, provisionedIps, ipIfTracker);
        }

