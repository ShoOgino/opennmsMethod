        public void detectIpInterfaceTable(final BatchTask currentPhase) {
            final OnmsNode node = getNode();

            LOG.debug("Attempting to scan the IPInterface table for node {}", node);

            // mark all provisioned interfaces as 'in need of scanning' so we can mark them
            // as scanned during ipAddrTable processing
            final Set<InetAddress> provisionedIps = new HashSet<>();
            if (getForeignSource() != null) {
                for(final OnmsIpInterface provisioned : node.getIpInterfaces()) {
                    provisionedIps.add(provisioned.getIpAddress());
                }
            }

            final IPInterfaceTableTracker ipIfTracker = new IPInterfaceTableTracker() {
                @Override
                public void processIPInterfaceRow(final IPInterfaceRow row) {
                    final String ipAddress = row.getIpAddress();
                    LOG.info("Processing IPInterface table row with ipAddr {} for node {}/{}/{}", ipAddress, node.getId(), node.getForeignSource(), node.getForeignId());

                    final InetAddress address = addr(ipAddress);

                    // skip if it's any number of unusual/local address types
                    if (address == null) {
                        return;
                    } else if (address.isAnyLocalAddress()) {
                        LOG.debug("{}.isAnyLocalAddress() == true, Skipping.", ipAddress);
                        return;
                    } else if (address.isLinkLocalAddress()) {
                        LOG.debug("{}.isLinkLocalAddress() == true, Skipping.", ipAddress);
                        return;
                    } else if (address.isLoopbackAddress()) {
                        LOG.debug("{}.isLoopbackAddress() == true, Skipping.", ipAddress);
                        return;
                    } else if (address.isMulticastAddress()) {
                        LOG.debug("{}.isMulticastAddress() == true, Skipping.", ipAddress);
                        return;
                    }

                    // mark any provisioned interface as scanned
                    provisionedIps.remove(ipAddress);

                    // save the interface
                    OnmsIpInterface iface = row.createInterfaceFromRow();

                    if (iface != null) {
                        iface.setIpLastCapsdPoll(getScanStamp());

                        // add call to the ip interface is managed policies
                        iface.setIsManaged("M");
                        String hostName = getProvisionService().getHostnameResolver().getHostname(address, getLocationName());
                        iface.setIpHostName(hostName);

                        final List<IpInterfacePolicy> policies = getProvisionService().getIpInterfacePoliciesForForeignSource(getForeignSource() == null ? "default" : getForeignSource());
                        for(final IpInterfacePolicy policy : policies) {
                            if (iface != null) {
                                iface = policy.apply(iface, Collections.emptyMap());
                            }
                        }

                        if (iface != null) {
                            currentPhase.add(ipUpdater(currentPhase, iface), "write");
                        }
                    }
                }
            };

            walkTable(currentPhase, provisionedIps, ipIfTracker);
        }

