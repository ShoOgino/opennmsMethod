    public static <A, B, C> Async<A, C> composition(final Async<A, B> a1, final Async<B, C> a2) {
        Action<B> callNext = new Action<B>() {
            public void action(B b) {
                a2.start(b);
            }
        };
        
        a1.addCallback(callNext);


        return new Async<A, C>() {

            public void addCallback(Action<C> cb) {
                a2.addCallback(cb);
            }

            public void start(A a) {
                System.err.println("Starting Task "+this);
                a1.start(a);
                System.err.println("Started Task "+this);
            }

            public C waitFor() throws Exception {
                return a2.waitFor();
            }
            
            public String toString() {
                StringBuilder buf = new StringBuilder();
                buf.append(getClass()).append('@').append(hashCode());
                buf.append('[');
                buf.append("first=").append(a1);
                buf.append(", ");
                buf.append("next=").append(a2);
                buf.append(']');
                return buf.toString();
            }

            
        };
        
    }

