    @EventHandler(uei = EventConstants.NEW_SUSPECT_INTERFACE_EVENT_UEI)
    public void handleNewSuspectEvent(Event e) {
        final Event event = e;
        final String uei = e.getUei();
        final String ip = e.getInterface();
        final Map<String, String> paramMap = Maps.newHashMap();
        e.getParmCollection().forEach(eachParam -> paramMap.put(eachParam.getParmName(), eachParam.getValue().getContent()));

        if (ip == null) {
            LOG.error("Received a {} event with a null ipAddress", uei);
            return;
        }

        if (!getProvisionService().isDiscoveryEnabled()) {
            LOG.info("Ignoring {} event for ip {} since discovery handling is disabled in provisiond", uei, ip);
            return;
        }

        Runnable r = new Runnable() {
            @Override
            public void run() {
                try {
                    final InetAddress addr = addr(ip);
                    if (addr == null) {
                    	LOG.error("Unable to convert {} to an InetAddress.", ip);
                    	return;
                    }

                    String effectiveLocation = MonitoringLocationDao.DEFAULT_MONITORING_LOCATION_ID;
                    if (paramMap.containsKey("location")) {
                        effectiveLocation = paramMap.get("location");
                    } else if (event.getDistPoller() != null) {
                        final OnmsMonitoringSystem monitoringSystem = monitoringSystemDao.get(event.getDistPoller());
                        if (monitoringSystem != null) {
                            effectiveLocation = monitoringSystem.getLocation();
                        } else {
                            LOG.info("newSuspect event references monitoring system with id {}, but this system was not found. Using the default location.",
                                    event.getDistPoller());
                        }
                    }

                    final String foreignSource = paramMap.get("foreignSource");
                    LOG.debug("Triggering new suspect scan for: {} at location: {} with foreign source: {}.",
                            addr, effectiveLocation, foreignSource);
                    final NewSuspectScan scan = createNewSuspectScan(addr, foreignSource, effectiveLocation);
                    Task t = scan.createTask();
                    t.schedule();
                    t.waitFor();
                } catch (InterruptedException ex) {
                    LOG.error("Task interrupted waiting for new suspect scan of {} at location {} to finish", ip, ex);
                } catch (Exception ex) {
                    LOG.error("An unexpected execution occurred waiting for new suspect scan of {} to finish", ip, ex);
                }
            }
        };

        m_scheduledExecutor.execute(r);
        
    }

