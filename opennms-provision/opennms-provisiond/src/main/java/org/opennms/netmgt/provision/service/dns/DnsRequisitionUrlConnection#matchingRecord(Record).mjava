    /**
     * Determines if the record is an A record and if the canonical name 
     * matches the expression supplied in the URL, if one was supplied.
     * 
     * @param rec
     * @return boolean if rec should be included in the import requisition
     */
    private boolean matchingRecord(Record rec) {
        
        log().info("matchingRecord: checking rec: "+rec+" to see if it should be imported...");

        boolean matches = false;
        if ("A".equals(Type.string(rec.getType())) || "AAAA".equals(Type.string(rec.getType()))) {
            log().debug("matchingRecord: record is an " + Type.string(rec.getType()) + " record, continuing...");
            
            String expression = determineExpressionFromUrl(getUrl());
            
            if (expression != null) {

                Pattern p = Pattern.compile(expression);
                Matcher m = p.matcher(rec.getName().toString());

                // Try matching on host name only for backwards compatibility
                log().debug("matchingRecord: attempting to match hostname: ["+rec.getName().toString()+"] with expression: ["+expression+"]");
                if (m.matches()) {
                    matches = true;
                } else {
                    // include the IP address and try again
                    log().debug("matchingRecord: attempting to match record: ["+rec.getName().toString()
                                +" "+rec.rdataToString()+"] with expression: ["+expression+"]");
                    m = p.matcher(rec.getName().toString() + " " + rec.rdataToString());
                    if (m.matches()) {
                        matches = true;
                    }
                }
                
                log().debug("matchingRecord: record matches expression: "+matches);
                
            } else {
                
                log().debug("matchingRecord: no expression for this zone, returning valid match for this " + Type.string(rec.getType()) + " record...");
                
                matches = true;
            }

        }
        
        log().info("matchingRecord: record: "+rec+" matches: "+matches);
        
        return matches;
    }

