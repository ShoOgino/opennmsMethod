    /** {@inheritDoc} */
    @Transactional
    public OnmsNode createUndiscoveredNode(final String ipAddress) {
        
        OnmsNode node = new UpsertTemplate<OnmsNode, NodeDao>(m_transactionManager, m_nodeDao) {

            @Override
            protected OnmsNode query() {
                List<OnmsNode> nodes = m_nodeDao.findByForeignSourceAndIpAddress(FOREIGN_SOURCE_FOR_DISCOVERED_NODES, ipAddress);
                return nodes.size() > 0 ? nodes.get(0) : null;
            }

            @Override
            protected OnmsNode doUpdate(OnmsNode existingNode) {
                // we found an existing node so exit by returning null;
                return null;
            }

            @Override
            protected OnmsNode doInsert() {
                final Date now = new Date();
                
                final String hostname = getHostnameForIp(ipAddress);
                
                // @ipv6
                final OnmsNode node = new OnmsNode(createDistPollerIfNecessary("localhost", "127.0.0.1"));
                if (hostname == null || ipAddress.equals(hostname)) {
                    node.setLabel(ipAddress);
                    node.setLabelSource("A");
                } else {
                    node.setLabel(hostname);
                    node.setLabelSource("H");
                }
                node.setForeignSource(FOREIGN_SOURCE_FOR_DISCOVERED_NODES);
                node.setType("A");
                node.setLastCapsdPoll(now);
                
                final OnmsIpInterface iface = new OnmsIpInterface(InetAddressUtils.addr(ipAddress), node);
                iface.setIsManaged("M");
                iface.setIpHostName(hostname);
                iface.setIsSnmpPrimary(PrimaryType.NOT_ELIGIBLE);
                iface.setIpLastCapsdPoll(now);
                
                m_nodeDao.save(node);
                m_nodeDao.flush();
                return node;
            }
        }.execute();
        
        if (node != null) {
            
            // we do this here rather than in the doInsert method because
            // the doInsert may abort
            node.visit(new AddEventVisitor(m_eventForwarder));
        }
        
        return node;
        
    }

