    /** {@inheritDoc} */
    @Transactional
    @Override
    public void deleteService(final Integer nodeId, final InetAddress addr, final String svcName, final boolean ignoreUnmanaged) {
        LOG.debug("deleteService: nodeId={}, addr={}, service={}", nodeId, addr, svcName);

        final OnmsMonitoredService service = m_monitoredServiceDao.get(nodeId, addr, svcName);
        if (service != null) {

            final OnmsIpInterface iface = service.getIpInterface();
            final OnmsNode node = iface.getNode();

            Set<OnmsIpInterface> ifaces = node.getIpInterfaces();
            Set<OnmsMonitoredService> ifaceServices = iface.getMonitoredServices();

            if (ignoreUnmanaged) {
                ifaces = ifaces.stream().filter(s -> s.isManaged()).collect(Collectors.toSet());
                ifaceServices = ifaceServices.stream().filter(s -> s.getIpInterface().isManaged()).collect(Collectors.toSet());
            }

            final boolean lastService = (ifaceServices.size() < 2);
            final boolean lastInterface = (ifaces.size() < 2);

            final DeleteEventVisitor visitor = new DeleteEventVisitor(m_eventForwarder);

            iface.removeMonitoredService(service);
            m_nodeDao.saveOrUpdate(node);
            m_nodeDao.flush();
            service.visit(visitor);

            if (lastService) {
                LOG.debug("Deleting interface {} from node {}", InetAddressUtils.str(iface.getIpAddress()), nodeId);

                node.removeIpInterface(iface);
                m_nodeDao.saveOrUpdate(node);
                m_nodeDao.flush();
                iface.visit(visitor);

                if (lastInterface) {
                    LOG.debug("Deleting node {}", nodeId);

                    m_nodeDao.delete(node);
                    m_nodeDao.flush();
                    node.visit(visitor);
                }
            }
        }
    }

