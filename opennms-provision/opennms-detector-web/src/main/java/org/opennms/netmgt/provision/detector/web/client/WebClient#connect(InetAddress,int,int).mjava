    @Override
    public void connect(InetAddress address, int port, int timeout) throws IOException, Exception {
        final URIBuilder ub = new URIBuilder();
        ub.setScheme(m_schema);
        ub.setHost(InetAddressUtils.str(address));
        ub.setPort(port);
        ub.setPath(m_path);
        if (m_queryString != null && m_queryString.trim().length() > 0) {
            final List<NameValuePair> params = URLEncodedUtils.parse(m_queryString, StandardCharsets.UTF_8);
            if (!params.isEmpty()) {
                ub.setParameters(params);
            }
        }

        m_httpMethod = new HttpGet(ub.build());
        m_httpMethod.setProtocolVersion(m_version);

        m_httpClientWrapper = HttpClientWrapper.create();
        if (m_overrideSSL) {
            try {
                m_httpClientWrapper.trustSelfSigned("https");
            } catch (final Exception e) {
                LOG.warn("Failed to create relaxed SSL client.", e);
            }
        }
        if (m_userAgent != null && !m_userAgent.trim().isEmpty()) {
            m_httpClientWrapper.setUserAgent(m_userAgent);
        }
        if (timeout > 0) {
            m_httpClientWrapper.setConnectionTimeout(timeout);
            m_httpClientWrapper.setSocketTimeout(timeout);
        }
        if (m_virtualHost != null && !m_virtualHost.trim().isEmpty()) {
            m_httpClientWrapper.setVirtualHost(m_virtualHost);
        }
        if (m_userName != null && !m_userName.trim().isEmpty()) {
            m_httpClientWrapper.addBasicCredentials(m_userName, m_password);
        }
        if (m_authPreemptive) {
            m_httpClientWrapper.usePreemptiveAuth();
        }
        if(m_useSystemProxy){
            m_httpClientWrapper.useSystemProxySettings();
        }
    }

