    public Optional<ServiceMatch> findService(final String svcName) {
        for (final Service service : this.getServices()) {
            if (service.getName().equalsIgnoreCase(svcName)) {
                return Optional.of(new ServiceMatch(service));
            }
        }

        // If not found above, search by pattern
        for (final Service service : this.getServices()) {
            final String status = service.getStatus();
            if ((status != null && !status.equals("on")) || Strings.isNullOrEmpty(service.getPattern())) {
                continue;
            }

            final Pattern pattern = Pattern.compile(service.getPattern());
            final Matcher matcher = pattern.matcher(svcName);
            if (matcher.matches()) {
                final Map<String, String> patternVariables = Maps.filterValues(
                        Maps.asMap(RegexUtils.getNamedCaptureGroupsFromPattern(service.getPattern()), matcher::group),
                        Objects::nonNull
                );
                return Optional.of(new ServiceMatch(service, patternVariables));
            }
        }

        return Optional.empty();
    }

