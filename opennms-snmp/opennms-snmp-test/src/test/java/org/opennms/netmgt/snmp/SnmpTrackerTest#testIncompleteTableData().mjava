    @Test
    @Ignore
    @JUnitSnmpAgent(port=9161, resource="classpath:snmpTestDataIncompleteTable.properties")
    public void testIncompleteTableData() throws Exception {
        TestRowCallback rc = new TestRowCallback();
        TableTracker tt = new TableTracker(rc,
            m_ifIndex, m_ifDescr, m_ifMtu,
            m_ifLastChange, m_ifInUcastPkts, m_ifInErrors,
            m_ifOutUcastPkts, m_ifOutNUcastPkts, m_ifOutErrors
        );

        walk(tt, 4, 3);

        List<SnmpRowResult> responses = rc.getResponses();
        for (int i = 0; i < responses.size(); i++) {
            System.err.println(String.format("%d: %s", i, responses.get(i)));
        }
        ResultTable results = rc.getResults();
        assertTrue("tracker must be finished", tt.isFinished());
        assertEquals("number of rows added must match test data", 6, results.getRowsAdded());
        assertEquals("number of rows must match test data", 6, results.getRowCount());
        assertEquals("number of columns must match test data", 9, results.getColumnCount());
        assertNull("ifMtu.4 should be null", results.getResult(m_ifMtu, "4"));
        assertEquals("ifDescr.5 should be en1", "en1", results.getResult(m_ifDescr, "5").toString());
        assertEquals("ifMtu.6 should be 4078", 4078, results.getResult(m_ifMtu, "6").toInt());
        /*
        assertEquals("ifName.2 must be gif0", "gif0", results.getResult(m_ifDescr, "2").toString());
        assertEquals("ifSpeed.3 must be 0", 0, results.getResult(m_ifSpeed, "3").toLong());
        assertEquals("ifSpeed.4 must be 10000000", 10000000, results.getResult(m_ifSpeed, "4").toLong());
        */
    }

