    /**
     * <p>parseCli</p>
     *
     * @param args an array of {@link java.lang.String} objects.
     * @return a {@link org.opennms.mock.snmp.AgentConfigData} object.
     */
    public static AgentConfigData parseCli(String[] args) {
        Options opts = new Options();
        opts.addOption("d", "dump-file", true, "Pathname or URL of file containing MIB dump");
        opts.addOption("l", "listen-addr", true, "IP address to bind to (default: 127.0.0.1)");
        opts.addOption("p", "port", true, "UDP port to listen on (default: 1691)");
        
        String dumpFile = "";
        String listenAddr;
        long listenPort;
        AgentConfigData agentConfig;

        CommandLineParser parser = new PosixParser();
        try {
            CommandLine cmd = parser.parse(opts, args);
            if (cmd.hasOption('d')) {
                dumpFile = cmd.getOptionValue('d');
            } else {
                usage("You must specify at least a pathname or URL for the dump file.", opts);
            }

            if (cmd.hasOption('l')) {
                listenAddr = cmd.getOptionValue('l');
            } else {
                listenAddr = "127.0.0.1";
            }
            if (cmd.hasOption('p')) {
                listenPort = Long.valueOf(cmd.getOptionValue('p'));
            } else {
                listenPort = 1691L;
            }
            return new AgentConfigData(dumpFile, listenAddr, listenPort);
        } catch (ParseException e) {
            usage("Failed to parse provided options.", opts);
        } catch (UnknownHostException e) {
            usage("Unknown host in dump file URL specifier", opts);
        } catch (MalformedURLException e) {
            usage("Malformed dump file URL specifier", opts);
        }

        return null;
    }

