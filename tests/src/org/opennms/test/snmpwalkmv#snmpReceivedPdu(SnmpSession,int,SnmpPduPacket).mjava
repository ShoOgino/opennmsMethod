	/**
	 * This method is defined by the SnmpHandler interface and invoked
	 * when the agent responds to the management application.
	 *
	 * @param session	The session receiving the pdu.
	 * @param cmd		The command from the pdu. 
	 * @param pdu		The received pdu.
	 *
	 * @see org.opennms.protocols.snmp.SnmpPduPacket#getCommand
	 */ 
	public void snmpReceivedPdu(SnmpSession session, int cmd, SnmpPduPacket pdu)
	{
		SnmpPduRequest req = null;
		if(pdu instanceof SnmpPduRequest)
		{
			req = (SnmpPduRequest)pdu;
		}
		
		if(pdu.getCommand() != SnmpPduPacket.RESPONSE)
		{
			System.err.println("Error: Received non-response command " + pdu.getCommand());
			synchronized(session)
			{
				session.notify();
			}
			return;
		}
		
		if(req.getErrorStatus() != 0)
		{
			System.out.println("End of mib reached");
			synchronized(session)
			{
				session.notify();
			}
			return;
		}
		
		
		//
		// The last variable in the list of elements
		// is always the first to run off the table, so 
		// we only need to check that one.
		//
		SnmpVarBind[] vars = null;
		if(snmpwalkmv.ROOT.isRootOf(pdu.getVarBindAt(pdu.getLength()-1).getName()))
		{
			//
			// Create a new map of the interface entry
			//
			vars = pdu.toVarBindArray();
			
			//Loop through and print varbind values
			for(int x = 0; x < ms_elemList.length; x++)
			{
				SnmpObjectId id = new SnmpObjectId(ms_elemList[x].getOid());
				for(int y = 0; y < vars.length; y++)
				{
					if(id.isRootOf(vars[y].getName()))
					{
						try 
						{
							//
							// Retrieve the class object of the expected SNMP data type for this element
							//
							Class classObj = ms_elemList[x].getTypeClass();
						
							//
							// If the SnmpSyntax object matches the expected class 
							// then store it in the map. Else, store a null pointer
							// in the map.
							//
							if (classObj.isInstance(vars[y].getValue()))
							{
								System.out.println(vars[y].getName() + ": " + vars[y].getValue());
							}
							else
							{
								// do nothing
							}
						}
						catch (ClassNotFoundException e)
						{
							System.out.println("Failed retrieving SNMP type class for element: " 
							   		+ ms_elemList[x].getAlias());
							System.out.println(e.getLocalizedMessage());
						}
						catch (NullPointerException e)
						{
							System.out.println(e.getLocalizedMessage());
						}
						break;
					}
				}	
			}
		}
		else
		{
			System.out.println("End of mib reached");
			synchronized(session)
			{
				session.notify();
			}
			return;
		}
				
				
		//
		// next pdu
		//
		SnmpPduRequest nxt = new SnmpPduRequest(SnmpPduPacket.GETNEXT);
		for(int x = 0; x < vars.length; x++)
		{
			nxt.addVarBind(new SnmpVarBind(vars[x].getName()));
		}
				
		session.send(nxt, this);
	}

