	/**
	 * <P>Parse the command line options. If there is an illegal
	 * option then an exception is thrown.</P>
	 *
	 * <P>The command line options are as follows:
	 * 	<TABLE>
	 *	<TR>
	 *	 	<TD nowrap>-v</TD>
	 *	 	<TD nowrap>1 || 2 || 2c</TD>
	 *	 	<TD>Sets the SNMP protocol version. 2 & 2c are identical and stand for
	 *	 	    SNMPv2 community string based.
	 *	 	</TD>
	 * 	</TR>
	 *	<TR>
	 *		<TD nowrap>-c</TD>
	 *		<TD nowrap>community</TD>
	 *		<TD>Sets the community string used to authenticate</TD>
	 *	</TR>
	 *	<TR>
	 *		<TD nowrap>-r</TD>
	 *		<TD nowrap>retries</TD>
	 *		<TD>Sets the number of time the SNMP message is retransmitted before
	 *		    the communication times out.</TD>
	 * 	</TR>
	 *	<TR>
	 *		<TD nowrap>-t</TD>
	 *		<TD nowrap>timeout (seconds)</TD>
	 *		<TD>Sets the timeout value. Fraction of a second is acceptable, but
	 *		    a millisecond resolution is the smallest supported. For example:
	 *		    .8 is equalivant to 800 milliseconds.</TD>
	 *	</TR>
	 *	<TR>
	 *		<TD nowrap>-p</TD>
	 *		<TD nowrap>port</TD>
	 *		<TD>The remote port to communicate with the remote agent on.</TD>
	 *	</TR>
	 *	</TABLE>
	 * </P>	 
	 *
	 * @params args	The command line arguments from the main program.
	 * @exceception IllegalArgumentException Thrown if there is an
	 * 	unknown or malformed argument.
	 *
	 */
	void parseOptions(String[] args) throws IllegalArgumentException
	{
		int lastArg = 0;
		for(int x = 0; x < args.length; x++)
		{
			if(args[x].startsWith("-"))
			{
				if(args[x].equals("-c"))
				{
					m_community = args[++x];
				}
				else if(args[x].equals("-v"))
				{
					if(args[++x].equals("1"))
					{
						m_version = SnmpSMI.SNMPV1;
					}
					else if(args[x].equals("2") ||
						args[x].equals("2c"))
					{
						m_version = SnmpSMI.SNMPV2;
					}
				}
				else if(args[x].equals("-r"))
				{
					try
					{
						m_retries = Integer.parseInt(args[++x]);
					}
					catch(NumberFormatException e)
					{
						throw new IllegalArgumentException("Malformed retry number");
					}
				}
				else if(args[x].equals("-t"))
				{
					try
					{
						float f = Float.parseFloat(args[++x]);
						m_timeout = (int)(f * 1000);
					}
					catch(NumberFormatException e)
					{
						throw new IllegalArgumentException("Malformed timeout period");
					}
				}
				else if(args[x].equals("-p"))
				{
					try
					{
						m_port = Integer.parseInt(args[++x]);
					}
					catch(NumberFormatException e)
					{
						throw new IllegalArgumentException("Malformed port number");
					}
				}
				else if(args[x].equals("--"))
				{
					//
					// end of arguments
					//
					lastArg = x+1;
					break;
				}
				else
				{
					throw new IllegalArgumentException("Unknown Option " + args[x]);
				}
				lastArg = x+1;
			}
		} // end for
		
		//
		// Now the last two values should be the (host, oid) pair!
		//
		if((args.length - lastArg) == 1) // just the host!
		{
			m_host = args[lastArg++];
		}
		else if((args.length - lastArg) == 2)
		{
			m_host = args[lastArg++];
			m_startOid  = args[lastArg++];
		}
		else
		{
			throw new IllegalArgumentException("Invalid number of arguments");
		}
	} // end of parseOptions

