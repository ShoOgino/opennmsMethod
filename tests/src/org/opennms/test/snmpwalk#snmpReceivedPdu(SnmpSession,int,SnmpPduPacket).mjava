	/**
	 * This method is defined by the SnmpHandler interface and invoked
	 * when the agent responds to the management application.
	 *
	 * @param session	The session receiving the pdu.
	 * @param cmd		The command from the pdu. 
	 * @param pdu		The received pdu.
	 *
	 * @see org.opennms.protocols.snmp.SnmpPduPacket#getCommand
	 */ 
	public void snmpReceivedPdu(SnmpSession session, int cmd, SnmpPduPacket pdu)
	{
		SnmpPduRequest req = null;
		if(pdu instanceof SnmpPduRequest)
		{
			req = (SnmpPduRequest)pdu;
		}
		
		if(pdu.getCommand() != SnmpPduPacket.RESPONSE)
		{
			System.err.println("Error: Received non-response command " + pdu.getCommand());
			synchronized(session)
			{
				session.notify();
			}
			return;
		}
		
		if(req.getErrorStatus() != 0)
		{
			System.out.println("End of mib reached");
			synchronized(session)
			{
				session.notify();
			}
			return;
		}
		
		//
		// Passed the checks so lets get the first varbind and
		// print out it's value
		//
		SnmpVarBind vb = pdu.getVarBindAt(0);
		if(vb.getValue().typeId() == SnmpEndOfMibView.ASNTYPE ||
		   (m_stopAt != null && m_stopAt.compare(vb.getName()) < 0))
		{
			System.out.println("End of mib reached");
			synchronized(session)
			{
				session.notify();
			}
			return;
		}
		
		System.out.println(vb.getName().toString() + ": " + vb.getValue().toString());
		
		//
		// make the next pdu
		//
		SnmpVarBind[] vblist  = { new SnmpVarBind(vb.getName()) };
		SnmpPduRequest newReq = new SnmpPduRequest(SnmpPduPacket.GETNEXT, vblist);
		newReq.setRequestId(SnmpPduPacket.nextSequence());
		
		session.send(newReq);
	}

