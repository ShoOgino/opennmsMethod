    @Test
    public void testBuiltCalendarReport() {

        long oneHundred = 100;
        Day day;
        
        try {
            calendarAvailabilityCalculator.setPeriodEndDate(m_calendar.getTime());
            calendarAvailabilityCalculator.setLogoURL("wahtever");
            calendarAvailabilityCalculator.setCalendar(m_calendar);
            calendarAvailabilityCalculator.setReportFormat("PDF");
            calendarAvailabilityCalculator.setMonthFormat("calendar");
            calendarAvailabilityCalculator.setCategoryName("Network Interfaces");

			calendarAvailabilityCalculator.calculate();
            Report report = calendarAvailabilityCalculator.getReport();
            
            Assert.assertNotNull("report", report);

            Assert.assertNotNull("report categories", report.getCategories());
            Categories categories = report.getCategories();

            Assert.assertEquals("category count", 1, categories.getCategoryCount());
            Category category = categories.getCategory(0);

            Assert.assertEquals("category node count", 2, category.getNodeCount());
            Assert.assertEquals("category ip address count", 3,
                         category.getIpaddrCount());
            Assert.assertEquals("category service count", 3, category.getServiceCount());

            // Section calSection = getSectionByName(category, "LastMonthsDailyAvailability");

            // First four days in month are invisible for US...

            day = getCalSectionDay(category,"LastMonthsDailyAvailability",0,0);
            Assert.assertNotNull("day 0,0 object", day);
            Assert.assertFalse("day 0,0 visibility", day.getVisible());
            
            day = getCalSectionDay(category,"LastMonthsDailyAvailability",0,1);
            Assert.assertNotNull("day 0,1 object", day);
            Assert.assertFalse("day 0,1 visibility", day.getVisible());
            
            day = getCalSectionDay(category,"LastMonthsDailyAvailability",0,2);
            Assert.assertNotNull("day 0,2 object", day);
            Assert.assertFalse("day 0,2 visibility", day.getVisible());
            
            day = getCalSectionDay(category,"LastMonthsDailyAvailability",0,4);
            Assert.assertNotNull("day 0,4 object", day);
            Assert.assertFalse("day 0,4 visibility", day.getVisible());

            day = getCalSectionDay(category,"LastMonthsDailyAvailability",0,5);
            Assert.assertNotNull("day 0,5 object", day);
            Assert.assertEquals("day 0,5 percentage value", oneHundred, day.getPctValue(), 0);
            Assert.assertTrue("day 0,5 visibility", day.getVisible());
            Assert.assertEquals("day 0,5 date", 1,day.getDate());

            day = getCalSectionDay(category,"LastMonthsDailyAvailability",0,6);
            Assert.assertNotNull("day 0,6 object", day);
            Assert.assertEquals("day 0,6 percentage value", 99.3056, fourDec(day.getPctValue()), 0);
            Assert.assertTrue("day 0,6 visibility", day.getVisible());
            Assert.assertEquals("day 0,6 date", 2,day.getDate());

            day = getCalSectionDay(category,"LastMonthsDailyAvailability",1,0);
            Assert.assertNotNull("day 1,0 object", day);
            Assert.assertEquals("day 1,0 percentage value", 97.2454, fourDec(day.getPctValue()), 0);
            Assert.assertTrue("day 1,0 visibility", day.getVisible());
            Assert.assertEquals("day 1,0 date", 3,day.getDate());

            day = getCalSectionDay(category,"LastMonthsDailyAvailability",1,1);
            Assert.assertNotNull("day 1,1 object", day);
            Assert.assertEquals("day 1,1 percentage value", 99.3056, fourDec(day.getPctValue()), 0);
            Assert.assertTrue("day 1,1 visibility", day.getVisible());
            Assert.assertEquals("day 1,1 date", 4,day.getDate());

            day = getCalSectionDay(category,"LastMonthsDailyAvailability",1,2);
            Assert.assertNotNull("day 1,2 object", day);
            Assert.assertEquals("day 1,2 percentage value", 99.3056, fourDec(day.getPctValue()), 0);
            Assert.assertTrue("day 1,2 visibility", day.getVisible());
            Assert.assertEquals("day 1,2 date", 5,day.getDate());
            
        } catch (Exception e) {
            throw new UndeclaredThrowableException(e);
        }
  
    }

