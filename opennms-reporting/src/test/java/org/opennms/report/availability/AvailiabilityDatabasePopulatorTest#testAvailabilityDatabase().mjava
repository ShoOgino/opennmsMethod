    @Test
    public void testAvailabilityDatabase() {
        
        List<OnmsNode> nodes = m_nodeDao.findAll();
        ListIterator<OnmsNode> cleanNodes = nodes.listIterator();
        while (cleanNodes.hasNext()) {
            System.err.println("NODE "+ cleanNodes.next().toString());
        }
        List<OnmsIpInterface> ifs = m_ipInterfaceDao.findAll();
        ListIterator<OnmsIpInterface> cleanIf = ifs.listIterator();
        while (cleanIf.hasNext()) {
            System.err.println("INTERFACE "+ cleanIf.next().toString());
        }
        Assert.assertEquals("node DB count", 2, m_nodeDao.countAll());
        Assert.assertEquals("service DB count", 3, m_serviceTypeDao.countAll());
        Assert.assertEquals("IP interface DB count", 3, m_ipInterfaceDao.countAll());
        Assert.assertEquals("outages DB Count",6 ,m_outageDao.countAll());
        
        

            try {
                DataSourceFactory.init();
                m_availConn = DataSourceFactory.getInstance().getConnection();
                Statement stmt = m_availConn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,
                                                     ResultSet.CONCUR_READ_ONLY);
                ResultSet srs = stmt.executeQuery("SELECT ifServices.serviceid, service.servicename FROM ifServices, ipInterface, node, " + "service WHERE ((ifServices.nodeid = 1 )" + 
                "AND (ifServices.ipaddr = '192.168.100.1') AND ipinterface.ipaddr = '192.168.100.1' AND ipinterface.isManaged ='M' AND " + 
                "(ifServices.serviceid = service.serviceid) AND (ifservices.status = 'A')) AND node.nodeid = 1 AND node.nodetype = 'A'");
//                ResultSet srs = stmt.executeQuery("SELECT ipInterface.ipaddr, ipInterface.nodeid FROM ipInterface WHERE ipInterface.ipaddr = '192.168.100.1'" );
                Assert.assertTrue("interface results for 192.168.100.2", srs.next());
                Assert.assertEquals(1 ,srs.getInt(1));
            } catch (Exception e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
                fail("unable to execute SQL");
            } finally {
                try {
                    m_availConn.close();
                } catch (SQLException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
            }
        
        
//        Assert.assertEquals("node DB count", 2, m_db.countRows("select * from node"));
//        Assert.assertEquals("service DB count", 3,
//                     m_db.countRows("select * from service"));
//        Assert.assertEquals("ipinterface DB count", 3,
//                     m_db.countRows("select * from ipinterface"));
//        Assert.assertEquals("interface services DB count", 3,
//                     m_db.countRows("select * from ifservices"));
//        // Assert.assertEquals("outages DB count", 3, m_db.countRows("select * from
//        // outages"));
//        Assert.assertEquals(
//                     "ip interface DB count where ipaddr = 192.168.100.1",
//                     1,
//                     m_db.countRows("select * from ipinterface where ipaddr = '192.168.100.1'"));
//        Assert.assertEquals(
//                     "number of interfaces returned from IPLIKE",
//                     3,
//                     m_db.countRows("select * from ipinterface where iplike(ipaddr,'192.168.100.*')"));
    }

