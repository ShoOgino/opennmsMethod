    /**
     * Initialise the endTime, last Months end time and number of days in the
     * last month.
     */
    private void initialiseInterval(Calendar calendar, String startMonth,
            String startDate, String startYear) {
        org.apache.log4j.Category log = ThreadCategory.getInstance(this.getClass());

        int month = Integer.parseInt(startMonth);
        int day = Integer.parseInt(startDate);
        int year = Integer.parseInt(startYear);
        // int month = calendar.get(Calendar.MONTH);
        // int day = calendar.get(Calendar.DAY_OF_MONTH);
        // int year = calendar.get(Calendar.YEAR);
        
        // Set m_endTime to 23:59 on the day prior to that 
        // specified by year month day
        
        calendar.set(year, month, day - 1, 23, 59, 59); // Set the end Time
        m_endTime = calendar.getTime().getTime();

        calendar.add(Calendar.YEAR, -1);
        LAST_YEAR_ROLLING_WINDOW = m_endTime - calendar.getTime().getTime();
        m_12MonthsBack = m_endTime - LAST_YEAR_ROLLING_WINDOW;
        
        //m_12MonthsBack is now 1 year prior to m_endTime

        calendar = new GregorianCalendar();
        calendar.setTime(new java.util.Date(m_12MonthsBack));
        month = calendar.get(Calendar.MONTH);
        day = calendar.get(Calendar.DAY_OF_MONTH);
        year = calendar.get(Calendar.YEAR);
        
        // day is discarded and m_12Months back is now reset to 
        // the first day of the month, twelve months ago.
        // The start day has therefore become the first of the month
        
        calendar.set(year, month, 1, 0, 0, 0); // Set the end Time
        m_12MonthsBack = calendar.getTime().getTime();

        if (log.isDebugEnabled()) {
            log.debug("last Year " + new java.util.Date(m_12MonthsBack));
            log.debug("End Year " + new java.util.Date(m_endTime));
            log.debug("Rolling window of the last year "
                    + LAST_YEAR_ROLLING_WINDOW);
        }
        
        // Create lastMonthCalendar and initialise it to the end period of
        // the report using m_end_time
        
        Calendar lastMonthCalendar = new GregorianCalendar();
        java.util.Date lastMonthDate = new java.util.Date(
                                                          new Double(
                                                                     m_endTime).longValue());
        lastMonthCalendar.setTime(lastMonthDate);
        
        
        month = lastMonthCalendar.get(Calendar.MONTH) - 1;
        year = lastMonthCalendar.get(Calendar.YEAR);
        
        // now reset lastMonthCalendar to the first of the month prior to end 
        // period of the report
        
        lastMonthCalendar.set(year, month, 1, 0, 0, 0);

        // Number of days in the last month
        m_daysInLastMonth = getDaysForMonth(lastMonthCalendar.getTime().getTime());

        // Set the end time of the last full month prior to the report end date 
        lastMonthCalendar.set(year, month, m_daysInLastMonth, 23, 59, 59);
        m_lastMonthEndTime = lastMonthCalendar.getTime().getTime();
    }

