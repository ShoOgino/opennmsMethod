	/**
     * Last N days daily availability.
     * 
     * @param days
     *            Number of days for which the availability computations are
     *            made.
     * @param endTime
     *            End time
     * @param catSections
     *            Castors sections
     * @param label
     *            Section name in the xml
     * @param descr
     *            Section descr.
     * @param sectionName
     *            Section name
     */
    private void lastNDaysCalDailyAvailability(int days, long endTime, CatSections catSections, String label, String descr, String sectionName) {
        ThreadCategory.setPrefix(LOG4J_CATEGORY);
        org.apache.log4j.Category log = ThreadCategory.getInstance(this.getClass());
        if (log.isDebugEnabled())
            log.debug("Inside lastNDaysDailyAvailability");
        int numdays = 0;
	    CalendarTableBuilder calBuilder = new CalendarTableBuilder(endTime);
        TreeMap treeMap = new TreeMap();
        SimpleDateFormat fmt = new SimpleDateFormat("dd MMM, yyyy");
        String periodEnd = fmt.format(new java.util.Date(endTime));
        String periodFrom = "";
        while (numdays++ < days) {
            if (log.isDebugEnabled())
                log.debug("Computing for " + new Date(endTime));
            int serviceCount = 0;
            long outage = 0;
            //
            // get the outage and service count.
            //
            ListIterator listIter = m_nodes.listIterator();
            while (listIter.hasNext()) {
                Node node = (Node) listIter.next();
                outage += node.getOutage(endTime, ROLLING_WINDOW);
                serviceCount += node.getServiceCount();
            }
            double percentAvail;
            if (serviceCount > 0){
                
                log.debug("LOOK: calculating percentAvail using outage " + outage + " service count " + serviceCount + " ROLLING_WINODW " + ROLLING_WINDOW + " endTime " + endTime);
                percentAvail = 100.0 * (1 - (outage * 1.0) / (1.0 * serviceCount * ROLLING_WINDOW));
        }
            else
                percentAvail = 100.0;

            //need a double object in here
			
			treeMap.put(new Date(endTime), new Double (percentAvail));
                        Date nicedate = new Date(endTime);
                        log.debug("Inserting " + percentAvail + " into " + nicedate);

            periodFrom = fmt.format(new java.util.Date(endTime));
            endTime -= ROLLING_WINDOW;
        }

        Set keyDates = treeMap.keySet();
        Iterator iter = keyDates.iterator();
        int dateSlot = 0;
		while (iter.hasNext()) {
			Date key = (Date) iter.next();
            Double percent = (Double) treeMap.get(key);
                        log.debug("Inserting value " + percent.doubleValue() + " into date slot " + dateSlot);
			dateSlot++;
                        log.debug("Inserting value " + percent.doubleValue() + " into date slot " + dateSlot);
			calBuilder.setPctValue(dateSlot, percent.doubleValue());
		}
		
		Section section = new Section();
        section.setCalendarTable(calBuilder.getTable());
        section.setSectionName(sectionName); // "LastMonthsDailyAvailability");
        section.setSectionTitle(label);
        section.setSectionDescr(descr);
        section.setPeriod(periodFrom + " to " + periodEnd);
        section.setSectionIndex(m_sectionIndex);
        m_sectionIndex++;
        catSections.addSection(section);
        log.debug("Leaving lastNDaysCalDailyAvailability");
		
		}

