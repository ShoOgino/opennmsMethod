    /**
     * <p>run</p>
     */
    @Override
    public void run() {

        LOG.debug("run: getting inventory report on Date [{}] for key [{}]. Requested by User: {}on Date {}", theDate, theField, user, reportRequestDate.toString());
        ReportRenderer renderer;
        calculator.setReportRequestDate(reportRequestDate);
        calculator.setTheDate(theDate);
        calculator.setUser(user);
        calculator.setTheField(theField);
        
        if (reportFormat.compareTo("pdftype") == 0){
            LOG.debug("run: generating pdf is still not supported :( sending xml");
            
            renderer = m_nullReportRenderer;
        } else {
            LOG.debug("runRancidListReport generating html");
            renderer =  m_htmlReportRenderer;
        }

        try {            
            calculator.calculate();
            calculator.writeXML();

            String outputFile = calculator.getOutputFileName();
            LOG.debug("Written Configuration Report as XML to {}", outputFile);
            renderer.setInputFileName(outputFile);
            LOG.debug("rendering XML {} as {}", outputFile, renderer.getOutputFileName());
            renderer.render();
            ReportMailer mailer = new ReportMailer(
                                                   reportEmail,
                                                   renderer.getBaseDir()
                                                           + renderer.getOutputFileName(), "OpenNMS Inventory Report");
            mailer.send();
        } catch (InventoryCalculationException ce) {
            LOG.error("Unable to calculate report data ", ce);
        } catch (ReportRenderException re) {
            LOG.error("Unable to render report ", re);
        } catch (IOException ioe) {
            LOG.error("Unable to render report ", ioe);
        }
            

/*
            log().debug("InventoryService runNodeBaseInventoryReport object filled");
            SimpleDateFormat fmt = new SimpleDateFormat("yyyyMMddHHmmss");
            String datestamp = fmt.format(new java.util.Date()) ;
            String xmlFileName = ConfigFileConstants.getHome() + "/share/reports/NODEINVENTORY" + datestamp + ".xml";

            // Generate source XML
            FileWriter writer = new FileWriter(xmlFileName);
            Marshaller marshaller = new Marshaller(writer);
            marshaller.setSuppressNamespaces(true);
            marshaller.marshal(rnbi);
            writer.close();
            log().debug("runNodeBaseInventoryReport marshal done");

            if (reportFormat.compareTo("pdftype") == 0){

                log().debug("runNodeBaseInventoryReport generating pdf is still not supported :( sending xml");
                log().debug("runNodeBaseInventoryReport xml sending email");
                ReportMailer mailer = new ReportMailer(reportEmail,xmlFileName,"OpenNMS Inventory Report");
                mailer.send();


            } else {

                log().debug("runNodeBaseInventoryReport generating html");

                String htmlFileName=ConfigFileConstants.getHome() + "/share/reports/NODEINVENTORY" + datestamp + ".html";

                File file = new File(htmlFileName);
                FileOutputStream hmtlFileWriter = new FileOutputStream(file);
                PDFWriter htmlWriter = new PDFWriter(ConfigFileConstants.getFilePathString() + "/rws-nbinventoryreport.xsl");
                File fileR = new File(xmlFileName);
                Reader fileReader = new InputStreamReader(new FileInputStream(fileR), "UTF-8");
                htmlWriter.generateHTML(fileReader, hmtlFileWriter);
                log().debug("runNodeBaseInventoryReport html sending email");
                ReportMailer mailer = new ReportMailer(reportEmail,htmlFileName,"OpenNMS Inventory Report");
                mailer.send();

            }
        }
        catch (Throwable e){
            log().debug("InventoryService runNodeBaseInventoryReport exception "+ e.getMessage() );
        }
            */

    }

