    /**
     * {@inheritDoc}
     *
     * Poll the specified address for DHCP service availability.
     */
    @Override
    public PollStatus poll(MonitoredService svc, Map<String, Object> parameters) {
        NetworkInterface<InetAddress> iface = svc.getNetInterface();

        // Get interface address from NetworkInterface
        //
        if (iface.getType() != NetworkInterface.TYPE_INET)
            throw new NetworkInterfaceNotSupportedException("Unsupported interface type, only TYPE_INET currently supported");

        // Process parameters
        //

        // Retries
        //
        int retry = ParameterMap.getKeyedInteger(parameters, "retry", DEFAULT_RETRY);
        int timeout = ParameterMap.getKeyedInteger(parameters, "timeout", DEFAULT_TIMEOUT);

        // Get interface address from NetworkInterface
        //
        InetAddress ipv4Addr = (InetAddress) iface.getAddress();

            LOG.debug("DhcpMonitor.poll: address: {} timeout: {} retry: {}", ipv4Addr, timeout,  retry);

        PollStatus serviceStatus = PollStatus.unavailable();
        long responseTime = -1;
        try {
            // Dhcpd.isServer() returns the response time in milliseconds
            // if the remote box is a DHCP server or -1 if the remote
            // box is NOT a DHCP server.
            // 
            responseTime = Dhcpd.isServer(ipv4Addr, (long) timeout, retry);
            if (responseTime >= 0) {
                serviceStatus = PollStatus.available((double)responseTime);
            }
        } catch (IOException e) {
            e.fillInStackTrace();
            DhcpMonitor.LOG.debug("An I/O exception occured during DHCP polling", e);
            serviceStatus = PollStatus.unavailable("An I/O exception occured during DHCP polling");
        } catch (Throwable e) {
            e.fillInStackTrace();
            DhcpMonitor.LOG.debug("An unexpected exception occured during DHCP polling", e);
            serviceStatus = PollStatus.unavailable("An unexpected exception occured during DHCP polling");
        }

        //
        // return the status of the service
        //
        return serviceStatus;
    }

