    /**
     * <p>onStart</p>
     */
    @Override
    protected void onStart() {
        boolean relayMode = false;
        LOG.debug("start: DHCP client daemon starting...");

        // Only allow start to be called once.
        if (m_worker != null && m_worker.isAlive()) {
            throw new IllegalStateException("The server is already running");
        }

        // Unless the worker has died, then stop and continue
        if (m_worker != null) {
            stop();
        }

        // the client list
        m_clients = Collections.synchronizedList(new LinkedList<Client>());

        // load the dhcpd configuration
        DhcpdConfigFactory dFactory = null;
        try {
            DhcpdConfigFactory.reload();
            dFactory = DhcpdConfigFactory.getInstance();
        } catch (Exception ex) {
            LOG.error("Failed to load dhcpd configuration", ex);
            throw new UndeclaredThrowableException(ex);
        }

        // open the server
        //
        try {
            LOG.debug("start: listening on TCP port {} for incoming client requests.", dFactory.getPort());
            m_server = new ServerSocket(dFactory.getPort(), 0, InetAddressUtils.addr("127.0.0.1"));
        } catch (IOException ex) {
            if (ex instanceof java.net.BindException) {
                LOG.error("Failed to listen on DHCP port, perhaps something else is already listening?", ex);
                LOG.error("Failed to listen on DHCP port, perhaps something else is already listening?", ex);
            } else {
                LOG.error("Failed to initialize DHCP socket", ex);
            }
            throw new UndeclaredThrowableException(ex);
        }

        // see if we have a valid relay address
        String myIpStr = DhcpdConfigFactory.getInstance().getMyIpAddress();
        LOG.debug("Checking string \"{}\" to see if we have an IP address", myIpStr);
        if (myIpStr != null &&  !myIpStr.equals("") && !myIpStr.equalsIgnoreCase("broadcast")) {
            try {
                InetAddressUtils.toIpAddrBytes(myIpStr);
                relayMode = true;
            } catch (IllegalArgumentException e) {
                LOG.warn("Invalid format for IP address: {}", myIpStr);
            }
        }
        LOG.debug("Setting relay mode {}", relayMode);
        
        // open the receiver socket(s)
        if(!relayMode || (dFactory.getExtendedMode() != null && dFactory.getExtendedMode().equalsIgnoreCase("true"))) {
            try {
                LOG.debug("start: starting receiver thread for port 68");
                m_listener = new Receiver(m_clients);
                m_listener.start();
            } catch (IOException ex) {
                try {
                    m_server.close();
                } catch (IOException ex1) {
                }
                throw new UndeclaredThrowableException(ex);
            }
        }

        if(relayMode) {
            try {
                LOG.debug("start: starting receiver thread for port 67");
                m_listener2 = new Receiver2(m_clients);
                m_listener2.start();
            } catch (IOException ex) {
                try {
                    m_server.close();
                } catch (IOException ex1) {
                }
                throw new UndeclaredThrowableException(ex);
            }
        }

        m_worker = new Thread(this, getName());
        m_worker.start();
	}

