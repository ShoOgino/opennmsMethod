    /**
     * Returns a DHCP DISCOVER, INFORM, or REQUEST message that can be sent to
     * the DHCP server. DHCP server should respond with a DHCP OFFER, ACK, or
     * NAK message in response..
     * 
     * @param (InetAddress) addr The address to poll
     * @param (byte) mType The type of DHCP message to send (DISCOVER, INFORM,
     *        or REQUEST)
     * @return The message to send to the DHCP server.
     */
    private static Message getPollingRequest(InetAddress addr, byte mType) {
        int xid = 0;
        synchronized (Poller.class) {
            xid = ++m_nextXid;
        }
        DHCPPacket messageOut = new DHCPPacket();
        byte[] rawIp = addr.getAddress();
        // if targetOffset = true, we don't want to REQUEST the DHCP server's
        // own IP, so change it by 1, trying to avoid the subnet address
        // and the broadcast address.
        if (targetOffset) {
            if (rawIp[3] % 2 == 0 && rawIp[3] != 0) {
                --rawIp[3];
            } else {
                ++rawIp[3];
            }
        }
        // fill DHCPMessage object
        //
        messageOut.setOp((byte) 1);
        messageOut.setHtype((byte) 1);
        messageOut.setHlen((byte) 6);
        messageOut.setXid(xid);
        messageOut.setSecs((short) 0);
        messageOut.setChaddr(s_hwAddress); // set hardware address
        if (relayMode) {
            messageOut.setHops((byte) 1);
            messageOut.setGiaddr(InetAddressUtils.getInetAddress(s_myIpAddress)); // set relay address for replies
        } else {
            messageOut.setHops((byte) 0);
            messageOut.setFlags(BROADCAST_FLAG);
        }

        messageOut.setOption(DHCPOption.newOptionAsByte(DHCPConstants.DHO_DHCP_MESSAGE_TYPE, mType));
        if (mType == DHCPConstants.DHCPREQUEST) {
            if (reqTargetIp) {
                messageOut.setOption(DHCPOption.newOptionAsInetAddress((byte)DHCPConstants.DHO_DHCP_REQUESTED_ADDRESS, InetAddressUtils.getInetAddress(rawIp)));
                messageOut.setCiaddrRaw(rawIp);
            } else {
                messageOut.setOption(DHCPOption.newOptionAsInetAddress(DHCPConstants.DHO_DHCP_REQUESTED_ADDRESS, InetAddressUtils.getInetAddress(s_requestIpAddress)));
                messageOut.setCiaddrRaw(s_requestIpAddress);
            }
        }
        if (mType == DHCPConstants.DHCPINFORM) {
            messageOut.setOption(DHCPOption.newOptionAsInetAddress(DHCPConstants.DHO_DHCP_REQUESTED_ADDRESS, InetAddressUtils.getInetAddress(s_myIpAddress)));
            messageOut.setCiaddrRaw(s_myIpAddress);
        }

        return new Message(addr, messageOut);
    }

