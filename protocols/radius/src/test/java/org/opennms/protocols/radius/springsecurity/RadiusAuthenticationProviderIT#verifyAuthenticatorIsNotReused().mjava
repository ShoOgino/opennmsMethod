    // Ensure that whatever the first response was, it is not re-used for another user
    // See NMS-10212
    @Test
    public void verifyAuthenticatorIsNotReused() {
        final RadiusAuthenticationProvider provider = new RadiusAuthenticationProvider("localhost", SHARED_SECRET);
        provider.setAuthTypeClass(new MSCHAPv2Authenticator());

        // Verify that authenticating with an existing user works
        final UsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(USER, PASSWORD);
        provider.retrieveUser(USER, token);

        // Verify that authenticating without an existing user also works
        // This means, that the access should be denied. See NMS-10212
        try {
            provider.retrieveUser(USER, new UsernamePasswordAuthenticationToken(USER, PASSWORD_WRONG));
            Assert.fail("Expected an AuthenticationException but did not receive one. Failing..");
        } catch (AuthenticationException ex) {
            // expected Exception
        }
    }

