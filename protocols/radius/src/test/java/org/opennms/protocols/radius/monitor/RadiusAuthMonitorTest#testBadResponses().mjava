	@Test
	public void testBadResponses() throws Exception {
		mockSrv.start(true,false);
		
		final Map<String, Object> m = new ConcurrentSkipListMap<String, Object>();

		final ServiceMonitor monitor = new RadiusAuthMonitor();
		final MonitoredService svc = MonitorTestUtils.getMonitoredService(99, InetAddressUtils.addr("127.0.0.1"), "RADIUS");

        m.put("user", "testing");
        m.put("password", "12");
        m.put("retry", "1");
        m.put("secret", "testing123");
        m.put("authtype", "chap");
        final PollStatus status = monitor.poll(svc, m);
        MockUtil.println("Reason: "+status.getReason());
        assertEquals(PollStatus.SERVICE_UNAVAILABLE, status.getStatusCode());
		MockLogAppender.assertLogMatched(Level.DEBUG, "response returned, but request was not accepted");
	}

