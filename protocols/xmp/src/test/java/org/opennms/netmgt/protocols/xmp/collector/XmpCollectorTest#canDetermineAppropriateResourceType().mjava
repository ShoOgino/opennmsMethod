    @Test
    public void canDetermineAppropriateResourceType() throws CollectionException {
        NodeLevelResource nodeLevelResource = new NodeLevelResource(1);

        // Define the resource type
        ResourceType resourceType = new ResourceType();
        resourceType.setName("rt");
        resourceType.setLabel("rt label");
        resourceType.setResourceLabel("${instance}");
        StorageStrategy storageStrategy = new StorageStrategy();
        storageStrategy.setClazz(IndexStorageStrategy.class.getCanonicalName());
        resourceType.setStorageStrategy(storageStrategy);
        PersistenceSelectorStrategy persistenceSelectorStrategy = new PersistenceSelectorStrategy();
        persistenceSelectorStrategy.setClazz(PersistAllSelectorStrategy.class.getCanonicalName());
        resourceType.setPersistenceSelectorStrategy(persistenceSelectorStrategy);

        ResourceTypesDao resourceTypesDao = mock(ResourceTypesDao.class);
        when(resourceTypesDao.getResourceTypeByName(resourceType.getName())).thenReturn(resourceType);
        xmpCollector.setResourceTypesDao(resourceTypesDao);

        // If the nodeTypeName is set to "node" it should always return a node level resource
        assertThat(xmpCollector.getResource(nodeLevelResource, CollectionResource.RESOURCE_TYPE_NODE, null, "instance"), instanceOf(NodeLevelResource.class));
        assertThat(xmpCollector.getResource(nodeLevelResource, CollectionResource.RESOURCE_TYPE_NODE, "some-resource", "instance"), instanceOf(NodeLevelResource.class));
        // If a resource-type is set, it should always return a generic type resource
        assertThat(xmpCollector.getResource(nodeLevelResource, null, "rt", "instance"), instanceOf(GenericTypeResource.class));
        // Otherwise, falls back to an instance level resource
        assertThat(xmpCollector.getResource(nodeLevelResource, null, null, "instance"), instanceOf(InterfaceLevelResource.class));
    }

