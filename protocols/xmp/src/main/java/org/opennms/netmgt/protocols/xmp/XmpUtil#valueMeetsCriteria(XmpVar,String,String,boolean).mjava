    private static boolean valueMeetsCriteria(XmpVar replyVar, String valueOperator, String valueOperand, boolean caseSensitive)
            throws XmpUtilException {
        Pattern valueRegex = null;
        if (MATCHES.equals(valueOperator)) {
            try {
                int flags = 0;
                if (!caseSensitive) {
                    flags |= Pattern.CASE_INSENSITIVE;
                }
                valueRegex = Pattern.compile(valueOperand, flags);
            } catch (final PatternSyntaxException e) {
            	LOG.debug("Unable to initialize regular expression.", e);
            }
        }

        if ((valueRegex != null) && valueRegex.matcher(replyVar.getValue()).matches()) {
            LOG.debug("handleScalarQuery: Response value |{}| matches, returning true", replyVar.getValue());
            return true;
        } else if ((MATCHES.equals(valueOperator)) && ((valueRegex == null) || ("".equals(valueRegex)))) {
                LOG.debug("handleScalarQuery: Doing regex match but regex is null or empty, considering value |{}| a match!", replyVar.getValue());
            return true;
        } else if (! MATCHES.equals(valueOperator)) {
            if (valueOperand == null) {
                    LOG.debug("valueMeetsCriteria: operand is null, so any non-error reply will match");
                if (replyVar.getValue() != null) {
                        LOG.debug("valueMeetsCriteria: non-null reply value |{}| considered a match", replyVar.getValue());
                    return true;
                } else {
                        LOG.debug("valueMeetsCriteria: null reply NOT considered a match");
                    return false;
                }
            } else if (valueOperand.matches("^-?[0-9]+$")) {
                    LOG.debug("valueMeetsCriteria: operand {} looks like an integer, treating with BigInteger", valueOperand);
                BigInteger intOperand, intValue;
                try {
                    intValue = new BigInteger(replyVar.getValue());
                    intOperand = new BigInteger(valueOperand);
                } catch (NumberFormatException nfe) {
                    LOG.error("Failed to parse operand {} or observed value {} as a BigInteger, giving up", valueOperand, replyVar.getValue());
                    LOG.info(nfe.getMessage());
                    throw new XmpUtilException("Operand '" + valueOperand + "' or observed value '" + replyVar.getValue() + "' is a malformed integer");
                }
                if (LESS_THAN.equals(valueOperator)) {
                    return (intValue.compareTo(intOperand) < 0);
                } else if (GREATER_THAN.equals(valueOperator)) {
                    return (intValue.compareTo(intOperand) > 0);
                } else if (LESS_THAN_EQUALS.equals(valueOperator)) {
                    return (intValue.compareTo(intOperand) <= 0);
                } else if (GREATER_THAN_EQUALS.equals(valueOperator)) {
                    return (intValue.compareTo(intOperand) >= 0);
                } else if (EQUALS.equals(valueOperator)) {
                    return (intValue.compareTo(intOperand) == 0);
                } else if (NOT_EQUAL.equals(valueOperator)) {
                    return (intValue.compareTo(intOperand) != 0);
                } else {
                    LOG.error("Unknown value operator '{}', giving up", valueOperator);
                    throw new XmpUtilException("Operator '" + valueOperator + "' unknown");
                }
            } else if (valueOperand.matches("^-?[0-9]+([,.]?[0-9]+)$")) {
                    LOG.debug("valueMeetsCriteria: operand {} looks like a float, treating with float", valueOperand);
                float floatValue, floatOperand;
                try {
                    floatValue = Float.parseFloat(valueOperand);
                    floatOperand = Float.parseFloat(valueOperand);
                } catch (NumberFormatException nfe) {
                    LOG.error("Failed to parse operand {} or observed value {} as a Float, giving up", valueOperand, replyVar.getValue());
                    LOG.info(nfe.getMessage());
                    throw new XmpUtilException("Operand '" + valueOperand + "' or observed value '" + replyVar.getValue() + "' is a malformed floating-point number");
                }
                if (LESS_THAN.equals(valueOperator)) {
                    return (floatValue < floatOperand);
                } else if (GREATER_THAN.equals(valueOperator)) {
                    return (floatValue > floatOperand);
                } else if (LESS_THAN_EQUALS.equals(valueOperator)) {
                    return (floatValue <= floatOperand);
                } else if (GREATER_THAN_EQUALS.equals(valueOperator)) {
                    return (floatValue >= floatOperand);
                } else if (EQUALS.equals(valueOperator)) {
                    return (floatValue == floatOperand);
                } else if (NOT_EQUAL.equals(valueOperator)) {
                    return (floatValue != floatOperand);
                } else {
                    LOG.error("Unknown value operator '{}', giving up", valueOperator);
                    throw new XmpUtilException("Value operator '" + valueOperator + "' unknown");
                }
            } else {
                    LOG.debug("valueMeetsCriteria: operand {} looks non-numeric, treating with String", valueOperand);
                if (!EQUALS.equals(valueOperator)) {
                    LOG.error("Value operator '{}' does not apply for non-numeric value operand '{}', giving up", valueOperator, valueOperand);
                    throw new XmpUtilException("Value operator '" + valueOperator + "' does not apply for non-numeric value operand '" + valueOperand + "'");
                }
                if (caseSensitive) {
				    return valueOperand.equals(replyVar.getValue());
				} else {
				    return valueOperand.equalsIgnoreCase(replyVar.getValue());
				}
            }
        } else {
        	if(LOG.isDebugEnabled()){
                LOG.debug("handleScalarQuery: Response value |{}| does not match for value operator |{}| and value operand |{}|, returning false", replyVar.getValue(), valueOperator, valueOperand);
                //FIXME do we really want to throw only when debugging is enabled?
                throw new XmpUtilException("Response value '" + replyVar.getValue() + "' does not match for value operator '" + valueOperator +"' and value operand '" + valueOperand +"'");
        	}
        }

        return false;
    }

