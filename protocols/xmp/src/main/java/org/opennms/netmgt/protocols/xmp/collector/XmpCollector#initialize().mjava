    /**
     * {@inheritDoc}
     *
     * initialize our XmpCollector with global parameters *
     */
    @Override
    public void initialize()
    {
        // initialize our data collection factory

        LOG.debug("initialize(params) called");

        try {
            XmpCollectionFactory.init();
        } catch (Throwable e) {
            LOG.error("initialize: XmpCollectionFactory failed to initialize");
            throw new UndeclaredThrowableException(e);
        }
        
        try {
            XmpPeerFactory.init();
        } catch (Throwable e) {
            LOG.error("initialize: XmpPeerFactory failed to initialize");
            throw new UndeclaredThrowableException(e);
        }

        // initialize authenUser, port, timeout, other parameters
        // want a xmp-config.xml for port, authenUser, timeout, etc.

        try {
            XmpConfigFactory.init();
        } catch (Throwable e) {
            LOG.error("initialize: config factory failed to initialize");
            throw new UndeclaredThrowableException(e);
        }

        if (m_resourceTypesDao == null) {
            m_resourceTypesDao = BeanUtils.getBean("daoContext", "resourceTypesDao", ResourceTypesDao.class);
        }

        // get our top-level object for our protocol config file,
        // xmp-config.xml, already parsed and ready to examine
        XmpConfig protoConfig = XmpConfigFactory.getInstance().getXmpConfig();

        if (protoConfig.hasPort())
            xmpPort = protoConfig.getPort();
        if (protoConfig.hasTimeout())
            timeout = protoConfig.getTimeout();

        // authenUser is optional; if it is present, it will
        // be non-null
        if (protoConfig.getAuthenUser() != null)
            authenUser = protoConfig.getAuthenUser();

        LOG.debug("initialize: authenUser '{}' port {}", authenUser, xmpPort);
        LOG.debug("initialize: keystore found? {}", sockopts.getKeystoreFound());

        return;

    } /* initialize() */

