    /**
     * This method queries the CIFS share.
     *
     * @param svc        the monitored service
     * @param parameters the parameter map
     * @return the poll status for this system
     */
    @Override
    public PollStatus poll(MonitoredService svc, Map<String, Object> parameters) {

        final String domain = resolveKeyedString(parameters, "domain", "");
        final String username = resolveKeyedString(parameters, "username", "");
        final String password = resolveKeyedString(parameters, "password", "");
        String mode = parameters.containsKey("mode") ? ((String) parameters.get("mode")).toUpperCase() : "PATH_EXIST";
        String path = parameters.containsKey("path") ? (String) parameters.get("path") : "";
        String smbHost = parameters.containsKey("smbHost") ? (String) parameters.get("smbHost") : "";
        final String folderIgnoreFiles = parameters.containsKey("folderIgnoreFiles") ? (String) parameters.get("folderIgnoreFiles") : "";

        // changing to Ip address of MonitoredService if no smbHost is given
        if ("".equals(smbHost)) {
            smbHost = svc.getIpAddr();
        }

        // Filename filter to give user the possibility to ignore specific files in folder for the folder check.
        SmbFilenameFilter smbFilenameFilter = new SmbFilenameFilter() {
            @Override
            public boolean accept(SmbFile smbFile, String s) throws SmbException {
                return !s.matches(folderIgnoreFiles);
            }
        };

        // Initialize mode with default as PATH_EXIST
        Mode enumMode = Mode.PATH_EXIST;

        try {
            enumMode = Mode.valueOf(mode);
        } catch (IllegalArgumentException exception) {
            logger.error("Mode '{}â€˜ does not exists. Valid candidates are {}", mode, modeCandidates);
            return PollStatus.unknown("Mode " + mode + " does not exists. Valid candidates are " + modeCandidates);
        }

        // Checking path parameter
        if (!path.startsWith("/")) {
            path = "/" + path;
            logger.debug("Added leading / to path.");
        }

        // Build authentication string for NtlmPasswordAuthentication: syntax: domain;username:password
        String authString = "";

        // Setting up authenticationString...
        if (domain != null && !"".equals(domain)) {
            authString += domain + ";";
        }

        authString += username + ":" + password;

        // ... and path
        String fullUrl = "smb://" + smbHost + path;

        logger.debug("Domain: [{}], Username: [{}], Password: [{}], Mode: [{}], Path: [{}], Authentication: [{}], Full Url: [{}]", new Object[]{domain, username, password, mode, path, authString, fullUrl});

        // Initializing TimeoutTracker with default values
        TimeoutTracker tracker = new TimeoutTracker(parameters, DEFAULT_RETRY, DEFAULT_TIMEOUT);

        BaseContext baseCtx = null;
        Properties jcifsProps = new Properties();
        String connectionTimeoutAsStr = Integer.toString(tracker.getConnectionTimeout());
        jcifsProps.setProperty("jcifs.smb.client.soTimeout", connectionTimeoutAsStr);
        jcifsProps.setProperty("jcifs.smb.client.connTimeout", connectionTimeoutAsStr);
        jcifsProps.setProperty("jcifs.smb.client.responseTimeout", connectionTimeoutAsStr);
        jcifsProps.setProperty("jcifs.smb.client.sessionTimeout", connectionTimeoutAsStr);
        Configuration jcifsConfig = null;
        try {
            jcifsConfig = new PropertyConfiguration(jcifsProps);
            baseCtx = new BaseContext(jcifsConfig);
        } catch (CIFSException cifse) {
            logger.warn("Unable to configure CIFS timeout properties due to {}. Using defaults.", cifse.getMessage());
            baseCtx = SingletonContext.getInstance();
        }
        CIFSContext authedCtx = baseCtx.withCredentials(new NtlmPasswordAuthenticator(domain, username, password));

        // Setting default PollStatus
        PollStatus serviceStatus = PollStatus.unknown();


        for (tracker.reset(); tracker.shouldRetry() && !serviceStatus.isAvailable(); tracker.nextAttempt()) {


            try {
                // Creating SmbFile object
                SmbFile smbFile = new SmbFile(fullUrl, authedCtx);
                // Setting the defined timeout
                smbFile.setConnectTimeout(tracker.getConnectionTimeout());
                // Does the file exists?
                boolean smbFileExists = smbFile.exists();

                switch (enumMode) {
                    case PATH_EXIST:
                        if (smbFileExists) {
                            serviceStatus = PollStatus.up();
                        } else {
                            serviceStatus = PollStatus.down("File " + fullUrl + " should exists but doesn't!");
                        }
                        break;
                    case PATH_NOT_EXIST:
                        if (!smbFileExists) {
                            serviceStatus = PollStatus.up();
                        } else {
                            serviceStatus = PollStatus.down("File " + fullUrl + " should not exists but does!");
                        }
                        break;
                    case FOLDER_EMPTY:
                        if (smbFileExists) {
                            if (smbFile.list(smbFilenameFilter).length == 0) {
                                serviceStatus = PollStatus.up();
                            } else {
                                serviceStatus = PollStatus.down("Directory " + fullUrl + " should be empty but isn't!");
                            }
                        } else {
                            serviceStatus = PollStatus.down("Directory " + fullUrl + " should exists but doesn't!");
                        }
                        break;
                    case FOLDER_NOT_EMPTY:
                        if (smbFileExists) {
                            if (smbFile.list(smbFilenameFilter).length > 0) {
                                serviceStatus = PollStatus.up();
                            } else {
                                serviceStatus = PollStatus.down("Directory " + fullUrl + " should not be empty but is!");
                            }
                        } else {
                            serviceStatus = PollStatus.down("Directory " + fullUrl + " should exists but doesn't!");
                        }
                        break;
                    default:
                        logger.warn("There is no implementation for the specified mode '{}'", mode);
                        break;
                }

            } catch (MalformedURLException exception) {
                logger.error("Malformed URL on '{}' with error: '{}'", smbHost, exception.getMessage());
                serviceStatus = PollStatus.down(exception.getMessage());
            } catch (SmbException exception) {
                logger.error("SMB error on '{}' with error: '{}'", smbHost, exception.getMessage());
                serviceStatus = PollStatus.down(exception.getMessage());
            }
        }

        return serviceStatus;
    }

