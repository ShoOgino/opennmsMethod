    /* (non-Javadoc)
     * @see java.net.URLConnection#connect()
     */
    @Override
    public void connect() throws IOException {
        if (m_connected) {
            return;
        }
        m_connected = true;
        if (url.getUserInfo() == null) {
            throw new IOException("User credentials required.");
        }
        JSch jsch = new JSch();
        try {
            // TODO: Experimental authentication handling using Private/Public keys
            // FIXME: We can include this property on the request object, for example:
            // <request>
            //   <parameter name='sftp.private-key.location' value='/opt/opennms/etc/private.key'/>
            // </request>
            // http://wiki.jsch.org/index.php?Manual%2FExamples%2FJschPubkeyAuthExample
            String prvkey = System.getProperty("sftp.private-key.location");
            if (prvkey != null) {
                jsch.addIdentity(prvkey);
            }
            int port = url.getPort() > 0 ? url.getPort() : url.getDefaultPort();
            String[] userInfo = url.getUserInfo().split(":");
            m_session = jsch.getSession(userInfo[0], url.getHost(), port);
            if (userInfo.length > 1) {
                m_session.setPassword(userInfo[1]);
            }
            Properties config = new Properties();
            config.put("StrictHostKeyChecking", "no");
            m_session.setConfig(config);
            m_session.setTimeout(DEFAULT_TIMEOUT);
            m_session.connect();
            m_channel = (ChannelSftp) m_session.openChannel("sftp");
            m_channel.connect();
        } catch (JSchException e) {
            disconnect();
            throw new IOException("Can't connect using " + url + " because " + e.getMessage());
        }
    }

