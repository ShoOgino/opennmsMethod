    @Override
    public Map<String, Object> getRuntimeAttributes(CollectionAgent agent, Map<String, Object> parameters) {
        final Map<String, Object> runtimeAttributes = new HashMap<>();

        // Construct the handler
        LOG.debug("getRuntimeAttributes: initializing XML collection handling using {} for collection agent {}", parameters, agent);
        String serviceName = ParameterMap.getKeyedString(parameters, "SERVICE", "XML");
        String handlerClass = ParameterMap.getKeyedString(parameters, "handler-class", "org.opennms.protocols.xml.collector.DefaultXmlCollectionHandler");
        XmlCollectionHandlerKey key = new XmlCollectionHandlerKey(serviceName, handlerClass);
        XmlCollectionHandler handler;
        try {
            handler = m_handlers.get(key);
        } catch (ExecutionException e) {
            throw new RuntimeException(e);
        }

        // Retrieve the XML Collection
        String collectionName = ParameterMap.getKeyedString(parameters, "collection", ParameterMap.getKeyedString(parameters, "xml-collection", null));
        if (collectionName == null) {
            throw new IllegalArgumentException("Parameter collection is required for the XML Collector!");
        }
        LOG.debug("getRuntimeAttributes: collecting XML data using collection {} for {}", collectionName, agent);
        XmlDataCollection collection = m_xmlCollectionDao.getDataCollectionByName(collectionName);
        if (collection == null) {
            throw new IllegalArgumentException("XML Collection " + collectionName +" does not exist.");
        }
        // Parse the collection attributes before adding it in the map
        runtimeAttributes.put(XML_DATACOLLECTION_KEY, parseCollection(collection, handler, agent, parameters));
        runtimeAttributes.put(RRD_REPOSITORY_PATH_KEY, m_xmlCollectionDao.getConfig().getRrdRepository());
        return runtimeAttributes;
    }

