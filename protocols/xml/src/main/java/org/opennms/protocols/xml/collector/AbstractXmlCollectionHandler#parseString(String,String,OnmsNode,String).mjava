    /**
     * Parses the string.
     *
     * <p>Valid placeholders are:</p>
     * <ul>
     * <li><b>ipaddr</b>, The Node IP Address</li>
     * <li><b>step</b>, The Collection Step in seconds</li>
     * <li><b>nodeId</b>, The Node ID</li>
     * <li><b>nodeLabel</b>, The Node Label</li>
     * <li><b>foreignId</b>, The Node Foreign ID</li>
     * <li><b>foreignSource</b>, The Node Foreign Source</li>
     * <li>Any asset property defined on the node.</li>
     * </ul>
     * 
     * @param reference the reference
     * @param unformattedString the unformatted string
     * @param node the node
     * @param ipAddress the IP address
     * @return the string
     * @throws IllegalArgumentException the illegal argument exception
     */
    protected String parseString(final String reference, final String unformattedString, final OnmsNode node, final String ipAddress) throws IllegalArgumentException {
        if (unformattedString == null)
            return null;
        String formattedString = unformattedString.replaceAll("[{](?i)(ipAddr|ipAddress)[}]", ipAddress);
        formattedString = formattedString.replaceAll("[{](?i)nodeId[}]", node.getNodeId());
        if (node.getLabel() != null)
            formattedString = formattedString.replaceAll("[{](?i)nodeLabel[}]", node.getLabel());
        if (node.getForeignId() != null)
            formattedString = formattedString.replaceAll("[{](?i)foreignId[}]", node.getForeignId());
        if (node.getForeignSource() != null)
            formattedString = formattedString.replaceAll("[{](?i)foreignSource[}]", node.getForeignSource());
        if (node.getAssetRecord() != null) {
            BeanWrapper wrapper = new BeanWrapperImpl(node.getAssetRecord());
            for (PropertyDescriptor p : wrapper.getPropertyDescriptors()) {
                Object obj = wrapper.getPropertyValue(p.getName());
                if (obj != null)
                    formattedString = formattedString.replaceAll("[{](?i)" + p.getName() + "[}]", obj.toString());
            }
        }
        if (formattedString.matches(".*[{].+[}].*"))
            throw new IllegalArgumentException("The " + reference + " " + formattedString + " contains unknown placeholders.");
        return formattedString;
    }

