    /**
     * Test parse string.
     *
     * @throws Exception the exception
     */
    @Test
    public void testParseString() throws Exception {
        AbstractXmlCollectionHandler handler = new AbstractXmlCollectionHandler() {
            @Override
            public XmlCollectionSet collect(CollectionAgent agent,
                    XmlDataCollection collection,
                    Map<String, Object> parameters)
                            throws CollectionException {
                return null;
            }

            @Override
            protected void processXmlResource(
                    XmlCollectionResource collectionResource,
                    AttributeGroupType attribGroupType) {
            }

            @Override
            protected void fillCollectionSet(String urlString,
                    Request request, CollectionAgent agent,
                    XmlCollectionSet collectionSet, XmlSource source)
                    throws Exception {
            }
        };
        OnmsNode node = new OnmsNode();
        node.setId(1);
        node.setLabel("mynode.local");
        OnmsAssetRecord asset = new OnmsAssetRecord();
        asset.setSerialNumber("1001");
        node.setAssetRecord(asset);
        Map<String, String> parameters = new HashMap<>();
        parameters.put("port", "80");
        String url = handler.parseString("URL", "http://{nodeLabel}:{parameter:port}/{ipAddress}/serial/{serialNumber}/{step}", node, "127.0.0.1", 300, parameters);
        Assert.assertEquals("http://mynode.local:80/127.0.0.1/serial/1001/300", url);
        String multiline = "<data>\n   <source label='{nodeLabel}'/>\n</data>";
        String xml = handler.parseString("Content", multiline, node, "127.0.0.1", 300, parameters);
        Assert.assertEquals("<data>\n   <source label='mynode.local'/>\n</data>", xml);
    }

