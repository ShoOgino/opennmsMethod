    /**
     * Executes collector test.
     *
     * @param nodeId the node id
     * @param ipAddress the IP address
     * @param xmlSampleFileName the XML sample file name
     * @param parameters the parameters
     * @param expectedFiles the expected amount of JRB files
     * @throws Exception the exception
     */
    public void executeCollectorTest(int nodeId, String ipAddress, String xmlSampleFileName, Map<String, Object> parameters, int expectedFiles) throws Exception {
        MockDocumentBuilder.setXmlFileName(xmlSampleFileName);

        CollectionAgent collectionAgent = EasyMock.createMock(CollectionAgent.class);
        EasyMock.expect(collectionAgent.getNodeId()).andReturn(nodeId).anyTimes();
        EasyMock.expect(collectionAgent.getHostAddress()).andReturn(ipAddress).anyTimes();
        EasyMock.expect(collectionAgent.getStorageDir()).andReturn(new File(Integer.toString(nodeId))).anyTimes();
        EasyMock.replay(collectionAgent);

        m_collector.initialize(collectionAgent, parameters);
        CollectionSet collectionSet = m_collector.collect(collectionAgent, m_eventProxy, parameters);
        m_collector.release(collectionAgent);
        collectionSet = m_collector.collect(collectionAgent, m_eventProxy, parameters);
        m_collector.release(collectionAgent);
        Assert.assertEquals(ServiceCollector.COLLECTION_SUCCEEDED, collectionSet.getStatus());

        ServiceParameters serviceParams = new ServiceParameters(new HashMap<String,Object>());
        BasePersister persister =  new GroupPersister(serviceParams, createRrdRepository((String)parameters.get("collection")), m_rrdStrategy, m_resourceStorageDao); // storeByGroup=true;
        collectionSet.visit(persister);

        Assert.assertEquals(expectedFiles, FileUtils.listFiles(new File(getSnmpRoot(), Integer.toString(nodeId)), new String[] { getRrdExtension() }, true).size());
        EasyMock.verify(collectionAgent);
    }

