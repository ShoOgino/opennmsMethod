  static final public void TextConvention() throws ParseException {
                         /*@bgen(jjtree) TextConvention */
  SimpleNode jjtn000 = new SimpleNode(JJTTEXTCONVENTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_145(3)) {
        jj_consume_token(TEXTUAL_CONVENTION_TOKEN);
        label_24:
        while (true) {
          if (jj_2_134(3)) {
            jj_consume_token(STATUS);
            jj_consume_token(IDENTIFIER);
          } else if (jj_2_135(3)) {
            if (jj_2_121(3)) {
              jj_consume_token(DESCRIPTION);
            } else if (jj_2_122(3)) {
              jj_consume_token(REFERENCE_TOKEN);
            } else {
              jj_consume_token(-1);
              throw new ParseException();
            }
            jj_consume_token(DESCRIPTOR_LITERAL);
          } else if (jj_2_136(3)) {
            jj_consume_token(DISPLAY_HINT_TOKEN);
            jj_consume_token(DESCRIPTOR_LITERAL);
          } else if (jj_2_137(3)) {
            jj_consume_token(OBJECTS_TOKEN);
            jj_consume_token(LBRACE);
            label_25:
            while (true) {
              jj_consume_token(IDENTIFIER);
              if (jj_2_123(3)) {
                jj_consume_token(COMMA);
              } else {
                ;
              }
              if (jj_2_124(3)) {
                ;
              } else {
                break label_25;
              }
            }
            jj_consume_token(RBRACE);
          } else if (jj_2_138(3)) {
            jj_consume_token(SYNTAX_TOKEN);
            if (jj_2_131(3)) {
              jj_consume_token(OBJECT_TOKEN);
              jj_consume_token(IDENTIFIER_TOKEN);
            } else if (jj_2_132(3)) {
              jj_consume_token(OCTET_TOKEN);
              jj_consume_token(STRING_TOKEN);
              if (jj_2_125(3)) {
                SizeDeclaration();
              } else {
                ;
              }
            } else if (jj_2_133(3)) {
              GetTypeIdentifier();
              if (jj_2_130(3)) {
                if (jj_2_128(3)) {
                  SizeDeclaration();
                } else if (jj_2_129(3)) {
                  jj_consume_token(LBRACE);
                  label_26:
                  while (true) {
                    jj_consume_token(IDENTIFIER);
                    jj_consume_token(LPAREN);
                    jj_consume_token(INTEGER_LITERAL);
                    jj_consume_token(RPAREN);
                    if (jj_2_126(3)) {
                      jj_consume_token(COMMA);
                    } else {
                      ;
                    }
                    if (jj_2_127(3)) {
                      ;
                    } else {
                      break label_26;
                    }
                  }
                  jj_consume_token(RBRACE);
                } else {
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              } else {
                ;
              }
            } else {
              jj_consume_token(-1);
              throw new ParseException();
            }
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
          if (jj_2_139(3)) {
            ;
          } else {
            break label_24;
          }
        }
      } else if (jj_2_146(3)) {
        jj_consume_token(OCTET_TOKEN);
        jj_consume_token(STRING_TOKEN);
        if (jj_2_144(3)) {
          if (jj_2_142(3)) {
            SizeDeclaration();
          } else if (jj_2_143(3)) {
            jj_consume_token(LBRACE);
            label_27:
            while (true) {
              jj_consume_token(IDENTIFIER);
              jj_consume_token(LPAREN);
              jj_consume_token(INTEGER_LITERAL);
              jj_consume_token(RPAREN);
              if (jj_2_140(3)) {
                jj_consume_token(COMMA);
              } else {
                ;
              }
              if (jj_2_141(3)) {
                ;
              } else {
                break label_27;
              }
            }
            jj_consume_token(RBRACE);
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
        } else {
          ;
        }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
     jjtn000.setName(lastObjectIdentifierToken.image);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

