    private void testPinger() {
        final Pinger pinger = PingerFactory.getInstance();

        final boolean hasV4 = pinger.isV4Available();
        final boolean hasV6 = pinger.isV6Available();

        log().info("Using ICMP implementation: " + pinger.getClass().getName());
        log().info("IPv4 ICMP available? " + hasV4);
        log().info("IPv6 ICMP available? " + hasV6);

        if (!hasV4) {
            try {
                pinger.initialize4();
            } catch (final Exception e) {
                log().warn("Failed to initialize IPv4 stack.", e);
            }
        }

        if (!hasV6) {
            try {
                pinger.initialize6();
            } catch (final Exception e) {
                log().warn("Failed to initialize IPv6 stack.", e);
            }

        }

        final String requireV4String = System.getProperty("org.opennms.netmgt.icmp.requireV4", "detect");
        final String requireV6String = System.getProperty("org.opennms.netmgt.icmp.requireV6", "detect");
        
        String errorMessage = null;
        if ("true".equalsIgnoreCase(requireV4String) && !hasV4) {
            errorMessage = "org.opennms.netmgt.icmp.requireV4 is true, but IPv4 ICMP could not be initialized.";
        }
        if ("true".equalsIgnoreCase(requireV6String) && !hasV6) {
            errorMessage = "org.opennms.netmgt.icmp.requireV6 is true, but IPv6 ICMP could not be initialized.";
        }
        
        // If they don't specify any preference, start up as long as one available.
        if ("detect".equals(requireV4String) || "detect".equals(requireV6String)) {
            if (!hasV4 && !hasV6) {
                errorMessage = "Unable to initialize any ICMP support.  Bailing out.";
            }
        }
        
        if (errorMessage != null) {
            final String osName = System.getProperty("os.name").toLowerCase();
            if (osName.contains("win")) {
                errorMessage += " On Windows, you can see this error if you are not running OpenNMS in an Administrator shell.";
            }
            throw new IllegalStateException(errorMessage);
        }
    }

