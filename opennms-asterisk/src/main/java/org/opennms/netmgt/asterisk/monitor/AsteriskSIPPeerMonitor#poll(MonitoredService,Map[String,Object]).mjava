	/**
        * {@inheritDoc}
        *
        * <P>
        * Run the service monitor and return the poll status
        * </P>
        */
	public PollStatus poll(MonitoredService svc, Map<String, Object> parameters)
	{
		//check, if interface type is supported
		final NetworkInterface<InetAddress> iface = svc.getNetInterface();
        	if (iface.getType() != NetworkInterface.TYPE_INET) 
		{
            		throw new NetworkInterfaceNotSupportedException("Unsupported interface type, only TYPE_INET currently supported");
        	}

		//read configuration parameters
		String sipPeer = ParameterMap.getKeyedString(parameters, "sip-peer", DEFAULT_SIPPEER);
		if(sipPeer.equals(DEFAULT_SIPPEER))
		{
			log().fatal("AsteriskMonitor: No sip-peer parameter in poller configuration");
			throw new RuntimeException("AsteriskMonitor: required parameter 'sip-peer' is not present in supplied properties.");

		}
		TimeoutTracker timeoutTracker = new TimeoutTracker(parameters, DEFAULT_RETRY, DEFAULT_TIMEOUT);
		AmiPeerFactory amiPeerFactory = AmiPeerFactory.getInstance();
		AmiAgentConfig amiConfig = amiPeerFactory.getAgentConfig(svc.getAddress());

		//setting up AMI connection	
		log().debug(svc.getSvcName() + ": Creating new AMI-Connection: " + svc.getIpAddr() + ":" + amiConfig.getPort() + ", " + amiConfig.getUsername() + "/" + amiConfig.getPassword());
		ManagerConnectionFactory factory = new ManagerConnectionFactory(svc.getIpAddr(), amiConfig.getPort(), amiConfig.getUsername(), amiConfig.getPassword());
		ManagerConnection managerConnection;
		if(amiConfig.getUseTls())
		{
                	managerConnection = factory.createSecureManagerConnection();
		}
		else
		{
                	managerConnection = factory.createManagerConnection();
		}
		managerConnection.setSocketTimeout(new Long(timeoutTracker.getTimeoutInMillis()).intValue());

		//start with polling
		while(timeoutTracker.shouldRetry())
		{
			timeoutTracker.nextAttempt();
			log().debug(svc.getSvcName() + ": Attempt " + timeoutTracker.getAttempt());
			try
			{
				log().debug(svc.getSvcName() + ": AMI login");
	                	managerConnection.login();

				log().debug(svc.getSvcName() + ": AMI sendAction SipShowPeer");
                		ManagerResponse response = managerConnection.sendAction(new SipShowPeerAction(sipPeer));
				if(response.getAttribute("Status") == null)
				{
					log().debug(svc.getSvcName() + ": service status down");
					return PollStatus.decode("Down", "State of SIP Peer is unknown, because it was not found on the Asterisk server");

				}
				log().debug(svc.getSvcName() + ": Response: " + response.getAttribute("Status"));

				log().debug(svc.getSvcName() + ": AMI logoff");
	               		managerConnection.logoff();

                		if (response.getAttribute("Status").startsWith("OK"))
                		{
					log().debug(svc.getSvcName() + ": service status up");
					return PollStatus.decode("Up", "OK");
	                	}
        	        	else
                		{
					log().debug(svc.getSvcName() + ": service status down");
					return PollStatus.decode("Down", "State of SIP Peer is " + response.getAttribute("Status") + " and not OK");
	                	}
			}
			catch(AuthenticationFailedException e)
			{
				log().error(svc.getSvcName() + ": AMI AuthenticationError: " + e.toString());
				return PollStatus.decode("Down", "Could not get the state of SIP Peer: AMI AuthenticationError");
			}
			catch(TimeoutException e)
			{
				log().debug(svc.getSvcName() + ": TimeOut reached: " + e.toString());
			}

			catch(SocketTimeoutException e)
			{
				log().debug(svc.getSvcName() + ": TimeOut reached: " + e.toString());
			}

			catch(Exception e)
			{	
				log().error(svc.getSvcName() + ": Exception: " + e.toString());
				return PollStatus.decode("Down", "Could not get the state of SIP Peer: " + e.toString());
			}
		}
		//If none of the retries worked
		return PollStatus.decode("Down", "Could not get the state of SIP Peer: Timeout exceeded");
	}

