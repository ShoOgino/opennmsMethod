    /**
     * Originates a call based on properties set on this bean.
     *
     * @throws org.opennms.netmgt.asterisk.utils.AsteriskOriginatorException if any.
     */
    public void originateCall() throws AsteriskOriginatorException {
        OriginateAction originateAction = buildOriginateAction();
        
        LOG.info("Logging in Asterisk manager connection");
        try {
            m_managerConnection.login();
        } catch (final IllegalStateException ise) {
            throw new AsteriskOriginatorException("Illegal state logging in Asterisk manager connection", ise);
        } catch (final IOException ioe) {
            throw new AsteriskOriginatorException("I/O exception logging in Asterisk manager connection", ioe);
        } catch (final AuthenticationFailedException afe) {
            throw new AsteriskOriginatorException("Authentication failure logging in Asterisk manager connection", afe);
        } catch (final TimeoutException toe) {
            throw new AsteriskOriginatorException("Timed out logging in Asterisk manager connection", toe);
        }
        LOG.info("Successfully logged in Asterisk manager connection");

        LOG.info("Originating a call to extension {}", m_legAExtension);
        LOG.debug(createCallLogMsg());
        LOG.debug("Originate action:\n\n{}", originateAction.toString());
        
        ManagerResponse managerResponse = null;
        try {
            managerResponse = m_managerConnection.sendAction(originateAction);
        } catch (final IllegalArgumentException iae) {
            m_managerConnection.logoff();
            throw new AsteriskOriginatorException("Illegal argument sending originate action", iae);
        } catch (final IllegalStateException ise) {
            m_managerConnection.logoff();
            throw new AsteriskOriginatorException("Illegal state sending originate action", ise);
        } catch (final IOException ioe) {
            m_managerConnection.logoff();
            throw new AsteriskOriginatorException("I/O exception sending originate action", ioe);
        } catch (final TimeoutException toe) {
            m_managerConnection.logoff();
            throw new AsteriskOriginatorException("Timed out sending originate action", toe);
        }
        
        LOG.info("Asterisk manager responded: {}", managerResponse.getResponse());
        LOG.info("Asterisk manager message: {}", managerResponse.getMessage());
        
        if (managerResponse.getResponse().toLowerCase().startsWith("error")) {
            m_managerConnection.logoff();
            throw new AsteriskOriginatorException("Got error response sending originate event. Response: " + managerResponse.getResponse() + "; Message: " + managerResponse.getMessage());
        }
        
        LOG.info("Logging off Asterisk manager connection");
        m_managerConnection.logoff();
        LOG.info("Successfully logged off Asterisk manager connection");
    }

