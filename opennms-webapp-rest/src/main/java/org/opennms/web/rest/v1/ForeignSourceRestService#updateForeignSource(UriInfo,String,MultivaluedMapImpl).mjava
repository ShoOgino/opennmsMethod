    /**
     * <p>updateForeignSource</p>
     *
     * @param foreignSource a {@link java.lang.String} object.
     * @param params a {@link org.opennms.web.rest.support.MultivaluedMapImpl} object.
     * @return a {@link javax.ws.rs.core.Response} object.
     */
    @PUT
    @Path("{foreignSource}")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Transactional
    public Response updateForeignSource(@Context final UriInfo uriInfo, @PathParam("foreignSource") String foreignSource, MultivaluedMapImpl params) {
        writeLock();
        try {
            ForeignSource fs = getActiveForeignSource(foreignSource);
            LOG.debug("updateForeignSource: updating foreign source {}", foreignSource);
            
            if (params.isEmpty()) return Response.notModified().build();

            boolean modified = false;
            final BeanWrapper wrapper = PropertyAccessorFactory.forBeanPropertyAccess(fs);
            wrapper.registerCustomEditor(Duration.class, new StringIntervalPropertyEditor());
            for(final String key : params.keySet()) {
                if (wrapper.isWritableProperty(key)) {
                    Object value = null;
                    String stringValue = params.getFirst(key);
                    value = wrapper.convertIfNecessary(stringValue, (Class<?>)wrapper.getPropertyType(key));
                    wrapper.setPropertyValue(key, value);
                    modified = true;
                }
            }
            if (modified) {
                LOG.debug("updateForeignSource: foreign source {} updated", foreignSource);
                fs.updateDateStamp();
                m_pendingForeignSourceRepository.save(fs);
                return Response.accepted().header("Location", getRedirectUri(uriInfo)).build();
            } else {
                return Response.notModified().build();
            }
        } finally {
            writeUnlock();
        }
    }

