    /**
     * Gets the services.
     * <p>It will include all the configured service monitors from poller-configuration.xml.</p>
     * <p>If the groupName is not null, it will include the services defined on the foreign source.</p>
     *
     * @param groupName the group name
     * @return the services
     */
    @GET
    @Path("services/{groupName}")
    @Produces({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON, MediaType.APPLICATION_ATOM_XML})
    public ElementList getServices(@PathParam("groupName") String groupName) {
        ElementList elements = new ElementList(m_pollerConfig.getServiceMonitorNames());
        m_collectdConfigFactory.getCollectdConfig().getCollectors().forEach(c -> {
            if (!elements.contains(c.getService())) {
                elements.add(c.getService());
            }
        });
        if (groupName != null) {
            final SortedSet<String> serviceNames = new TreeSet<>();
            final ForeignSource pendingForeignSource = m_foreignSourceService.getForeignSource(groupName);
            serviceNames.addAll(pendingForeignSource.getDetectorNames());

            for (final OnmsServiceType type : m_serviceTypeDao.findAll()) {
                serviceNames.add(type.getName());
            }

            // Include all of the service names defined in the poller configuration
            if (m_pollerConfig != null && m_pollerConfig.getServiceMonitorNames() != null && ! m_pollerConfig.getServiceMonitorNames().isEmpty()) {
                serviceNames.addAll(m_pollerConfig.getServiceMonitorNames());
            }
            serviceNames.forEach(s -> {
                if (!elements.contains(s)) {
                    elements.add(s);
                }
            });
        }
        return elements;
    }

