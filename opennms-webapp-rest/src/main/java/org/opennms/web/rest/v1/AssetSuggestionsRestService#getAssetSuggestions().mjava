    /**
     * Gets the asset suggestions.
     *
     * @return the asset suggestions
     */
    @GET
    @Path("suggestions")
    @Produces({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON, MediaType.APPLICATION_ATOM_XML})
    public Suggestions getAssetSuggestions() {
        final Suggestions suggestions = new Suggestions();
        final List<OnmsAssetRecord> distinctAssetProperties = m_assetDao.getDistinctProperties();
        final List<String> attributes = PropertyUtils.getProperties(new OnmsAssetRecord()).stream().filter(a -> !BLACK_LIST.contains(a)).collect(Collectors.toList());
        distinctAssetProperties.forEach(record -> {
            final BeanWrapper wrapper = PropertyAccessorFactory.forBeanPropertyAccess(record);
            attributes.forEach(attribute -> {
                if (! suggestions.containsKey(attribute)) {
                    suggestions.put(attribute, new SuggestionList());
                }
                final Object value = wrapper.getPropertyValue(attribute);
                if (value != null) {
                    final SuggestionList list = suggestions.get(attribute);
                    if (!list.contains(value.toString())) {
                        list.add(value.toString());
                    }
                }
            });
        });
        return suggestions;
    }

