    @GET
    @Path("{assetName}.{type}")
    public Response getResource(@PathParam("assetName") final String assetName, @PathParam("type") final String type) {
        InputStream is = null;

        try {
            Optional<InputStream> resourceInputStream = m_assetLocator.open(assetName, type);
            if (!resourceInputStream.isPresent()) {
                
                final List<String> split = Arrays.asList(assetName.split("-"));
                if (split.size() > 1) {
                    split.remove(split.size() - 1);
                    final String newAssetName = String.join("-", split);
                    final Optional<AssetResource> newResource = m_assetLocator.getResource(newAssetName, type);
                    LOG.debug("{}.{} not found, found {} instead", assetName, type, newResource);
                    if (newResource.isPresent() && newResource.get().getPath().equals(assetName + "." + type)) {
                        resourceInputStream = m_assetLocator.open(newAssetName, type);
                    }
                }
            }

            if (!resourceInputStream.isPresent()) {
                return Response.status(Status.NOT_FOUND).build();
            }

            is = resourceInputStream.get();
            final byte[] bytes = FileCopyUtils.copyToByteArray(is);
            switch(type) {
            case "js":
                return Response.ok(new String(bytes, StandardCharsets.UTF_8)).type("application/javascript").build();
            case "css":
                return Response.ok(new String(bytes, StandardCharsets.UTF_8)).type("text/css").build();
            default:
                throw new WebApplicationException(Response.status(Status.INTERNAL_SERVER_ERROR).type(MediaType.TEXT_PLAIN).entity("Unhandled resource type: " + type).build());
            }
        } catch (final IOException e) {
            LOG.debug("I/O error while reading {}.{}", assetName, type, e);
            throw new WebApplicationException(Response.status(Status.INTERNAL_SERVER_ERROR).type(MediaType.TEXT_PLAIN).entity("Resource " + assetName + "/" + type + " exists, but could not be read.\n" + e.getMessage() + "\n" + e.getStackTrace()).build());
        } finally {
            IOUtils.closeQuietly(is);
        }
    }

