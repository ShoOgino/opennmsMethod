    @POST
    @Consumes({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})
    public Response saveOrUpdateOutage(@Context final UriInfo uriInfo, final Outage newOutage) {
        writeLock();
        try {
            if (newOutage == null) throw getException(Status.BAD_REQUEST, "Outage object can't be null");
            Outage oldOutage = m_pollOutagesDao.getWriteableConfig().getOutage(newOutage.getName());
            if (oldOutage == null) {
                LOG.debug("saveOrUpdateOutage: adding outage {}", newOutage.getName());
                m_pollOutagesDao.withWriteLock(outages -> outages.addOutage(newOutage));
            } else {
                LOG.debug("saveOrUpdateOutage: updating outage {}", newOutage.getName());
                m_pollOutagesDao.withWriteLock(outages -> outages.replaceOutage(oldOutage, newOutage));
            }
            try {
                m_pollOutagesDao.saveConfig();
            } catch (Exception e) {
                throw getException(Status.INTERNAL_SERVER_ERROR, "Can't save or update the scheduled outage {} because, {}", newOutage.getName(), e.getMessage());
            }
            sendConfigChangedEvent();
            return oldOutage == null ? Response.created(getRedirectUri(uriInfo, newOutage.getName())).build() : Response.noContent().build();
        } finally {
            writeUnlock();
        }
    }

