	@POST
	@Consumes({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON, MediaType.APPLICATION_ATOM_XML})
	@Transactional
	public Response addMonitoringLocation(@Context final UriInfo uriInfo, OnmsMonitoringLocation monitoringLocation) {
		writeLock();
		try {
			LOG.debug("addMonitoringLocation: Adding monitoringLocation {}", monitoringLocation.getLocationName());
			m_monitoringLocationDao.save(monitoringLocation);

			final boolean sendEvent = monitoringLocation.getPollingPackageNames() != null && !monitoringLocation.getPollingPackageNames().isEmpty();

			if (sendEvent) {
				final EventBuilder eventBuilder = new EventBuilder(EventConstants.POLLER_PACKAGE_LOCATION_ASSOCIATION_CHANGED_EVENT_UEI, "ReST");
				eventBuilder.addParam(EventConstants.PARM_LOCATION, monitoringLocation.getLocationName());
				try {
					m_eventProxy.send(eventBuilder.getEvent());
				} catch (final EventProxyException e) {
					LOG.warn("Failed to send Event on polling package modification " + e.getMessage(), e);
				}
			}

			return Response.created(getRedirectUri(uriInfo, monitoringLocation.getLocationName())).build();
		} finally {
			writeUnlock();
		}
	}

