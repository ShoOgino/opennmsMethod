    /**
     * Transforms a list of heatmap elements to a json map.
     *
     * @param heatMapElements the list of heatmap elements
     * @return the map for the json response
     */
    private HeatMapDTOCollection transformResults(List<HeatMapElement> heatMapElements, String filter) {
        /**
         * the item list
         */
        final List<HeatMapDTOItem> itemList = new ArrayList<>();

        /**
         * Helper field for sizes
         */
        HashMap<String, Integer> elementSizes = new HashMap<>();

        /**
         * counter for total of services
         */
        int totalServices = 0;

        /**
         * iterate over the heatmap elements and increase the total
         * number of services. This is later used to compute the sizes
         * for the heatmap boxes...
         */
        for (HeatMapElement heatMapElement : heatMapElements) {
            if (heatMapElement.getServicesTotal() > 0) {
                /**
                 * Apply filter here if not null
                 */
                if (filter == null || heatMapElement.getName().matches(filter)) {
                    elementSizes.put(heatMapElement.getName(), heatMapElement.getServicesTotal());

                    HeatMapDTOItem heatMapDTOItem = new HeatMapDTOItem();
                    heatMapDTOItem.setId(heatMapElement.getName());
                    heatMapDTOItem.setElementId(heatMapElement.getId());
                    heatMapDTOItem.setColor(Lists.newArrayList(heatMapElement.getColor()));
                    itemList.add(heatMapDTOItem);

                    totalServices += heatMapElement.getServicesTotal();
                }
            }
        }

        /**
         * now iterate over the results and set the size attribute for
         * each entry...
         */
        for (HeatMapDTOItem heatMapDTOItem : itemList) {
            int servicesInEntity = elementSizes.get(heatMapDTOItem.getId());
            double size = (double) servicesInEntity / (double) totalServices;
            heatMapDTOItem.setSize(Lists.newArrayList(Double.valueOf(size)));
        }

        /**
         * create the "outer" map and add the list to it...
         */
        HeatMapDTOCollection heatMapDTOCollection = new HeatMapDTOCollection();
        heatMapDTOCollection.setHeatMapDTOItems(itemList);

        return heatMapDTOCollection;
    }

