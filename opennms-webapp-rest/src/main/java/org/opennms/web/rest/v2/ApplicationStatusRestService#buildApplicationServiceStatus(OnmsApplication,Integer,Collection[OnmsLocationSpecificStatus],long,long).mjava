    private ApplicationServiceStatus buildApplicationServiceStatus(final OnmsApplication onmsApplication, final Integer monitoredServiceId, final Collection<OnmsLocationSpecificStatus> statusChanges, final long start, final long end) {
        final Map<OnmsMonitoringLocation, List<OnmsLocationSpecificStatus>> m = new HashMap<>();
        final OnmsMonitoredService onmsMonitoredService = monitoredServiceDao.get(monitoredServiceId);

        for(final OnmsLocationSpecificStatus onmsLocationSpecificStatus : statusChanges) {
            if (onmsLocationSpecificStatus.getMonitoredService().getId().equals(monitoredServiceId)) {
                m.computeIfAbsent(onmsLocationSpecificStatus.getLocation(), k -> new ArrayList<>())
                        .add(onmsLocationSpecificStatus);
            }
        }

        final ApplicationServiceStatus applicationServiceStatus = new ApplicationServiceStatus();
        applicationServiceStatus.setStart(start);
        applicationServiceStatus.setEnd(end);
        applicationServiceStatus.setApplicationId(onmsApplication.getId());
        applicationServiceStatus.setMonitoredServiceId(monitoredServiceId);

        for (final OnmsMonitoringLocation onmsMonitoringLocation : m.keySet()) {
            final Location location = new Location();
            location.setName(onmsMonitoringLocation.getLocationName());
            location.setAggregatedStatus(100.0 * calculateServicePercentageUptime(m.get(onmsMonitoringLocation), Lists.newArrayList(), start, end));
            RemoteLatencyResource remoteLatencyResource = new RemoteLatencyResource(location.getName(), InetAddressUtils.toIpAddrString(onmsMonitoredService.getIpAddress()), onmsMonitoredService.getServiceType().getName());
            location.setResponseResourceId(remoteLatencyResource.getInstance());
            applicationServiceStatus.getLocations().add(location);
        }
        return applicationServiceStatus;
    }

