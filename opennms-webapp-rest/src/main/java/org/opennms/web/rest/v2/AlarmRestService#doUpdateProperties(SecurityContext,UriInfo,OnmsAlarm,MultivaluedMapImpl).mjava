    @Override
    protected Response doUpdateProperties(SecurityContext securityContext, UriInfo uriInfo, OnmsAlarm alarm, MultivaluedMapImpl params) {
        final String ticketIdValue = params.getFirst("ticketId");
        final String ticketStateValue = params.getFirst("ticketState");

        boolean isAlarmUpdated = false;
        if (StringUtils.isNotBlank(ticketIdValue)) {
            isAlarmUpdated = true;
            alarm.setTTicketId(ticketIdValue);
        }
        if (EnumUtils.isValidEnum(TroubleTicketState.class, ticketStateValue)) {
            isAlarmUpdated = true;
            alarm.setTTicketState(TroubleTicketState.valueOf(ticketStateValue));
        }
        if (isAlarmUpdated) {
            getDao().saveOrUpdate(alarm);
        }

        final String ackValue = params.getFirst("ack");
        final String escalateValue = params.getFirst("escalate");
        final String clearValue = params.getFirst("clear");
        final String ackUserValue = params.getFirst("ackUser");

        final String ackUser = ackUserValue == null ? securityContext.getUserPrincipal().getName() : ackUserValue;
        if (ackUser != null && !StringUtils.isNotBlank(ackUser)) {
            SecurityHelper.assertUserEditCredentials(securityContext, ackUser);
        }

        final OnmsAcknowledgment acknowledgement = new OnmsAcknowledgment(alarm, ackUser);
        acknowledgement.setAckAction(AckAction.UNSPECIFIED);

        boolean isProcessAck = false;
        if (ackValue != null) {
            isProcessAck = true;
            if (Boolean.parseBoolean(ackValue)) {
                acknowledgement.setAckAction(AckAction.ACKNOWLEDGE);
            } else {
                acknowledgement.setAckAction(AckAction.UNACKNOWLEDGE);
            }
        } else if (escalateValue != null) {
            isProcessAck = true;
            if (Boolean.parseBoolean(escalateValue)) {
                acknowledgement.setAckAction(AckAction.ESCALATE);
            }
        } else if (clearValue != null) {
            isProcessAck = true;
            if (Boolean.parseBoolean(clearValue)) {
                acknowledgement.setAckAction(AckAction.CLEAR);
            }
        }

        if (isProcessAck) {
            m_ackDao.processAck(acknowledgement);
        }

        return Response.noContent().build();
    }

