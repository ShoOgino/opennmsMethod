    private ApplicationStatus buildApplicationStatus(final OnmsApplication onmsApplication, final Collection<OnmsLocationSpecificStatus> statusChanges, final long start, final long end) {
        final Map<OnmsMonitoringLocation, Map<OnmsMonitoredService, List<OnmsLocationSpecificStatus>>> m = new HashMap<>();

        for(final OnmsLocationSpecificStatus onmsLocationSpecificStatus : statusChanges) {
            m.computeIfAbsent(onmsLocationSpecificStatus.getLocation(), k -> new HashMap<>())
                    .computeIfAbsent(onmsLocationSpecificStatus.getMonitoredService(), k -> new ArrayList<>())
                    .add(onmsLocationSpecificStatus);
        }

        final ApplicationStatus applicationStatus = new ApplicationStatus();
        applicationStatus.setStart(start);
        applicationStatus.setEnd(end);
        applicationStatus.setApplicationId(onmsApplication.getId());

        for (final OnmsMonitoringLocation onmsMonitoringLocation : m.keySet()) {
            final Location location = new Location();
            location.setName(onmsMonitoringLocation.getLocationName());

            final List<DowntimeInterval> downtimeIntervals = Lists.newArrayList();
            
            for (final OnmsMonitoredService onmsMonitoredService : m.get(onmsMonitoringLocation).keySet()) {
                calculateServicePercentageUptime(m.get(onmsMonitoringLocation).get(onmsMonitoredService), downtimeIntervals, start, end);
            }

            final List<DowntimeInterval> mergedDowntimeIntervals = mergeDowntimeIntervals(downtimeIntervals);

            location.setAggregatedStatus(100.0 * calculateApplicationPercentageUptime(mergedDowntimeIntervals, start, end));
            applicationStatus.getLocations().add(location);
        }
        return applicationStatus;
    }

