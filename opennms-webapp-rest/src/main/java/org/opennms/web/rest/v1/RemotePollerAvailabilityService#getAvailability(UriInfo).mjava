    @GET
    @Produces({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})
    @Path("availability")
    public OnmsLocationAvailDefinitionList getAvailability(@Context final UriInfo uriInfo) throws InterruptedException {

        if(m_timer == null) {
            final MultivaluedMap<String, String> queryParameters = uriInfo.getQueryParameters();
            m_defList =  getAvailabilityList(createTimeChunker(queryParameters), getSortedApplications(), null, getSelectedNodes(queryParameters));
            
            TimerTask task = new TimerTask() {

                @Override
                public void run() {
                    m_defList = m_transactionTemplate.execute(new TransactionCallback<OnmsLocationAvailDefinitionList>() {

                        @Override
                        public OnmsLocationAvailDefinitionList doInTransaction(TransactionStatus status) {
                            return getAvailabilityList(getTimeChunkerFromMidnight(), getSortedApplications(), null, null);
                        }
                        
                    });
                }
            };
            
            m_timer = new Timer("AvailCalculator-Timer");
            m_timer.scheduleAtFixedRate(task, TimeChunker.MINUTE, TimeChunker.MINUTE);
        }
        
        return m_defList;
    }

