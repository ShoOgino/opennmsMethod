        /**
         * @param eventParameterPath The Hibernate property path for the eventParameter relationship
         * @param eventIdColumn The column name in the database for the event ID column in the root entity table
         * @param eventParameterProperty The name of the property in the {@link OnmsEventParameter} object that
         *        this behavior is being applied to
         */
        public EventParameterBehavior(String eventParameterPath, String eventIdColumn, String eventParameterProperty) {
            super(Aliases.eventParameter.prop(eventParameterProperty), (b,v,c,w) -> {
                switch (c) {
                case EQUALS:
                    if (w) {
                        b.sql(String.format("{alias}.%s in (select event_parameters.eventid from event_parameters where event_parameters.%s %s ?)", eventIdColumn, eventParameterProperty, w ? "like" : "="), v, Type.STRING);
                    } else {
                        // Add an eventParameter alias that only matches the specified value
                        b.alias(
                            eventParameterPath,
                            Aliases.eventParameter.toString(),
                            JoinType.LEFT_JOIN,
                            Restrictions.or(
                                Restrictions.eq(Aliases.eventParameter.prop(eventParameterProperty), v),
                                Restrictions.isNull(Aliases.eventParameter.prop(eventParameterProperty))
                            )
                        );
                    }
                    break;
                case NOT_EQUALS:
                    b.sql(String.format("{alias}.%s not in (select event_parameters.eventid from event_parameters where event_parameters.%s %s ?)", eventIdColumn, eventParameterProperty, w ? "like" : "="), v, Type.STRING);
                    break;
                default:
                    throw new IllegalArgumentException("Illegal condition type when filtering event_parameters." + eventParameterProperty + ": " + c.toString());
                }
            });
        }

