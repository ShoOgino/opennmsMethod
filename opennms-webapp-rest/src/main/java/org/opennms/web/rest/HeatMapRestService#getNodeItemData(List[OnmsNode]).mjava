    private List<Map<String, Object>> getNodeItemData(List<OnmsNode> onmsNodeList) {
        /**
         * the item list
         */
        final List<Map<String, Object>> itemList = new ArrayList<>();

        /**
         * retrieve the node ids for nodes with outages
         */
        Set<Integer> nodeIds = getOutagesNodeIds();

        /**
         * Helper field for sizes
         */
        HashMap<String, Integer> interfaceCounts = new HashMap<>();

        /**
         * counter for total of nodes
         */
        int interfacesTotal = 0;

        for (OnmsNode onmsNode : onmsNodeList) {
            if (onmsNode.getIpInterfaces().size() > 0) {
                Map<String, Object> item = new HashMap<>();

                item.put("id", onmsNode.getLabel());
                item.put("nodeId", onmsNode.getId());
                item.put("color", Lists.newArrayList(nodeIds.contains(onmsNode.getId()) ? 1.0 : 0.0));

                interfaceCounts.put(onmsNode.getLabel(), onmsNode.getIpInterfaces().size());
                interfacesTotal += onmsNode.getIpInterfaces().size();

                itemList.add(item);
            }
        }

        for (Map<String, Object> map : itemList) {
            int nodeInterfaceCount = interfaceCounts.get(map.get("id"));
            double size = (double) nodeInterfaceCount / (double) interfacesTotal;
            map.put("size", Lists.newArrayList(Double.valueOf(size)));
        }

        return itemList;
    }

