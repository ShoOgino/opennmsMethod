    /**
     * <p>acknowledgeAlarm</p>
     *
     * @param alarmId a {@link java.lang.String} object.
     * @param action a {@link java.lang.String} object.
     * @return a {@link org.opennms.netmgt.model.OnmsAcknowledgment} object.
     */
    @POST
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Transactional
    public Response acknowledge(MultivaluedMap<String, String> formParams) {
        String alarmId = formParams.getFirst("alarmId");
        String notifId = formParams.getFirst("notifId");
        String action = formParams.getFirst("action");
        if (action == null) {
            action = "ack";
        }
        OnmsAcknowledgment ack = null;
        if (alarmId == null && notifId == null) {
            return getBadRequestResponse("You must supply either an alarmId or notifId");
        } else if (alarmId != null && notifId != null) {
            return getBadRequestResponse("You cannot supply both an alarmId and a notifId");
        } else if (alarmId != null) {
            final Integer numericAlarmId = getNumericValue(alarmId);
            if (numericAlarmId == null) {
                return getBadRequestResponse("The alarmId has to be an integer value");
            }
            final OnmsAlarm alarm = m_alarmDao.get(numericAlarmId);
            if (alarm == null) {
                return Response.noContent().build();
            }
            ack = new OnmsAcknowledgment(alarm);
        } else if (notifId != null) {
            final Integer numericNotifId = getNumericValue(notifId);
            if (numericNotifId == null) {
                return getBadRequestResponse("The notifId has to be an integer value");
            }
            final OnmsNotification notification = m_notificationDao.get(numericNotifId);
            if (notification == null) {
                return Response.noContent().build();
            }
            ack = new OnmsAcknowledgment(notification);
        }
        
        if ("ack".equals(action)) {
            ack.setAckAction(AckAction.ACKNOWLEDGE);
        } else if ("unack".equals(action)) {
            ack.setAckAction(AckAction.UNACKNOWLEDGE);
        } else if ("clear".equals(action)) {
            ack.setAckAction(AckAction.CLEAR);
        } else if ("esc".equals(action)) {
            ack.setAckAction(AckAction.ESCALATE);
        } else {
            return getBadRequestResponse("Must supply the action parameter, set to either 'ack, 'unack', 'clear', or 'esc'");
        }

        m_ackDao.processAck(ack);
        return Response.ok(ack).build();
    }

