    @PUT
    public Response updateServices(@Context final UriInfo uriInfo, final MultivaluedMapImpl params) {
        final String status = params.getFirst("status");
        if (status == null || !status.matches("(A|R|S|F)")) {
            throw getException(Status.BAD_REQUEST, "updateServices: parameter status must be specified. Possible values: A (Managed), F (Forced Unmanaged), R (Rescan to Resume), S (Rescan to Suspend)");
        }
        final String services_csv = params.getFirst("services");
        final List<String> serviceList = new ArrayList<String>();
        if (services_csv != null) {
            for (String s : services_csv.split(",")) {
                serviceList.add(s);
            }
        }
        final Criteria c = getCriteria(uriInfo.getQueryParameters());
        c.setLimit(null);
        c.setOffset(null);
        final OnmsMonitoredServiceList services = new OnmsMonitoredServiceList(m_serviceDao.findMatching(c));
        if (services.isEmpty()) {
            throw getException(Status.BAD_REQUEST, "updateServices: can't find any service matchinng the provided criteria: " + uriInfo.getQueryParameters());
        }
        boolean modified = false;
        for (OnmsMonitoredService svc : services) {
            boolean proceed = false;
            if (serviceList.isEmpty()) {
                proceed = true;
            } else {
                if (serviceList.contains(svc.getServiceName())) {
                    proceed = true;
                }
            }
            if (proceed) {
                modified = true;
                final String currentStatus = svc.getStatus();
                svc.setStatus(status);
                m_serviceDao.update(svc);
                if ("S".equals(status) || (currentStatus.equals("A") && status.equals("F"))) {
                    LOG.debug("updateServices: suspending polling for service {} on node with IP {}", svc.getServiceName(), svc.getIpAddress().getHostAddress());
                    sendEvent(EventConstants.SERVICE_UNMANAGED_EVENT_UEI, svc); // TODO ManageNodeServlet is sending this.
                    sendEvent(EventConstants.SUSPEND_POLLING_SERVICE_EVENT_UEI, svc);
                }
                if ("R".equals(status) || (currentStatus.equals("F") && status.equals("A"))) {
                    LOG.debug("updateServices: resuming polling for service {} on node with IP {}", svc.getServiceName(), svc.getIpAddress().getHostAddress());
                    sendEvent(EventConstants.RESUME_POLLING_SERVICE_EVENT_UEI, svc);
                }
            }
        }
        if (!modified && !serviceList.isEmpty()) {
            throw getException(Status.BAD_REQUEST, "updateServices: the supplied list of services (" + services_csv + ") doesn't match any service based on the provided criteria: " + uriInfo.getQueryParameters());
        }

        return Response.seeOther(getRedirectUri(uriInfo)).build();
    }

