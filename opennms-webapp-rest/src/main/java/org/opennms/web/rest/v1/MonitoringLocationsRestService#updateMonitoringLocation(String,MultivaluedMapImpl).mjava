	@PUT
	@Path("{monitoringLocation}")
	@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	@Transactional
	public Response updateMonitoringLocation(@PathParam("monitoringLocation") String monitoringLocation, MultivaluedMapImpl params) {
		writeLock();
		try {
			boolean sendEvent = false;

			OnmsMonitoringLocation def = m_monitoringLocationDao.get(monitoringLocation);
			LOG.debug("updateMonitoringLocation: updating monitoring location {}", monitoringLocation);

			if (params.isEmpty()) return Response.notModified().build();

			boolean modified = false;
			final BeanWrapper wrapper = PropertyAccessorFactory.forBeanPropertyAccess(def);
			wrapper.registerCustomEditor(Duration.class, new StringIntervalPropertyEditor());
			for(final String key : params.keySet()) {
				if (wrapper.isWritableProperty(key)) {
					Object value = null;
					String stringValue = params.getFirst(key);
					value = wrapper.convertIfNecessary(stringValue, (Class<?>)wrapper.getPropertyType(key));
					if (POLLING_PACKAGE_NAMES.equals(key)) {
						sendEvent = (value != null ? !value.equals(wrapper.getPropertyValue(POLLING_PACKAGE_NAMES)) : wrapper.getPropertyValue(key) != null);
					}
					wrapper.setPropertyValue(key, value);
					modified = true;
				}
			}
			if (modified) {
			    LOG.debug("updateMonitoringLocation: monitoring location {} updated", monitoringLocation);
			    m_monitoringLocationDao.save(def);
				if (sendEvent) {
					final EventBuilder eventBuilder = new EventBuilder(EventConstants.POLLER_PACKAGE_LOCATION_ASSOCIATION_CHANGED_EVENT_UEI, "ReST");
					eventBuilder.addParam(EventConstants.PARM_LOCATION, monitoringLocation);
					try {
						m_eventProxy.send(eventBuilder.getEvent());
					} catch (final EventProxyException e) {
						LOG.warn("Failed to send Event on polling package modification " + e.getMessage(), e);
					}
				}
				return Response.noContent().build();
			}
			return Response.notModified().build();
		} finally {
			writeUnlock();
		}
	}

