    @GET
    @Produces(MediaType.APPLICATION_JSON)
    @Transactional
    @Path("categories")
    public Response categories() throws IOException {
        /**
         * the item list
         */
        final List<Map<String, Object>> itemList = new ArrayList<>();

        /**
         * retrieve the node ids for nodes with outages
         */
        Set<Integer> nodeIds = getOutagesNodeIds();

        /**
         * Helper field for sizes
         */
        HashMap<String, Integer> categorySizes = new HashMap<>();

        /**
         * counter for total of nodes
         */
        int nodesTotal = 0;

        /**
         * create data based on categories
         */
        List<OnmsCategory> categoryList = m_categoryDao.findAll();

        for (OnmsCategory onmsCategory : categoryList) {
            CriteriaBuilder criteriaBuilder = new CriteriaBuilder(OnmsNode.class);

            criteriaBuilder.alias("categories", "category");
            criteriaBuilder.eq("category.id", onmsCategory.getId());

            int nodesInCategory = m_nodeDao.countMatching(criteriaBuilder.toCriteria());

            int nodesWithOutages = 0;

            if (nodeIds.size() > 0) {
                criteriaBuilder.in("id", nodeIds);
                nodesWithOutages = m_nodeDao.countMatching(criteriaBuilder.toCriteria());
            }

            System.out.println(onmsCategory.getName() + " -> Nodes: " + nodesWithOutages + "/" + nodesInCategory);

            if (nodesInCategory > 0) {

                Double color = 0.0;

                if (nodesWithOutages == 1 && nodesInCategory > nodesWithOutages) {
                    color = 0.5;
                } else {
                    if (nodesWithOutages > 1 || nodesInCategory == nodesWithOutages) {
                        color = 1.0;
                    }
                }

                categorySizes.put(onmsCategory.getName(), nodesInCategory);

                Map<String, Object> item = new HashMap<>();
                item.put("id", onmsCategory.getName());
                item.put("color", Lists.newArrayList(color));

                itemList.add(item);

                nodesTotal += nodesInCategory;
            }
        }

        for (Map<String, Object> map : itemList) {
            int nodesInCategory = categorySizes.get(map.get("id"));
            double size = (double) nodesInCategory / (double) nodesTotal;
            map.put("size", Lists.newArrayList(Double.valueOf(size)));
        }

        Map<String, List<Map<String, Object>>> map = new HashMap<>();
        map.put("children", itemList);
        final JSONObject jo = new JSONObject(map);
        return Response.ok(jo.toString(), MediaType.APPLICATION_JSON).build();
    }

