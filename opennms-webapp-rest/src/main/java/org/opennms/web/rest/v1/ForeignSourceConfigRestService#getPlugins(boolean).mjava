    /**
     * Gets the Plugins.
     *
     * @param isPolicies the is policies
     * @return the Plugins
     */
    protected SimplePluginConfigList getPlugins(boolean isPolicies) {
        SimplePluginConfigList plugins = new SimplePluginConfigList();
        Map<String,String> typesMap = isPolicies ? m_foreignSourceService.getPolicyTypes(): m_foreignSourceService.getDetectorTypes();
        for (String pluginClass : typesMap.keySet()) {
            final PluginWrapper wrapper = m_foreignSourceService.getWrappers().get(pluginClass);
            if (wrapper == null) {
                LOG.warn("No wrapper found for plugin class {}. See previous log messages for wrapping failures.", pluginClass);
                continue;
            }
            final String pluginName = typesMap.get(pluginClass);
            SimplePluginConfig cfg = new SimplePluginConfig(pluginName, pluginClass);
            List<SimplePluginParameter> requiredParams = new ArrayList<SimplePluginParameter>();
            List<SimplePluginParameter> optionalParams = new ArrayList<SimplePluginParameter>();
            for (Map.Entry<String,Boolean> paramEntry : wrapper.getRequired().entrySet()) {
                final Boolean required = paramEntry.getValue();
                final String paramName = paramEntry.getKey();
                final Set<String> options = required ? wrapper.getRequiredItems().get(paramName) : wrapper.getOptionalItems().get(paramName);
                final List<String> optionList = new ArrayList<String>(options);
                Collections.sort(optionList);
                SimplePluginParameter param = new SimplePluginParameter(paramName, required, optionList);
                if (required) {
                    requiredParams.add(param);
                } else {
                    optionalParams.add(param);
                }
            }
            Collections.sort(requiredParams, new ParameterComparator());
            Collections.sort(optionalParams, new ParameterComparator());
            cfg.parameters.addAll(requiredParams);
            cfg.parameters.addAll(optionalParams);
            plugins.add(cfg);
        }
        return plugins;
    }

