    protected void testAllSearchParameters(String url, Set<SearchProperty> properties) throws Exception {
        for (SearchProperty prop : properties) {
            System.err.println("Testing " + prop.getId());
            switch(prop.type) {
            case BOOLEAN:
                sendRequest(GET, url, parseParamData(String.format("_s=%s==true;%s==false", prop.getId(), prop.getId())), 204);
                break;
            case FLOAT:
                sendRequest(GET, url, parseParamData(String.format("_s=%s==1.0;%s!=1.0", prop.getId(), prop.getId())), 204);
                break;
            case INTEGER:
                sendRequest(GET, url, parseParamData(String.format("_s=%s==1;%s!=1", prop.getId(), prop.getId())), 204);
                break;
            case IP_ADDRESS:
                sendRequest(GET, url, parseParamData(String.format("_s=%s==127.0.0.1;%s!=127.0.0.1", prop.getId(), prop.getId())), 204);
                break;
            case LONG:
                sendRequest(GET, url, parseParamData(String.format("_s=%s==1;%s!=1", prop.getId(), prop.getId())), 204);
                break;
            case STRING:
                sendRequest(GET, url, parseParamData(String.format("_s=%s==A;%s!=A", prop.getId(), prop.getId())), 204);
                break;
            case TIMESTAMP:
                sendRequest(GET, url, parseParamData(String.format(
                    "_s=%s==%s;%s!=%s", 
                    prop.getId(), 
                    "1970-01-01T00:00:00.000-0000",
                    prop.getId(), 
                    "1970-01-01T00:00:00.000%252B0000"
                )), 204);
                break;
            default:
                throw new IllegalArgumentException();
            }
            if (prop.orderBy) {
                sendRequest(GET, url, parseParamData("orderBy=" + prop.getId()), 204);
            }
        }
    }

