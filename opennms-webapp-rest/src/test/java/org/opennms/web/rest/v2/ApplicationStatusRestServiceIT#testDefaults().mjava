    @Test
    @Transactional
    public void testDefaults() throws Exception {
        long currentTimeMs = new Date().getTime();
        long oneDayMs = 60*60*24*1000;
        final Map<String, String> params = new HashMap<>();
        final JSONObject object1 = new JSONObject(sendRequest(GET, "/remotepoller/" + app1Id, params, 200));
        final JSONObject object2 = new JSONObject(sendRequest(GET, "/remotepoller/" + app1Id + "/" + app1Service1.getId(), params, 200));

        Assert.assertTrue(object1.getLong("start")>=currentTimeMs-oneDayMs && object1.getLong("start")<=currentTimeMs-oneDayMs+2000);
        Assert.assertTrue(object1.getLong("end")>=currentTimeMs && object1.getLong("end")<=currentTimeMs+2000 );

        Assert.assertTrue(object2.getLong("start")>=currentTimeMs-oneDayMs && object2.getLong("start")<=currentTimeMs-oneDayMs+2000);
        Assert.assertTrue(object2.getLong("end")>=currentTimeMs && object2.getLong("end")<=currentTimeMs+2000 );

        long end = 10000000000L;
        params.put("end", String.valueOf(end));

        final JSONObject object3 = new JSONObject(sendRequest(GET, "/remotepoller/" + app1Id, params, 200));
        final JSONObject object4 = new JSONObject(sendRequest(GET, "/remotepoller/" + app1Id + "/" + app1Service1.getId(), params, 200));

        Assert.assertEquals(end-oneDayMs, object3.getLong("start"));
        Assert.assertEquals(end, object3.getLong("end"));

        Assert.assertEquals(end-oneDayMs, object4.getLong("start"));
        Assert.assertEquals(end, object4.getLong("end"));
    }

