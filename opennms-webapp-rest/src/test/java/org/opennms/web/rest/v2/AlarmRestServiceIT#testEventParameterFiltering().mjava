    /**
     * Test filtering for properties of {@link OnmsEventParameter}. The implementation
     * for this filtering is different because the event-to-parameter relationship
     * is a one-to-many relationship.
     * 
     * @throws Exception
     */
    @Test
    public void testEventParameterFiltering() throws Exception {
        executeQueryAndVerify("_s=eventParameter.name==testParm1", 5);
        executeQueryAndVerify("_s=eventParameter.name!=testParm1", 5);

        executeQueryAndVerify("_s=eventParameter.name==testParm2", 5);
        executeQueryAndVerify("_s=eventParameter.name!=testParm2", 5);

        executeQueryAndVerify("_s=eventParameter.name==doesntExist", 0);
        executeQueryAndVerify("_s=eventParameter.name!=doesntExist", 10);

        executeQueryAndVerify("_s=eventParameter.value==This is an awesome parm%21", 5);
        executeQueryAndVerify("_s=eventParameter.value!=This is an awesome parm%21", 5);
        executeQueryAndVerify("_s=eventParameter.value!=This is an awesome parm%21;eventParameter.value==This is a weird parm", 5);

        executeQueryAndVerify("_s=eventParameter.value==This is a weird parm", 5);
        executeQueryAndVerify("_s=eventParameter.value!=This is a weird parm", 5);
        executeQueryAndVerify("_s=eventParameter.value!=This is a weird parm;eventParameter.value==This is an awesome parm%21", 5);

        executeQueryAndVerify("_s=eventParameter.value!=This is an awesome parm%21;eventParameter.value!=This is a weird parm", 0);

        executeQueryAndVerify("_s=eventParameter.value==doesntExist", 0);
        executeQueryAndVerify("_s=eventParameter.value!=doesntExist", 10);

        // This doesn't work because eventParameter.type is a non-unique field
        //executeQueryAndVerify("_s=eventParameter.type==string", 8);
        executeQueryAndVerify("_s=eventParameter.type!=string", 0);

        executeQueryAndVerify("_s=eventParameter.type==doesntExist", 0);
        executeQueryAndVerify("_s=eventParameter.type!=doesntExist", 10);

        // Query with every property of eventParameter
        executeQueryAndVerify("_s=eventParameter.name==testParm1;eventParameter.value==This is an awesome parm%21;eventParameter.type==string", 5);
        executeQueryAndVerify("_s=eventParameter.name==testParm2;eventParameter.value==This is a weird parm;eventParameter.type==string", 5);
        executeQueryAndVerify("_s=eventParameter.name==testParm3;eventParameter.value==Here's another parm;eventParameter.type==string", 10);

        executeQueryAndVerify("_s=eventParameter.name==testParm1;eventParameter.value==This is an awesome parm%21", 5);
        executeQueryAndVerify("_s=eventParameter.name==testParm1;eventParameter.value==This is a weird parm", 0);
        executeQueryAndVerify("_s=eventParameter.name==testParm1;eventParameter.value==Here's another parm", 0);

        executeQueryAndVerify("_s=eventParameter.name==testParm2;eventParameter.value==This is an awesome parm%21", 0);
        executeQueryAndVerify("_s=eventParameter.name==testParm2;eventParameter.value==This is a weird parm", 5);
        executeQueryAndVerify("_s=eventParameter.name==testParm2;eventParameter.value==Here's another parm", 0);

        executeQueryAndVerify("_s=eventParameter.name==testParm3;eventParameter.value==This is an awesome parm%21", 0);
        executeQueryAndVerify("_s=eventParameter.name==testParm3;eventParameter.value==This is a weird parm", 0);
        executeQueryAndVerify("_s=eventParameter.name==testParm3;eventParameter.value==Here's another parm", 10);

        executeQueryAndVerify("_s=eventParameter.type==string;eventParameter.value==This is an awesome parm%21", 5);
        executeQueryAndVerify("_s=eventParameter.type==string;eventParameter.value==This is a weird parm", 5);
        executeQueryAndVerify("_s=eventParameter.type==string;eventParameter.value==Here's another parm", 10);

        executeQueryAndVerify("_s=eventParameter.name==testParm*", 10);

        executeQueryAndVerify("_s=eventParameter.name==testParm*;eventParameter.value==*awesome*", 5);
        // Negative filter eliminates half of the results
        executeQueryAndVerify("_s=eventParameter.name==testParm*;eventParameter.value!=*awesome*", 5);
        executeQueryAndVerify("_s=eventParameter.name==testParm*;eventParameter.value==*weird*", 5);
        // Negative filter eliminates half of the results
        executeQueryAndVerify("_s=eventParameter.name==testParm*;eventParameter.value!=*weird*", 5);
        executeQueryAndVerify("_s=eventParameter.name==testParm*;eventParameter.value==*another*", 10);
        // All events have testParm3 so the negative filter will eliminate all results
        executeQueryAndVerify("_s=eventParameter.name==testParm*;eventParameter.value!=*another*", 0);

        // Wildcard value paired with specific non-unique value
        executeQueryAndVerify("_s=eventParameter.name==testParm*;eventParameter.value==This is an awesome parm%21", 5);
        executeQueryAndVerify("_s=eventParameter.name==testParm*;eventParameter.value==This is a weird parm", 5);
        executeQueryAndVerify("_s=eventParameter.name==testParm*;eventParameter.value==Here's another parm", 10);


        executeQueryAndVerify("_s=eventParameter.type==*ring*;eventParameter.value==*awesome*", 5);
        executeQueryAndVerify("_s=eventParameter.type==*ring*;eventParameter.value!=*weird*", 5);


        // This does not work properly because:
        // - eventParameter.type is not a wildcard value so an alias with a JOIN condition will be used 
        //   for querying
        // - eventParameter.type is a non-unique field so the JOIN condition will return multiple rows
        //executeQueryAndVerify("_s=eventParameter.type==string;eventParameter.value!=*weird*", 4); // 8
        //executeQueryAndVerify("_s=eventParameter.name==testParm*;eventParameter.type==string", 8); // 16

        // A workaround is to use a wildcard value instead so that the query doesn't use the alias
        executeQueryAndVerify("_s=eventParameter.type==string*;eventParameter.value!=*weird*", 5);
        executeQueryAndVerify("_s=eventParameter.name==testParm*;eventParameter.type==string*", 10);

        // Many parenthetical queries will work
        executeQueryAndVerify("_s=(eventParameter.name==testParm2*),(eventParameter.name==testParm1*)", 10);
        executeQueryAndVerify("_s=(eventParameter.name==testParm2*),(eventParameter.value!=*awesome*)", 5);
        executeQueryAndVerify("_s=(eventParameter.name==testParm1),(eventParameter.value==*weird*)", 10);
        executeQueryAndVerify("_s=(eventParameter.name==testParm1),(eventParameter.value!=*weird*)", 5);
        executeQueryAndVerify("_s=(eventParameter.name==testParm2),(eventParameter.value==*weird*)", 5);
        executeQueryAndVerify("_s=(eventParameter.name==testParm2),(eventParameter.value!=*weird*)", 10);
        executeQueryAndVerify("_s=(eventParameter.name==testParm3),(eventParameter.value==*weird*)", 10);
        executeQueryAndVerify("_s=(eventParameter.name==testParm3),(eventParameter.value!=*weird*)", 10);

        // Doesn't work because join conditions for each search property combine spuriously with each other
        // across the FIQL OR restriction (',')
        //executeQueryAndVerify("_s=(eventParameter.name==testParm1),(eventParameter.name==testParm2)", 8);
        //executeQueryAndVerify("_s=(eventParameter.name==testParm1),(eventParameter.name==testParm3)", 8);

        // Workaround by using wildcards for the values
        executeQueryAndVerify("_s=(eventParameter.name==testParm1*),(eventParameter.name==testParm2*)", 10);
        executeQueryAndVerify("_s=(eventParameter.name==testParm1*);(eventParameter.name==testParm2*)", 0);
        executeQueryAndVerify("_s=(eventParameter.name==testParm1*),(eventParameter.name==testParm3*)", 10);
        executeQueryAndVerify("_s=(eventParameter.name==testParm1*);(eventParameter.name==testParm3*)", 5);
    }

