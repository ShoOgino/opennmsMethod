    /**
     * @see https://issues.opennms.org/browse/NMS-9590
     * 
     * @throws Exception 
     */
    @Test
    public void testMultithreadedAccess() throws Exception {
        final AtomicInteger successes = new AtomicInteger();
        final AtomicInteger failures = new AtomicInteger();
        final int n = 40;

        final Executor pool = Executors.newFixedThreadPool(5);
        final List<CompletableFuture<?>> futures = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            CompletableFuture<?> future = CompletableFuture.runAsync(new Runnable() {
                @Override
                public void run() {
                    try {
                        LOG.debug("HELLO");
                        executeQueryAndVerify("_s=alarmAckTime%3D%3D1970-01-01T00:00:00.000-0000;alarm.severity%3Dge%3DNORMAL;(node.label%3D%3D*sp01*;node.label%3D%3D*sp02*);(node.label%3D%3D*.asp*,node.label%3D%3D*sbx*);(lastEventTime%3Dge%3D2017-08-15T15:33:53.610-0000;lastEventTime%3Dle%3D2017-08-22T15:33:53.610-0000)", 0);
                        successes.incrementAndGet();
                    } catch (Throwable e) {
                        LOG.error("Unexpected exception during executeQueryAndVerify: " + e.getMessage(), e);
                        failures.incrementAndGet();
                        fail(e.getMessage());
                    }
                }
            }, pool)
            .exceptionally(e -> {
                LOG.error("Unexpected exception in thread: " + e.getMessage(), e);
                fail();
                return null;
            });
            futures.add(future);
        }

        // Wait for all of the tasks to complete
        CompletableFuture.allOf(futures.toArray(new CompletableFuture[0])).get();

        assertEquals(0, failures.get());
        assertEquals(n, successes.get());
    }

