    @Test
    public void testWriteALotOfUsers() throws Exception {
        int userCount = 50;

        // Limit the thread pool so that we don't exhaust all of the database connections
        ExecutorService pool = Executors.newFixedThreadPool(25);
        List<Future<?>> createFutures = new ArrayList<Future<?>>();
        for (int i = 0; i < userCount; i++) {
            final String userName = "test" + i;
            createFutures.add(pool.submit(Executors.callable(new Runnable() {
                @Override
                public void run() {
                    try {
                        setUser("admin", new String[] { "ROLE_ADMIN" });
                        createUser(userName, userName + "@opennms.org", 201, "/users/" + userName);
                    } catch (Exception e) {
                        e.printStackTrace();
                        fail(e.getMessage());
                    }
                }
            })));
        }

        // Wait for all of the REST operations to complete
        for(Future<?> future : createFutures) {
            future.get();
        }

        // validate list
        OnmsUserList users = JaxbUtils.unmarshal(OnmsUserList.class,  sendRequest(GET, "/users", 200));
        assertNotNull(users);
        assertEquals(userCount + 1, users.size()); //+1 because user "admin" is there before creating all the new users.

        // Try changing the password for every user to make sure that they
        // are properly accessible in the UserManager
        for (int i = 0; i < userCount; i++) {
            // validate each created user
            String xml = sendRequest(GET, "/users/test" + i, 200);
            OnmsUser eachUser = JaxbUtils.unmarshal(OnmsUser.class, xml);
            assertEquals("test" + i, eachUser.getUsername());
            assertEquals("test" + i + " Full Name", eachUser.getFullName());
            assertEquals("test" + i + "@opennms.org", eachUser.getEmail());
            assertEquals("Autogenerated by a unit test...", eachUser.getComments());

            // change
            sendPut("/users/test" + i, "password=MONKEYS&email=TEST@OPENNMS.COM", 204);

            // validate change of password
            eachUser = JaxbUtils.unmarshal(OnmsUser.class, sendRequest(GET, "/users/test" + i, 200));
            User castorUser = m_userManager.getUser("test" + i);
            assertEquals(castorUser.getPassword().getContent(), "MONKEYS");

            // validate change of email
            assertEquals("TEST@OPENNMS.COM", eachUser.getEmail());
        }
    }

