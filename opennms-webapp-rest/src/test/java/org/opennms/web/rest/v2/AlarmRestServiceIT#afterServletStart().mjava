    @Override
    protected void afterServletStart() throws Exception {
        ALARM_COUNTER.set(0);

        MockLogAppender.setupLogging(true, "DEBUG");

        final OnmsCategory linux = createCategory("Linux");
        final OnmsCategory servers = createCategory("LinuxServers");
        final OnmsCategory macOS = createCategory("macOS");

        final OnmsServiceType icmp = new OnmsServiceType(ICMP_SERVICE);
        m_databasePopulator.getServiceTypeDao().save(icmp);
        m_databasePopulator.getServiceTypeDao().flush();

        final NetworkBuilder builder = new NetworkBuilder();

        // Add a node with 2 categories, since this will really exercise the Criteria
        // aliases since node-to-category is a many-to-many relationship
        node1 = createNode(builder, "server01", NODE_1_IP, new OnmsCategory[] { linux, servers });

        // simpler node to have multi-node matching
        node2 = createNode(builder, "server02", NODE_2_IP, new OnmsCategory[] { macOS });

        // node with strange values to test double-decoding of the FIQL engine
        node3 = createNode(builder, SERVER3_NAME, "192.168.1.3", new OnmsCategory[] {});

        createAlarm(node1, "uei.opennms.org/test/somethingWentWrong", OnmsSeverity.MAJOR, 0);
        createAlarm(node1, "uei.opennms.org/test/somethingIsStillHappening", OnmsSeverity.WARNING, 1);
        createAlarm(node1, "uei.opennms.org/test/somethingIsOkNow", OnmsSeverity.NORMAL, 2);

        createAlarm(node2, "uei.opennms.org/test/somethingWentWrong", OnmsSeverity.MAJOR, 10);
        createAlarm(node2, "uei.opennms.org/test/somethingIsStillHappening", OnmsSeverity.WARNING, 11);
        createAlarm(node2, "uei.opennms.org/test/somethingIsOkNow", OnmsSeverity.NORMAL, 12);
        createAlarm(node2, "uei.opennms.org/test/somethingIsStillOk", OnmsSeverity.NORMAL, 13);

        createAlarm(node3, "uei.opennms.org/test/somethingIsStillOk", OnmsSeverity.NORMAL, 20);

        createAlarm(node3, "uei.opennms.org/test/something,WithAnComma", OnmsSeverity.MAJOR, 30);

        createSituation(node1, "uei.opennms.org/test/situation", OnmsSeverity.WARNING, 20, 
                        getReductionKey("uei.opennms.org/test/somethingIsStillHappening", node2, NODE_2_IP, ICMP_SERVICE),
                        getReductionKey("uei.opennms.org/test/somethingWentWrong", node2, NODE_2_IP, ICMP_SERVICE));
    }

