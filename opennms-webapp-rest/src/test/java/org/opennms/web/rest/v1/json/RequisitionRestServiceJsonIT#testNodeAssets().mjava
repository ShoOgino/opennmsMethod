    @Test
    public void testNodeAssets() throws Exception {
        createRequisition();

        String base = "/requisitions/test/nodes/4243/assets";

        // create an asset
        JSONObject asset = new JSONObject();
        asset.put("name", "manufacturer");
        asset.put("value", "Dead Servers, Inc.");
        sendPost(base, asset.toString(), 303, "/nodes/4243/assets/manufacturer");

        // get list of asset parameters
        String url = base;
        String json = sendRequest(GET, url, 200);
        JSONObject assets = new JSONObject(json);
        assertEquals(3, assets.getInt("count"));
        boolean manufFound = false;
        boolean osFound = false;
        assertTrue(assets.has("asset"));
        JSONArray assetArray = assets.getJSONArray("asset");
        for (int i=0; i < assetArray.length(); i++) {
            JSONObject obj = assetArray.getJSONObject(i);
            assertTrue(obj.has("name"));
            assertTrue(obj.has("value"));
            if ("manufacturer".equals(obj.getString("name")) && "Dead Servers, Inc.".equals(obj.getString("value"))) {
                manufFound = true;
            }
            if ("operatingSystem".equals(obj.getString("name")) && "Windows Pi".equals(obj.getString("value"))) {
                osFound = true;
            }
        }
        assertTrue(manufFound);
        assertTrue(osFound);

        // get individual asset parameter
        url = "/requisitions/test/nodes/4243/assets/operatingSystem";
        json = sendRequest(GET, url, 200);
        asset = new JSONObject(json);
        assertEquals("Windows Pi", asset.getString("value"));

        // delete asset parameter
        json = sendRequest(DELETE, url, 200);
        json = sendRequest(GET, url, 404);

        // confirm there are less assets
        json = sendRequest(GET, "/requisitions/test/nodes/4243/assets", 200);
        assets = new JSONObject(json);
        assertEquals(2, assets.getInt("count"));
    }

