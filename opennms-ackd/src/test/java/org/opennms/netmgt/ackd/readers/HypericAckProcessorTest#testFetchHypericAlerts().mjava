    @Test
    @JUnitHttpServer(port=7081,basicAuth=true)
    public void testFetchHypericAlerts() throws Exception {
        // Test reading alerts over the HTTP server
        {
            List<HypericAckProcessor.HypericAlertStatus> alerts = HypericAckProcessor.fetchHypericAlerts("http://hqadmin:hqadmin@127.0.0.1:7081/hqu/opennms/alertStatus/list.hqu", Arrays.asList(new String[] { "1", "2", "3" }));
            assertEquals(5, alerts.size());
            for (HypericAckProcessor.HypericAlertStatus alert : alerts) {
                System.out.println(alert.toString());
            }

            alerts = HypericAckProcessor.fetchHypericAlerts("http://uhohcolons:this%3Apassword%3Ahas%3Acolons@127.0.0.1:7081/hqu/opennms/alertStatus/list.hqu", Arrays.asList(new String[] { "1", "2", "3" }));
            assertEquals(5, alerts.size());
        }

        // Try with bad credentials to make sure we get a malformed response
        {
            boolean caughtAuthFailure = false;
            for (String url : new String[] {
                    "http://:badcredentials@127.0.0.1:7081/hqu/opennms/alertStatus/list.hqu",
                    "http://blankpass@127.0.0.1:7081/hqu/opennms/alertStatus/list.hqu",
                    "http://blankpass:@127.0.0.1:7081/hqu/opennms/alertStatus/list.hqu",
                    "http://hqadmin@127.0.0.1:7081/hqu/opennms/alertStatus/list.hqu",
                    "http://hqadmin:@127.0.0.1:7081/hqu/opennms/alertStatus/list.hqu",
                    "http://127.0.0.1:7081/hqu/opennms/alertStatus/list.hqu"
            }) {
                try {
                    List<HypericAckProcessor.HypericAlertStatus> alerts = HypericAckProcessor.fetchHypericAlerts(url, Arrays.asList(new String[] { "1", "2", "3" }));
                } catch (JAXBException e) {
                    // Expected state
                    caughtAuthFailure = true;
                }
                assertTrue("Did not catch expected authorization failure for URL: " + url, caughtAuthFailure);
            }
        }
    }

