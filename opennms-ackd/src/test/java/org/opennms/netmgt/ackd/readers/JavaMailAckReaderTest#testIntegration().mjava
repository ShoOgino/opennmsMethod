    /**
     * This test requires that 4 emails can be read from a Google account.  The mails should be
     * in this order:
     * Subject matching ackd-configuration expression of action type ack
     * Subject matching ackd-configuration expression of action type ack
     * Subject matching ackd-configuration expression of action type ack
     * Subject matching ackd-configuration expression of action type clear
     * 
     * The test has been updated to now include sending an email message to a gmail account.  Just correct
     * the account details for your own local testing.
     * 
     * @throws JavaMailerException 
     * 
     */
    @Ignore
    @Test
    public void testIntegration() throws JavaMailerException {
        
        String gmailAccount = getUser();
        String gmailPassword = getPassword();
        
        JavaSendMailer sendMailer = createSendMailer(gmailAccount, gmailPassword);
        
        SendmailMessage sendMsg = createAckMessage(gmailAccount, "1", "ack");
        sendMailer.setMessage(sendMailer.buildMimeMessage(sendMsg));
        sendMailer.send();
        sendMsg = createAckMessage(gmailAccount, "2", "ack");
        sendMailer.setMessage(sendMailer.buildMimeMessage(sendMsg));
        sendMailer.send();
        sendMsg = createAckMessage(gmailAccount, "3", "ack");
        sendMailer.setMessage(sendMailer.buildMimeMessage(sendMsg));
        sendMailer.send();
        sendMsg = createAckMessage(gmailAccount, "4", "clear");
        sendMailer.setMessage(sendMailer.buildMimeMessage(sendMsg));
        sendMailer.send();

        ReadmailConfig config = m_processor.determineMailReaderConfig();
        
        Assert.assertNotNull(config);
        updateConfigWithGoogleReadConfiguration(config, gmailAccount, gmailPassword);
        
        List<Message> msgs = m_processor.retrieveAckMessages();
        
        List<OnmsAcknowledgment> acks = m_processor.createAcks(msgs);
        
        Assert.assertNotNull(acks);
        Assert.assertEquals(4, acks.size());
        
        Assert.assertEquals(AckType.NOTIFICATION, acks.get(0).getAckType());
        Assert.assertEquals(AckAction.ACKNOWLEDGE, acks.get(0).getAckAction());
        Assert.assertEquals(Integer.valueOf(1), acks.get(0).getRefId());
        Assert.assertEquals(getUser()+"@gmail.com", acks.get(0).getAckUser());
        
        Assert.assertEquals(AckType.NOTIFICATION, acks.get(1).getAckType());
        Assert.assertEquals(AckAction.ACKNOWLEDGE, acks.get(1).getAckAction());
        Assert.assertEquals(Integer.valueOf(2), acks.get(1).getRefId());
        Assert.assertEquals(getUser()+"@gmail.com", acks.get(1).getAckUser());
        
        Assert.assertEquals(AckType.NOTIFICATION, acks.get(2).getAckType());
        Assert.assertEquals(AckAction.ACKNOWLEDGE, acks.get(2).getAckAction());
        Assert.assertEquals(Integer.valueOf(3), acks.get(2).getRefId());
        Assert.assertEquals(getUser()+"@gmail.com", acks.get(2).getAckUser());
        
        Assert.assertEquals(AckType.NOTIFICATION, acks.get(3).getAckType());
        Assert.assertEquals(AckAction.CLEAR, acks.get(3).getAckAction());
        Assert.assertEquals(Integer.valueOf(4), acks.get(3).getRefId());
        Assert.assertEquals(getUser()+"@gmail.com", acks.get(3).getAckUser());
    }

