    @Transactional @Test 
    public void proccessAck() {
        
        OnmsNode dbNode = m_nodeDao.get(Integer.valueOf(1));

        OnmsEvent event = new OnmsEvent();
        event.setDistPoller(dbNode.getDistPoller());
        event.setEventUei(EventConstants.NODE_DOWN_EVENT_UEI);
        event.setEventTime(new Date());
        event.setEventSource("test");
        event.setEventCreateTime(new Date());
        event.setEventSeverity(1);
        event.setEventLog("Y");
        event.setEventDisplay("Y");
        event.setNode(dbNode);
        m_eventDao.save(event);
        
        OnmsNotification notif = new OnmsNotification();
        notif.setEvent(event);
        notif.setNode(dbNode);
        notif.setNumericMsg("123456");
        notif.setPageTime(Calendar.getInstance().getTime());
        notif.setSubject("ackd notif test");
        notif.setTextMsg("ackd notif test");
        
        OnmsUserNotification un = new OnmsUserNotification();
        un.setUserId("admin");
        un.setNotification(notif);
        Set<OnmsUserNotification> usersNotified = new HashSet<OnmsUserNotification>();
        usersNotified.add(un);
        notif.setUsersNotified(usersNotified);
        m_notifDao.save(notif);
        m_notifDao.flush();

        Assert.assertTrue(m_notifDao.countAll() > 0);
        
        List<OnmsNotification> notifs = m_notifDao.findAll();
        Assert.assertTrue((notifs.contains(notif)));
        
        OnmsAcknowledgment ack = new OnmsAcknowledgment();
        ack.setRefId(notif.getNotifyId());
        ack.setAckType(AckType.NOTIFICATION);
        m_ackService.processAck(ack);
        
        List<Acknowledgeable> ackables = m_ackDao.findAcknowledgables(ack);
        Assert.assertEquals(1, ackables.size());
        Acknowledgeable ackable = ackables.get(0);
        Assert.assertEquals("admin", ackable.getAckUser());
        
    }

