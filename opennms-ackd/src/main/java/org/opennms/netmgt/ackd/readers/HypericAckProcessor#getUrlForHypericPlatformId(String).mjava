    public String getUrlForHypericPlatformId(String platformId) {
        if (platformId == null) {
            throw new IllegalArgumentException("Cannot search for null Hyperic platform IDs inside the ackd configuration");
        } else if ("".equals(platformId)) {
            throw new IllegalArgumentException("Cannot search for blank Hyperic platform IDs inside the ackd configuration");
        }

        List<Parameter> params = m_ackdDao.getParametersForReader(READER_NAME_HYPERIC);
        if (params == null) {
            throw new IllegalStateException("There is no configuration for the '" + READER_NAME_HYPERIC + "' reader inside the ackd configuration");
        }
        for (Parameter param : params) {
            if (PARAMETER_HYPERIC_HOSTS.equalsIgnoreCase(param.getKey())) {
                String[] hosts = param.getValue().split(",");
                for (String host : hosts) {
                    host = host.trim();
                    String[] hostParts = host.split(" ");
                    if (hostParts.length != 2) {
                        throw new IllegalArgumentException("The '" + PARAMETER_HYPERIC_HOSTS + "' parameter inside the ackd configuration should contain space-separated key-value pairs, this segment is malformed: " + host);
                    } else if ("".equals(hostParts[0]) || "".equals(hostParts[1])) {
                        throw new IllegalArgumentException("The '" + PARAMETER_HYPERIC_HOSTS + "' parameter inside the ackd configuration contains a bad key-value pair: " + host);
                    }

                    if (platformId.equals(hostParts[0])) {
                        return hostParts[1];
                    }
                }
            }
        }
        return null;
    }

