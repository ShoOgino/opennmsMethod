    private void adjustReaderState(AckReader reader, 
            AckReaderState requestedState, List<AckReaderState> allowedCurrentStates, boolean reloadConfig) {
    
        synchronized (m_lock) {
    
            if (!getConfigDao().isReaderEnabled(reader.getName())) {
                
                //stop a disabled reader if necessary
                if (!AckReaderState.STOPPED.equals(reader.getState())) {
                    LOG.warn("adjustReaderState: ignoring requested state and stopping the disabled reader: {}...", reader.getName());
                    reader.stop();
                    LOG.warn("adjustReaderState: disabled reader: {} stopped", reader.getName());
                    return;
                }
                
                LOG.warn("adjustReaderState: Not adjustingReaderState, disabled reader: {}", reader.getName());
                return;
            }
    
            if (allowedCurrentStates.contains(reader.getState())) {
    
                LOG.debug("adjustReaderState: adjusting reader state from: {} to: {}...", reader.getState(), requestedState);
    
                org.opennms.netmgt.config.ackd.ReaderSchedule configSchedule = getConfigDao().getReaderSchedule(reader.getName());
    
                long interval = configSchedule.getInterval();
                String unit = configSchedule.getUnit();
    
                /**
                 * TODO: Make this so that a reference to the executor doesn't have to be passed in and
                 * the start method simply returns the task to be scheduled.  The schedule can be adjusted
                 * by the AckReader.  We just need to make sure that the future gets set in the AckReaer.
                 */
                if (AckReaderState.STARTED.equals(requestedState)) {
                    reader.start(m_executor, ReaderSchedule.createSchedule(interval, unit), reloadConfig);
                    
                } else if (AckReaderState.STOPPED.equals(requestedState)) {
                    reader.stop();
                    
                } else if (AckReaderState.PAUSED.equals(requestedState)) {
                    reader.pause();
                    
                } else if (AckReaderState.RESUMED.equals(requestedState)) {
                    reader.resume(m_executor);
                    
                } else {
                    IllegalStateException e = new IllegalStateException("adjustReaderState: cannot request state: "+requestedState);
                    LOG.error(e.getLocalizedMessage(), e);
                    throw e;
                }
    
            } else {
                IllegalStateException e = new IllegalStateException("error adjusting reader state; reader cannot be change from: "+reader.getState()+" to: "+requestedState);
                LOG.error(e.getLocalizedMessage(), e);
                throw e; 
            }
        }
    }

