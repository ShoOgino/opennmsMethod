    /**
     * <p>fetchHypericAlerts</p>
     *
     * @param hypericUrl a {@link java.lang.String} object.
     * @param alertIds a {@link java.util.List} object.
     * @return a {@link java.util.List} object.
     * @throws org.apache.commons.httpclient.HttpException if any.
     * @throws java.io.IOException if any.
     * @throws javax.xml.bind.JAXBException if any.
     * @throws javax.xml.stream.XMLStreamException if any.
     */
    public static List<HypericAlertStatus> fetchHypericAlerts(String hypericUrl, List<String> alertIds) throws IOException, JAXBException, XMLStreamException {
        List<HypericAlertStatus> retval = new ArrayList<HypericAlertStatus>();

        if (alertIds.size() < 1) {
            return retval; 
        }

        for (int i = 0; i < alertIds.size(); i++) {
            // Construct the query string for the HTTP operation
            StringBuffer alertIdString = new StringBuffer();
            alertIdString.append("?");
            for (int j = 0; (j < ALERTS_PER_HTTP_TRANSACTION) && (i < alertIds.size()); j++,i++) {
                if (j > 0) alertIdString.append("&");
                // Numeric values, no need to worry about URL encoding
                alertIdString.append("id=").append(alertIds.get(i));
            }

            // Create an HTTP client
            DefaultHttpClient httpClient = new DefaultHttpClient();
            httpClient.getParams().setIntParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, 3000);
            httpClient.getParams().setIntParameter(CoreConnectionPNames.SO_TIMEOUT, 3000);
            HttpUriRequest httpMethod = new HttpGet(hypericUrl + alertIdString.toString());

            // Set a custom user-agent so that it's easy to tcpdump these requests
            httpMethod.getParams().setParameter(CoreProtocolPNames.USER_AGENT, "OpenNMS-Ackd.HypericAckProcessor");

            // Parse the URI from the config so that we can deduce the username/password information
            String userinfo = null;
            try {
                URI hypericUri = new URI(hypericUrl);
                userinfo = hypericUri.getUserInfo();
                // httpMethod.getParams().setParameter(ClientPNames.VIRTUAL_HOST, new HttpHost("localhost", hypericUri.getPort()));
            } catch (URISyntaxException e) {
                LOG.warn("Could not parse URI to get username/password stanza: {}", hypericUrl, e);
            }
            if (userinfo != null && !"".equals(userinfo)) {
                // Add the credentials to the HttpClient instance
                httpClient.getCredentialsProvider().setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(userinfo));

                /**
                 * Add an HttpRequestInterceptor that will perform preemptive auth
                 * @see http://hc.apache.org/httpcomponents-client-4.0.1/tutorial/html/authentication.html
                 */
                HttpRequestInterceptor preemptiveAuth = new HttpRequestInterceptor() {

                    @Override
                    public void process(final HttpRequest request, final HttpContext context) throws IOException {

                        AuthState authState = (AuthState)context.getAttribute(ClientContext.TARGET_AUTH_STATE);
                        CredentialsProvider credsProvider = (CredentialsProvider)context.getAttribute(ClientContext.CREDS_PROVIDER);
                        HttpHost targetHost = (HttpHost)context.getAttribute(ExecutionContext.HTTP_TARGET_HOST);

                        // If not auth scheme has been initialized yet
                        if (authState.getAuthScheme() == null) {
                            AuthScope authScope = new AuthScope(targetHost.getHostName(), targetHost.getPort());
                            // Obtain credentials matching the target host
                            Credentials creds = credsProvider.getCredentials(authScope);
                            // If found, generate BasicScheme preemptively
                            if (creds != null) {
                                authState.update(new BasicScheme(), creds);
                            }
                        }
                    }

                };
                httpClient.addRequestInterceptor(preemptiveAuth, 0);
            }

            try {
                HttpResponse response = httpClient.execute(httpMethod);

                // int statusCode = response.getStatusLine().getStatusCode();
                // String statusText = response.getStatusLine().getReasonPhrase();

                retval = parseHypericAlerts(new StringReader(EntityUtils.toString(response.getEntity())));
            } finally{
                // Do we need to do any cleanup?
                // httpMethod.releaseConnection();
            }
        }
        return retval;
    }

