    public static List<HypericAlertStatus> fetchHypericAlerts(String hypericUrl, List<String> alertIds) throws HttpException, IOException, JAXBException, XMLStreamException {
        StringBuffer alertIdString = new StringBuffer();
        for (int i = 0; i < alertIds.size(); i++) {
            if (i > 0) alertIdString.append(" ");
            alertIdString.append(alertIds.get(i));
        }

        HttpClient httpClient = new HttpClient();
        HostConfiguration hostConfig = new HostConfiguration();
        
        URI uri = new URI(hypericUrl, true);

        // TODO Add alertIds parameter
        // TODO Change to a POST method if possible
        GetMethod httpMethod = new GetMethod(uri.getURI());
        // httpMethod.addParameter("alertIds", alertIdString.toString());

        httpClient.getParams().setParameter(HttpClientParams.SO_TIMEOUT, 3000);
        httpClient.getParams().setParameter(HttpClientParams.USER_AGENT, "OpenNMS Ackd.HypericAckProcessor");
        // hostConfig.getParams().setParameter(HttpClientParams.VIRTUAL_HOST, "localhost");

        String userinfo = uri.getUserinfo();
        if (userinfo != null && !"".equals(userinfo)) {
            httpClient.getParams().setAuthenticationPreemptive(true);
            int colonIndex = userinfo.indexOf(":");
            if (colonIndex < 0) {
                // If there is no colon separator, use the entire string as a username
                httpClient.getState().setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(userinfo));
            } else if (colonIndex == 0) {
                throw new IllegalArgumentException("Illegal Hyperic HTTP credentials starting with a colon in the ackd configuration: " + userinfo);
            } else {
                // If there is a colon separator, parse out the username and password
                String username = userinfo.substring(0, colonIndex);
                if (colonIndex < (userinfo.length() - 1)) {
                    // Note that this can return an empty string ""
                    String password = userinfo.substring(colonIndex + 1);
                    httpClient.getState().setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(username, password));
                } else {
                    httpClient.getState().setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(username));
                }
            }
        }

        List<HypericAlertStatus> retval = new ArrayList<HypericAlertStatus>();
        try {
            log().debug("httpClient request with the following parameters: " + httpClient);
            log().debug("hostConfig parameters: " + hostConfig);
            log().debug("getMethod parameters: " + httpMethod);
            httpClient.executeMethod(hostConfig, httpMethod);

            //Integer statusCode = httpMethod.getStatusCode();
            //String statusText = httpMethod.getStatusText();
            InputStream responseText = httpMethod.getResponseBodyAsStream();

            retval = parseHypericAlerts(new InputStreamReader(responseText));
        } finally{
            httpMethod.releaseConnection();
        }
        return retval;
    }

