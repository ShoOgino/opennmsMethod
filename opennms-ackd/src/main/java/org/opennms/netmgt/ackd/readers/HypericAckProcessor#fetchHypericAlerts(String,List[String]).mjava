    /**
     * <p>fetchHypericAlerts</p>
     *
     * @param hypericUrl a {@link java.lang.String} object.
     * @param alertIds a {@link java.util.List} object.
     * @return a {@link java.util.List} object.
     * @throws org.apache.commons.httpclient.HttpException if any.
     * @throws java.io.IOException if any.
     * @throws javax.xml.bind.JAXBException if any.
     * @throws javax.xml.stream.XMLStreamException if any.
     */
    public static List<HypericAlertStatus> fetchHypericAlerts(String hypericUrl, List<String> alertIds) throws IOException, JAXBException, XMLStreamException {
        List<HypericAlertStatus> retval = new ArrayList<HypericAlertStatus>();

        if (alertIds.size() < 1) {
            return retval; 
        }

        for (int i = 0; i < alertIds.size(); i++) {
            // Construct the query string for the HTTP operation
            StringBuffer alertIdString = new StringBuffer();
            alertIdString.append("?");
            for (int j = 0; (j < ALERTS_PER_HTTP_TRANSACTION) && (i < alertIds.size()); j++,i++) {
                if (j > 0) alertIdString.append("&");
                // Numeric values, no need to worry about URL encoding
                alertIdString.append("id=").append(alertIds.get(i));
            }

            final HttpClientWrapper clientWrapper = HttpClientWrapper.create()
                    .setConnectionTimeout(3000)
                    .setSocketTimeout(3000)
                    // Set a custom user-agent so that it's easy to tcpdump these requests
                    .setUserAgent("OpenNMS-Ackd.HypericAckProcessor");

            HttpUriRequest httpMethod = new HttpGet(hypericUrl + alertIdString.toString());

            // Parse the URI from the config so that we can deduce the username/password information
            String userinfo = null;
            try {
                URI hypericUri = new URI(hypericUrl);
                userinfo = hypericUri.getUserInfo();
            } catch (final URISyntaxException e) {
                LOG.warn("Could not parse URI to get username/password stanza: {}", hypericUrl, e);
            }
            if (userinfo != null && !"".equals(userinfo)) {
                final String[] credentials = userinfo.split(":");
                if (credentials.length == 2) {
                    clientWrapper.addBasicCredentials(credentials[0], credentials[1])
                        .usePreemptiveAuth();
                } else {
                    LOG.warn("Unable to deduce username/password from '{}'", userinfo);
                }
            }

            try {
                CloseableHttpResponse response = clientWrapper.execute(httpMethod);
                retval = parseHypericAlerts(new StringReader(EntityUtils.toString(response.getEntity())));
            } finally {
                IOUtils.closeQuietly(clientWrapper);
            }
        }
        return retval;
    }

