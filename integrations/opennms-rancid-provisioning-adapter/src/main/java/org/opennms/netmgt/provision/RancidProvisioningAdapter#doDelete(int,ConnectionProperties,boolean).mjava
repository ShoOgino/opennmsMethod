    /**
     * <p>doDelete</p>
     *
     * @param nodeId a int.
     * @param cp a {@link org.opennms.rancid.ConnectionProperties} object.
     * @param retry a boolean.
     * @throws org.opennms.netmgt.provision.ProvisioningAdapterException if any.
     */
    public void doDelete(int nodeId,ConnectionProperties cp, boolean retry) throws ProvisioningAdapterException {
        if (! isAdapterConfigured()) {
            return;
        }

        log().debug("doDelete: deleting nodeid: " + nodeId);
        
        /*
         * The work to maintain the hashmap boils down to needing to do deletes, so
         * here we go.
         */
        try {
            m_rwsConfig.getWriteLock().lock();
            try {
                if (m_onmsNodeRancidNodeMap.containsKey(Integer.valueOf(nodeId))) {
                    RancidNode rNode = m_onmsNodeRancidNodeMap.get(Integer.valueOf(nodeId));
    
                    RWSClientApi.deleteRWSRancidNode(cp, rNode);
                    RWSClientApi.deleteRWSAuthNode(cp, rNode.getAuth());
    
                    m_onmsNodeRancidNodeMap.remove(Integer.valueOf(nodeId));
                    m_onmsNodeIpMap.remove(Integer.valueOf(nodeId));
                } else {
                    log().warn("doDelete: no device found in node Rancid Map for nodeid: " + nodeId);                
                }
            } finally {
                m_rwsConfig.getWriteLock().unlock();
            }
        } catch (Throwable e) {
            cp = getStandByRWSConnection();
            if (retry && cp != null) {
                log().info("doDelete: retry Delete on standByConn: " + cp.getUrl());
                doDelete(nodeId, cp, false);
            } else {
                sendAndThrow(nodeId, e);            
            }
        }
    }

