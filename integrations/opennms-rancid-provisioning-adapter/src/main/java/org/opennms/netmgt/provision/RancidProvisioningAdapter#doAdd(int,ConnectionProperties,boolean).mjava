    /**
     * <p>doAdd</p>
     *
     * @param nodeId a int.
     * @param cp a {@link org.opennms.rancid.ConnectionProperties} object.
     * @param retry a boolean.
     * @throws org.opennms.netmgt.provision.ProvisioningAdapterException if any.
     */
    public void doAdd(int nodeId, ConnectionProperties cp, boolean retry) throws ProvisioningAdapterException {
        LOG.debug("doAdd: adding nodeid: {}", nodeId);

        final OnmsNode node = m_nodeDao.get(nodeId);                                                                                                                                                                                            
        Assert.notNull(node, "doAdd: failed to return node for given nodeId:"+nodeId);

        String ipaddress = m_template.execute(new TransactionCallback<String>() {
            @Override
            public String doInTransaction(TransactionStatus arg0) {
                return getSuitableIpForRancid(node);
            }
        });

        
        RancidNode rNode = getSuitableRancidNode(node);
        rNode.setStateUp(true);
        
        try {
            m_rwsConfig.getWriteLock().lock();
            try {
                if (m_onmsNodeRancidNodeMap.containsValue(rNode)) {
                    LOG.error("doAdd: Error Duplicate node: {}", node);
                    ProvisioningAdapterException e = new ProvisioningAdapterException("Duplicate node has been added: "+node); 
                    sendAndThrow(nodeId, e);
                    return;
                }
                LOG.debug("doAdd: adding to router.db node: {}", node.getLabel());
    
                RWSClientApi.createRWSRancidNode(cp, rNode);
                m_onmsNodeIpMap.putIfAbsent(nodeId, ipaddress);
                m_onmsNodeRancidNodeMap.put(Integer.valueOf(nodeId), rNode);
    
                RWSClientApi.createOrUpdateRWSAuthNode(cp, rNode.getAuth());
            } finally {
                m_rwsConfig.getWriteLock().unlock();
            }
        } catch (ProvisioningAdapterException ae) {    
            sendAndThrow(nodeId, ae);
        } catch (Throwable e) {
            cp = getStandByRWSConnection();
            if (retry && cp != null) {
                LOG.info("doAdd: retry Add on standByConn: {}", cp.getUrl());
                doAdd(nodeId, cp, false);
            } else {
                sendAndThrow(nodeId, e);            
            }
        }
    }

