	private static String fetchSnmpAssetString(SnmpAgentConfig agentConfig, MibObjs mibObjs, String formatString) throws MissingFormatArgumentException {

		List<String> aliases = new ArrayList<String>();
		List<SnmpObjId> objs = new ArrayList<SnmpObjId>();
		for (MibObj mibobj : mibObjs.getMibObj()) {
			aliases.add(mibobj.getAlias());
			objs.add(SnmpObjId.get(mibobj.getOid()));
		}
		// Fetch the values from the SNMP agent
		SnmpValue[] values = SnmpUtils.get(agentConfig, objs.toArray(new SnmpObjId[0]));
		if (values.length == aliases.size()) {
			Properties substitutions = new Properties();
			boolean foundAValue = false;
			for (int i = 0; i < values.length; i++) {
				// If the value is a NO_SUCH_OBJECT or NO_SUCH_INSTANCE error, then skip it
				if (values[i].isError()) {
					// No value for this OID
					continue;
				}
				foundAValue = true;
				substitutions.setProperty(aliases.get(i), values[i].toString());
			}

			if (!foundAValue) {
				if (log().isDebugEnabled()) {
					log().debug("fetchSnmpAssetString: Failed to fetch any SNMP values for system " + agentConfig.toString());
				}
				throw new MissingFormatArgumentException("fetchSnmpAssetString: Failed to fetch any SNMP values for system " + agentConfig.toString());
			} else {
				log().debug("fetchSnmpAssetString: Fetched asset properties from SNMP agent:\n" + formatPropertiesAsString(substitutions));
			}

			if (objs.size() != substitutions.size()) {
				String props = formatPropertiesAsString(substitutions);
				log().warn("fetchSnmpAssetString: Unexpected number of properties returned from SNMP GET:\n" + props);
			}

			return PropertiesUtils.substitute(formatString, substitutions);
		} else {
			log().warn("fetchSnmpAssetString: Invalid number of SNMP parameters returned: " + values.length + " != " + aliases.size());
			throw new MissingFormatArgumentException("fetchSnmpAssetString: Invalid number of SNMP parameters returned: " + values.length + " != " + aliases.size());
		}
	}

