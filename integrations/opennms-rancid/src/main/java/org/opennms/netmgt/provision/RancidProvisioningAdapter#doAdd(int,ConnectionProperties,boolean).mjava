    public void doAdd(int nodeId, ConnectionProperties cp, boolean retry) throws ProvisioningAdapterException {
        log().debug("RANCID PROVISIONING ADAPTER CALLED addNode: nodeid: " + nodeId);
        try {
            final OnmsNode node = m_nodeDao.get(nodeId);                                                                                                                                                                                            
            Assert.notNull(node, "Rancid Provisioning Adapter addNode method failed to return node for given nodeId:"+nodeId);

            String ipaddress = (String) m_template.execute(new TransactionCallback() {
                public Object doInTransaction(TransactionStatus arg0) {
                    return getSuitableIpForRancid(node);
                }
            });

            m_onmsNodeIpMap.putIfAbsent(nodeId, ipaddress);


            RancidNode rNode = getSuitableRancidNode(node);
            
            if (m_onmsNodeRancidNodeMap.containsValue(rNode)) {
                log().warn("Rancid Provisioning Adapter: Error Duplicate node: " + node);
                ProvisioningAdapterException e = new ProvisioningAdapterException("Duplicate node has been provided: "+node); 
                sendAndThrow(nodeId, e);
                return;
            }

            rNode.setStateUp(true);

            m_onmsNodeRancidNodeMap.put(Integer.valueOf(nodeId), rNode);

            RWSClientApi.createRWSRancidNode(cp, rNode);
            RWSClientApi.createOrUpdateRWSAuthNode(cp, rNode.getAuth());
                        
        } catch (ProvisioningAdapterException ae) {    
            sendAndThrow(nodeId, ae);
        } catch (Exception e) {
            cp = getStandByRWSConnection();
            if (retry && cp != null) {
                log().info("Rancid Provisioning Adapter: retry Add on standByConn: " + cp.getUrl());
                doAdd(nodeId, cp, false);
            } else {
                sendAndThrow(nodeId, e);            
            }
        }
    }

