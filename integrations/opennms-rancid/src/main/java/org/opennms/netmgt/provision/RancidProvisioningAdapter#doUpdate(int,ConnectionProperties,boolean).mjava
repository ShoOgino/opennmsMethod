    public void doUpdate(int nodeId, ConnectionProperties cp, boolean retry) throws ProvisioningAdapterException {
        log().debug("RANCID PROVISIONING ADAPTER CALLED updateNode: nodeid: " + nodeId);
        try {
            OnmsNode node = m_nodeDao.get(nodeId);
            Assert.notNull(node, "Rancid Provisioning Adapter update Node method failed to return node for given nodeId:"+nodeId);
            
            RancidNode rNewNode = getSuitableRancidNode(node);
            // The node should exists onmsNodeRancidNodeMap 
            boolean stateUp = true;
            if (m_onmsNodeRancidNodeMap.containsKey(Integer.valueOf(nodeId))) {
                RancidNode rCurrentNode = m_onmsNodeRancidNodeMap.get(Integer.valueOf(nodeId));
                // set the state to the suitable state
                stateUp=rCurrentNode.isStateUp();
                rNewNode.setStateUp(false);
                // delete the current node if it is different
                if (!rCurrentNode.equals(rNewNode)) {
                    try {
                        RWSClientApi.deleteRWSRancidNode(cp, rCurrentNode);
                        RWSClientApi.deleteRWSAuthNode(cp, rCurrentNode.getAuth());                        
                    } catch (Exception e) {
                        log().error("RANCID PROVISIONING ADAPTER Failed to delete node: " + nodeId + " Exception: " + e.getMessage());
                    }
                }
            } else {
                rNewNode.setStateUp(true);
                m_onmsNodeRancidNodeMap.put(node.getId(), rNewNode);
            }
            
            
            RWSClientApi.createOrUpdateRWSRancidNode(cp, rNewNode);
            RWSClientApi.createOrUpdateRWSAuthNode(cp, rNewNode.getAuth());
            
            rNewNode.setStateUp(stateUp);
            m_onmsNodeRancidNodeMap.replace(node.getId(), rNewNode);
        } catch (Exception e) {
            cp = getStandByRWSConnection();
            if (retry && cp != null) {
                log().info("Rancid Provisioning Adapter: retry Update on standByConn: " + cp.getUrl());
                doUpdate(nodeId, cp, false);
            } else {
                sendAndThrow(nodeId, e);            
            }
        }
    }

