    public void doUpdate(int nodeId, ConnectionProperties cp, boolean retry) throws ProvisioningAdapterException {
        log().debug("RANCID PROVISIONING ADAPTER CALLED updateNode: nodeid: " + nodeId);
            
        RancidNode rLocalNode = m_onmsNodeRancidNodeMap.get(Integer.valueOf(nodeId));

        log().debug("RANCID PROVISIONING ADAPTER found Node in local map: " + rLocalNode.toString());
        
        try {
            RancidNode rRemoteNode = RWSClientApi.getRWSRancidNodeTLO(cp, rLocalNode.getGroup(), rLocalNode.getDeviceName());
            log().debug("RANCID PROVISIONING ADAPTER found Node in router.db : " + rRemoteNode.toString());
            if (!rLocalNode.getDeviceType().equalsIgnoreCase(rRemoteNode.getDeviceType())) {
                try {
                    // don't change the status of the node in update operation
                    rLocalNode.setStateUp(rRemoteNode.isStateUp());
                    log().debug("RANCID PROVISIONING ADAPTER updating router.db data");
                    RWSClientApi.updateRWSRancidNode(cp, rLocalNode);
                    if ( updateAuth(rLocalNode.getAuth(), RWSClientApi.getRWSAuthNode(cp, rLocalNode.getDeviceName())) ) {
                        log().debug("RANCID PROVISIONING ADAPTER updating authentication data");
                        RWSClientApi.updateRWSAuthNode(cp, rLocalNode.getAuth());                                                        
                    }
                } catch (Exception e) {
                    log().error("RANCID PROVISIONING ADAPTER Failed to update node: " + nodeId + " Exception: " + e.getMessage());
                }
            }
        } catch (RancidApiException re) {
            if (re.getRancidCode() ==RancidApiException.OTHER_ERROR) {
                log().info("RANCID PROVISIONING ADAPTER: addng the node: " + rLocalNode.toString());
                try {
                    RWSClientApi.createRWSRancidNode(cp, rLocalNode);
                    RWSClientApi.createOrUpdateRWSAuthNode(cp, rLocalNode.getAuth());
                } catch (RancidApiException e) {
                    log().error("RANCID PROVISIONING ADAPTER Failed to create node: " + nodeId + " Exception: " + e.getMessage());
                }
            } else {
                cp = getStandByRWSConnection();
                if (retry && cp != null) {
                    log().info("Rancid Provisioning Adapter: retry Update on standByConn: " + cp.getUrl());
                    doUpdate(nodeId, cp, false);
                } else {
                    sendAndThrow(nodeId, re);            
                }
            } 
        }
     
    }

