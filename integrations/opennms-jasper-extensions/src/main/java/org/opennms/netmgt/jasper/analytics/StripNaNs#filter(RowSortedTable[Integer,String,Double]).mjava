    @Override
    public void filter(RowSortedTable<Integer, String, Double> dsAsTable)
            throws Exception {
        // Excluding the Timestamp column, determine the
        // index of the first and last rows which don't contain
        // completely NaN values
        Set<String> columnNames = Sets.newHashSet(dsAsTable.columnKeySet());
        columnNames.remove("Timestamp");
        Point rowsWithValues = DataSourceUtils.getRowsWithValues(dsAsTable, columnNames.toArray(new String[0]));
        int firstRowWithValues = rowsWithValues.x;
        int lastRowWithValues = rowsWithValues.y;

        int numRowsInTable = dsAsTable.rowKeySet().size();
        columnNames = Sets.newHashSet(dsAsTable.columnKeySet());

        // Remove all of the trailing NaN rows
        for (int i = lastRowWithValues+1; i < numRowsInTable; i++) {
            for (String columnName : columnNames) {
                dsAsTable.remove(i, columnName);
            }
        }

        // Remove all of the leading NaN rows
        for (int i = 0; i < firstRowWithValues; i++) {
            for (String columnName : columnNames) {
                dsAsTable.remove(i, columnName);
            }
        }

        // Bump up the indices on the remaining rows
        if (firstRowWithValues > 0) {
            int j = 0;
            for (int i = firstRowWithValues; i <= lastRowWithValues; i++) {
                for (String columnName : columnNames) {
                    Double value = dsAsTable.get(i, columnName);
                    if (value != null) {
                        dsAsTable.put(j, columnName, value);
                    }
                    dsAsTable.remove(i, columnName);
                }
                j++;
            }
        }
    }

