    @Test
    public void testMeasurementDataSource() {
        MeasurementDataSource ds = new MeasurementDataSource(getClass().getResourceAsStream("/responses/response1.xml"));
        List<JRField> fields = ds.getFields();
        Assert.assertEquals(6, fields.size());
        Assert.assertEquals(-1, ds.getCurrentRow());
        Assert.assertEquals(6, ds.getRowCount());

        final Double[][] expectedValues = new Double[][] {
                {Double.NaN, Double.NaN},
                {Double.NaN, Double.NaN},
                {1.3, 2.3},
                {1.4, 2.4},
                {1.5, 2.5},
                {1.6, 2.6},
        };

        final Long[] expectedTimestamps = new Long[] {
                1439544100000L, 1439544200000L, 1439544300000L,
                1439544400000L, 1439544500000L, 1439544600000L
        };

        // to verify that moveFirst() is correctly implemented, we execute the test twice
        int runCount = 2;
        do {
            while (ds.next()) {
                // verify constant fields
                verifyField(ds, "step", Long.class, 1234567L);
                verifyField(ds, "start", Long.class, 1439539163433L);
                verifyField(ds, "end", Long.class, 1439557163433L);
                verifyField(ds, "timestamp", Date.class, new Date(expectedTimestamps[ds.getCurrentRow()]));

                // verify constant fields
                verifyField(ds, "IfHCInOctets", Double.class, expectedValues[ds.getCurrentRow()][0]);
                verifyField(ds, "IfHCOutOctets", Double.class, expectedValues[ds.getCurrentRow()][1]);
            }
            Assert.assertEquals(ds.getRowCount(), ds.getCurrentRow());
            ds.moveFirst();
        } while (--runCount > 0);
    }

