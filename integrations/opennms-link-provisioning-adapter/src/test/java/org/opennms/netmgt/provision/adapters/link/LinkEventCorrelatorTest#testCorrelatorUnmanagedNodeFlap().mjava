    @Test
    public void testCorrelatorUnmanagedNodeFlap() {
        OnmsLinkState ls = new OnmsLinkState( m_dataLinkInterface, LinkState.LINK_BOTH_UNMANAGED);
        expect(m_nodeLinkService.getLinkStateForInterface(m_dataLinkInterface)).andStubReturn(ls);
        
        LinkEventCorrelator correlator = new LinkEventCorrelator();
        correlator.setEventForwarder(m_eventIpcManager);
        correlator.setNodeLinkService(m_nodeLinkService);
        correlator.setEndPointConfigDao(m_endPointConfigDao);
        
        expect(m_nodeLinkService.getPrimaryAddress(1)).andStubReturn("192.168.0.1");
        expect(m_nodeLinkService.getPrimaryAddress(2)).andStubReturn("192.168.0.2");
        
        m_nodeLinkService.saveLinkState(new OnmsLinkState(m_dataLinkInterface, LinkState.LINK_NODE_UNMANAGED));
        m_nodeLinkService.saveLinkState(new OnmsLinkState(m_dataLinkInterface, LinkState.LINK_UP));
        m_nodeLinkService.saveLinkState(new OnmsLinkState(m_dataLinkInterface, LinkState.LINK_PARENT_NODE_UNMANAGED));

        replay();
        
        m_anticipator.anticipateEvent(m_regainedEvent);
        m_anticipator.anticipateEvent(m_unmanagedEvent);
        
        
        correlator.handleNodeGainedService(m_node1.getInterface("192.168.0.1").getService("EndPoint").createNewEvent());
        correlator.handleNodeGainedService(m_node2.getInterface("192.168.0.2").getService("EndPoint").createNewEvent());
        correlator.handleServiceDeleted(m_node1.getInterface("192.168.0.1").getService("EndPoint").createDeleteEvent());
        

        m_eventIpcManager.finishProcessingEvents();
        
        m_anticipator.verifyAnticipated();
        
        List<Parm> parms = m_anticipator.getAnticipatedEventsRecieved().get(0).getParmCollection();
        assertEquals(2, parms.size());
        int foundGood = 0;
        for (Parm p : parms) {
            if (p.getParmName().contentEquals(EventConstants.PARM_ENDPOINT1) || p.getParmName().contentEquals(EventConstants.PARM_ENDPOINT2)) {
                if (p.getValue().getContent().equals("pittsboro-1") || p.getValue().getContent().equals("pittsboro-2")) {
                    foundGood++;
                }
            }
        }

        assertEquals("expect 2 endpoint parms", 2, foundGood);
        verify();
    }

