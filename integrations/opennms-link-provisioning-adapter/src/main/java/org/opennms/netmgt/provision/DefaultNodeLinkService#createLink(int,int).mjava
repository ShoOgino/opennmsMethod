    @Transactional
    public void createLink(int nodeParentId, int nodeId) {
        log().info(String.format("adding link between node: %d and node: %d", nodeParentId, nodeId));
        OnmsNode parentNode = m_nodeDao.get(nodeParentId);
        Assert.notNull(parentNode, "node with id: " + nodeParentId + " does not exist");
        
        OnmsNode node = m_nodeDao.get(nodeId);
        Assert.notNull(node, "node with id: " + nodeId + " does not exist");
        
        OnmsCriteria criteria = new OnmsCriteria(DataLinkInterface.class);
        criteria.add(Restrictions.eq("nodeId", nodeId));
        criteria.add(Restrictions.eq("nodeParentId", nodeParentId));
        
        Collection<DataLinkInterface> dataLinkInterface = m_dataLinkDao.findMatching(criteria);
        
        if(dataLinkInterface.size() <= 0){
            DataLinkInterface dataLink = new DataLinkInterface();
            dataLink.setNodeId(nodeId);
            dataLink.setNodeParentId(nodeParentId);
            dataLink.setIfIndex(getPrimaryIfIndexForNode(node));
            dataLink.setParentIfIndex(getPrimaryIfIndexForNode(parentNode));
            dataLink.setStatus("G");
            dataLink.setLastPollTime(new Date());
            
            m_dataLinkDao.save(dataLink);
            m_dataLinkDao.flush();
            log().info(String.format("successfully added link into db for nodes %d and %d", nodeParentId, nodeId));
        }else {
           log().info(String.format("link between pointOne: %d and pointTwo %d already exists", nodeParentId, nodeId));  
        }
        
    }

