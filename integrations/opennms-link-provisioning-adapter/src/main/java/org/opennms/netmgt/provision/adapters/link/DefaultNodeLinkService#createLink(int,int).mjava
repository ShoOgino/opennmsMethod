    @Transactional
    public void createLink(int nodeParentId, int nodeId) {
        LogUtils.infof(this, "adding link between node: %d and node: %d", nodeParentId, nodeId);
        OnmsNode parentNode = m_nodeDao.get(nodeParentId);
        Assert.notNull(parentNode, "node with id: " + nodeParentId + " does not exist");
        
        OnmsNode node = m_nodeDao.get(nodeId);
        Assert.notNull(node, "node with id: " + nodeId + " does not exist");
        
        OnmsCriteria criteria = new OnmsCriteria(DataLinkInterface.class);
        criteria.add(Restrictions.eq("nodeId", nodeId));
        criteria.add(Restrictions.eq("nodeParentId", nodeParentId));
        
        Collection<DataLinkInterface> dataLinkInterface = m_dataLinkDao.findMatching(criteria);
        
        if(dataLinkInterface.size() <= 0){
            
            
            DataLinkInterface dataLink = new DataLinkInterface();
            dataLink.setNodeId(nodeId);
            dataLink.setNodeParentId(nodeParentId);
            dataLink.setIfIndex(getPrimaryIfIndexForNode(node));
            dataLink.setParentIfIndex(getPrimaryIfIndexForNode(parentNode));
            
            OnmsLinkState linkState = new OnmsLinkState();
            linkState.setDataLinkInterface(dataLink);
            
            boolean nodeParentEndPoint = nodeHasEndPointService(nodeParentId);
            boolean nodeEndPoint =  nodeHasEndPointService(nodeId);
            
            if(nodeParentEndPoint && nodeEndPoint) {
                dataLink.setStatus("G");
                linkState.setLinkState(LinkState.LINK_UP);
            }else {
                dataLink.setStatus("U");
                if(nodeEndPoint){
                    linkState.setLinkState(LinkState.LINK_PARENT_NODE_UNMANAGED);
                }else if(nodeParentEndPoint){
                    linkState.setLinkState(LinkState.LINK_NODE_UNMANAGED);
                }else{
                    linkState.setLinkState(LinkState.LINK_BOTH_UNMANAGED);
                }
            }
            dataLink.setLastPollTime(new Date());
            
            m_dataLinkDao.save(dataLink);
            
            m_linkStateDao.save(linkState);
            infof(this, "successfully added link into db for nodes %d and %d", nodeParentId, nodeId);
        } else {
            infof(this, "link between pointOne: %d and pointTwo %d already exists", nodeParentId, nodeId);  
        }
    }

