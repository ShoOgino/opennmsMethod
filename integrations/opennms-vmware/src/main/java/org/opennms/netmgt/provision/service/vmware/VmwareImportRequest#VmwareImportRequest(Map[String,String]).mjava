    public VmwareImportRequest(Map<String, String> params) {
        setHostname(params.get("host"));
        setUsername(params.get("username"));
        setPassword(params.get("password"));
        setLocation(params.get("location"));

        boolean importVMOnly = queryParameter(params, "importVMOnly", false);
        boolean importHostOnly = queryParameter(params, "importHostOnly", false);

        if (importHostOnly && importVMOnly) {
            throw new IllegalArgumentException("importHostOnly and importVMOnly can't be true simultaneously");
        }
        if (importHostOnly) {
            setPersistVMs(false);
        }
        if (importVMOnly) {
            setPersistHosts(false);
        }

        boolean importIPv4Only = queryParameter(params, "importIPv4Only", false);
        boolean importIPv6Only = queryParameter(params, "importIPv6Only", false);

        if (importIPv4Only && importIPv6Only) {
            throw new IllegalArgumentException("importIPv4Only and importIPv6Only can't be true simultaneously");
        }
        if (importIPv4Only) {
            setPersistIPv6(false);
        }
        if (importIPv6Only) {
            setPersistIPv4(false);
        }

        setTopologyPortGroups(queryParameter(params, "topologyPortGroups", false));
        setTopologyNetworks(queryParameter(params, "topologyNetworks", true));
        setTopologyDatastores(queryParameter(params, "topologyDatastores", true));

        setImportVMPoweredOn(queryParameter(params, "importVMPoweredOn", true));
        setImportVMPoweredOff(queryParameter(params, "importVMPoweredOff", false));
        setImportVMSuspended(queryParameter(params, "importVMSuspended", false));

        setImportHostPoweredOn(queryParameter(params, "importHostPoweredOn", true));
        setImportHostPoweredOff(queryParameter(params, "importHostPoweredOff", false));
        setImportHostStandBy(queryParameter(params, "importHostStandBy", false));
        setImportHostUnknown(queryParameter(params, "importHostUnknown", false));

        if (queryParameter(params, "importHostAll", false)) {
            setImportHostPoweredOn(true);
            setImportHostPoweredOff(true);
            setImportHostStandBy(true);
            setImportHostUnknown(true);
        }

        if (queryParameter(params, "importVMAll", false)) {
            setImportVMPoweredOff(true);
            setImportVMPoweredOn(true);
            setImportVMSuspended(true);
        }

        String path = params.get("path");
        if (path == null) {
            throw new IllegalArgumentException("path is required");
        }

        path = path.replaceAll("^/", "");
        path = path.replaceAll("/$", "");

        String[] pathElements = path.split("/");

        if (pathElements.length == 1) {
            if ("".equals(pathElements[0])) {
                setForeignSource("vmware-" + getHostname());
            } else {
                setForeignSource(pathElements[0]);
            }
        } else {
            throw new IllegalArgumentException("Error processing path element of URL (vmware://host[/foreign-source]?keyA=valueA;keyB=valueB;...)");
        }

        // get services to be added to host systems
        if (params.get(VMWARE_HOSTSYSTEM_SERVICES) != null) {
            setHostSystemServices(Arrays.asList(params.get(VMWARE_HOSTSYSTEM_SERVICES).split(",")));
        }

        // get services to be added to virtual machines
        if (params.get(VMWARE_VIRTUALMACHINE_SERVICES) != null) {
            setVirtualMachineServices(Arrays.asList(params.get(VMWARE_VIRTUALMACHINE_SERVICES).split(",")));
        }

        Map<String, String> customAttributes = new HashMap<>();
        for (String k : params.keySet()) {
            if (k.startsWith("_")) {
                customAttributes.put(k, params.get(k));
            }
        }
        setCustomAttributes(customAttributes);
    }

