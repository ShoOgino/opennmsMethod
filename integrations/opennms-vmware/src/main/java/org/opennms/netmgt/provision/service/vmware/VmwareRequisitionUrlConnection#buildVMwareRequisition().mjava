    /**
     * Builds the complete requisition object.
     *
     * @return the requisition object
     */

    private Requisition buildVMwareRequisition() {
        VmwareViJavaAccess vmwareViJavaAccess = null;

        // for now, set the foreign source to the specified vcenter host
        m_requisition = new Requisition(m_foreignSource);

        if ((m_username == null || "".equals(m_username)) || (m_password == null || "".equals(m_password))) {
            try {
                vmwareViJavaAccess = new VmwareViJavaAccess(m_hostname);
            } catch (MarshalException e) {
                logger.warn("Error initialising VMware connection to '{}': '{}'", m_hostname, e.getMessage());
                return m_requisition;
            } catch (ValidationException e) {
                logger.warn("Error initialising VMware connection to '{}': '{}'", m_hostname, e.getMessage());
                return m_requisition;
            } catch (IOException e) {
                logger.warn("Error initialising VMware connection to '{}': '{}'", m_hostname, e.getMessage());
                return m_requisition;
            }
        } else {
            vmwareViJavaAccess = new VmwareViJavaAccess(m_hostname, m_username, m_password);
        }

        try {
            vmwareViJavaAccess.connect();
        } catch (MalformedURLException e) {
            logger.warn("Error connecting VMware management server '{}': '{}'", m_hostname, e.getMessage());
            return m_requisition;
        } catch (RemoteException e) {
            logger.warn("Error connecting VMware management server '{}': '{}'", m_hostname, e.getMessage());
            return m_requisition;
        }

        try {
            int apiVersion = vmwareViJavaAccess.getMajorApiVersion();

            // get services to be added to host systems
            // m_hostSystemServices = getHostSystemServices(apiVersion);

            if (m_args != null && m_args.get(VMWARE_HOSTSYSTEM_SERVICES) != null) {
                m_hostSystemServices = m_args.get(VMWARE_HOSTSYSTEM_SERVICES).split(",");
            } else {
                m_hostSystemServices = new String[]{"VMware-ManagedEntity", "VMware-HostSystem", "VMwareCim-HostSystem"};
            }

            // get services to be added to virtual machines
            // m_virtualMachineServices = getVirtualMachineServices(apiVersion);

            if (m_args != null && m_args.get(VMWARE_VIRTUALMACHINE_SERVICES) != null) {
                m_virtualMachineServices = m_args.get(VMWARE_VIRTUALMACHINE_SERVICES).split(",");
            } else {
                m_virtualMachineServices = new String[]{"VMware-ManagedEntity", "VMware-VirtualMachine"};
            }

            iterateHostSystems(vmwareViJavaAccess, apiVersion);
            iterateVirtualMachines(vmwareViJavaAccess, apiVersion);
        } catch (RemoteException e) {
            logger.warn("Error retrieving managed objects from VMware management server '{}': '{}'", m_hostname, e.getMessage());
            return m_requisition;
        } finally {
            vmwareViJavaAccess.disconnect();
        }

        return m_requisition;
    }

