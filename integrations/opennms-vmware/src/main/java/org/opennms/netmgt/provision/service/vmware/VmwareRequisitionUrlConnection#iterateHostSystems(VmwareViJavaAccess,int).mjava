    /**
     * Iterates through the host systems and adds them to the requisition object.
     *
     * @param vmwareViJavaAccess the access/connection to use
     */
    private void iterateHostSystems(VmwareViJavaAccess vmwareViJavaAccess, int apiVersion) {
        ManagedEntity[] managedEntities = null;

        logger.debug("Starting to iterate Host Systems on VMware host {} ...", m_hostname);

        try {
            managedEntities = vmwareViJavaAccess.searchManagedEntities("HostSystem");
        } catch (RemoteException e) {
            logger.error("Error iterating Host Systems on VMware host {}", m_hostname);
            logger.error("Exception thrown while iterating for Host Systems: ", e);
        }

        if (managedEntities != null) {

            Arrays.stream(managedEntities)
                    .map(m -> (HostSystem) m)
                    .forEach(hostSystem -> {
                                synchronized (m_hostSystemMap) {
                                    m_hostSystemMap.put(hostSystem.getMOR().getVal(), hostSystem.getName());
                                }
                            }
                    );

            final ExecutorService executor = Executors.newFixedThreadPool(Math.min(managedEntities.length, 10));

            final List<CompletableFuture<Optional<RequisitionNode>>> completableFutures = Arrays.stream(managedEntities)
                    .map(managedEntity -> (HostSystem) managedEntity)
                    .filter(hostSystem -> checkHostPowerState(hostSystem))
                    .filter(hostSystem -> checkForAttribute(hostSystem))
                    .map(hostSystem -> CompletableFuture.supplyAsync(() -> {
                        logger.debug("Adding Host System '{}' (ID: {})", hostSystem.getName(), hostSystem.getMOR().getVal());

                        TreeSet<String> ipAddresses = vmwareViJavaAccess.getHostSystemIpAddresses(hostSystem);
                        logger.debug("Found {} IP addresses for Host System '{}' (ID: {}): {}", ipAddresses.size(), hostSystem.getName(), hostSystem.getMOR().getVal(), ipAddresses);

                        RequisitionNode node = createRequisitionNode(ipAddresses, hostSystem, apiVersion, vmwareViJavaAccess);

                        try {
                            node.putAsset(new RequisitionAsset("cpu", hostSystem.getHardware().getCpuInfo().getNumCpuCores() + " cores"));
                        } catch (Exception e) {
                            logger.debug("Can't find CPU information for '{}' (ID: {})", hostSystem.getName(), hostSystem.getMOR().getVal());
                        }

                        try {
                            node.putAsset(new RequisitionAsset("ram", Math.round(hostSystem.getHardware().getMemorySize() / 1000000f) + " MB"));
                        } catch (Exception e) {
                            logger.debug("Can't find Memory information for '{}' (ID: {})", hostSystem.getName(), hostSystem.getMOR().getVal());
                        }

                        return m_persistHosts ? Optional.of(node) : Optional.<RequisitionNode>empty();

                    }, executor))
                    .collect(Collectors.toList());

            completableFutures.stream()
                    .map(CompletableFuture::join)
                    .filter(Optional::isPresent)
                    .forEach(m -> {
                        synchronized (m_requisition) {
                            m_requisition.insertNode(m.get());
                        }
                    });

            executor.shutdown();
        }
    }

