    @Override
    public Map<String, Object> getRequiredBeans() {
        final OnmsNode node = mock(OnmsNode.class, RETURNS_DEEP_STUBS);
        final NodeDao nodeDao = mock(NodeDao.class);
        final MockTransactionTemplate mockTransactionTemplate = new MockTransactionTemplate();
        mockTransactionTemplate.afterPropertiesSet();
        when(nodeDao.get(anyInt())).thenReturn(node);

        when(node.findMetaDataForContextAndKey(VmwareImporter.METADATA_CONTEXT, VmwareImporter.METADATA_MANAGEMENT_SERVER)).thenReturn(Optional.of(new OnmsMetaData(VmwareImporter.METADATA_CONTEXT, "", "mdx")));
        when(node.findMetaDataForContextAndKey(VmwareImporter.METADATA_CONTEXT, VmwareImporter.METADATA_MANAGED_ENTITY_TYPE)).thenReturn(Optional.of(new OnmsMetaData(VmwareImporter.METADATA_CONTEXT, "", "tsx")));
        when(node.getForeignId()).thenReturn("rsx");

        VmwareCollection collection = new VmwareCollection();
        VmwareDatacollectionConfigDao vmwareDatacollectionConfigDao = mock(VmwareDatacollectionConfigDao.class);
        when(vmwareDatacollectionConfigDao.getVmwareCollection(COLLECTION)).thenReturn(collection);
        when(vmwareDatacollectionConfigDao.getRrdRepository(COLLECTION)).thenReturn(new RrdRepository());

        VmwareServer vmwareServer = new VmwareServer();
        vmwareServer.setHostname(InetAddrUtils.getLocalHostAddress().getCanonicalHostName());
        Map<String, VmwareServer> serverMap = new ImmutableMap.Builder<String, VmwareServer>()
            .put("mdx", vmwareServer)
            .build();

        VmwareConfigDao vmwareConfigDao = mock(VmwareConfigDao.class);
        when(vmwareConfigDao.getServerMap()).thenReturn(serverMap);

        return new ImmutableMap.Builder<String, Object>()
                .put("nodeDao", nodeDao)
                .put("vmwareDatacollectionConfigDao", vmwareDatacollectionConfigDao)
                .put("vmwareConfigDao", vmwareConfigDao)
                .put("transactionTemplate", mockTransactionTemplate)
                .build();
    }

