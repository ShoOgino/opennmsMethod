    /**
     * {@inheritDoc}
     *
     * Gets ticket details from the RT trouble ticket system
     */
    public Ticket get(String ticketId) throws PluginException {

        boolean ticketFound = false;

        Ticket ticket = null;

        HashMap<String,String> ticketAttributes = new HashMap<String,String>();
        // don't try to get ticket if it's marked as not available

        if (ticketId == null)  {

            log().error("No RT ticketID available in OpenNMS Ticket");
            throw new PluginException("No RT ticketID available in OpenNMS Ticket");

        } else {

            HttpPost post = new HttpPost(m_configDao.getBaseURL() + "/REST/1.0/ticket/" + ticketId);

            List<NameValuePair> params = new ArrayList<NameValuePair>();
            params.add(new BasicNameValuePair("user", m_user));
            params.add(new BasicNameValuePair("pass", m_password));
            try {
                UrlEncodedFormEntity entity = new UrlEncodedFormEntity(params, "UTF-8");
                post.setEntity(entity);
            } catch (UnsupportedEncodingException e) {
                // Should never happen
            }

            try {
                HttpResponse response = getClient().execute(post);
                if(response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {
                    throw new PluginException("Received a non 200 response code from the server");
                } else {
                    String in = EntityUtils.toString(response.getEntity());
                    log().debug(in);
                    Pattern inTokensPattern = Pattern.compile("^(\\w+):\\s(.*)$", Pattern.MULTILINE);
                    Matcher matcher = inTokensPattern.matcher(in);
                    while (matcher.find()) {
                        ticketFound = true;
                        ticketAttributes.put(matcher.group(1), matcher.group(2));
                    } 
                } 
            } catch (IOException e) {
                log().error("HTTP exception attempting to logon to RT: " + e.getMessage(), e);
            } finally {
                // Do we need to do any cleanup?
                // post.releaseConnection();
            }

        }

        if (ticketFound) {
            ticket = new Ticket();
            ticket.setState(rtToOpenNMSState(ticketAttributes.get("Status")));
            ticket.setId(ticketId);
            ticket.setUser(ticketAttributes.get("Requestors"));
            ticket.setSummary(ticketAttributes.get("Subject"));
        } else {
            throw new PluginException("could not find ticket in RT for Ticket: " + ticketId);
        }

        return ticket;

    }

