    /**
     * Convenience method for creating a new ticket in RT
     * 
     * @param   ticket      the ticket details
     * @return  the RT ticket id for the new ticket
     */

    private String newRtTicket(Ticket newTicket) throws PluginException {

        String rtTicketNumber = null;

        // Remove any HTML tags in the ticket details.

        Pattern tagPattern = Pattern.compile(TAG_REGEX);
        Matcher tagMatcher = tagPattern.matcher(newTicket.getDetails());
        String rtTicketText = tagMatcher.replaceAll("");

        StringBuilder contentBuilder = new StringBuilder("id: ticket/new\n");
        contentBuilder.append("Queue: " + m_configDao.getQueue() + "\n");
        contentBuilder.append("Requestor: " + m_configDao.getRequestor() + "\n");
        contentBuilder.append("Subject: " + newTicket.getSummary() + "\n");
        contentBuilder.append("text: " + rtTicketText + "\n");

        HttpPost post = new HttpPost(m_configDao.getBaseURL() + "/REST/1.0/edit");

        List<NameValuePair> params = new ArrayList<NameValuePair>();
        params.add(new BasicNameValuePair("content", contentBuilder.toString()));
        params.add(new BasicNameValuePair("user", m_user));
        params.add(new BasicNameValuePair("pass", m_password));
        try {
            UrlEncodedFormEntity entity = new UrlEncodedFormEntity(params, "UTF-8");
            post.setEntity(entity);
        } catch (UnsupportedEncodingException e) {
            // Should never happen
        }

        try {
            HttpResponse response = getClient().execute(post);
            if(response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {
                throw new PluginException("Received a non 200 response code from the server");
            } else {
                String in = EntityUtils.toString(response.getEntity());
                log().debug(in);
                Pattern okPattern = Pattern.compile("(?s) Ticket (\\d+) created");
                Matcher matcher = okPattern.matcher(in);
                if (matcher.find()) {
                    rtTicketNumber = matcher.group(1);
                } else {
                    throw new PluginException("Did not receive confirmation that ticket was updated");
                }
            } 
        } catch (IOException e) {
            log().error("IO exception attempting to logon to RT: " + e.getMessage(), e);
        } finally {
            // Do we need to do any cleanup?
            // post.releaseConnection();
        }

        if (rtTicketNumber == null) {
            throw new PluginException("Received no ticket number from RT");
        } 

        return rtTicketNumber;

    }

