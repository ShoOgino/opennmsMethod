    private void doDelete(Integer nodeid) {
        m_nodeId = nodeid;
        log().debug("doDelete: deleting mapElements from the automated maps for the node with nodeid:" + m_nodeId);
        try {
            m_template.execute(new TransactionCallback() {
                public Object doInTransaction(TransactionStatus arg0) {
                    try {                        
                        Collection<OnmsMapElement> elems = m_onmsMapElementDao.findElementsByElementIdAndType(m_nodeId, OnmsMapElement.NODE_TYPE);
                        elems.addAll(m_onmsMapElementDao.findElementsByElementIdAndType(m_nodeId, OnmsMapElement.NODE_HIDE_TYPE));
                        for (OnmsMapElement elem: elems) {
                            log().debug("doDelete: deleting element with label: '" + elem.getLabel() + "' from automated map: '" + elem.getMap().getName()+ "'");
                            Integer mapId = elem.getMap().getId();
                            m_onmsMapElementDao.delete(elem);
                            m_onmsMapElementDao.flush();
                            
                            OnmsMap onmsMap = m_onmsMapDao.findMapById(mapId);
                            onmsMap.setLastModifiedTime(new Date());
                            m_onmsMapDao.update(onmsMap);
                            m_onmsMapDao.flush();
                            if (onmsMap.getMapElements().size() == 0)
                                removeEmptySubmap(onmsMap);

                        }
                        m_onmsMapDao.clear();
                        m_onmsMapElementDao.clear();
                    } catch (Exception e) {
                        log().error(e.getMessage());
                    }
                    return null;
                }
            });
        } catch (Exception e) {
            sendAndThrow(m_nodeId, e);
        }
    }

