    /* (non-Javadoc)
     * @see org.opennms.netmgt.provision.ProvisioningAdapter#addNode(org.opennms.netmgt.model.OnmsNode)
     */
    @Transactional
    public void addNode(int nodeId) throws ProvisioningAdapterException {
        log().debug("Map PROVISIONING ADAPTER CALLED addNode");        
        try {
            OnmsNode node = m_onmsNodeDao.get(nodeId);
            m_mapsAdapterConfig.rebuildPackageIpListMap();
            Map<String, Celement> celements = m_mapsAdapterConfig.getElementByAddress((getSuitableIpForMap(node)));
            if (celements.isEmpty()) {
                log().info("Element is not managed in the adapter: nodeid="+nodeId);
            } else {
            Iterator<String> ite = celements.keySet().iterator();
            while (ite.hasNext()) {
                String mapName = ite.next();
                Celement celement = celements.get(mapName);
                OnmsMap onmsMap = getSuitableMap(mapName);
                if (onmsMap.isNew()) {
                    throw new Exception("Error adding element. Map does not exist: " + mapName);
                } else {
                    if (onmsMap.getMapElements().size() == 0) {
                        addAsSubMap(mapName);
                    }
                    XY xy=getXY(onmsMap);
                    OnmsMapElement mapElement = new OnmsMapElement(onmsMap,nodeId,OnmsMapElement.NODE_TYPE,node.getLabel(),celement.getIcon(),xy.getX(),xy.getY());
                    m_onmsMapElementDao.saveOrUpdate(mapElement);
                    m_onmsMapElementDao.flush();
                    onmsMap.setLastModifiedTime(new Date());
                    m_onmsMapDao.update(onmsMap);
                    m_onmsMapDao.flush();
                }
            }
            m_onmsMapElementDao.clear();
            m_onmsMapDao.clear();
            }
        } catch (Exception e) {
            sendAndThrow(nodeId, e);
        }
    }

