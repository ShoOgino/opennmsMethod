    private void addOrUpdate() throws Exception {
        OnmsNode node = m_onmsNodeDao.get(m_nodeId);
        if (node == null) throw new Exception("Error Adding element. Node does not exist: nodeid: " + m_nodeId);
        Map<String, Celement> celements = m_mapsAdapterConfig.getElementByAddress((getSuitableIpForMap(node)));
        if (celements.isEmpty()) {
            log().info("Element is not managed in the adapter: nodeid="+m_nodeId);
        } else {
            Iterator<String> ite = celements.keySet().iterator();
            while (ite.hasNext()) {
                String mapName = ite.next();
                Celement celement = celements.get(mapName);
                OnmsMap onmsMap = getSuitableMap(mapName);
                if (onmsMap.isNew()) {
                    throw new Exception("Error adding element. Map does not exist: " + mapName);
                } else {
                    if (onmsMap.getMapElements().size() == 0) {
                        addAsSubMap(mapName);
                    }
                    OnmsMapElement mapElement = m_onmsMapElementDao.findMapElement(m_nodeId, OnmsMapElement.NODE_TYPE,onmsMap);
                    if (mapElement == null) {
                        int elementsize = m_mapNameMapSizeListMap.get(mapName);
                        log().debug("Element is new: found #" + elementsize + " on map: " + mapName);
                        XY xy=getXY(onmsMap, elementsize);
                        mapElement = new OnmsMapElement(onmsMap,m_nodeId,OnmsMapElement.NODE_TYPE,node.getLabel(),celement.getIcon(),xy.getX(),xy.getY());
                        m_mapNameMapSizeListMap.replace(mapName, ++elementsize);
                        log().debug("doAddOrUpdate: adding node: " + node.getLabel() + " to map: " + mapName);
                    } else {
                        mapElement.setIconName(celement.getIcon());
                        mapElement.setLabel(node.getLabel());
                        log().debug("doAddOrUpdate: updating node: " + node.getLabel() + " to map: " + mapName);
                    }
                    m_onmsMapElementDao.saveOrUpdate(mapElement);
                    m_onmsMapElementDao.flush();
                    onmsMap.setLastModifiedTime(new Date());
                    m_onmsMapDao.update(onmsMap);
                    m_onmsMapDao.flush();
                    updateNodeMapElementList(Integer.valueOf(m_nodeId), mapElement);
                }
            }
            m_onmsMapElementDao.clear();
            m_onmsMapDao.clear();
        }

    }

