    private void addSubMap(OnmsMap onmsMap, Csubmap csubmap, OnmsMap onmsSubMap, String type) {
        log().debug("addSubMap: adding automated submap: " + onmsSubMap.getName() + " to map: " + onmsMap.getName());
        if (!onmsMap.getMapElements().isEmpty()) {
            log().debug("addSubMap: looping on elements of not empty map: " + onmsMap.getName());
            for (OnmsMapElement elem: onmsMap.getMapElements()) {
                log().debug("addSubMap: checking element with id: " + elem.getElementId() + " and type" + elem.getType());
                if (elem.getElementId() == onmsSubMap.getId() && 
                        (elem.getType().equals(OnmsMapElement.MAP_TYPE) || elem.getType().equals(OnmsMapElement.MAP_HIDE_TYPE))) {
                    log().debug("addSubMap: still exists in map skipping");
                    return;
                }
            }
        }

        XY xy = new XY();
        if (csubmap.hasX() && csubmap.hasY()) {
            xy.setX(csubmap.getX());
            xy.setY(csubmap.getY());
        } else {
            int elementsize = m_mapNameMapSizeListMap.get(onmsMap.getName());
            xy=getXY(onmsMap, elementsize);
            m_mapNameMapSizeListMap.replace(onmsMap.getName(), ++elementsize);
        }
        
        OnmsMapElement mapElement = 
                new OnmsMapElement(onmsMap,onmsSubMap.getId(),type,csubmap.getLabel(),csubmap.getIcon(),xy.getX(),xy.getY());
        
        m_onmsMapElementDao.saveOrUpdate(mapElement);
 
        log().debug("added map element with id: " + mapElement.getId());
        log().debug("               with label: " + mapElement.getLabel());
        log().debug("                with icon: " + mapElement.getIconName());
        log().debug("                   with X: " + mapElement.getX());
        log().debug("                   with Y: " + mapElement.getY());
        m_onmsMapElementDao.flush();        
        m_onmsMapElementDao.clear();
    }

