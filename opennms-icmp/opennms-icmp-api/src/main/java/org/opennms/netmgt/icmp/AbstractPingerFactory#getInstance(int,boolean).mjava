    public Pinger getInstance(final int tc, final boolean allowFragmentation) {
        final int isFrag = allowFragmentation? FRAG_TRUE : FRAG_FALSE;
        final Class<? extends Pinger> clazz;

        try {
            clazz = getPingerClass();
        } catch (final RuntimeException e) {
            IllegalArgumentException ex = new IllegalArgumentException("Unable to find class named " + System.getProperty("org.opennms.netmgt.icmp.pingerClass", "org.opennms.netmgt.icmp.jni6.Jni6Pinger"), e);
            LOG.error(ex.getLocalizedMessage(), ex);
            throw ex;
        }

        try {
            return m_pingers.get((tc + 1) * isFrag, new Callable<Pinger>() {
                @Override
                public Pinger call() throws Exception {
                    final Pinger pinger = clazz.newInstance();
                    pinger.setTrafficClass(tc);
                    return pinger;
                }
            });
        } catch (final Throwable e) {
            final IllegalArgumentException ex;
            if (e.getCause() instanceof InstantiationException) {
                ex = new IllegalArgumentException("Error trying to create pinger of type " + clazz, e.getCause());
            } else if (e.getCause() instanceof IllegalAccessException) {
                ex = new IllegalArgumentException("Unable to create pinger of type " + clazz + ".  It does not appear to have a public constructor", e);
            } else {
                ex = new IllegalArgumentException("Unexpected exception thrown while trying to create pinger of type " + clazz, e);
            }
            LOG.error(ex.getLocalizedMessage(), ex);
            throw ex;
        }
    }

