    /**
     * Initialize a Pinger object, specifying the timeout and retries.
     * @param defaultTimeout the timeout, in milliseconds, to wait for returned packets.
     * @param defaultRetries the number of times to retry a given ping packet
     * @throws IOException
     */
	public Pinger() throws IOException {
		synchronized (Pinger.class) {
			if (worker == null) {
			    final FifoQueueImpl<Reply> queue = new FifoQueueImpl<Reply>();
				icmpSocket = new IcmpSocket();
                receiver = new ReplyReceiver(icmpSocket, queue, PingRequest.FILTER_ID);
                receiver.start();
				
                worker = new Thread(new Runnable() {
                    public void run() {
                        for (;;) {
                        	long waitTime = minimumWaitTime();
                        	log().info("minimum wait time: " + waitTime);
                        	if (waitTime > 0) {
                        	    try {
                                    Reply pong = queue.remove(waitTime);
                                    if (pong != null) {
                                        processReply(pong);
                                    }
                        	    } catch (InterruptedException ie) {
                        	        break;
                        	    } catch (FifoQueueException fqe) {
                        	        log().error("Error processing response queue", fqe);
                        	    }
                        	} else if (waitTime == -1L) {
                        	    try {
                                    Thread.sleep(DEFAULT_WAIT_TIME);
                                } catch (InterruptedException e) {
                                    log().info("interrupted while waiting for new packets to handle", e);
                                }
                        	} else {
                        	    processTimeouts();
                        	}
                        }
                    }
                });
                worker.setDaemon(true);
                worker.start();
			}
			
		}
	}

