    /**
     * Initialize a Pinger object, specifying the timeout and retries.
     * @param timeout the timeout, in milliseconds, to wait for returned packets.
     * @param retries the number of times to retry a given ping packet
     * @throws IOException
     */
	public Pinger(int timeout, int retries) throws IOException {
		this.timeout = timeout;
		this.retries = retries;
		synchronized (Pinger.class) {
			if (worker == null) {
			    final FifoQueueImpl<Reply> queue = new FifoQueueImpl<Reply>();
				icmpSocket = new IcmpSocket();
                receiver = new ReplyReceiver(icmpSocket, queue, FILTER_ID);
                receiver.start();
				
                worker = new Thread(new Runnable() {
                    public void run() {
                        for (;;) {
                            Reply pong = null;
                            try {
                                pong = queue.remove();
                            } catch (InterruptedException ex) {
                                break;
                            } catch (Exception ex) {
                                ThreadCategory.getInstance(this.getClass()).error("Error processing response queue", ex);
                            }

                            ICMPEchoPacket pongPacket = pong.getPacket();
                            Long key = new Long(pongPacket.getTID());
                            short sid = pongPacket.getSequenceId();
                            PingRequest ping = null;
                            if (waiting.containsKey(key)) {
                            	PingRequest p = waiting.get(key);
                            	if (p != null && p.isTarget(pong.getAddress(), sid)) {
                            		ping = p;
                            	}
                            } else if (parallelWaiting.containsKey(key)) {
                            	ArrayList list = parallelWaiting.get(key);
                            	for (int i = 0; i < list.size(); i++) {
                            		PingRequest p = (PingRequest)list.get(i);
                            		if (p != null && p.isTarget(pong.getAddress(), sid)) {
                            			ping = p;
                            		}
                            	}
                            } else {
                            	// hmm, should we do anything in this case?
                            }

                            if (ping != null) {
                            	ping.setPacket(pong.getPacket());
                            	ping.signal();
                            }
                        }
                    }
                });
                worker.setDaemon(true);
                worker.start();
			}
			
		}
	}

