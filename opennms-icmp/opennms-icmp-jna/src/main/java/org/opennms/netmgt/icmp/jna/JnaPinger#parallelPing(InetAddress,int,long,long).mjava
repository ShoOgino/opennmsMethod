	/**
	 * <p>parallelPing</p>
	 *
	 * @param host a {@link java.net.InetAddress} object.
	 * @param count a int.
	 * @param timeout a long.
	 * @param pingInterval a long.
	 * @return a {@link java.util.List} object.
	 * @throws java.lang.Exception if any.
	 */
	public List<Number> parallelPing(InetAddress host, int count, long timeout, long pingInterval) throws Exception {
		initialize();
		ParallelPingResponseCallback cb = new ParallelPingResponseCallback(count);

		if (timeout == 0) {
			timeout = DEFAULT_TIMEOUT;
		}

		long threadId = JnaPingRequest.getNextTID();
		for (int seqNum = 0; seqNum < count; seqNum++) {
		    JnaPingRequest request = new JnaPingRequest(host, m_pingerId, seqNum, threadId, timeout, 0, cb);
			m_pingTracker.sendRequest(request);
			Thread.sleep(pingInterval);
		}

		cb.waitFor();
		return cb.getResponseTimes();
	}

