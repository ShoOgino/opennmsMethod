    private PingSummaryCalculator createCalculator(int numberRequests, int numberErrors, int numberTimeouts) {
        Preconditions.checkArgument(numberErrors + numberTimeouts < numberRequests, "numberErrors + numberTimeouts must not be greater than numberRequests");
        Preconditions.checkArgument(numberErrors >= 0, "numberErrors must be >= 0");
        Preconditions.checkArgument(numberTimeouts >= 0, "numberTimeouts must be >= 0");

        final List<PingSequence> sequences = Lists.newArrayList();
        for (int i=0; i<numberRequests; i++) {
            if (numberErrors > 0) {
                sequences.add(new PingSequence(i, new Exception()));
                numberErrors--;
            } else if (numberTimeouts > 0) {
                final PingResponse timeoutResponse = new PingResponse();
                timeoutResponse.setRtt(Double.POSITIVE_INFINITY);
                sequences.add(new PingSequence(i, timeoutResponse));
                numberTimeouts--;
            } else {
                final PingResponse pingResponse = new PingResponse();
                pingResponse.setRtt(1000);
                sequences.add(new PingSequence(i, pingResponse));
            }
        }
        Assert.assertEquals(numberRequests, sequences.size());
        return new PingSummaryCalculator(sequences);
    }

