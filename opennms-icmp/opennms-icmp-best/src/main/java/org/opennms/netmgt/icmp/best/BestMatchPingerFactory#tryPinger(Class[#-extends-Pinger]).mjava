    private static PingerMatch tryPinger(final Class<? extends Pinger> pingerClass) {
        boolean v4 = false;
        boolean v6 = false;

        final Pinger pinger;
        try {
            pinger = pingerClass.newInstance();
        } catch (final Throwable t) {
            LOG.info("Failed to get instance of {}: {}", pingerClass, t.getMessage());
            LOG.trace("Failed to get instance of {}.", pingerClass, t);
            return PingerMatch.NONE;
        }

        try {
            if (pinger.isV4Available()) {
                pinger.initialize4();
                v4 = true;
            }
        } catch (final Throwable t) {
            LOG.info("Failed to initialize {} for IPv4: ", pingerClass, t.getMessage());
            LOG.trace("Failed to initialize {} for IPv4.", pingerClass, t);
        }

        try {
            if (pinger.isV6Available()) {
                pinger.initialize6();
                v6 = true;
            }
        } catch (final Throwable t) {
            LOG.info("Failed to initialize {} for IPv4: {}", pingerClass, t.getMessage());
            LOG.trace("Failed to initialize {} for IPv4.", pingerClass, t);
        }

        final long timeout = Long.valueOf(System.getProperty("org.opennms.netmgt.icmp.best.timeout", "500"), 10);

        // try the found loopback, fall back to 127.0.0.1 or ::1 as a last resort
        for (final InetAddress tryme : new InetAddress[] { LOOPBACK, addr("127.0.0.1"), addr("::1") }) {
            try {
                final Number result = pinger.ping(tryme, timeout, 0);
                if (result == null) {
                    throw new IllegalStateException("No result pinging localhost.");
                }

                // as long as we have v4 and/or v6, return success if pinger.ping() passes
                if (v4 && v6) {
                    return PingerMatch.IPv46;
                } else if (v6) {
                    return PingerMatch.IPv6;
                } else if (v4) {
                    return PingerMatch.IPv4;
                }
            } catch (final Throwable t) {
                LOG.info("Found pinger {}, but it was unable to ping localhost: {}", pingerClass, t.getMessage());
                LOG.trace("Pinger failure:", t);
            }
        }

        // if none of the loopback addresses works, give up
        return PingerMatch.NONE;
    }

