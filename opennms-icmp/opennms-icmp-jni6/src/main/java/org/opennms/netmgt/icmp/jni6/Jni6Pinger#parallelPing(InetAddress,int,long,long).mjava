	/**
	 * <p>parallelPing</p>
	 *
	 * @param host a {@link java.net.InetAddress} object.
	 * @param count a int.
	 * @param timeout a long.
	 * @param pingInterval a long.
	 * @return a {@link java.util.List} object.
	 * @throws java.lang.Exception if any.
	 */
	public List<Number> parallelPing(InetAddress host, int count, long timeout, long pingInterval) throws Exception {
	    initialize();
	    
	    if (host instanceof Inet4Address) {
	        return m_jniPinger.parallelPing(host, count, timeout, pingInterval);
	    } else {
	        Inet6Address host6 = (Inet6Address)host;

	        ParallelPingResponseCallback cb = new ParallelPingResponseCallback(count);

	        if (timeout == 0) {
	            timeout = DEFAULT_TIMEOUT;
	        }

	        long threadId = Jni6PingRequest.getNextTID();
	        for (int seqNum = 0; seqNum < count; seqNum++) {
	            Jni6PingRequest request = new Jni6PingRequest(host6, m_pingerId, seqNum, threadId, timeout, 0, cb);
	            s_pingTracker.sendRequest(request);
	            Thread.sleep(pingInterval);
	        }

	        cb.waitFor();
	        return cb.getResponseTimes();

	    }
	}

