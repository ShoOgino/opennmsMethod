    /**
     * <p>parallelPing</p>
     *
     * @param host a {@link java.net.InetAddress} object.
     * @param count a int.
     * @param timeout a long.
     * @param pingInterval a long.
     * @return a {@link java.util.List} object.
     * @throws java.lang.Exception if any.
     */
    @Override
    public List<Number> parallelPing(final InetAddress host, final int count, final long timeout, final long pingInterval) throws Exception {
        initialize();
        final ParallelPingResponseCallback cb = new ParallelPingResponseCallback(count);

        final long threadId = JniPingRequest.getNextTID();
        for (int seqNum = 0; seqNum < count; seqNum++) {
            final JniPingRequest request = new JniPingRequest(host, m_pingerId, seqNum, threadId, timeout == 0? DEFAULT_TIMEOUT : timeout, 0, DEFAULT_PACKET_SIZE, cb);
            s_pingTracker.sendRequest(request);
            Thread.sleep(pingInterval);
        }

        cb.waitFor();
        return cb.getResponseTimes();
    }

