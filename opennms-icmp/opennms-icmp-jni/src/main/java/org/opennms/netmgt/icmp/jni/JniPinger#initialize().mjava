    /**
     * Initializes this singleton
     *
     * @throws java.io.IOException if any.
     */
    private synchronized void initialize() throws Exception {
        if (s_pingTracker != null) return;
        try {
            m_messenger = new JniIcmpMessenger(m_pingerId);
            s_pingTracker = Logging.withPrefix("icmp", new Callable<RequestTracker<JniPingRequest, JniPingResponse>>() {

                @Override public RequestTracker<JniPingRequest, JniPingResponse> call() throws Exception {
                    return new RequestTracker<JniPingRequest, JniPingResponse>("JNI-ICMP-"+m_pingerId, m_messenger, new IDBasedRequestLocator<JniPingRequestId, JniPingRequest, JniPingResponse>());
                }
            });
            s_pingTracker.start();
        } catch (final IOException ioe) {
            m_error = ioe;
            final String errorMessage = m_error.getMessage().toLowerCase();
            if (errorMessage.contains("permission denied") || errorMessage.contains("operation not permitted")) {
                LOG.error("Permission error received while attempting to open ICMP socket. See https://wiki.opennms.org/wiki/ICMP for information on configuring ICMP for non-root.");
            }
            s_pingTracker = null;
            throw ioe;
        } catch (final RuntimeException rte) {
            m_error = rte;
            s_pingTracker = null;
            throw rte;
        }
    }

