    @Override
    public <S extends RpcRequest, T extends RpcResponse> RpcClient<S,T> getClient(RpcModule<S,T> module) {
        return new RpcClient<S,T>() {
            @Override
            public CompletableFuture<T> execute(S request) {
                if (request.getLocation() == null || request.getLocation().equals(location)) {
                    // The request is for the current location, invoke it directly
                    return module.execute(request);
                }

                // Wrap the request in a CamelRpcRequest and forward it to the Camel route
                final CompletableFuture<T> future = new CompletableFuture<>();
                template.asyncCallbackSendBody(endpoint, new CamelRpcRequest<>(module, request), new Synchronization() {
                    @Override
                    public void onComplete(Exchange exchange) {
                        try {
                            future.complete(module.unmarshalResponse(exchange.getOut().getBody(String.class)));
                        } catch (Throwable ex) {
                            future.completeExceptionally(ex);
                        }
                    }
                    @Override
                    public void onFailure(Exchange exchange) {
                        // Wrap timeout exceptions within a RequestTimedOutException
                        final ExchangeTimedOutException timeoutException = exchange.getException(ExchangeTimedOutException.class);
                        if (timeoutException != null) {
                            future.completeExceptionally(new RequestTimedOutException(exchange.getException()));
                        } else {
                            future.completeExceptionally(exchange.getException());
                        }
                    }
                });
                return future;
            }
        };
    }

