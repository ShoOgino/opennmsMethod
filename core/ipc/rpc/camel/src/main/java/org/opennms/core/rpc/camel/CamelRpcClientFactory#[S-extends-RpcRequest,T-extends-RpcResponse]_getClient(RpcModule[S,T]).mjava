    @Override
    public <S extends RpcRequest, T extends RpcResponse> RpcClient<S,T> getClient(RpcModule<S,T> module) {
        return new RpcClient<S,T>() {
            @Override
            public CompletableFuture<T> execute(S request) {

                if (request.getLocation() == null || request.getLocation().equals(location)) {
                    // The request is for the current location, invoke it directly
                    return module.execute(request);
                }
                Span span = buildAndStartSpan(request);
                TracingInfoCarrier tracingInfoCarrier = getTracingInfoCarrier(request, span);
                // Save the context map and restore it on callback
                final Map<String, String> clientContextMap = Logging.getCopyOfContextMap();
                // Build or retrieve rpc metrics.
                final Histogram rpcDuration = getMetrics().histogram(MetricRegistry.name(request.getLocation(), module.getId(), RPC_DURATION));
                final Histogram responseSize = getMetrics().histogram(MetricRegistry.name(request.getLocation(), module.getId(), RPC_RESPONSE_SIZE));
                final Meter failedMeter = getMetrics().meter(MetricRegistry.name(request.getLocation(), module.getId(), RPC_FAILED));
                long requestCreationTime = System.currentTimeMillis();
                // Wrap the request in a CamelRpcRequest and forward it to the Camel route
                final CompletableFuture<T> future = new CompletableFuture<>();
                try {
                    // Even though these calls are expected to be async, we've encountered cases where
                    // they do block. In order to prevent this, we wrap the calls with a timeout.

                    // Compute the amount of maximum amount of time we're willing to wait for the call to be dispatched
                    Long execTimeoutMs = request.getTimeToLiveMs();
                    if (execTimeoutMs != null) {
                        // If a TTL is set, the use the minimum value, of the TTL, or our exec timeout
                        execTimeoutMs = Math.min(execTimeoutMs, rpcExecTimeoutMs);
                    } else {
                        execTimeoutMs = rpcExecTimeoutMs;
                    }

                    timeLimiter.callWithTimeout(() -> {
                        template.asyncCallbackSendBody(endpoint, new CamelRpcRequest<>(module, request, tracingInfoCarrier.getTracingInfoMap()), new Synchronization() {
                            @Override
                            public void onComplete(Exchange exchange) {
                                try (MDCCloseable mdc = Logging.withContextMapCloseable(clientContextMap)) {
                                    String responseAsString = exchange.getOut().getBody(String.class);
                                    responseSize.update(responseAsString.getBytes().length);
                                    final T response = module.unmarshalResponse(responseAsString);
                                    if (response.getErrorMessage() != null) {
                                        future.completeExceptionally(new RemoteExecutionException(response.getErrorMessage()));
                                        span.setTag(TAG_RPC_FAILED, "true");
                                        span.log(response.getErrorMessage());
                                    } else {
                                        future.complete(response);
                                    }
                                } catch (Throwable ex) {
                                    LOG.error("Unmarshalling a response in RPC module {} failed.", module, ex);
                                    future.completeExceptionally(ex);
                                    span.setTag(TAG_RPC_FAILED, "true");
                                    span.log(ex.getMessage());
                                }
                                span.finish();
                                rpcDuration.update(System.currentTimeMillis() - requestCreationTime);
                                // Ensure that future log statements on this thread are routed properly
                                Logging.putPrefix(RpcClientFactory.LOG_PREFIX);
                            }

                            @Override
                            public void onFailure(Exchange exchange) {
                                try (MDCCloseable mdc = Logging.withContextMapCloseable(clientContextMap)) {
                                    final ExchangeTimedOutException timeoutException = exchange.getException(ExchangeTimedOutException.class);
                                    final DirectConsumerNotAvailableException directConsumerNotAvailableException = exchange.getException(DirectConsumerNotAvailableException.class);
                                    if (timeoutException != null) {
                                        // Wrap timeout exceptions within a RequestTimedOutException
                                        future.completeExceptionally(new RequestTimedOutException(exchange.getException()));
                                        span.setTag(TAG_TIMEOUT, "true");
                                    } else if (directConsumerNotAvailableException != null) {
                                        // Wrap consumer not available exceptions with a RequestRejectedException
                                        future.completeExceptionally(new RequestRejectedException(exchange.getException()));
                                    } else {
                                        future.completeExceptionally(exchange.getException());
                                    }
                                }
                                span.setTag(TAG_RPC_FAILED, "true");
                                span.log(exchange.getException().getMessage());
                                span.finish();
                                failedMeter.mark();
                                rpcDuration.update(System.currentTimeMillis() - requestCreationTime);
                                // Ensure that future log statements on this thread are routed properly
                                Logging.putPrefix(RpcClientFactory.LOG_PREFIX);
                            }
                        });
                        return null;
                    }, execTimeoutMs, TimeUnit.MILLISECONDS, true);
                } catch (Exception e) {
                    try (MDCCloseable mdc = Logging.withContextMapCloseable(clientContextMap)) {
                        // Wrap ProducerTemplate exceptions with a RequestRejectedException
                        future.completeExceptionally(new RequestRejectedException(e));
                        span.setTag(TAG_RPC_FAILED, "true");
                        span.log(e.getMessage());
                        rpcDuration.update(System.currentTimeMillis() - requestCreationTime);
                        span.finish();
                    }
                    // Ensure that future log statements on this thread are routed properly
                    Logging.putPrefix(RpcClientFactory.LOG_PREFIX);
                }
                final Meter requestSentMeter = getMetrics().meter(MetricRegistry.name(request.getLocation(), module.getId(), RPC_COUNT));
                requestSentMeter.mark();
                return future;
            }

            private Span buildAndStartSpan(S request) {
                // Build span with module id and start it.
                Span span = null;
                if (request.getSpan() != null) {
                    span = tracer.buildSpan(module.getId()).asChildOf(request.getSpan().context()).start();
                } else {
                    span = tracer.buildSpan(module.getId()).start();
                }
                span.setTag(TAG_LOCATION, request.getLocation());
                if(request.getSystemId() != null) {
                    span.setTag(TAG_SYSTEM_ID, request.getSystemId());
                }
                request.getTracingInfo().forEach(span::setTag);
                return span;
            }

            private TracingInfoCarrier getTracingInfoCarrier(S request, Span span) {

                TracingInfoCarrier tracingInfoCarrier = new TracingInfoCarrier();
                tracer.inject(span.context(), Format.Builtin.TEXT_MAP, tracingInfoCarrier);
                //Add custom tags to tracing info.
                request.getTracingInfo().forEach(tracingInfoCarrier::put);
                return tracingInfoCarrier;
            }
        };
    }

