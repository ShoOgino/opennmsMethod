    @Override
    protected Object doExecute() throws Exception {
        // Create the client
        final RpcClient<EchoRequest, EchoResponse> client = rpcClientFactory.getClient(EchoRpcModule.INSTANCE);

        // Create metrics to capture the results
        final MetricRegistry metrics = new MetricRegistry();
        final Histogram responseTimes = metrics.histogram("response-times");
        final Counter successes = metrics.counter("successes");
        final Counter failures = metrics.counter("failures");

        // Build and issue the requests
        System.out.printf("Executing %d requests.\n", count);
        final String message = Strings.repeat("*", messageSize);
        final CountDownLatch doneSignal = new CountDownLatch(count);
        
        long beforeExec = System.currentTimeMillis();
        for (int i = 0; i < count; i++) {
            client.execute(buildRequest(message)).whenComplete((r,e) -> {
                if (e != null) {
                    failures.inc();
                } else {
                    responseTimes.update(System.currentTimeMillis() - r.getId());
                    successes.inc();
                }
                doneSignal.countDown();
            });
        }
        long afterExec = System.currentTimeMillis();

        // Wait for the responses...
        System.out.printf("Waiting for responses.\n");
        while (true) {
            try {
                if (doneSignal.await(1, TimeUnit.SECONDS)) {
                    // Done!
                    System.out.printf("\nDone!\n");
                    break;
                }
            } catch (InterruptedException e) {
                System.out.println("\nInterrupted!");
                break;
            }
            System.out.print(".");
            System.out.flush();
        }
        long afterResponse = System.currentTimeMillis();

        System.out.println();
        ConsoleReporter reporter = ConsoleReporter.forRegistry(metrics)
                .convertRatesTo(TimeUnit.MILLISECONDS)
                .convertDurationsTo(TimeUnit.MILLISECONDS)
                .build();
        reporter.report();
        reporter.close();
        System.out.printf("Total miliseconds elapsed: %d\n", afterResponse - beforeExec);
        System.out.printf("Miliseconds spent generating requests: %d\n", afterExec - beforeExec);
        System.out.printf("Miliseconds spent waiting for responses: %d\n", afterResponse - afterExec);

        return null;
    }

