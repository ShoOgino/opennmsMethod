    @Override
    public Object execute() throws Exception {
        try {
            final OnmsNode onmsNode = this.nodeDao.get(this.node);
            if (onmsNode == null) {
                System.out.printf("Cannot find node with ID/FS:FID=%s.\n", this.node);
                return null;
            }

            // Group by context and sort contexts and keys
            final Scope nodeScope = this.entityScopeProvider.getScopeForNode(onmsNode.getId());
            final Scope interfaceScope = this.entityScopeProvider.getScopeForInterface(onmsNode.getId(), this.interfaceAddress);
            final Scope serviceScope = this.entityScopeProvider.getScopeForService(onmsNode.getId(), InetAddressUtils.getInetAddress(this.interfaceAddress), this.serviceName);

            System.out.printf("---\nMeta-Data for node (id=%d)\n", onmsNode.getId());
            printScope(nodeScope);

            if (this.interfaceAddress != null) {
                System.out.printf("---\nMeta-Data for interface (ipAddress=%s):\n", this.interfaceAddress);
                printScope(interfaceScope);
            }

            if (this.serviceName != null) {
                System.out.printf("---\nMeta-Data for service (name=%s):\n", this.serviceName);
                printScope(serviceScope);
            }

            System.out.printf("---\n");

            if (!Strings.isNullOrEmpty(this.expression)) {
                final String result = Interpolator.interpolate(this.expression, new FallbackScope(nodeScope, interfaceScope, serviceScope));
                System.out.printf("Input: '%s'\nOutput: '%s'\n", this.expression, result);
            }
        } catch (final Exception e) {
            e.printStackTrace();
        }

        return null;
    }

