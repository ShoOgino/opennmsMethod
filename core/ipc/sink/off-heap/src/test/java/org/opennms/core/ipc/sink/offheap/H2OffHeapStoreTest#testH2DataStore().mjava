    @Test
    public void testH2DataStore() throws InterruptedException, WriteFailedException {

        long beforeWrite = System.currentTimeMillis();
        Executors.newSingleThreadExecutor().execute(() -> {
            for (int i = 0; i < 1000; i++) {
                String message = "This is " + i + " trap message";
                try {
                    queue.writeMessage(message.getBytes(), "traps-test", Integer.toString(i));
                } catch (WriteFailedException e) {
                   // pass
                }
            }
        });
        
        Executors.newSingleThreadExecutor().execute(() -> {
            for (int i = 0; i < 1000; i++) {
                String message = "This is " + i + " syslog message";
                try {
                    queue.writeMessage(message.getBytes(), "syslog-test", Integer.toString(i));
                } catch (WriteFailedException e) {
                    // pass
                }
            }
        });

        for (int i = 0; i < 1000; i++) {
            String message = "This is " + i + " event message";
            queue.writeMessage(message.getBytes(), "events-test", Integer.toString(i));
        }

        long afterWrite = System.currentTimeMillis();
        for (int i = 0; i < 1000; i++) {
            AbstractMap.SimpleImmutableEntry<String, byte[]> keyValue = queue.readNextMessage("traps-test");
                String message = new String(keyValue.getValue());
                String matcher = "This is " + i + " trap message";
                assertEquals(matcher, message);

        }
        for (int i = 0; i < 1000; i++) {
            AbstractMap.SimpleImmutableEntry<String, byte[]> keyValue = queue.readNextMessage("syslog-test");
                String message = new String(keyValue.getValue());
                String matcher = "This is " + i + " syslog message";
                assertEquals(matcher, message);
        }
        for (int i = 0; i < 1000; i++) {
            AbstractMap.SimpleImmutableEntry<String, byte[]> keyValue = queue.readNextMessage("events-test");
                String message = new String(keyValue.getValue());
                String matcher = "This is " + i + " event message";
                assertEquals(matcher, message);
        }
        long afterRead = System.currentTimeMillis();
        LOG.info("Total Write time  " + (afterWrite - beforeWrite));
        LOG.info("Total read time  " + (afterRead - afterWrite));
        LOG.info("Total time  " + (afterRead - beforeWrite));
    }

