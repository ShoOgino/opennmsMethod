        /** This is drain thread which polls data from OffHeapQueue, when data is available, it will push the data to the executor queue.
         *  It also retrieves the future from the map and completes the future.**/
        @Override
        public void run() {
            while (!closed.get()) {
               
                try {
                    // Wait till atleast one write call to OffHeapQueue.
                    firstWrite.await();
                    //retrieve key,value entry from top of queue.
                    AbstractMap.SimpleImmutableEntry<String, byte[]> keyValue = offHeapQueue
                            .readNextMessage(sinkModule.getId());
                    if (keyValue != null) {
                        queue.put(() -> {
                            S message = sinkModule.unmarshalSingleMessage(keyValue.getValue());
                            syncDispatcher.send(message);
                            CompletableFuture<S> future = offHeapFutureMap.get(keyValue.getKey());
                            future.complete(message);
                            offHeapFutureMap.remove(keyValue.getKey());
                        });

                    }
                } catch (InterruptedException e) {
                   LOG.warn("Interrupted while retrieving OffHeap Message for {} ", sinkModule.getId(), e);
                }
            }
        }

