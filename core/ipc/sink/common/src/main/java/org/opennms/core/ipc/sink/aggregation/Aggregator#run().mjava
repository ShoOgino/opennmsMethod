    @Override
    public void run() {
        final List<T> messagesReadyForDispatch = new LinkedList<>();
        // Grab a copy of all the current bucket keys
        final Set<Object> keys = new HashSet<>(buckets.keySet());
        // NMS-9114: As we iterate over the keys to add them to set above,
        // it's possible that one of the buckets was removed
        // in which case the key set may contain a null key
        // so we remove it here for good measure, otherwise
        // the call to bulkGet bellow will fail with an NPE
        keys.remove(null);

        // Lock all the buckets
        final Iterable<Lock> locks = lockStripes.bulkGet(keys);
        try {
            locks.forEach(l -> l.lock());
            // Determine which buckets are ready to be dispatched
            // and remove these from the map
            final long cutOff = System.currentTimeMillis() - completionIntervalMs;
            for (final Object key : keys) {
                final Bucket bucket = buckets.get(key);
                // The bucket may have been removed between the time we retrieved
                // the keys, and the time we obtained the lock, so we make sure
                // it's non-null before accessing it's properties
                if (bucket != null && bucket.getFirstTimeMillis() != null && bucket.getFirstTimeMillis() <= cutOff) {
                    messagesReadyForDispatch.add(bucket.getValue());
                    buckets.remove(key);
                }
            }
        } finally {
            locks.forEach(l -> l.unlock());
        }

        // Dispatch!
        for (T message : messagesReadyForDispatch) {
            messageProducer.dispatch(message);
        }
    }

