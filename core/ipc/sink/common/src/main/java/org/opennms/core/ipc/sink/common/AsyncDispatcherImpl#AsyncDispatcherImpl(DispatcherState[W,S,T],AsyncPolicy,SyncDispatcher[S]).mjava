    public AsyncDispatcherImpl(DispatcherState<W,S,T> state, AsyncPolicy asyncPolicy, SyncDispatcher<S> syncDispatcher) {
        Objects.requireNonNull(state);
        Objects.requireNonNull(asyncPolicy);
        this.syncDispatcher = Objects.requireNonNull(syncDispatcher);

        final RejectedExecutionHandler rejectedExecutionHandler;
        if (asyncPolicy.isBlockWhenFull()) {
            // This queue ensures that calling thread is blocked when the queue is full
            // See the implementation of OfferBlockingQueue for details
            queue = new OfferBlockingQueue<>(asyncPolicy.getQueueSize());
            rejectedExecutionHandler = new ThreadPoolExecutor.AbortPolicy();
        } else {
            queue = new LinkedBlockingQueue<Runnable>(asyncPolicy.getQueueSize());
            // Reject and increase the dropped counter when the queue is full
            final Counter droppedCounter = state.getMetrics().counter(MetricRegistry.name(state.getModule().getId(), "dropped"));
            rejectedExecutionHandler = new RejectedExecutionHandler() {
                @Override
                public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {
                    droppedCounter.inc();
                    throw new RejectedExecutionException("Task " + r.toString() +
                            " rejected from " +
                            e.toString());
                }
            };
        }

        state.getMetrics().register(MetricRegistry.name(state.getModule().getId(), "queue-size"), new Gauge<Integer>() {
            @Override
            public Integer getValue() {
                return queue.size();
            }
        });

        executor = new ThreadPoolExecutor(
                asyncPolicy.getNumThreads(),
                asyncPolicy.getNumThreads(),
                1000L,
                TimeUnit.MILLISECONDS,
                queue,
                new LogPreservingThreadFactory(SystemInfoUtils.DEFAULT_INSTANCE_ID + ".Sink.AsyncDispatcher." + state.getModule().getId(), Integer.MAX_VALUE),
                rejectedExecutionHandler
            );
    }

