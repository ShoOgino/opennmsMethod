    protected <S extends Message, T extends Message> SyncDispatcher<S> createSyncDispatcher(DispatcherState<W,S,T> state) {
        final SinkModule<S,T> module = state.getModule();
        if (module.getAggregationPolicy() != null) {
            // Aggregate the message before dispatching them
            return new AggregatingMessageProducer<S,T>(module) {
                @Override
                public void dispatch(T message) {
                    AbstractMessageDispatcherFactory.this.timedDispatch(state, message);
                }
                @Override
                public void close() throws Exception {
                    super.close();
                    state.close();
                }
            };
        } else {
            // No aggregation strategy is set, dispatch directly to reduce overhead
            return new DirectDispatcher<>(state);
        }
    }

