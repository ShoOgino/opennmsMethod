    @Test(timeout=3*60*1000)
    public void testConcurrencyAndQueuing() throws Exception {
        when(module.getAsyncPolicy()).thenReturn(new AsyncPolicy() {
            @Override
            public int getQueueSize() {
                return QUEUE_SIZE;
            }

            @Override
            public int getNumThreads() {
                return NUM_THREADS;
            }

            @Override
            public boolean isBlockWhenFull() {
                return true;
            }
        });
        final AsyncDispatcher<MyMessage> asyncDispatcher = threadLockingDispatcherFactory.createAsyncDispatcher(module);

        final AtomicBoolean allThreadsLocked = new AtomicBoolean(false);
        ThreadLockingSyncDispatcher<MyMessage> threadLockingSyncDispatcher = threadLockingDispatcherFactory.getThreadLockingSyncDispatcher();
        threadLockingSyncDispatcher.waitForThreads(NUM_THREADS).thenRun(() -> {
            allThreadsLocked.set(true);
        });

        final List<CompletableFuture<MyMessage>> futures = new ArrayList<>();
        for (int i = 0; i < NUM_THREADS; i++) {
            futures.add(asyncDispatcher.send(new MyMessage()));
        }

        // All of the dispatcher thread should be locked, and no additional thread should be waiting
        await().atMost(1, MINUTES).until(() -> allThreadsLocked.get());
        assertEquals(0, threadLockingSyncDispatcher.getNumExtraThreadsWaiting());

        // The queue should also be empty
        assertEquals(0, asyncDispatcher.getQueueSize());

        // Now fill up the queue
        for (int i = 0; i < QUEUE_SIZE; i++) {
            futures.add(asyncDispatcher.send(new MyMessage()));
        }
        assertEquals(QUEUE_SIZE, asyncDispatcher.getQueueSize());

        // No messages should have been dispatched yet
        assertEquals(0, threadLockingDispatcherFactory.getNumMessageDispatched());

        // The queue is full, additional calls should block
        AtomicReference<CompletableFuture<MyMessage>> futureRef = new AtomicReference<>();
        CountDownLatch willSend = new CountDownLatch(1);
        CountDownLatch didSend = new CountDownLatch(1);
        Thread t = new Thread(new Runnable() {
            @Override
            public void run() {
                willSend.countDown();
                futureRef.set(asyncDispatcher.send(new MyMessage()));
                didSend.countDown();
            }
        });
        t.start();

        // Wait for the thread to start
        willSend.await();
        assertEquals(0, willSend.getCount());
        // We know our thread is started, let's make sure we didn't send yet
        Thread.sleep(500);
        assertEquals(1, didSend.getCount());

        // Release the threads!
        threadLockingSyncDispatcher.release();
        // Wait for the queue to be drained
        await().atMost(1, MINUTES).until(() -> asyncDispatcher.getQueueSize(), equalTo(0));
        await().atMost(1, MINUTES).until(() -> threadLockingDispatcherFactory.getNumMessageDispatched(),
                greaterThan(QUEUE_SIZE));

        // All of our futures should be successfully resolved
        futures.add(futureRef.get());
        CompletableFuture.allOf(futures.toArray(new CompletableFuture<?>[]{}));

        asyncDispatcher.close();
    }

