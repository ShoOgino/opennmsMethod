    @Test(timeout=3*60*1000)
    public void testOverflowOffHeap() throws Exception {
        int inMemorySize = NUM_THREADS;
        int batchSize = inMemorySize / 2;
        // Set up the dispatch queue
        DispatchQueueFactory dispatchQueueFactory = new QueueFileOffHeapDispatchQueueFactory(inMemorySize, batchSize,"100KB",
                folder.newFolder().toPath().toString());
        DispatchQueueServiceLoader.setDispatchQueue(dispatchQueueFactory);

        when(module.getAsyncPolicy()).thenReturn(new AsyncPolicy() {
            @Override
            public int getQueueSize() {
                return QUEUE_SIZE;
            }

            @Override
            public int getNumThreads() {
                return NUM_THREADS;
            }

            @Override
            public boolean isBlockWhenFull() {
                return true;
            }
        });

        final AsyncDispatcher<MyMessage> asyncDispatcher = blockableDispatcherFactory.createAsyncDispatcher(module);
        BlockableSyncDispatcher<MyMessage> blockableSyncDispatcher =
                blockableDispatcherFactory.getBlockableSyncDispatcher();
        final List<CompletableFuture<AsyncDispatcher.DispatchStatus>> futures = new ArrayList<>();

        // Get all the dispatch threads blocked and fill up the queue and make sure some overflows onto disk
        int overflowNumber = (batchSize * 2) + 1;
        final int totalToSend = (inMemorySize + batchSize) + overflowNumber;
        blockableSyncDispatcher.block();
        for (int i = 0; i < totalToSend; i++) {
            futures.add(asyncDispatcher.send(new MyMessage(Integer.toString(i))));
        }

        // The queue should be full
        await().atMost(1, MINUTES).until(asyncDispatcher::getQueueSize, equalTo(totalToSend - NUM_THREADS));

        // All the dispatch threads should be blocked
        await().atMost(1, MINUTES).until(blockableSyncDispatcher::getBlockedThreadCount, equalTo(NUM_THREADS));
        
        // Release the threads!
        blockableSyncDispatcher.unblock();

        // Wait for the queue to be drained
        await().atMost(1, MINUTES).until(() -> blockableSyncDispatcher.getBlockedThreadCount() == 0 &&
                asyncDispatcher.getQueueSize() == 0);

        // We should see all the messages got dispatched, including those that got stored off-heap
        assertThat(blockableSyncDispatcher.getNumMessageDispatched(), equalTo(totalToSend));

        // All of our futures should be successfully resolved
        CompletableFuture.allOf(futures.toArray(new CompletableFuture<?>[]{}));

        // All of the messages should have been dispatched
        List<MyMessage> actuallyDispatched = blockableSyncDispatcher.getDispatchedMessages();
        assertThat(actuallyDispatched, hasSize(totalToSend));
        for (int i = 0; i < totalToSend; i++) {
            assertThat(actuallyDispatched, hasItem(new MyMessage(Integer.toString(i))));
        }
        
        asyncDispatcher.close();
    }

