    /**
     *  This method will send one chunk of message to kafka and returns the partition number the message has been sent to.
     * @param topic   The kafka topic message needs to be sent
     * @param record message
     * @return  partition number
     */
    private int sendMessageChunkToKafka(String topic, ProducerRecord<String, byte[]> record) {

        while (true) {
            try {
                // From KafkaProducer's JavaDoc: The producer is thread safe and should generally be shared among all threads for best performance.
                final Future<RecordMetadata> future = producer.send(record);
                // The call to dispatch() is synchronous, so we block until the message was sent
                RecordMetadata recordMetadata = future.get();
                return recordMetadata.partition();
            } catch (InterruptedException e) {
                LOG.warn("Interrupted while sending message to topic {}.", topic, e);
                Thread.currentThread().interrupt();
                break;
            } catch (ExecutionException e) {
                // Timeout typically happens when Kafka is Offline or it didn't initialize yet.
                // For this case keep sending the message until it delivers, will cause sink messages to buffer.
                if (e.getCause() != null && e.getCause() instanceof TimeoutException) {
                    LOG.warn("Timeout occured while sending message to topic {}, it will be attempted again.", topic);
                } else {
                    LOG.error("Exception occured while sending message to topic {} ", e);
                    break;
                }
            }
        }
      return INVALID_PARTITION;
    }

