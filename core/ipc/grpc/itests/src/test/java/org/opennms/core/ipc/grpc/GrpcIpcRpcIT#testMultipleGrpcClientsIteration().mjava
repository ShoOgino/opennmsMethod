    @Test(timeout = 45000)
    public void testMultipleGrpcClientsIteration() throws Exception {
        MinionIdentity minionIdentity = new MockMinionIdentity(REMOTE_LOCATION_NAME, "minion2");
        MinionGrpcClient grpcClient2 = new MinionGrpcClient(minionIdentity, configAdmin);
        grpcClient2.bind(echoRpcModule);
        grpcClient2.start();
        MinionIdentity minionIdentity1 = new MockMinionIdentity(REMOTE_LOCATION_NAME, "minion3");
        MinionGrpcClient grpcClient3 = new MinionGrpcClient(minionIdentity1, configAdmin);
        grpcClient3.bind(echoRpcModule);
        grpcClient3.start();
        await().atMost(10, TimeUnit.SECONDS).pollInterval(2, TimeUnit.SECONDS)
                .until(() -> {
                            grpcClient.dispatch(new HeartbeatModule(), null, new Heartbeat());
                            grpcClient2.dispatch(new HeartbeatModule(), null, new Heartbeat());
                            grpcClient3.dispatch(new HeartbeatModule(), null, new Heartbeat());
                            return server.getRpcHandlerByLocation().size();
                        },
                        is(3));
        // Verify that rpc handler is iterative for 3 minions for a given location
        StreamObserver<RpcRequestProto> observer1 = server.getRpcHandler(REMOTE_LOCATION_NAME, null);
        StreamObserver<RpcRequestProto> observer2 = server.getRpcHandler(REMOTE_LOCATION_NAME, null);
        assertNotEquals(observer1, observer2);
        StreamObserver<RpcRequestProto> observer3 = server.getRpcHandler(REMOTE_LOCATION_NAME, null);
        assertNotEquals(observer2, observer3);
        assertNotEquals(observer1, observer3);


        grpcClient3.shutdown();
        await().atMost(10, TimeUnit.SECONDS).pollInterval(2, TimeUnit.SECONDS)
                .until(() -> server.getRpcHandlerByLocation().size(), is(2));

        // Verify that rpc handler is iterative for 2 minions for a given location
        observer1 = server.getRpcHandler(REMOTE_LOCATION_NAME, null);
        observer2 = server.getRpcHandler(REMOTE_LOCATION_NAME, null);
        assertNotEquals(observer1, observer2);
        observer3 = server.getRpcHandler(REMOTE_LOCATION_NAME, null);
        assertNotEquals(observer2, observer3);
        assertEquals(observer3, observer1);

        // Add one more minion.
        MinionGrpcClient grpcClient4 = new MinionGrpcClient(minionIdentity1, configAdmin);
        grpcClient4.bind(echoRpcModule);
        grpcClient4.start();
        await().atMost(10, TimeUnit.SECONDS).pollInterval(2, TimeUnit.SECONDS)
                .until(() -> {
                    grpcClient4.dispatch(new HeartbeatModule(), null, new Heartbeat());
            return server.getRpcHandlerByLocation().size();
            }, is(3));
        // Verify that rpc handler is iterative for 3 minions for a given location
        observer1 = server.getRpcHandler(REMOTE_LOCATION_NAME, null);
        observer2 = server.getRpcHandler(REMOTE_LOCATION_NAME, null);
        assertNotEquals(observer1, observer2);
        observer3 = server.getRpcHandler(REMOTE_LOCATION_NAME, null);
        assertNotEquals(observer2, observer3);
        assertNotEquals(observer1, observer3);

        grpcClient4.shutdown();
        grpcClient2.shutdown();
        await().atMost(10, TimeUnit.SECONDS).pollInterval(2, TimeUnit.SECONDS)
                .until(() -> server.getRpcHandlerByLocation().size(), is(1));

    }

