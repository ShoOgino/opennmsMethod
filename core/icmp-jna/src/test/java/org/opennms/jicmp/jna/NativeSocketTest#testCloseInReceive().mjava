    @Test(timeout=10000)
    @Ignore("This is ignored since I haven't found a way to interrupt a socket blocked on recvfrom in linux")
    public void testCloseInReceive() throws Exception {
        try(final NativeDatagramSocket socket = NativeDatagramSocket.create(NativeDatagramSocket.PF_INET, NativeDatagramSocket.IPPROTO_UDP, 1234)) {
            final FutureTask<NativeDatagramPacket> task = new FutureTask<NativeDatagramPacket>(new Callable<NativeDatagramPacket>() {
                @Override public NativeDatagramPacket call() throws Exception {
                    final ByteBuffer buf = StandardCharsets.UTF_8.encode("msg1");
                    final NativeDatagramPacket p = new NativeDatagramPacket(buf, InetAddress.getLocalHost(), m_port);
                    socket.send(p);

                    final NativeDatagramPacket r = new NativeDatagramPacket(128);
                    printf("Receiving...\n");
                    socket.receive(r);
                    printf("Received\n");
                    return r;
                }
            });

            m_executor.execute(task);
            final NativeDatagramPacket r = task.get(10, TimeUnit.SECONDS);
            assertNotNull(r);

            final String response = StandardCharsets.UTF_8.decode(r.getContent()).toString();
            printf("Received Response: %s from %s:%d\n", response, r.getAddress().getHostAddress(), r.getPort());
        }
    }

