    @Test(timeout=30000)
    public void testPassing() throws Exception {
        if (!(Platform.isMac() || Platform.isFreeBSD() || Platform.isOpenBSD())) {
            printf("sockaddr_in is incompatible with bsd_sockaddr_in\n");
            return;
        }

        Server server = new Server(0);
        server.start();
        server.waitForStart();
        int port = server.getPort();

        String msg = "OpenNMS!";


        int socket = -1;
        try {
            InetAddress svrAddr = server.getInetAddress();
            byte[] data = msg.getBytes(StandardCharsets.US_ASCII);
            String sent = msg.substring(4,7);
            ByteBuffer buf = ByteBuffer.wrap(data, 4, 3).slice();

            printf("socket(%d, %d, %d);\n", NativeDatagramSocket.PF_INET, NativeDatagramSocket.SOCK_DGRAM, NativeDatagramSocket.IPPROTO_UDP);
            socket = socket(NativeDatagramSocket.PF_INET, NativeDatagramSocket.SOCK_DGRAM, NativeDatagramSocket.IPPROTO_UDP);

            printf("sockaddr_in destAddr = new sockaddr_in('%s', %d);\n", svrAddr, port);
            bsd_sockaddr_in destAddr = new bsd_sockaddr_in(svrAddr, port);
            printf("sendto(socket, '%s', %d, 0, destAddr, %d);\n", buf, buf.remaining(), destAddr.size());
            int i = sendto(socket, buf, buf.remaining(), 0, destAddr, destAddr.size());
            if (i < 0) {
                printf("sendto: failed\n");
            }

            bsd_sockaddr_in in_addr = new bsd_sockaddr_in();
            IntByReference szRef = new IntByReference(in_addr.size());

            ByteBuffer rBuf = ByteBuffer.allocate(128);
            int n = recvfrom(socket, rBuf, rBuf.remaining(), 0, in_addr, szRef);
            printf("recvfrom: got %d bytes\n", n);
            rBuf.limit(rBuf.position()+n);

            assertThat(szRef.getValue(), is(equalTo(in_addr.size())));
            assertThat(rBuf.isDirect(), is(false));
            assertThat(rBuf.position(), is(equalTo(0)));
            assertThat(rBuf.limit(), is(equalTo(n)));
            assertThat(rBuf.capacity(), is(equalTo(128)));

            byte[] b = new byte[rBuf.remaining()];
            rBuf.get(b);

            String results = new String(b, StandardCharsets.US_ASCII);

            printf("Received: %s\n", results);

            assertEquals(sent, results);

        } finally {
            // we leak this socket since close doesn't work on windows
            // it will go away when the test exits
            //if (socket != -1) close(socket);

            server.stop();

        }
    }

