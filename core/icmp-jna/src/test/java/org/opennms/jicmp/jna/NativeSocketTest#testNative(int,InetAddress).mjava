    private void testNative(final int family, final InetAddress address) throws Exception {
        final String[] cmds = new String[] { "nativeEcho", "nativeEcho2", "quitNative" };
        NativeDatagramSocket socket = null;

        try {
            socket = NativeDatagramSocket.create(family, NativeDatagramSocket.IPPROTO_UDP, 1234);

            for(final String cmd : cmds) {
                final NativeDatagramSocket sock = socket;
                final FutureTask<NativeDatagramPacket> task = new FutureTask<NativeDatagramPacket>(new Callable<NativeDatagramPacket>() {
                    @Override public NativeDatagramPacket call() throws Exception {
                        printf("Sending cmd: %s\n", cmd);
                        final ByteBuffer buf = UTF_8.encode(cmd);
                        final NativeDatagramPacket p = new NativeDatagramPacket(buf, address, m_port);
                        sock.send(p);

                        printf("Receiving...\n");
                        final NativeDatagramPacket r = new NativeDatagramPacket(128);
                        sock.receive(r);
                        printf("Received.\n");

                        return r;
                    }

                });

                m_executor.execute(task);
                final NativeDatagramPacket r = task.get(10, TimeUnit.SECONDS);
                assertNotNull(r);

                final String response = UTF_8.decode(r.getContent()).toString();
                printf("Received Response: %s from %s:%d\n", response, r.getAddress().getHostAddress(), r.getPort());

                assertEquals(cmd, response);
            }

        } finally {
            if (socket != null) socket.close();
        }
    }

