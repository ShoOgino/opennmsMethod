    @Test
    public void testPassing() throws Exception {
        Server server = new Server(7777);
        server.start();
        server.waitForStart();

        String msg = "OpenNMS!";

        
        int socket = -1;
        try {
            
            byte[] data = msg.getBytes("US-ASCII");
            String sent = msg.substring(4,7);
            ByteBuffer buf = ByteBuffer.wrap(data, 4, 3).slice();
            
            socket = socket(NativeDatagramSocket.PF_INET, NativeDatagramSocket.SOCK_DGRAM, NativeDatagramSocket.IPPROTO_UDP);

            sockaddr_in destAddr = new sockaddr_in(InetAddress.getLocalHost(), 7777);
            sendto(socket, buf, buf.remaining(), 0, destAddr, destAddr.size());

            
            sockaddr_in in_addr = new sockaddr_in();
            IntByReference szRef = new IntByReference(in_addr.size());
            
            ByteBuffer rBuf = ByteBuffer.allocate(128);
            int n = recvfrom(socket, rBuf, rBuf.remaining(), 0, in_addr, szRef);
            rBuf.limit(rBuf.position()+n);
            
            assertThat(szRef.getValue(), is(equalTo(in_addr.size())));
            assertThat(rBuf.isDirect(), is(false));
            assertThat(rBuf.position(), is(equalTo(0)));
            assertThat(rBuf.limit(), is(equalTo(n)));
            assertThat(rBuf.capacity(), is(equalTo(128)));
            
            byte[] b = new byte[rBuf.remaining()];
            rBuf.get(b);
            
            String results = new String(b, "US-ASCII");
            
            printf("Received: %s\n", results);
            
            assertEquals(sent, results);
            
                
        } finally {
            // we leak this socket since close doesn't work on windows
            // it will go away when the test exits
            //if (socket != -1) close(socket);
            
            server.stop();

        }

        
    }

