    /**
     * Used to recover the encoded variable data from the passed ASN.1 buffer.
     * The encoder object provides a way for the data to be decoded. The offset
     * marks the start location for the decoding operation. Once the data is
     * decoded it is set in the current object.
     * 
     * @param buf
     *            Encoded ASN.1 data
     * @param offset
     *            Offset to first byte of encoded data
     * @param encoder
     *            The encoder used to convert the data
     * 
     * @return The byte offset immediantly after the last decoded byte of
     *         information.
     * 
     * @exception AnsDecodingException
     *                Thrown if an error occurs while attempting to decode the
     *                data. This exception will be thrown byte encoder object.
     * 
     */
    @Override
    public int decodeASN(byte[] buf, int offset, AsnEncoder encoder) throws AsnDecodingException {
        Object[] rVals = encoder.parseHeader(buf, offset);

        offset = ((Integer) rVals[0]).intValue();
        byte asnType = ((Byte) rVals[1]).byteValue();
        int asnLength = ((Integer) rVals[2]).intValue();

        //
        // verify the length
        //
        if ((buf.length - offset) < asnLength)
            throw new AsnDecodingException("Buffer underflow error");

        //
        // verify the ASN.1 type
        //
        if (asnType != typeId())
            throw new AsnDecodingException("Invalid ASN.1 type");

        //
        // first get the name
        //
        offset = m_name.decodeASN(buf, offset, encoder);

        //
        // get the type
        //
        m_value = SnmpUtil.getSyntaxObject(buf[offset]);
        if (m_value == null)
            throw new AsnDecodingException("Unknown ASN.1 type");

        offset = m_value.decodeASN(buf, offset, encoder);

        return offset;
    }

