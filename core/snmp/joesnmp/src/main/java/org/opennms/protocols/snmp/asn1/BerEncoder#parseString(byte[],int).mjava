    /**
     * 
     * The parseString() method is used to decode an ASN.1 opaque string from
     * the specified buffer.
     * 
     * @param buf
     *            The input buffer
     * @param startOffset
     *            The offset to start decoding in the buffer
     * 
     * @return Returns an Object array that contains the new offset and ASN.1
     *         type, and byte array. The first object is an Integer object and
     *         contains the new offset for the next object in buf. The second
     *         object is a Byte object that represents the decoded ASN.1 Type.
     *         The third object is an array of primitive bytes.
     * 
     * @exception AsnDecodingException
     *                Thrown if an error occurs decoding the buffer.
     */
    public Object[] parseString(byte[] buf, int startOffset) throws AsnDecodingException {
        Object[] hdrVals = parseHeader(buf, startOffset);

        //
        // get the header values
        //
        startOffset = ((Integer) hdrVals[0]).intValue();
        Byte asnType = ((Byte) hdrVals[1]);
        int asnLength = ((Integer) hdrVals[2]).intValue();

        //
        // verify that there is enough data to decode
        //
        if ((buf.length - startOffset) < asnLength)
            throw new AsnDecodingException("Insufficent buffer length");

        //
        // copy the data
        //
        byte[] opaque = new byte[asnLength];
        try {
            copy(buf, // source buffer
                 startOffset, // source offset
                 opaque, // destination buffer
                 0, // destination offset
                 asnLength); // number of items to copy
        } catch (ArrayIndexOutOfBoundsException err) {
            throw new AsnDecodingException("Buffer underflow exception");
        }

        //
        // fix the return values
        //
        Object[] rVals = new Object[3];
        rVals[0] = new Integer(startOffset + asnLength);
        rVals[1] = asnType;
        rVals[2] = opaque;

        return rVals;
    }

