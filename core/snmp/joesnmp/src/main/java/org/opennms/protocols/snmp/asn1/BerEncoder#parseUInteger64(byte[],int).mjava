    /**
     * 
     * The parseUInteger64() method is used to decode an ASN.1 64-bit unsigned
     * integer from the specified buffer.
     * 
     * @param buf
     *            The input buffer
     * @param startOffset
     *            The offset to start decoding in the buffer
     * 
     * @return Returns an Object array that contains the new offset, ASN.1 type,
     *         and value. The first object is an Integer object and contains the
     *         new offset for the next object in buf. The second object is a
     *         Byte object that represents the decoded ASN.1 Type. The third
     *         object is a Long object and contains the actual decoded value.
     * 
     * @exception AsnDecodingException
     *                Thrown if an error occurs decoding the buffer.
     */
    @Override
    public Object[] parseUInteger64(byte[] buf, int startOffset) throws AsnDecodingException {
        //
        // parse the header first
        //
        Object[] hdrVals = parseHeader(buf, startOffset);

        startOffset = ((Integer) hdrVals[0]).intValue();
        Byte asnType = (Byte) hdrVals[1];
        int asnLength = ((Integer) hdrVals[2]).intValue();

        //
        // check for sufficent data
        //
        if ((buf.length - startOffset) < asnLength)
            throw new AsnDecodingException("Buffer underflow error");

        //
        // check to see that we can actually decode
        // the value (must fit in integer == 64-bits)
        //
        if (asnLength > 9)
            throw new AsnDecodingException("Integer too large: cannot decode");

        byte[] asnBuf = new byte[asnLength];
        for (int i = 0; i < asnLength; ++i)
            asnBuf[i] = buf[startOffset++];

        BigInteger asnValue = new BigInteger(asnBuf);

        //
        // return the data!
        //
        Object[] rVals = new Object[3];
        rVals[0] = Integer.valueOf(startOffset);
        rVals[1] = asnType;
        rVals[2] = asnValue;

        return rVals;
    }

