    /**
     * 
     * The parseLength() method is used to decode an ASN.1 length from the
     * specified buffer. The method is defined to support the AsnEncoder
     * interface.
     * 
     * @param buf
     *            The input buffer
     * @param startOffset
     *            The offset to start decoding in the buffer
     * 
     * @return Returns an Object array that contains the new offset and the
     *         decoded length. The first object is an Integer object and
     *         contains the new offset for the next object in buf. The second
     *         object is an Integer and contains the actual decoded length.
     * 
     * @exception AsnDecodingException
     *                Thrown if an error occurs decoding the buffer.
     */
    public Object[] parseLength(byte[] buf, int startOffset) throws AsnDecodingException {
        //
        // check the buffer length
        //
        if ((buf.length - startOffset) < 1)
            throw new AsnDecodingException("Buffer underflow error");

        //
        // 1) Integer w/new offset value
        // 2) Integer w/recovered length
        //
        Object[] retVals = new Object[2];

        //
        // get the first byte and check it for
        // the long length field
        //
        byte numBytes = buf[startOffset++];
        if ((numBytes & LONG_LENGTH) == 0) {
            //
            // short definiate length encoding
            //
            numBytes = (byte) (numBytes & ~LONG_LENGTH);
            retVals[1] = Integer.valueOf(byteToInt(numBytes));
        } else {
            //
            // Long length encoding
            //
            numBytes = (byte) (numBytes & ~LONG_LENGTH);
            if (numBytes == 1) {
                if ((buf.length - startOffset) < 1)
                    throw new AsnDecodingException("Buffer underflow error");

                retVals[1] = Integer.valueOf(byteToInt(buf[startOffset++]));
            } else if (numBytes == 2) {
                if ((buf.length - startOffset) < 2)
                    throw new AsnDecodingException("Buffer underflow error");

                int val = byteToInt(buf[startOffset++]) << 8 | byteToInt(buf[startOffset++]);
                retVals[1] = Integer.valueOf(val);
            } else {
                throw new AsnDecodingException("Invalid ASN.1 length");
            }
        }

        //
        // create the offset object
        //
        retVals[0] = Integer.valueOf(startOffset);

        return retVals;
    }

