	public void initializePortal(final AsnEncoder encoder) throws SocketException {
		//
        // Determine whether or not it is necessary to use the
        // socket.setSoTimeout()
        // method to set the socket timeout value thereby mimic'ing non-blocking
        // socket I/O.
        // On platforms whose system close() is not preemptive it is necessary
        // to use the socket timeout
        // to keep from blocking indefinitely on any socket call that performs
        // I/O.
        //
        bSocketSoTimeoutRequired = true; // Default is to use set the socket
                                            // timeout
        String strSocketSoTimeoutRequired = System.getProperty(PROP_SOCKET_TIMEOUT_REQUIRED);
        String osName = System.getProperty("os.name");

        if (strSocketSoTimeoutRequired != null && strSocketSoTimeoutRequired.equals("no")) {
            bSocketSoTimeoutRequired = false;
        }

        if (bSocketSoTimeoutRequired == true) {
            String strSocketSoTimeoutPeriod = System.getProperty(PROP_SOCKET_TIMEOUT_PERIOD);
            int timeout = 3000; // Default socket timeout is 3 seconds
            if (strSocketSoTimeoutPeriod != null) {
                try {
                    timeout = Integer.parseInt(strSocketSoTimeoutPeriod);
                } catch (NumberFormatException e) {
                    timeout = 3000;
                }
            }
            m_comm.setSoTimeout(timeout);
        } else if (osName != null && osName.equalsIgnoreCase("linux")) {
            // we must force this issue because we do not know
            // what VM there running in. If there running in
            // Sun JDK 1.3.1 with J2SE_PREEMPTCLOSE set then
            // this is unnecessary. If there not running in 1.3.1
            // and the're on linux then THEY MUST have a timeout
            // set of it will hang a thread.
            //
            m_comm.setSoTimeout(100);
        }

        m_isClosing = false;

        m_recvThread = new Thread(new Receiver(), "SnmpPortal-" + m_comm.getPort());
        m_encoder = encoder;

        m_recvThread.start();
	}

