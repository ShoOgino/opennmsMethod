    /**
     * Lexigraphically compares the object identifer to the array of
     * identifiers. If the object is lexigraphically less than ids a negative
     * number is returned. A positive number is returned if self is greater than
     * the passed identifers and a zero is returned if they are equal. The
     * length of the identifiers do not have to be equal.
     * 
     * @param ids
     *            The array if identifier to compare.
     * @param dist
     *            The maximum number of ids to compare.
     * 
     * @return Returns zero if the ids are equal. Less than zero if the object
     *         is less than 'ids' and greater than zero if the object is greater
     *         than 'ids'.
     * 
     */
    public int compare(int[] ids, int dist) {
        //
        // compare A(self) to
        // B(ids) irrelivant of length
        //
        int a, aNdx = 0;
        int b, bNdx = 0;
        int rc = 0;

        //
        // loop so long as either array index
        // has not reached the end of it's array
        //
        // This solves the problem of one object id
        // being longer than another
        //
        while ((aNdx < m_data.length || bNdx < ids.length) && --dist >= 0) {
            //
            // get the id from self. If the end of
            // self has been reached then it will
            // be equal to zero. If not then the
            // id will be offset by 1
            //
            a = 0;
            if (aNdx < m_data.length)
                a = m_data[aNdx++] + 1;

            //
            // Just like 'a', only for the array ids.
            //
            b = 0;
            if (bNdx < ids.length)
                b = ids[bNdx++] + 1;

            //
            // compare
            //
            rc = a - b;
            if (rc != 0)
                break;
        }
        return rc;
    }

