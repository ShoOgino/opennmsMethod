    @Override
    public Object execute() {
        LOG.debug("snmp:get {} {} {}", m_location != null ? "-l " + m_location : "", m_host, m_oids);
        final List<SnmpObjId> snmpObjIds = m_oids.stream()
                .map(SnmpObjId::get)
                .collect(Collectors.toList());
        SnmpAgentConfig agent;
        try {
            agent = snmpAgentConfigFactory.getAgentConfig(InetAddress.getByName(m_host), m_location);
        } catch (UnknownHostException uhe) {
            System.out.println(String.format("Unknown host '%s' at location '%s': %s", m_host, m_location, uhe.getMessage()));
            return null;
        }
        final CompletableFuture<List<SnmpValue>> future = locationAwareSnmpClient.get(agent, snmpObjIds)
                .withDescription("snmp:get")
                .withLocation(m_location)
                .withSystemId(m_systemId)
                .execute();

        while (true) {
            try {
                future.get(1, TimeUnit.SECONDS).stream()
                        .forEach(res -> {
                            if (res.isError()) {
                                System.out.println(String.format("ERROR: %s", res));
                            } else {
                                System.out.println(String.format("%s%n", res));
                            }
                        });
                break;
            } catch (TimeoutException e) {
                // pass
                System.out.print(".");
            } catch (InterruptedException | ExecutionException e) {
                System.out.println(String.format("\n %s: %s", m_host, e.getMessage()));
                break;
            }
        }
        return null;
    }

