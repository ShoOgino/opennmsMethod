	@Override
	public SnmpValue getValue(int type, byte[] bytes) {
		switch (type) {
			case SnmpValue.SNMP_COUNTER32:
				return new MockSnmpValue.Counter32SnmpValue(new BigInteger(bytes).longValue());
			case SnmpValue.SNMP_COUNTER64:
				return new MockSnmpValue.Counter64SnmpValue(new BigInteger(bytes));
			case SnmpValue.SNMP_END_OF_MIB:
				return MockSnmpValue.END_OF_MIB;
			case SnmpValue.SNMP_GAUGE32:
				return new MockSnmpValue.Gauge32SnmpValue(new BigInteger(bytes).longValue());
			case SnmpValue.SNMP_INT32:
				return new MockSnmpValue.Integer32SnmpValue(new BigInteger(bytes).intValue());
			case SnmpValue.SNMP_IPADDRESS:
				return new MockSnmpValue.IpAddressSnmpValue(bytes);
			case SnmpValue.SNMP_NO_SUCH_INSTANCE:
				return MockSnmpValue.NO_SUCH_INSTANCE;
			case SnmpValue.SNMP_NO_SUCH_OBJECT:
				return MockSnmpValue.NO_SUCH_OBJECT;
			case SnmpValue.SNMP_NULL:
				return MockSnmpValue.NULL_VALUE;
			case SnmpValue.SNMP_OBJECT_IDENTIFIER:
				return new MockSnmpValue.OidSnmpValue(new String(bytes));
			case SnmpValue.SNMP_OCTET_STRING:
				return new MockSnmpValue.OctetStringSnmpValue(bytes);
			case SnmpValue.SNMP_TIMETICKS:
				return new MockSnmpValue.TimeticksSnmpValue(new BigInteger(bytes).longValue());
			case SnmpValue.SNMP_OPAQUE:
				throw new IllegalArgumentException("Unable to handle opaque types in MockSnmpValue");
			default:
		        throw new IllegalArgumentException("Unknown SNMP value type: "+type);
		}
	}

