	    protected void handleResponses() {
	    	LogUtils.debugf(this, "handleResponses(%s)", m_oids);
	        try {
	            if (m_container == null) {
	            	LogUtils.infof(this, "No SNMP response data configured for %s; pretending we've timed out.", m_agentAddress);
	            	Thread.sleep(100);
	            	handleTimeout("No MockSnmpAgent data configured for '" + m_agentAddress + "'.");
	            	return;
	            }

	            final Map<SnmpObjId,SnmpValue> responses = new LinkedHashMap<SnmpObjId,SnmpValue>();
	            for (final SnmpObjId oid : m_oids) {
	                responses.put(m_container.findNextOidForOid(oid), m_container.findNextValueForOid(oid));
	            }

	            if (processErrors(0, 0)) {
	            	LogUtils.debugf(this, "Errors while handling responses... Whaaaat?");
	            } else {
	            	LogUtils.debugf(this, "Handling %d responses.", responses.size());
	                for (final Map.Entry<SnmpObjId,SnmpValue> entry : responses.entrySet()) {
	                	processResponse(entry.getKey(), entry.getValue());
	                }
	            }
				buildAndSendNextPdu();
				/*
	            m_executor.submit(new Runnable() {
					@Override
					public void run() {
			            try {
							buildAndSendNextPdu();
						} catch (final Exception e) {
							LogUtils.debugf(this, e, "Failed to build and send next PDU.");
				            handleFatalError(e);
						}
					}
	            });
	            */
	        } catch (final Throwable t) {
	            handleFatalError(t);
	        }
	    }

