	@Test
	public void testDummyTransport() throws Exception {

		final CountDownLatch latch = new CountDownLatch(1);
		final AtomicReference<byte[]> bytes = new AtomicReference<>();

		// IP address is optional when using the DummyTransport because
		// all requests are sent to the {@link DummyTransportResponder}
		final DummyTransport<IpAddress> transport = new DummyTransport<IpAddress>(null);

		final AbstractTransportMapping<IpAddress> responder = transport.getResponder(null);

		responder.addTransportListener(new TransportListener() {
			@Override
			public void processMessage(TransportMapping transport, Address address, ByteBuffer byteBuffer, TransportStateReference state) {
				LOG.debug(address == null ? "[null]" : address.toString());
				LOG.debug(byteBuffer.toString());

				byteBuffer.rewind();
				final byte[] byteArray = new byte[byteBuffer.remaining()];
				byteBuffer.get(byteArray);
				bytes.set(byteArray);
				byteBuffer.rewind();

				latch.countDown();
			}
		});

		// Create our own MessageDispatcher since we don't need to do all
		// of the crypto operations necessary to initialize SNMPv3
		MessageDispatcher dispatcher = new MessageDispatcherImpl();
		dispatcher.addMessageProcessingModel(new MPv1());
		dispatcher.addMessageProcessingModel(new MPv2c());

		Snmp snmp = new Snmp(dispatcher, responder);

		snmp.listen();

		PDU pdu = makePdu();

		CommunityTarget target = new CommunityTarget();
		// TODO: Update with community of message
		target.setCommunity(new OctetString("helloworld"));
		if (pdu instanceof PDUv1) {
			target.setVersion(SnmpConstants.version1);
		} else {
			target.setVersion(SnmpConstants.version2c);
		}
		target.setRetries(0);
		target.setTimeout(1000);
		// TODO: Use sourceAddress, sourcePort of message
		target.setAddress(Snmp4JAgentConfig.convertAddress(InetAddressUtils.ONE_TWENTY_SEVEN, 162));

		//snmp.trap(pdu, target);
		snmp.send(pdu, target, transport);

		latch.await();

		LOG.debug(SnmpUtils.getHexString(bytes.get()));
	}

