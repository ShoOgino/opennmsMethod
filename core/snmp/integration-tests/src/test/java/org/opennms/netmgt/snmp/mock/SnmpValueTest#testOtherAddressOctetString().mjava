    @Test
    public void testOtherAddressOctetString() {
        for (final SnmpValueFactory factory : m_factories) {
            final String hexString = "abcd";
            final byte[] rawBytes = { (byte) 0xab, (byte) 0xcd };
            final String stringBytes = new String(rawBytes);
            final String className = factory.getClass().getName();

            final SnmpValue value = factory.getOctetString(rawBytes);

            assertArrayEquals(className + ": getOctetString bytes should match", rawBytes, value.getBytes());
            assertTrue(className + ": getOctetString displayable should be true", value.isDisplayable());
            assertEquals(className + ": getOctetString to String should return " + stringBytes, stringBytes, value.toString());
            assertEquals(className + ": getOctetString to DisplayString should return " + stringBytes, stringBytes, value.toDisplayString());
            assertEquals(className + ": getOctetString to HexString should return " + hexString, hexString, value.toHexString());
            try {
                value.toInt();
                fail(className + ": getOctetString to int should throw an IllegalArgumentException");
            } catch (final IllegalArgumentException e) { /* expected */
            }
            try {
                value.toLong();
                fail(className + ": getOctetString to long should throw an IllegalArgumentException");
            } catch (final IllegalArgumentException e) { /* expected */
            }
            try {
                value.toBigInteger();
                fail(className + ": getOctetString to BigInteger should throw an IllegalArgumentException");
            } catch (final IllegalArgumentException e) { /* expected */
            }
        }
    }

