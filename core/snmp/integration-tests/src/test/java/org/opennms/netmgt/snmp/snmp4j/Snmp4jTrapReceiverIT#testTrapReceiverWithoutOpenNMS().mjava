    /*
     * IMPORTANT:
     *
     * The sentence <code>snmp.getUSM().addUser(...)</code>, is the only requirement
     * in order to properly process SNMPv3 traps.
     * 
     * This is related with the credentials that should be created for Trapd in order
     * to properly authenticate and/or decode SNMPv3 traps in OpenNMS.
     * 
     * This is a user that should be configured (or should be used) by the external
     * devices to send SNMPv3 Traps to OpenNMS.
     * 
     * The SNMPv3 users should be configured in trapd-configuration.xml
     */
    @Test
    public void testTrapReceiverWithoutOpenNMS() throws Exception {
        assertEquals(0, m_trapCount);
        LOG.debug("SNMP4J: Register for Traps");
        DefaultUdpTransportMapping transportMapping = null;
        Snmp snmp = null;

        try {
            transportMapping = new DefaultUdpTransportMapping(new UdpAddress(9162));
            snmp = new Snmp(transportMapping);

            snmp.addCommandResponder(this);
            snmp.getUSM().addUser(
                new OctetString("opennmsUser"),
                new UsmUser(
                    new OctetString("opennmsUser"),
                    AuthMD5.ID,
                    new OctetString("0p3nNMSv3"),
                    PrivDES.ID,
                    new OctetString("0p3nNMSv3")
                )
            );

            snmp.listen();
            sendTraps();
            await().atMost(5, SECONDS).until(() -> m_trapCount, equalTo(2));
        } finally {
            LOG.debug("SNMP4J: Unregister for Traps");
            if (snmp != null) {
                try {
                    snmp.close();
                } catch (final IOException e) {
                    LOG.debug("Failed to close Snmp object: {}", snmp, e);
                }
            }
            if (transportMapping != null) {
                try {
                    transportMapping.close();
                } catch (final IOException e) {
                    LOG.debug("Failed to close transport mapping: {}", transportMapping, e);
                }
            }
        }

        LOG.debug("SNMP4J: Checking Trap status");
        assertEquals(2, m_trapCount);
    }

