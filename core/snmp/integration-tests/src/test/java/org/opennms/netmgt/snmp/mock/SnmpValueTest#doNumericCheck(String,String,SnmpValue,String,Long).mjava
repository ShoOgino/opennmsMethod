    private void doNumericCheck(final String className, final String methodName, final SnmpValue result, final String expectedResultString, final Long expectedResultNumber) {
        assertTrue(className + ": " + methodName + " isDisplayable should be true", result.isDisplayable());
        assertEquals(className + ": " + methodName + " to int should return " + expectedResultString, expectedResultNumber.intValue(), result.toInt());
        assertEquals(className + ": " + methodName + " to long should return " + expectedResultString, expectedResultNumber.longValue(), result.toLong());
        assertEquals(className + ": " + methodName + " to BigInteger should return " + expectedResultString, BigInteger.valueOf(expectedResultNumber.longValue()), result.toBigInteger());
        assertEquals(className + ": " + methodName + " to String should return " + expectedResultString, expectedResultString, result.toString());
        assertEquals(className + ": " + methodName + " to DisplayString should return " + expectedResultString, expectedResultString, result.toDisplayString());
        assertEquals(className + ": " + methodName + " to bytes should return [" + expectedResultString + "]", "[" + expectedResultString + "]", Arrays.toString(result.getBytes()));
        try {
            result.toHexString();
            fail(className + ": " + methodName + " to HexString should throw an IllegalArgumentException");
        } catch (final IllegalArgumentException e) { /* expected */
        }
        try {
            result.toInetAddress();
            fail(className + ": " + methodName + " to InetAddress should throw an IllegalArgumentException");
        } catch (final IllegalArgumentException e) { /* expected */
        }
        try {
            result.toSnmpObjId();
            fail(className + ": " + methodName + " to SnmpObjId should throw an IllegalArgumentException");
        } catch (final IllegalArgumentException e) { /* expected */
        }
    }

