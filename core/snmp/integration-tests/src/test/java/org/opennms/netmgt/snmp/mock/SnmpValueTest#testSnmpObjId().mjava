	@Test
	public void testSnmpObjId() {
		for (final SnmpValueFactory factory : m_factories) {
			final String oid = ".1.3.6.1.4.1.2925.4.5.2.1.1";
			final SnmpObjId id = SnmpObjId.get(oid);
			final SnmpValue value = factory.getObjectId(id);
			final String className = factory.getClass().getName();

			assertTrue(className + ": getInetAddress isDisplayable should be true", value.isDisplayable());
			assertEquals(className + ": getObjectId to SnmpObjId should return " + oid, id, value.toSnmpObjId());
			assertEquals(className + ": getObjectId to String should return " + oid, oid, value.toString());
			assertEquals(className + ": getObjectId to DisplayString should return " + oid, oid, value.toDisplayString());
			try {
				value.toInt();
				fail(className + ": getObjectId to int should throw an IllegalArgumentException");
			} catch (final IllegalArgumentException e) { /* expected */ }
			try {
				value.toLong();
				fail(className + ": getObjectId to long should throw an IllegalArgumentException");
			} catch (final IllegalArgumentException e) { /* expected */ }
			try {
				value.toBigInteger();
				fail(className + ": getObjectId to BigInteger should throw an IllegalArgumentException");
			} catch (final IllegalArgumentException e) { /* expected */ }
			try {
				value.toHexString();
				fail(className + ": getObjectId to HexString should throw an IllegalArgumentException");
			} catch (final IllegalArgumentException e) { /* expected */ }
			try {
				value.toInetAddress();
				fail(className + ": getObjectId to InetAddress should throw an IllegalArgumentException");
			} catch (final IllegalArgumentException e) { /* expected */ }
		}
	}

