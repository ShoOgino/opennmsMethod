	@Test
	public void testTimeTicks() {
		for (final SnmpValueFactory factory : m_factories) {
			final String className = factory.getClass().getName();
			final SnmpValue[] values = { factory.getTimeTicks(42), SnmpUtils.parseMibValue("Timeticks: (42) 0:00:42.00") };
			for (final SnmpValue value : values) {
				assertTrue(className + ": getInetAddress isDisplayable should be true", value.isDisplayable());
				assertEquals(className + ": getTimeTicks to int should return " + value.toInt(), 42, value.toInt());
				assertEquals(className + ": getTimeTicks to long should return " + value.toLong(), 42, value.toLong());
				assertEquals(className + ": getTimeTicks to BigInteger should return " + value.toBigInteger(), BigInteger.valueOf(42), value.toBigInteger());
				assertEquals(className + ": getTimeTicks to String should return 42", "42", value.toString());
				assertEquals(className + ": getTimeTicks to DisplayString should return 42", "42", value.toDisplayString());
				try {
					value.toHexString();
					fail(className + ": getTimeTicks to HexString should throw an IllegalArgumentException");
				} catch (final IllegalArgumentException e) { /* expected */ }
				try {
					value.toInetAddress();
					fail(className + ": getTimeTicks to InetAddress should throw an IllegalArgumentException");
				} catch (final IllegalArgumentException e) { /* expected */ }
				try {
					value.toSnmpObjId();
					fail(className + ": getTimeTicks to SnmpObjId should throw an IllegalArgumentException");
				} catch (final IllegalArgumentException e) { /* expected */ }
			}
		}
	}

