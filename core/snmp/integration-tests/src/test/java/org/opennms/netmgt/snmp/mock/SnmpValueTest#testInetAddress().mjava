	@Test
	public void testInetAddress() {
		for (final SnmpValueFactory factory : m_factories) {
			final InetAddress address = InetAddressUtils.addr("192.168.0.1");
			final SnmpValue value = factory.getIpAddress(address);
			final String className = factory.getClass().getName();

			assertTrue(className + ": getInetAddress isDisplayable should be true", value.isDisplayable());
			assertEquals(className + ": getInetAddress to InetAddress should return 192.168.0.1", address, value.toInetAddress());
			assertEquals(className + ": getInetAddress to String should return 192.168.0.1", "192.168.0.1", value.toString());
			assertEquals(className + ": getInetAddress to DisplayString should return 192.168.0.1", "192.168.0.1", value.toDisplayString());
			try {
				value.toInt();
				fail(className + ": getInetAddress to int should throw an IllegalArgumentException");
			} catch (final IllegalArgumentException e) { /* expected */ }
			try {
				value.toLong();
				fail(className + ": getInetAddress to long should throw an IllegalArgumentException");
			} catch (final IllegalArgumentException e) { /* expected */ }
			try {
				value.toBigInteger();
				fail(className + ": getInetAddress to BigInteger should throw an IllegalArgumentException");
			} catch (final IllegalArgumentException e) { /* expected */ }
			try {
				value.toHexString();
				fail(className + ": getInetAddress to HexString should throw an IllegalArgumentException");
			} catch (final IllegalArgumentException e) { /* expected */ }
			try {
				value.toSnmpObjId();
				fail(className + ": getInetAddress to SnmpObjId should throw an IllegalArgumentException");
			} catch (final IllegalArgumentException e) { /* expected */ }
		}
	}

