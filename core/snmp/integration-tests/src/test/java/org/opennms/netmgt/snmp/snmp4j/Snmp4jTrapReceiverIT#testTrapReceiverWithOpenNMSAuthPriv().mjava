    @Test
    public void testTrapReceiverWithOpenNMSAuthPriv() {
        final Snmp4JStrategy strategy = new Snmp4JStrategy();
        assertEquals(0, m_trapCount);
        LOG.debug("ONMS: Register for Traps");
        final TestTrapListener trapListener = new TestTrapListener();
        SnmpV3User user = new SnmpV3User("opennmsUser", "MD5", "0p3nNMSv3", "DES", "0p3nNMSv3");
        try {
            strategy.registerForTraps(trapListener, this, getAgentAddress(), 9162, Collections.singletonList(user));
            sendTraps(strategy, SnmpConfiguration.AUTH_PRIV);
            await().atMost(5, SECONDS).until(() -> m_trapCount, equalTo(2));
        } catch (final IOException e) {
            LOG.debug("Failed to register for traps.", e);
        } catch (final Exception e) {
            LOG.debug("Failed to send traps.", e);
        } finally {
            LOG.debug("ONMS: Unregister for Traps");
            try {
                strategy.unregisterForTraps(trapListener, 9162);
            } catch (final IOException e) {
                LOG.debug("Failed to unregister for traps.", e);
            }
        }

        LOG.debug("ONMS: Checking Trap status");
        assertFalse(trapListener.hasError());
        assertEquals(2, trapListener.getReceivedTrapCount());
        strategy.clearUsers();
    }

