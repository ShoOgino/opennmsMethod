	@Test
	public void testTrapReceiverWithoutOpenNMS() throws Exception {

		final CountDownLatch latch = new CountDownLatch(1);

		//DummyAddress address = new DummyAddress();

		// IP address is optional when using the DummyTransport because
		// all requests are sent to the {@link DummyTransportResponder}
		final DummyTransport<IpAddress> transport = new DummyTransport<IpAddress>(null);

		/*
		transport.addTransportListener(new TransportListener() {
			@Override
			public void processMessage(TransportMapping arg0, Address arg1, ByteBuffer arg2, TransportStateReference arg3) {
				// TODO: Capture byte[]
				LOG.debug("GOT HERE 111");
				LOG.debug(arg2.toString());
				latch.countDown();
			}
		});
		 */

		final AbstractTransportMapping<IpAddress> responder = transport.getResponder(null);
		responder.addTransportListener(new TransportListener() {
			@Override
			public void processMessage(TransportMapping transport, Address address, ByteBuffer byteBuffer, TransportStateReference state) {
				LOG.debug(byteBuffer.toString());
				latch.countDown();
			}
		});

		Snmp snmp = new Snmp(responder);

		/*
		snmp.addCommandResponder(new CommandResponder() {
			@Override
			public void processPdu(CommandResponderEvent event) {
				LOG.debug("HELLOWE");
			}
		});
		//transport.listen();
		 */

		snmp.listen();

		PDU pdu = makePdu();

		CommunityTarget target = new CommunityTarget();
		// TODO: Update with community of message
		target.setCommunity(new OctetString("helloworld"));
		if (pdu instanceof PDUv1) {
			target.setVersion(SnmpConstants.version1);
		} else {
			target.setVersion(SnmpConstants.version2c);
		}
		target.setRetries(0);
		target.setTimeout(1000);
		// TODO: Use sourceAddress, sourcePort of message
		target.setAddress(Snmp4JAgentConfig.convertAddress(InetAddressUtils.ONE_TWENTY_SEVEN, 162));

		//snmp.trap(pdu, target);
		snmp.send(pdu, target, transport);

		latch.await();
	}

