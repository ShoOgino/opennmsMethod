    /**
     * Validates all of the code paths in {@link ServiceBasedStrategyResolver#getStrategy}.
     */
    @Test
    public void canResolveAndFallback() {
        StrategyResolver currentStrategyResolver = SnmpUtils.getStrategyResolver();
        assertTrue("ServiceBasedStrategyResolver should not be used by default.",
                !(currentStrategyResolver instanceof ServiceBasedStrategyResolver));

        ServiceBasedStrategyResolver.register();
        currentStrategyResolver = SnmpUtils.getStrategyResolver();
        assertTrue("Calling register() should set the strategy resolver.",
                currentStrategyResolver instanceof ServiceBasedStrategyResolver);

        final ServiceBasedStrategyResolver serviceBasedResolver = (ServiceBasedStrategyResolver)currentStrategyResolver;
        assertEquals("No services should be registered by default.",
                0, serviceBasedResolver.getStrategies().size());

        SnmpStrategy strategy = SnmpUtils.getStrategy();
        assertEquals("Should fall back to using the ClassBasedStrategyResolver when no strategies are registered",
                SnmpUtils.getStrategyClassName(), strategy.getClass().getCanonicalName());

        // Now create and bind a new mock strategy
        SnmpStrategy mockStrategy = mock(SnmpStrategy.class);
        Map<String, String> props = new HashMap<>();
        props.put("implementation", "org.opennms.mock.MyMockStrategy");
        serviceBasedResolver.onBind(mockStrategy, props);

        // Grab the mock, as a fall-back
        strategy = SnmpUtils.getStrategy();
        assertEquals("Should fall back to using the first regitered strategy when the requested class is not registered"
                , mockStrategy, strategy);

        // Now use the mock explicitly
        System.setProperty("org.opennms.snmp.strategyClass", "org.opennms.mock.MyMockStrategy");
        strategy = SnmpUtils.getStrategy();
        assertEquals(mockStrategy, strategy);

        // Unbind the mock
        serviceBasedResolver.onUnbind(mockStrategy, props);

        // Grabbing the strategy should fail now, we fall-back to the ClassBasedResolver
        // but it won't be able to instantiate our mock strategy
        try {
            SnmpUtils.getStrategy();
            fail("Should not be able to instantiate org.opennms.mock.MyMockStrategy");
        } catch (RuntimeException e) { }
    }

