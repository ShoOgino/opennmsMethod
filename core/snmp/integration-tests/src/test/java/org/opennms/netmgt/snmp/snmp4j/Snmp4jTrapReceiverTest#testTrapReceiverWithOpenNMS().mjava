    @Test
    public void testTrapReceiverWithOpenNMS() {
        assertEquals(0, m_trapCount);
        LOG.debug("ONMS: Register for Traps");
        final TestTrapListener trapListener = new TestTrapListener();
        SnmpV3User user = new SnmpV3User("opennmsUser", "MD5", "0p3nNMSv3", "DES", "0p3nNMSv3");
        try {
            long start = System.currentTimeMillis();

            m_strategy.registerForTraps(trapListener, this, m_addr, 9162, Collections.singletonList(user));
            sendTraps();

            long waitUntil = System.currentTimeMillis() + 30000L;
            do {
                Thread.sleep(200);
                System.err.print(".");
                if (m_trapCount == 2) break;
            } while (System.currentTimeMillis() < waitUntil);
            System.err.println("");
            LOG.debug("waited for {} milliseconds", System.currentTimeMillis() - start);
        } catch (final IOException e) {
            LOG.debug("Failed to register for traps.", e);
        } catch (final Exception e) {
            LOG.debug("Failed to send traps.", e);
        } finally {
            LOG.debug("ONMS: Unregister for Traps");
            try {
                m_strategy.unregisterForTraps(trapListener, 9162);
            } catch (final IOException e) {
                LOG.debug("Failed to unregister for traps.", e);
            }
        }

        LOG.debug("ONMS: Checking Trap status");
        assertFalse(trapListener.hasError());
        assertEquals(2, trapListener.getReceivedTrapCount());
    }

