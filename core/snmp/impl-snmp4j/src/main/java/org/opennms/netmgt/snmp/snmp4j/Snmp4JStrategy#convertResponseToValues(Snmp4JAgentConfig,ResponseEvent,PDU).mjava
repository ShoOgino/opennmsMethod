    private static SnmpValue[] convertResponseToValues(Snmp4JAgentConfig agentConfig, ResponseEvent responseEvent, PDU requestPdu) {
        SnmpValue[] retvalues = new Snmp4JValue[responseEvent.getResponse().getVariableBindings().size()];

        if (requestPdu.size() != retvalues.length) {
            LOG.warn("Unexpected results, Request oids length doesn't match response values length for the " +
                            "Agent : {}, requestID= {}", agentConfig, responseEvent.getRequest().getRequestID());
            retvalues = new Snmp4JValue[requestPdu.size()];
            int resultSize = responseEvent.getResponse().getVariableBindings().size();
            for (int i = 0; i < requestPdu.size(); i++) {
                VariableBinding requestVb = requestPdu.getVariableBindings().get(i);
                // Try matching in order
                if (i < resultSize && requestVb.getOid().equals(responseEvent.getResponse().get(i).getOid())) {
                    retvalues[i] = new Snmp4JValue(responseEvent.getResponse().get(i).getVariable());
                } else {
                    // Find matching Variable binding which matches request OID
                    Optional<? extends VariableBinding> matchingVb = responseEvent.getResponse().getVariableBindings().stream()
                            .filter(vb -> vb.getOid().equals(requestVb.getOid())).findFirst();
                    if (matchingVb.isPresent()) {
                        retvalues[i] = new Snmp4JValue(matchingVb.get().getVariable());
                    } else {
                        retvalues[i] = new Snmp4JValue(SnmpValue.SNMP_NULL, null);
                    }
                }
            }
            return retvalues;
        }
        for (int i = 0; i < retvalues.length; i++) {
            retvalues[i] = new Snmp4JValue(responseEvent.getResponse().get(i).getVariable());
        }

        return retvalues;
    }

