  public void decodeBER(BERInputStream inputStream) throws java.io.IOException {
    BER.MutableByte type = new BER.MutableByte();
	int length;
	BigInteger value = BigInteger.ZERO;
	
	type.setValue((byte)inputStream.read());
	
	if ((type.getValue() != 0x02) && (type.getValue() != 0x43) &&
	    (type.getValue() != 0x41)) {
	  throw new IOException("Wrong ASN.1 type. Not an integer: "+type.getValue()+
	                        (" at position "+inputStream.getPosition()));
	}
	length = BER.decodeLength(inputStream);
	if (length > 4) {
		if (log().isDebugEnabled()) {
        	log().debug("Working around invalid Integer32 likely dealing with a permissive Net-SNMP agent");
        }
	}
	
	int b = inputStream.read() & 0xFF;
	if ((b & 0x80) > 0) {
	  value = BigInteger.ONE.negate();
	}
	while (length-- > 0) {
		value = value.shiftLeft(8).or(BigInteger.valueOf(b));
		if (length > 0) {
			b = inputStream.read();
		}
	}
    
    int newValue = value.compareTo(BigInteger.valueOf(Integer.MAX_VALUE)) > 0 ? 0 : value.intValue();
    
    if (type.getValue() != BER.INTEGER) {
      throw new IOException("Wrong type encountered when decoding Counter: "+type.getValue());
    }
    setValue(newValue);
  }

