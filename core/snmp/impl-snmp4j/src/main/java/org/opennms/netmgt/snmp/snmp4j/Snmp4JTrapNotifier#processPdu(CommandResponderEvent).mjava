    @Override
    public void processPdu(CommandResponderEvent e) {
        PDU command = e.getPDU();
        if (command != null) {
            IpAddress addr = ((IpAddress)e.getPeerAddress());
            PDU commandCopy = new PDU(command);
            if (command.getType() == PDU.INFORM) {
                command.setErrorIndex(0);
                command.setErrorStatus(0);
                command.setType(PDU.RESPONSE);
                StatusInformation statusInformation = new StatusInformation();
                StateReference ref = e.getStateReference();
                try {
                    e.getMessageDispatcher().returnResponsePdu(e.getMessageProcessingModel(),
                                                               e.getSecurityModel(),
                                                               e.getSecurityName(),
                                                               e.getSecurityLevel(),
                                                               command,
                                                               e.getMaxSizeResponsePDU(),
                                                               ref,
                                                               statusInformation);
                    LOG.debug("Sent RESPONSE PDU to peer {} acknowledging receipt of INFORM (reqId={})", addr, command.getRequestID());
                } catch (MessageException ex) {
                    LOG.error("Error while sending RESPONSE PDU to peer {}: {} acknowledging receipt of INFORM (reqId={})", addr, ex.getMessage(), command.getRequestID());
                }
            }
            if (commandCopy instanceof PDUv1) {
                m_listener.trapReceived(new Snmp4JV1TrapInformation(addr.getInetAddress(), new String(e.getSecurityName()), (PDUv1)commandCopy, m_trapProcessorFactory.createTrapProcessor()));
            } else {
                m_listener.trapReceived(new Snmp4JV2TrapInformation(addr.getInetAddress(), new String(e.getSecurityName()), commandCopy, m_trapProcessorFactory.createTrapProcessor()));
            }
        }
    }

