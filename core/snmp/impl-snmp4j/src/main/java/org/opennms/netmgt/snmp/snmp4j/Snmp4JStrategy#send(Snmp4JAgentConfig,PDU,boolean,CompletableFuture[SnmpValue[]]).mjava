    private void send(Snmp4JAgentConfig agentConfig, PDU pdu, boolean expectResponse, CompletableFuture<SnmpValue[]> future) {
        Snmp session;

        try {
            session = agentConfig.createSnmpSession();
        } catch (IOException e) {
            LOG.error("send: Could not create SNMP session for agent {}", agentConfig, e);
            future.completeExceptionally(new Exception("Could not create SNMP session for agent"));
            return;
        }

        if (expectResponse) {
            try {
                session.listen();
            } catch (IOException e) {
                closeQuietly(session);
                LOG.error("send: error setting up listener for SNMP responses", e);
                future.completeExceptionally(new Exception("error setting up listener for SNMP responses"));
                return;
            }

            try {
                session.send(pdu, agentConfig.getTarget(), null, new ResponseListener() {
                    @Override
                    public void onResponse(ResponseEvent responseEvent) {
                        try {
                            future.complete(processResponse(agentConfig, responseEvent));
                        } catch (Exception e) {
                            future.completeExceptionally(e);
                        } finally {
                            // Close the tracker using a separate thread
                            // This allows the SnmpWalker to clean up properly instead
                            // of interrupting execution as it's executing the callback
                            REAPER_EXECUTOR.submit(new Runnable() {
                                @Override
                                public void run() {
                                    closeQuietly(session);
                                }
                            });
                        }
                    }
                });
            } catch (final Exception e) {
                // The ResponseListener will not be called since an exception occurred in the send,
                // so we make sure to close the session here
                closeQuietly(session);
                LOG.error("send: error during SNMP operation", e);
                future.completeExceptionally(e);
            }
        } else { // we're not expecting a response
            try {
                session.send(pdu, agentConfig.getTarget());
                future.complete(null);
            } catch (final Exception e) {
                LOG.error("send: error during SNMP operation", e);
                future.completeExceptionally(e);
            } finally {
                closeQuietly(session);
            }
        }
    }

