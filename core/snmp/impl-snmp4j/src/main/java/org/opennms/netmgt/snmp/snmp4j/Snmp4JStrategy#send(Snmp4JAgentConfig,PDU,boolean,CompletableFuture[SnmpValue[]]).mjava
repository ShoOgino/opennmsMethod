    private void send(Snmp4JAgentConfig agentConfig, PDU pdu, boolean expectResponse, CompletableFuture<SnmpValue[]> future) {
        Snmp session;

        try {
            session = agentConfig.createSnmpSession();
        } catch (IOException e) {
            LOG.error("send: Could not create SNMP session for agent {}", agentConfig, e);
            future.completeExceptionally(new Exception("Could not create SNMP session for agent"));
            return;
        }

        if (expectResponse) {
            try {
                session.listen();
            } catch (IOException e) {
                closeQuietly(session);
                LOG.error("send: error setting up listener for SNMP responses", e);
                future.completeExceptionally(new Exception("error setting up listener for SNMP responses"));
                return;
            }
        }

        try {
            if (expectResponse) {
                session.send(pdu, agentConfig.getTarget(), null, new ResponseListener() {
                    @Override
                    public void onResponse(ResponseEvent responseEvent) {
                        try {
                            future.complete(processResponse(agentConfig, responseEvent));
                        } catch (IOException e) {
                            future.completeExceptionally(e);
                        } finally {
                            // Close the tracker using a separate thread
                            // This allows the SnmpWalker to clean up properly instead
                            // of interrupting execution as it's executing the callback
                            REAPER_EXECUTOR.submit(new Runnable() {
                                @Override
                                public void run() {
                                    closeQuietly(session);
                                }
                            });
                        }
                    }
                });
            } else {
                session.send(pdu, agentConfig.getTarget());
                future.complete(null);
            }
        } catch (final IOException e) {
            LOG.error("send: error during SNMP operation", e);
            future.completeExceptionally(e);
        } catch (final RuntimeException e) {
            LOG.error("send: unexpected error during SNMP operation", e);
            future.completeExceptionally(e);
        } finally {
            // Always close the session if we're not expecting a response
            // If we are expecting a response, the ResponseListener will handle the close
            if (!expectResponse) {
                closeQuietly(session);
            }
        }
    }

