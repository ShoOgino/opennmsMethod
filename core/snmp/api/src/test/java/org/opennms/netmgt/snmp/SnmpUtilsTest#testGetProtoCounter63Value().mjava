	/**
	 * This test is designed to test the issues in bug NMS-5281.
	 * 
	 * @see http://issues.opennms.org/browse/NMS-5281
	 * 
	 * @throws UnsupportedEncodingException
	 */
	@Test
	public void testGetProtoCounter63Value() throws UnsupportedEncodingException {
		for (byte[] bytes : new byte[][] {
			// Not all decimal digits
			"abcdef01".getBytes("UTF-8"),
			// Highest 63-bit value
			{ (byte)0x79, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff },
			// Zero
			{ 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
			// One
			{ 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1 }
		}) {
			assertNotNull(Arrays.toString(bytes), SnmpUtils.getProtoCounter63Value(bytes));
		}

		for (byte[] bytes : new byte[][] {
			// Not 8 bytes
			"abcdef".getBytes("UTF-8"),
			// All decimal digits
			"01234567".getBytes("UTF-8"),
			// All decimal digits
			"00000000".getBytes("UTF-8"),
			// All decimal digits
			"11111111".getBytes("UTF-8"),
			// All decimal digits
			"99999999".getBytes("UTF-8"),
			// Special case for "not supported"
			{ (byte)0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
			// 64-bit value
			{ (byte)0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
			// 64-bit value
			{ (byte)0x80, (byte)0x80, (byte)0x80, (byte)0x80, (byte)0x80, (byte)0x80, (byte)0x80, (byte)0x80 },
			// 64-bit value
			{ (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff }
		}) {
			assertNull(Arrays.toString(bytes), SnmpUtils.getProtoCounter63Value(bytes));
		}
	}

