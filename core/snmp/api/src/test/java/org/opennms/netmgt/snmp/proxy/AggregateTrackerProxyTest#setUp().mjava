    @Before
    public void setUp() {
        // Create a hierarchy of aggregated trackers
        columnTrackers = new ColumnTracker[] {
                new ColumnTracker(baseOids[0]),
                new ColumnTracker(baseOids[1]),
                new ColumnTracker(baseOids[2]),
        };
        singleInstanceTracker = new SingleInstanceTracker(baseOids[3], SnmpInstId.INST_ZERO);
        childAggregateTracker = new AggregateTracker(columnTrackers);
        parentAggregateTracker = new AggregateTracker(Lists.newArrayList(childAggregateTracker, singleInstanceTracker), gatherer);

        // Verify the generated requests
        List<WalkRequest> expectedRequests = new ArrayList<>();

        // Column tracker requests
        WalkRequest expectedRequest = new WalkRequest(baseOids[0]);
        expectedRequest.setCorrelationId("0-0");
        expectedRequest.setMaxRepetitions(2);
        expectedRequests.add(expectedRequest);

        expectedRequest = new WalkRequest(baseOids[1]);
        expectedRequest.setCorrelationId("0-1");
        expectedRequest.setMaxRepetitions(2);
        expectedRequests.add(expectedRequest);

        expectedRequest = new WalkRequest(baseOids[2]);
        expectedRequest.setCorrelationId("0-2");
        expectedRequest.setMaxRepetitions(2);
        expectedRequests.add(expectedRequest);

        // Single instance tracker request
        expectedRequest = new WalkRequest(SnmpObjId.get(baseOids[3], SnmpInstId.INST_ZERO));
        expectedRequest.setCorrelationId("1");
        expectedRequest.setSingleInstance(true);
        expectedRequest.setMaxRepetitions(1);
        expectedRequests.add(expectedRequest);

        assertThat(parentAggregateTracker.getWalkRequests(), hasSize(4));
        assertThat(parentAggregateTracker.getWalkRequests(), contains(expectedRequests.toArray()));

        // We shouldn't be finished yet
        assertThat(parentAggregateTracker.isFinished(), equalTo(false));
        assertThat(gatherer.getResults(), hasSize(0));
    }

