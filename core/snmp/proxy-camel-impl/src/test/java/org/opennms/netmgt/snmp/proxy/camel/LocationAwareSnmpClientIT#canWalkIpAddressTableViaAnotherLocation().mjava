    /**
     * Verifies that the IP Address tables can be walked when using the current location.
     */
    @Test
    public void canWalkIpAddressTableViaAnotherLocation() throws Exception {
        assertNotEquals(REMOTE_LOCATION_NAME, identity.getLocation());

        final AsyncSnmpRequestProcesor snmpRequestExecutorCamelAsync = new AsyncSnmpRequestProcesor();
        snmpRequestExecutorCamelAsync.setSnmpRequestExecutor(localSnmpRequestExecutor);

        SimpleRegistry registry = new SimpleRegistry();
        CamelContext mockDiscoverer = new DefaultCamelContext(registry);
        mockDiscoverer.addComponent("queuingservice", queuingservice);
        mockDiscoverer.addRoutes(new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                from("queuingservice:snmp-proxy@" + REMOTE_LOCATION_NAME)
                .setExchangePattern(ExchangePattern.InOut)
                .process(snmpRequestExecutorCamelAsync);
            };
        });
        mockDiscoverer.start();

        final IPAddressGatheringTracker tracker = new IPAddressGatheringTracker();
        locationAwareSnmpClient.walk(agentConfig, tracker)
            .withDescription(tracker.getDescription())
            .atLocation(REMOTE_LOCATION_NAME)
            .execute().get();
        ExpectedResults.compareToKnownIpAddressList(tracker.getIpAddresses());

        mockDiscoverer.stop();
    }

