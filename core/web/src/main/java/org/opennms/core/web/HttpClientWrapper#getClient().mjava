    public CloseableHttpClient getClient() {
        if (m_httpClient == null) {
            final HttpClientBuilder httpClientBuilder = HttpClientBuilder.create();
            final RequestConfig.Builder requestConfigBuilder = RequestConfig.custom();

            if (!m_reuseConnections) {
                httpClientBuilder.setConnectionReuseStrategy(new NoConnectionReuseStrategy());
            }
            if (m_usePreemptiveAuth) {
                enablePreemptiveAuth(httpClientBuilder);
            }
            if (m_useSystemProxySettings) {
                httpClientBuilder.setRoutePlanner(new SystemDefaultRoutePlanner(ProxySelector.getDefault()));
            }
            if (!isEmpty(m_cookieSpec)) {
                requestConfigBuilder.setCookieSpec(m_cookieSpec);
            }
            if (m_cookieStore != null) {
                httpClientBuilder.setDefaultCookieStore(m_cookieStore);
            }
            if (m_username != null) {
                setCredentials(httpClientBuilder, m_username, m_password);
            }
            if (m_socketTimeout != null) {
                requestConfigBuilder.setSocketTimeout(m_socketTimeout);
            }
            if (m_connectionTimeout != null) {
                requestConfigBuilder.setConnectTimeout(m_connectionTimeout);
            }
            if (m_retries != null) {
                httpClientBuilder.setRetryHandler(new HttpRequestRetryOnExceptionHandler(m_retries, false));
            }
            if (m_sslContext.size() != 0) {
                configureSSLContext(httpClientBuilder);
            }
            for (final HttpRequestInterceptor interceptor : m_requestInterceptors) {
                httpClientBuilder.addInterceptorLast(interceptor);
            }
            for (final HttpResponseInterceptor interceptor : m_responseInterceptors) {
                httpClientBuilder.addInterceptorLast(interceptor);
            }
            if (m_useLaxRedirect) {
                httpClientBuilder.setRedirectStrategy(new LaxRedirectStrategy());
            }
            httpClientBuilder.setDefaultRequestConfig(requestConfigBuilder.build());
            m_httpClient = httpClientBuilder.build();
        }
        return m_httpClient;
    }

