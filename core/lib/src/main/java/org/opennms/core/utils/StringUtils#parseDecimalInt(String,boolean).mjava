    /**
     * This is a quick and dirty parser for String representations
     * of decimal integers. It should be up to 2X faster than
     * {@link Integer#parseInt(String)}.
     * 
     * @param value Positive or negative decimal string value
     * @return Integer representing the string value
     */
    public static Integer parseDecimalInt(String value, boolean throwExceptions) {
        final int length = value.length();

        if (value == null || length < 1) {
            if (throwExceptions) {
                throw new NumberFormatException("Null or empty value");
            } else {
                return null;
            }
        }

        try {
            int sign = -1;
            int i = 0;

            if (value.charAt(0) == '-') {
                if (length == 1) {
                    if (throwExceptions) {
                        throw new NumberFormatException("No digits in value: " + value);
                    } else {
                        return null;
                    }
                }
                sign = 1;
                i = 1;
            }

            int retval = 0;
            int oldValue;
            int digit;

            for (; i < length; i++) {
                oldValue = retval;
                final char current = value.charAt(i);
                digit = (current - '0');
                if (digit < 0 || digit > 9) {
                    if (throwExceptions) {
                        throw new NumberFormatException("Invalid digit: " + current);
                    } else {
                        return null;
                    }
                }
                retval = (retval * 10) - digit;
                // If the negative value overflows to positive, then throw an exception
                if (retval > oldValue) {
                    if (throwExceptions) {
                        throw new NumberFormatException(sign == -1 ? "Overflow" : "Underflow");
                    } else {
                        return null;
                    }
                }
            }
            return sign * retval;
        } catch (Exception e) {
            if (throwExceptions) {
                NumberFormatException nfe = new NumberFormatException("Could not parse integer value: " + value);
                nfe.initCause(e);
                throw nfe;
            } else {
                return null;
            }
        }
    }

