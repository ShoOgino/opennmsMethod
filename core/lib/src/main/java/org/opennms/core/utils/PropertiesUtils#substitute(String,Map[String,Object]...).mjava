    /**
     * This recursively substitutes occurrences ${property.name} in initialString with the value of
     * the property property.name taken from the supplied {@link Map} object. If
     * property.name is not defined in the map then the substitution is not done.
     *
     * @param initialString the string to perform the substitutions in
     * @return The string with appropriate substitutions made.
     * @param mapArray a {@link java.util.Map} object.
     */
    @SafeVarargs
    public static String substitute(final String initialString, final Map<String,Object>... mapArray) {
        for (final Map<String,Object> properties : mapArray) {
            final Map<String,String> convertedProperties = new HashMap<String,String>();
            for (final Map.Entry<String,Object> entry : properties.entrySet()) {
                final Object value = entry.getValue();
                convertedProperties.put(entry.getKey(), value == null? null : value.toString());
            }
            if (properties != null) {
                return substitute(initialString, new MapBasedSymbolTable(convertedProperties), PLACEHOLDER_PREFIX, PLACEHOLDER_SUFFIX, new ArrayList<String>());
            }
        }
        return initialString;
    }

