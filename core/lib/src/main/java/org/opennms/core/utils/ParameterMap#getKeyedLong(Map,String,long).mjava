    	/**
    	 * This method is used to lookup a specific key in the map. If the mapped
    	 * value is a string it is converted to a long and the original string
    	 * value is replaced in the map. The converted value is returned to the
    	 * caller. If the value cannot be converted then the default value is stored
    	 * in the map. If the specified key does not exist in the map then the
    	 * default value is returned.
    	 *
    	 * @return The long value associated with the key.
    	 * @param map a {@link java.util.Map} object.
    	 * @param key a {@link java.lang.String} object.
    	 * @param defValue a long.
    	 */
    @SuppressWarnings({ "unchecked", "rawtypes" })
    public static long getKeyedLong(final Map map, final String key, final long defValue) {
	    
	    if (map == null) return defValue;
	    
        long value = defValue;
        Object oValue = map.get(key);

        if (oValue != null && oValue instanceof String) {
            try {
                value = Long.parseLong((String) oValue);
            } catch (NumberFormatException ne) {
                value = defValue;
                LOG.info("getKeyedLong: Failed to convert value {} for key {}", oValue , key, ne);
            }
            map.put(key, new Long(value));
        } else if (oValue != null) {
            value = ((Number) oValue).longValue();
        }
        return value;
    }

