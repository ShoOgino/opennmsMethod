    /**
     * <p>Writes {@code request} to {@code wr} then reads the response from {@code r} and validates that it matches the pattern provided in {@code responsePattern}.</p>
     * <p>To obtain {@code r} from a {@code java.util.Socket socket}:<br/> {@code new BufferedReader(new InputStreamReader(socket.getInputStream()));}</p>
     * <p>To obtain {@code wr} from a {@code java.util.Socket socket}:<br/> {@code new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));}</p>
     *
     * @param request the String to write to wr
     * @param responsePattern a String representing a regular expression pattern you expect to match the response received from {@code r} after writing request to wr
     * @param r the BufferedReader from which to get the response
     * @param wr the Writer on which the request is written
     */
    public static boolean validResponse(String request, String responsePattern, BufferedReader r, Writer wr) throws IOException {
        boolean validResponse = true;
        if (!Strings.isNullOrEmpty(request) && !Strings.isNullOrEmpty(responsePattern)) {
            String l = null;
            validResponse = false;
            LOG.debug("writing {}, hoping response matches /{}/", request, responsePattern);
            wr.write(request);
            wr.flush();
            Pattern p = Pattern.compile(responsePattern);
            StringBuilder sb = new StringBuilder();
            int i;
            try {
                while((i = r.read()) != -1) {
                    sb.append((char)i);
                }
            } catch (InterruptedIOException e) {
                LOG.debug("response was: {}", sb.toString());
            }
            validResponse = p.matcher(sb.toString()).matches();
        }
        return validResponse;
    }

