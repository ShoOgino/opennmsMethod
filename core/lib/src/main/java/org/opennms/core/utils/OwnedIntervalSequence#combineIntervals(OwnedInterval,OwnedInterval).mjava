    /** {@inheritDoc} */
    @Override
    protected Collection<OwnedInterval> combineIntervals(OwnedInterval currInterval, OwnedInterval newInterval) {
        List<OwnedInterval> newIntervals = new ArrayList<OwnedInterval>(3);
        
        // Time Intervals stored locally so we can add them in order
        OwnedInterval firstSeg = null;
        OwnedInterval midSeg = null;
        OwnedInterval thirdSeg = null;
        
        // start and end of the middle segment is computed as we examine the first and last segments
        Date midSegStart;
        Date midSegEnd;
        
        // first we deal with the segment 1
        if (currInterval.getStart().equals(newInterval.getStart())) {
            // we have no first seg so the mid seg starts at the common top
            midSegStart = currInterval.getStart();
        } else {
            // this implies there is a top segment
            if (currInterval.getStart().before(newInterval.getStart())) {
                // first seg is the top of the currinterval
                firstSeg = new OwnedInterval(currInterval.getOwners(), currInterval.getStart(), newInterval.getStart());
                midSegStart = newInterval.getStart();
            } else {
                // first seg is the top of new interval
                firstSeg = new OwnedInterval(newInterval.getOwners(), newInterval.getStart(), currInterval.getStart());
                midSegStart = currInterval.getStart();
            }
        }
        
        // next we deal with segment 3
        if (currInterval.getEnd().equals(newInterval.getEnd())) {
            midSegEnd = currInterval.getEnd();
        } else {
            // this implies we have a third seg
            if (currInterval.getEnd().after(newInterval.getEnd())) {
                // third seg is the bottom of the curr interval
                thirdSeg = new OwnedInterval(currInterval.getOwners(), newInterval.getEnd(), currInterval.getEnd());
                midSegEnd = newInterval.getEnd();
            } else {
                // third seg is the bottom of the new interval
                thirdSeg = new OwnedInterval(newInterval.getOwners(), currInterval.getEnd(), newInterval.getEnd());
                midSegEnd = currInterval.getEnd();
            }
        }
        
        // now we create the middle seg with combined ownership
        midSeg = new OwnedInterval(currInterval.getOwners(), midSegStart, midSegEnd);
        midSeg.addOwners(newInterval.getOwners());
        
        if (firstSeg != null) {
            newIntervals.add(firstSeg);
        }
        if (midSeg != null) {
            newIntervals.add(midSeg);
        }
        if (thirdSeg != null) {
            newIntervals.add(thirdSeg);
        }
        
        
        return newIntervals;
    }

