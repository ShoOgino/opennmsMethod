    /**
     * This method is used to lookup a specific key in the map. If the mapped
     * value is a string is is converted to an integer and the original string
     * value is replaced in the map. The converted value is returned to the
     * caller. If the value cannot be converted then the default value is used.
     *
     * @return The array of integer values associated with the key.
     * @param map a {@link java.util.Map} object.
     * @param key a {@link java.lang.String} object.
     * @param defValues an array of int.
     */
    @SuppressWarnings("unchecked")
    public final static int[] getKeyedIntegerArray(final Map map, final String key, final int[] defValues) {
        
        if (map == null) return defValues;
        
        int[] result = defValues;
        Object oValue = map.get(key);

        if (oValue != null && oValue instanceof int[]) {
            result = (int[]) oValue;
        } else if (oValue != null) {
            List<Integer> tmpList = new ArrayList<Integer>(5);

            // Split on spaces, commas, colons, or semicolons
            //
            StringTokenizer ints = new StringTokenizer(oValue.toString(), " ;:,");
            while (ints.hasMoreElements()) {
                String token = ints.nextToken();
                try {
                    int x = Integer.parseInt(token);
                    tmpList.add(Integer.valueOf(x));
                } catch (NumberFormatException e) {
                    LogUtils.warnf(ParameterMap.class, e, "getKeyedIntegerArray: failed to convert value %s to int array for key %s due to value %s", oValue, key, token);
                }
            }
            result = new int[tmpList.size()];

            for (int x = 0; x < result.length; x++)
                result[x] = ((Integer) tmpList.get(x)).intValue();

            map.put(key, result);
        }
        return result;
    }

