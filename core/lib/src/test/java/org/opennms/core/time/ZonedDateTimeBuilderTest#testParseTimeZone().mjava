    @Test
    public void testParseTimeZone() {
        LocalDateTime time = LocalDateTime.of(2017, Month.JANUARY, 1, 1, 1, 1, 999000000);
        assertEquals(1483228861999L, ZonedDateTime.of(time, ZonedDateTimeBuilder.parseZoneId("+01:00")).toInstant().toEpochMilli());

        assertEquals(1483228861999L + (2 * 3600 * 1000), ZonedDateTime.of(time, ZonedDateTimeBuilder.parseZoneId("-01:00")).toInstant().toEpochMilli());
        assertEquals(1483228861999L + (1 * 3600 * 1000), ZonedDateTime.of(time, ZonedDateTimeBuilder.parseZoneId("-00:00")).toInstant().toEpochMilli());
        assertEquals(1483228861999L + (1 * 3600 * 1000), ZonedDateTime.of(time, ZonedDateTimeBuilder.parseZoneId("+00:00")).toInstant().toEpochMilli());
        assertEquals(1483228861999L + (1 * 3600 * 1000), ZonedDateTime.of(time, ZonedDateTimeBuilder.parseZoneId("UTC")).toInstant().toEpochMilli());
        assertEquals(1483228861999L + (1 * 3600 * 1000), ZonedDateTime.of(time, ZonedDateTimeBuilder.parseZoneId("Z")).toInstant().toEpochMilli());

        // Test common United States offset abbreviations
        assertEquals(1483228861999L + (6 * 3600 * 1000), ZonedDateTime.of(time, ZonedDateTimeBuilder.parseZoneId("EST")).toInstant().toEpochMilli());
        assertEquals(1483228861999L + (5 * 3600 * 1000), ZonedDateTime.of(time, ZonedDateTimeBuilder.parseZoneId("EDT")).toInstant().toEpochMilli());
        assertEquals(1483228861999L + (7 * 3600 * 1000), ZonedDateTime.of(time, ZonedDateTimeBuilder.parseZoneId("CST")).toInstant().toEpochMilli());
        assertEquals(1483228861999L + (6 * 3600 * 1000), ZonedDateTime.of(time, ZonedDateTimeBuilder.parseZoneId("CDT")).toInstant().toEpochMilli());
        assertEquals(1483228861999L + (8 * 3600 * 1000), ZonedDateTime.of(time, ZonedDateTimeBuilder.parseZoneId("MST")).toInstant().toEpochMilli());
        assertEquals(1483228861999L + (7 * 3600 * 1000), ZonedDateTime.of(time, ZonedDateTimeBuilder.parseZoneId("MDT")).toInstant().toEpochMilli());
        assertEquals(1483228861999L + (9 * 3600 * 1000), ZonedDateTime.of(time, ZonedDateTimeBuilder.parseZoneId("PST")).toInstant().toEpochMilli());
        assertEquals(1483228861999L + (8 * 3600 * 1000), ZonedDateTime.of(time, ZonedDateTimeBuilder.parseZoneId("PDT")).toInstant().toEpochMilli());

        // Test common European offset abbreviations
        assertEquals(1483228861999L + (-1 * 3600 * 1000), ZonedDateTime.of(time, ZonedDateTimeBuilder.parseZoneId("CEST")).toInstant().toEpochMilli());
        assertEquals(1483228861999L + (0 * 3600 * 1000), ZonedDateTime.of(time, ZonedDateTimeBuilder.parseZoneId("CET")).toInstant().toEpochMilli());
    }

