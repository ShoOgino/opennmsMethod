    @Test
    public void testEqualsTrimmed() {
        Map<String, EqualsTrimmingMatcher> impls = new LinkedHashMap<>();
        impls.put("naive", new EqualsTrimmingMatcher() {
            @Override
            public boolean equalsTrimmed(String a, String b) {
                return a != null && a.trim().equals(b);
            }
        });

        impls.put("optimized", new EqualsTrimmingMatcher() {
            @Override
            public boolean equalsTrimmed(String a, String b) {
                return StringUtils.equalsTrimmed(a, b);
            }
        });

        for (Map.Entry<String, EqualsTrimmingMatcher> impl : impls.entrySet()) {
            final String name = impl.getKey();
            final EqualsTrimmingMatcher matcher = impl.getValue(); 
            System.err.printf("Testing %s implementation.\n", name);

            // Negative hits
            assertEquals(name, false, matcher.equalsTrimmed(null, null));
            assertEquals(name, false, matcher.equalsTrimmed(null, "x"));
            assertEquals(name, false, matcher.equalsTrimmed("x", " x"));
            assertEquals(name, false, matcher.equalsTrimmed("xx", "x"));
            assertEquals(name, false, matcher.equalsTrimmed("x", "xx"));
            assertEquals(name, false, matcher.equalsTrimmed("x ", "xx"));
            assertEquals(name, false, matcher.equalsTrimmed("x", "x "));
            assertEquals(name, false, matcher.equalsTrimmed("x", " x "));

            // Positive hits
            assertEquals(name, true, matcher.equalsTrimmed("x", "x"));
            assertEquals(name, true, matcher.equalsTrimmed(" x", "x"));
            assertEquals(name, true, matcher.equalsTrimmed("x ", "x"));
            assertEquals(name, true, matcher.equalsTrimmed(" x ", "x"));
            assertEquals(name, true, matcher.equalsTrimmed(" \t\nx\t\n ", "x"));

            // Increase this when profiling
            final int N = 100000;
            long start = System.currentTimeMillis();
            for (int i = 0; i < N; i++) {
                // Both a negative positive hit
                matcher.equalsTrimmed("x", "xx");
                matcher.equalsTrimmed(" x ", "x");
            }
            long end = System.currentTimeMillis();
            System.err.printf("The %s implementation processed %d matches in %d ms.\n",
                    name, N, end - start);
        }
    }

