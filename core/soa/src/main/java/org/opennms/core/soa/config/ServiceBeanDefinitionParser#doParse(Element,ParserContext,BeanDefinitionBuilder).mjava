    /** {@inheritDoc} */
    @Override
    public void doParse(Element element, ParserContext context, BeanDefinitionBuilder bean) {
        
        String ref = element.getAttribute(REF_ATTR);
        bean.addPropertyReference("target", ref);
        bean.addPropertyReference("serviceRegistry", SERVICE_REGISTRY_BEAN_NAME);
        
        String dependsOn = element.getAttribute(DEPENDS_ON_ATTR);
        if (dependsOn != null && !"".equals(dependsOn.trim())) {
            bean.addDependsOn(dependsOn.trim());
        }
        
        String serviceInterface = element.getAttribute(INTERFACE_ATTR);
        if (StringUtils.hasText(serviceInterface)) {
            bean.addPropertyValue("interfaces", serviceInterface);
        }
        
        NodeList nodeList = element.getChildNodes();
        
        for(int i = 0; i < nodeList.getLength(); i++) {
            Node n = nodeList.item(i);
            
            if (n instanceof Element) {
                Element child = (Element) n;
                
                if (INTERFACES_ELEM.equals(child.getLocalName())) {
                    
                    if (element.hasAttribute(INTERFACE_ATTR)) {
                        context.getReaderContext().error("either 'interface' attribute or <interfaces> sub-element has to be specified", element);
                    }                
                
                    Set<?> interfaces = context.getDelegate().parseSetElement(child, bean.getBeanDefinition());
                    bean.addPropertyValue("interfaces", interfaces);
                
                } else if (PROPS_ELEM.equals(child.getLocalName())) {
                    Map<?,?> svcProps = context.getDelegate().parseMapElement(child, bean.getBeanDefinition());
                    bean.addPropertyValue("serviceProperties", svcProps);
                }
                
            }

            
        }
        

    }

