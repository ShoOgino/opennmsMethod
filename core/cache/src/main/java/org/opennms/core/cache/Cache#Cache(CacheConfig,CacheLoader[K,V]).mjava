    public Cache(CacheConfig config, CacheLoader<K, V> cacheLoader) {
        this.config = Objects.requireNonNull(config);
        this.cacheLoader = Objects.requireNonNull(cacheLoader);

        config.validate();
        logger.debug("Cache cache.{} is {}", config.getName(), config.isEnabled());

        if (config.isEnabled()) {
            this.delegate = config.createBuilder().build(cacheLoader);
        }

        // Expose cache statistics
        if (delegate != null) {
            if (config.isRecordStats()) {
                logger.debug("Recording of \"{}\" cache statistics is enabled.", config.getName());
                final MetricRegistry registry = config.getMetricRegistry();
                registry.register(MetricRegistry.name("cache." + config.getName() + ".evictionCount"), (Gauge) () -> delegate.stats().evictionCount());
                registry.register(MetricRegistry.name("cache." + config.getName() + ".hitRate"), (Gauge) () -> delegate.stats().hitRate());
                registry.register(MetricRegistry.name("cache." + config.getName() + ".loadExceptionCount"), (Gauge) () -> delegate.stats().loadExceptionCount());
            } else {
                logger.debug("Recording of \"{}\" cache statistics is disabled.", config.getName());
            }
        }
    }

