    private Map<String,List<AssetResource>> loadAssets(final boolean minified) {
        return withLogPrefix(() ->  {
            try {
                final Map<String,List<AssetResource>> newAssets = new HashMap<>();

                Resource r = new ClassPathResource(minified? "/assets/assets.min.json" : "/assets/assets.json");

                if (m_filesystemPath != null) {
                    final Path p = Paths.get(m_filesystemPath).resolve(minified? "assets.min.json" : "assets.json");
                    if (p.toFile().exists()) {
                        r = new FileSystemResource(p.toFile());
                    }
                }

                LOG.info("Loading asset data from {}", r);
                byte[] bdata = FileCopyUtils.copyToByteArray(r.getInputStream());

                final String json = new String(bdata, StandardCharsets.UTF_8);
                final JSONObject assetsObj = new JSONObject(json);
                final JSONArray names = assetsObj.names();
                for (int i=0; i < names.length(); i++) {
                    final String assetName = names.getString(i);
                    final JSONObject assetObj = assetsObj.getJSONObject(assetName);
                    final List<AssetResource> assets = new ArrayList<>(assetObj.length());
                    final JSONArray keys = assetObj.names();
                    int count = 0;
                    for (int j=0; j < keys.length(); j++) {
                        final String type = keys.getString(j);
                        if (!assetObj.isNull(type)) {
                            final Object item = assetObj.get(type);
                            if (item instanceof JSONArray) {
                                LOG.debug("{} is an anonymous type resource; skipping indexing", type);
                            } else {
                                final String path = assetObj.getString(type);
                                assets.add(new AssetResource(assetName, type, path));
                                count++;
                            }
                        }
                    }
                    if (count > 0) {
                        newAssets.put(assetName, assets);
                    }
                }

                m_lastModified = Math.max(getLastModified(), r.lastModified());
                return newAssets;
            } catch (final Exception e) {
                LOG.warn("Failed to load asset manifest.", e);
            }
            return null;
        });
    }

