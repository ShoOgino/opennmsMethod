    protected Resource getResource(final String requestPath, final List<? extends Resource> locations) {
        for (final Resource location : locations) {
            try {
                if (resourcesMatch(s_assetsPath, location)) {
                    final Resource resource = location.createRelative(requestPath);
                    LOG.debug("checking request {} in location {}", requestPath, location);
                    final String fileName = resource.getFilename();

                    if (s_filesystemPath != null) {
                        final File f = Paths.get(s_filesystemPath, fileName).toFile();
                        LOG.debug("Checking for resource in filesystem: {}", f);
                        if (f.exists() && f.canRead()) {
                            LOG.trace("File exists and is readable: {}", f);
                            return new FileSystemResource(f);
                        }
                    }

                    final int index = fileName.lastIndexOf(".");
                    if (index > 0) {
                        final String assetName = fileName.substring(0,  index);
                        final String type = fileName.substring(index + 1);
                        final Optional<AssetResource> assetResource = getResource(assetName, type);
                        LOG.debug("Checking for resource in classpath: {}.{} ({})", assetName, type, assetResource);
                        if (assetResource.isPresent()) {
                            final Resource found = new ClassPathResource(assetResource.get().getPath());
                            LOG.debug("Found ClassPathResource: {}", found);
                            if (found.exists() && found.isReadable()) {
                                LOG.trace("Resource exists and is readable: {}", found);
                                return found;
                            }
                        }
                    }

                    if (resource.exists()) {
                        return resource;
                    }
                }

                LOG.debug("unhandled location {} for request path {}", location, requestPath);
            } catch (final IOException e) {
                LOG.debug("Failed to create relative path from {} in {}. Trying next location.", requestPath, location, e);
            }
        }
        return null;
    }

