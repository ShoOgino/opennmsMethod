    protected Resource getResource(final String requestPath, final List<? extends Resource> locations) {
        return withLogPrefix(() -> {
            for (final Resource location : locations) {
                try {
                    if (resourcesMatch(s_assetsPath, location)) {
                        final Resource resource = location.createRelative(requestPath);
                        LOG.debug("checking request {} in location {}", requestPath, location);
                        final String fileName = resource.getFilename();

                        if (m_filesystemPath != null) {
                            final File f = Paths.get(m_filesystemPath, fileName).toFile();
                            LOG.debug("Checking for resource in filesystem: {}", f);
                            if (f.exists() && f.canRead()) {
                                LOG.trace("File exists and is readable: {}", f);
                                return new FileSystemResource(f);
                            }
                        }

                        final int index = fileName.lastIndexOf(".");
                        if (index > 0) {
                            final String assetName = fileName.substring(0,  index);
                            final String type = fileName.substring(index + 1);
                            final Optional<AssetResource> assetResource = getResource(assetName, type);
                            LOG.debug("Checking for resource in classpath: {}.{} ({})", assetName, type, assetResource);
                            if (assetResource.isPresent()) {
                                final Resource relativeResource = new ClassPathResource("/" + assetResource.get().getPath());
                                LOG.debug("Using ClassPathResource: {}", relativeResource);
                                if (relativeResource.exists() && relativeResource.isReadable()) {
                                    LOG.trace("Resource exists and is readable: {}", relativeResource);
                                    return relativeResource;
                                }
                            } else {
                                LOG.debug("Asset resource was not found: {}:{}", assetName, type);
                            }
                        }

                        if (resource.exists()) {
                            return resource;
                        }
                    }

                    LOG.debug("unhandled location {} for request path {}", location, requestPath);
                } catch (final IOException e) {
                    LOG.debug("Failed to create relative path from {} in {}. Trying next location.", requestPath, location, e);
                }
            }
            return null;
        });
    }

