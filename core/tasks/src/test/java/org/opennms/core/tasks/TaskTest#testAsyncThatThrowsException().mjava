    @Test(timeout=1000)
    public void testAsyncThatThrowsException() throws Exception {
        
        AtomicInteger count = new AtomicInteger(0);
    
        Async<Integer> thrower = new Async<Integer>() {

            @Override
            public void supplyAsyncThenAccept(Callback<Integer> cb) {
                throw new RuntimeException("Intentionally failed for test purposes");
            }
            
        };
           
        
        AbstractTask throwerTask = m_coordinator.createTask(null, thrower, setter(count));
        AbstractTask incrTask = m_coordinator.createTask(null, incr(count));
        
        incrTask.addPrerequisite(throwerTask);
        
        
        incrTask.schedule();
        throwerTask.schedule();
        
        
        incrTask.waitFor(1500, TimeUnit.MILLISECONDS);

        assertEquals(1, count.get());
    }

