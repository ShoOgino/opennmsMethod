    /**
     * <p>getMBeanServerConnection</p>
     *
     * @param propertiesMap a {@link java.util.Map} object.
     * @param address a {@link java.net.InetAddress} object.
     * @return a {@link org.opennms.netmgt.provision.support.jmx.connectors.Jsr160ConnectionWrapper} object.
     * @throws IOException 
     */
    public static JmxServerConnectionWrapper getMBeanServerConnection(Map<String,?> propertiesMap, InetAddress address) throws IOException {
        String factory  = ParameterMap.getKeyedString( propertiesMap, "factory", "STANDARD");
        int    port     = ParameterMap.getKeyedInteger(propertiesMap, "port",     1099);
        String protocol = ParameterMap.getKeyedString( propertiesMap, "protocol", "rmi");
        String urlPath  = ParameterMap.getKeyedString( propertiesMap, "urlPath",  "/jmxrmi");
        String username = ParameterMap.getKeyedString(propertiesMap, "username", null);
        String password = ParameterMap.getKeyedString(propertiesMap, "password", null);
        
        Jsr160ConnectionWrapper connectionWrapper = null;
        JMXServiceURL url = null;
        
        final String hostAddress = InetAddressUtils.str(address);
        LOG.debug("JMX: {} - service:{}//{}:{}{}", factory, protocol, hostAddress, port, urlPath);

        if (factory == null || factory.equals("STANDARD")) {
                url = getUrl(address, port, protocol, urlPath);
                
                // Connect a JSR 160 JMXConnector to the server side
                JMXConnector connector = JMXConnectorFactory.connect(url);
                MBeanServerConnection connection = connector.getMBeanServerConnection();
                
                return new Jsr160ConnectionWrapper(connector, connection);
        }
        else if (factory.equals("PASSWORD-CLEAR")) {
                HashMap<String, String[]> env = new HashMap<String, String[]>();
                
                // Provide the credentials required by the server to successfully
                // perform user authentication
                //
                String[] credentials = new String[] { username , password };
                env.put("jmx.remote.credentials", credentials);
                
                // Create an RMI connector client and
                // connect it to the RMI connector server
                //
                url = getUrl(address, port, protocol, urlPath);
                
                // Connect a JSR 160 JMXConnector to the server side
                JMXConnector connector = JMXConnectorFactory.newJMXConnector(url, null);
                
                // Connect and invoke an operation on the remote MBeanServer
                connector.connect(env);

                MBeanServerConnection connection = connector.getMBeanServerConnection();

                return new Jsr160ConnectionWrapper(connector, connection);
        }
        /*
        else if (factory.equals("PASSWORD-OBFUSCATED")) {
            HashMap env = new HashMap();
            
            // Provide the credentials required by the server to successfully
            // perform user authentication
            //
            String[] credentials = new String[] { username , PasswordAuthenticator.obfuscatePassword(password) };
            env.put("jmx.remote.credentials", credentials);
            
            // Create an RMI connector client and
            // connect it to the RMI connector server
            //
            url = new JMXServiceURL(protocol, hostAddress, port, urlPath);
            
            // Connect a JSR 160 JMXConnector to the server side
            JMXConnector connector = JMXConnectorFactory.newJMXConnector(url, null);
            
            // Connect and invoke an operation on the remote MBeanServer
            connector.connect(env);

            MBeanServerConnection connection = connector.getMBeanServerConnection();

            connectionWrapper = new Jsr160ConnectionWrapper(connector, connection);
        }
        
        else if (factory.equals("SSL")) {
            HashMap env = new HashMap();
            
            // Provide the credentials required by the server to successfully
            // perform user authentication
            //
            String[] credentials = new String[] { username , PasswordAuthenticator.obfuscatePassword(password) };
            env.put("jmx.remote.credentials", credentials);
            
            // Create an RMI connector client and
            // connect it to the RMI connector server
            //
            url = new JMXServiceURL(protocol, hostAddress, port, urlPath);
            
            // Connect a JSR 160 JMXConnector to the server side
            JMXConnector connector = JMXConnectorFactory.newJMXConnector(url, null);
            
            // Connect and invoke an operation on the remote MBeanServer
            connector.connect(env);

            MBeanServerConnection connection = connector.getMBeanServerConnection();

            connectionWrapper = new Jsr160ConnectionWrapper(connector, connection);
        }
        */
        else {
            throw new IOException("Unsupported connection factory: " + factory);
        }
    }

