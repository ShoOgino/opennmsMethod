    @Override
    public JmxServerConnectionWrapper createConnection(String address, Map<String, String> propertiesMap) throws JmxServerConnectionException {
        Jsr160ConnectionWrapper connectionWrapper = null;

        JMXServiceURL url = null;

        String factory = ParameterMap.getKeyedString(propertiesMap, "factory", "SASL");
        int port = ParameterMap.getKeyedInteger(propertiesMap, "port", 11162);
        String protocol = ParameterMap.getKeyedString(propertiesMap, "protocol", "jmxmp");
        String urlPath = ParameterMap.getKeyedString(propertiesMap, "urlPath", "");
        String sunCacao = ParameterMap.getKeyedString(propertiesMap, "sunCacao", "false");

        // RMI and JMXMP use different URL schemes
        try {
            if (protocol.equalsIgnoreCase("jmxmp") || protocol.equalsIgnoreCase("remoting-jmx")) {

                // Create an JMXMP connector client and
                // connect it to the JMXMP connector server
                url = new JMXServiceURL(protocol, address, port, urlPath);
            } else {
                // Fallback, building a URL for RMI
                url = new JMXServiceURL("service:jmx:" + protocol + ":///jndi/" + protocol + "://" + address + ":" + port + urlPath);
            }
        } catch (MalformedURLException e) {
            LOG.error("JMXServiceURL exception: {}. Error message: {}", url, e.getMessage());
        }
        LOG.debug("Set JMXServiceURL: {}", url);

        // configure and create Simple Authentication and Security Layer
        if (factory.equals("SASL")) {
            try {
                String username = ParameterMap.getKeyedString(propertiesMap, "username", null);
                String password = ParameterMap.getKeyedString(propertiesMap, "password", null);

                HashMap<String, Object> env = new HashMap<String, Object>();

                // TODO: We can have a deadlock here
                while (true) {
                    AnyServerX509TrustManager tm;
                    KeyStore ks;

                    try {
                        ks = KeyStore.getInstance(KeyStore.getDefaultType());
                        TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
                        tmf.init(ks);
                        // X509TrustManager defaultTrustManager = (X509TrustManager) tmf.getTrustManagers()[0];
                        tm = new AnyServerX509TrustManager();
                        SSLContext ctx = SSLContext.getInstance("TLSv1");
                        ctx.init(null, new TrustManager[]{tm}, null);
                        SSLSocketFactory ssf = ctx.getSocketFactory();
                        env.put("jmx.remote.tls.socket.factory", ssf);
                    } catch (Throwable e) {
                    	LOG.error("Something bad occured: {}", e.getMessage());
                        throw e;
                    }

                    // We don't need to add this provider manually... it is included in the JVM
                    // by default in Java5+
                    //
                    // @see $JAVA_HOME/jre/lib/security/java.security
                    //
                    //Security.addProvider(new com.sun.security.sasl.Provider());

                    String[] creds;
                    if (sunCacao.equals("true"))
                        creds = new String[]{"com.sun.cacao.user\001" + username, password};
                    else
                        creds = new String[]{username, password};
                    env.put("jmx.remote.profiles", "TLS SASL/PLAIN");
                    env.put("jmx.remote.credentials", creds);

                    JMXConnector connector = JMXConnectorFactory.newJMXConnector(url, null);

                    // Connect and invoke an operation on the remote MBeanServer
                    try {
                        connector.connect(env);
                    } catch (SSLException e) {
                        LOG.warn("SSLException occured. Error message: {}", e.getMessage());
                    } catch (SecurityException x) {
                        LOG.error("Security exception: bad credentials. Error message: {}", x.getMessage());
                    }
                    MBeanServerConnection connection = connector.getMBeanServerConnection();
                    connectionWrapper = new Jsr160ConnectionWrapper(connector, connection);
                    break;
                }
            } catch (Throwable e) {
                LOG.error("Unable to get MBeanServerConnection: {}. Error message: {}", url, e.getMessage());
            }
        }

    return connectionWrapper;
    }

