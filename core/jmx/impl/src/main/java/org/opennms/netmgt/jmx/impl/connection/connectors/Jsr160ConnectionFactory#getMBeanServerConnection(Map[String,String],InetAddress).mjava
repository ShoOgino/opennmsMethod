    public static JmxServerConnectionWrapper getMBeanServerConnection(Map<String,String> propertiesMap, InetAddress address) throws IOException {
        final long timeout = DEFAULT_TIMEOUT;

        propertiesMap.putIfAbsent("factory", "STANDARD");
        propertiesMap.putIfAbsent("port",     "1099");
        propertiesMap.putIfAbsent("protocol", "rmi");
        propertiesMap.putIfAbsent("urlPath",  "/jmxrmi");
        propertiesMap.putIfAbsent("timeout", Long.toString(timeout));

        final Callable<JmxServerConnectionWrapper> task = new Callable<JmxServerConnectionWrapper>() {
            @Override
            public JmxServerConnectionWrapper call() throws Exception {
                return new DefaultJmxConnector().createConnection(address, propertiesMap);
            }
        };
        final Future<JmxServerConnectionWrapper> future = executor.submit(task);
        try {
            final JmxServerConnectionWrapper connectionWrapper = future.get(timeout, TimeUnit.MILLISECONDS);
            return connectionWrapper;
        } catch (InterruptedException | ExecutionException | TimeoutException e) {
            final String url = JmxConnectionConfigBuilder.buildFrom(address, propertiesMap).build().getUrl();
            LOG.info("Exception connecting JMXConnectorFactory url {} , Error: {}", url, e.getMessage());
            if (!future.isDone()) {
                future.cancel(true);
                LOG.info(" the task {}", future.isCancelled() ? "was cancelled" : "could not be cancelled");
            }
            throw new ConnectException("Error connecting JMXConnectionFactory  " + url);
        }
    }

