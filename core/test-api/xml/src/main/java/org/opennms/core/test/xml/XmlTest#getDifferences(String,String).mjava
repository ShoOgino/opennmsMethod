    protected static List<Difference> getDifferences(final String xmlA, final String xmlB) throws SAXException, IOException {
        final DetailedDiff myDiff = new DetailedDiff(XMLUnit.compareXML(xmlA, xmlB));
        final List<Difference> retDifferences = new ArrayList<Difference>();
        @SuppressWarnings("unchecked")
        final List<Difference> allDifferences = myDiff.getAllDifferences();
        if (allDifferences.size() > 0) {
            DIFFERENCES: for (final Difference d : allDifferences) {
                final String control = d.getControlNodeDetail().getValue();
                final String test = d.getTestNodeDetail().getValue();

                if (d.getDescription().equals("namespace URI")) {
                    for (final String namespace : m_ignoredNamespaces) {
                        if (control != null && !"null".equals(control)) {
                            if (control.equalsIgnoreCase(namespace)) {
                                LOG.trace("Ignoring {}: {}", d.getDescription(), d);
                                continue DIFFERENCES;
                            }
                        }
                        if (test != null && !"null".equals(test)) {
                            if (test.equalsIgnoreCase(namespace)) {
                                LOG.trace("Ignoring {}: {}", d.getDescription(), d);
                                continue DIFFERENCES;
                            }
                        }
                    }
                    if (ignoreAllNamespaceDifferences()) {
                        LOG.trace("Found difference: {}: {} (IGNORED, ignoreAllNamespaceDifferences=true)", d.getDescription(), d);
                        continue DIFFERENCES;
                    }
                } else if (d.getDescription().equals("namespace prefix")) {
                    for (final String namespace : m_ignoredPrefixes) {
                        if (control != null && !"null".equals(control)) {
                            if (control.equalsIgnoreCase(namespace)) {
                                LOG.trace("Ignoring {}: {}", d.getDescription(), d);
                                continue DIFFERENCES;
                            }
                        }
                        if (test != null && !"null".equals(test)) {
                            if (test.equalsIgnoreCase(namespace)) {
                                LOG.trace("Ignoring {}: {}", d.getDescription(), d);
                                continue DIFFERENCES;
                            }
                        }
                    }
                    if (ignoreAllPrefixDifferences()) {
                        LOG.trace("Found difference: {}: {} (IGNORED, ignoreAllPrefixDifferences=true)", d.getDescription(), d);
                        continue DIFFERENCES;
                    }
                }

                LOG.warn("Found difference: {}: {}", d.getDescription(), d);
                retDifferences.add(d);
            }
        }
        return retDifferences;
    }

