    private void assertDepthEquals(final Object expected, Object actual) {
        /*
        System.err.println("----------");
        System.err.println("expected: " + expected);
        System.err.println("actual:   " + actual);
        */

        if (expected == null && actual == null) {
            return;
        } else if (expected == null) {
            fail("expected was null but actual was not!");
        } else if (actual == null) {
            fail("actual was null but expected was not!");
        }

        if (expected.getClass().getName().startsWith("java") || actual.getClass().getName().startsWith("java")) {
            // java primitives, just do assertEquals
            if (expected instanceof Object[] || actual instanceof Object[]) {
                assertTrue(Arrays.equals((Object[])expected, (Object[])actual));
            } else {
                assertEquals(expected, actual);
            }
            return;
        }

        final BeanWrapper expectedWrapper = new BeanWrapperImpl(expected);
        final BeanWrapper actualWrapper   = new BeanWrapperImpl(actual);

        final Set<String> properties = new TreeSet<String>();
        for (final PropertyDescriptor descriptor : expectedWrapper.getPropertyDescriptors()) {
            properties.add(descriptor.getName());
        }
        for (final PropertyDescriptor descriptor : actualWrapper.getPropertyDescriptors()) {
            properties.add(descriptor.getName());
        }

        properties.remove("class");

        for (final String property : properties) {
            //System.err.println("property: " + property);
            final PropertyDescriptor expectedDescriptor = expectedWrapper.getPropertyDescriptor(property);
            final PropertyDescriptor actualDescriptor = actualWrapper.getPropertyDescriptor(property);
            
            if (expectedDescriptor != null && actualDescriptor != null) {
                // both have descriptors, so walk the sub-objects
                Object expectedValue = null;
                Object actualValue   = null;
                try {
                    expectedValue = expectedWrapper.getPropertyValue(property);
                } catch (final Exception e) {
                }
                try {
                    actualValue = actualWrapper.getPropertyValue(property);
                } catch (final Exception e) {
                }

                assertDepthEquals(expectedValue, actualValue);
            } else if (expectedDescriptor != null) {
                fail("Should have '" + property + "' property on actual object, but there was none!");
            } else if (actualDescriptor != null) {
                fail("Should have '" + property + "' property on expected object, but there was none!");
            }

        }

        if (expected instanceof Object[] || actual instanceof Object[]) {
            assertTrue(Arrays.equals((Object[])expected, (Object[])actual));
        } else {
            assertEquals(expected, actual);
        }
    }

