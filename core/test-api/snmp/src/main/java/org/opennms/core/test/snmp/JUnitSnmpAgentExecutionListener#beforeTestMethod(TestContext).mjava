    @Override
    public void beforeTestMethod(final TestContext testContext) throws Exception {
        super.beforeTestClass(testContext);

        final JUnitSnmpAgents agents = findAgentListAnnotation(testContext);
        final JUnitSnmpAgent agent = findAgentAnnotation(testContext);

        // save the existing strategy property
        String strategy = System.getProperty(STRATEGY_CLASS_PROPERTY);
        testContext.setAttribute(STRATEGY_CLASS_KEY, strategy);

        // if no annotations exists then do nothing
        if (agents == null && agent == null) {
            // no annotations found
            return;
        }

        // determine if we should use the mock strategry
        boolean useMockSnmpStrategy = shouldUseMockStrategy(agents, agent);
        
        // override the configured strategy to use the mock strategy if necessary
        if (useMockSnmpStrategy) {
            strategy = MockSnmpStrategy.class.getName();
            System.setProperty(STRATEGY_CLASS_PROPERTY, MockSnmpStrategy.class.getName());
            LOG.info("Forcing JUnit SNMP Agent to use mock strategy");
        }

        LOG.debug("Initializing JUnit SNMP Agent with strategy: {}", strategy == null ? "default" : strategy);

        final MockSnmpDataProvider provider = useMockSnmpStrategy 
                ? new MockSnmpStrategyDataProvider() 
                : new MockSnmpAgentDataProvider();
                
        testContext.setAttribute(PROVIDER_KEY, provider);

        if (agents != null) {
            for (final JUnitSnmpAgent a : agents.value()) {
                handleSnmpAgent(testContext, a, useMockSnmpStrategy, provider);
            }
        }

        handleSnmpAgent(testContext, agent, useMockSnmpStrategy, provider);

        if (testContext.getTestInstance() instanceof MockSnmpDataProviderAware) {
            LOG.debug("injecting data provider into MockSnmpDataProviderAware test: {}", testContext.getTestInstance());
            ((MockSnmpDataProviderAware)testContext.getTestInstance()).setMockSnmpDataProvider(provider);
        }
    }

