    @Override
    public void beforeTestMethod(final TestContext testContext) throws Exception {
    	super.beforeTestClass(testContext);

        final JUnitSnmpAgents agents = findAgentListAnnotation(testContext);
        final JUnitSnmpAgent agent = findAgentAnnotation(testContext);

        if (agents == null && agent == null) {
            // no annotations found
            return;
        }

        final String strategy = System.getProperty(STRATEGY_CLASS_PROPERTY);
        LogUtils.debugf(this, "Initializing JUnit SNMP Agent with strategy: %s", strategy);

        testContext.setAttribute(STRATEGY_CLASS_KEY, strategy);
        final HashMap<SnmpAgentAddress,MockSnmpAgent> mockAgents = new HashMap<SnmpAgentAddress,MockSnmpAgent>();
        testContext.setAttribute(AGENT_KEY, mockAgents);

        final String useMockSnmpStrategyString = System.getProperty(USE_STRATEGY_PROPERTY, useMockSnmpStrategyDefault.toString());
        final Boolean useMockSnmpStrategy = Boolean.valueOf(useMockSnmpStrategyString);
        final MockSnmpDataProvider provider;
        if (useMockSnmpStrategy) {
            System.setProperty(STRATEGY_CLASS_PROPERTY, MockSnmpStrategy.class.getName());
            provider = new MockSnmpStrategyDataProvider();
        } else {
            provider = new MockSnmpAgentDataProvider(mockAgents);
        }
        testContext.setAttribute(PROVIDER_KEY, provider);

        if (agents != null) {
            for (final JUnitSnmpAgent a : agents.value()) {
                handleSnmpAgent(testContext, a, provider);
            }
        }

        handleSnmpAgent(testContext, findAgentAnnotation(testContext), provider);

        if (testContext.getTestInstance() instanceof MockSnmpDataProviderAware) {
            LogUtils.debugf(this, "injecting data provider into MockSnmpDataProviderAware test: %s", testContext.getTestInstance());
            ((MockSnmpDataProviderAware)testContext.getTestInstance()).setMockSnmpDataProvider(provider);
        }
    }

