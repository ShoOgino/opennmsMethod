    protected void handleSnmpAgent(final TestContext testContext, final JUnitSnmpAgent config, final Boolean agentsUseMockSnmpStrategy) throws UnknownHostException, InterruptedException {
        if (config == null) return;

        boolean useMockSnmpStrategy = config.useMockSnmpStrategy();
        // if the agents object has set a property, use it globally instead
        if (agentsUseMockSnmpStrategy != null) {
            useMockSnmpStrategy = agentsUseMockSnmpStrategy;
        }
        LogUtils.debugf(this, "handleSnmpAgent(%s, %s, %s)", testContext, config, useMockSnmpStrategy);
        
        String host = config.host();
        if (host == null || "".equals(host)) {
            /*
             * NOTE: This call produces different results on different platforms so make
             * sure your client code is aware of this. If you use the {@link ProxySnmpAgentConfigFactory}
             * by including the <code>classpath:/META-INF/opennms/applicationContext-proxy-snmp.xml</code>
             * Spring context, you probably won't need to deal with this. It will override the
             * SnmpPeerFactory with the correct values.
             * 
             * Linux: 127.0.0.1
             * Mac OS: primary external interface
             */
            host = InetAddressUtils.str(InetAddress.getLocalHost());
            //host = "127.0.0.1";
        }
        
        final ResourceLoader loader = new DefaultResourceLoader();
        final Resource resource = loader.getResource(config.resource());

        // NOTE: The default value for config.port is specified inside {@link JUnitSnmpAgent}
        if (useMockSnmpStrategy) {
            System.setProperty("org.opennms.snmp.strategyClass", MockSnmpStrategy.class.getName());
            try {
                MockSnmpStrategy.addHost(InetAddressUtils.addr(host), config.port(), resource);
            } catch (final IOException e) {
                LogUtils.debugf(this, e, "Unable to add %s:%d with resource %s to the MockSnmpStrategy!", host, config.port(), config.resource());
                e.printStackTrace();
            }
        } else {
            final String bindAddress = host +"/"+ config.port();
            LogUtils.debugf(this, "creating MockSnmpAgent on %s", bindAddress);
            final MockSnmpAgent agent = MockSnmpAgent.createAgentAndRun(resource, bindAddress);
            
            LogUtils.debugf(this, "Set up agent %s, loaded content from %s", agent, config.resource());
            testContext.setAttribute(MOCK_SNMP_AGENT, agent);
            
            // FIXME: Is there a better way to inject the MockSnmpAgent into the test class?  Seems that spring doesn't have appropriate hooks
            if (testContext.getTestInstance() instanceof MockSnmpAgentAware) {
                LogUtils.debugf(this, "injecting agent into MockSnmpAgentAware test: %s", testContext.getTestInstance());
                ((MockSnmpAgentAware)testContext.getTestInstance()).setMockSnmpAgent(agent);
            }
        }
    }

