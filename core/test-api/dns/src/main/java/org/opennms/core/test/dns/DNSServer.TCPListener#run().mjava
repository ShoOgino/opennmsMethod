        @Override
        public void run() {
            try {
                m_socket = new ServerSocket(m_port, 128, m_addr);
                m_socket.setSoTimeout(DEFAULT_SOCKET_TIMEOUT);
                while (!m_stopped) {
                    try {
                        final Socket s = m_socket.accept();
                        final Thread t = new Thread(new Runnable() {
                            @Override
                            public void run() {
                                InputStream is = null;
                                DataInputStream dataIn = null;
                                DataOutputStream dataOut = null;
                                try {
                                    try {
                                        is = s.getInputStream();
                                        dataIn = new DataInputStream(is);
                                        final int inLength = dataIn.readUnsignedShort();
                                        final byte[] in = new byte[inLength];
                                        dataIn.readFully(in);

                                        final Message query;
                                        byte[] response = null;
                                        try {
                                            query = new Message(in);
                                            LOG.debug("received query: {}", query);
                                            response = generateReply(query, in, in.length, s);
                                        } catch (final IOException e) {
                                            response = formerrMessage(in);
                                        }
                                        LOG.debug("returned response: {}", response == null? null : new Message(response));
                                        if (response != null) {
                                            dataOut = new DataOutputStream(s.getOutputStream());
                                            dataOut.writeShort(response.length);
                                            dataOut.write(response);
                                        }
                                    } catch (final SocketTimeoutException e) {
                                        throw e;
                                    } catch (final IOException e) {
                                        LOG.warn("error while processing socket", e);
                                    } finally {
                                        IOUtils.closeQuietly(s);
                                        IOUtils.closeQuietly(dataOut);
                                        IOUtils.closeQuietly(dataIn);
                                        IOUtils.closeQuietly(is);
                                    }
                                } catch (final SocketTimeoutException e) {
                                    LOG.trace("timed out waiting for request", e);
                                }
                            }
                        });
                        t.start();
                    } catch (final SocketTimeoutException e) {
                        LOG.trace("timed out waiting for request", e);
                    }
                }
            } catch (final IOException e) {
                LOG.warn("unable to serve socket on {}", addrport(m_addr, m_port), e);
            } finally {
                try {
                    m_socket.close();
                } catch (final IOException e) {
                    LOG.debug("error while closing socket", e);
                }
                m_latch.countDown();
            }
        }

