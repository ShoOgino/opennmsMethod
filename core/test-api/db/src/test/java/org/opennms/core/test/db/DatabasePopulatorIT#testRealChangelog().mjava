    @Test
    @JUnitTemporaryDatabase(createSchema=false)
    public void testRealChangelog() throws Exception {
        final Migration migration = new Migration();
        migration.setAdminUser(System.getProperty(TemporaryDatabase.ADMIN_USER_PROPERTY, TemporaryDatabase.DEFAULT_ADMIN_USER));
        migration.setAdminPassword(System.getProperty(TemporaryDatabase.ADMIN_PASSWORD_PROPERTY, TemporaryDatabase.DEFAULT_ADMIN_PASSWORD));
        migration.setDatabaseUser(System.getProperty(TemporaryDatabase.ADMIN_USER_PROPERTY, TemporaryDatabase.DEFAULT_ADMIN_USER));
        migration.setDatabasePassword(System.getProperty(TemporaryDatabase.ADMIN_PASSWORD_PROPERTY, TemporaryDatabase.DEFAULT_ADMIN_PASSWORD));
        migration.setDatabaseName(TemporaryDatabasePostgreSQL.INTEGRATION_TEST_TEMPLATE_DB_NAME);
        migration.setChangeLog("changelog.xml");
        
        m_dataSource = new SimpleDataSource("org.postgresql.Driver", "jdbc:postgresql://localhost:5432/" + TemporaryDatabasePostgreSQL.INTEGRATION_TEST_TEMPLATE_DB_NAME, migration.getDatabaseUser(), migration.getDatabasePassword());
        DataSource adminDataSource = new SimpleDataSource("org.postgresql.Driver", "jdbc:postgresql://localhost:5432/template1", migration.getDatabaseUser(), migration.getDatabasePassword());

        final Migrator m = new Migrator();
        m.setDataSource(m_dataSource);
        m.setAdminDataSource(adminDataSource);
        m.setValidateDatabaseVersion(true);
        m.setCreateUser(false);
        m.setCreateDatabase(true);
        
        if (m.databaseExists(migration)) {
            m.databaseRemoveDB(migration);
        }
        
        System.out.println("blam");
        System.err.println("blarm!");

        m.prepareDatabase(migration);

        assertFalse(changelogExists());
        m.checkUnicode(migration);
        m.updateIplike();

        // Add a resource accessor to the migration so that it will load multiple changelog.xml files
        // from the classpath
        for (final Resource resource : getRealChangelog()) {
            LOG.info("=== found resource: {} ===", resource);
            migration.setAccessor(new ExistingResourceAccessor(resource));
            m.migrate(migration);
        }

        final List<ChangelogEntry> ids = getChangelogEntries();
        assertTrue(ids.size() > 0);
        // Check to make sure some of the changelogs ran
        assertTrue(ids.stream().anyMatch(id -> "17.0.0-remove-legacy-ipinterface-composite-key-fields".equals(id.getId())));
        assertTrue(ids.stream().anyMatch(id -> "17.0.0-remove-legacy-outages-composite-key-fields".equals(id.getId())));
    }

