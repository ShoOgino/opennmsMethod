    @Override
    public void beforeTestClass(final TestContext testContext) throws Exception {
        // Fire up a thread pool for each CPU to create test databases
        ExecutorService pool = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());

        final JUnitTemporaryDatabase classJtd = testContext.getTestClass().getAnnotation(JUnitTemporaryDatabase.class);

        final Future<TemporaryDatabase> classDs;
        if (classJtd != null) {
            classDs = pool.submit(new CreateNewDatabaseCallable(classJtd));
            if (classJtd.reuseDatabase() == false) {
                m_createNewDatabases = true;
            }
        } else {
            classDs = null;
        }

        List<Future<TemporaryDatabase>> futures = new ArrayList<Future<TemporaryDatabase>>();
        for (Method method : testContext.getTestClass().getMethods()) {
            if (method != null) {
                final JUnitTemporaryDatabase methodJtd = method.getAnnotation(JUnitTemporaryDatabase.class);
                boolean methodHasTest = method.getAnnotation(Test.class) != null;
                if (methodHasTest) {
                    // If there is a method-specific annotation, use it to create the temporary database
                    if (methodJtd != null) {
                        // Create a new database based on the method-specific annotation
                        Future<TemporaryDatabase> submit = pool.submit(new CreateNewDatabaseCallable(methodJtd));
                        Assert.notNull(submit, "pool.submit(new CreateNewDatabaseCallable(methodJtd = " + methodJtd + ")");
                        futures.add(submit);
                    } else if (classJtd != null) {
                        if (m_createNewDatabases) {
                            // Create a new database based on the test class' annotation
                            Future<TemporaryDatabase> submit = pool.submit(new CreateNewDatabaseCallable(classJtd));
                            Assert.notNull(submit, "pool.submit(new CreateNewDatabaseCallable(classJtd = " + classJtd + ")");
                            futures.add(submit);
                        } else {
                            // Reuse the database based on the test class' annotation
                            Assert.notNull(classDs, "classDs");
                            futures.add(classDs);
                        }
                    }
                }
            }
        }

        for (Future<TemporaryDatabase> db : futures) {
            m_databases.add(db.get());
        }
    }

