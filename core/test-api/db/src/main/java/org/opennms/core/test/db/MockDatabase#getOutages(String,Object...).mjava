    public Collection<Outage> getOutages(String criteria, Object... values) {
        String critSql = (criteria == null ? "" : " and "+criteria);
        final List<Outage> outages = new LinkedList<Outage>();
        Querier loadExisting = new Querier(this, "select * from outages, ifServices, ipInterface, node where outages.ifServiceId = ifServices.id and ifServices.ipInterfaceId = ipInterface.id and ipInterface.nodeId = node.nodeId "+critSql) {
            @Override
            public void processRow(ResultSet rs) throws SQLException {
                Outage outage = new Outage(rs.getInt("nodeId"), rs.getString("ipAddr"), rs.getInt("serviceId"));
                outage.setLostEvent(rs.getInt("svcLostEventID"), rs.getTimestamp("ifLostService"));
                boolean open = (rs.getObject("ifRegainedService") == null);
                if (!open) {
                    outage.setRegainedEvent(rs.getInt("svcRegainedEventID"), rs.getTimestamp("ifRegainedService"));
                }
                outages.add(outage);
            }
        };

        loadExisting.execute(values);
        
        Querier setServiceNames = new Querier(this, "select * from service") {
            @Override
            public void processRow(ResultSet rs) throws SQLException {
                int serviceId = rs.getInt("serviceId");
                String serviceName = rs.getString("serviceName");
                for(Outage outage : outages) {
                    if (outage.getServiceId() == serviceId) {
                        outage.setServiceName(serviceName);
                    }
                }
            }
        };
        
        setServiceNames.execute();
        
        return outages;
    }

