    protected Option[] configAsArray() {
        String httpPort = Integer.toString(getAvailablePort(Integer.parseInt(MIN_HTTP_PORT), Integer.parseInt(MAX_HTTP_PORT)));
        String rmiRegistryPort = Integer.toString(getAvailablePort(Integer.parseInt(MIN_RMI_REG_PORT), Integer.parseInt(MAX_RMI_REG_PORT)));
        String rmiServerPort = Integer.toString(getAvailablePort(Integer.parseInt(MIN_RMI_SERVER_PORT), Integer.parseInt(MAX_RMI_SERVER_PORT)));
        String sshPort = Integer.toString(getAvailablePort(Integer.parseInt(MIN_SSH_PORT), Integer.parseInt(MAX_SSH_PORT)));

        // Create a new empty file
        File emptyFile = new File("target/emptyFile");
        try {
            emptyFile.createNewFile();
        } catch (IOException e) {
            LOG.warn("Could not create empty file");
        }

        Option[] options = new Option[]{
            // Use Karaf as the container
            karafDistributionConfiguration().frameworkUrl(
                getFrameworkUrl())
                .karafVersion(getKarafVersion())
                .name("Apache Karaf")
                .unpackDirectory(new File("target/paxexam/")
            )
                // Turn off using the deploy folder or stream bundle provisioning
                // won't happen before the probe bundle executes, causing problems
                // like {@link NoClassDefFoundError}.
                .useDeployFolder(false),

            // Pack this parent class from src/main/java into a stream bundle
            // so that it is accessible inside the container
            provision(
                 bundle()
                     .add(KarafTestCase.class)
                     .set(Constants.BUNDLE_MANIFESTVERSION, "2")
                     .set(Constants.BUNDLE_SYMBOLICNAME, "org.opennms.core.test.karaf")
                     .set(Constants.DYNAMICIMPORT_PACKAGE, "*")
                     .set(Constants.EXPORT_PACKAGE, "org.opennms.core.test.karaf")
                     .build()
            ),

            //keepRuntimeFolder(),

            // Set logging to INFO
            logLevel(LogLevelOption.LogLevel.INFO),

            /**
             * CAUTION: Do not use editConfigurationFileExtend(), it appears to overwrite its own changes
             * if there are multiple statements.
             */
            editConfigurationFilePut("etc/org.ops4j.pax.url.mvn.cfg", "org.ops4j.pax.url.mvn.defaultRepositories",
                String.join(",", new String[] {
                    "file:${karaf.home}/${karaf.default.repository}@snapshots@id=karaf.${karaf.default.repository}",

                    // This path needs to match the path in the POM to the repo created by the features-maven-plugin's 'add-features-to-repo' execution, ie:
                    // <repository>target/paxexam/test-repo</repository>
                    //
                    // TODO: Make it possible for tests to override these paths with the path where their 'add-features-to-repo' execution is creating a repo
                    //
                    "file:${karaf.home}/../test-repo@snapshots@id=default-repo",
                    // These repositories are unpacked by the opennms-full-assembly project's build
                    // for final integration testing
                    "file:${karaf.home}/../../opennms-repo@snapshots@id=opennms-repo",
                    "file:${karaf.home}/../../minion-core-repo@snapshots@id=minion-core-repo",
                    "file:${karaf.home}/../../minion-default-repo@snapshots@id=minion-default-repo"
                })
            ),

            // Disable all standard internet repositories so that we only rely on the defaultRepositories
            editConfigurationFilePut("etc/org.ops4j.pax.url.mvn.cfg", "org.ops4j.pax.url.mvn.repositories", ""),

            // TODO: I'm not sure what generates this directory
            //editConfigurationFileExtend("etc/org.ops4j.pax.url.mvn.cfg", "org.ops4j.pax.url.mvn.localRepository", "file:${karaf.home}/../opennms-repo@snapshots@id=opennms-repo"),

            //editConfigurationFilePut("etc/org.apache.karaf.features.cfg", "featuresBoot", "config,ssh,http,http-whiteboard,exam"),

            // Change the all network ports so they don't conflict with a running OpenNMS instance
            // or previously run Karaf integration tests
            editConfigurationFilePut("etc/org.ops4j.pax.web.cfg", "org.osgi.service.http.port", httpPort),
            editConfigurationFilePut("etc/org.apache.karaf.management.cfg", "rmiRegistryPort", rmiRegistryPort),
            editConfigurationFilePut("etc/org.apache.karaf.management.cfg", "rmiServerPort", rmiServerPort),
            editConfigurationFilePut("etc/org.apache.karaf.shell.cfg", "sshPort", sshPort),

            // Work around bug KARAF-5251
            editConfigurationFilePut("etc/startup.properties", "mvn:net.java.dev.jna/jna/4.5.0", "5"),
            editConfigurationFilePut("etc/startup.properties", "mvn:net.java.dev.jna/jna-platform/4.5.0", "5"),

            // This port is already being allocated according to an org.ops4j.net.FreePort call
            //editConfigurationFilePut("etc/system.properties", "org.ops4j.pax.exam.rbc.rmi.port", paxExamRmiRegistryPort),

            // Work around bug KARAF-5223, should be unnecessary once we upgrade past Karaf 4.1.1
            replaceConfigurationFile("etc/shell.init.script", emptyFile),
        };

        // Work around bug KARAF-5384
        // If there is a MINA JAR available, then add MINA to the startup classpath
        // TODO: Don't hardcode the version number here
        File minaJar = new File("target/dependency/mina-core-2.0.16.jar");
        if (minaJar.exists()) {
            options = Arrays.copyOf(options, options.length + 2);
            options[options.length - 2] = replaceConfigurationFile("system/org/apache/mina/mina-core/2.0.16/mina-core-2.0.16.jar", minaJar);
            options[options.length - 1] = editConfigurationFilePut("etc/startup.properties", "mvn:org.apache.mina/mina-core/2.0.16", "10");
        }

        if (Boolean.valueOf(System.getProperty("debug"))) {
            options = Arrays.copyOf(options, options.length + 1);
            options[options.length -1] = debugConfiguration("8889", true);
        }

        String[] systemPackages = getSystemPackages();
        if (systemPackages.length > 0) {
            options = Arrays.copyOf(options, options.length + 1);
            options[options.length -1] = systemPackages(systemPackages);
        }

        return options;
    }

