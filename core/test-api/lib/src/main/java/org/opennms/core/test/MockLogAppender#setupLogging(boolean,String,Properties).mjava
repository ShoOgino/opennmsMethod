    /**
     * <p>setupLogging</p>
     *
     * @param toConsole a boolean.
     * @param level a {@link java.lang.String} object.
     * @param config a {@link java.util.Properties} object.
     */
    public static void setupLogging(final boolean toConsole, String level, final Properties config) {
        s_defaultLevel = level;
        resetLogLevel();
        resetEvents();

        if (s_instance == null) {
            s_instance = new MockLogAppender();
        }

        LoggerFactory.getILoggerFactory();
        final Logger logger = LoggerFactory.getLogger(Logger.ROOT_LOGGER_NAME);

        setProperty(logger, MockLogger.DEFAULT_LOG_LEVEL_KEY, level);
        setProperty(logger, MockLogger.LOG_KEY_PREFIX + "com.mchange", "INFO");
        setProperty(logger, MockLogger.LOG_KEY_PREFIX + "com.mchange.v2", "WARN");
        setProperty(logger, MockLogger.LOG_KEY_PREFIX + "httpclient", "INFO");
        setProperty(logger, MockLogger.LOG_KEY_PREFIX + "org.apache.bsf", "INFO");
        setProperty(logger, MockLogger.LOG_KEY_PREFIX + "org.apache.commons.httpclient.HttpMethodBase", "ERROR");
        setProperty(logger, MockLogger.LOG_KEY_PREFIX + "org.exolab.castor", "INFO");
        setProperty(logger, MockLogger.LOG_KEY_PREFIX + "org.gwtwidgets", "INFO");
        setProperty(logger, MockLogger.LOG_KEY_PREFIX + "org.hibernate", "INFO");
        setProperty(logger, MockLogger.LOG_KEY_PREFIX + "org.hibernate.SQL", "INFO");
        setProperty(logger, MockLogger.LOG_KEY_PREFIX + "org.hibernate.cfg.AnnotationBinder", "ERROR");
        setProperty(logger, MockLogger.LOG_KEY_PREFIX + "org.quartz", "INFO");
        setProperty(logger, MockLogger.LOG_KEY_PREFIX + "org.snmp4j", "ERROR");
        setProperty(logger, MockLogger.LOG_KEY_PREFIX + "org.snmp4j.agent", "ERROR");
        setProperty(logger, MockLogger.LOG_KEY_PREFIX + "org.springframework", "INFO");
        setProperty(logger, MockLogger.LOG_KEY_PREFIX + "org.springframework.beans.factory.support", "WARN");
        setProperty(logger, MockLogger.LOG_KEY_PREFIX + "org.springframework.context.support", "WARN");
        setProperty(logger, MockLogger.LOG_KEY_PREFIX + "org.springframework.jdbc.datasource", "WARN");
        setProperty(logger, MockLogger.LOG_KEY_PREFIX + "org.springframework.test.context.support", "WARN");
        setProperty(logger, MockLogger.LOG_KEY_PREFIX + "org.springframework.security", "INFO");
        setProperty(logger, MockLogger.LOG_KEY_PREFIX + "com.mchange.v2", "WARN");
        setProperty(logger, MockLogger.LOG_KEY_PREFIX + "snaq.db", "INFO");

        for (final Object oKey : config.keySet()) {
            final String key = ((String)oKey).replaceAll("^log4j.logger.", MockLogger.LOG_KEY_PREFIX);
            setProperty(logger, key, config.getProperty((String)oKey));
        }
    }

