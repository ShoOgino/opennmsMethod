    /**
     * <p>setupLogging</p>
     *
     * @param toConsole a boolean.
     * @param level a {@link java.lang.String} object.
     * @param config a {@link java.util.Properties} object.
     */
    public static void setupLogging(final boolean toConsole, String level, final Properties config) {
        resetLogLevel();

        if (m_instance == null) {
            m_instance = new MockLogAppender();
        }

        final String consoleAppender = (toConsole ? ", CONSOLE" : "");

        LoggerFactory.getILoggerFactory();
        final Logger logger = LoggerFactory.getLogger(Logger.ROOT_LOGGER_NAME);

        setProperty(logger, MockLogger.DEFAULT_LOG_LEVEL_KEY, level);
        setProperty(logger, MockLogger.LOG_KEY_PREFIX + "org.apache.commons.httpclient.HttpMethodBase", "ERROR");
        setProperty(logger, MockLogger.LOG_KEY_PREFIX + "org.exolab.castor", "INFO");
        setProperty(logger, MockLogger.LOG_KEY_PREFIX + "org.snmp4j", "ERROR");
        setProperty(logger, MockLogger.LOG_KEY_PREFIX + "org.snmp4j.agent", "ERROR");
        setProperty(logger, MockLogger.LOG_KEY_PREFIX + "com.mchange.v2.c3p0.impl", "WARN");
        setProperty(logger, MockLogger.LOG_KEY_PREFIX + "org.hibernate.cfg.AnnotationBinder", "ERROR" + consoleAppender + ", MOCK");

        for (final Object oKey : config.keySet()) {
            final String key = ((String)oKey).replaceAll("^log4j.logger.", MockLogger.LOG_KEY_PREFIX);
            setProperty(logger, key, config.getProperty((String)oKey));
        }
    }

