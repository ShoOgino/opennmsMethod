	/**
	 * Get a JAXB unmarshaller for the given object.  If no JAXBContext is provided,
	 * JAXBUtils will create and cache a context for the given object.
	 * @param obj The object type to be unmarshaled.
	 * @param jaxbContext An optional JAXB context to create the unmarshaller from.
	 * @return an Unmarshaller
	 */
	public static Unmarshaller getUnmarshallerFor(final Object obj, final JAXBContext jaxbContext) {
		final Class<?> clazz = (Class<?>)(obj instanceof Class<?> ? obj : obj.getClass());

		Map<Class<?>, Unmarshaller> unmarshallers = m_unMarshallers.get();
		if (jaxbContext == null) {
			if (unmarshallers == null) {
				unmarshallers = new WeakHashMap<Class<?>, Unmarshaller>();
				m_unMarshallers.set(unmarshallers);
			}
			if (unmarshallers.containsKey(clazz)) {
				LogUtils.debugf(clazz, "found unmarshaller for %s", clazz);
				return unmarshallers.get(clazz);
			}
		}
		LogUtils.debugf(clazz, "creating unmarshaller for %s", clazz);

		try {
			final JAXBContext context;
			if (jaxbContext == null) {
				context = getContextFor(clazz);
			} else {
				context = jaxbContext;
			}
			final Unmarshaller unmarshaller = context.createUnmarshaller();
			final Schema schema = getValidatorFor(clazz);
			unmarshaller.setSchema(schema);
			if (jaxbContext == null) unmarshallers.put(clazz, unmarshaller);

			return unmarshaller;
		} catch (JAXBException e) {
			throw EXCEPTION_TRANSLATOR.translate("creating XML marshaller", e);
		}
	}

