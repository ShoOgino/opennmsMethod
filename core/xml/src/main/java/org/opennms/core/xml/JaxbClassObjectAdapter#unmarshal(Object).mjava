    @Override
    public Object unmarshal(final Object from) throws Exception {
        LOG.debug("unmarshal: from = ({}){}", (from == null? null : from.getClass()), from);
        if (from == null) return null;

        if (from instanceof Node) {
            final Node e = (Node)from;
            e.normalize();
            final String nodeName = e.getNodeName();
            final Class<?> clazz = JaxbUtils.getClassForElement(nodeName);

            LOG.debug("class type = {} (node name = {})", clazz, nodeName);
            // JAXB has already turned this into an element, but we need to re-parse the XML.

            if (clazz == null) {
                LOG.warn("Unable to determine object type for node name {}", nodeName);
                return from;
            }

            final DOMImplementationLS lsImpl = (DOMImplementationLS)e.getOwnerDocument().getImplementation().getFeature("LS", "3.0");
            LSSerializer serializer = lsImpl.createLSSerializer();
            serializer.getDomConfig().setParameter("xml-declaration", false); //by default its true, so set it to false to get String without xml-declaration
            final String str = serializer.writeToString(e);

            return JaxbUtils.unmarshal(clazz, str);
        } else {
            LOG.error("Unsure how to determine which class to use for unmarshaling object type {}", from.getClass());
            throw new IllegalArgumentException("Unsure how to determine which class to use for unmarshaling object type " + from.getClass());
        }
    }

