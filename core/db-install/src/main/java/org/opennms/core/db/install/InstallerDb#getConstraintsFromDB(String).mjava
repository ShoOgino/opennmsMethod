    /**
     * <p>getConstraintsFromDB</p>
     *
     * @param tableName a {@link java.lang.String} object.
     * @return a {@link java.util.List} object.
     * @throws java.sql.SQLException if any.
     * @throws java.lang.Exception if any.
     */
    public List<Constraint> getConstraintsFromDB(final String tableName) throws SQLException, Exception {
        final Statement st = getConnection().createStatement();
        ResultSet rs;

        final LinkedList<Constraint> constraints = new LinkedList<Constraint>();

        final String query = "SELECT c.oid, c.conname, c.contype, c.conrelid, "
            + "c.confrelid, a.relname, c.confupdtype, c.confdeltype, c.consrc from pg_class a "
            + "right join pg_constraint c on c.confrelid = a.oid "
            + "where c.conrelid = (select oid from pg_class where relname = '"
                + tableName.toLowerCase() + "') order by c.oid";

        rs = st.executeQuery(query);

        while (rs.next()) {
        	final int oid = rs.getInt(1);
            final String name = rs.getString(2);
            final String type = rs.getString(3);
            final int conrelid = rs.getInt(4);
            final int confrelid = rs.getInt(5);
            final String ftable = rs.getString(6);
            final String foreignUpdType = rs.getString(7);
            final String foreignDelType = rs.getString(8);
            final String checkExpression = rs.getString(9);
  
            final Constraint constraint;
            if ("p".equals(type)) {
            	final List<String> columns = getConstrainedColumnsFromDBForConstraint(oid, conrelid);
                constraint = new Constraint(tableName.toLowerCase(), name, columns);
            } else if ("f".equals(type)) {
            	final List<String> columns = getConstrainedColumnsFromDBForConstraint(oid, conrelid);
                final List<String> fcolumns = getForeignColumnsFromDBForConstraint(oid, confrelid);
                constraint = new Constraint(tableName.toLowerCase(), name, columns, ftable, fcolumns, foreignUpdType, foreignDelType);
            } else if ("c".equals(type)) {
            	constraint = new Constraint(tableName.toLowerCase(), name, checkExpression);
            } else {
                throw new Exception("Do not support constraint type \"" + type + "\" in constraint \"" + name + "\"");
            }

            constraints.add(constraint);
        }

        return constraints;
    }

