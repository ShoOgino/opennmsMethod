    /**
     * <p>functionExists</p>
     *
     * @param function a {@link java.lang.String} object.
     * @param columns a {@link java.lang.String} object.
     * @param returnType a {@link java.lang.String} object.
     * @return a boolean.
     * @throws java.lang.Exception if any.
     */
    private boolean functionExists(final String function, String columns, final String returnType) throws Exception {
    	final Map<String, Long> types = getTypesFromDB();

    	long[] columnTypes = new long[0];
        columns = columns.trim();
        if (columns.length() > 0) {
        	final String[] splitColumns = columns.split("\\s*,\\s*");
            columnTypes = new long[splitColumns.length];
            Column c;
            for (int j = 0; j < splitColumns.length; j++) {
                c = new Column();
                c.parseColumnType(splitColumns[j]);
                columnTypes[j] = (types.get(c.getType())).longValue();
            }
        }

        final Column c = new Column();
        try {
            c.parseColumnType(returnType);
        } catch (final Throwable e) {
            throw new Exception("Could not parse column type '" + returnType + "' for function '" + function + "'.  Nested exception: " + e.getMessage(), e);
        }
        final long retType = (types.get(c.getType())).longValue();

        return functionExists(function, columnTypes, retType);
    }

