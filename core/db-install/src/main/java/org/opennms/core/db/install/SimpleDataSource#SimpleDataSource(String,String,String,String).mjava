    /**
     * <p>Constructor for SimpleDataSource.</p>
     *
     * @param driver a {@link java.lang.String} object.
     * @param url a {@link java.lang.String} object.
     * @param user a {@link java.lang.String} object.
     * @param password a {@link java.lang.String} object.
     * @throws java.lang.ClassNotFoundException if any.
     */
    public SimpleDataSource(String driver, String url, String user, String password) throws ClassNotFoundException {
        m_driver = driver;
        m_url = url;
        
        m_properties.put("user", user);
        m_properties.put("password", password);
        
        Class<?> driverClass = Class.forName(m_driver);
        
        // If the PostgreSQL driver is in use and has deregistered itself
        // (due to tests using the OSGi lifecycle) then reregister it
        if (org.postgresql.Driver.class.getName().equals(m_driver)) {
            try {
                boolean isRegistered = (boolean)driverClass.getMethod("isRegistered").invoke(null, (Object[])null);
                if (!isRegistered) {
                    LOG.info(org.postgresql.Driver.class.getName() + " is not registered, reregistering...");
                    driverClass.getMethod("register").invoke(null, (Object[])null);
                    LOG.info(org.postgresql.Driver.class.getName() + " is registered");
                }
            } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException | NoSuchMethodException | SecurityException e) {
                LOG.warn("Exception while trying to check the registration on the " + org.postgresql.Driver.class.getName() + " driver", e);
            }
        }
    }

