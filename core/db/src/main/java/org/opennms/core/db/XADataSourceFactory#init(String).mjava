	/**
	 * <p>init</p>
	 *
	 * @param dsName a {@link java.lang.String} object.
	 */
	public static synchronized void init(final String dsName) {
		if (isLoaded(dsName)) {
			// init already called, return
			return;
		}

		final JdbcDataSource ds = m_dataSourceConfigFactory.getJdbcDataSource(dsName);
		final ConnectionPool pool = m_dataSourceConfigFactory.getConnectionPool();
		String urlString = ds.getUrl();
		if (urlString.startsWith("jdbc:")) {
			urlString = urlString.substring("jdbc:".length());
		}
		URI url = URI.create(urlString);
		// TODO: Add support for more XADataSources (hsqldb, derby)
		if ("postgresql".equalsIgnoreCase(url.getScheme())) {
			PGXADataSource xaDataSource = new PGXADataSource();
			xaDataSource.setServerName(url.getHost());
			xaDataSource.setPortNumber(url.getPort());
			xaDataSource.setDatabaseName(ds.getDatabaseName());
			xaDataSource.setUser(ds.getUserName());
			xaDataSource.setPassword(ds.getPassword());

			if (pool != null) {
				if (pool.getLoginTimeout() > 0) {
					try {
						xaDataSource.setLoginTimeout(pool.getLoginTimeout());
					} catch (SQLException e) {
						// This should never be thrown
						throw new UnsupportedOperationException("Cannot set login timeout on PGXADataSource", e);
					}
				}

				if (pool.getIdleTimeout() > 0) {
					// Set the socket timeout so that connections that are stuck reading from
					// the database will be closed after the timeout
					xaDataSource.setSocketTimeout(pool.getIdleTimeout());
				}
			}

			setInstance(dsName, xaDataSource);
		} else {
			throw new UnsupportedOperationException("Data source scheme not supported: " + url.getScheme());
		}
	}

