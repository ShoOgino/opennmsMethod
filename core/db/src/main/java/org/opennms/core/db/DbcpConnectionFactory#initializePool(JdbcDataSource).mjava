	@Override
	protected void initializePool(JdbcDataSource jdbcDataSource) throws SQLException {
	
		if (m_debug ) System.out.println("Whoops: initializePool(jdbcDataSource)");
		m_jdbcDataSource = jdbcDataSource;
		
		final Properties props = determineProps(jdbcDataSource);
        
        try {
    		if (m_debug ) System.out.println("Whoops: initializePool(jdbcDataSource); creating datasource...");
        	m_ds = BasicDataSourceFactory.createDataSource(props);
    		if (m_debug ) System.out.println("Whoops: initializePool(jdbcDataSource); datasource created.");
        } catch (Exception e) {
        	throw new SQLException("Unable to create BasicDataSource instance", e);
        }

        
        //properties.put("username", jdbcDataSource.getUserName());
        //properties.put("password", jdbcDataSource.getPassword());
        //properties.put("url", jdbcDataSource.getUrl());
        //properties.put("connectionProperties", ?);
        //properties.put("driverClassName", jdbcDataSource.getClassName());
        
//		DriverManagerConnectionFactory factory = new DriverManagerConnectionFactory(getUrl(), props);
//		ObjectPool<PoolableConnectionFactory> objPool = null;
//		
//		KeyedObjectPoolFactory stmtPoolFactory = null;
//		String validationQuery = null;
//		Collection validationQueryTimeout = null;
//		Boolean defaultReadOnly = null;
//		boolean defaultAutoCommit = true;
//		int defaultTransactionIsolation = -1;
//		String defaultCatalog = null;
//		AbandonedConfig config = null;
//		
//		PoolableObjectFactory<PoolableConnectionFactory> objPoolFactory = new PoolableConnectionFactory(
//				factory, objPool, stmtPoolFactory, validationQuery, validationQueryTimeout, 
//				defaultReadOnly, defaultAutoCommit, defaultTransactionIsolation, defaultCatalog, config );
//		
//		objPool = new GenericObjectPool<PoolableConnectionFactory>(objPoolFactory);
//		
//		PoolingDataSource pds = new PoolingDataSource(objPool);
//		
//		m_ds = pds;
	}

