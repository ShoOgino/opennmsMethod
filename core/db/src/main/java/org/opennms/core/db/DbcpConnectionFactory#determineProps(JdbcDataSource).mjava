	private Properties determineProps(JdbcDataSource jdbcDataSource) {
		//Go through properties specified in the configuration as parameters
		final Properties props = new Properties();
        for (final Param parameter : jdbcDataSource.getParamCollection()) {
            props.put(parameter.getName(), parameter.getValue());
        }
        
        //Now set the defaults for the BasicDataSoruce which implements a connection pool
        if (props.get(PROP_ACCESSTOUNDERLYINGCONNECTIONALLOWED) == null) {
        	props.setProperty(PROP_ACCESSTOUNDERLYINGCONNECTIONALLOWED, "false");
        }
        
        if (props.get(PROP_DEFAULTAUTOCOMMIT)==null) {
        	props.setProperty(PROP_DEFAULTAUTOCOMMIT, "true");
        }
        
        if (props.get(PROP_DEFAULTCATALOG)==null) {
        	//the default is ultimately null in the BasicDataSource.class
        }
        
        if (props.get(PROP_DEFAULTREADONLY)==null) {
        	//the default is ultimately null in the BasicDataSource.class
        }
		
        if (props.get(PROP_DEFAULTTRANSACTIONISOLATION)==null) {
        	props.setProperty(PROP_DEFAULTTRANSACTIONISOLATION, "-1");
        }
        
        if (props.get(PROP_DRIVERCLASSNAME)==null) {
        	props.setProperty(PROP_DRIVERCLASSNAME, m_jdbcDataSource.getClassName());
        }
        
        if (props.get(PROP_INITCONNECTIONSQLS)==null) {
        	//the default is ultimately null in the BasicDataSource.class
        }
        
        if (props.get(PROP_INITIALSIZE)==null) {
        	props.setProperty(PROP_INITIALSIZE, "0");
        }
        
        //Had to research AbandonedConfig class to get default setting for this
        if (props.get(PROP_LOGABANDONED)==null) {
        	props.setProperty(PROP_LOGABANDONED, "false");
        }
        
        //FIXME:Having this set to the default of 8is inconsistent with corrent OpenNMS expectations
        if (props.get(PROP_MAXACTIVE)==null) {
        	//props.setProperty(PROP_MAXACTIVE, Integer.toString(GenericObjectPool.DEFAULT_MAX_ACTIVE));
        	props.setProperty(PROP_MAXACTIVE, "50");
        }
        
        if (props.get(PROP_MAXIDLE)==null) {
        	props.setProperty(PROP_MAXIDLE, Integer.toString(GenericObjectPool.DEFAULT_MAX_IDLE));
        }
        
        if (props.get(PROP_MAXOPENPREPAREDSTATEMENTS)==null) {
        	props.setProperty(PROP_MAXOPENPREPAREDSTATEMENTS, Integer.toString(GenericKeyedObjectPool.DEFAULT_MAX_TOTAL));
        }
        
        //this one is specified as a long
        if (props.get(PROP_MAXWAIT)==null) {
        	props.setProperty(PROP_MAXWAIT, "-1");
        }
        
        if (props.get(PROP_MINEVICTABLEIDLETIMEMILLIS)==null) {
        	props.setProperty(PROP_MINEVICTABLEIDLETIMEMILLIS, "1800000");
        }
        
        if (props.get(PROP_MINIDLE)==null) {
        	props.setProperty(PROP_MINIDLE, Integer.toString(GenericObjectPool.DEFAULT_MIN_IDLE));
        }
        
        if (props.get(PROP_NUMTESTSPEREVICTIONRUN)== null) {
        	props.setProperty(PROP_NUMTESTSPEREVICTIONRUN, Integer.toBinaryString(GenericObjectPool.DEFAULT_NUM_TESTS_PER_EVICTION_RUN));
        }
        
        if (props.get(PROP_PASSWORD)==null) {
        	//the default is ultimately null in the BasicDataSource.class
        }
        
        if (props.get(PROP_POOLPREPAREDSTATEMENTS)==null) {
        	props.setProperty(PROP_POOLPREPAREDSTATEMENTS, "false");
        }
        
        //see AbandondedConfig class for default
        if (props.get(PROP_REMOVEABANDONED)==null) {
        	props.setProperty(PROP_REMOVEABANDONED, "false");
        }
        
        //see AbandondedConfig class for default in seconds
        if (props.get(PROP_REMOVEABANDONEDTIMEOUT)==null) {
        	props.setProperty(PROP_REMOVEABANDONEDTIMEOUT, "300");
        }
        
        if (props.get(PROP_TESTONBORROW)==null) {
        	props.setProperty(PROP_TESTONBORROW, "true");
        }
        
        if (props.get(PROP_TESTONRETURN)==null) {
        	props.setProperty(PROP_TESTONRETURN, "false");
        }
        
        if (props.get(PROP_TESTWHILEIDLE)==null) {
        	props.setProperty(PROP_TESTWHILEIDLE, "false");
        }
        
        if (props.get(PROP_TIMEBETWEENEVICTIONRUNSMILLIS)==null) {
        	//Can't use GenericObjectPool.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS for it is
        	//defined as a long
        	props.setProperty(PROP_TIMEBETWEENEVICTIONRUNSMILLIS, "-1");
        }
        
        if (props.get(PROP_URL)==null) {
			props.setProperty(PROP_URL, m_jdbcDataSource.getUrl());
        }
        
        if (props.get(PROP_USERNAME)==null) {
        	//the default is ultimately null in the BasicDataSource.class and hesitant
        	//to set this to the likely default of "opennms"
        	//props.setProperty(PROP_USERNAME, "opennms");
        }
        
        if (props.get(PROP_VALIDATIONQUERY)==null) {
        	//the default is ultimately null in the BasicDataSource.class
        }
        
        if (props.get(PROP_VALIDATIONQUERY_TIMEOUT)==null) {
        	props.setProperty(PROP_VALIDATIONQUERY_TIMEOUT, "-1");
        }
		return props;
	}

