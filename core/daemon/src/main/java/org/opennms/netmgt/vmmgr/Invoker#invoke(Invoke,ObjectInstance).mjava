    private Object invoke(final Invoke invoke, final ObjectInstance mbean) throws Throwable {
        List<Argument> args = invoke.getArguments();
        Object[] parms = new Object[0];
        String[] sig = new String[0];
        if (args != null && args.size() > 0) {
            parms = new Object[args.size()];
            sig = new String[args.size()];
            for (int k = 0; k < parms.length; k++) {
                try {
                    parms[k] = getArgument(args.get(k));
                } catch (Throwable t) {
			LOG.error("An error occurred building argument {} for operation {} on MBean {}", k, invoke.getMethod(), mbean.getObjectName(), t);
                  throw t;
                }
                sig[k] = parms[k].getClass().getName();
            }
        }

        LOG.debug("Invoking {} on object {}", invoke.getMethod(), mbean.getObjectName());
        

        Object object;
        try {
        	Map<String,String> mdc = Logging.getCopyOfContextMap();
            try {
                object = getServer().invoke(mbean.getObjectName(), invoke.getMethod(), parms, sig);
            } finally {
            	Logging.setContextMap(mdc);
            }
        } catch (Throwable t) {
            LOG.error("An error occurred invoking operation {} on MBean {}", invoke.getMethod(), mbean.getObjectName(), t);
            throw t;
        }

	LOG.debug("Invocation {} successful for MBean {}", invoke.getMethod(), mbean.getObjectName());

        return object;
    }

