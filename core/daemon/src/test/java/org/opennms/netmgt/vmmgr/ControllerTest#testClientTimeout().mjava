    @Test
    public void testClientTimeout() throws Exception {
        final ServerSocket server = new ServerSocket(0);
        System.out.printf("Connected to socket on %s:%d\n", server.getInetAddress(), server.getLocalPort());
        
        final Controller c = new Controller();
        //c.setJmxUrl("service:jmx:rmi://127.0.0.1:" + server.getLocalPort() + "/stub/");
        c.setJmxUrl("service:jmx:rmi:///jndi/rmi://127.0.0.1:" + server.getLocalPort() + "/jmxrmi");
        c.setRmiHandshakeTimeout(2000);
        
        Thread clientThread = new Thread(new Runnable() {
            @Override
            public void run() {
                c.invokeOperation("testClientTimeout");
            }
        }, this.getClass().getSimpleName() + "-clientThread");
        
        final StringBuffer exceptionBuffer = new StringBuffer();
        
        UncaughtExceptionHandler handler  = new UncaughtExceptionHandler() {
            @Override
            public void uncaughtException(Thread thread, Throwable t) {
                exceptionBuffer.append(t.toString());
            }
        };

        clientThread.setUncaughtExceptionHandler(handler);
        
        clientThread.start();
        
        Thread acceptThread = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    server.accept();
                    System.out.println("Connection established! Exiting...");
                } catch (IOException e) {
                    throw new UndeclaredThrowableException(e);
                }
            }
        }, this.getClass().getSimpleName() + "-acceptThread");

        acceptThread.setUncaughtExceptionHandler(handler);
        
        acceptThread.start();
        
        acceptThread.join(1000);
        assertFalse("the accept thread should have stopped because it should have received a connection", acceptThread.isAlive());

        clientThread.join(c.getRmiHandshakeTimeout() * 2);
        assertFalse("the client thread should have stopped within " + c.getRmiHandshakeTimeout() + " because it should have timed out its connection", clientThread.isAlive());
        
        assertEquals("exception buffer is non-empty: " + exceptionBuffer.toString(), 0, exceptionBuffer.length());
        
//        assertEquals("there should be exactly one logged message", 1, MockLogAppender.getEvents().length);
//        assertEquals("the first log message should be an error", Level.ERROR, MockLogAppender.getEvents()[0].getLevel());
        
        MockLogAppender.resetEvents();
        server.close();
    }

