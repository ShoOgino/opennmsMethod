    @Override
    public Response perform(Context context) {
        // Don't check within this delay period, because the container may not be started yet
        if (ManagementFactory.getRuntimeMXBean().getUptime() <= 10000) {
            return new Response(Starting, "Container is in spin up phase");
        }

        // Verify all bundles
        final Health health = new Health();
        for (Bundle b : bundleContext.getBundles()) {
            if (ignoreBundles.contains(b.getSymbolicName())) {
                LOG.debug("Bundle {} with symbolic name {} is ignored while performing opennms:health-check", b.getBundleId(), b.getSymbolicName());
                continue;
            }
            final BundleInfo info = bundleService.getInfo(b);
            switch (info.getState()) {
                // Success
                case Active:
                    break;
                // only success if bundle is a fragment bundle
                case Resolved:
                    if ((b.adapt(BundleRevision.class).getTypes() & BundleRevision.TYPE_FRAGMENT) != 0) {
                        break;
                    }
                    health.add(new Response(Failure, "Bundle " + b.getBundleId() + " is resolved, but not active"));
                    break;
                // Waiting for dependencies
                case Waiting:
                case GracePeriod:
                    health.add(new Response(Starting, "Bundle " + b.getBundleId() + " is waiting for dependencies"));
                    break;
                // Installed, but not yet started
                case Installed:
                    health.add(new Response(Starting, "Bundle " + b.getBundleId() + " is not yet started"));
                    break;
                // Starting
                case Starting:
                    health.add(new Response(Starting, "Bundle " + b.getBundleId() + " is starting"));
                    break;
                // Stopping, Failed ur Unknown are considered Failures
                case Stopping:
                case Failure:
                case Unknown:
                    health.add(new Response(Failure, "Bundle " + b.getBundleId() + " is not started"));
                    break;
            }
        }

        // If there are some issues, we return the worst one, otherwise everything is okay
        return health.getWorst().orElse(new Response(Status.Success));
    }

