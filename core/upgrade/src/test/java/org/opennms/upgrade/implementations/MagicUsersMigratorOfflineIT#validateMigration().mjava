    /**
     * Validate the Migration by checking the updated users.xml
     *
     * @throws Exception the exception
     */
    private void validateMigration() throws Exception {
        Userinfo userInfo = JaxbUtils.unmarshal(Userinfo.class, new FileSystemResource(new File("target/home/etc/users.xml")));

        final User rtc = getUser(userInfo, "rtc");
        Assert.assertNotNull(rtc);
        Assert.assertEquals(1, rtc.getRoles().size());
        Assert.assertTrue(rtc.getRoles().contains(Authentication.ROLE_RTC));

        final User admin = getUser(userInfo, "admin");
        Assert.assertNotNull(admin);
        Assert.assertEquals(1, admin.getRoles().size());
        Assert.assertTrue(admin.getRoles().contains(Authentication.ROLE_ADMIN));

        final User jmx = getUser(userInfo, "jmx_operator");
        Assert.assertNotNull(jmx);
        Assert.assertEquals(1, admin.getRoles().size());
        Assert.assertTrue(jmx.getRoles().contains(Authentication.ROLE_JMX));

        final User agalue = getUser(userInfo, "agalue");
        Assert.assertNotNull(agalue);
        Assert.assertEquals(2, agalue.getRoles().size());
        Assert.assertTrue(agalue.getRoles().contains(Authentication.ROLE_USER));
        Assert.assertTrue(agalue.getRoles().contains("ROLE_MEASUREMENTS"));

        final User operator = getUser(userInfo, "operator");
        Assert.assertNotNull(operator);
        Assert.assertEquals(0, operator.getRoles().size());

        final User manager = getUser(userInfo, "manager");
        Assert.assertNotNull(manager);
        Assert.assertEquals(2, manager.getRoles().size());
        Assert.assertTrue(manager.getRoles().contains(Authentication.ROLE_USER));
        Assert.assertTrue(manager.getRoles().contains(Authentication.ROLE_READONLY));
    }

