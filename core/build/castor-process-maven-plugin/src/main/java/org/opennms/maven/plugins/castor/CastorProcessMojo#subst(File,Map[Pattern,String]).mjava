	private void subst(final File source, final Map<Pattern,String> substitutions) throws MojoExecutionException, MojoFailureException {
		final File workDir = new File(buildDirectory, "opennms-castor-process");
		if (!workDir.exists()) {
			if (!workDir.mkdirs()) {
				throw new MojoExecutionException("unable to create directory " + workDir);
			}
		}
		final File tempFile;
		try {
			tempFile = File.createTempFile("subst", "java.tmp", workDir);
			FileUtils.copyFile(source, tempFile);
		} catch (final IOException e) {
			throw new MojoExecutionException("Unable to create temporary file.", e);
		}
		
		FileReader fr = null;
		BufferedReader br = null;
		FileWriter out = null;
		
		try {
			fr = new FileReader(source);
			br = new BufferedReader(fr);
			out = new FileWriter(tempFile);
			
			String line = null;
			while ((line = br.readLine()) != null) {
				for (final Pattern p : substitutions.keySet()) {
					final Matcher m = p.matcher(line);
					line = m.replaceAll(substitutions.get(p));
				}
				out.write(line);
				out.write("\n");
			}
		} catch (final Exception e) {
			throw new MojoFailureException("Unable to filter file contents.", e);
		} finally {
			IOUtils.closeQuietly(out);
			IOUtils.closeQuietly(br);
			IOUtils.closeQuietly(fr);
		}

		try {
			final String before = MD5.asHex(MD5.getHash(source));
			final String after = MD5.asHex(MD5.getHash(tempFile));
	
		if (!before.equals(after)) {
				FileUtils.copyFile(tempFile, source);
			} else {
				getLog().debug("Skipping " + source + ": file is unchanged.");
			}
		} catch (final Exception e) {
			throw new MojoFailureException("Unable to compare modified file to original.", e);
		}

		tempFile.delete();
	}

