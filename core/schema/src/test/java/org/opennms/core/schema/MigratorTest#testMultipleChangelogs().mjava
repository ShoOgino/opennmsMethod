    @Test
    @DirtiesContext
    @JUnitTemporaryDatabase(createSchema=false)
    public void testMultipleChangelogs() throws Exception {
        final Migrator m = new Migrator();
        m.setDataSource(m_dataSource);
        m.setAdminDataSource(m_dataSource);
        m.setValidateDatabaseVersion(false);
        m.setCreateUser(false);
        m.setCreateDatabase(false);

        final Migration migration = new Migration();
        migration.setAdminUser(System.getProperty(TemporaryDatabase.ADMIN_USER_PROPERTY, TemporaryDatabase.DEFAULT_ADMIN_USER));
        migration.setAdminPassword(System.getProperty(TemporaryDatabase.ADMIN_PASSWORD_PROPERTY, TemporaryDatabase.DEFAULT_ADMIN_PASSWORD));
        migration.setDatabaseUser(System.getProperty(TemporaryDatabase.ADMIN_USER_PROPERTY, TemporaryDatabase.DEFAULT_ADMIN_USER));
        migration.setDatabasePassword(System.getProperty(TemporaryDatabase.ADMIN_PASSWORD_PROPERTY, TemporaryDatabase.DEFAULT_ADMIN_PASSWORD));
        migration.setChangeLog("changelog.xml");

        for (final Resource resource : m_context.getResources("classpath*:/changelog.xml")) {
            System.err.println("=== found resource: " + resource + " ===");
            migration.setAccessor(new ExistingResourceAccessor(resource));
            m.migrate(migration);
        }

        final Connection connection = m_dataSource.getConnection();
        final PreparedStatement statement = connection.prepareStatement("SELECT id FROM databasechangelog");
        assertTrue(statement.execute());
        final ResultSet rs = statement.getResultSet();
        final List<String> ids = new ArrayList<String>();
        while (rs.next()) {
            ids.add(rs.getString(1));
        }
        
        assertTrue(ids.size() > 0);
        assertTrue(ids.contains("test-api.schema.a"));
        assertTrue(ids.contains("test-api.schema.b"));
    }

