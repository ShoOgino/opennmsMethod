        @Override
	public Sql[] generateSql(final SetSequenceStatement statement, final Database database, final SqlGeneratorChain sqlGeneratorChain) {
		final StringBuffer sb = new StringBuffer();
		sb.append("SELECT pg_catalog.setval(").append("'").append(statement.getSequenceName()).append("',");
		if (statement.getValue() != null) {
			sb.append(statement.getValue());
		} else {
			sb.append("(SELECT max(").append(m_tempTableName).append(".id)").append("+1").append(" AS id FROM (");
			
			final List<String> tables = statement.getTables();
			final Map<String,String> columns = statement.getColumns();
			final int tableSize = tables.size();
			for (int i = 0; i < tableSize; i++) {
				// (SELECT max(id) AS id FROM acks LIMIT 1) UNION
				final String tableName = tables.get(i);
				final String columnName = columns.get(tableName);
				sb.append("(SELECT max(").append(columnName).append(") AS id FROM ");
				sb.append(tableName).append(" LIMIT 1)");
				if (i != tableSize - 1) {
					sb.append(" UNION ");
				}
			}
			sb.append(")");
			sb.append(" AS ").append(m_tempTableName).append(" LIMIT 1)");
		}
		sb.append(",");
		sb.append("true");
		sb.append(");");

		return new Sql[] {
				new UnparsedSql(sb.toString())
		};
	}

