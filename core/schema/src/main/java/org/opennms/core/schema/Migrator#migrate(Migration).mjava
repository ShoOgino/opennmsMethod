    /**
     * <p>migrate</p>
     *
     * @param migration a {@link org.opennms.core.schema.Migration} object.
     * @throws org.opennms.core.schema.MigrationException if any.
     */
    public void migrate(final Migration migration) throws MigrationException {
        Connection connection = null;

        try {
            connection = m_dataSource.getConnection();

            final SpringLiquibase lb = new SpringLiquibase();
            lb.setChangeLog(migration.getChangeLog());
            lb.setDataSource(m_dataSource);

            final Map<String,String> parameters = new HashMap<>();
            parameters.put("install.database.admin.user", migration.getAdminUser());
            parameters.put("install.database.admin.password", migration.getAdminPassword());
            parameters.put("install.database.user", migration.getDatabaseUser());
            lb.setChangeLogParameters(parameters);
            lb.setDefaultSchema(migration.getSchemaName());
            lb.setResourceLoader(getMigrationResourceLoader(migration));

            final String contexts = System.getProperty("opennms.contexts", "production");
            lb.setContexts(contexts);
            lb.afterPropertiesSet();
        } catch (final ChangeLogParseException e) {
            Throwable cause = e;
            while (cause.getCause() != null) {
                cause = cause.getCause();
            }
            if (cause instanceof FileNotFoundException) {
                throw new MigrationException("unable to migrate the database: " + cause.getMessage() + "; system class loader URLs: " + getSystemClassLoaderUrls(), cause);
            } else {
                throw new MigrationException("unable to migrate the database: " + e.getMessage(), e);
            }
        } catch (final Throwable e) {
            throw new MigrationException("unable to migrate the database: " + e.getMessage(), e);
        } finally {
            cleanUpDatabase(connection, null, null, null);
        }
    }

