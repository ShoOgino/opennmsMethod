	public void handleRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

		try {
			RemoteInvocation invocation = readRemoteInvocation(request);
			Serializable interfaceNameObject = invocation.getAttribute(ServiceRegistryHttpInvokerProxyFactoryBean.ATTRIBUTE_INTERFACE_NAME);
			if (interfaceNameObject == null) {
				throw new NestedServletException("Interface name attribute not found. This class can only service requests to a " + ServiceRegistryHttpInvokerProxyFactoryBean.class.getSimpleName() + " client.");
			} else {
				String interfaceName = (String)interfaceNameObject;

				try {
					//RemoteInvocationResult result = invokeAndCreateResult(invocation, getProxy());

					// TODO: Use a method similar to {@link RemoteExporter#getProxyForService()} to create an
					// interface proxy that masks any other methods on the remotely invoked object.
					RemoteInvocationResult result = invokeAndCreateResult(invocation, serviceRegistry.findProvider(Class.forName(interfaceName)));

					writeRemoteInvocationResult(request, response, result);
				} catch (IllegalArgumentException e) {
					throw new NestedServletException("No provider registered for interface " + interfaceName, e);
				}	
			}
		} catch (ClassNotFoundException e) {
			throw new NestedServletException("Class not found during deserialization", e);
		}
	}

