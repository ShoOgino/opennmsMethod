    /**
     * <p>sanitizeBeanStringProperties</p>
     * This is a simple method is used to sanitize all bean string properties. 
     * 
     * @param bean a {@link java.lang.Object} object. 
     * @param Set of fieldnames as Strings that are allowed for html content. All fieldnames in lowercase. null -> no html
     * @return a {@link java.lang.Object} object.
     */
    public static <T> T sanitizeBeanStringProperties(T bean, Set<String> allowHtmlFields) {
    	BeanWrapper beanWrapper = new BeanWrapperImpl(bean.getClass());
    	
    	// get all bean property descriptors
    	PropertyDescriptor[] descriptions = beanWrapper.getPropertyDescriptors();
    	
    	// Iterate over all properties
    	for (PropertyDescriptor description : descriptions) {
    		
    		// If we have a property with type of java.lang.String, then sanitize string and write back
    		if (description.getReadMethod().getReturnType().equals(java.lang.String.class)) {
    			try {
    				boolean allowHTML = false;
	    	        if (allowHtmlFields != null && allowHtmlFields.contains(description.getName().toLowerCase())) {
	    	            allowHTML = true;
	    	        }
    				logger.debug("Try to sanitize string {} in {} with html {}", description.getName(), bean.getClass(), allowHTML);
    				description.getWriteMethod().invoke(bean, WebSecurityUtils.sanitizeString((String)description.getReadMethod().invoke(bean), allowHTML));
    			}catch (IllegalArgumentException e) {
    				logger.error("Illegal argument by sanitize object {} on property {}. Error {}", description.getName(), bean.getClass(), e.getMessage());
				} catch (IllegalAccessException e) {
					logger.error("Illegal access by sanitize object {} on property {}. Error {}", description.getName(), bean.getClass(), e.getMessage());
				} catch (InvocationTargetException e) {
					logger.error("Invocation target exception by sanitize object {} on property {}. Error {}", description.getName(), bean.getClass(), e.getMessage());
				}
    		}
    	}
    	return bean;
    }

