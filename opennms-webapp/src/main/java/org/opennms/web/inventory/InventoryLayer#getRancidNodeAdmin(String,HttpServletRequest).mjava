    static public Map<String, Object> getRancidNodeAdmin(String rancidName, HttpServletRequest request) throws RancidApiException{
      
       
       log().debug("getRancidNodeAdmin start");

       log().debug("getRancidNode: " + rancidName);

       //OnmsNode node = m_nodeDao.get(nodeid);

       Map<String, Object> nodeModel = new TreeMap<String, Object>();
       nodeModel.put("id", rancidName);
       //nodeModel.put("status_general", node.getType());
       
       List<RancidNodeWrapper> ranlist = new ArrayList<RancidNodeWrapper>();
       
       // Group list 
       RWSResourceList groups = RWSClientApi.getRWSResourceGroupsList(m_cp);
       
       List<String> grouplist = groups.getResource();
       Iterator<String> iter1 = grouplist.iterator();
       
     
       String groupname;
       boolean first = true;
       while (iter1.hasNext()){
           groupname = iter1.next();
           log().debug("getRancidNode " + rancidName + " group " + groupname);        
           
           try {
               if (first){
                   RancidNode rn = RWSClientApi.getRWSRancidNodeTLO(m_cp, groupname, rancidName);
                   nodeModel.put("devicename", rn.getDeviceName());
                   nodeModel.put("status", rn.getState());
                   nodeModel.put("devicetype", rn.getDeviceType());
                   nodeModel.put("comment", rn.getComment());
                   nodeModel.put("group", groupname);

                   first = false;
               } 
               RancidNode rn = RWSClientApi.getRWSRancidNodeInventory(m_cp ,groupname, rancidName);
               String vs = rn.getHeadRevision();
               InventoryNode in = (InventoryNode)rn.getNodeVersions().get(vs);

               RancidNodeWrapper rnw = new RancidNodeWrapper(rn.getDeviceName(), groupname, rn.getDeviceType(), rn.getComment(), rn.getHeadRevision(),
                 rn.getTotalRevisions(), in.getCreationDate(), rn.getRootConfigurationUrl());

               ranlist.add(rnw); 
               
           }
           catch (RancidApiException e){
               log().debug("Exception in getRancidNode getRWSRancidNodeInventory ");
           }
       }
       
       //Groups invariant            
       nodeModel.put("grouptable", ranlist);
       nodeModel.put("url", m_cp.getUrl());
       
       //CLOGIN
       if (request.isUserInRole(Authentication.ADMIN_ROLE)) {

           RancidNodeAuthentication rn5 = RWSClientApi.getRWSAuthNode(m_cp,rancidName);
           nodeModel.put("isadmin", "true");
           nodeModel.put("cloginuser", rn5.getUser());
           nodeModel.put("cloginpassword", rn5.getPassword());
           nodeModel.put("cloginconnmethod", rn5.getConnectionMethodString());
           nodeModel.put("cloginenablepass", rn5.getEnablePass());
           String autoen = "0";
           if (rn5.isAutoEnable()){
               autoen = "1";
           }
           nodeModel.put("cloginautoenable", autoen);
       }
       
       return nodeModel;
}

