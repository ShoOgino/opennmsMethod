static public Map<String, Object> getRancidNodeList(String rancidName) throws RancidApiException{
       
       try {
           
           log().debug("getRancidNodeList " + rancidName);

           
           Map<String, Object> nodeModel = new TreeMap<String, Object>();
           
           RWSResourceList groups = RWSClientApi.getRWSResourceGroupsList(_URL);
           
           List<InventoryWrapper> ranlist = new ArrayList<InventoryWrapper>();
           
           List<String> grouplist = groups.getResource();
           Iterator<String> iter2 = grouplist.iterator();
           
           boolean first = true;
           String groupname;
           while (iter2.hasNext()) {
               groupname = iter2.next();
           
               RancidNode rn = RWSClientApi.getRWSRancidNodeInventory(_URL, groupname, rancidName);
    
               if (first){
                   nodeModel.put("devicename", rn.getDeviceName());
                   first = false;
               }
               
               //*********
               // version
             
               RWSResourceList versionList;
               
               versionList = RWSClientApi.getRWSResourceConfigList(_URL, groupname, rancidName);
               
               List<String> versionListStr= versionList.getResource();
               
               Iterator<String> iter1 = versionListStr.iterator();
               
               String vs;
               
               while (iter1.hasNext()) {
                   vs = iter1.next();
                   InventoryNode in = (InventoryNode)rn.getNodeVersions().get(vs);
                   InventoryWrapper inwr = new InventoryWrapper(in.getVersionId(), in.getCreationDate(), groupname, in.getConfigurationUrl());
                   ranlist.add(inwr);
               }
           }
           
           nodeModel.put("grouptable", ranlist);
           nodeModel.put("url", _URL);
           
           
           return nodeModel;
       }
       catch (RancidApiException e) {
           throw e;
       }
   }
    //*******************************************************************************
    // Update status configuration
    //*******************************************************************************
//    static  public int updateStatus(String device, String group){
//        try {
//            ConnectionProperties cp = new ConnectionProperties(_URL, "/rws", 60);
//            log().debug("updateStatus :" + device + " " + group);
//    
//            RancidNode rn = RWSClientApi.getRWSRancidNodeTLO(cp, group, device);
//            if (rn.isStateUp()){
//                log().debug("updateStatus :down");
//
//                rn.setStateUp(false);
//            }else {
//                log().debug("updateStatus :up");
//
//                rn.setStateUp(true);
//            }
//            RWSClientApi.updateRWSRancidNode(cp, rn);
//            return 0;
//        }
//        catch (RancidApiException e) {
//            e.printStackTrace();
//            return -1;
//        }
//    }
//    
    //*******************************************************************************
//    static public int updateCloginInfo(String device, String user, String password, String method, String autoenable, String enablepass) {
//       
//       try {
//           
//           log().debug("updateCloginInfo " + device);
//
//           
//           RancidNodeAuthentication rna = RWSClientApi.getRWSAuthNode(_URL, device);
//           rna.setUser(user);
//           rna.setPassword(password);
//           rna.setConnectionMethod(method);
//           rna.setEnablePass(enablepass);
//           boolean autoe = false;
//           if (autoenable.compareTo("1")==0) {
//               autoe = true;
//           }
//           rna.setAutoEnable(autoe);
//           RWSClientApi.createOrUpdateRWSAuthNode(_URL,rna);
//           
//           return 0;
//       }
//       catch (RancidApiException e) {
//           return -1;
//       }
//   }

