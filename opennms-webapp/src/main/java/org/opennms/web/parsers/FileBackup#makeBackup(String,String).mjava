    /**
     * This method attempts to make a backup of an xml file. The first parameter
     * should be the full path to the original file at least relative to where
     * the method is running from, or the absolute path to the file. The second
     * parameter is the just the file name that will identify the backup. A
     * default extension will be added to this filename.
     * 
     * @param original
     *            a path and file name to the original file
     * @param fileName
     *            the name to give the backup
     * @throws XMLWriteException
     *             if the backup was not able to be made
     */
    public static void makeBackup(String original, String fileName) throws IOException {
        String backupDir = null;
        String backupExtension = ".backup";

        // see if we can find where the user wants to save this bad boy
        if (System.getProperty(BACKUP_DIR_PROP) == null) {
            Properties props = PropertyLoader.load(PropertyLoader.BLUEBIRD_PROP, PropertyLoader.LOCAL_ONLY);
            backupDir = props.getProperty(BACKUP_DIR_PROP);
        } else {
            backupDir = System.getProperty(BACKUP_DIR_PROP);
        }

        // all else fails save to whatever directory we are running from
        if (backupDir == null || backupDir.trim().equals("")) {
            backupDir = ".";
        }

        backupDir += System.getProperty("file.separator");

        // check to make sure the backup directory exists
        File backupFileDir = new File(backupDir);
        if (!backupFileDir.exists()) {
            backupFileDir.mkdirs();
        }

        // lets try to backup the file
        try {
            // I doubt that this is the best way to make a backup of a file,
            // but...

            // open up the original file
            BufferedReader originalBuffer = new BufferedReader(new FileReader(original));

            // open the backup file
            BufferedWriter backupBuffer = new BufferedWriter(new FileWriter(backupDir + fileName + backupExtension));

            // read each line from original, write it to backup
            String input;
            while ((input = originalBuffer.readLine()) != null) {
                backupBuffer.write(input);
                backupBuffer.newLine();
            }

            // close everything off
            originalBuffer.close();
            backupBuffer.flush();
            backupBuffer.close();
        } catch (Exception e) {
            throw new IOException("Error backing up " + fileName + " to " + backupDir + "\n" + e.getMessage());
        }
    }

