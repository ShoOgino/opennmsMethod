    /**
     * Create an event that represents a real network event with all the
     * parameters.
     *
     * @param id a int.
     * @param uei a {@link java.lang.String} object.
     * @param time a {@link java.util.Date} object.
     * @param dpName a {@link java.lang.String} object.
     * @param createTime a {@link java.util.Date} object.
     * @param severityId a int.
     * @param snmp a {@link java.lang.String} object.
     * @param host a {@link java.lang.String} object.
     * @param snmphost a {@link java.lang.String} object.
     * @param parms a {@link java.lang.String} object.
     * @param nodeID a {@link java.lang.Integer} object.
     * @param serviceID a {@link java.lang.Integer} object.
     * @param ipAddr a {@link java.lang.String} object.
     * @param description a {@link java.lang.String} object.
     * @param logMessage a {@link java.lang.String} object.
     * @param logGroup a {@link java.lang.String} object.
     * @param operatorInstruction a {@link java.lang.String} object.
     * @param autoAction a {@link java.lang.String} object.
     * @param operatorAction a {@link java.lang.String} object.
     * @param operatorActionMenuText a {@link java.lang.String} object.
     * @param notification a {@link java.lang.String} object.
     * @param troubleTicket a {@link java.lang.String} object.
     * @param troubleTicketState a {@link java.lang.Integer} object.
     * @param forward a {@link java.lang.String} object.
     * @param mouseOverText a {@link java.lang.String} object.
     * @param acknowledgeUser a {@link java.lang.String} object.
     * @param acknowledgeTime a {@link java.util.Date} object.
     * @param nodeLabel a {@link java.lang.String} object.
     * @param serviceName a {@link java.lang.String} object.
     * @param alarmId a {@link java.lang.Integer} object.
     * @param eventDisplay a {@link java.lang.Boolean} object.
     */
    public Event(int id, String uei, Date time, String dpName, Date createTime, int severityId, String snmp, String host, String snmphost, String parms, Integer nodeID, Integer serviceID, String ipAddr, String description, String logMessage, String logGroup, String operatorInstruction, String autoAction, String operatorAction, String operatorActionMenuText, String notification, String troubleTicket, Integer troubleTicketState, String forward, String mouseOverText, String acknowledgeUser, Date acknowledgeTime, String nodeLabel, String serviceName, Integer alarmId, Boolean eventDisplay) {

        if (uei == null || time == null || dpName == null || createTime == null) {
            throw new IllegalArgumentException("Cannot take null values for the following parameters: uei, time, dpName, createTime.");
        }

        // required fields
        this.id = id;
        this.uei = uei;
        this.time = time;
        this.dpName = dpName;
        this.createTime = createTime;
        severity = OnmsSeverity.get(severityId);

        // optional fields
        this.snmp = snmp;
        this.host = host;
        this.snmphost = snmphost;
        this.parms = parms;
        this.nodeID = nodeID;
        this.serviceID = serviceID;
        this.ipAddr = ipAddr;
        this.description = description;
        this.logMessage = logMessage;
        this.logGroup = logGroup;
        this.operatorInstruction = operatorInstruction;
        this.autoAction = autoAction;
        this.operatorAction = operatorAction;
        this.operatorActionMenuText = operatorActionMenuText;
        this.notification = notification;
        this.troubleTicket = troubleTicket;
        this.troubleTicketState = troubleTicketState;
        this.forward = forward;
        this.mouseOverText = mouseOverText;
        this.acknowledgeUser = acknowledgeUser;
        this.acknowledgeTime = acknowledgeTime;
        this.nodeLabel = nodeLabel;
        this.serviceName = serviceName;
        this.alarmId = alarmId;
        this.eventDisplay = eventDisplay;
    }

