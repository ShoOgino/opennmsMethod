    /**
     * Return the number of events for this node and the given acknowledgment
     * type.
     *
     * @param nodeId a int.
     * @param ackType a {@link org.opennms.web.event.AcknowledgeType} object.
     * @return a int.
     * @throws java.sql.SQLException if any.
     */
    public static int getEventCountForNode(int nodeId, AcknowledgeType ackType) throws SQLException {
        if (ackType == null) {
            throw new IllegalArgumentException("Cannot take null parameters.");
        }

        int eventCount = 0;
        final Connection conn = DataSourceFactory.getInstance().getConnection();
        final DBUtils d = new DBUtils(EventFactory.class, conn);

        try {
            StringBuffer select = new StringBuffer("SELECT COUNT(EVENTID) AS EVENTCOUNT FROM EVENTS WHERE ");
            select.append(getAcknowledgeTypeClause(ackType));

            select.append(" AND NODEID=?");
            select.append(" AND EVENTDISPLAY='Y' ");

            final PreparedStatement stmt = conn.prepareStatement(select.toString());
            d.watch(stmt);
            stmt.setInt(1, nodeId);

            final ResultSet rs = stmt.executeQuery();
            d.watch(rs);

            if (rs.next()) {
                eventCount = rs.getInt("EVENTCOUNT");
            }
        } finally {
            d.cleanUp();
        }

        return eventCount;
    }

