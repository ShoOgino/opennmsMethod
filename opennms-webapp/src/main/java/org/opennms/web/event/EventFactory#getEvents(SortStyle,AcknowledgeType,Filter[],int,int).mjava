    /**
     * Return all events (optionally only unacknowledged events) sorted by the
     * given sort style.
     *
     * <p>
     * <strong>Note: </strong> This limit/offset code is <em>Postgres
     * specific!</em>
     * Per <a href="mailto:shaneo@opennms.org">Shane </a>, this is okay for now
     * until we can come up with an Oracle alternative too.
     * </p>
     *
     * @param limit
     *            if -1 or zero, no limit or offset is used
     * @param offset
     *            if -1, no limit or offset if used
     * @param sortStyle a {@link org.opennms.web.event.SortStyle} object.
     * @param ackType a {@link org.opennms.web.event.AcknowledgeType} object.
     * @param filters an array of org$opennms$web$filter$Filter objects.
     * @return an array of {@link org.opennms.web.event.Event} objects.
     * @throws java.sql.SQLException if any.
     */
    public static Event[] getEvents(SortStyle sortStyle, AcknowledgeType ackType, Filter[] filters, int limit, int offset) throws SQLException {
        if (sortStyle == null || ackType == null || filters == null) {
            throw new IllegalArgumentException("Cannot take null parameters.");
        }

        boolean useLimits = false;
        if (limit > 0 && offset > -1) {
            useLimits = true;
        }

        Event[] events = null;
        final Connection conn = DataSourceFactory.getInstance().getConnection();
        final DBUtils d = new DBUtils(EventFactory.class, conn);

        try {
            StringBuffer select = new StringBuffer("" +
                    "          SELECT events.*, node.nodelabel, service.servicename, " +
                    "                 monitoringsystems.id AS systemId, " + 
                    "                 monitoringsystems.label AS systemLabel, " +
                    "                 monitoringsystems.location AS location " +
                    "            FROM node " +
                    "RIGHT OUTER JOIN events " +
                    "              ON (events.nodeid = node.nodeid) " + 
                    " LEFT OUTER JOIN monitoringsystems " +
                    "              ON (events.systemid = monitoringsystems.id) " +
                    " LEFT OUTER JOIN service " +
                    "              ON (service.serviceid = events.serviceid) " + 
                    "           WHERE ");

            select.append(getAcknowledgeTypeClause(ackType));

            for (Filter filter : filters) {
                select.append(" AND");
                select.append(filter.getParamSql());
            }

            select.append(" AND EVENTDISPLAY='Y' ");
            select.append(getOrderByClause(sortStyle));

            if (useLimits) {
                select.append(" LIMIT ");
                select.append(limit);
                select.append(" OFFSET ");
                select.append(offset);
            }

            final PreparedStatement stmt = conn.prepareStatement(select.toString());
            d.watch(stmt);

            int parameterIndex = 1;
            for (Filter filter : filters) {
                parameterIndex += filter.bindParam(stmt, parameterIndex);
            }

            final ResultSet rs = stmt.executeQuery();
            d.watch(rs);

            events = rs2Events(rs);
        } finally {
            d.cleanUp();
        }

        return events;
    }

