    /**
     * Extracts the key parameters from the parameter set, translates them into
     * filter-based parameters, and then passes the modified parameter set to
     * the {@link EventFilterServlet EventFilterServlet}.
     */
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        List<Filter> filterArray = new ArrayList<Filter>();
        HttpServletRequest req = new XssRequestWrapper(request);

        // convenient syntax for LogMessageSubstringFilter
        String msgSubstring = req.getParameter("msgsub");
        if (msgSubstring != null && msgSubstring.length() > 0) {
            filterArray.add(new LogMessageSubstringFilter(msgSubstring));
        }

        // convenient syntax for LogMessageMatchesAnyFilter
        String msgMatchAny = req.getParameter("msgmatchany");
        if (msgMatchAny != null && msgMatchAny.length() > 0) {
            filterArray.add(new LogMessageMatchesAnyFilter(msgMatchAny));
        }

        // convenient syntax for NodeNameContainingFilter
        String nodeNameLike = req.getParameter("nodenamelike");
        if (nodeNameLike != null && nodeNameLike.length() > 0) {
            filterArray.add(new NodeNameLikeFilter(nodeNameLike));
        }

        // convenient syntax for ServiceFilter
        String service = req.getParameter("service");
        if (service != null && !service.equals(EventUtil.ANY_SERVICES_OPTION)) {
            filterArray.add(new ServiceFilter(WebSecurityUtils.safeParseInt(service)));
        }

        // convenient syntax for IPLikeFilter
        String ipLikePattern = req.getParameter("iplike");
        if (ipLikePattern != null && !ipLikePattern.equals("")) {
            filterArray.add(new IPLikeFilter(ipLikePattern));
        }

        // convenient syntax for SeverityFilter
        String severity = req.getParameter("severity");
        if (severity != null && !severity.equals(EventUtil.ANY_SEVERITIES_OPTION)) {
            filterArray.add(new SeverityFilter(WebSecurityUtils.safeParseInt(severity)));
        }

        // convenient syntax for AfterDateFilter as relative to current time
        String relativeTime = req.getParameter("relativetime");
        if (relativeTime != null && !relativeTime.equals(EventUtil.ANY_RELATIVE_TIMES_OPTION)) {
            try {
                filterArray.add(EventUtil.getRelativeTimeFilter(WebSecurityUtils.safeParseInt(relativeTime)));
            } catch (IllegalArgumentException e) {
                // ignore the relative time if it is an illegal value
                this.log("Illegal relativetime value", e);
            }
        }

        String useBeforeTime = req.getParameter("usebeforetime");
        if (useBeforeTime != null && useBeforeTime.equals("1")) {
            try {
                filterArray.add(this.getBeforeDateFilter(req));
            } catch (IllegalArgumentException e) {
                // ignore the before time if it is an illegal value
                this.log("Illegal before time value", e);
            } catch (MissingParameterException e) {
                throw new ServletException(e);
            }
        }

        String useAfterTime = req.getParameter("useaftertime");
        if (useAfterTime != null && useAfterTime.equals("1")) {
            try {
                filterArray.add(this.getAfterDateFilter(req));
            } catch (IllegalArgumentException e) {
                // ignore the after time if it is an illegal value
                this.log("Illegal after time value", e);
            } catch (MissingParameterException e) {
                throw new ServletException(e);
            }
        }

        String queryString = "";

        if (filterArray.size() > 0) {
            String[] filterStrings = new String[filterArray.size()];

            for (int i = 0; i < filterStrings.length; i++) {
                Filter filter = filterArray.get(i);
                filterStrings[i] = EventUtil.getFilterString(filter);
            }

            Map<String, Object> paramAdditions = new HashMap<String, Object>();
            paramAdditions.put("filter", filterStrings);

            queryString = Util.makeQueryString(req, paramAdditions, IGNORE_LIST);
        } else {
            queryString = Util.makeQueryString(req, IGNORE_LIST);
        }

        response.sendRedirect(this.redirectUrl + "?" + queryString);
    }

