    /**
     * Convenience method for translating a <code>java.sql.ResultSet</code>
     * containing event information into an array of <code>Event</code>
     * objects.
     */
    // FIXME: Don't reuse the same "element" variable for multiple objects.
    protected static Event[] rs2Events(ResultSet rs) throws SQLException {
        Event[] events = null;
        Vector<Event> vector = new Vector<Event>();

        while (rs.next()) {
            Event event = new Event();

            Object element = new Integer(rs.getInt("eventID"));
            event.id = ((Integer) element).intValue();

            element = rs.getString("eventUei");
            event.uei = (String) element;

            element = rs.getString("eventSnmp");
            event.snmp = (String) element;

            element = rs.getTimestamp("eventTime");
            event.time = new Date(((Timestamp) element).getTime());

            element = rs.getString("eventHost");
            event.host = (String) element;

            element = rs.getString("eventSnmpHost");
            event.snmphost = (String) element;

            element = rs.getString("eventDpName");
            event.dpName = (String) element;

            element = rs.getString("eventParms");
            event.parms = (String) element;

            // node id can be null
            element = rs.getObject("nodeID");
            if (element == null) {
                event.nodeID = new Integer(0);
            } else {
                event.nodeID = (Integer) element;
            }

            element = rs.getString("ipAddr");
            event.ipAddr = (String) element;

            element = rs.getObject("serviceID");
            event.serviceID = (Integer) element;

            element = rs.getString("nodeLabel");
            event.nodeLabel = (String) element;

            element = rs.getString("serviceName");
            event.serviceName = (String) element;

            element = rs.getTimestamp("eventCreateTime");
            event.createTime = new Date(((Timestamp) element).getTime());

            element = rs.getString("eventDescr");
            event.description = (String) element;

            element = rs.getString("eventLoggroup");
            event.logGroup = (String) element;

            element = rs.getString("eventLogmsg");
            event.logMessage = (String) element;

            element = OnmsSeverity.get(rs.getInt("eventSeverity"));
            event.severity = ((OnmsSeverity) element);

            element = rs.getString("eventOperInstruct");
            event.operatorInstruction = (String) element;

            element = rs.getString("eventAutoAction");
            event.autoAction = (String) element;

            element = rs.getString("eventOperAction");
            event.operatorAction = (String) element;

            element = rs.getString("eventOperActionMenuText");
            event.operatorActionMenuText = (String) element;

            element = rs.getString("eventNotification");
            event.notification = (String) element;

            element = rs.getString("eventTticket");
            event.troubleTicket = (String) element;

            element = rs.getObject("eventTticketState");
            event.troubleTicketState = (Integer) element;

            element = rs.getString("eventForward");
            event.forward = (String) element;

            element = rs.getString("eventMouseOverText");
            event.mouseOverText = (String) element;

            element = rs.getString("eventAckUser");
            event.acknowledgeUser = (String) element;

            element = rs.getTimestamp("eventAckTime");
            if (element != null) {
                event.acknowledgeTime = new Date(((Timestamp) element).getTime());
            }

            element = rs.getObject("alarmid");
            event.alarmId = (Integer) element;

            vector.addElement(event);
        }

        events = new Event[vector.size()];

        for (int i = 0; i < events.length; i++) {
            events[i] = vector.elementAt(i);
        }

        return events;
    }

