    /**
     * Convenience method for translating a <code>java.sql.ResultSet</code>
     * containing event information into an array of <code>Event</code>
     * objects.
     *
     * @param rs a {@link java.sql.ResultSet} object.
     * @return an array of {@link org.opennms.web.event.Event} objects.
     * @throws java.sql.SQLException if any.
     */
    protected static Event[] rs2Events(ResultSet rs) throws SQLException {
        List<Event> vector = new ArrayList<>();

        while (rs.next()) {
            Event event = new Event();

            event.id = rs.getInt("eventID");
            event.uei = rs.getString("eventUei");
            event.snmp = rs.getString("eventSnmp");

            // event received time cannot be null
            Timestamp timestamp = rs.getTimestamp("eventTime");
            event.time = new Date(timestamp.getTime());

            event.host = rs.getString("eventHost");
            event.snmphost = rs.getString("eventSnmpHost");
            event.dpName = rs.getString("systemLabel");
            event.parms = EventFactory.getParmsForEventId(event.id);

            // node id can be null
            Object element = rs.getObject("nodeID");
            event.nodeID = (element == null) ? Integer.valueOf(0) : (Integer) element;

            event.ipAddr = rs.getString("ipAddr");

            // service id can be null 
            element = rs.getObject("serviceID");
            event.serviceID = (element == null ) ? Integer.valueOf(0) : (Integer) element;

            event.nodeLabel = rs.getString("nodeLabel");
            event.serviceName = rs.getString("serviceName");

            // event create time cannot be null 
            timestamp = rs.getTimestamp("eventCreateTime");
            event.createTime = new Date(timestamp.getTime());

            event.description = rs.getString("eventDescr");
            event.logGroup = rs.getString("eventLoggroup");
            event.logMessage = rs.getString("eventLogmsg");

            event.severity = OnmsSeverity.get(rs.getInt("eventSeverity"));

            event.operatorInstruction = rs.getString("eventOperInstruct");
            event.autoAction = rs.getString("eventAutoAction");
            event.operatorAction = rs.getString("eventOperAction");
            event.operatorActionMenuText = rs.getString("eventOperActionMenuText");
            event.notification = rs.getString("eventNotification");
            event.troubleTicket = rs.getString("eventTticket");

            // trouble ticket state can be null
            element = rs.getObject("eventTticketState");
            event.troubleTicketState = (element == null ) ? Integer.valueOf(0) : (Integer) element;

            event.forward = rs.getString("eventForward");
            event.mouseOverText = rs.getString("eventMouseOverText");

            event.acknowledgeUser = rs.getString("eventAckUser");

            // acknowledge time can be null
            timestamp = rs.getTimestamp("eventAckTime");
            event.acknowledgeTime = (timestamp != null) ? new Date(timestamp.getTime()) : null; 

            // alarm id can be null
            element = rs.getObject("alarmid");
            event.alarmId = (element == null ) ? Integer.valueOf(0) : (Integer) element;

            event.location = rs.getString("location");
            event.systemId = rs.getString("systemId");

            vector.add(event);
        }

        return vector.toArray(new Event[vector.size()]);
    }

