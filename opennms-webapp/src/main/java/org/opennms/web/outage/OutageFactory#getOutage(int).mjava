    /**
     * <p>getOutage</p>
     *
     * @param outageId a int.
     * @return a {@link org.opennms.web.outage.Outage} object.
     * @throws java.sql.SQLException if any.
     */
    public static Outage getOutage(int outageId) throws SQLException {
        Outage outage = null;
        final Connection conn = DataSourceFactory.getInstance().getConnection();
        final DBUtils d = new DBUtils(OutageFactory.class, conn);

        try {
            final PreparedStatement stmt = conn.prepareStatement("SELECT OUTAGES.*, NODE.NODELABEL, NODE.LOCATION, IPINTERFACE.IPHOSTNAME, SERVICE.SERVICENAME, NOTIFICATIONS.NOTIFYID, NOTIFICATIONS.ANSWEREDBY FROM OUTAGES " + "JOIN NODE USING(NODEID) " + "JOIN IPINTERFACE ON OUTAGES.NODEID=IPINTERFACE.NODEID AND OUTAGES.IPADDR=IPINTERFACE.IPADDR " + "LEFT OUTER JOIN SERVICE USING(SERVICEID) " + "LEFT OUTER JOIN NOTIFICATIONS ON SVCLOSTEVENTID=NOTIFICATIONS.EVENTID " + "WHERE OUTAGEID=?");
            d.watch(stmt);
            stmt.setInt(1, outageId);

            final ResultSet rs = stmt.executeQuery();
            d.watch(rs);

            Outage[] outages = rs2Outages(rs);

            if (outages != null && outages.length > 0) {
                outage = outages[0];
            }
        } finally {
            d.cleanUp();
        }

        return outage;
    }

