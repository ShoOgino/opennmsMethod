    /**
     * Get all current outages and any resolved outages since the given time for
     * the given node.
     *
     * @param nodeId
     *            this is the node to query
     * @param time
     *            no resolved outages older than this time will be returned
     * @return All current outages and resolved outages no older than
     *         <code>time</code>.
     * @throws java.sql.SQLException if any.
     */
    public Outage[] getOutagesForNode(int nodeId, Date time) throws SQLException {
        if (time == null) {
            throw new IllegalArgumentException("Cannot take null parameters.");
        }

        Outage[] outages = new Outage[0];
        long timeLong = time.getTime();

        try {
            Connection conn = Vault.getDbConnection();
            d.watch(conn);

            PreparedStatement stmt = conn.prepareStatement("  "
            		+ "SELECT DISTINCT \n" + 
            		"         outages.outageid, outages.iflostservice, outages.ifregainedservice, outages.nodeID, \n" + 
            		"         node.nodeLabel, \n" + 
            		"         outages.ipaddr, \n" + 
            		"         ipinterface.iphostname, \n" + 
            		"         service.servicename, \n" + 
            		"         outages.serviceId \n" + 
            		"    FROM outages \n" + 
            		"    JOIN ifservices \n" + 
            		"      ON ifservices.id = outages.ifserviceid \n" + 
            		"    JOIN ipinterface \n" + 
            		"      ON ipinterface.id = ifservices.ipinterfaceid \n" + 
            		"    JOIN node \n" + 
            		"      ON node.nodeid = ipinterface.nodeid \n" + 
            		"    JOIN service \n" + 
            		"      ON service.serviceid = ifservices.serviceid\n" + 
            		"   WHERE node.nodeid = ? \n" + 
            		"     AND (outages.ifregainedservice >= ? OR outages.ifregainedservice IS NULL) \n" + 
            		"ORDER BY outages.iflostservice DESC");
            d.watch(stmt);
            stmt.setInt(1, nodeId);
            stmt.setTimestamp(2, new Timestamp(timeLong));
            ResultSet rs = stmt.executeQuery();
            d.watch(rs);

            outages = rs2Outages(rs);
        } finally {
            d.cleanUp();
        }

        return outages;
    }

