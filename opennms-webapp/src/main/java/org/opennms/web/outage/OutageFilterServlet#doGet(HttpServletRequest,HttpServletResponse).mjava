    /**
     * Parses the query string to determine what type of outage query to perform
     * (for example, what to filter on or sort by), then does the database query
     * (through the OutageFactory) and then forwards the results to a JSP for
     * display.
     * 
     * <p>
     * Sets the <em>notices</em> and <em>parms</em> request attributes for
     * the forwardee JSP (or whatever gets called).
     * </p>
     */
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        // handle the style sort parameter
        String sortStyleString = WebSecurityUtils.sanitizeString(request.getParameter("sortby"));
        OutageFactory.SortStyle sortStyle = OutageFactory.DEFAULT_SORT_STYLE;
        if (sortStyleString != null) {
            Object temp = OutageFactory.SortStyle.getSortStyle(sortStyleString);
            if (temp != null) {
                sortStyle = (OutageFactory.SortStyle) temp;
            }
        }
        
        // handle the acknowledgment type parameter
        String outTypeString = WebSecurityUtils.sanitizeString(request.getParameter("outtype"));
        OutageFactory.OutageType outType = OutageFactory.OutageType.BOTH;
        if (outTypeString != null) {
            Object temp = OutageFactory.OutageType.getOutageType(outTypeString);
            if (temp != null) {
                outType = (OutageFactory.OutageType) temp;
            }
        }

        // handle the filter parameters
        String[] filterStrings = request.getParameterValues("filter");
        List<Filter> filterArray = new ArrayList<Filter>();
        if (filterStrings != null) {
            for (String filterString : filterStrings) {
                Filter filter = OutageUtil.getFilter(WebSecurityUtils.sanitizeString(filterString));
                if (filter != null) {
                    filterArray.add(filter);
                }
            }
        }

        // handle the optional limit parameter
        String limitString = request.getParameter("limit");
        int limit = DEFAULT_LIMIT;
        if (limitString != null) {
            try {
                limit = WebSecurityUtils.safeParseInt(limitString);
            } catch (NumberFormatException e) {
            }
        }

        // handle the optional multiple parameter
        String multipleString = request.getParameter("multiple");
        int multiple = DEFAULT_MULTIPLE;
        if (multipleString != null) {
            try {
                multiple = WebSecurityUtils.safeParseInt(multipleString);
            } catch (NumberFormatException e) {
            }
        }

        try {
            // put the parameters in a convenient struct
            OutageQueryParms parms = new OutageQueryParms();
            parms.sortStyle = sortStyle;
            parms.outageType = outType;
            parms.filters = filterArray;
            parms.limit = limit;
            parms.multiple = multiple;

            // query the notices with the new filters array
            Outage[] outages = OutageFactory.getOutages(sortStyle, outType, parms.getFilters(), limit, multiple * limit);

            // add the necessary data to the request so the
            // JSP (or whatever gets called) can create the view correctly
            request.setAttribute("outages", outages);
            request.setAttribute("parms", parms);

            // forward the request for proper display
            RequestDispatcher dispatcher = this.getServletContext().getRequestDispatcher("/outage/list.jsp");
            dispatcher.forward(request, response);
        } catch (SQLException e) {
            throw new ServletException("Error while querying database for outages", e);
        }
    }

