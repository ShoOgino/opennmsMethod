    /**
     * <p>getCurrentOutagesForNode</p>
     *
     * @param nodeId a int.
     * @return an array of {@link org.opennms.web.outage.Outage} objects.
     * @throws java.sql.SQLException if any.
     */
    public static Outage[] getCurrentOutagesForNode(int nodeId) throws SQLException {
        Outage[] outages = new Outage[0];

        final DBUtils d = new DBUtils(OutageModel.class);

        try {
            Connection conn = DataSourceFactory.getInstance().getConnection();
            d.watch(conn);

            PreparedStatement stmt = conn.prepareStatement(""
            		+ "SELECT DISTINCT \n" + 
            		"         outages.outageid, outages.iflostservice, outages.ifregainedservice, node.nodeID, \n" + 
            		"         node.nodeLabel, \n" +
                    "         node.location, \n" +
                    "         ipinterface.ipaddr, \n" +
            		"         ipinterface.iphostname, \n" + 
            		"         service.servicename, \n" + 
            		"         ifservices.serviceId \n" + 
            		"    from outages \n" + 
            		"    join ifservices \n" + 
            		"      on ifservices.id = outages.ifserviceid \n" + 
            		"    join ipinterface \n" + 
            		"      on ipinterface.id = ifservices.ipinterfaceid \n" + 
            		"    join node \n" + 
            		"       on node.nodeid = ipinterface.nodeid \n" + 
            		"    join service \n" + 
            		"      on ifservices.serviceid = service.serviceid \n" + 
            		"   where node.nodeid = ? \n" +
            		"     and outages.perspective is null \n" +
            		"     and outages.ifregainedservice is null \n" + 
            		"     and outages.suppresstime is null \n" + 
            		"      or outages.suppresstime < now() \n" + 
            		"order by iflostservice desc");
            d.watch(stmt);
            stmt.setInt(1, nodeId);
            ResultSet rs = stmt.executeQuery();
            d.watch(rs);

            outages = rs2Outages(rs, false);
        } finally {
            d.cleanUp();
        }

        return outages;
    }

