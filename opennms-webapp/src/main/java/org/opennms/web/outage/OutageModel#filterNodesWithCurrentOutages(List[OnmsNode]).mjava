    /**
     * <p>filterNodesWithCurrentOutages</p>
     *
     * @param nodes an array of {@link org.opennms.netmgt.config.poller.outages.Node} objects.
     * @return an array of {@link org.opennms.netmgt.config.poller.outages.Node} objects.
     * @throws java.sql.SQLException if any.
     */
    public OnmsNode[] filterNodesWithCurrentOutages(List<OnmsNode> nodes) throws SQLException {
        HashMap<Integer, OnmsNode> nodeMap = new HashMap<Integer, OnmsNode>(nodes.size());
        for (OnmsNode n : nodes) {
            nodeMap.put(n.getId(), n);
        }
        
        String nodeList = StringUtils.collectionToDelimitedString(nodeMap.keySet(), ", ");
        
        List<OnmsNode> newNodes = new ArrayList<OnmsNode>();
        
        try {
            Connection conn = DataSourceFactory.getInstance().getConnection();
            d.watch(conn);

            PreparedStatement stmt = conn.prepareStatement("SELECT DISTINCT nodeid from outages where nodeid in ( " + nodeList + " ) and ifregainedservice is null and suppresstime is null or suppresstime < now();");
            d.watch(stmt);
            ResultSet rs = stmt.executeQuery();
            d.watch(rs);

            while (rs.next()) {
                newNodes.add(nodeMap.get(rs.getInt(1)));
            }
        } finally {
            d.cleanUp();
        }

        return newNodes.toArray(new OnmsNode[newNodes.size()]);
    }

