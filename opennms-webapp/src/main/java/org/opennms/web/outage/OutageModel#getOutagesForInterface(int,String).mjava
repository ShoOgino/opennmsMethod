    /**
     * <p>getOutagesForInterface</p>
     *
     * @param nodeId a int.
     * @param ipInterface a {@link java.lang.String} object.
     * @return an array of {@link org.opennms.web.outage.Outage} objects.
     * @throws java.sql.SQLException if any.
     */
    public Outage[] getOutagesForInterface(int nodeId, String ipInterface) throws SQLException {
        Outage[] outages = new Outage[0];

        try {
            Connection conn = Vault.getDbConnection();
            d.watch(conn);

            PreparedStatement stmt = conn.prepareStatement("  "
            		+ "SELECT DISTINCT \n" + 
            		"         outages.outageid, outages.iflostservice, outages.ifregainedservice, outages.nodeID, \n" + 
            		"         node.nodeLabel, \n" + 
            		"         outages.ipaddr, \n" + 
            		"         ipinterface.iphostname, \n" + 
            		"         service.servicename, \n" + 
            		"         outages.serviceId \n" + 
            		"    FROM outages \n" + 
            		"    JOIN ifservices \n" + 
            		"      ON ifservices.id = outages.ifserviceid \n" + 
            		"    JOIN ipinterface \n" + 
            		"      ON ipinterface.id = ifservices.ipinterfaceid \n" + 
            		"    JOIN node \n" + 
            		"      ON node.nodeid = ipinterface.nodeid \n" + 
            		"    JOIN service \n" + 
            		"      ON service.serviceid = ifservices.serviceid \n" + 
            		"   WHERE node.nodeid = ? \n" + 
            		"ORDER BY iflostservice desc");
            d.watch(stmt);
            stmt.setInt(1, nodeId);
            stmt.setString(2, ipInterface);
            ResultSet rs = stmt.executeQuery();
            d.watch(rs);

            outages = rs2Outages(rs);
        } finally {
            d.cleanUp();
        }

        return outages;
    }

