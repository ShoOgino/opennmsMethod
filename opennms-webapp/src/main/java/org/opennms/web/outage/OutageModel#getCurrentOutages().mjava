    /**
     * Query the database to retrieve the current outages.
     *
     * @return An array of {@link Outage Outage}objects, or if there are none,
     *         an empty array.
     * @throws java.sql.SQLException
     *             If there is a problem getting a database connection or making
     *             a query.
     */
    public Outage[] getCurrentOutages() throws SQLException {
        Outage[] outages = new Outage[0];

        try {
            Connection conn = DataSourceFactory.getInstance().getConnection();
            d.watch(conn);

            Statement stmt = conn.createStatement();
            d.watch(stmt);
            ResultSet rs = stmt.executeQuery("select o.outageid, o.nodeId, n.nodeLabel, o.ipaddr, ip.iphostname, s.servicename, o.serviceId, o.iflostservice, o.svclosteventid, no.notifyId, no.answeredBy from outages o left outer join notifications no on (o.svclosteventid = no.eventid) join ifservices if on (if.id = o.ifserviceid) join ipinterface ip on (ip.id = if.ipinterfaceid) join node n on (n.nodeid = ip.nodeid) join service s on (s.serviceid = if.serviceid) where ifregainedservice is null and n.nodeType != 'D' and ip.isManaged != 'D' and if.status != 'D' and o.serviceid=s.serviceid and (o.suppresstime is null or o.suppresstime < now()) order by n.nodelabel, ip.ipaddr, s.serviceName");
            d.watch(rs);

            outages = rs2Outages(rs, false, true);
        } finally {
            d.cleanUp();
        }

        return outages;
    }

