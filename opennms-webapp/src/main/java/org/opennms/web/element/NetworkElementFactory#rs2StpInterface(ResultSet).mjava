    /**
     * This method returns the data from the result set as an array of
     * StpInterface objects.
     */
    protected static StpInterface[] rs2StpInterface(ResultSet rs)
            throws SQLException {
        if (rs == null) {
            throw new IllegalArgumentException("Cannot take null parameters.");
        }

        StpInterface[] nodes = null;
        Vector vector = new Vector();

        while (rs.next()) {
            StpInterface node = new StpInterface();

            Object element = new Integer(rs.getInt("nodeId"));
            node.m_nodeId = ((Integer) element).intValue();

            element = rs.getTimestamp("lastpolltime");
            if (element != null)
                node.m_lastPollTime = EventConstants.formatToString(new Date(
                        ((Timestamp) element).getTime()));

            element = new Integer(rs.getInt("bridgeport"));
            if (element != null) {
                node.m_bridgeport = ((Integer) element).intValue();
            }

            element = new Integer(rs.getInt("ifindex"));
            if (element != null) {
                node.m_ifindex = ((Integer) element).intValue();
            }

            element = rs.getString("stpportdesignatedroot");
            node.m_stpdesignatedroot = (String) element;

            element = new Integer(rs.getInt("stpportdesignatedcost"));
            if (element != null) {
                node.m_stpportdesignatedcost = ((Integer) element).intValue();
            }

            element = rs.getString("stpportdesignatedbridge");
            node.m_stpdesignatedbridge = (String) element;

            element = rs.getString("stpportdesignatedport");
            node.m_stpdesignatedport = (String) element;

            element = new Integer(rs.getInt("stpportpathcost"));
            if (element != null) {
                node.m_stpportpathcost = ((Integer) element).intValue();
            }

            element = new Integer(rs.getInt("stpportstate"));
            if (element != null) {
                node.m_stpportstate = ((Integer) element).intValue();
            }

            element = new Integer(rs.getInt("stpvlan"));
            if (element != null) {
                node.m_stpvlan = ((Integer) element).intValue();
            }

            element = rs.getString("status");
            if (element != null) {
                node.m_status = ((String) element).charAt(0);
            }

            element = new Integer(rs.getInt("dbridge"));
            if (element != null) {
                node.m_stpbridgenodeid = ((Integer) element).intValue();
            }

            element = new Integer(rs.getInt("droot"));
            if (element != null) {
                node.m_stprootnodeid = ((Integer) element).intValue();
            }
            
            if (node.get_ifindex() == -1 ) {
                node.m_ipaddr = getIpAddress(node.get_nodeId());
            } else {
                node.m_ipaddr = getIpAddress(node.get_nodeId(), node
                        .get_ifindex());
            }

            vector.addElement(node);
        }


        nodes = new StpInterface[vector.size()];

        for (int i = 0; i < nodes.length; i++) {
            nodes[i] = (StpInterface) vector.elementAt(i);
        }

        return (nodes);
    }

