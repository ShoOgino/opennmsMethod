    /**
     * <p>getLinkedNodeIdOnNode</p>
     *
     * @param nodeID a int.
     * @return a {@link java.util.Set} object.
     * @throws java.sql.SQLException if any.
     */
    @Override
    public Set<Integer> getLinkedNodeIdOnNode(int nodeID) throws SQLException {
        Set<Integer> nodes = new TreeSet<Integer>();

        List<Integer> parentIds = m_jdbcTemplate.query(
            "SELECT distinct(nodeparentid) as parentid FROM DATALINKINTERFACE WHERE NODEID = ? AND STATUS != 'D'",
            new RowMapper<Integer>() {
                @Override
                public Integer mapRow(ResultSet rs, int rowNum) throws SQLException {
                    return rs.getObject("parentid") == null ? null : rs.getInt("parentid");
                }
            },
            nodeID
        );
        // Remove all nulls, TreeSets cannot contain null
        parentIds.remove(null);
        nodes.addAll(parentIds);

        parentIds = m_jdbcTemplate.query(
            "SELECT distinct(nodeid) as parentid FROM DATALINKINTERFACE WHERE NODEPARENTID = ? AND STATUS != 'D'",
            new RowMapper<Integer>() {
                @Override
                public Integer mapRow(ResultSet rs, int rowNum) throws SQLException {
                    return rs.getObject("parentid") == null ? null : rs.getInt("parentid");
                }
            },
            nodeID
        );
        // Remove all nulls, TreeSets cannot contain null
        parentIds.remove(null);
        nodes.addAll(parentIds);

        return nodes;
    }

