    /**
     * This method returns the data from the result set as an array of StpNode
     * objects.
     */
    protected static StpNode[] rs2StpNode(ResultSet rs) throws SQLException {
        if (rs == null) {
            throw new IllegalArgumentException("Cannot take null parameters.");
        }

        StpNode[] nodes = null;
        Vector vector = new Vector();

        while (rs.next()) {
            StpNode node = new StpNode();

            Object element = new Integer(rs.getInt("nodeId"));
            node.m_nodeId = ((Integer) element).intValue();

            element = rs.getString("basebridgeaddress");
            node.m_basebridgeaddress = (String) element;

            element = rs.getString("stpdesignatedroot");
            node.m_stpdesignatedroot = (String) element;

            element = rs.getTimestamp("lastpolltime");
            if (element != null)
                node.m_lastPollTime = EventConstants.formatToString(new Date(
                        ((Timestamp) element).getTime()));

            element = new Integer(rs.getInt("basenumports"));
            if (element != null) {
                node.m_basenumports = ((Integer) element).intValue();
            }

            element = new Integer(rs.getInt("basetype"));
            if (element != null) {
                node.m_basetype = ((Integer) element).intValue();
            }

            element = new Integer(rs.getInt("basevlan"));
            if (element != null) {
                node.m_basevlan = ((Integer) element).intValue();
            }

            element = rs.getString("basevlanname");
            if (element != null) {
                node.m_basevlanname = (String) element;
            }

            element = new Integer(rs.getInt("stppriority"));
            if (element != null) {
                node.m_stppriority = ((Integer) element).intValue();
            }

            element = new Integer(rs.getInt("stpprotocolspecification"));
            if (element != null) {
                node.m_stpprotocolspecification = ((Integer) element)
                        .intValue();
            }

            element = new Integer(rs.getInt("stprootcost"));
            if (element != null) {
                node.m_stprootcost = ((Integer) element).intValue();
            }

            element = new Integer(rs.getInt("stprootport"));
            if (element != null) {
                node.m_stprootport = ((Integer) element).intValue();
            }

            element = rs.getString("status");
            if (element != null) {
                node.m_status = ((String) element).charAt(0);
            }

            element = new Integer(rs.getInt("stpdesignatedrootnodeid"));
            if (element != null) {
                node.m_stprootnodeid = ((Integer) element).intValue();
            }

            vector.addElement(node);
        }

        nodes = new StpNode[vector.size()];

        for (int i = 0; i < nodes.length; i++) {
            nodes[i] = (StpNode) vector.elementAt(i);
        }

        return (nodes);
    }

