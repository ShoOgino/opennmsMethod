    /**
     * This method returns the data from the result set as an array of
     * AtInterface objects.
     *
     * @param rs a {@link java.sql.ResultSet} object.
     * @return an array of {@link org.opennms.web.element.AtInterface} objects.
     * @throws java.sql.SQLException if any.
     */
    protected static AtInterface[] rs2AtInterface(ResultSet rs)
            throws SQLException {
        if (rs == null) {
            throw new IllegalArgumentException("Cannot take null parameters.");
        }

        List<AtInterface> atIfs = new ArrayList<AtInterface>();

        while (rs.next()) {
            // Non-null field
            Object element = new Integer(rs.getInt("nodeId"));
            int nodeId = ((Integer) element).intValue();

            // Non-null field
            element = rs.getString("ipaddr");
            String ipaddr = (String) element;

            // Non-null field
            element = rs.getString("atphysaddr");
            String physaddr = (String) element;

            // Non-null field
            element = rs.getTimestamp("lastpolltime");
            String lastPollTime = EventConstants.formatToString(new Date(
                    ((Timestamp) element).getTime()));

            // Non-null field
            element = new Integer(rs.getInt("sourcenodeID"));
            int sourcenodeid = ((Integer) element).intValue();

            // Non-null field
            element = new Integer(rs.getInt("ifindex"));
            int ifindex = ((Integer) element).intValue();

            // Non-null field
            element = rs.getString("status");
            char status = ((String) element).charAt(0);

            atIfs.add(new AtInterface(nodeId, sourcenodeid, ifindex, ipaddr, physaddr, lastPollTime, status));
        }

        return atIfs.toArray(new AtInterface[atIfs.size()]);
    }

