    /**
     * This method returns the data from the result set as an array of
     * AtInterface objects.
     */
    protected static AtInterface[] rs2AtInterface(ResultSet rs)
            throws SQLException {
        if (rs == null) {
            throw new IllegalArgumentException("Cannot take null parameters.");
        }

        AtInterface[] nodes = null;
        Vector vector = new Vector();

        while (rs.next()) {
            AtInterface node = new AtInterface();

            Object element = new Integer(rs.getInt("nodeId"));
            node.m_nodeId = ((Integer) element).intValue();

            element = rs.getString("ipaddr");
            node.m_ipaddr = (String) element;

            element = rs.getString("atphysaddr");
            node.m_physaddr = (String) element;

            element = rs.getTimestamp("lastpolltime");
            if (element != null)
                node.m_lastPollTime = EventConstants.formatToString(new Date(
                        ((Timestamp) element).getTime()));

            element = new Integer(rs.getInt("sourcenodeID"));
            if (element != null) {
                node.m_sourcenodeid = ((Integer) element).intValue();
            }

            element = new Integer(rs.getInt("ifindex"));
            if (element != null) {
                node.m_ifindex = ((Integer) element).intValue();
            }

            element = rs.getString("status");
            if (element != null) {
                node.m_status = ((String) element).charAt(0);
            }

            vector.addElement(node);
        }

        nodes = new AtInterface[vector.size()];

        for (int i = 0; i < nodes.length; i++) {
            nodes[i] = (AtInterface) vector.elementAt(i);
        }

        return (nodes);
    }

