    /**
     * This method returns the data from the result set as an array of
     * AtInterface objects.
     *
     * @param rs a {@link java.sql.ResultSet} object.
     * @return an array of {@link org.opennms.web.element.AtInterface} objects.
     * @throws java.sql.SQLException if any.
     */
    protected static AtInterface[] rs2AtInterface(ResultSet rs)
            throws SQLException {
        if (rs == null) {
            throw new IllegalArgumentException("Cannot take null parameters.");
        }

        List<AtInterface> atIfs = new ArrayList<AtInterface>();

        while (rs.next()) {
            AtInterface atIf = new AtInterface();

            Object element = new Integer(rs.getInt("nodeId"));
            atIf.m_nodeId = ((Integer) element).intValue();

            element = rs.getString("ipaddr");
            atIf.m_ipaddr = (String) element;

            element = rs.getString("atphysaddr");
            atIf.m_physaddr = (String) element;

            element = rs.getTimestamp("lastpolltime");
            if (element != null) {
                atIf.m_lastPollTime = EventConstants.formatToString(new Date(
                        ((Timestamp) element).getTime()));
            }

            element = new Integer(rs.getInt("sourcenodeID"));
            if (element != null) {
                atIf.m_sourcenodeid = ((Integer) element).intValue();
            }

            element = new Integer(rs.getInt("ifindex"));
            if (element != null) {
                atIf.m_ifindex = ((Integer) element).intValue();
            }

            element = rs.getString("status");
            if (element != null) {
                atIf.m_status = ((String) element).charAt(0);
            } else {
                atIf.m_status = DbAtInterfaceEntry.STATUS_UNKNOWN;
            }

            atIfs.add(atIf);
        }

        return atIfs.toArray(new AtInterface[atIfs.size()]);
    }

