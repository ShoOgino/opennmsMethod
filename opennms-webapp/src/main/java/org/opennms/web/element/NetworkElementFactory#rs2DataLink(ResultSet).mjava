    /**
     * This method returns the data from the result set as an array of
     * DataLinkInterface objects.
     */
    protected static DataLinkInterface[] rs2DataLink(ResultSet rs)
            throws SQLException {
        if (rs == null) {
            throw new IllegalArgumentException("Cannot take null parameters.");
        }

        DataLinkInterface[] nodes = null;
        Vector vector = new Vector();

        while (rs.next()) {
            DataLinkInterface node = new DataLinkInterface();

            Object element = new Integer(rs.getInt("nodeId"));
            node.m_nodeId = ((Integer) element).intValue();

            element = new Integer(rs.getInt("ifindex"));
            if (element != null) {
                node.m_ifindex = ((Integer) element).intValue();
            }

            element = rs.getTimestamp("lastpolltime");
            if (element != null)
                node.m_lastPollTime = EventConstants.formatToString(new Date(
                        ((Timestamp) element).getTime()));

            element = new Integer(rs.getInt("nodeparentid"));
            if (element != null) {
                node.m_nodeparentid = ((Integer) element).intValue();
            }

            element = new Integer(rs.getInt("parentifindex"));
            if (element != null) {
                node.m_parentifindex = ((Integer) element).intValue();
            }

            element = rs.getString("status");
            if (element != null) {
                node.m_status = ((String) element).charAt(0);
            }

            node.m_parentipaddress = getIpAddress(node.get_nodeparentid(), node
                    .get_parentifindex());

            if (node.get_ifindex() == -1 ) {
                node.m_ipaddress = getIpAddress(node.get_nodeId());
            } else {
                node.m_ipaddress = getIpAddress(node.get_nodeId(), node
                        .get_ifindex());
            }

            vector.addElement(node);
        }

        nodes = new DataLinkInterface[vector.size()];

        for (int i = 0; i < nodes.length; i++) {
            nodes[i] = (DataLinkInterface) vector.elementAt(i);
        }

        return (nodes);
    }

