    /**
     * <p>getStpInterface</p>
     *
     * @param nodeID a int.
     * @param ifindex a int.
     * @return an array of {@link org.opennms.web.element.StpInterface} objects.
     * @throws java.sql.SQLException if any.
     */
    @Override
    public StpInterface[] getStpInterface(int nodeID, int ifindex) {
    	/*
        String sqlQuery = "SELECT DISTINCT(stpnode.nodeid) AS droot, stpinterfacedb.* FROM "
            + "((SELECT DISTINCT(stpnode.nodeid) AS dbridge, stpinterface.* FROM "
            + "stpinterface LEFT JOIN stpnode ON SUBSTR(stpportdesignatedbridge,5,16) = stpnode.basebridgeaddress "
            + "AND stpportdesignatedbridge != '0000000000000000'"
            + "WHERE stpinterface.status != 'D' AND stpinterface.nodeid = ? AND stpinterface.ifindex = ?) AS stpinterfacedb "
            + "LEFT JOIN stpnode ON SUBSTR(stpportdesignatedroot, 5, 16) = stpnode.basebridgeaddress) order by stpinterfacedb.stpvlan, stpinterfacedb.ifindex;";
        List<StpInterface> nodes = m_jdbcTemplate.query(sqlQuery, new StpInterfaceRowMapper(), nodeID, ifindex);
        */

    	final OnmsCriteria criteria = new OnmsCriteria(OnmsStpInterface.class);
        criteria.createAlias("node", "node", OnmsCriteria.LEFT_JOIN);
        criteria.add(Restrictions.eq("node.id", nodeID));
        criteria.add(Restrictions.eq("ifIndex", ifindex));
        criteria.add(Restrictions.ne("status", StatusType.DELETED));

        List<StpInterface> stpinterfaces = new ArrayList<StpInterface>();
    	for (OnmsStpInterface onmsStpInterface: m_stpInterfaceDao.findMatching(criteria)) {
    		stpinterfaces.add(getStpInterface(onmsStpInterface));
    	}
        return stpinterfaces.toArray(new StpInterface[stpinterfaces.size()]);
    }

