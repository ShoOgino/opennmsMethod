    /**
     * This method returns the data from the result set as an array of Node
     * objects.
     */
    protected static Node[] rs2Nodes(ResultSet rs) throws SQLException {
        if (rs == null) {
            throw new IllegalArgumentException("Cannot take null parameters.");
        }

        List<Node> nodes = new ArrayList<Node>();
        Object element = null;

        while (rs.next()) {
            Node node = new Node();

            node.m_nodeId = rs.getInt("nodeId");
            node.m_dpname = rs.getString("dpName");

            element = rs.getTimestamp("nodeCreateTime");
            if (element != null)
                node.m_nodeCreateTime = Util.formatDateToUIString(new Date(((Timestamp) element).getTime()));
            

            element = new Integer(rs.getInt("nodeParentID"));
            if (element != null) {
                node.m_nodeParent = ((Integer) element).intValue();
            }

            element = rs.getString("nodeType");
            if (element != null) {
                node.m_nodeType = ((String) element).charAt(0);
            }

            node.m_nodeSysId = rs.getString("nodeSysOID");
            node.m_nodeSysName = rs.getString("nodeSysName");
            node.m_nodeSysDescr = rs.getString("nodeSysDescription");
            node.m_nodeSysLocn = rs.getString("nodeSysLocation");
            node.m_nodeSysContact = rs.getString("nodeSysContact");
            node.m_label = rs.getString("nodelabel");
            node.m_operatingSystem = rs.getString("operatingsystem");

            nodes.add(node);
        }
        
        return (Node[]) nodes.toArray(new Node[nodes.size()]);

    }

