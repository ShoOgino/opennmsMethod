	/**
	 * Method to pull out all the named params in params and use them to add restriction filters to a criteria object.
	 * Uses the objectClass to determine parameters and types; auto converts from strings to appropriate types, if at all possible.
	 * Additionally, the param "comparator", if set, will change the comparision from the default of equality.  Acceptable comparators are:
	 * "equals", "ilike", "like", "gt", "lt", "ge", "le", "ne" (other values will default to equality).
	 * If there is an "orderBy" param, results will be ordered by the property name given.  Default is ascending, unless "order" is set to "desc"
	 * If there is a "query" param, it will be added to the criteria as a raw hibernate SQL statement (in addition to any other parameters specified
	 *
	 * The "criteria" object will be populated with the filter and ordering details provided
	 *
	 * @param params set of string parameters from which various configuration properties are extracted
	 * @param criteria the object which will be populated with the filter/ordering
	 * @param objectClass the type of thing being filtered.
	 */
	protected void addFiltersToCriteria(MultivaluedMap<java.lang.String, java.lang.String> params, OnmsCriteria criteria, Class<?> objectClass) {
		
		MultivaluedMap<String, String> paramsCopy = new MultivaluedMapImpl();
	    paramsCopy.putAll(params);

		if(paramsCopy.containsKey("query")) {
			String query=paramsCopy.getFirst("query");
			criteria.add(Restrictions.sqlRestriction(query));
			paramsCopy.remove("query");
		}

		paramsCopy.remove("_dc");

		String matchType="all";
		if (paramsCopy.containsKey("match")) {
		    matchType = paramsCopy.getFirst("match");
		    paramsCopy.remove("match");
		}

		/*
        if(paramsCopy.containsKey("node.id") && !matchType.equalsIgnoreCase("any")) {
            String nodeId = paramsCopy.getFirst("node.id");
            Integer id = Integer.valueOf(nodeId);
            criteria.createCriteria("node").add(Restrictions.eq("id", id));
            paramsCopy.remove("node.id");
        }
        */
        
		//By default, just do equals comparison
		ComparisonOperation op=ComparisonOperation.EQ;
		if(paramsCopy.containsKey("comparator")) {
			String comparatorLabel=paramsCopy.getFirst("comparator");
			paramsCopy.remove("comparator");
	
			if(comparatorLabel.equals("equals")) {
				op=ComparisonOperation.EQ;
			}else if (comparatorLabel.equals("ilike")) {
				op=ComparisonOperation.ILIKE;
			}else if (comparatorLabel.equals("like")) {
				op=ComparisonOperation.LIKE;
			}else if (comparatorLabel.equals("gt")) {
				op=ComparisonOperation.GT;
			}else if (comparatorLabel.equals("lt")) {
				op=ComparisonOperation.LT;
			}else if (comparatorLabel.equals("ge")) {
				op=ComparisonOperation.GE;
			}else if (comparatorLabel.equals("le")) {
				op=ComparisonOperation.LE;
			}else if (comparatorLabel.equals("ne")) {
				op=ComparisonOperation.NE;
			} else if (comparatorLabel.equals("contains")) {
			    op=ComparisonOperation.CONTAINS;
			} else if (comparatorLabel.equals("iplike")) {
			    op=ComparisonOperation.IPLIKE;
			}
		}
		BeanWrapper wrapper = new BeanWrapperImpl(objectClass);
		wrapper.registerCustomEditor(java.util.Date.class, new ISO8601DateEditor());
		wrapper.registerCustomEditor(java.net.InetAddress.class, new InetAddressTypeEditor());
		
		List<Criterion> criteriaList = new ArrayList<Criterion>();
		
		for(String key: paramsCopy.keySet()) {

		    for (String stringValue : paramsCopy.get(key)) {
    			if("null".equals(stringValue)) {
    				criteriaList.add(Restrictions.isNull(key));
    			} else if ("notnull".equals(stringValue)) {
    				criteriaList.add(Restrictions.isNotNull(key));
    			} else {
    				
					Object thisValue;
    				if ("node.id".equals(key)) {
    					thisValue = Integer.valueOf(stringValue);
    				}else if(op == ComparisonOperation.CONTAINS || op == ComparisonOperation.IPLIKE) {
    				    thisValue = stringValue;
    				}else {
    				    thisValue = convertIfNecessary(wrapper, key, stringValue);
    				}
    				
    				LogUtils.warnf(this, "key = %s, propertyType = %s", key, wrapper.getPropertyType(key));
    				switch(op) {
    		   		case EQ:
    		    		criteriaList.add(Restrictions.eq(key, thisValue));
    					break;
    		  		case NE:
    		  		    criteriaList.add(Restrictions.ne(key,thisValue));
    					break;
    		   		case ILIKE:
    		   		    criteriaList.add(Restrictions.ilike(key, thisValue));
    					break;
    		   		case LIKE:
    		   		    criteriaList.add(Restrictions.like(key, thisValue));
    					break;
    		   		case GT:
    		   		    criteriaList.add(Restrictions.gt(key, thisValue));
    					break;
    		   		case LT:
    		    		criteriaList.add(Restrictions.lt(key, thisValue));
    					break;
    		   		case GE:
    		    		criteriaList.add(Restrictions.ge(key, thisValue));
    					break;
    		   		case LE:
    		    		criteriaList.add(Restrictions.le(key, thisValue));
    					break;
    		   		case CONTAINS:
    		   		    criteriaList.add(Restrictions.ilike(key, stringValue, MatchMode.ANYWHERE));
    		   		    break;
    		   		case IPLIKE:
    		   		    criteriaList.add(OnmsRestrictions.ipLike(stringValue));
    		   		    break;
    				}
    			}
		    }
		}

		if (criteriaList.size() > 1 && matchType.equalsIgnoreCase("any")) {
		    // OR everything
		    Criterion lhs = criteriaList.remove(0);
		    Criterion rhs = criteriaList.remove(0);
	            
		    Criterion or = Restrictions.or(lhs, rhs);
		    while (criteriaList.size() > 0) {
		        rhs = criteriaList.remove(0);
		        or = Restrictions.or(or, rhs);
		    }
		    
		    criteria.add(or);
		} else {
		    for (Criterion c : criteriaList) {
		        criteria.add(c);
		    }
		}
	}

