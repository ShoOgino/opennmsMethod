    /**
     * <p>updateAlarm</p>
     *
     * @param alarmId a {@link java.lang.String} object.
     * @param ack a {@link java.lang.Boolean} object.
     */
    @PUT
	@Path("{alarmId}")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	@Transactional
	public void updateAlarm(@PathParam("alarmId") final Integer alarmId, final MultivaluedMapImpl formProperties) {
        writeLock();

    	try {
    		if (alarmId == null) {
    			throw new IllegalArgumentException("Unable to determine alarm ID to update based on query path.");
    		}

    		final String ackValue = formProperties.getFirst("ack");
            formProperties.remove("ack");
            final String escalateValue = formProperties.getFirst("escalate");
            formProperties.remove("escalate");
            final String clearValue = formProperties.getFirst("clear");
            formProperties.remove("clear");
            final String ackUserValue = formProperties.getFirst("ackUser");
            formProperties.remove("ackUser");
            
    		final String ackUser = ackUserValue == null? m_securityContext.getUserPrincipal().getName() : ackUserValue;

        	final OnmsAlarm alarm = m_alarmDao.get(alarmId);
        	if (alarm == null) {
        		throw new IllegalArgumentException("Unable to locate alarm with ID '" + alarmId + "'");
        	}

        	if (ackValue != null) {
        		processAlarmAck(alarm, Boolean.parseBoolean(ackValue), ackUser);
        	} else if (escalateValue != null) {
        		processAlarmEscalate(alarm, Boolean.parseBoolean(escalateValue), ackUser);
        	} else if (clearValue != null) {
        		processAlarmClear(alarm, Boolean.parseBoolean(clearValue), ackUser);
        	} else {
    			throw new IllegalArgumentException("Must supply one of the 'ack', 'escalate', or 'clear' parameters, set to either 'true' or 'false'.");
    		}
        } finally {
            writeUnlock();
        }
	}

