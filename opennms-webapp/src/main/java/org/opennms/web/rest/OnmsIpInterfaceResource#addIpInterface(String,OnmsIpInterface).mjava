    /**
     * <p>addIpInterface</p>
     *
     * @param nodeCriteria a {@link java.lang.String} object.
     * @param ipInterface a {@link org.opennms.netmgt.model.OnmsIpInterface} object.
     * @return a {@link javax.ws.rs.core.Response} object.
     */
    @POST
    @Consumes(MediaType.APPLICATION_XML)
    public Response addIpInterface(@PathParam("nodeCriteria") String nodeCriteria, OnmsIpInterface ipInterface) {
        OnmsNode node = m_nodeDao.get(nodeCriteria);
        if (node == null) {
            throwException(Status.BAD_REQUEST, "addIpInterface: can't find node " + nodeCriteria);
        } else if (ipInterface == null) {
            throwException(Status.BAD_REQUEST, "addIpInterface: ipInterface object cannot be null");
        } else if (ipInterface.getIpAddress() == null) {
            throwException(Status.BAD_REQUEST, "addIpInterface: ipInterface's ipAddress cannot be null");
        } else if (ipInterface.getIpAddress().getAddress() == null) {
            throwException(Status.BAD_REQUEST, "addIpInterface: ipInterface's ipAddress bytes cannot be null");
        }
        log().debug("addIpInterface: adding interface " + ipInterface);
        node.addIpInterface(ipInterface);
        m_ipInterfaceDao.save(ipInterface);
        
        EventBuilder bldr = new EventBuilder(EventConstants.NODE_GAINED_INTERFACE_EVENT_UEI, getClass().getName());

        bldr.setNodeid(node.getId());
        bldr.setInterface(ipInterface.getIpAddress());

        try {
            m_eventProxy.send(bldr.getEvent());
        } catch (EventProxyException ex) {
            throwException(Status.BAD_REQUEST, ex.getMessage());
        }
        return Response.ok().build();
    }

