    /**
     * Updates the node with foreign id "foreignId" in foreign source "foreignSource"
     *
     * @param foreignSource a {@link java.lang.String} object.
     * @param foreignId a {@link java.lang.String} object.
     * @param params a {@link org.opennms.web.rest.MultivaluedMapImpl} object.
     * @return a {@link javax.ws.rs.core.Response} object.
     */
    @PUT
    @Path("{foreignSource}/nodes/{foreignId}")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Transactional
    public Response updateNode(@PathParam("foreignSource") String foreignSource, @PathParam("foreignId") String foreignId, MultivaluedMapImpl params) {
        getWriteLock().lock();
        try {
            Requisition req = getActiveRequisition(foreignSource);
            if (req != null) {
                RequisitionNode node = req.getNode(foreignId);
                if (node != null) {
                    debug("updateNode: updating node with foreign source %s and foreign id %s", foreignSource, foreignId);
                    setProperties(params, node);
                    debug("updateNode: node with foreign source %s and foreign id %s updated", foreignSource, foreignId);
                    m_pendingForeignSourceRepository.save(req);
                    return Response.ok(node).build();
                }
            }
            return Response.notModified(foreignSource + "/" + foreignId).build();
        } finally {
            getWriteLock().unlock();
        }
    }

