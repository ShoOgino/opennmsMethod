	/**
	 * <p>updateAlarms</p>
	 *
	 * @param formProperties a {@link org.opennms.web.rest.MultivaluedMapImpl} object.
	 */
	@PUT
	@Transactional
	@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	public void updateAlarms(final MultivaluedMapImpl formProperties) {
	    writeLock();
	    
	    try {
			final String ackValue = formProperties.getFirst("ack");
			formProperties.remove("ack");
			final String escalateValue = formProperties.getFirst("escalate");
			formProperties.remove("escalate");
			final String clearValue = formProperties.getFirst("clear");
			formProperties.remove("clear");

			final CriteriaBuilder builder = getCriteriaBuilder(formProperties, false);
    		builder.distinct();
    		builder.limit(0);
    		builder.offset(0);

    		final String ackUser = formProperties.containsKey("ackUser")? formProperties.getFirst("ackUser") : m_securityContext.getUserPrincipal().getName();

    		if(ackValue != null) {
    			final Boolean ack = Boolean.parseBoolean(ackValue);
        		for (final OnmsAlarm alarm : m_alarmDao.findMatching(builder.toCriteria())) {
        			processAlarmAck(alarm, ack, ackUser);
        		}
    		} else if (formProperties.containsKey("escalate")) {
    			final Boolean escalate = Boolean.parseBoolean(escalateValue);
        		for (final OnmsAlarm alarm : m_alarmDao.findMatching(builder.toCriteria())) {
        			processAlarmClear(alarm, escalate, ackUser);
        		}
    		} else if (formProperties.containsKey("clear")) {
    			final Boolean clear = Boolean.parseBoolean(clearValue);
        		for (final OnmsAlarm alarm : m_alarmDao.findMatching(builder.toCriteria())) {
        			processAlarmClear(alarm, clear, ackUser);
        		}
    		} else {
    			throw new IllegalArgumentException("Must supply one of the 'ack', 'escalate', or 'clear' parameters, set to either 'true' or 'false'.");
    		}
	    } finally {
	        writeUnlock();
	    }
	}

