    @GET
    @Produces({MediaType.APPLICATION_JSON})
    public String getAvailability() {
        List<String> percentageList = new ArrayList<String>();
        
        List<OnmsLocationMonitor> monitors = m_locationMonitorDao.findAll();
        Collection<OnmsApplication> applications = m_applicationDao.findAll();
        List<OnmsMonitoringLocationDefinition> locationDefinitions = m_locationMonitorDao.findAllMonitoringLocationDefinitions();
        
        if (applications.size() == 0) {
            throw new IllegalArgumentException("there are no applications");
        }
        
        List<OnmsApplication> sortedApplications = new ArrayList<OnmsApplication>(applications);
        Collections.sort(sortedApplications);
        
        Collection<OnmsLocationSpecificStatus> statusesPeriod = new HashSet<OnmsLocationSpecificStatus>();
        Date start = new GregorianCalendar(Calendar.YEAR, Calendar.MONTH, Calendar.DAY_OF_MONTH).getTime();
        Date end = new Date();
        statusesPeriod.addAll(m_locationMonitorDao.getAllStatusChangesAt(start));
        statusesPeriod.addAll(m_locationMonitorDao.getStatusChangesBetween(start, end));
        
        for(OnmsMonitoringLocationDefinition locationDefinition : locationDefinitions) {
            Collection<OnmsLocationMonitor> m = m_locationMonitorDao.findByLocationDefinition(locationDefinition);
            
            for(OnmsApplication application : sortedApplications) {
                Collection<OnmsMonitoredService> memberServices = m_monitoredServiceDao.findByApplication(application);
                Set<OnmsLocationSpecificStatus> selectedStatuses = filterStatus(statusesPeriod, monitors, memberServices);
                
                percentageList.add(calculatePercentageUptime(memberServices, selectedStatuses, start, end));
                
            }
        }
        
        return "percentageList Size: " + percentageList.size() + " sorted Applications: " + sortedApplications;
    }

