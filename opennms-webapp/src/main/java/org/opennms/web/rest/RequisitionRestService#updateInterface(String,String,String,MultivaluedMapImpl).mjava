    /**
     * Updates a specific interface
     *
     * @param foreignSource a {@link java.lang.String} object.
     * @param foreignId a {@link java.lang.String} object.
     * @param ipAddress a {@link java.lang.String} object.
     * @param params a {@link org.opennms.web.rest.MultivaluedMapImpl} object.
     * @return a {@link javax.ws.rs.core.Response} object.
     */
    @PUT
    @Path("{foreignSource}/nodes/{foreignId}/interfaces/{ipAddress}")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Transactional
    public Response updateInterface(@PathParam("foreignSource") String foreignSource, @PathParam("foreignId") String foreignId, @PathParam("ipAddress") String ipAddress, MultivaluedMapImpl params) {
        writeLock();
        try {
            Requisition req = getActiveRequisition(foreignSource);
            if (req != null) {
                RequisitionNode node = req.getNode(foreignId);
                if (node != null) {
                    RequisitionInterface iface = node.getInterface(ipAddress);
                    if (iface != null) {
                        debug("updateInterface: updating interface %s on node %s/%s", ipAddress, foreignSource, foreignId);
                        setProperties(params, iface);
                        debug("updateInterface: interface %s on node %s/%s updated", ipAddress, foreignSource, foreignId);
                        m_pendingForeignSourceRepository.save(req);
                        return Response.seeOther(m_uriInfo.getBaseUriBuilder().path(this.getClass(), "getInterfaceForNode").build(foreignSource, foreignId, ipAddress)).build();
                        // return Response.ok(node).build();
                    }
                }
            }
            return Response.notModified(foreignSource + "/" + foreignId).build();
        } finally {
            writeUnlock();
        }
    }

