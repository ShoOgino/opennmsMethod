    /**
     * Updates a specific interface
     *
     * @param foreignSource a {@link java.lang.String} object.
     * @param foreignId a {@link java.lang.String} object.
     * @param ipAddress a {@link java.lang.String} object.
     * @param params a {@link org.opennms.web.rest.MultivaluedMapImpl} object.
     * @return a {@link javax.ws.rs.core.Response} object.
     */
    @PUT
    @Path("{foreignSource}/nodes/{foreignId}/interfaces/{ipAddress}")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Transactional
    public Response updateInterface(@PathParam("foreignSource") String foreignSource, @PathParam("foreignId") String foreignId, @PathParam("ipAddress") String ipAddress, MultivaluedMapImpl params) {
        writeLock();
        try {
            debug("updateInterface: Updating interface %s on node %s/%s", ipAddress, foreignSource, foreignId);
            final Requisition req = getActiveRequisition(foreignSource, false);
            if (req == null) {
                throw getException(Response.Status.NOT_FOUND, "Foreign source '" + foreignSource + "' not found.");
            }
            final RequisitionNode node = req.getNode(foreignId);
            if (node == null) {
                throw getException(Response.Status.NOT_FOUND, "Foreign ID '" + foreignId + "' not found in foreign source '" + foreignSource + "'.");
            }
            RequisitionInterface iface = node.getInterface(ipAddress);
            if (iface == null) {
                throw getException(Response.Status.NOT_FOUND, "Unable to locate IP address '" + ipAddress + "' in " + foreignSource + ":" + foreignId + ".");
            }
            setProperties(params, iface);
            debug("updateInterface: Interface %s on node %s/%s updated", ipAddress, foreignSource, foreignId);
            m_pendingForeignSourceRepository.save(req);
            return Response.seeOther(getRedirectUri(m_uriInfo)).build();
        } finally {
            writeUnlock();
        }
    }

