    /**
     * <p>importRequisition</p>
     *
     * @param foreignSource a {@link java.lang.String} object.
     * @return a {@link javax.ws.rs.core.Response} object.
     */
    @PUT
    @Path("{foreignSource}/import")
    @Transactional
    public Response importRequisition(@PathParam("foreignSource") String foreignSource, @QueryParam("suppressOutput") Boolean suppressOutput) {
        log().debug("importing requisition for foreign source " + foreignSource);

        Requisition req = getActiveRequisition(foreignSource);
        String url = getActiveUrl(foreignSource).toString();
        EventBuilder bldr = new EventBuilder(EventConstants.RELOAD_IMPORT_UEI, "Web");
        bldr.addParam(EventConstants.PARM_URL, url);
        
        try {
            m_eventProxy.send(bldr.getEvent());
        } catch (EventProxyException e) {
            throw new DataAccessResourceFailureException("Unable to send event to import group "+foreignSource, e);
        }
        
        return suppressOutput == null || suppressOutput == false ? Response.ok(req).build() : Response.ok().build();
    }

