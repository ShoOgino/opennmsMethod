    /**
     * <p>importRequisition</p>
     *
     * @param foreignSource a {@link java.lang.String} object.
     * @return a {@link javax.ws.rs.core.Response} object.
     */
    @PUT
    @Path("{foreignSource}/import")
    @Transactional
    public Response importRequisition(@PathParam("foreignSource") String foreignSource, @QueryParam("rescanExisting") Boolean rescanExisting) {
        writeLock();
        try {
            debug("importRequisition: Importing requisition for foreign source %s", foreignSource);

            m_pendingForeignSourceRepository.flush();
            m_deployedForeignSourceRepository.flush();

            final String url = getActiveUrl(foreignSource).toString();
            debug("importRequisition: Sending import event with URL %s", url);
            final EventBuilder bldr = new EventBuilder(EventConstants.RELOAD_IMPORT_UEI, "Web");
            bldr.addParam(EventConstants.PARM_URL, url);
            if (rescanExisting != null) {
                bldr.addParam(EventConstants.PARM_IMPORT_RESCAN_EXISTING, rescanExisting);
            }
            
            try {
                m_eventProxy.send(bldr.getEvent());
            } catch (final EventProxyException e) {
                throw new DataAccessResourceFailureException("Unable to send event to import group "+foreignSource, e);
            }

            return Response.seeOther(m_uriInfo.getBaseUriBuilder().path(this.getClass()).path(this.getClass(), "getRequisition").build(foreignSource)).build();
        } catch (final MalformedURLException e) {
            final DataAccessResourceFailureException exception = new DataAccessResourceFailureException("Failed to create a requisition URL for the '" + foreignSource + "' foreign source.", e);
            LogUtils.warnf(this, exception, "Unable to send event to import group %s", foreignSource);
            throw exception;
        } finally {
            writeUnlock();
        }
    }

