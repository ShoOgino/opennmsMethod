    @POST
    @Consumes(MediaType.APPLICATION_XML)
    public Response addService(@PathParam("nodeCriteria") String nodeCriteria, @PathParam("ipAddress") String ipAddress, OnmsMonitoredService service) {
        OnmsNode node = m_nodeDao.get(nodeCriteria);
        if (node == null) {
            throwException(Status.BAD_REQUEST, "addService: can't find node " + nodeCriteria);
        }
        OnmsIpInterface intf = node.getIpInterfaceByIpAddress(ipAddress);
        if (intf == null) {
            throwException(Status.BAD_REQUEST, "addService: can't find interface with ip address " + ipAddress + " for node " + nodeCriteria);
        }
        if (service == null) {
            throwException(Status.BAD_REQUEST, "addService: service object cannot be null");
        }
        if (service.getServiceName() == null) {
            throwException(Status.BAD_REQUEST, "addService: service must have a name");
        }
        OnmsServiceType serviceType = m_serviceTypeDao.findByName(service.getServiceName());
        if (serviceType == null)  {
            log().info("addService: creating service type " + service.getServiceName());
            serviceType = new OnmsServiceType(service.getServiceName());
            m_serviceTypeDao.save(serviceType);
        }
        service.setServiceType(serviceType);
        service.setIpInterface(intf);
        log().debug("addService: adding service " + service);
        m_serviceDao.save(service);
        Event e = new Event();
        e.setUei(EventConstants.NODE_GAINED_SERVICE_EVENT_UEI);
        e.setNodeid(node.getId());
        e.setInterface(intf.getIpAddress());
        e.setService(service.getServiceName());
        e.setSource(getClass().getName());
        e.setTime(EventConstants.formatToString(new java.util.Date()));
        try {
            m_eventProxy.send(e);
        } catch (EventProxyException ex) {
            throwException(Status.BAD_REQUEST, ex.getMessage());
        }
        return Response.ok().build();
    }

