    /**
     * Updates or adds a category to a node
     *
     * @param foreignSource a {@link java.lang.String} object.
     * @param foreignId a {@link java.lang.String} object.
     * @param category a {@link org.opennms.netmgt.provision.persist.requisition.RequisitionCategory} object.
     * @return a {@link javax.ws.rs.core.Response} object.
     */
    @POST
    @Path("{foreignSource}/nodes/{foreignId}/categories")
    @Consumes(MediaType.APPLICATION_XML)
    @Transactional
    public Response addOrReplaceNodeCategory(@PathParam("foreignSource") String foreignSource, @PathParam("foreignId") String foreignId, RequisitionCategory category) {
        writeLock();
        try {
            debug("addOrReplaceNodeCategory: Adding category %s to node %s/%s", category.getName(), foreignSource, foreignId);
            Requisition req = getActiveRequisition(foreignSource, true);
            if (req == null) {
                throw getException(Response.Status.NOT_FOUND, "Foreign source '" + foreignSource + "' not found.");
            }
            final RequisitionNode node = req.getNode(foreignId);
            if (node == null) {
                throw getException(Response.Status.NOT_FOUND, "Foreign ID '" + foreignId + "' not found in foreign source '" + foreignSource + "'.");
            }
            node.putCategory(category);
            m_pendingForeignSourceRepository.save(req);
            return Response.seeOther(getRedirectUri(m_uriInfo, category.getName())).build();
        } finally {
            writeUnlock();
        }
    }

