    /**
     * 
     * @param timeChunker
     * @param sortedApplications
     * @param selectedMonitors 
     * @param nodeLabel TODO
     * @param nodes TODO
     * @param selectedHost TODO
     * @param locationDefinitions
     * @return
     */
    private OnmsLocationAvailDefinitionList getAvailabilityList(TimeChunker timeChunker, List<OnmsApplication> sortedApplications, Collection<OnmsLocationMonitor> selectedMonitors, String x, Collection<OnmsNode> selectedNodes) {
        
        OnmsLocationAvailDefinitionList availList = new OnmsLocationAvailDefinitionList();
        
        List<String> names = new ArrayList<String>(sortedApplications.size());
        for(OnmsApplication app : sortedApplications) {
            names.add(app.getName());
        }
        
        Collection<OnmsLocationSpecificStatus> statusesPeriod = m_locationMonitorDao.getStatusChangesBetweenForApplications(timeChunker.getStartDate(), timeChunker.getEndDate(), names);
        
        AvailCalculator availCalc = new AvailCalculator(timeChunker);
        System.err.println(new Date() + " Before Removing unneeded");
        removeUnneededMonitors(statusesPeriod, selectedMonitors);
        removeUnneededServices(statusesPeriod, selectedNodes);
        System.err.println(new Date() + "After Removing Unneeded");
        System.err.println(new Date() + "Before add status changes");
        for(OnmsLocationSpecificStatus statusChange : statusesPeriod) {
            availCalc.onStatusChange(statusChange);
        }
        System.err.println(new Date() + "After add status changes");
        System.err.println(new Date() + "Before Calculations");
        int counter = 0;
        for(int i =0; i < timeChunker.getSegmentCount(); i++) {
            counter++;
            TimeChunk timeChunk = timeChunker.getAt(i);
            
            OnmsLocationAvailDataPoint point = new OnmsLocationAvailDataPoint();
            point.setTime(timeChunk.getEndDate());
            
            
            for(OnmsApplication application : sortedApplications) {
                
                double percentage = availCalc.getAvailabilityFor(m_monitoredServiceDao.findByApplication(application), i);
                String strPercent = new DecimalFormat("0.00").format((double) percentage);
                point.addAvailDefinition(new OnmsLocationAvailDefinition(application.getName(), strPercent));
                
            }
            
            availList.add(point);
        }
        System.err.println(new Date() + "After Calculations total loops: " + counter);
        
        return availList;
    }

