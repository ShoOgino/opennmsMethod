    /**
     * Returns the node with the foreign ID specified for the given foreign source
     *
     * @param foreignSource a {@link java.lang.String} object.
     * @param foreignId a {@link java.lang.String} object.
     * @return a {@link org.opennms.netmgt.provision.persist.requisition.RequisitionNode} object.
     * @throws java.text.ParseException if any.
     */
    @GET
    @Path("{foreignSource}/nodes/{foreignId}")
    @Produces( { MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })
    public RequisitionNode getNode(@PathParam("foreignSource") final String foreignSource, @PathParam("foreignId") final String foreignId) throws ParseException {
        readLock();
        try {
            m_pendingForeignSourceRepository.flush();
            m_deployedForeignSourceRepository.flush();

            final Requisition req = getActiveRequisition(foreignSource, false);
            if (req == null) {
                throw getException(Response.Status.NOT_FOUND, "Foreign source '" + foreignSource + "' not found.");
            }
            return req.getNode(foreignId);
        } finally {
            readUnlock();
        }
    }

