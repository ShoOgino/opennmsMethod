    /**
     * 
     * @param timeChunker
     * @param sortedApplications
     * @param selectedMonitors 
     * @param selectedHost TODO
     * @param locationDefinitions
     * @return
     */
    private OnmsLocationAvailDefinitionList getAvailabilityList(TimeChunker timeChunker, List<OnmsApplication> sortedApplications, Collection<OnmsLocationMonitor> selectedMonitors, Collection<OnmsMonitoredService> selectedServices) {
        
        OnmsLocationAvailDefinitionList availList = new OnmsLocationAvailDefinitionList();
        
        while(timeChunker.hasNext()) {
            TimeChunk timeChunk = timeChunker.getNextSegment();
            
            Collection<OnmsLocationSpecificStatus> statusesPeriod = new HashSet<OnmsLocationSpecificStatus>();
            statusesPeriod.addAll(m_locationMonitorDao.getAllStatusChangesAt(timeChunk.getStartDate()));
            statusesPeriod.addAll(m_locationMonitorDao.getStatusChangesBetween(timeChunk.getStartDate(), timeChunk.getEndDate()));
            
            OnmsLocationAvailDataPoint point = new OnmsLocationAvailDataPoint();
            point.setTime(timeChunk.getEndDate());
            
            for(OnmsApplication application : sortedApplications) {
                
                Collection<OnmsLocationMonitor> monitors;
                if(selectedMonitors != null) {
                    monitors = selectedMonitors;
                } else {
                    monitors = m_locationMonitorDao.findByApplication(application);
                }
                
                Set<OnmsLocationSpecificStatus> selectedStatuses = filterStatus(statusesPeriod, (List<OnmsLocationMonitor>) monitors, selectedServices);
                
                point.addAvailDefinition(new OnmsLocationAvailDefinition(application.getName(), calculatePercentageUptime(selectedServices, selectedStatuses, timeChunk.getStartDate(), timeChunk.getEndDate())));
                
            }
            
            availList.add(point);
        }
        
        return availList;
    }

