    /**
     * <p>forNodeId</p>
     *
     * @param nodeId a int.
     * @return a {@link org.opennms.netmgt.model.OnmsOutageCollection} object.
     */
    @GET
    @Produces({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})
    @Transactional
    @Path("forNode/{nodeId}")
    public OnmsOutageCollection forNodeId(@PathParam("nodeId") int nodeId) {
        MultivaluedMap<java.lang.String,java.lang.String> params=m_uriInfo.getQueryParameters();
        OnmsCriteria criteria=new OnmsCriteria(OnmsOutage.class);

        setLimitOffset(params, criteria);
        addOrdering(params, criteria, false);
        addFiltersToCriteria(params, criteria, OnmsOutage.class);

        criteria.createAlias("monitoredService", "monitoredService");
        criteria.createAlias("monitoredService.ipInterface", "ipInterface");
        criteria.createAlias("monitoredService.ipInterface.node", "node");
        criteria.createAlias("monitoredService.serviceType", "serviceType");

        NodeFilter node = new NodeFilter(nodeId, m_servletContext);
        criteria.add(node.getCriterion());

        Date d = new Date(System.currentTimeMillis() - (60 * 60 * 24 * 7));
        RecentOutagesFilter recent = new RecentOutagesFilter(d);
        criteria.add(recent.getCriterion());

        return new OnmsOutageCollection(m_outageDao.findMatching(getDistinctIdCriteria(OnmsOutage.class, criteria)));
    }

