    @GET
    @Produces({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON, MediaType.APPLICATION_ATOM_XML})
    public OnmsUserList getUsers() {
        final OnmsUserList list;
        readLock();
        try {
            list = m_userManager.getOnmsUserList();
            final List<OnmsUser> users = new ArrayList<OnmsUser>(list.getUsers());
            Collections.sort(users, new Comparator<OnmsUser>() {
                @Override
                public int compare(final OnmsUser a, final OnmsUser b) {
                    return a.getUsername().compareTo(b.getUsername());
                }
            });
            for (OnmsUser eachUser : users) {
                eachUser.setPasswordSalted(false);
                eachUser.setPassword(null);
            }
            list.setUsers(users);
            return list;
        } catch (final Throwable t) {
            throw getException(Status.BAD_REQUEST, t);
        } finally {
            readUnlock();
        }
    }

