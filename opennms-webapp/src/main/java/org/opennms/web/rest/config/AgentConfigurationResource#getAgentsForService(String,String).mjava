    @GET
    @Path("{filterName}/{serviceName}")
    @Produces({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON, MediaType.APPLICATION_ATOM_XML})
    public Response getAgentsForService(@PathParam("filterName") final String filterName, @PathParam("serviceName") final String serviceName) throws ConfigurationResourceException {
        LOG.debug("getAgentsForService(): filterName={}, serviceName={}", filterName, serviceName);

        if (filterName == null || serviceName == null) {
            throw new IllegalArgumentException("You must specify a filter name and service name!");
        }

        final Filter filter = m_collectdConfigurationResource.get().getFilter(filterName);
        if (filter == null) {
            LOG.warn("No filter matching {} could be found.", filterName);
            return Response.status(404).build();
        }

        final List<InetAddress> addresses = m_filterDao.getActiveIPAddressList(filter.getContent());
        LOG.debug("Matched {} IP addresses for filter {}", addresses == null? 0 : addresses.size(), filterName);

        if (addresses == null || addresses.size() == 0) {
            return Response.noContent().build();
        }

        final CriteriaBuilder builder = new CriteriaBuilder(OnmsMonitoredService.class);
        builder.createAlias("ipInterface", "iface");
        builder.createAlias("serviceType", "type");
        builder.in("iface.ipAddress", addresses);
        builder.eq("type.name", serviceName);
        final List<OnmsMonitoredService> services = m_monitoredServiceDao.findMatching(builder.toCriteria());
        int defaultPort = 161;

        // TODO: We shouldn't have to hardcode like this; what's the right way to know the port to return?
        if (serviceName.equals("SNMP")) {
            defaultPort = m_snmpConfigDao.getDefaults().getPort();
        } else {
            final CollectdConfiguration collectdConfiguration = m_collectdConfigurationResource.get();
            org.opennms.netmgt.config.collectd.Package pack = collectdConfiguration.getPackage(filterName);
            if (pack == null) {
                for (final org.opennms.netmgt.config.collectd.Package p : collectdConfiguration.getPackages()) {
                    if (filterName.equals(p.getFilter().getName())) {
                        pack = p;
                        break;
                    }
                }
            }
            if (pack != null) {
                final Service svc = pack.getService(serviceName);
                final String port = svc.getParameter("port");
                if (port != null) {
                    try {
                        defaultPort = Integer.valueOf(port);
                    } catch (final NumberFormatException e) {
                        LOG.debug("Unable to turn port {} from service {} into a number.", port, serviceName);
                    }
                }
            }
        }

        final AgentResponseList responses = new AgentResponseList();

        for (final OnmsMonitoredService service : services) {
            final InetAddress ipAddress = service.getIpAddress();

            int port = defaultPort;
            if ("SNMP".equals(serviceName)) {
                final SnmpAgentConfig config = m_snmpConfigDao.getAgentConfig(ipAddress);
                if (config != null) {
                    port = config.getPort();
                }
            }

            responses.add(new AgentResponse(ipAddress, port, service.getServiceName()));
        }

        return Response.ok(responses).build();
    }

