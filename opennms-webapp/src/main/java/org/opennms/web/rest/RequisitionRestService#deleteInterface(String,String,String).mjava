    /**
     * <p>deleteInterface</p>
     *
     * @param foreignSource a {@link java.lang.String} object.
     * @param foreignId a {@link java.lang.String} object.
     * @param ipAddress a {@link java.lang.String} object.
     * @return a {@link javax.ws.rs.core.Response} object.
     */
    @DELETE
    @Path("{foreignSource}/nodes/{foreignId}/interfaces/{ipAddress}")
    @Transactional
    public Response deleteInterface(@PathParam("foreignSource") String foreignSource, @PathParam("foreignId") String foreignId, @PathParam("ipAddress") String ipAddress) {
        writeLock();
        try {
            debug("deleteInterface: Deleting interface %s from node %s/%s", ipAddress, foreignSource, foreignId);
            Requisition req = getActiveRequisition(foreignSource, false);
            if (req == null) {
                throw getException(Response.Status.NOT_FOUND, "Foreign source '" + foreignSource + "' not found.");
            }
            final RequisitionNode node = req.getNode(foreignId);
            if (node == null) {
                throw getException(Response.Status.NOT_FOUND, "Foreign ID '" + foreignId + "' not found in foreign source '" + foreignSource + "'.");
            }
            if (node.deleteInterface(ipAddress)) {
                m_pendingForeignSourceRepository.save(req);
                return Response.ok().build();
            } else {
                return Response.notModified().build();
            }
        } finally {
            writeUnlock();
        }
    }

