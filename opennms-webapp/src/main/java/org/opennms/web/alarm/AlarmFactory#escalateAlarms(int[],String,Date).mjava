    /**
     * Escalate a list of alarms.  The username and time are currently discarded, but
     * are required for future use.
     */
    public static void escalateAlarms(int[] alarmIds, String user, Date time) throws SQLException {
        if (alarmIds == null || user == null || time == null) {
            throw new IllegalArgumentException("Cannot take null parameters.");
        }

        if (alarmIds.length > 0) {
            StringBuffer update = new StringBuffer("UPDATE ALARMS SET SEVERITY = (");
            update.append("CASE WHEN SEVERITY =? THEN ?");
            update.append(" ELSE (");
            update.append("  CASE WHEN SEVERITY <? THEN SEVERITY + 1");
            update.append("  ELSE ? END)");
            update.append(" END),");
            update.append(" ALARMTYPE =?");
            update.append(" WHERE ALARMID IN (");
            update.append(alarmIds[0]);

            for (int i = 1; i < alarmIds.length; i++) {
                update.append(",");
                update.append(alarmIds[i]);
            }

            update.append(")");
            update.append(" AND ( (");
            update.append("  ALARMTYPE =? AND");
            update.append("  SEVERITY =?");
            update.append(" ) OR (");
            update.append("  ALARMTYPE =? AND");
            update.append("  SEVERITY >? AND");
            update.append("  SEVERITY <=?");
            update.append(" ) )");

            Connection conn = Vault.getDbConnection();
            
            if (log().isDebugEnabled()) {
            	log().debug("escalateAlarms: built query |" + update.toString() + "|");
            }

            try {
                PreparedStatement stmt = conn.prepareStatement(update.toString());
                stmt.setInt(1, OnmsAlarm.CLEARED_SEVERITY);
                stmt.setInt(2, OnmsAlarm.WARNING_SEVERITY);
                stmt.setInt(3, OnmsAlarm.CRITICAL_SEVERITY);
                stmt.setInt(4, OnmsAlarm.CRITICAL_SEVERITY);
                stmt.setInt(5, OnmsAlarm.PROBLEM_TYPE);
                stmt.setInt(6, OnmsAlarm.RESOLUTION_TYPE);
                stmt.setInt(7, OnmsAlarm.CLEARED_SEVERITY);
                stmt.setInt(8, OnmsAlarm.PROBLEM_TYPE);
                stmt.setInt(9, OnmsAlarm.NORMAL_SEVERITY);
                stmt.setInt(10, OnmsAlarm.CRITICAL_SEVERITY);

                stmt.executeUpdate();
                stmt.close();
            } finally {
                Vault.releaseDbConnection(conn);
            }
        }
    }

