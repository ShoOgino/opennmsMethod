    /**
     * Create an alarm that represents a real network alarm with all the
     * parameters.
     */
    public Alarm(int id, String uei, String dpName, Integer nodeID, String ipAddr, Integer serviceID, String reductionKey, int count, int severityId, int lastEventID, Date firsteventtime, Date lasteventtime, String description, String logMessage, String operatorInstruction, String troubleTicket, TroubleTicketState troubleTicketState, String mouseOverText, Date suppressedUntil, String suppressedUser, Date suppressedTime, String acknowledgeUser, Date acknowledgeTime, String parms, String nodeLabel, String serviceName) {

        if (uei == null || dpName == null || lasteventtime == null || firsteventtime == null ) {
            throw new IllegalArgumentException("Cannot take null values for the following parameters: uei, dpName, firsteventtime, lasteventtime.");
        }

        // required fields
        this.id = id;
        this.uei = uei;
        this.dpName = dpName;
        this.lasteventtime = lasteventtime;
        this.firsteventtime = firsteventtime;
	this.count = count;
        this.severity = Severity.getById(severityId);

        // optional fields
    	this.nodeID = nodeID;
	this.ipAddr = ipAddr;
	this.serviceID = serviceID;
	this.reductionKey = reductionKey;
	this.lastEventID = lastEventID;
	this.description = description;
	this.logMessage = logMessage;
	this.operatorInstruction = operatorInstruction;
	this.troubleTicket = troubleTicket;
	this.troubleTicketState = troubleTicketState;
	this.mouseOverText = mouseOverText;
	this.suppressedUntil = suppressedUntil;
	this.suppressedUser = suppressedUser;
	this.suppressedTime = suppressedTime;
	this.acknowledgeUser = acknowledgeUser;
	this.acknowledgeTime = acknowledgeTime;
        this.parms = parms;
        this.nodeLabel = nodeLabel;
        this.serviceName = serviceName;

    }

