    /**
     * Convenience method for translating a <code>java.sql.ResultSet</code>
     * containing event information into an array of <code>Alarm</code>
     * objects.
     *
     * @param rs a {@link java.sql.ResultSet} object.
     * @return an array of {@link org.opennms.web.alarm.Alarm} objects.
     * @throws java.sql.SQLException if any.
     */
    protected static Alarm[] rs2Alarms(ResultSet rs) throws SQLException {
        Vector<Alarm> vector = new Vector<Alarm>();

        while (rs.next()) {
            Alarm alarm = new Alarm();

            alarm.id = rs.getInt("alarmID");

            alarm.uei = rs.getString("eventUei");

            alarm.dpName = rs.getString("dpName");

            // node id can be null, in which case nodeID will be 0
            alarm.nodeID = new Integer(rs.getInt("nodeID"));

            alarm.ipAddr = rs.getString("ipAddr");

            // This causes serviceID to be null if the column in the database is null
            alarm.serviceID = ((Integer) rs.getObject("serviceID"));

            alarm.reductionKey = rs.getString("reductionKey");

            alarm.count = rs.getInt("counter");

            alarm.severity = OnmsSeverity.get(rs.getInt("severity"));

            alarm.lastEventID = rs.getInt("lastEventID");

            alarm.firsteventtime = new Date(rs.getTimestamp("firsteventtime").getTime());

            alarm.lasteventtime = new Date(rs.getTimestamp("lasteventtime").getTime());

            alarm.description = rs.getString("description");

            alarm.logMessage = rs.getString("logmsg");

            alarm.operatorInstruction = rs.getString("OperInstruct");

            alarm.troubleTicket = rs.getString("TTicketID");
            
            Integer stateCode = (Integer) rs.getObject("TTicketState");
            for (TroubleTicketState state : TroubleTicketState.values()) {
                if (stateCode != null && state.ordinal() == stateCode.intValue()) {
                    alarm.troubleTicketState = state;
                }
            }

            alarm.mouseOverText = rs.getString("MouseOverText");

            alarm.suppressedUntil = new Date(rs.getTimestamp("suppressedUntil").getTime());

            alarm.suppressedUser = rs.getString("suppressedUser");

            alarm.suppressedTime = new Date(rs.getTimestamp("suppressedTime").getTime());

            alarm.acknowledgeUser = rs.getString("alarmAckUser");

            Timestamp alarmAckTime = rs.getTimestamp("alarmAckTime");
            if (alarmAckTime != null) {
                alarm.acknowledgeTime = new Date(alarmAckTime.getTime());
            }

            alarm.stickyNote = rs.getString("stickyNote");
            alarm.stickyNoteCreate = rs.getTimestamp("stickyNoteCreate");
            alarm.stickyNoteUpdate = rs.getTime("stickyNoteUpdate");
            alarm.stickyNoteUser = rs.getString("stickyNoteUser");
            
            alarm.nodeLabel = rs.getString("nodeLabel");

            alarm.serviceName = rs.getString("serviceName");

            vector.addElement(alarm);
        }

        return vector.toArray(new Alarm[vector.size()]);
    }

