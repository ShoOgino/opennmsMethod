    /**
     * Return all alarms (optionally only unacknowledged alarms) sorted by time
     * that have the given distributed poller.
     *
     * @param poller a {@link java.lang.String} object.
     * @param includeAcknowledged a boolean.
     * @return an array of {@link org.opennms.web.alarm.Alarm} objects.
     * @throws java.sql.SQLException if any.
     */
    public static Alarm[] getAlarmsForPoller(String poller, boolean includeAcknowledged) throws SQLException {
        if (poller == null) {
            throw new IllegalArgumentException("Cannot take null parameters.");
        }

        Alarm[] alarms = null;

        final DBUtils d = new DBUtils(AlarmFactory.class);
        try {
            Connection conn = Vault.getDbConnection();
            d.watch(conn);
            StringBuffer select = new StringBuffer("SELECT * FROM ALARMS WHERE DPNAME=?");

            if (!includeAcknowledged) {
                select.append(" AND ALARMACKUSER IS NULL");
            }

            select.append(" AND ALARMDISPLAY='Y' ");
            select.append(" ORDER BY ALARMID DESC");

            PreparedStatement stmt = conn.prepareStatement(select.toString());
            d.watch(stmt);
            stmt.setString(1, poller);
            ResultSet rs = stmt.executeQuery();
            d.watch(rs);

            alarms = rs2Alarms(rs);
        } finally {
            d.cleanUp();
        }

        return alarms;
    }

