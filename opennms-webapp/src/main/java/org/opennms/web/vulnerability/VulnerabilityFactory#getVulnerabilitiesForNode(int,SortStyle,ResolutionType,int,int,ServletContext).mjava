    /**
     * Return some maximum number of vulnerabilities or less sorted by the given
     * sort style for the given node.
     *
     * @param throttle
     *            a value less than one means no throttling
     * @param nodeId a int.
     * @param sortStyle a {@link org.opennms.web.vulnerability.VulnerabilityFactory.SortStyle} object.
     * @param resType a {@link org.opennms.web.vulnerability.VulnerabilityFactory.ResolutionType} object.
     * @param offset a int.
     * @return an array of {@link org.opennms.web.vulnerability.Vulnerability} objects.
     * @throws java.sql.SQLException if any.
     */
    public static Vulnerability[] getVulnerabilitiesForNode(int nodeId, SortStyle sortStyle, ResolutionType resType, int throttle, int offset, ServletContext servletContext) throws SQLException {
        if (sortStyle == null || resType == null) {
            throw new IllegalArgumentException("Cannot take null parameters.");
        }

        Filter[] filters = new Filter[] { new NodeFilter(nodeId, servletContext) };
        return (VulnerabilityFactory.getVulnerabilities(sortStyle, resType, filters, throttle, offset));
    }

