    /**
     * Parses the query string to determine what types of filters to use (for
     * example, what to filter on or sort by), then does the database query
     * (through the VulnerabilityFactory) and then forwards the results to a JSP
     * for display.
     * 
     * <p>
     * Sets the <em>vuls</em> and <em>parms</em> request attributes for the
     * forwardee JSP (or whatever gets called).
     * </p>
     */
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        // handle the style sort parameter
        String sortStyleString = request.getParameter("sortby");
        VulnerabilityFactory.SortStyle sortStyle = DEFAULT_SORT_STYLE;
        if (sortStyleString != null) {
            Object temp = VulnerabilityUtil.getSortStyle(sortStyleString);
            if (temp != null) {
                sortStyle = (VulnerabilityFactory.SortStyle) temp;
            }
        }

        // handle the acknowledgement type parameter
        String resTypeString = request.getParameter("restype");
        VulnerabilityFactory.ResolutionType resType = DEFAULT_RESOLUTION_TYPE;
        if (resTypeString != null) {
            Object temp = VulnerabilityUtil.getResolutionType(resTypeString);
            if (temp != null) {
                resType = (VulnerabilityFactory.ResolutionType) temp;
            }
        }

        // handle the filter parameters
        String[] filterStrings = request.getParameterValues("filter");
        List<Filter> filterArray = new ArrayList<Filter>();
        if (filterStrings != null) {
            for (int i = 0; i < filterStrings.length; i++) {
                Filter filter = VulnerabilityUtil.getFilter(filterStrings[i]);
                if (filter != null) {
                    filterArray.add(filter);
                }
            }
        }

        // handle the optional limit parameter
        String limitString = request.getParameter("limit");
        int limit = DEFAULT_LIMIT;

        if (limitString != null) {
            try {
                int newlimit = WebSecurityUtils.safeParseInt(limitString);
                if (newlimit > 0) {
                    limit = newlimit;
                }
            } catch (NumberFormatException e) {
                // do nothing, the default is aready set
            }
        }

        // handle the optional multiple parameter
        String multipleString = request.getParameter("multiple");
        int multiple = DEFAULT_MULTIPLE;
        if (multipleString != null) {
            try {
                multiple = Math.max(0, WebSecurityUtils.safeParseInt(multipleString));
            } catch (NumberFormatException e) {
            }
        }

        try {
            // put the parameters in a convenient struct
            VulnerabilityQueryParms parms = new VulnerabilityQueryParms();
            parms.sortStyle = sortStyle;
            parms.resType = resType;
            parms.filters = filterArray;
            parms.limit = limit;
            parms.multiple = multiple;

            // query the vulnerabilities with the new filters array
            Vulnerability[] vuls = VulnerabilityFactory.getVulnerabilities(sortStyle, resType, parms.getFilters(), limit, multiple * limit);

            // add the necessary data to the request so the
            // JSP (or whatever gets called) can create the view correctly
            request.setAttribute("vuls", vuls);
            request.setAttribute("parms", parms);

            // forward the request for proper display
            RequestDispatcher dispatcher = this.getServletContext().getRequestDispatcher("/vulnerability/list.jsp");
            dispatcher.forward(request, response);
        } catch (SQLException e) {
            throw new ServletException("", e);
        }
    }

