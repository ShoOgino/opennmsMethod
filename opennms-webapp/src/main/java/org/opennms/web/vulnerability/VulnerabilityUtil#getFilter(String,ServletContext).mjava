    /**
     * <p>getFilter</p>
     *
     * @param filterString a {@link java.lang.String} object.
     * @return a {@link org.opennms.web.vulnerability.filter.Filter} object.
     */
    public static Filter getFilter(String filterString, ServletContext servletContext) {
        if (filterString == null) {
            throw new IllegalArgumentException("Cannot take null parameters.");
        }

        Filter filter = null;

        StringTokenizer tokens = new StringTokenizer(filterString, "=");
        String type;
        String value;
        try {
            type = tokens.nextToken();
            value = tokens.nextToken();
        } catch (NoSuchElementException e) {
            throw new IllegalArgumentException("Could not tokenize filter string: " + filterString);
        }

        if (type.equals(SeverityFilter.TYPE)) {
            filter = new SeverityFilter(WebSecurityUtils.safeParseInt(value));
        } else if (type.equals(NodeFilter.TYPE)) {
            filter = new NodeFilter(WebSecurityUtils.safeParseInt(value), servletContext);
        } else if (type.equals(NodeNameLikeFilter.TYPE)) {
            filter = new NodeNameLikeFilter(value);
        } else if (type.equals(InterfaceFilter.TYPE)) {
            filter = new InterfaceFilter(value);
        } else if (type.equals(NegativeSeverityFilter.TYPE)) {
            filter = new NegativeSeverityFilter(WebSecurityUtils.safeParseInt(value));
        } else if (type.equals(NegativeNodeFilter.TYPE)) {
            filter = new NegativeNodeFilter(WebSecurityUtils.safeParseInt(value), servletContext);
        } else if (type.equals(NegativeInterfaceFilter.TYPE)) {
            filter = new NegativeInterfaceFilter(value);
        } else if (type.equals(IPLikeFilter.TYPE)) {
            filter = new IPLikeFilter(value);
        } else if (type.equals(ProtocolFilter.TYPE)) {
            filter = new ProtocolFilter(value);
        } else if (type.equals(NegativeProtocolFilter.TYPE)) {
            filter = new NegativeProtocolFilter(value);
        } else if (type.equals(PortFilter.TYPE)) {
            filter = new PortFilter(WebSecurityUtils.safeParseInt(value));
        } else if (type.equals(NegativePortFilter.TYPE)) {
            filter = new NegativePortFilter(WebSecurityUtils.safeParseInt(value));
        } else if (type.equals(CreationDateBeforeFilter.TYPE)) {
            filter = new CreationDateBeforeFilter(WebSecurityUtils.safeParseLong(value));
        } else if (type.equals(CreationDateAfterFilter.TYPE)) {
            filter = new CreationDateAfterFilter(WebSecurityUtils.safeParseLong(value));
        } else if (type.equals(ResolvedDateBeforeFilter.TYPE)) {
            filter = new ResolvedDateBeforeFilter(WebSecurityUtils.safeParseLong(value));
        } else if (type.equals(ResolvedDateAfterFilter.TYPE)) {
            filter = new ResolvedDateAfterFilter(WebSecurityUtils.safeParseLong(value));
        }

        /*
         * else if( type.equals( ServiceFilter.TYPE )) { filter = new
         * ServiceFilter( WebSecurityUtils.safeParseInt( value )); } else if( type.equals(
         * NegativeServiceFilter.TYPE )) { filter = new NegativeServiceFilter(
         * WebSecurityUtils.safeParseInt( value )); } else if( type.equals(
         * LogMessageSubstringFilter.TYPE )) { filter = new
         * LogMessageSubstringFilter( value ); } else if( type.equals(
         * LogMessageMatchesAnyFilter.TYPE )) { filter = new
         * LogMessageMatchesAnyFilter(value); }
         */

        return filter;
    }

