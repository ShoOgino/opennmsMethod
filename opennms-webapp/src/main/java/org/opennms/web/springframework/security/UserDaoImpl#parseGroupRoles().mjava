    /**
     * Parses the groups.xml file into mapping roles to users of that role
     * through group membership.
     */
    private Map<String, LinkedList<String>> parseGroupRoles()
            throws DataRetrievalFailureException {
        long lastModified = new File(m_groupsConfigurationFile).lastModified();
        
        try {
            GroupFactory.init();
        } catch (Exception e) {
            throw new DataRetrievalFailureException("Error reading groups configuration file '" + m_groupsConfigurationFile + "': " + e.getMessage(), e);
        }
        GroupManager gm = GroupFactory.getInstance();
        Map<String, LinkedList<String>> roleMap = new HashMap<String, LinkedList<String>>();

        Collection<Role> roles = gm.getRoles();
        for (Role role : roles) {
            String groupname = role.getMembershipGroup();
            String securityRole = Authentication.getSpringSecuirtyRoleFromOldRoleName(role.getName());
            if (securityRole != null) {
                List<String> users;
                try {
                    users = gm.getGroup(groupname).getUserCollection();
                } catch (Exception e) {
                    throw new DataRetrievalFailureException("Error reading groups configuration file '" + m_groupsConfigurationFile + "': " + e.getMessage(), e);
                }

                for (String user : users) {
                    if (roleMap.get(user) == null) {
                        roleMap.put(user, new LinkedList<String>());
                    }
                    LinkedList<String> userRoleList = roleMap.get(user);
                    userRoleList.add(securityRole);
                }
            }
        }

        log().debug("Loaded roles from groups.xml file for " + roleMap.size() + " users");

        m_groupsLastModified = lastModified;

        return roleMap;
    }

