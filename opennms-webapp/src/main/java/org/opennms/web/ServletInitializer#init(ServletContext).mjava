    /**
     * Initialize servlet and JSP configuration on the first invocation of this
     * method. All other invocations are ignored. This method is synchronized to
     * ensure only the first invocation performs the initialization.
     * 
     * <p>
     * Call this method in the <code>init</code> method of your servlet or
     * JSP. It will read the servlet initialization parameters from the
     * <code>ServletConfig</code> and <code>ServletContext</code> and
     * OpenNMS configuration files.
     * </p>
     * 
     * <p>
     * If this method finds the property <code>opennms.db.poolman</code> in
     * the <code>ServletContext</code>, it will create an instance of the
     * classname specified there to use as the <code>DbConnectionManager</code>.
     * </p>
     * 
     * @param context
     *            the <code>ServletContext</code> instance in which your
     *            servlet is running
     */
    public synchronized static void init(ServletContext context) throws ServletException {
        if (context == null) {
            throw new IllegalArgumentException("Cannot take null parameters.");
        }

        // all ThreadCategory instances in the WebUI should use this as their
        // category prefix
        ThreadCategory.setPrefix("OpenNMS.WEB");

        if (factory == null) {
            try {
                Properties properties = new Properties(System.getProperties());

                // first, check if opennms.home is set, if so, we already have properties
                // because we're in Jetty
                String homeDir = properties.getProperty("opennms.home");
                if (homeDir == null) {

                    // If not, load properties from configuration.properties
                    String propertiesResource = "/WEB-INF/configuration.properties";

                    InputStream configurationStream = context.getResourceAsStream(propertiesResource);
                    if (configurationStream == null) {
                        throw new ServletException("Could not load properties from resource '" + propertiesResource + "'");
                    } else {
                        properties.load(configurationStream);
                        configurationStream.close();
                    }
                    
                }
                
                homeDir = properties.getProperty("opennms.home");
                if (homeDir == null) {
                    throw new ServletException("The opennms.home context parameter must be set.");
                }
                String etcDir = homeDir + File.separator + "etc";

                // now that we've got opennms.home, load $OPENNMS_HOME/etc/opennms.properties
                // in case it isn't-- but if anything is already set, we don't override it.
                
                Properties opennmsProperties = new Properties();
                InputStream configurationStream = new FileInputStream(etcDir + File.separator + "opennms.properties");
                opennmsProperties.load(configurationStream);
                configurationStream.close();

                for (Enumeration<Object> opennmsKeys = opennmsProperties.keys(); opennmsKeys.hasMoreElements(); ) {
                    Object key = opennmsKeys.nextElement();
                    if (!properties.containsKey(key)) {
                        properties.put(key, opennmsProperties.get(key));
                    }
                }
                
                Enumeration<?> initParamNames = context.getInitParameterNames();
                while (initParamNames.hasMoreElements()) {
                    String name = (String)initParamNames.nextElement();
                    properties.put(name, context.getInitParameter(name));
                }

                Vault.setProperties(properties);
                Vault.setHomeDir(homeDir);

                // get the database parameters
                String dbUrl = properties.getProperty("opennms.db.url");
                String dbDriver = properties.getProperty("opennms.db.driver");
                String username = properties.getProperty("opennms.db.user");
                String password = properties.getProperty("opennms.db.password");

                // set the database connection pool manager (if one is set in
                // the context)
                String dbMgrClass = properties.getProperty("opennms.db.poolman");

                if (dbMgrClass != null) {
                    Class<?> clazz = Class.forName(dbMgrClass);
                    factory = (DbConnectionFactory) clazz.newInstance();
                    factory.init(dbUrl, dbDriver, username, password);
                    Vault.setDbConnectionFactory(factory);
                }
            } catch (ClassNotFoundException e) {
                throw new ServletException("Could not find the opennms.db.poolman class", e);
            } catch (InstantiationException e) {
                throw new ServletException("Could not instantiate the opennms.db.poolman class", e);
            } catch (IllegalAccessException e) {
                throw new ServletException("Could not instantiate the opennms.db.poolman class", e);
            } catch (SQLException e) {
                throw new ServletException("Could not initialize a database connection pool", e);
            } catch (IOException e) {
                throw new ServletException("Could not load configuration.properties", e);
            }
        }
    }

