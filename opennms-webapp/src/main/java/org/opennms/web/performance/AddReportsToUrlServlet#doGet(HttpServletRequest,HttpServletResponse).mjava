    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String[] requiredParameters = new String[] {
                "node",
                "resourceType"
        };
        
        // required parameter node
        String nodeIdString = request.getParameter("node");
        if (nodeIdString == null) {;
            throw new MissingParameterException("node", requiredParameters);
        }
        
        String resourceTypeName = request.getParameter("resourceType");
        if (resourceTypeName == null) {
            throw new MissingParameterException("resourceType",
                                                requiredParameters);
        }
        
        GraphResourceType resourceType = m_model.getResourceTypeByName(resourceTypeName);

        // optional parameter resource
        String resourceName = request.getParameter("resource");
        if (resourceName == null) {
            resourceName = "";
        }
        
        int nodeId = Integer.parseInt(nodeIdString);
        
        GraphResource resource = m_model.getResourceForNodeResourceResourceType(nodeId, resourceName, resourceTypeName);
        Set<GraphAttribute> attributes = resource.getAttributes();

        // In this block of code, it is possible to end up with an empty
        // list of queries. This will result in a somewhat cryptic
        // "Missing parameter" message on the results.jsp page and will
        // probably be changed soon to a nicer error message.


        /*
        PrefabGraph[] queries = null;
        queries = m_model.getQueriesByResourceTypeAttributes(resourceTypeName, attributes);
        String[] queryNames = new String[queries.length];

        for (int i = 0; i < queries.length; i++) {
            queryNames[i] = queries[i].getName();
        }
        */
        
        List<PrefabGraph> queries =
            resourceType.getAvailablePrefabGraphs(attributes);
        List<String> queryNames = new ArrayList<String>(queries.size());
        for (PrefabGraph query : queries) {
            queryNames.add(query.getName());
        }


        Map additions = new HashMap();
        additions.put("reports", queryNames.toArray(new String[queryNames.size()]));
        additions.put("type", "performance");
        additions.put("resourceType", resourceTypeName);
        String queryString = Util.makeQueryString(request, additions);

        response.sendRedirect(Util.calculateUrlBase(request) + "graph/results?"
			      + queryString);
    }

