    /**
     * <p>addPollerInfo</p>
     *
     * @param bPolled a {@link java.lang.String} object.
     * @param name a {@link java.lang.String} object.
     * @param port a {@link java.lang.String} object.
     * @param user a {@link java.lang.String} object.
     * @param protocol a {@link java.lang.String} object.
     * @param response a {@link javax.servlet.http.HttpServletResponse} object.
     * @param request a {@link javax.servlet.http.HttpServletRequest} object.
     * @throws javax.servlet.ServletException if any.
     * @throws java.io.IOException if any.
     */
    private boolean addPollerInfo(PollerConfiguration pollerConfig, org.opennms.netmgt.config.poller.Package pkg, Properties props, String bPolled, String name, String port, String user, String protocol, HttpServletResponse response, HttpServletRequest request) throws ServletException, IOException {
        // Check to see if the name is duplicate of the already specified names
        // first.
        for (Service svc : pkg.getServices()) {
            if (svc.getName().equals(name)) {
                response.sendRedirect(Util.calculateUrlBase(request, "admin/error.jsp?error=1&name=" + name));
                return false;
            }
        }

        if (pkg != null) {
            Service newService = new Service();
            newService.setName(name);
            if (bPolled != null) {
                newService.setStatus(bPolled);
            } else {
                newService.setStatus("off");
            }
            newService.setName(name);
            newService.setUserDefined("true");

            Collection<Monitor> monitorColl = pollerConfig.getMonitors();
            Monitor newMonitor = new Monitor();
            String monitor = (String) props.get("service." + protocol + ".monitor");
            if (monitor != null) {
                newMonitor.setService(name);
                newMonitor.setClassName(monitor);
            } else {
                response.sendRedirect(Util.calculateUrlBase(request, "admin/error.jsp?error=0&name=" + "service." + protocol + ".monitor"));
                return false;
            }

            if (props.get("interval") != null) {
                newService.setInterval((new Long((String) props.get("interval"))).longValue());
            } else {
                newService.setInterval(300000);
            }

            org.opennms.netmgt.config.poller.Parameter newprop = new org.opennms.netmgt.config.poller.Parameter();
            String timeout = "3000";
            if (props.get("timeout") != null) {
                timeout = (String) props.get("timeout");
            }
            newprop.setValue(timeout);
            newprop.setKey("timeout");
            newService.addParameter(newprop);

            newprop = new org.opennms.netmgt.config.poller.Parameter();
            String banner = "*";
            if (props.get("banner") != null) {
                banner = (String) props.get("banner");
            }
            newprop.setValue(banner);
            newprop.setKey("banner");
            newService.addParameter(newprop);

            newprop = new org.opennms.netmgt.config.poller.Parameter();
            String retry = "3";
            if (props.get("retry") != null) {
                retry = (String) props.get("retry");
            }
            newprop.setValue(retry);
            newprop.setKey("retry");
            newService.addParameter(newprop);

            newprop = new org.opennms.netmgt.config.poller.Parameter();
            if (port == null || port.equals("")) {
                if (props.get("service." + protocol + ".port") == null || ((String) props.get("service." + protocol + ".port")).equals("")) {
                    newMonitor = null;
                    newService = null;
                    response.sendRedirect(Util.calculateUrlBase(request, "admin/error.jsp?error=0&name=" + "service." + protocol + ".port"));
                    return false;
                } else {
                    port = (String) props.get("service." + protocol + ".port");
                }
            }

            newprop.setValue(port);
            if (port.indexOf(':') != -1) {
                newprop.setKey("ports");
            } else { 
                newprop.setKey("port");
            }
            if (newMonitor != null && newService != null) {
                final List<Monitor> monitors = pollerConfig.getMonitors();
                if (monitorColl == null) {
                    monitors.add(0, newMonitor);
                } else {
                    monitors.add(newMonitor);
                }
                pollerConfig.setMonitors(monitors);
                newService.addParameter(newprop);
                pkg.addService(newService);
            }
        }
        return true;
    }

