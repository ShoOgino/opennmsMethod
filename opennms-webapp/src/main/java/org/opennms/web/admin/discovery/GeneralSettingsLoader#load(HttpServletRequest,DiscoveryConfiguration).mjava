	/**
	 * <p>load</p>
	 *
	 * @param request a {@link javax.servlet.http.HttpServletRequest} object.
	 * @param config a {@link org.opennms.netmgt.config.discovery.DiscoveryConfiguration} object.
	 * @return a {@link org.opennms.netmgt.config.discovery.DiscoveryConfiguration} object.
	 */
	public static DiscoveryConfiguration load(HttpServletRequest request, DiscoveryConfiguration config){
		String initSTStr = request.getParameter("initialsleeptime");
		String restartSTStr = request.getParameter("restartsleeptime");
		String foreignSource = request.getParameter("foreignsource");
		String location = request.getParameter("location");
		String retriesStr = request.getParameter("retries");
		String timeoutStr = request.getParameter("timeout");
		String chunksizeStr = request.getParameter("chunksize");
		
		LOG.debug("initialsleeptime: {}", initSTStr);
		LOG.debug("restartsleeptime: {}", restartSTStr);
		LOG.debug("foreignSource: {}", foreignSource);
		LOG.debug("location: {}", location);
		LOG.debug("retries: {}", retriesStr);
		LOG.debug("timeout: {}", timeoutStr);
		LOG.debug("chunksize: {}", chunksizeStr);
		
		
		long initSt = WebSecurityUtils.safeParseLong(initSTStr);
		long restartSt = WebSecurityUtils.safeParseLong(restartSTStr);
		
		config.setInitialSleepTime(initSt);
		config.setRestartSleepTime(restartSt);

		//set the general settings loaded into current configuration

		config.setInitialSleepTime(initSt);
		config.setRestartSleepTime(restartSt);

		// TODO: Validate foreign source value
		if (foreignSource != null && !"".equals(foreignSource.trim())) {
			config.setForeignSource(foreignSource);
		} else {
			config.setForeignSource(null);
		}

		// TODO: Validate location value
		if (location != null && !"".equals(location.trim())) {
			config.setLocation(location);
		} else {
			config.setLocation(null);
		}
		
		if (retriesStr!=null && (!"".equals(retriesStr.trim()) && !String.valueOf(DiscoveryConfigFactory.DEFAULT_RETRIES).equals(retriesStr.trim()))) {
			config.setRetries(WebSecurityUtils.safeParseInt(retriesStr));
		} else {
			config.deleteRetries();
		}
		
		if (timeoutStr!=null && (!"".equals(timeoutStr.trim()) && !String.valueOf(DiscoveryConfigFactory.DEFAULT_TIMEOUT).equals(timeoutStr.trim()))) {
			config.setTimeout(Long.valueOf(timeoutStr).longValue());
		} else {
			config.deleteTimeout();
		}
		
		if (chunksizeStr!=null && (!"".equals(chunksizeStr.trim()) && !String.valueOf(DiscoveryConfigFactory.DEFAULT_CHUNK_SIZE).equals(chunksizeStr.trim()))) {
			config.setChunkSize(Integer.valueOf(chunksizeStr));
		} else {
			config.deleteChunkSize();
		}
		
		LOG.debug("General settings uploaded.");
		
		return config;
	}

