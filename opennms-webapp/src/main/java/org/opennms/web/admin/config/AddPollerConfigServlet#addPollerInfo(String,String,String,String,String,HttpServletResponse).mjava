    public void addPollerInfo(String bPolled, String name, String port, String user, String protocol, HttpServletResponse response) throws ServletException, IOException {
        // Check to see if the name is duplicate of the already specified names
        // first.
        Collection tmpPollers = pkg.getServiceCollection();
        Iterator iter = tmpPollers.iterator();
        while (iter.hasNext()) {
            Service svc = (Service) iter.next();
            if (svc.getName().equals(name)) {
                errorflag = true;
                response.sendRedirect("error.jsp?error=1&name=" + name);
                log().info(name + " already exists");
                return;
                // throw new ServletException ("Service name " + name + " is
                // already defined.. Try assigning another unique name");
            }
        }

        if (pkg != null) {
            Service newService = new Service();
            newService.setName(name);
            if (bPolled != null)
                newService.setStatus(bPolled);
            else
                newService.setStatus("off");
            newService.setName(name);
            newService.setUserDefined("true");

            Collection monitorColl = pollerConfig.getMonitorCollection();
            Monitor newMonitor = new Monitor();
            String monitor = (String) props.get("service." + protocol + ".monitor");
            if (monitor != null) {
                newMonitor.setService(name);
                newMonitor.setClassName(monitor);
                if (monitorColl != null)
                    monitorColl.add(newMonitor);
            } else {
                errorflag = true;
                response.sendRedirect("error.jsp?error=0&name=" + "service." + protocol + ".monitor ");
                return;
            }

            if (props.get("interval") != null)
                newService.setInterval((new Long((String) props.get("interval"))).longValue());
            else
                newService.setInterval(300000);

            org.opennms.netmgt.config.poller.Parameter newprop = new org.opennms.netmgt.config.poller.Parameter();
            String timeout = "3000";
            if (props.get("timeout") != null) {
                timeout = (String) props.get("timeout");
            }
            newprop.setValue(timeout);
            newprop.setKey("timeout");
            newService.addParameter(newprop);

            newprop = new org.opennms.netmgt.config.poller.Parameter();
            String banner = "*";
            if (props.get("banner") != null)
                banner = (String) props.get("banner");
            newprop.setValue(banner);
            newprop.setKey("banner");
            newService.addParameter(newprop);

            newprop = new org.opennms.netmgt.config.poller.Parameter();
            String retry = "3";
            if (props.get("retry") != null)
                retry = (String) props.get("retry");
            newprop.setValue(retry);
            newprop.setKey("retry");
            newService.addParameter(newprop);

            newprop = new org.opennms.netmgt.config.poller.Parameter();
            if (port == null || port.equals("")) {
                if (props.get("service." + protocol + ".port") == null || ((String) props.get("service." + protocol + ".port")).equals("")) {
                    errorflag = true;
                    response.sendRedirect("error.jsp?error=0&name=" + "service." + protocol + ".port");
                    return;
                } else
                    port = (String) props.get("service." + protocol + ".port");

            }

            newprop.setValue(port);
            if (port.indexOf(":") != -1)
                newprop.setKey("ports");
            else
                newprop.setKey("port");
            newService.addParameter(newprop);
            pkg.addService(newService);
        }
    }

