    /** {@inheritDoc} */
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String firstIPAddress = request.getParameter("firstIPAddress");
        String lastIPAddress = request.getParameter("lastIPAddress");
        String communityString = request.getParameter("communityString");
        String timeout = request.getParameter("timeout");
        String version = request.getParameter("version");
        String retryCount = request.getParameter("retryCount");
        String port = request.getParameter("port");
        if (log.isDebugEnabled())
            log.debug("doPost: firstIPAddress=" + firstIPAddress + ", "
                      + "lastIPAddress=" + lastIPAddress + ", and "
                      + "communityString=" + communityString);

        
        
        Event newEvent = new Event();
        newEvent.setUei(EventConstants.CONFIGURE_SNMP_EVENT_UEI);
        newEvent.setSource("web ui");
        newEvent.setTime(EventConstants.formatToString(new java.util.Date()));
        newEvent.setService("SNMP");
        newEvent.setInterface(firstIPAddress);
        
        EventBuilder builder = new EventBuilder(newEvent);
        builder.addParam(EventConstants.PARM_FIRST_IP_ADDRESS, firstIPAddress);
        builder.addParam(EventConstants.PARM_LAST_IP_ADDRESS, lastIPAddress);
        builder.addParam(EventConstants.PARM_COMMUNITY_STRING, communityString);
        
        if ( timeout.length() > 0) {
        	builder.addParam(EventConstants.PARM_TIMEOUT, timeout);
        }
        if ( port.length() > 0 ) {
        	builder.addParam(EventConstants.PARM_PORT, port);
        }
        if ( retryCount.length() > 0 ) {
        	builder.addParam(EventConstants.PARM_RETRY_COUNT, retryCount);
        }
        if ( version.length() > 0 ) {
        	builder.addParam(EventConstants.PARM_VERSION, version);
        }
        try {
        	EventProxy eventProxy = Util.createEventProxy();
        	if (eventProxy != null) {
        		eventProxy.send(builder.getEvent());
        	} else {
        		throw new ServletException("Event proxy object is null, unable to send event " + newEvent.getUei());
        	}
        } catch (Exception e) {
        	throw new ServletException("Could not send event " + newEvent.getUei(), e);
        }

        // forward the request for proper display
        RequestDispatcher dispatcher = this.getServletContext().getRequestDispatcher("/admin/snmpConfigured.jsp");
        dispatcher.forward(request, response);
    }

