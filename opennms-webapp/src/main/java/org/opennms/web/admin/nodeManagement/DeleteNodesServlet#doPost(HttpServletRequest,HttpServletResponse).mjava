    /** {@inheritDoc} */
    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        List<Integer> nodeList = getList(request.getParameterValues("nodeCheck"));
        List<Integer> nodeDataList = getList(request.getParameterValues("nodeData"));

        for (Integer nodeId : nodeDataList) {
            // Get a list of response time IP address lists
            List<String> ipAddrs = getIpAddrsForNode(nodeId);

            ResourcePath nodeSnmpPath = new ResourcePath(
                    ResourceTypeUtils.SNMP_DIRECTORY,
                    Integer.toString(nodeId)
            );

            if (m_resourceStorageDao.exists(nodeSnmpPath)) {
                LOG.debug("Attempting to delete node data directory: {}", nodeSnmpPath);
                if (m_resourceStorageDao.delete(nodeSnmpPath)) {
                    LOG.info("Node SNMP data directory deleted successfully: {}", nodeSnmpPath);
                } else {
                    LOG.warn("Node SNMP data directory *not* deleted successfully: {}", nodeSnmpPath);
                }
            }

            // Response time RRD directories
            for (String ipAddr : ipAddrs) {
                ResourcePath ifResponseTimePath = new ResourcePath(
                        ResourceTypeUtils.RESPONSE_DIRECTORY,
                        ipAddr
                );

                if (m_resourceStorageDao.exists(ifResponseTimePath)) {
                    LOG.debug("Attempting to delete node response time data directory: {}", ifResponseTimePath);
                    if (m_resourceStorageDao.delete(ifResponseTimePath)) {
                        LOG.info("Node response time data directory deleted successfully: {}", ifResponseTimePath);
                    } else {
                        LOG.warn("Node response time data directory *not* deleted successfully: {}", ifResponseTimePath);
                    }
                }
            }
        }

        // Now, tell capsd to delete the node from the database
        for (Integer nodeId : nodeList) {
            sendDeleteNodeEvent(nodeId);
            LOG.debug("End of delete of node {}", nodeId);
        }

        // forward the request for proper display
        RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/admin/deleteNodesFinish.jsp");
        dispatcher.forward(request, response);
    }

