    /**
     * This method saves the list of users to the specified file
     * 
     * @throws XMLWriteException
     *             if the save failed
     */
    protected void saveDocument(Collection users) throws XMLWriteException {
        Element root = m_document.createElement("userinfo");
        m_document.appendChild(root);

        // write the header
        XMLHeader header = new XMLHeader(getVersion(), m_document);
        root.appendChild(header.getHeaderElement());

        // if there are any users print them out
        if (users.size() > 0) {
            Element usersElement = addEmptyElement(root, "users");

            Object usersArray[] = users.toArray();
            for (int i = 0; i < usersArray.length; i++) {
                User curUser = (User) usersArray[i];

                Element curUserElement = addEmptyElement(usersElement, "user");

                addDataElement(curUserElement, "userID", curUser.getUserId());

                if (curUser.getFullName() != null && !curUser.getFullName().equals("")) {
                    addDataElement(curUserElement, "fullname", curUser.getFullName());
                }

                if (curUser.getUserComments() != null && !curUser.getUserComments().equals("")) {
                    addDataElement(curUserElement, "userComments", curUser.getUserComments());
                }

                addDataElement(curUserElement, "password", curUser.getPassword());

                // write out the notification info if there is any
                NotificationInfo info = curUser.getNotificationInfo();

                if (!info.getEmail().equals("")) {
                    addDataElement(curUserElement, "email", info.getEmail());
                }

                if (!info.getPagerEmail().equals("")) {
                    addDataElement(curUserElement, "pemail", info.getPagerEmail());
                }

                if (!info.getXMPPAddress().equals("")) {
                	addDataElement(curUserElement, "xmppAddress", info.getXMPPAddress());
                }
                
                if (!info.getNumericalService().equals("") || !info.getNumericalPin().equals("")) {
                    Element numElement = addEmptyElement(curUserElement, "numericService");

                    if (!info.getNumericalService().equals("")) {
                        addDataElement(numElement, "name", info.getNumericalService());
                    }
                    if (!info.getNumericalPin().equals("")) {
                        addDataElement(numElement, "pin", info.getNumericalPin());
                    }
                }

                if (!info.getTextService().equals("") || !info.getTextPin().equals("")) {
                    Element textElement = addEmptyElement(curUserElement, "textService");

                    if (!info.getTextService().equals("")) {
                        addDataElement(textElement, "name", info.getTextService());
                    }
                    if (!info.getTextPin().equals("")) {
                        addDataElement(textElement, "pin", info.getTextPin());
                    }
                }

                if (info.getDutyScheduleCount() > 0) {
                    Element dutyElement = addEmptyElement(curUserElement, "dutySchedules");

                    for(DutySchedule dutySchedule : info.getDutySchedules()) {
                        addDataElement(dutyElement, "schedule", dutySchedule.toString());
                    }
                }
            }
        }

        serializeToFile();
    }

