    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String user_id = request.getRemoteUser();

        PollerConfiguration pollerConfig = null;
        CapsdConfiguration capsdConfig = null;
        Map<String, Service> pollerServices = new HashMap<String, Service>();
        Map<String, ProtocolPlugin> capsdProtocols = new HashMap<String, ProtocolPlugin>();
        List<ProtocolPlugin> capsdColl = new ArrayList<ProtocolPlugin>();
        Properties props = new Properties();
        org.opennms.netmgt.config.poller.Package firstPackage;

        try {
            props.load(new FileInputStream(ConfigFileConstants.getFile(ConfigFileConstants.POLLER_CONF_FILE_NAME)));
            PollerConfigFactory.init();
            PollerConfig pollerFactory = PollerConfigFactory.getInstance();
            pollerConfig = pollerFactory.getConfiguration();

            if (pollerConfig == null) {
                // response.sendRedirect( "error.jsp?error=2");
                throw new ServletException("Poller configuration file is empty");
            }
            CapsdConfigFactory.init();
            CapsdConfig capsdFactory = CapsdConfigFactory.getInstance();
            capsdConfig = capsdFactory.getConfiguration();

            if (capsdConfig == null) {
                // response.sendRedirect( "error.jsp?error=3");
                throw new ServletException("Capsd configuration file is empty");
            }
        } catch (Throwable e) {
            throw new ServletException(e.getMessage());
        }

        pollerServices = new HashMap<String, Service>();
        Collection<org.opennms.netmgt.config.poller.Package> packageColl = pollerConfig.getPackageCollection();
        if (packageColl != null && packageColl.size() > 0) {
            firstPackage = packageColl.iterator().next();
            for (org.opennms.netmgt.config.poller.Package pkg : packageColl) {
                for(Service svcProp : pkg.getServiceCollection()) {
                    pollerServices.put(svcProp.getName(), svcProp);
                }
            }
        } else {
            throw new ServletException("Poller configuration file contains no packages.");
        }
        Collection<ProtocolPlugin> pluginColl = capsdConfig.getProtocolPluginCollection();
        if (pluginColl != null) {
            for (ProtocolPlugin plugin : pluginColl) {
                capsdColl.add(plugin);
                capsdProtocols.put(plugin.getProtocol(), plugin);
            }
        }
        String redirectSuccess = getServletConfig().getInitParameter("redirect.success");
        if (redirectSuccess == null) {
            throw new ServletException("Missing required init parameter: redirect.success");
        }

        {
            String check1 = request.getParameter("check1");
            String name1 = request.getParameter("name1");
            String protoArray1 = request.getParameter("protArray1");
            String port1 = request.getParameter("port1");

            List<String> checkedList = new ArrayList<String>();
            if (name1 != null && !name1.equals("")) {
                if (!addPollerInfo(pollerConfig, firstPackage, props, check1, name1, port1, user_id, protoArray1, response, request)) {
                    return;
                }
                checkedList.add(name1);
                if (addCapsdInfo(capsdConfig, firstPackage, props, name1, port1, user_id, protoArray1, response, request)) {
                    props.setProperty("service." + name1 + ".protocol", protoArray1);
                } else {
                    return;
                }
            }

            props.store(new FileOutputStream(ConfigFileConstants.getFile(ConfigFileConstants.POLLER_CONF_FILE_NAME)), null);
            Writer poller_fileWriter = new OutputStreamWriter(new FileOutputStream(ConfigFileConstants.getFile(ConfigFileConstants.POLLER_CONFIG_FILE_NAME)), "UTF-8");
            Writer capsd_fileWriter = new OutputStreamWriter(new FileOutputStream(ConfigFileConstants.getFile(ConfigFileConstants.CAPSD_CONFIG_FILE_NAME)), "UTF-8");
            try {
                Marshaller.marshal(pollerConfig, poller_fileWriter);
                Marshaller.marshal(capsdConfig, capsd_fileWriter);
            } catch (MarshalException e) {
                throw new ServletException(e);
            } catch (ValidationException e) {
                throw new ServletException(e);
            }
        }
        response.sendRedirect(redirectSuccess);
    }

