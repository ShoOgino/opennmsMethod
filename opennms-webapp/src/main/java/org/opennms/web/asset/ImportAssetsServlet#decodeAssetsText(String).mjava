    public List<Asset> decodeAssetsText(String text) {
        List<Asset> list = new ArrayList<Asset>();

        List<String> lines = this.splitfields(text, "\r\n", -1);
        int lineCount = lines.size();

        for (int i = 0; i < lineCount; i++) {
            String line = lines.get(i);
            List<String> tokens = this.splitfields(line, ",", -1);

            try {
                if (tokens.size() != 39) {
                    throw new NoSuchElementException();
                }

                Asset asset = new Asset();

                // ignore tokens.get(0) = node label (for display only)
                asset.setNodeId(WebSecurityUtils.safeParseInt((String) tokens.get(1)));
                asset.setCategory(Util.decode((String) tokens.get(2)));
                asset.setManufacturer(Util.decode((String) tokens.get(3)));
                asset.setVendor(Util.decode((String) tokens.get(4)));
                asset.setModelNumber(Util.decode((String) tokens.get(5)));
                asset.setSerialNumber(Util.decode((String) tokens.get(6)));
                asset.setDescription(Util.decode((String) tokens.get(7)));
                asset.setCircuitId(Util.decode((String) tokens.get(8)));
                asset.setAssetNumber(Util.decode((String) tokens.get(9)));
                asset.setOperatingSystem(Util.decode((String) tokens.get(10)));
                asset.setRack(Util.decode((String) tokens.get(11)));
                asset.setSlot(Util.decode((String) tokens.get(12)));
                asset.setPort(Util.decode((String) tokens.get(13)));
                asset.setRegion(Util.decode((String) tokens.get(14)));
                asset.setDivision(Util.decode((String) tokens.get(15)));
                asset.setDepartment(Util.decode((String) tokens.get(16)));
                asset.setAddress1(Util.decode((String) tokens.get(17)));
                asset.setAddress2(Util.decode((String) tokens.get(18)));
                asset.setCity(Util.decode((String) tokens.get(19)));
                asset.setState(Util.decode((String) tokens.get(20)));
                asset.setZip(Util.decode((String) tokens.get(21)));
                asset.setBuilding(Util.decode((String) tokens.get(22)));
                asset.setFloor(Util.decode((String) tokens.get(23)));
                asset.setRoom(Util.decode((String) tokens.get(24)));
                asset.setVendorPhone(Util.decode((String) tokens.get(25)));
                asset.setVendorFax(Util.decode((String) tokens.get(26)));
                asset.setDateInstalled(Util.decode((String) tokens.get(27)));
                asset.setLease(Util.decode((String) tokens.get(28)));
                asset.setLeaseExpires(Util.decode((String) tokens.get(29)));
                asset.setSupportPhone(Util.decode((String) tokens.get(30)));
                asset.setMaintContract(Util.decode((String) tokens.get(31)));
                asset.setVendorAssetNumber(Util.decode((String) tokens.get(32)));
                asset.setMaintContractExpires(Util.decode((String) tokens.get(33)));
                asset.setDisplayCategory(Util.decode((String) tokens.get(34)));
                asset.setNotifyCategory(Util.decode((String) tokens.get(35)));
                asset.setPollerCategory(Util.decode((String) tokens.get(36)));
                asset.setThresholdCategory(Util.decode((String) tokens.get(37)));
                asset.setComments(Util.decode((String) tokens.get(38)));

                list.add(asset);
            } catch (NoSuchElementException e) {
                this.log("Ignoring malformed import on line " + i + ", not enough values");
            } catch (NumberFormatException e) {
                this.log("Ignoring malformed import on line " + i + ", node id not a number");
            }
        }

        return list;
    }

