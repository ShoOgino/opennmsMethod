    /**
     * <p>searchAssets</p>
     *
     * @param columnName a {@link java.lang.String} object.
     * @param searchText a {@link java.lang.String} object.
     * @return an array of {@link org.opennms.web.asset.AssetModel.MatchingAsset} objects.
     * @throws java.sql.SQLException if any.
     */
    public static MatchingAsset[] searchAssets(String columnName, String searchText) throws SQLException {
        Assert.notNull(columnName, "argument columnName cannot be null");
        Assert.notNull(searchText, "argument searchText cannot be null");

        /* 
         * TODO: delete this test soon.
         * The category column is used in the search and but is not in the
         * s_columns static var.  This breaks the WebUI.
         */
        // Assert.isTrue(isColumnValid(columnName), "Column \"" + columnName + "\" is not a valid column name");
        
        List<MatchingAsset> list = new ArrayList<MatchingAsset>();

        columnName = WebSecurityUtils.sanitizeDbColumnName(columnName);

        final DBUtils d = new DBUtils(AssetModel.class);
        try {
            Connection conn = DataSourceFactory.getInstance().getConnection();
            d.watch(conn);
            PreparedStatement stmt = conn.prepareStatement("SELECT ASSETS.NODEID, NODE.NODELABEL, ASSETS." + columnName + " FROM ASSETS, NODE WHERE LOWER(ASSETS." + columnName + ") LIKE ? AND ASSETS.NODEID=NODE.NODEID ORDER BY NODE.NODELABEL");
            d.watch(stmt);
            stmt.setString(1, "%" + searchText.toLowerCase() + "%");

            ResultSet rs = stmt.executeQuery();
            d.watch(rs);

            while (rs.next()) {
                MatchingAsset asset = new MatchingAsset();

                asset.nodeId = rs.getInt("nodeID");
                asset.nodeLabel = rs.getString("nodelabel");
                asset.matchingValue = rs.getString(columnName);
                asset.columnSearched = columnName;

                list.add(asset);
            }
        } finally {
            d.cleanUp();
        }
        
        return list.toArray(new MatchingAsset[list.size()]);
    }

