    public static MatchingAsset[] searchAssets(String columnName, String searchText) throws SQLException {
        if (columnName == null || searchText == null) {
            throw new IllegalArgumentException("Cannot take null parameters.");
        }

        //TODO: delete this test soon.
        //the category column is used in the search and but is not in the
        //s_columns static var.  This breaks the WebUI.
/*        if (!isColumnValid(columnName)) {
            throw new IllegalArgumentException("Column \"" + columnName
                + "\" is not a valid column name");
        }
*/
        MatchingAsset[] assets = new MatchingAsset[0];
        Connection conn = Vault.getDbConnection();
        Vector vector = new Vector();

        try {
            PreparedStatement stmt = conn.prepareStatement("SELECT ASSETS.NODEID, NODE.NODELABEL, ASSETS." + columnName + " FROM ASSETS, NODE WHERE LOWER(ASSETS." + columnName + ") LIKE ? AND ASSETS.NODEID=NODE.NODEID ORDER BY NODE.NODELABEL");
            stmt.setString(1, "%" + searchText.toLowerCase() + "%");

            ResultSet rs = stmt.executeQuery();

            while (rs.next()) {
                MatchingAsset asset = new MatchingAsset();

                Object element = new Integer(rs.getInt("nodeID"));
                asset.nodeId = ((Integer) element).intValue();
                asset.nodeLabel = rs.getString("nodelabel");
                asset.matchingValue = rs.getString(columnName);
                asset.columnSearched = columnName;

                vector.addElement(asset);
            }

            rs.close();
            stmt.close();
        } finally {
            Vault.releaseDbConnection(conn);
        }

        assets = new MatchingAsset[vector.size()];

        for (int i = 0; i < assets.length; i++) {
            assets[i] = (MatchingAsset) vector.elementAt(i);
        }

        return (assets);
    }

