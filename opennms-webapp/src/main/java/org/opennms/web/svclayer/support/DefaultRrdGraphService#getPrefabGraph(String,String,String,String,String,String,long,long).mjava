    public InputStream getPrefabGraph(String type,
            String parentResourceType, String parentResource,
            String resourceType, String resource, String report, long start,
            long end) {
        assertPropertiesSet();

        if (type == null) {
            throw new IllegalArgumentException("type argument cannot be null");
        }
        if (parentResourceType == null) {
            throw new IllegalArgumentException("parentResourceType argument cannot be null");
        }
        if (parentResource == null) {
            throw new IllegalArgumentException("parentResource argument cannot be null");
        }
        if (resourceType == null) {
            throw new IllegalArgumentException("resourceType argument cannot be null");
        }
        if (resource == null) {
            throw new IllegalArgumentException("resource argument cannot be null");
        }
        if (report == null) {
            throw new IllegalArgumentException("report argument cannot be null");
        }
        if (end < start) {
            throw new IllegalArgumentException("end time cannot be before start time");
        }

        PrefabGraphType t = m_prefabGraphDao.findByName(type);
        if (t == null) {
            throw new IllegalArgumentException("graph type \"" + type
                                               + "\" is not valid");
        }
        
        GraphModel model = findGraphModelByName(t.getName());

        GraphResourceType rt =
            model.getResourceTypeByName(resourceType);
        
        GraphResource r = findResource(model,
                                       parentResourceType, parentResource,
                                       resourceType, resource);
        
        PrefabGraph prefabGraph = rt.getPrefabGraph(report);
        if (prefabGraph == null) {
            throw new ObjectRetrievalFailureException(PrefabGraph.class, report,
                                                      "Unknown report name '" + report + "'",
                                                      null);
        }
        
        Graph graph;
        if ("node".equals(parentResourceType)) {
            int nodeId;
            try {
                nodeId = Integer.parseInt(parentResource);
            } catch (NumberFormatException e) {
                throw new IllegalArgumentException("Could not parse parentResource '"
                                                   + parentResource + "' as an integer node ID: " + e.getMessage(), e);
            }
            graph = new Graph(model, prefabGraph, nodeId, resource, resourceType, new Date(start), new Date(end));
        } else if ("domain".equals(parentResourceType)){
            graph = new Graph(model, prefabGraph, parentResource, resource, resourceType, new Date(start), new Date(end));
        } else {
            throw new IllegalArgumentException("parentResourceType '"
                                               + parentResourceType
                                               + "' is not supported");
            
        }

        String attributePath = rt.getRelativePathForAttribute(parentResource, resource, "bogusAttribute");
        int lastSeparator = attributePath.lastIndexOf(File.separatorChar);
        String relativePropertiesPath = attributePath.substring(0, lastSeparator)
            + File.separator + "strings.properties";
        String command = getCommandNonAdhoc(t, rt, report, graph, 
                                            relativePropertiesPath);
        
        return getInputStreamForCommand(rt, command);
    }

