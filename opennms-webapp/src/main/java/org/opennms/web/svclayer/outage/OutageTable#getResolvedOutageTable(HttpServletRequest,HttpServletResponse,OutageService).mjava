    /**
     * <p>getResolvedOutageTable</p>
     *
     * @param request a {@link javax.servlet.http.HttpServletRequest} object.
     * @param reply a {@link javax.servlet.http.HttpServletResponse} object.
     * @param m_outageService a {@link org.opennms.web.svclayer.outage.OutageService} object.
     * @return a {@link java.util.Map} object.
     */
    public Map getResolvedOutageTable(HttpServletRequest request,
            HttpServletResponse reply, OutageService m_outageService) {

        Context context = new HttpServletRequestContext(request);
        LimitFactory limitFactory = new TableLimitFactory(context,
                                                          "tabledata");
        Limit limit = new TableLimit(limitFactory);

        OutagesFilteringView m_filterService = new OutagesFilteringView();

        String searchFilter = m_filterService.filterQuery(request);

        Map<String, Object> myModel = new HashMap<String, Object>();

        if (searchFilter.equals("")) {
            searchFilter = " AND 1=1 ";
        }

        Integer totalRows = m_outageService.outageResolvedCountFiltered(searchFilter);
        limit.setRowAttributes(totalRows, ROW_LIMIT);

        if (limit.getPage() == 1) {
            // no offset set
            myModel.put("rowStart", 0);
            context.setRequestAttribute("rowStart", 0);
            context.setRequestAttribute("rowEnd", ROW_LIMIT);
            myModel.put("rowEnd", ROW_LIMIT);

            if (limit.getSort().getProperty() == null) {
                foundOutages = m_outageService.getResolvedOutagesByRange(
                                                                         0,
                                                                         ROW_LIMIT,
                                                                         "iflostservice",
                                                                         "asc",
                                                                         searchFilter);

            } else {
                foundOutages = m_outageService.getResolvedOutagesByRange(
                                                                         0,
                                                                         ROW_LIMIT,
                                                                         "outages."
                                                                                 + limit.getSort().getProperty(),
                                                                         limit.getSort().getSortOrder(),
                                                                         searchFilter);

            }
            myModel.put("begin", 0);
            myModel.put("end", ROW_LIMIT);

        } else {

            Integer rowstart = null;
            Integer rowend = null;

            // quirky situation... - as we started on 0 (zero)
            rowstart = ((limit.getPage() * ROW_LIMIT + 1) - ROW_LIMIT);
            rowend = (ROW_LIMIT);
            myModel.put("begin", rowstart);
            myModel.put("end", rowend);

            if (limit.getSort().getProperty() == null) {
                foundOutages = m_outageService.getResolvedOutagesByRange(
                                                                         rowstart,
                                                                         rowend,
                                                                         "iflostservice",
                                                                         "asc",
                                                                         searchFilter);

            } else {

                foundOutages = m_outageService.getResolvedOutagesByRange(
                                                                         rowstart,
                                                                         rowend,
                                                                         "outages."
                                                                                 + limit.getSort().getProperty()
                                                                                 + ",outageid",
                                                                         limit.getSort().getSortOrder(),
                                                                         searchFilter);

            }
        }

        Collection theTable = m_cview.theTable(foundOutages);

        myModel.put("searchfilter", searchFilter);
        myModel.put("tabledata", theTable);
        myModel.put("totalRows", totalRows);
        myModel.put("suffix", request.getQueryString());

        return myModel;
    }

