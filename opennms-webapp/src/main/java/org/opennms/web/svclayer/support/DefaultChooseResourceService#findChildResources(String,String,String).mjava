    public ChooseResourceModel findChildResources(String resourceType,
            String resource, String endUrl) {
        assertProperitesSet();
        
        if (resourceType == null) {
            throw new IllegalArgumentException("resourceType parameter may not be null");
        }

        if (resource == null) {
            throw new IllegalArgumentException("resource parameter may not be null");
        }
        
        if (endUrl == null) {
            throw new IllegalArgumentException("endUrl parameter may not be null");
        }

        ChooseResourceModel model = new ChooseResourceModel();
        model.setEndUrl(endUrl);

        if ("node".equals(resourceType)) {
            int nodeId;
            try {
                nodeId = Integer.parseInt(resource);
            } catch (NumberFormatException e) {
                throw new IllegalArgumentException("resource parameter '"
                                                   + resource + "' for "
                                                   + "resource type of node "
                                                   + "could not be parsed as "
                                                   + "an integer");
            }
            OnmsNode n = m_nodeDao.get(nodeId);
            if (n == null) {
                throw new IllegalArgumentException("could find node with a "
                                                   + "nodeId of " + nodeId);
            }
            model.setResourceTypes(m_performanceModel.getResourceForNode(nodeId));
            model.setParentResourceTypeName("node");
            model.setParentResourceTypeLabel("Node");
            model.setParentResourceName(resource);
            model.setParentResourceLabel(n.getLabel());
            model.setParentResourceLink("element/node.jsp?node=" + nodeId);
        } else if ("domain".equals(resourceType)) {
            model.setResourceTypes(m_performanceModel.getResourceForDomain(resource));
            model.setParentResourceTypeName("domain");
            model.setParentResourceTypeLabel("Domain");
            model.setParentResourceName(resource);
            model.setParentResourceLabel(resource);
            model.setParentResourceLink("graph/chooseresource.htm?parentResourceType=domain&parentResource=" + Util.encode(resource));
        } else {
            throw new IllegalArgumentException("resourceType of '"
                                               + resourceType + "' is not "
                                               + "supported. Must be one of: "
                                               + "node, domain");
        }

        return model;
    }

