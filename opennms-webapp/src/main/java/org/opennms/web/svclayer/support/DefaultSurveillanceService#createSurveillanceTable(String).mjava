    /**
     * Creates a custom table object containing intersected rows and
     * columns and categories.
     */
    public SurveillanceTable createSurveillanceTable(String surveillanceViewName) {

        View view = m_surveillanceConfigDao.getView(surveillanceViewName);
        
        final Rows rows = view.getRows();
        final Columns columns = view.getColumns();
        
        /*
         * Initialize a status table 
         */
        final SurveillanceTable statusTable = new SurveillanceTable(rows.getRowDefCount(), columns.getColumnDefCount());
        statusTable.setLabel(view.getName());
        
        List<Category> viewRowCats = new ArrayList<Category>();
        List<Category> viewColCats = new ArrayList<Category>();
        List rowDefs = rows.getRowDefCollection();
        List columnDefs = columns.getColumnDefCollection();

        /*
         * Iterate of the requested view's configuration (row's and columns) and set an aggreated status into each table
         * cell.
         */
        
        for (Iterator rowDefIter = rowDefs.iterator(); rowDefIter.hasNext();) {
            RowDef rowDef = (RowDef) rowDefIter.next();
            statusTable.setRowHeader(rowDef.getRow()-1, rowDef.getLabel());
            viewRowCats.addAll(rowDef.getCategoryCollection());
            statusTable.setNodesForRow(rowDef.getRow()-1, createNodes(viewRowCats));
            viewRowCats.removeAll(rowDef.getCategoryCollection());
        }

        for (Iterator colDefIter = columnDefs.iterator(); colDefIter.hasNext();) {
            ColumnDef colDef = (ColumnDef) colDefIter.next();
            viewColCats.addAll(colDef.getCategoryCollection());
            statusTable.setNodesForColumn(colDef.getCol()-1, createNodes(viewColCats));
            statusTable.setColumnHeader(colDef.getCol()-1, colDef.getLabel());
            viewColCats.removeAll(colDef.getCategoryCollection());
        }

        for (Iterator rowDefIter = rowDefs.iterator(); rowDefIter.hasNext();) {
            RowDef rowDef = (RowDef) rowDefIter.next();
            for (Iterator colDefIter = columnDefs.iterator(); colDefIter.hasNext();) {
                ColumnDef colDef = (ColumnDef) colDefIter.next();
                final Set<OnmsNode> intersectNodes = new HashSet<OnmsNode>(statusTable.getNodesForRow(rowDef.getRow()-1));
                intersectNodes.retainAll(statusTable.getNodesForColumn(colDef.getCol()-1));
                statusTable.setStatus(rowDef.getRow()-1, colDef.getCol()-1, createAggregateStatus(intersectNodes));

                if (statusTable.getStatus(rowDef.getRow()-1, colDef.getCol()-1).getDownEntityCount() > 0) {
                    statusTable.setRowHeader(rowDef.getRow()-1, createNodePageUrl(rowDef.getLabel()));
                    m_foundDownNode = null; //what a hack
                }
            }
                
        }
        return statusTable;
    }

