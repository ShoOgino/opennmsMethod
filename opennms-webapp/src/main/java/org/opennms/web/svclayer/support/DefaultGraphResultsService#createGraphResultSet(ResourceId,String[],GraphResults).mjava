    public GraphResultSet createGraphResultSet(ResourceId r, String[] reports, GraphResults graphResults) {
        String parentResourceType = r.getParentResourceType();
        String parentResource = r.getParentResource();
        String resourceType = r.getResourceType();
        String resource = r.getResource();
        
        GraphResourceType rt = m_performanceModel.getResourceTypeByName(resourceType);
        
        GraphResource graphResource;
        GraphModel model;
        
        GraphResultSet rs = graphResults.new GraphResultSet();

        if ("node".equals(parentResourceType)) {
            int nodeId;
            try {
                nodeId = Integer.parseInt(parentResource);
            } catch (NumberFormatException e) {
                throw new IllegalArgumentException("Could not parse parentResource parameter "
                                                   + "into an integer for a node", e);
            }

            OnmsNode n = m_nodeDao.get(nodeId);
            if (n == null) {
                throw new IllegalArgumentException("could find node with a "
                                                   + "nodeId of " + nodeId);
            }
            rs.setParentResourceLink("element/node.jsp?node=" + nodeId);
            rs.setParentResourceLabel(n.getLabel());


            graphResource =
                m_performanceModel.getResourceForNodeResourceResourceType(nodeId,
                                                                          resource,
                                                                          resourceType);
            rs.setParentResourceTypeLabel("Node");
            rs.setResourceTypeLabel(rt.getLabel());
            rs.setResourceLabel(graphResource.getLabel());

            model = rt.getModel();
        } else if ("domain".equals(parentResourceType)) {
            model = m_performanceModel;

            graphResource =
                m_performanceModel.getResourceForDomainResourceResourceType(parentResource,
                                                                            resource,
                                                                            resourceType);

            rs.setParentResourceTypeLabel("Domain");
            rs.setParentResourceLabel(parentResource);
            rs.setResourceTypeLabel("Interface");
            rs.setResourceLabel(resource);
        } else {
            throw new IllegalArgumentException("parentResourceType of '"
                                               + parentResourceType
                                               + "' is not supported.");
        }

        if (reports.length == 1 && "all".equals(reports[0])) {
            Set<GraphAttribute> attributes = graphResource.getAttributes();

            List<PrefabGraph> queries =
                rt.getAvailablePrefabGraphs(attributes);
            List<String> queryNames = new ArrayList<String>(queries.size());
            for (PrefabGraph query : queries) {
                queryNames.add(query.getName());
            }

            reports = queryNames.toArray(new String[queryNames.size()]);
        }
        
        rs.setParentResourceType(parentResourceType);
        rs.setParentResource(parentResource);
        rs.setResourceType(resourceType);
        rs.setResource(resource);

        rs.initializeGraphs(model, reports);
        
        return rs;
    }

