    public InputStream getPrefabGraph(String resourceId,
            String report, long start,
            long end) {
        if (resourceId == null) {
            throw new IllegalArgumentException("resourceId argument cannot be null");
        }
        if (report == null) {
            throw new IllegalArgumentException("report argument cannot be null");
        }
        if (end < start) {
            throw new IllegalArgumentException("end time cannot be before start time");
        }

        PrefabGraphType t = m_graphDao.findByName("performance");
        if (t == null) {
            throw new IllegalArgumentException("graph type \"" + "performance"
                                               + "\" is not valid");
        }
        
        OnmsResource r = m_resourceDao.getResourceById(resourceId);

        PrefabGraph prefabGraph = m_graphDao.getPrefabGraph(report);
        
        Graph graph = new Graph(prefabGraph, r, new Date(start), new Date(end));

        String attributePath = r.getResourceType().getRelativePathForAttribute(r.getParent().getName(), r.getName(), "bogusAttribute");
        int lastSeparator = attributePath.lastIndexOf(File.separatorChar);
        String relativePropertiesPath = attributePath.substring(0, lastSeparator)
            + File.separator + "strings.properties";
        String command = getCommandNonAdhoc(t, report, graph, 
                                            relativePropertiesPath);
        
        return getInputStreamForCommand(command);
    }

