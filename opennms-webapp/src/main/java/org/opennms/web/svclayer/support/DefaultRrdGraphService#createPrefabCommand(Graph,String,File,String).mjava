    /**
     * <p>createPrefabCommand</p>
     *
     * @param graph a {@link org.opennms.web.graph.Graph} object.
     * @param commandPrefix a {@link java.lang.String} object.
     * @param workDir a {@link java.io.File} object.
     * @param reportName a {@link java.lang.String} object.
     * @return a {@link java.lang.String} object.
     */
    protected String createPrefabCommand(Graph graph,
            String commandPrefix,
            File workDir, String reportName) {
        PrefabGraph prefabGraph = graph.getPrefabGraph();

        String[] rrds = getRrdNames(graph.getResource(), graph.getPrefabGraph().getColumns());
        
        StringBuffer buf = new StringBuffer();
        buf.append(commandPrefix);
        buf.append(" ");
        buf.append(prefabGraph.getCommand());
        String command = buf.toString();
        
        long startTime = graph.getStart().getTime();
        long endTime = graph.getEnd().getTime();
        long diffTime = endTime - startTime;
        
        /*
         * remember rrdtool wants the time in seconds, not milliseconds;
         * java.util.Date.getTime() returns milliseconds, so divide by 1000
         */
        String startTimeString = Long.toString(startTime / 1000);
        String endTimeString = Long.toString(endTime / 1000);
        String diffTimeString = Long.toString(diffTime / 1000);
        
        HashMap<String, String> translationMap = new HashMap<String, String>();
        
        for (int i = 0; i < rrds.length; i++) {
            String key = "{rrd" + (i + 1) + "}";
            translationMap.put(RE.simplePatternToFullRegularExpression(key), rrds[i]);
        }
        
        translationMap.put(RE.simplePatternToFullRegularExpression("{startTime}"), startTimeString);
        translationMap.put(RE.simplePatternToFullRegularExpression("{endTime}"), endTimeString);
        translationMap.put(RE.simplePatternToFullRegularExpression("{diffTime}"), diffTimeString);

        SimpleDateFormat fmt = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
        translationMap.put(RE.simplePatternToFullRegularExpression("{startTimeDate}"), fmt.format(new Date(startTime)).replace(":", "\\:"));
        translationMap.put(RE.simplePatternToFullRegularExpression("{endTimeDate}"), fmt.format(new Date(endTime)).replace(":", "\\:"));

        // Handle a start time with a format.
        RE stre = new RE("\\{startTime:(.+?)\\}");
        int pos = 0;
        boolean matchFail = false;
        while (stre.match(command, pos) && !matchFail) {
            String sdfPattern = stre.getParen(1);
            if (sdfPattern == null) {
              matchFail = true;
            } else {
                try {
                    fmt = new SimpleDateFormat(sdfPattern);
                    translationMap.put(RE.simplePatternToFullRegularExpression("{startTime:"+sdfPattern+"}"), fmt.format(new Date(startTime)).replace(":", "\\:"));
                } catch (IllegalArgumentException e) {
                    LogUtils.errorf(this, "Cannot parse date format '%s' for graph %s.", sdfPattern, reportName);
                }
                pos = pos + sdfPattern.length() + 1;
            }
        }

        // Handle an end time with a format
        RE etre = new RE("\\{endTime:(.+?)\\}");
        pos = 0;
        matchFail = false;
        while (etre.match(command, pos) && !matchFail) {
            String sdfPattern = etre.getParen(1);
            if (sdfPattern == null) {
              matchFail = true;
            } else {
                try {
                    fmt = new SimpleDateFormat(sdfPattern);
                    translationMap.put(RE.simplePatternToFullRegularExpression("{endTime:"+sdfPattern+"}"), fmt.format(new Date(endTime)).replace(":", "\\:"));
                } catch (IllegalArgumentException e) {
                    LogUtils.errorf(this, "Cannot parse date format '%s' for graph %s.", sdfPattern, reportName);
                }
                pos = pos + sdfPattern.length() + 1;
            }
        }

        try {
            translationMap.putAll(getTranslationsForAttributes(graph.getResource().getExternalValueAttributes(), prefabGraph.getExternalValues(), "external value attribute"));
            translationMap.putAll(getTranslationsForAttributes(graph.getResource().getStringPropertyAttributes(), prefabGraph.getPropertiesValues(), "string property attribute"));
        } catch (RuntimeException e) {
            LogUtils.errorf(this, "Invalid attributes were found on resource '%s'", graph.getResource().getId());
            throw e;
        }
        
        
        try {
            for (Map.Entry<String, String> translation : translationMap.entrySet()) {
                // replace s1 with s2
                RE re = new RE(translation.getKey());
                command = re.subst(command, translation.getValue());
            }
        } catch (RESyntaxException e) {
            throw new IllegalArgumentException("Invalid regular expression "
                                               + "syntax, check "
                                               + "rrd-properties file", e);
        }
        
        return command;
    }

