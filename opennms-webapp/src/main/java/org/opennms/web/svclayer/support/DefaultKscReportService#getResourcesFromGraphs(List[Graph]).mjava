    /** {@inheritDoc} */
    public List<OnmsResource> getResourcesFromGraphs(List<Graph> graphs) {
        Assert.notNull(graphs, "graph argument cannot be null");
        List<OnmsResource> resources = new LinkedList<OnmsResource>();
        HashMap<String, List<OnmsResource>> resourcesMap = new HashMap<String, List<OnmsResource>>();
        for(Graph graph : graphs) {
            String resourceId = getResourceIdForGraph(graph);
            
            if (resourceId != null) {
                String[] resourceParts = DefaultGraphResultsService.parseResourceId(resourceId);
                
                String parent = resourceParts[0];
                String childType = resourceParts[1];
                String childName = resourceParts[2];
                
                List<OnmsResource> resourcesForParent = resourcesMap.get(parent);
                if (resourcesForParent == null) {
                    resourcesForParent = getResourceService().getResourceListById(resourceId);
                    if (resourcesForParent == null) {
                        log().warn("getResourcesFromGraphs: no resources found for parent " + parent);
                        continue;
                    } else {
                        resourcesMap.put(parent, resourcesForParent);
                        log().debug("getResourcesFromGraphs: add resourceList to map for " + parent);
                    }
                }
                
                for (OnmsResource r : resourcesForParent) {
                    if (childType.equals(r.getResourceType().getName()) && childName.equals(r.getName())) {
                        resources.add(r);
                        log().debug("getResourcesFromGraphs: found resource in map" + r.toString());
                        break;
                    }
                }
            }
        }
        return resources;
    }

