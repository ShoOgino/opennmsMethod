    public List<OnmsResource> getResourcesFromGraphs(List<Graph> graphs) {
        Assert.notNull(graphs, "graph argument cannot be null");
        List<OnmsResource> resources = new LinkedList<OnmsResource>();
        HashMap<String, List<OnmsResource>> resourcesMap = new HashMap<String, List<OnmsResource>>();
        for(Graph graph : graphs) {
            String resourceId;
            if (graph.getResourceId() != null) {
                resourceId = graph.getResourceId();
            } else {
                String parentResourceTypeName;
                String parentResourceName;
                String resourceTypeName;
                String resourceName;
            
                if (graph.getNodeId() != null && !graph.getNodeId().equals("null")) {
                    parentResourceTypeName = "node";
                    parentResourceName = graph.getNodeId();
                } else if (graph.getDomain() != null && !graph.getDomain().equals("null")) {
                    parentResourceTypeName = "domain";
                    parentResourceName = graph.getDomain();
                } else {
                    throw new IllegalArgumentException("Graph does not have a resourceId, nodeId, or domain.");
                }
            
                String intf = graph.getInterfaceId();
                if (intf == null || "".equals(intf)) {
                    resourceTypeName = "nodeSnmp";
                    resourceName = "";
                } else {
                    resourceTypeName = "interfaceSnmp";
                    resourceName = intf;
                }
                resourceId = OnmsResource.createResourceId(parentResourceTypeName, parentResourceName, resourceTypeName, resourceName);
            }
            
            String parent = resourceId.substring(0, resourceId.indexOf("]") + 1);
            String child = resourceId.substring(resourceId.indexOf("]") + 2);
            String childType = child.substring(0, child.indexOf("["));
            String childName = child.substring(child.indexOf("[") + 1, child.indexOf("]"));
            OnmsResource resource = null;
            if (resourceId != null) {
                if (!resourcesMap.containsKey(parent)) {
                    List<OnmsResource> resourceList = getResourceService().getResourceListById(resourceId);
                    resourcesMap.put(parent, resourceList);
                    log().debug("getResourcesFromGraphs: add resourceList to map for " + parent);
                }
            
                for (OnmsResource r : resourcesMap.get(parent)) {
                    if (childType.equals(r.getResourceType().getName())
                            && childName.equals(r.getName())) {
                        resource = r;
                        log().debug("getResourcesFromGraphs: found resource in map" + r.toString());
                        break;
                    }
                }
            }
            resources.add(resource);
        }
        return resources;
    }

