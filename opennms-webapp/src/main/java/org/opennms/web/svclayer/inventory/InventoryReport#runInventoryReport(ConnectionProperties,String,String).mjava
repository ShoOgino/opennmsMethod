    public static RwsNbinventoryreport runInventoryReport(ConnectionProperties m_cp, String _date, String field){
        
        log().debug("InventoryService runNodeBaseInventoryReport Date ["+ _date +"] key [" + field + "]"); 
        boolean withKey = false;
        if (field.compareTo("")!=0){
            withKey = true;
        }

        try {
        
            //parse date
            SimpleDateFormat format = new SimpleDateFormat("yyyy/M/d");
            Date tmp_date = format.parse(_date);
            log().debug("InventoryService runNodeBaseInventoryReport date[" + tmp_date.toString() + "]"); 
            
            RwsNbinventoryreport rnbi = new RwsNbinventoryreport();
            
            //get the list of groups
            RWSResourceList groupList = RWSClientApi.getRWSResourceGroupsList(m_cp);
            List<String> groupListStr= groupList.getResource();
            Iterator<String> iterGroup = groupListStr.iterator();
            int totalGroups = 0;
            while (iterGroup.hasNext()){
                String groupName = iterGroup.next();
                GroupSet groupSet = new GroupSet(); 
                boolean groupIsEmpty = true;
                boolean groupIsIncremented = false;
                log().debug("InventoryService runNodeBaseInventoryReport group [" + groupName + "]"); 
                RWSResourceList deviceList = RWSClientApi.getRWSResourceDeviceList(m_cp, groupName);
                List<String> deviceListStr= deviceList.getResource();
                Iterator<String> iterDevice = deviceListStr.iterator();
                int totalNodes = 0;
                while (iterDevice.hasNext()){
                    groupIsEmpty = false;
                    if (!groupIsIncremented){
                        totalGroups++;
                        groupIsIncremented = true;
                    }
                    String deviceName = iterDevice.next();
                    totalNodes++;
                    log().debug("InventoryService runNodeBaseInventoryReport device [" + deviceName + "]");
                    String versionMatch="";
                    try {
                        RWSResourceList versionList = RWSClientApi.getRWSResourceConfigList(m_cp, groupName, deviceName);
                        List<String> versionListStr= versionList.getResource();
                        Iterator<String> iterVersion = versionListStr.iterator();
                        
                        RancidNode rancidNode;
                        rancidNode = RWSClientApi.getRWSRancidNodeInventory(m_cp ,groupName, deviceName);
                        
                        boolean found = false;
                        
                        while (iterVersion.hasNext() && !found)  {
                            versionMatch = iterVersion.next();
                            InventoryNode invNode = (InventoryNode)rancidNode.getNodeVersions().get(versionMatch);
                            log().debug("InventoryService runNodeBaseInventoryReport InventoryNode version[" + invNode.getVersionId() + "] date ["+invNode.getCreationDate()+"] config ["+ invNode.getConfigurationUrl() +"]"); 
                            if (tmp_date.compareTo(invNode.getCreationDate()) >  0 ) {
                                found = true;
                                log().debug("InventoryService runNodeBaseInventoryReport Date found is ["+invNode.getCreationDate()+"] version is [" + versionMatch + "]"); 
                            }
                        }
                        if (found == false) {
                            // skip device
                            log().debug("InventoryService runNodeBaseInventoryReport device has no inventory at this date["+deviceName+ "]"); 
                            continue;
                        }
                    } catch (Exception e){
                        //no inventory, skip node....
                        log().debug("InventoryService runNodeBaseInventoryReport device has no inventory ["+deviceName+ "]"); 
//                        if (!withKey){
//                            Nbisinglenode nbisn = new Nbisinglenode();
//                            nbisn.setDevicename(deviceName);
//                            nbisn.setGroupname(groupName);
//                            nbisn.setComment("No inventory associated");
//                            groupSet.addNbisinglenode(nbisn);
//                        }
                        continue;
                    }
                    if (versionMatch.compareTo("") == 0){
                        log().debug("InventoryService runNodeBaseInventoryReport device skipped ["+deviceName+ "]"); 
                        continue;
                    }
                   
                    //we have groupname devicename and version
        
                    try {
                        NodeBaseInventory nodeBaseInv = getNodeBaseInventory(m_cp, deviceName, groupName, versionMatch);
                        
                        //marshall xml and save to disk
                        log().debug("InventoryService runNodeBaseInventoryReport MARSHALL [" + deviceName + "] group ["+groupName+"] Version ["+ versionMatch +"]"); 
                        log().debug("InventoryService runNodeBaseInventoryReport data [" + nodeBaseInv.expand()); 
                               
                        
                        
                        Nbisinglenode nbisn = new Nbisinglenode();
                        boolean includeNbisn = false;
                        
                        
                        nbisn.setConfigurationurl(nodeBaseInv.getConfigurationurl());
                        nbisn.setCreationdate(nodeBaseInv.getCreationdate());
                        nbisn.setDevicename(nodeBaseInv.getDevicename());
                        nbisn.setGroupname(nodeBaseInv.getGroupname());
                        nbisn.setStatus(nodeBaseInv.getStatus());
                        nbisn.setSwconfigurationurl(nodeBaseInv.getSwconfigurationurl());
                        nbisn.setVersion(nodeBaseInv.getVersion());
            
                        List<InventoryElement2RP> ie2rpList = new ArrayList<InventoryElement2RP>();
                        Iterator<InventoryElement2> ie2rpIter = nodeBaseInv.getIe().iterator();
            
                        while (ie2rpIter.hasNext()){
                            
                            InventoryElement2RP ie2rp = new InventoryElement2RP();

                            InventoryElement2 ie2 = ie2rpIter.next();
                            Iterator<Tuple> iterTuple = ie2.getTupleList().iterator();
                            Iterator<InventoryMemory> iterMemory = ie2.getMemoryList().iterator();
                            Iterator<InventorySoftware> iterSoftware = ie2.getSoftwareList().iterator();
                            
                            while (iterTuple.hasNext()){
                                TupleRP tmp2 = new TupleRP();
                                Tuple tmp1 = iterTuple.next();
                                tmp2.setName(tmp1.getName());
                                //filter here
                                if (withKey && tmp1.getDescription().contains(field)){
                                    includeNbisn = true;
                                }
                                tmp2.setDescription(tmp1.getDescription());
                                ie2rp.addTupleRP(tmp2);
                            }
                            
                            while (iterMemory.hasNext()){
                                InventoryMemoryRP tmp3 = new InventoryMemoryRP();
                                InventoryMemory tmp1 = iterMemory.next();
                                //filter here
                                if (withKey && tmp1.getSize().contains(field)){
                                    includeNbisn = true;
                                }
                                tmp3.setSize(tmp1.getSize());
                                if (withKey && tmp1.getType().contains(field)){
                                    includeNbisn = true;
                                }
                                tmp3.setType(tmp1.getType());
                                ie2rp.addInventoryMemoryRP(tmp3);
                            }
                            while (iterSoftware.hasNext()){
                                InventorySoftwareRP tmp4 = new InventorySoftwareRP();
                                InventorySoftware tmp1 = iterSoftware.next();
                                //filter here
                                if(withKey && tmp1.getType().contains(field)){
                                    includeNbisn = true;
                                }
                                tmp4.setType(tmp1.getType());
                                if(withKey && tmp1.getVersion().contains(field)){
                                    includeNbisn = true;
                                }
                                tmp4.setVersion(tmp1.getVersion());

                                ie2rp.addInventorySoftwareRP(tmp4);
                            }
                            
                            ie2rpList.add(ie2rp);
                            
                        }
                        nbisn.setInventoryElement2RP(ie2rpList);
                        // if withKey is false then include it in any case
                        // includeNbsin is true the fiels has been found
                        // data must be included
                        if(!withKey || includeNbisn){
                            groupSet.addNbisinglenode(nbisn);
                        }
                        //else skip 
                    }catch (Exception e){
                        log().debug("InventoryService runNodeBaseInventoryReport device has inventory errors ["+deviceName+ "]"); 
                        continue;

                    }
                    groupSet.setTotalNodes(totalNodes);
                }
                rnbi.addGroupSet(groupSet);
                rnbi.setTotalGroups(totalGroups);
                rnbi.setDateInventory(_date);
            }
            log().debug("InventoryService runNodeBaseInventoryReport ended");
            return rnbi;
        }
        catch (Exception e) {
            log().debug("InventoryService runNodeBaseInventoryReport has given exception "+ e.getMessage() );
            return null;
        }
    }

