    public InputStream getAdhocGraph(String resourceId, String title,
            String[] dataSources, String[] aggregateFunctions,
            String[] colors, String[] dataSourceTitles, String[] styles,
            long start, long end) {
        if (resourceId == null) {
            throw new IllegalArgumentException("resourceId argument cannot be null");
        }
        if (title == null) {
            throw new IllegalArgumentException("title argument cannot be null");
        }
        if (dataSources == null) {
            throw new IllegalArgumentException("dataSources argument cannot be null");
        }
        if (aggregateFunctions == null) {
            throw new IllegalArgumentException("aggregateFunctions argument cannot be null");
        }
        if (colors == null) {
            throw new IllegalArgumentException("colors argument cannot be null");
        }
        if (dataSourceTitles == null) {
            throw new IllegalArgumentException("dataSourceTitles argument cannot be null");
        }
        if (styles == null) {
            throw new IllegalArgumentException("styles argument cannot be null");
        }
        if (end < start) {
            throw new IllegalArgumentException("end time cannot be before start time");
        }
        
        AdhocGraphType t = m_graphDao.findAdhocByName("performance");

        OnmsResource r = m_resourceDao.getResourceById(resourceId);
        
        String command = createAdHocCommand(t,
                                  r,
                                  start, end,
                                  title,
                                  dataSources,
                                  aggregateFunctions,
                                  colors,
                                  dataSourceTitles,
                                  styles);
        
        return getInputStreamForCommand(command);
    }

