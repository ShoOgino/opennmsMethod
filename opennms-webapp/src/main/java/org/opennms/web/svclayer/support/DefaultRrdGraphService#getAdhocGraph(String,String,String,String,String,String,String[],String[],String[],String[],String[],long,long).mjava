    public InputStream getAdhocGraph(String type,
            String parentResourceType, String parentResource,
            String resourceType, String resource, String title,
            String[] dataSources, String[] aggregateFunctions,
            String[] colors, String[] dataSourceTitles, String[] styles,
            long start, long end) {
        assertPropertiesSet();
        
        if (type == null) {
            throw new IllegalArgumentException("type argument cannot be null");
        }
        if (parentResourceType == null) {
            throw new IllegalArgumentException("parentResourceType argument cannot be null");
        }
        if (parentResource == null) {
            throw new IllegalArgumentException("parentResource argument cannot be null");
        }
        if (resourceType == null) {
            throw new IllegalArgumentException("resourceType argument cannot be null");
        }
        if (resource == null) {
            throw new IllegalArgumentException("resource argument cannot be null");
        }
        if (title == null) {
            throw new IllegalArgumentException("title argument cannot be null");
        }
        if (dataSources == null) {
            throw new IllegalArgumentException("dataSources argument cannot be null");
        }
        if (aggregateFunctions == null) {
            throw new IllegalArgumentException("aggregateFunctions argument cannot be null");
        }
        if (colors == null) {
            throw new IllegalArgumentException("colors argument cannot be null");
        }
        if (dataSourceTitles == null) {
            throw new IllegalArgumentException("dataSourceTitles argument cannot be null");
        }
        if (styles == null) {
            throw new IllegalArgumentException("styles argument cannot be null");
        }
        if (end < start) {
            throw new IllegalArgumentException("end time cannot be before start time");
        }
        
        AdhocGraphType t = m_prefabGraphDao.findAdhocByName(type);
        GraphModel model = findGraphModelByName(t.getName());

        GraphResourceType rt =
            model.getResourceTypeByName(resourceType);

        GraphResource r = findResource(model,
                                       parentResourceType, parentResource,
                                       resourceType, resource);
        
        String command = createAdHocCommand(t,
                                  parentResource,
                                  rt,
                                  r,
                                  start, end,
                                  title,
                                  dataSources,
                                  aggregateFunctions,
                                  colors,
                                  dataSourceTitles,
                                  styles);
        
        return getInputStreamForCommand(rt, command);
    }

