    protected Properties loadProperties(File workDir, String propertiesFile) {
        Assert.notNull(workDir, "workDir argument cannot be null");
        Assert.notNull(propertiesFile, "propertiesFile argument cannot be null");
        
        Properties externalProperties = new Properties();
        
        File file = new File(workDir, propertiesFile);
        if (!file.exists()) {
            log().warn("loadProperties: Properties file does not exist: " + file.getAbsolutePath());
            throw new ObjectRetrievalFailureException(Properties.class, "strings.properties", "This resource does not have a string properties file: " + file.getAbsolutePath(), null);
        }
        
        FileInputStream fileInputStream = null;
        try {
            fileInputStream = new FileInputStream(file);
        } catch (IOException e) {
            String message = "loadProperties: Error opening properties file "
                + file.getAbsolutePath() + ": " + e.getMessage();
            log().warn(message, e);
            throw new DataAccessResourceFailureException(message, e);
        }

        try {
            externalProperties.load(fileInputStream);
        } catch (IOException e) {
            String message = "loadProperties: Error loading properties file "
                + file.getAbsolutePath() + ": " + e.getMessage();
            log().warn(message, e);
            throw new DataAccessResourceFailureException(message, e);
        } finally {
            try {
                if (fileInputStream != null) {
                    fileInputStream.close();
                }
            } catch (IOException e) {
                String message = 
                    "loadProperties: Error closing properties file "
                    + file.getAbsolutePath() + ": " + e.getMessage();
                log().warn(message, e);
                throw new DataAccessResourceFailureException(message, e);
            }
        }
                
        return externalProperties;
    }

