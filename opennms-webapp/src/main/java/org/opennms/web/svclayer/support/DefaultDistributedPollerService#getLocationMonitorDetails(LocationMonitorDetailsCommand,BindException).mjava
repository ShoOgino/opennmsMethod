    public LocationMonitorDetailsModel getLocationMonitorDetails(LocationMonitorDetailsCommand cmd, BindException errors) {
        LocationMonitorDetailsModel model = new LocationMonitorDetailsModel();
        model.setErrors(errors);
        
        if (errors.getErrorCount() > 0) {
            return model;
        }
        
        OnmsLocationMonitor monitor = m_locationMonitorDao.get(cmd.getMonitorId());
        
        model.setTitle(new DefaultMessageSourceResolvable("distributed.locationMonitorDetails.title"));
        
        String area = "";
        OnmsMonitoringLocationDefinition def = m_locationMonitorDao.findMonitoringLocationDefinition(monitor.getDefinitionName());
        if (def != null && def.getArea() != null) {
            area = def.getArea();
        }
                    
        String hostName = monitor.getDetails().get(HOST_NAME_KEY);
        String hostAddress = monitor.getDetails().get(HOST_ADDRESS_KEY);
        
        if (hostName == null) {
            hostName = "";
        }
        if (hostAddress == null) {
            hostAddress = "";
        }
        
        model.addMainDetail(new DefaultMessageSourceResolvable("distributed.area"), new DefaultMessageSourceResolvable(null, area));
        model.addMainDetail(new DefaultMessageSourceResolvable("distributed.definitionName"), new DefaultMessageSourceResolvable(null, monitor.getDefinitionName()));
        model.addMainDetail(new DefaultMessageSourceResolvable("distributed.id"), new DefaultMessageSourceResolvable(null, monitor.getId().toString()));
        model.addMainDetail(new DefaultMessageSourceResolvable("distributed.hostName"), new DefaultMessageSourceResolvable(null, hostName));
        model.addMainDetail(new DefaultMessageSourceResolvable("distributed.ipAddress"), new DefaultMessageSourceResolvable(null, hostAddress));
        // Localize the status
        model.addMainDetail(new DefaultMessageSourceResolvable("distributed.status"), new DefaultMessageSourceResolvable("distributed.status." + monitor.getStatus().toString()));
        model.addMainDetail(new DefaultMessageSourceResolvable("distributed.lastCheckInTime"), new DefaultMessageSourceResolvable(null, new Date(monitor.getLastCheckInTime().getTime()).toString()));
        
        model.setAdditionalDetailsTitle(new DefaultMessageSourceResolvable("distributed.locationMonitorDetails.additionalTitle"));
        List<Entry<String, String>> details = new ArrayList<Entry<String, String>>(monitor.getDetails().entrySet());
        Collections.sort(details, new Comparator<Entry<String, String>>() {
            public int compare(Entry<String, String> one, Entry<String, String> two) {
                return one.getKey().compareToIgnoreCase(two.getKey());
            }
            
        });
        for (Entry<String, String> detail : details) {
            if (!detail.getKey().equals(HOST_NAME_KEY) && !detail.getKey().equals(HOST_ADDRESS_KEY)) {
                // Localize the key, and default to the key name
                model.addAdditionalDetail(new DefaultMessageSourceResolvable(new String[] { "distributed.detail." + detail.getKey() }, detail.getKey()), new DefaultMessageSourceResolvable(null, detail.getValue()));
            }
        }

        return model;
    }

