    public RtcNodeModel getNodeList() {
        OnmsCriteria criteria = new OnmsCriteria(OnmsMonitoredService.class, "monitoredService");
        criteria.add(Restrictions.eq("monitoredService.status", "A"));
        criteria.createAlias("ipInterface", "ipInterface", CriteriaSpecification.INNER_JOIN);
        criteria.add(Restrictions.ne("ipInterface.isManaged", "D"));
        criteria.createAlias("ipInterface.node", "node", CriteriaSpecification.INNER_JOIN);
        criteria.add(Restrictions.ne("node.type", "D"));
        criteria.createAlias("serviceType", "serviceType", CriteriaSpecification.INNER_JOIN);
        criteria.createAlias("currentOutages", "currentOutages", CriteriaSpecification.LEFT_JOIN);
        criteria.addOrder(Order.asc("node.label"));
        criteria.addOrder(Order.asc("node.id"));
        criteria.addOrder(Order.asc("ipInterface.ipAddress"));
        criteria.addOrder(Order.asc("serviceType.name"));
        
        OnmsCriteria outageCriteria = new OnmsCriteria(OnmsOutage.class, "outage");
        outageCriteria.createAlias("monitoredService", "monitoredService", CriteriaSpecification.INNER_JOIN);
        outageCriteria.add(Restrictions.eq("monitoredService.status", "A"));
        outageCriteria.createAlias("monitoredService.ipInterface", "ipInterface", CriteriaSpecification.INNER_JOIN);
        outageCriteria.add(Restrictions.ne("ipInterface.isManaged", "D"));
        outageCriteria.createAlias("monitoredService.ipInterface.node", "node", CriteriaSpecification.INNER_JOIN);
        outageCriteria.add(Restrictions.ne("node.type", "D"));
        
        Date periodEnd = new Date(System.currentTimeMillis());
        Date periodStart = new Date(periodEnd.getTime() - (24 * 60 * 60 * 1000));
        
        Disjunction disjunction = Restrictions.disjunction();
        disjunction.add(Restrictions.isNull("ifRegainedService"));
        disjunction.add(Restrictions.gt("ifLostService", periodStart));
        disjunction.add(Restrictions.gt("ifRegainedService", periodStart));
        outageCriteria.add(disjunction);
        
        outageCriteria.addOrder(Order.asc("monitoredService"));
        outageCriteria.addOrder(Order.asc("ifLostService"));
        
        List<OnmsMonitoredService> services = m_monitoredServiceDao.findMatching(criteria);
        List<OnmsOutage> outages = m_outageDao.findMatching(outageCriteria);
        
        Map<OnmsMonitoredService, Long> serviceDownTime = calculateServiceDownTime(periodEnd, periodStart, outages);
        
        RtcNodeModel model = new RtcNodeModel();
        
        OnmsNode lastNode = null;
        int serviceCount = 0;
        int serviceDownCount = 0;
        long downMillisCount = 0;
        for (OnmsMonitoredService service : services) {
            if (!service.getIpInterface().getNode().equals(lastNode) && lastNode != null) {
                Double availability = calculateAvailability(serviceCount, downMillisCount);
                
                model.addNode(new RtcNodeModel.RtcNode(lastNode, serviceCount, serviceDownCount, availability));
                
                serviceCount = 0;
                serviceDownCount = 0;
                downMillisCount = 0;
            }
            
            serviceCount++;
            if (service.isDown()) {
                serviceDownCount++;
            }
            
            Long downMillis = serviceDownTime.get(service);
            if  (downMillis != null) {
                downMillisCount += downMillis;
            }
            
            lastNode = service.getIpInterface().getNode();
        }
        if (lastNode != null) {
            Double availability = calculateAvailability(serviceCount, downMillisCount);
            
            model.addNode(new RtcNodeModel.RtcNode(lastNode, serviceCount, serviceDownCount, availability));
        }
        
        return model;
    }

