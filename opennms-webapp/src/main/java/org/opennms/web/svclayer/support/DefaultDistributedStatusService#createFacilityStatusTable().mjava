    public SimpleWebTable createFacilityStatusTable() {
        SimpleWebTable table = new SimpleWebTable();
        
        Collection<OnmsMonitoringLocationDefinition> locationDefinitions =
            m_locationMonitorDao.findAllMonitoringLocationDefinitions();
        Collection<OnmsApplication> applications =
            m_applicationDao.findAll();
        
        Collection<OnmsLocationSpecificStatus> statuses =
            m_locationMonitorDao.getAllMostRecentStatusChanges();
        
        table.addColumn("Area", "simpleWebTableRowLabel");
        table.addColumn("Location", "simpleWebTableRowLabel");
        // XXX should sort by application label, first
        for (OnmsApplication application : applications) {
            table.addColumn(application.getLabel(), "simpleWebTableRowLabel");
        }
        
        // XXX should sort by area, then name, first
        for (OnmsMonitoringLocationDefinition locationDefinition : locationDefinitions) {
            OnmsLocationMonitor monitor = m_locationMonitorDao.findByLocationDefinition(locationDefinition);
            
            table.newRow();
            table.addCell(locationDefinition.getArea(), "simpleWebTableRowLabel");
            table.addCell(locationDefinition.getName(), "simpleWebTableRowLabel");
            
            for (OnmsApplication application : applications) {
                Set<PollStatus> pollStatuses = new HashSet<PollStatus>();
                for (OnmsMonitoredService service : application.getMemberServices()) {
                    for (OnmsLocationSpecificStatus status : statuses) {
                        if (status.getMonitoredService().equals(service)
                                && status.getLocationMonitor().equals(monitor)) {
                            pollStatuses.add(status.getPollResult());
                        } else {
                            pollStatuses.add(PollStatus.unknown());
                        }
                    }
                }
                
                /*
                 * XXX We aren't doing anything for warning, because we don't
                 * have a warning state available, right now.
                 */
                String status = "Normal";
                if (monitor == null || monitor.getLastCheckInTime() == null
                        || monitor.getLastCheckInTime().before(new Date(System.currentTimeMillis() - 300000))) {
                    // XXX spec says "Red", which would be Critical
                    status = "Indeterminate";
                } else {
                    for (PollStatus pollStatus : pollStatuses) {
                        if (!pollStatus.isAvailable()) {
                            status = "Critical";
                            break;
                        }
                    }
                }
                
                // XXX I really need to think about how to do the percentages
                
                table.addCell("Percentage not calculated", status,
                              createDetailsPageUrl(locationDefinition, application));
            }
        }
        
        table.newRow();
        
        return table;
    }

