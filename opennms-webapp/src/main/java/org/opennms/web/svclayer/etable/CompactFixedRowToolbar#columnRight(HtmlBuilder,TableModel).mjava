    /** {@inheritDoc} */
    @Override
	protected void columnRight(HtmlBuilder html, TableModel model) {
		boolean filterable = BuilderUtils.filterable(model);
		boolean showPagination = BuilderUtils.showPagination(model);
		boolean showExports = BuilderUtils.showExports(model);

		if (showPagination || showExports) {

			ToolbarBuilder toolbarBuilder = new ToolbarBuilder(html, model);

			html.td(4).styleClass(BuilderConstants.COMPACT_TOOLBAR_CSS).align("right").close();

			html.table(4).styleClass("normal").style("margin-bottom: 0px;").close();
			html.tr(5).close();

			if (showPagination) {
				html.td(5).close();
				toolbarBuilder.firstPageItemAsImage();
				html.tdEnd();

				html.td(5).close();
				toolbarBuilder.prevPageItemAsImage();
				html.tdEnd();

				html.td(5).close();
				toolbarBuilder.nextPageItemAsImage();
				html.tdEnd();

				html.td(5).close();
				toolbarBuilder.lastPageItemAsImage();
				html.tdEnd();

				// html.td(5).close();
				// toolbarBuilder.separator();
				// html.tdEnd();
				// Disabled the row dropdown for a fixedrow table....
				// html.td(5).close();
				// toolbarBuilder.rowsDisplayedDroplist();
				// html.tdEnd();

				// if (showExports) {
				// html.td(5).close();
				// toolbarBuilder.separator();
				// html.tdEnd();
				// }
			}

			if (showExports) {
				Iterator<Export> iterator = model.getExportHandler().getExports()
						.iterator();
				for (Iterator<Export> iter = iterator; iter.hasNext();) {
					html.td(5).close();
					Export export = iter.next();
					toolbarBuilder.exportItemAsImage(export);
					html.tdEnd();
				}
			}

			if (filterable) {
				if (showExports || showPagination) {
					html.td(5).close();
					toolbarBuilder.separator();
					html.tdEnd();
				}

				html.td(5).close();
				toolbarBuilder.filterItemAsImage();
				html.tdEnd();

				html.td(5).close();
				toolbarBuilder.clearItemAsImage();
				html.tdEnd();
			}

			html.trEnd(5);

			html.tableEnd(4);

			html.tdEnd();
		}
	}

