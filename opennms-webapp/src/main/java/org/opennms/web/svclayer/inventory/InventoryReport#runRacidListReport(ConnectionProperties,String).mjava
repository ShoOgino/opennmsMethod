    public static RwsRancidlistreport runRacidListReport(ConnectionProperties m_cp, String _date) {
        
        RwsRancidlistreport rlist = new RwsRancidlistreport();
        
        try {
            
            //parse date
            SimpleDateFormat format = new SimpleDateFormat("yyyy/M/d");
            Date tmp_date = format.parse(_date);
            log().debug("InventoryService runRacidListReport date[" + tmp_date.toString() + "]"); 
            
            RwsNbinventoryreport rnbi = new RwsNbinventoryreport();
            
            //get the list of groups
            RWSResourceList groupList = RWSClientApi.getRWSResourceGroupsList(m_cp);
            List<String> groupListStr= groupList.getResource();
            Iterator<String> iterGroup = groupListStr.iterator();
            int totalGroups = 0;
                        
            while (iterGroup.hasNext()){
                String groupName = iterGroup.next();
                GroupSet groupSet = new GroupSet(); 
                log().debug("InventoryService runRacidListReport group [" + groupName + "]"); 
                RWSResourceList deviceList = RWSClientApi.getRWSResourceDeviceList(m_cp, groupName);
                List<String> deviceListStr= deviceList.getResource();
                Iterator<String> iterDevice = deviceListStr.iterator();
                int totalNodes = 0;
                
                GroupXSet gs = new GroupXSet();
                boolean groupHasDevices = false;
                boolean groupTotalIncremented = false;
                
                while (iterDevice.hasNext()){
                    String deviceName = iterDevice.next();
                    //totalNodes++;
                    log().debug("InventoryService runRacidListReport device [" + deviceName + "]");
                    String versionMatch="";
                    try {
                        RWSResourceList versionList = RWSClientApi.getRWSResourceConfigList(m_cp, groupName, deviceName);
                        List<String> versionListStr= versionList.getResource();
                        Iterator<String> iterVersion = versionListStr.iterator();
                        
                        RancidNode rancidNode;
                        rancidNode = RWSClientApi.getRWSRancidNodeInventory(m_cp ,groupName, deviceName);
                        
                        boolean found = false;
                        
                        InventoryNode invNode = new InventoryNode(rancidNode);
                        while (iterVersion.hasNext() && !found)  {
                            versionMatch = iterVersion.next();
                            invNode = (InventoryNode)rancidNode.getNodeVersions().get(versionMatch);
                            log().debug("InventoryService runRacidListReport InventoryNode version[" + invNode.getVersionId() + "] date ["+invNode.getCreationDate()+"] config ["+ invNode.getConfigurationUrl() +"]"); 
                            if (tmp_date.compareTo(invNode.getCreationDate()) >  0 ) {
                                found = true;
                                log().debug("InventoryService runRacidListReport Date found is ["+invNode.getCreationDate()+"] version is [" + versionMatch + "]"); 
                            }
                        }
                        if (found == false) {
                            // skip device
                            log().debug("InventoryService runRacidListReport device has no inventory at this date["+deviceName+ "]"); 
                            continue;
                        } else{
                            NodeSet ns = new NodeSet();
                            ns.setDevicename(deviceName);
                            ns.setGroupname(groupName);
                            ns.setVersion(versionMatch);
                            ns.setConfigurationurl(invNode.getConfigurationUrl());
                            ns.setSwconfigurationurl(invNode.getSoftwareImageUrl());
                            ns.setStatus(rancidNode.getState());
                            
                            gs.addNodeSet(ns);
                            
                            groupHasDevices = true;
                            if (!groupTotalIncremented){
                                totalGroups++;
                                groupTotalIncremented = true;
                            }
                            totalNodes ++;
                        }
                    } catch (Exception e){
                        //no inventory, skip node....
                        log().debug("InventoryService runRacidListReport device has no inventory ["+deviceName+ "]"); 
//                        Nbisinglenode nbisn = new Nbisinglenode();
//                        nbisn.setDevicename(deviceName);
//                        nbisn.setGroupname(groupName);
//                        nbisn.setComment("No inventory associated");
//                        groupSet.addNbisinglenode(nbisn);
                        continue;
                    }
                    if (versionMatch.compareTo("") == 0){
                        log().debug("InventoryService runNodeBaseInventoryReport device skipped ["+deviceName+ "]"); 
                        continue;
                    }
                }
                if (groupHasDevices){
                    gs.setTotalNodes(totalNodes);
                    rlist.addGroupXSet(gs);
                }
            }
            rlist.setTotalGroups(totalGroups);
            return rlist;
        }
        catch (Exception e) {
            log().debug("InventoryService runNodeBaseInventoryReport has given exception "+ e.getMessage() );
            return null;
        }
    }

