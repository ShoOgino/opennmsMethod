    private OnmsCriteria getOnmsCriteria(final NotificationCriteria notificationCriteria){
        final OnmsCriteria criteria = new OnmsCriteria(OnmsNotification.class);
        criteria.createAlias("node", "node", OnmsCriteria.LEFT_JOIN);
        criteria.createAlias("serviceType", "serviceType", OnmsCriteria.LEFT_JOIN);
        
        notificationCriteria.visit(new NotificationCriteriaVisitor<RuntimeException>(){

            public void visitAckType(AcknowledgeType ackType) throws RuntimeException {
                if(ackType == AcknowledgeType.ACKNOWLEDGED) {
                    criteria.add(Restrictions.isNotNull("answeredBy"));
                } else if (ackType == AcknowledgeType.UNACKNOWLEDGED) {
                   criteria.add(Restrictions.isNull("answeredBy")); 
                }
                // AcknowledgeType.BOTH just adds no restriction
            }

            public void visitGroupBy() throws RuntimeException {
            }

            public void visitFilter(Filter filter) throws RuntimeException {
                criteria.add(filter.getCriterion());
                
            }

            public void visitLimit(int limit, int offset) throws RuntimeException {
                criteria.setMaxResults(limit);
                criteria.setFirstResult(offset);                
            }

            public void visitSortStyle(SortStyle sortStyle) throws RuntimeException {
                switch(sortStyle){
                    case USER:
                        criteria.addOrder(Order.desc("user"));
                        break;
                    case RESPONDER:
                        criteria.addOrder(Order.desc("responder"));        
                        break;
                    case PAGETIME:
                        criteria.addOrder(Order.desc("pagetime"));
                        break;
                    case RESPONDTIME:
                        criteria.addOrder(Order.desc("respondTime"));
                        break;
                    case NODE:
                        criteria.addOrder(Order.desc("nodeId"));
                        break;
                    case INTERFACE:
                        criteria.addOrder(Order.desc("interfaceId"));
                        break;
                    case SERVICE:
                        criteria.addOrder(Order.desc("serviceId"));
                        break;
                    case ID:
                        criteria.addOrder(Order.desc("notifyId"));
                        break;
                    case REVERSE_USER:
                        criteria.addOrder(Order.asc("user"));
                        break;
                    case REVERSE_RESPONDER:
                        criteria.addOrder(Order.asc("responder"));            
                        break;
                    case REVERSE_PAGETIME:
                        criteria.addOrder(Order.asc("pagetime"));
                        break;
                    case REVERSE_RESPONDTIME:
                        criteria.addOrder(Order.asc("respondTimer"));
                        break;
                    case REVERSE_NODE:
                        criteria.addOrder(Order.asc("nodeId"));
                        break;
                    case REVERSE_INTERFACE:
                        criteria.addOrder(Order.asc("interfaceId"));
                        break;
                    case REVERSE_SERVICE:
                        criteria.addOrder(Order.asc("serviceId"));
                        break;
                    case REVERSE_ID:
                        criteria.addOrder(Order.asc("notifyId"));
                        break;
                    
                }
                
            }
            
        });
        
        return criteria;
    }

