    private OnmsCriteria getOnmsCriteria(final NotificationCriteria notificationCriteria){
        final OnmsCriteria criteria = new OnmsCriteria(OnmsNotification.class);
        criteria.createAlias("node", "node", OnmsCriteria.LEFT_JOIN);
        criteria.createAlias("serviceType", "serviceType", OnmsCriteria.LEFT_JOIN);
        
        notificationCriteria.visit(new NotificationCriteriaVisitor<RuntimeException>(){

            public void visitAckType(AcknowledgeType ackType) throws RuntimeException {
                if(ackType == AcknowledgeType.ACKNOWLEDGED){
                    criteria.add(Restrictions.isNotNull("answeredBy"));
                }else{
                   criteria.add(Restrictions.isNull("answeredBy")); 
                }
                
            }

            public void visitFilter(Filter filter) throws RuntimeException {
                criteria.add(filter.getCriterion());
                
            }

            public void visitLimit(int limit, int offset) throws RuntimeException {
                criteria.setMaxResults(limit);
                criteria.setFirstResult(offset);                
            }

            public void visitSortStyle(SortStyle sortStyle) throws RuntimeException {
                switch(sortStyle.id){
                    case SortStyle._USER:
                        criteria.addOrder(Order.desc("user"));
                        break;
                    case SortStyle._RESPONDER:
                        criteria.addOrder(Order.desc("responder"));        
                        break;
                    case SortStyle._PAGETIME:
                        criteria.addOrder(Order.desc("pagetime"));
                        break;
                    case SortStyle._RESPONDTIME:
                        criteria.addOrder(Order.desc("respondTime"));
                        break;
                    case SortStyle._NODE:
                        criteria.addOrder(Order.desc("nodeId"));
                        break;
                    case SortStyle._INTERFACE:
                        criteria.addOrder(Order.desc("interfaceId"));
                        break;
                    case SortStyle._SERVICE:
                        criteria.addOrder(Order.desc("serviceId"));
                        break;
                    case SortStyle._ID:
                        criteria.addOrder(Order.desc("notifyId"));
                        break;
                    case SortStyle._REVERSE_USER:
                        criteria.addOrder(Order.asc("user"));
                        break;
                    case SortStyle._REVERSE_RESPONDER:
                        criteria.addOrder(Order.asc("responder"));            
                        break;
                    case SortStyle._REVERSE_PAGETIME:
                        criteria.addOrder(Order.asc("pagetime"));
                        break;
                    case SortStyle._REVERSE_RESPONDTIME:
                        criteria.addOrder(Order.asc("respondTimer"));
                        break;
                    case SortStyle._REVERSE_NODE:
                        criteria.addOrder(Order.asc("nodeId"));
                        break;
                    case SortStyle._REVERSE_INTERFACE:
                        criteria.addOrder(Order.asc("interfaceId"));
                        break;
                    case SortStyle._REVERSE_SERVICE:
                        criteria.addOrder(Order.asc("serviceId"));
                        break;
                    case SortStyle._REVERSE_ID:
                        criteria.addOrder(Order.asc("notifyId"));
                        break;
                    
                }
                
            }
            
        });
        
        return criteria;
    }

