    @Override
    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {
        final int numberOfRows = Integer.getInteger("opennms.applicationsWithProblems.count", DEFAULT_ROW_COUNT);

        // Applications do not have a alarm mapping, so we group all alarms by node id, service type and ip address
        // as those define the status of the application
        final List<ApplicationStatusEntity> alarmStatusList = applicationDao.getAlarmStatus();

        // Calculate status for application
        List<ApplicationSummary> summaryList = new ArrayList<>();
        for (OnmsApplication application : applicationDao.findAll()) {
            final List<ApplicationStatusEntity> statusList = new ArrayList<>();
            for (OnmsMonitoredService eachService : application.getMonitoredServices()) {
                ApplicationStatusEntity.Key key = new ApplicationStatusEntity.Key(eachService.getNodeId(), eachService.getServiceType(), eachService.getIpAddress());
                alarmStatusList.stream().filter(s -> s.getKey().equals(key)).collect(Collectors.toList()).forEach(s -> statusList.add(s));
            }

            // We have determined all severities from all ip services, now get the max severity
            Optional<ApplicationStatusEntity> maxSeverity = statusList.stream().reduce((statusEntity1, statusEntity2) -> {
                if (statusEntity1.getSeverity().isGreaterThan(statusEntity2.getSeverity())) {
                    return statusEntity1;
                }
                return statusEntity2;
            });
            if (maxSeverity.isPresent()) {
                summaryList.add(new ApplicationSummary(application, maxSeverity.get().getSeverity()));
            }

        }

        // Define if there is a "more"
        boolean more = summaryList.size() - numberOfRows > 0;
        if (summaryList.size() > numberOfRows) {
            summaryList = summaryList.subList(0, numberOfRows);
        }

        // Sort
        summaryList.sort((s1, s2) -> -1 * s1.getSeverity().compareTo(s2.getSeverity())); // desc sort

        // Prepare Model
        ModelAndView modelAndView = new ModelAndView(m_successView);
        modelAndView.addObject("more", more);
        modelAndView.addObject("summaries", summaryList);
        return modelAndView;
    }

