	// public Map referenceData(HttpServletRequest request) throws Exception {
	@Override
	protected ModelAndView handleRequestInternal(HttpServletRequest request,
			HttpServletResponse reply) throws Exception {

		Context context = new HttpServletRequestContext(request);
		LimitFactory limitFactory = new TableLimitFactory(context, "tabledata");
		Limit limit = new TableLimit(limitFactory);

		CurrentOutageParseResponse.findSelectedOutagesIDs(request,m_outageService);
		
		Map<String, Object> myModel = new HashMap<String, Object>();
		Integer totalRows = m_outageService.getSuppressedOutageCount();
	
		myModel.put("request", limit.toString());

		myModel.put("all_params", request.getParameterNames().toString());
		if (limit.getPage() == 1) {
			// no offset set
			myModel.put("rowStart", 0);
			context.setRequestAttribute("rowStart", 0);
			context.setRequestAttribute("rowEnd", ROW_LIMIT);
			myModel.put("rowEnd", ROW_LIMIT);

			if (limit.getSort().getProperty() == null) {
				foundOutages = m_outageService.getSuppressedOutagesByRange(0,
						ROW_LIMIT, "outages.nodeid", "asc");

			} else {
				foundOutages = m_outageService.getSuppressedOutagesByRange(0,
						ROW_LIMIT, "outages.nodeid,outages." + limit.getSort().getProperty(), limit
								.getSort().getSortOrder());

			}
			myModel.put("begin", 0);
			myModel.put("end", ROW_LIMIT);

		} else {
			
			Integer rowstart = null;
			Integer rowend = null;
			
				
				//quirky situation... - as we started on 0 (zero)
				rowstart = ((limit.getPage() * ROW_LIMIT +1 ) - ROW_LIMIT);
				rowend = ( ROW_LIMIT);
				myModel.put("begin", rowstart);
				myModel.put("end", rowend);
			
			if (limit.getSort().getProperty() == null) {
				foundOutages = m_outageService.getSuppressedOutagesByRange(
						rowstart, rowend, "outages.nodeid", "asc");

			} else {

				foundOutages = m_outageService.getSuppressedOutagesByRange(rowstart,
						rowend, "outages.nodeid,outages." + limit.getSort().getProperty() + " ", limit
								.getSort().getSortOrder());

			}
		}
		
		// Pretty smart to build the collection after any suppressions..... 
		Collection theTable = m_cview.theTable(foundOutages);
		 
		myModel.put("tabledata", theTable);
		myModel.put("totalRows", totalRows);
		
		myModel.put("selected_outages", CurrentOutageParseResponse.findSelectedOutagesIDs(request,m_outageService));
		return new ModelAndView(getSuccessView(), myModel);
	}

