    /** {@inheritDoc} */
    @Override
    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {
        String[] requiredParameters = new String[] { "parentResourceId or", "parentResourceType and parentResource" };

        String endUrl = WebSecurityUtils.sanitizeString(request.getParameter("endUrl"));

        String resourceId = WebSecurityUtils.sanitizeString(request.getParameter("parentResourceId"));
        if (resourceId == null) {
            String resourceType = WebSecurityUtils.sanitizeString(request.getParameter("parentResourceType"));
            String resource = WebSecurityUtils.sanitizeString(request.getParameter("parentResource"));
            boolean isStoreByForeignSource = ResourceTypeUtils.isStoreByForeignSource();
            if (request.getParameter("parentResourceType") == null) {
                throw new MissingParameterException("parentResourceType", requiredParameters);
            }
            if (request.getParameter("parentResource") == null) {
                throw new MissingParameterException("parentResource", requiredParameters);
            }
            if (resourceType.equals("node") && isStoreByForeignSource) {
                OnmsNode node = m_nodeDao.get(resource);
                if (node != null && node.getForeignSource() != null && node.getForeignId() != null) {
                    resourceType = "nodeSource";
                    resource = node.getForeignSource() + ':' + node.getForeignId();
                }
            }
            if (resourceType.equals("nodeSource") && !isStoreByForeignSource) {
                OnmsNode node = m_nodeDao.get(resource);
                if (node != null && node.getForeignSource() != null && node.getForeignId() != null) {
                    resourceType = "node";
                    resource = node.getId().toString();
                }
            }
            resourceId = OnmsResource.createResourceId(resourceType, resource);
        }
        
        if (endUrl == null || "".equals(endUrl)) {
            endUrl = m_defaultEndUrl;
        }

        ChooseResourceModel model = 
            m_chooseResourceService.findChildResources(resourceId,
                                                       endUrl);
        
        return new ModelAndView("/graph/chooseresource",
                                "model",
                                model);
    }

