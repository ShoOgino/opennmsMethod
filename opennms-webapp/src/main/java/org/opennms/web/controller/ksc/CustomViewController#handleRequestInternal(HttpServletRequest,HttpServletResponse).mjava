    /** {@inheritDoc} */
    @Override
    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {
        String[] requiredParameters = new String[] { "report or domain", "type" };
      
        // Get Form Variable
        String reportType = WebSecurityUtils.sanitizeString(request.getParameter("type"));
        if (reportType == null) {
            throw new MissingParameterException("type", requiredParameters);
        }
      
        String reportIdString = WebSecurityUtils.sanitizeString(request.getParameter("report"));
        String domain = WebSecurityUtils.sanitizeString(request.getParameter("domain"));
        int reportId = 0;
        if (reportIdString != null) {
            reportId = WebSecurityUtils.safeParseInt(reportIdString);
        } else if (domain == null) {
            throw new MissingParameterException("report or domain", requiredParameters);
        }
      
        String overrideTimespan = WebSecurityUtils.sanitizeString(request.getParameter("timespan"));
        if ("null".equals(overrideTimespan) || "none".equals(overrideTimespan)) {
            overrideTimespan = null;
        }

        String overrideGraphType = WebSecurityUtils.sanitizeString(request.getParameter("graphtype"));
        if ("null".equals(overrideGraphType) || "none".equals(overrideGraphType)) {
            overrideGraphType = null;
        }
      
        // Load report to view 
        Report report = null;
        if ("node".equals(reportType)) {
            report = getKscReportService().buildNodeReport(reportId);
        } else if ("domain".equals(reportType)) {
            report = getKscReportService().buildDomainReport(domain);
        } else if ("custom".equals(reportType)) {
            report = m_kscReportFactory.getReportByIndex(reportId);
        } else {
            throw new IllegalArgumentException("value to 'type' parameter of '" + reportType + "' is not supported.  Must be one of: node, domain, or custom");
        }
      
        if (report == null) {
            throw new ServletException("Report does not exist");
        }
      
        // Get the list of available prefabricated graph options 
        HashMap<String, OnmsResource> resourceMap = new HashMap<String, OnmsResource>();
        Set<PrefabGraph> prefabGraphs = new TreeSet<PrefabGraph>();
        removeBrokenGraphsFromReport(report);
        List<Graph> graphCollection = report.getGraphCollection();
        if (!graphCollection.isEmpty()) {
            List<OnmsResource> resources = getKscReportService().getResourcesFromGraphs(graphCollection);
            for (int i = 0; i < graphCollection.size(); i++) {
                Graph graph = graphCollection.get(i);
                OnmsResource resource = resources.get(i);
                resourceMap.put(graph.toString(), resource);
                if (resource == null) {
                    log().debug("Could not get resource for graph " + graph + " in report " + report.getTitle());
                } else {
                    prefabGraphs.addAll(Arrays.asList(getResourceService().findPrefabGraphsForResource(resource)));
                }
            }
      
            // Get default graph type from first element of graph_options
            // XXX Do we care about the tests on reportType?
            if (("node".equals(reportType) || "domain".equals(reportType))
                    && overrideGraphType == null
                    && !prefabGraphs.isEmpty()) {
                // Get the name of the first item.  prefabGraphs is sorted.
                overrideGraphType = prefabGraphs.iterator().next().getName();
                if (log().isDebugEnabled()) {
                    log().debug("custom_view: setting default graph type to " + overrideGraphType);
                }
            }
        }
        
        List<KscResultSet> resultSets = new ArrayList<KscResultSet>(report.getGraphCount());
        for (Graph graph : graphCollection) {
            OnmsResource resource = resourceMap.get(graph.toString());
            if (resource != null) {
                promoteResourceAttributesIfNecessary(resource);
            }

            String displayGraphType;
            if (overrideGraphType == null) {
                displayGraphType = graph.getGraphtype();
            } else {
                displayGraphType = overrideGraphType;
            }
            
            PrefabGraph displayGraph;
            try {
                displayGraph = getResourceService().getPrefabGraph(displayGraphType);
            } catch (ObjectRetrievalFailureException e) {
                if (log().isDebugEnabled()) {
                    log().debug("The prefabricated graph '" + displayGraphType + "' does not exist: " + e, e);
                }
                displayGraph = null;
            }
            
            boolean foundGraph = false;
            if (resource != null) {
                for (PrefabGraph availableGraph : getResourceService().findPrefabGraphsForResource(resource)) {
                    if (availableGraph.equals(displayGraph)) {
                        foundGraph = true;
                        break;
                    }
                }
            }
            
            if (!foundGraph) {
                displayGraph = null;
            }
            
            // gather start/stop time information
            String displayTimespan = null;
            if (overrideTimespan == null) {
                displayTimespan = graph.getTimespan();
            } else {
                displayTimespan = overrideTimespan;
            }
            Calendar beginTime = Calendar.getInstance();
            Calendar endTime = Calendar.getInstance();
            KSC_PerformanceReportFactory.getBeginEndTime(displayTimespan, beginTime, endTime);
            
            KscResultSet resultSet = new KscResultSet(graph.getTitle(), beginTime.getTime(), endTime.getTime(), resource, displayGraph);
            resultSets.add(resultSet);
        }
        
        ModelAndView modelAndView = new ModelAndView("KSC/customView");

        modelAndView.addObject("loggedIn", request.getRemoteUser() != null);
        modelAndView.addObject("reportType", reportType);
        if (report != null) {
            modelAndView.addObject("report", reportIdString);
        }
        if (domain != null) {
            modelAndView.addObject("domain", domain);
        }
        
        modelAndView.addObject("title", report.getTitle());
        modelAndView.addObject("resultSets", resultSets);
        
        if (report.getShow_timespan_button()) {
            if (overrideTimespan == null || !getKscReportService().getTimeSpans(true).containsKey(overrideTimespan)) {
                modelAndView.addObject("timeSpan", "none");
            } else {
                modelAndView.addObject("timeSpan", overrideTimespan);
            }
            modelAndView.addObject("timeSpans", getKscReportService().getTimeSpans(true));
        } else {
            // Make sure it's null so the pulldown list isn't shown
            modelAndView.addObject("timeSpan", null);
        }

        if (report.getShow_graphtype_button()) {
            LinkedHashMap<String, String> graphTypes = new LinkedHashMap<String, String>();
            graphTypes.put("none", "none");
            for (PrefabGraph graphOption : prefabGraphs) {
                graphTypes.put(graphOption.getName(), graphOption.getName());
            }
            
            if (overrideGraphType == null || !graphTypes.containsKey(overrideGraphType)) {
                modelAndView.addObject("graphType", "none");
            } else {
                modelAndView.addObject("graphType", overrideGraphType);
            }
            modelAndView.addObject("graphTypes", graphTypes);
        } else {
            // Make sure it's null so the pulldown list isn't shown
            modelAndView.addObject("graphType", null);
        }
        
        modelAndView.addObject("showCustomizeButton", ( request.isUserInRole( Authentication.ADMIN_ROLE ) || !request.isUserInRole(Authentication.READONLY_ROLE) ) && (request.getRemoteUser() != null));

        if (report.getGraphs_per_line() > 0) {
            modelAndView.addObject("graphsPerLine", report.getGraphs_per_line());
        } else {
            modelAndView.addObject("graphsPerLine", getDefaultGraphsPerLine());
        }
        
        return modelAndView;
    }

