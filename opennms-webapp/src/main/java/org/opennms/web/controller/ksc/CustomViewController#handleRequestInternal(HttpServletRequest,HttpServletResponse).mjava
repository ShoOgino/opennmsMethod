    @Override
    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {
        String[] requiredParameters = new String[] { "report or domain", "type" };
      
        // Get Form Variable
        String report_type = request.getParameter("type");
        if (report_type == null) {
            throw new MissingParameterException("type", requiredParameters);
        }
      
        String r_index = request.getParameter("report");
        String domain = request.getParameter("domain");
        int report_index = 0;
        if (r_index != null) {
            report_index = Integer.parseInt(r_index);
        } else if (domain == null) {
            throw new MissingParameterException("report or domain", requiredParameters);
        }
      
        String override_timespan = request.getParameter("timespan");
        String override_graphtype = request.getParameter("graphtype");
        if ((override_timespan == null) || (override_timespan.equals("null"))) {
            override_timespan = "none";
        }
        if ((override_graphtype == null) || (override_graphtype.equals("null"))) {
            override_graphtype = "none";
        }
      
        // Load report to view 
        Report report = null;
        if ("node".equals(report_type)) {
            report = getKscReportService().buildNodeReport(report_index);
        } else if ("domain".equals(report_type)) {
            report = getKscReportService().buildDomainReport(domain);
        } else if ("custom".equals(report_type)) {
            ReportsList reports_list = KSC_PerformanceReportFactory.getConfiguration();
            report = reports_list.getReport(report_index);
        } else {
            throw new IllegalArgumentException("value to 'type' parameter of '" + report_type + "' is not supported.  Must be one of: node, domain, or custom");
        }
      
        if (report == null) {
            throw new ServletException("Report does not exist");
        }
      
        // Define the possible graph options 
        PrefabGraph[] graph_options = new PrefabGraph[0];
      
        if (report.getGraphCount() > 0) {
            Set<PrefabGraph> prefabGraphs = new HashSet<PrefabGraph>();
            
            for (int i = 0; i < report.getGraphCount(); i++) {
                Graph graph = report.getGraph(i);
                OnmsResource resource = getKscReportService().getResourceFromGraph(graph);
                getResourceService().promoteGraphAttributesForResource(resource);
                prefabGraphs.addAll(Arrays.asList(getResourceService().findPrefabGraphsForResource(resource)));
            }
            
            graph_options = prefabGraphs.toArray(new PrefabGraph[prefabGraphs.size()]);

            if (graph_options.length > 1) {
                Arrays.sort(graph_options);
            }

            /*
            if ("custom".equals(report_type) && "node".equals(resource.getResourceType().getName())) {
                graph_options = getResourceService().findPrefabGraphsForChildResources(resource.getParent(), "nodeSnmp", "interfaceSnmp");
            } else {
                graph_options = getResourceService().findPrefabGraphsForChildResources(resource.getParent(), "interfaceSnmp");
            }
            */
      
            // Get default graph type from first element of graph_options
            if (("node".equals(report_type) || "domain".equals(report_type))
                    && "none".equals(override_graphtype)
                    && graph_options.length > 0) {
                override_graphtype = graph_options[0].getName();
                if (log().isDebugEnabled()) {
                    log().debug("custom_view: setting default graph type to "
                                + override_graphtype);
                }
            }

            /*
            if (graph_options.length > 1) {
                Arrays.sort(graph_options);
            }
            */
        }
        
        ArrayList<KscResultSet> resultSets = new ArrayList<KscResultSet>(report.getGraphCount());
        for (int i = 0; i < report.getGraphCount(); i++) {
            Graph current_graph = report.getGraph(i);
            
            OnmsResource resource = getKscReportService().getResourceFromGraph(current_graph);
            getResourceService().promoteGraphAttributesForResource(resource);

            String display_graphtype = null;
            if ("none".equals(override_graphtype)) {
                display_graphtype = current_graph.getGraphtype();
            } else {
                display_graphtype = override_graphtype;
            }
            
            PrefabGraph display_graph = getResourceService().getPrefabGraph(display_graphtype);
            
            // gather start/stop time information
            String display_timespan = null;
            if ("none".equals(override_timespan)) {
                display_timespan = current_graph.getTimespan();
            } else {
                display_timespan = override_timespan;
            }
            Calendar begin_time = Calendar.getInstance();
            Calendar end_time = Calendar.getInstance();
            KSC_PerformanceReportFactory.getBeginEndTime(display_timespan, begin_time, end_time);
            
            KscResultSet resultSet = new KscResultSet(current_graph.getTitle(), begin_time.getTime(), end_time.getTime(), resource, display_graph);
            resultSets.add(resultSet);
        }

        ModelAndView modelAndView = new ModelAndView("KSC/customView");

        modelAndView.addObject("reportType", report_type);
        if (report != null) {
            modelAndView.addObject("report", r_index);
        }
        if (domain != null) {
            modelAndView.addObject("domain", domain);
        }
        
        modelAndView.addObject("title", report.getTitle());
        modelAndView.addObject("resultSets", resultSets);
        
        if (report.getShow_timespan_button()) {
            if ("none".equals(override_timespan) || !getKscReportService().getTimeSpans(true).containsKey(override_timespan)) {
                modelAndView.addObject("timeSpan", "none");
            } else {
                modelAndView.addObject("timeSpan", override_timespan);
            }
            modelAndView.addObject("timeSpans", getKscReportService().getTimeSpans(true));
        } else {
            // Make sure it's null so the pulldown list isn't shown
            modelAndView.addObject("timeSpan", null);
        }

        if (report.getShow_graphtype_button()) {
            LinkedHashMap<String, String> graphTypes = new LinkedHashMap<String, String>();
            graphTypes.put("none", "none");
            for (PrefabGraph graph_option : graph_options) {
                graphTypes.put(graph_option.getName(), graph_option.getName());
            }
            
            if ("none".equals(override_graphtype) || !graphTypes.containsKey(override_graphtype)) {
                modelAndView.addObject("graphType", "none");
            } else {
                modelAndView.addObject("graphType", override_graphtype);
            }
            modelAndView.addObject("graphTypes", graphTypes);
        } else {
            // Make sure it's null so the pulldown list isn't shown
            modelAndView.addObject("graphType", null);
        }
        
        modelAndView.addObject("showCustomizeButton", !request.isUserInRole(Authentication.READONLY_ROLE));
        modelAndView.addObject("graphsPerLine", getDefaultGraphsPerLine());
        
        return modelAndView;
    }

