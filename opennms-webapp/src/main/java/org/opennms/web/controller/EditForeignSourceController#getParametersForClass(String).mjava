    private Set<String> getParametersForClass(String clazz) {
        if (m_pluginParameters.containsKey(clazz)) {
            return m_pluginParameters.get(clazz);
        }
        Set<String> parameters = new TreeSet<String>();
        try {
            final BeanWrapper wrapper = new BeanWrapperImpl(Class.forName(clazz));
            wrapper.registerCustomEditor(XMLGregorianCalendar.class, new StringXmlCalendarPropertyEditor());
            wrapper.registerCustomEditor(java.net.InetAddress.class, new InetAddressTypeEditor());
            wrapper.registerCustomEditor(OnmsSeverity.class, new OnmsSeverityEditor());
            wrapper.registerCustomEditor(PrimaryType.class, new PrimaryTypeEditor());
            for (final PropertyDescriptor pd : wrapper.getPropertyDescriptors()) {
                if (!"class".equals(pd.getName())) {
                    parameters.add(pd.getName());
                }
            }
            m_pluginParameters.put(clazz, parameters);
            return parameters;
        } catch (ClassNotFoundException e) {
            LOG.warn("unable to wrap class {}", clazz, e);
        }
        return null;
    }

