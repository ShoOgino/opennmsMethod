	// public Map referenceData(HttpServletRequest request) throws Exception {
	@Override
	protected ModelAndView handleRequestInternal(HttpServletRequest request,
			HttpServletResponse reply) throws Exception {

		Context context = new HttpServletRequestContext(request);
		LimitFactory limitFactory = new TableLimitFactory(context, "tabledata");
		Limit limit = new TableLimit(limitFactory);

		CurrentOutageParseResponse.findSelectedOutagesIDs(request,m_outageService);
		
		Map<String, Object> myModel = new HashMap<String, Object>();
		Integer totalRows = m_outageService.getCurrentOutageCount();
	
		myModel.put("request", limit.toString());

		myModel.put("all_params", request.getParameterNames().toString());
		
		if (limit.getSort().getProperty() == null) {
			foundOutages = m_outageService.getCurrentOutages(" outages.nodeid asc");
	
		} else {
			foundOutages = m_outageService.getCurrentOutages(" outages." +  limit
					.getSort().getProperty() + " " + limit.getSort().getSortOrder());
			}
		
		
		
		// Pretty smart to build the collection after any suppressions..... 
		Collection theTable = m_cview.theTable(foundOutages);
		 
		myModel.put("tabledata", theTable);
		myModel.put("totalRows", totalRows);
		
		myModel.put("selected_outages", CurrentOutageParseResponse.findSelectedOutagesIDs(request,m_outageService));
		
		return new ModelAndView("displayCurrentOutages", myModel);
	}

