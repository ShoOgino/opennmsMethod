    /**
     * Parses the query string to determine what types of event filters to use
     * (for example, what to filter on or sort by), then does the database query
     * and then forwards the results to a JSP for display.
     * 
     * <p>
     * Sets the <em>events</em> and <em>parms</em> request attributes for
     * the forwardee JSP (or whatever gets called).
     * </p>
     */
    @Override
    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {
        List<Filter> filterList = new ArrayList<Filter>();
        AcknowledgeType ackType = m_defaultEventType;

        String display = request.getParameter("display");

        String limitString = request.getParameter("limit");
        int limit = "long".equals(display) ? getDefaultLongLimit() : getDefaultShortLimit();

        if (limitString != null) {
            try {
                int newlimit = WebSecurityUtils.safeParseInt(limitString);
                if (newlimit > 0) {
                    limit = newlimit;
                }
            } catch (NumberFormatException e) {
                // do nothing, the default is already set
            }
        }

        String multipleString = request.getParameter("multiple");
        int multiple = DEFAULT_MULTIPLE;
        if (multipleString != null) {
            try {
                multiple = Math.max(0, WebSecurityUtils.safeParseInt(multipleString));
            } catch (NumberFormatException e) {
            }
        }

        String sortStyleString = request.getParameter("sortby");
        SortStyle sortStyle = m_defaultSortStyle;
        if (sortStyleString != null) {
            SortStyle temp = SortStyle.getSortStyle(sortStyleString);
            if (temp != null) {
                sortStyle = temp;
            }
        }

        String idString = request.getParameter("id");
        if (idString != null) {
            // asking for a specific ID; only filter should be event ID
            filterList.add(new EventIdFilter(WebSecurityUtils.safeParseInt(idString)));
            ackType = null;
        } else {
            // otherwise, apply filters/acktype/etc.

            String ackTypeString = request.getParameter("acktype");
            if (ackTypeString != null) {
                AcknowledgeType temp = AcknowledgeType.getAcknowledgeType(ackTypeString);
                if (temp != null) {
                    ackType = temp;
                }
            }

            String[] filterStrings = request.getParameterValues("filter");
            if (filterStrings != null) {
                for (String filterString : filterStrings) {
                    Filter filter = EventUtil.getFilter(filterString);
                    if (filter != null) {
                        filterList.add(filter);
                    }
                }
            }

        }

        Filter[] filters = filterList.toArray(new Filter[0]);
        
        EventQueryParms parms = new EventQueryParms();
        parms.ackType = ackType;
        parms.display = display;
        parms.filters = filterList;
        parms.limit = limit;
        parms.multiple =  multiple;
        parms.sortStyle = sortStyle;
        
        EventCriteria queryCriteria = new EventCriteria(filters, sortStyle, ackType, limit, limit * multiple);

        Event[] events = m_webEventRepository.getMatchingEvents(queryCriteria);
        
        ModelAndView modelAndView = new ModelAndView(getSuccessView());
        modelAndView.addObject("events", events);
        modelAndView.addObject("parms", parms);
        return modelAndView;

    }

