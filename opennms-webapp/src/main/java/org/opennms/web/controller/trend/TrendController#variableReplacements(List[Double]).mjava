    private Map<String, String> variableReplacements(final List<Double> values) {
        final Map<String, String> replacements = new HashMap<>();

        final DoubleSummaryStatistics doubleSummaryStatistics = values.stream().mapToDouble(Double::doubleValue).summaryStatistics();

        replacements.put("${doubleMax}", String.format("%.2f", doubleSummaryStatistics.getMax()));
        replacements.put("${intMax}", String.format("%d", (int) doubleSummaryStatistics.getMax()));

        replacements.put("${doubleMin}", String.format("%.2f", doubleSummaryStatistics.getMin()));
        replacements.put("${intMin}", String.format("%d", (int) doubleSummaryStatistics.getMin()));

        replacements.put("${doubleAvg}", String.format("%.2f", doubleSummaryStatistics.getAverage()));
        replacements.put("${intAvg}", String.format("%d", (int) doubleSummaryStatistics.getAverage()));

        replacements.put("${doubleSum}", String.format("%.2f", doubleSummaryStatistics.getSum()));
        replacements.put("${intSum}", String.format("%d", (int) doubleSummaryStatistics.getSum()));

        for (int i = 0; i < values.size(); i++) {
            double current = values.get(i);

            replacements.put("${doubleValue[" + i + "]}", String.format("%.2f", current));
            replacements.put("${intValue[" + i + "]}", String.format("%d", (int) current));

            if (i > 0) {
                double previous = values.get(i - 1);
                double change = current - previous;

                replacements.put("${doubleValueChange[" + i + "]}", String.format("%+.2f", change));
                replacements.put("${intValueChange[" + i + "]}", String.format("%+d", (int) change));
            } else {
                replacements.put("${doubleValueChange[" + i + "]}", "NaN");
                replacements.put("${intValueChange[" + i + "]}", "NaN");
            }
        }

        if (values.size() > 0) {
            replacements.put("${doubleLastValueChange}", replacements.get("${doubleValueChange[" + (values.size() - 1) + "]}"));
            replacements.put("${intLastValueChange}", replacements.get("${intValueChange[" + (values.size() - 1) + "]}"));

            replacements.put("${doubleLastValue}", replacements.get("${doubleValue[" + (values.size() - 1) + "]}"));
            replacements.put("${intLastValue}", replacements.get("${intValue[" + (values.size() - 1) + "]}"));
        } else {
            replacements.put("${doubleLastValueChange}", "NaN");
            replacements.put("${intLastValueChange}", "NaN");

            replacements.put("${doubleLastValue}", "NaN");
            replacements.put("${intLastValue}", "NaN");
        }

        return replacements;
    }

