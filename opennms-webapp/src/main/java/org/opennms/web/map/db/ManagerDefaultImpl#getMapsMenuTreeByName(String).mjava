    /**
     * Take all the maps in the tree of maps considering the with name in input
     * as the root of the tree. If there are more maps with <i>mapName</i> (case insensitive)
     * all trees with these maps as root are considered and returned. 
     * 
     * @param mapName
     * @return a List with the MapMenu objects.
     * @throws MapsException
     */
    public List getMapsMenuTreeByName(String mapName) throws 
            MapNotFoundException, MapsException {
    	  List mapsInTreesList = new ArrayList();
	      //
	      VMapInfo[] mapsMenu = null;
	      try{
	      	mapsMenu=getMapsMenuByName(mapName);
	      }catch(MapNotFoundException mnf){
	      	//do nothing...
	      }
	      if(mapsMenu!=null){
	      	  // find all accessible maps for the user,
	      	  // for all maps (and theirs tree of maps) with name like mapName. 
	      	  for(int k=0; k<mapsMenu.length;k++){
	      	  	  //build a map in wich each entry is [mapparentid, listofchildsids]
			      java.util.Map parent_child = new HashMap();
			      parent_child = dbManager.getMapsStructure();
			      List childList = new ArrayList();
			      preorderVisit(new Integer(mapsMenu[k].getId()), childList, parent_child);
			      for(int i=0; i<childList.size(); i++){
			      	preorderVisit((Integer)childList.get(i), childList, parent_child);
			      }
			      //adds all sub-tree of maps to the visible map list
			      for(int i=0; i<childList.size(); i++){
			      	mapsInTreesList.add(getMapMenu(((Integer)childList.get(i)).intValue()));
			      }
	      	  }
	      }
        return mapsInTreesList;
    }

