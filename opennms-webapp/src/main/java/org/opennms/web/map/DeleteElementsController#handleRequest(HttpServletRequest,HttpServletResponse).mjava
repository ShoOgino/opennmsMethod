	public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws IOException {
		
		ThreadCategory.setPrefix(MapsConstants.LOG4J_CATEGORY);
		log = ThreadCategory.getInstance(this.getClass());
		String action = request.getParameter("action");
		String elems = request.getParameter("elems");
		log.debug("Adding elements action:"+action+", elems="+elems );
		
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(response.getOutputStream(), "UTF-8"));
		try {
			if (!request.isUserInRole(org.opennms.web.springframework.security.Authentication.ADMIN_ROLE)) {
                log.warn("Cannot delete elements because not admin role for user: " + request.getRemoteUser() );
				throw new MapsException("Cannot delete elements because not admin role for user: " + request.getRemoteUser());
			}
			VMap map = manager.openMap();
			if(log.isDebugEnabled())
				log.debug("Got map from manager "+map);
			
			Integer[] elemeids = null;
			String type = MapsConstants.NODE_TYPE;

            String[] mapids = elems.split(",");
            elemeids = new Integer[mapids.length];
            for (int i = 0; i<mapids.length;i++) {
                elemeids[i] = new Integer(mapids[i]);
            }

			boolean actionfound = false;
			if (action.equals(MapsConstants.DELETENODES_ACTION)) {
				actionfound = true;
			}
			
			if (action.equals(MapsConstants.DELETEMAPS_ACTION)) {
				actionfound = true;
				type = MapsConstants.MAP_TYPE;
			}
			
			List<String> velemsids = new ArrayList<String>();
			if (actionfound) {				
				for (int i = 0; i < elemeids.length; i++) {
					int elemId = elemeids[i].intValue();
					if (map.containsElement(elemId, type)){
						map.removeLinksOnElementList(elemId,type);
						VElement ve = map.removeElement(elemId,type);
						velemsids.add(ve.getId()+ve.getType());
					}
				}
			} 
			bw.write(ResponseAssembler.getDeleteElementsResponse(velemsids));
		} catch (Exception e) {
			log.error("Error while adding nodes for action: "+action,e);
			bw.write(ResponseAssembler.getMapErrorResponse(action));
		} finally {
			bw.close();
		}

		return null;
	}

