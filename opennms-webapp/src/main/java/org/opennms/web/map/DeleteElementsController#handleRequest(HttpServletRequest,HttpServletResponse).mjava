	public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws IOException {
		
		ThreadCategory.setPrefix(MapsConstants.LOG4J_CATEGORY);
		log = ThreadCategory.getInstance(this.getClass());
		String action = request.getParameter("action");
		String elems = request.getParameter("elems");
		log.debug("Adding elements action:"+action+", elems="+elems );
		
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(response.getOutputStream()));
		try {
			if (!manager.isUserAdmin()) {
				log.warn(request.getRemoteUser() +": Cannot delete elements because user role is:" + MapsConstants.ROLE_USER);
				throw new MapsException(request.getRemoteUser() +": Cannot delete elements because user role is:" + MapsConstants.ROLE_USER);
			}
			VMap map = manager.openMap();
			if(log.isDebugEnabled())
				log.debug("Got map from manager "+map);
			
			Integer[] nodeids = null;
			String type = VElement.NODE_TYPE;

			boolean actionfound = false;
			if (action.equals(MapsConstants.DELETENODES_ACTION)) {
				actionfound = true;
				type = VElement.NODE_TYPE;
				String[] snodeids = elems.split(",");
				nodeids = new Integer[snodeids.length];
				for (int i = 0; i<snodeids.length;i++) {
					nodeids[i] = new Integer(snodeids[i]);
				}
			}
			
			if (action.equals(MapsConstants.DELETEMAPS_ACTION)) {
				actionfound = true;
				type = VElement.MAP_TYPE;
				String[] snodeids = elems.split(",");
				nodeids = new Integer[snodeids.length];
				for (int i = 0; i<snodeids.length;i++) {
					nodeids[i] = new Integer(snodeids[i]);
				}
			}
			
			List<VElement> velems = new ArrayList<VElement>();
			if (actionfound) {
				
				for (int i = 0; i < nodeids.length; i++) {
					int elemId = nodeids[i].intValue();
					if (map.containsElement(elemId, type)){
						map.removeLinksOnElementList(elemId,type);
						velems.add(map.removeElement(elemId,type));
					}
				}
			} 
			bw.write(ResponseAssembler.getDeleteElementsResponse(action, velems));
		} catch (Exception e) {
			log.error("Error while adding nodes for action: "+action,e);
			bw.write(ResponseAssembler.getMapErrorResponse(action));
		} finally {
			bw.close();
		}

		return null;
	}

