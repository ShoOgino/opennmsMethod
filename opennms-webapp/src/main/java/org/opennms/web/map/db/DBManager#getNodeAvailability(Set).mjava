    /**
     * Return the availability percentage for all managed services on the given
     * nodes from the given start time until the given end time. If there are no
     * managed services on these nodes, then a value of -1 is returned.
     */
    private java.util.Map<Integer,Double> getNodeAvailability(Set nodeIds) throws MapsException {
    	
    	
        Calendar cal = new GregorianCalendar();
        Date end = cal.getTime();
        cal.add(Calendar.DATE, -1);
        Date start = cal.getTime();

    	if(nodeIds==null){
    		throw new IllegalArgumentException("Cannot take nodeIds null.");
    	}
        if (start == null || end == null) {
            throw new IllegalArgumentException("Cannot take null parameters.");
        }

        if (end.before(start)) {
            throw new IllegalArgumentException("Cannot have an end time before the start time.");
        }

        if (end.equals(start)) {
            throw new IllegalArgumentException("Cannot have an end time equal to the start time.");
        }

        double avail = -1;
        int nodeid = 0;
        java.util.Map<Integer,Double> retMap = new TreeMap<Integer,Double>();
        if(nodeIds.size()>0){
	        try {
		        createConnection();
	        	StringBuffer sb = new StringBuffer("select nodeid, getManagePercentAvailNodeWindow(nodeid, ?, ?)  from node where nodeid in (");
	        	Iterator it = nodeIds.iterator();
	        	while(it.hasNext()){
	        		sb.append(it.next());
	        		if(it.hasNext()){
	        			sb.append(", ");
	        		}
	        	}
	        	sb.append(")");
	            PreparedStatement stmt = m_dbConnection.prepareStatement(sb.toString());
	            
	            // yes, these are supposed to be backwards, the end time first
	            stmt.setTimestamp(1, new Timestamp(end.getTime()));
	            stmt.setTimestamp(2, new Timestamp(start.getTime()));
	
	            ResultSet rs = stmt.executeQuery();
	
	            while (rs.next()) {
	            	nodeid = rs.getInt(1);
	                avail = rs.getDouble(2);
	                retMap.put(new Integer(nodeid), new Double(avail));
	            }
	        } catch (Exception e) {
				throw new MapsException(e);
		}finally{
                        releaseConnection();
                }
        }

        return retMap;
    }

