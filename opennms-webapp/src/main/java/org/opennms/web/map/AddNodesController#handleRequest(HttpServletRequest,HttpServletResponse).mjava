	public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws IOException {
		
		ThreadCategory.setPrefix(MapsConstants.LOG4J_CATEGORY);
		log = ThreadCategory.getInstance(this.getClass());
		String action = request.getParameter("action");
		String elems = request.getParameter("elems");
		log.debug("Adding Nodes action:"+action+", elems="+elems );
		
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(response.getOutputStream()));
		try {
			if (!manager.isUserAdmin()) {
				log.warn(request.getRemoteUser() +": Cannot add nodes because user role is:" + MapsConstants.ROLE_USER);
				throw new MapsException(request.getRemoteUser() +": Cannot add nodes because user role is:" + MapsConstants.ROLE_USER);
			}
			VMap map = manager.openMap();
			if(log.isDebugEnabled())
				log.debug("Got map from manager "+map);
			
			Integer[] nodeids = null;
			String type = VElement.NODE_TYPE;

			boolean actionfound = false;
			
			if (action.equals(MapsConstants.ADDNODES_ACTION)) {
				log.debug("Adding nodes by id: "+ elems);
				actionfound = true;
				String[] snodeids = elems.split(",");
				nodeids = new Integer[snodeids.length];
				for (int i = 0; i<snodeids.length;i++) {
					nodeids[i] = new Integer(snodeids[i]);
				}
			}
			
			if (action.equals(MapsConstants.ADDNODES_BY_CATEGORY_ACTION)) {
				log.debug("Adding nodes by category: "+ elems);
				actionfound = true;
				String categoryName = elems;
				CategoryFactory.init();
				CatFactory cf = CategoryFactory.getInstance();
				String rule = cf.getEffectiveRule(categoryName);
				List nodeIPs = FilterDaoFactory.getInstance().getIPList(rule);
				log.debug("ips found: "+nodeIPs.toString());
				nodeids = new Integer[nodeIPs.size()];
				for (int i = 0; i<nodeIPs.size();i++) {
					String nodeIp= (String)nodeIPs.get(i);
					List<Integer> ids = NetworkElementFactory.getNodeIdsWithIpLike(nodeIp);
					log.debug("Ids by ipaddress "+nodeIp+": "+ids);
					nodeids[i] = ids.get(0);
				}
			}	
			
			
			if (action.equals(MapsConstants.ADDNODES_BY_LABEL_ACTION)) {
				log.debug("Adding nodes by label: "+ elems);
				actionfound = true;
				Node[] nodes = NetworkElementFactory.getNodesLike(elems);
				nodeids = new Integer[nodes.length];
				for (int i = 0; i<nodes.length;i++) {
					nodeids[i] = new Integer(nodes[i].getNodeId());
				}
			}	

			if (action.equals(MapsConstants.ADDRANGE_ACTION)) {
				log.debug("Adding nodes by range: "+ elems);
				actionfound = true;
				nodeids = (Integer[]) NetworkElementFactory.getNodeIdsWithIpLike(elems).toArray(new Integer[0]);
			}

			if (action.equals(MapsConstants.ADDNODES_NEIG_ACTION)) {
				log.debug("Adding nodes neighbor of:"+ elems);
				actionfound = true;
				nodeids = (Integer[]) NetworkElementFactory.getLinkedNodeIdOnNode(Integer.parseInt(elems)).toArray(new Integer[0]);
			}

			if (action.equals(MapsConstants.ADDNODES_WITH_NEIG_ACTION)) {
				log.debug("Adding nodes with neighbor of:"+ elems);
				actionfound = true;
				Set<Integer> linkednodeids = NetworkElementFactory.getLinkedNodeIdOnNode(Integer.parseInt(elems));
				linkednodeids.add(new Integer(elems));
				nodeids = linkednodeids.toArray(new Integer[linkednodeids.size()]);
			} 
			
			if (action.equals(MapsConstants.ADDMAPS_ACTION)) {
				actionfound = true;
				type = VElement.MAP_TYPE;
				String[] snodeids = elems.split(",");
				nodeids = new Integer[snodeids.length];
				for (int i = 0; i<snodeids.length;i++) {
					nodeids[i] = new Integer(snodeids[i]);
				}
			}
			List<VElement> velems = new ArrayList<VElement>();
			List<VLink> links = new ArrayList<VLink>();
			// response for addElement
			if (actionfound) {
				log.debug("Before Checking map contains elems");
				
				for (int i = 0; i < nodeids.length; i++) {
					int elemId = nodeids[i].intValue();
					if (map.containsElement(elemId, type)) {
						log.debug("Action: " + action + " . Map Contains Element: " + elemId+type);
						continue;
						
					}

					VElement curVElem = manager.newElement(elemId, type);
					//set real-time data to -1 to force refresh always
					velems.add(curVElem);
				} // end for

				//get links and add elements to map
				if (velems != null) {
					map.addElements(velems);
					links = manager.getLinks(map.getAllElements());
				}
				
				log.debug("After getting/adding links");
	
			} 				
			bw.write(ResponseAssembler.getAddElementResponse(action, velems, links));
		} catch (Exception e) {
			log.error("Error while adding nodes for action: "+action,e);
			bw.write(ResponseAssembler.getMapErrorResponse(action));
		} finally {
			bw.close();
		}

		return null;
	}

