	public void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		ThreadCategory.setPrefix(MapsConstants.LOG4J_CATEGORY);
		log = ThreadCategory.getInstance(this.getClass());
		log.info("Loading maps");
		String action = request.getParameter("action");
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(response
				.getOutputStream()));
		String strToSend = action + "OK";

		HttpSession session = request.getSession(false);
		Manager m = (Manager)session.getAttribute("manager");
		try {
			m.startSession();
		} catch (MapsException e1) {
			log.error("Error while starting Manager session "+e1);
		}

		String user = request.getRemoteUser();
		String role = null;
		if (request.isUserInRole(Authentication.ADMIN_ROLE)) {
			role=Authentication.ADMIN_ROLE;
		}else if (request.isUserInRole(Authentication.USER_ROLE)) {
			role=Authentication.USER_ROLE;
		}

		List visibleMapsList = new ArrayList();
		
		try {
			if (action.equals(MapsConstants.LOADMAPS_ACTION)) {
				visibleMapsList = m.getVisibleMapsMenu(user, role);
				// create the string containing the main informations about all maps
				// defined:
				// the string will have the form:
				// mapid1,mapname1,mapowner1-mapid2,mapname2,mapowner2...
				for (int i = 0; i < visibleMapsList.size(); i++) {
					if (i > 0) {
						strToSend += "&";
					}
					strToSend += mapToString((MapMenu) visibleMapsList.get(i));
		
				}
			} else {
				strToSend = MapsConstants.LOADMAPS_ACTION + "Failed";
			}

		} catch (MapsException e) {
			log.error("Error while getting visible maps for user "+user+ " and role "+role);
			log.error(e);
			strToSend = MapsConstants.LOADMAPS_ACTION + "Failed";
		}finally {
			bw.write(strToSend);
			bw.close();
			log.info("Sending response to the client '" + strToSend + "'");
			try {
				m.endSession();
			} catch (MapsException e1) {
				log.error("Error while ending Manager session "+e1);
			}
		}
	}

