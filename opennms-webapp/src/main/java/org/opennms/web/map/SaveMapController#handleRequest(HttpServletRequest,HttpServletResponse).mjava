	public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response)
			throws IOException {

		ThreadCategory.setPrefix(MapsConstants.LOG4J_CATEGORY);
		log = ThreadCategory.getInstance(this.getClass());
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(response
				.getOutputStream()));
		if (!manager.isUserAdmin()) {
			log.warn("User is not in Admin mode, cannot save");
			bw.write(ResponseAssembler.getMapErrorResponse(MapsConstants.SAVEMAP_ACTION));
			bw.close();
			return null;
			
		}
			
		String mapName = request.getParameter("MapName");
		String mapBackground = request.getParameter("MapBackground");
		int mapWidth = Integer.parseInt(request.getParameter("MapWidth"));
		int mapHeight = Integer.parseInt(request.getParameter("MapHeight"));
		
		String query = request.getQueryString();
		String queryNodes = request.getParameter("Nodes");
		String packetStr = request.getParameter("packet");
		String totalPacketsStr = request.getParameter("totalPackets");
		
		if (log.isDebugEnabled())
			log.debug("Saving map " + mapName + " the query received is '" + query + "'");
		

		try {
			if (!manager.isUserAdmin()) {
				throw new MapsException("User not admin: cannot save map");
			}
			VMap map = manager.openMap();

			if ((packetStr == null && totalPacketsStr == null)
					|| (packetStr.equals("1"))) {
				if (log.isDebugEnabled())
					log.debug("Instantiating new elems ArrayList");
				elems = new ArrayList<VElement>();
			}

			StringTokenizer st = new StringTokenizer(queryNodes, "*");
			while (st.hasMoreTokens()) {
				String nodeToken = st.nextToken();
				StringTokenizer nodeST = new StringTokenizer(nodeToken, ",");
				int counter = 1;
				String icon = "";
				String type = Element.NODE_TYPE;

				int id = 0, x = 0, y = 0;
				while (nodeST.hasMoreTokens()) {
					String tmp = nodeST.nextToken();
					if (counter == 1) {
						id = Integer.parseInt(tmp);
					}
					if (counter == 2) {
						x = Integer.parseInt(tmp);
					}
					if (counter == 3) {
						y = Integer.parseInt(tmp);
					}
					if (counter == 4) {
						icon = tmp;
					}
					if (counter == 5) {
						type = tmp;
					}
					counter++;
				}
				VElement ve = null;
				if (!type.equals(Element.NODE_TYPE)
						&& !type.equals(Element.MAP_TYPE)) {
					throw new MapsException("Map element type " + type
							+ " not valid! Valid values are:"
							+ Element.NODE_TYPE + " and "
							+ Element.MAP_TYPE);
				}
				log.debug("adding map element to map with id " + id
						+ " and type " + type);
				ve = manager.newElement(map.getId(), id, type, icon, x, y);
				elems.add(ve);
			}
			// add elements and save if is a no-packet session or if is the
			// last packet
			if ((packetStr == null && totalPacketsStr == null)
					|| (packetStr.equals(totalPacketsStr))) {
				
				log.info("SaveMap: removing all links and elements.");
				map.removeAllLinks();
				map.removeAllElements();
				log.info("SaveMap: saving all elements.");
				
				Iterator it = elems.iterator();
				while (it.hasNext()) {
					map.addElement((VElement) it.next());
				}
				
				map.setUserLastModifies(request.getRemoteUser());
				map.setName(mapName);
				map.setBackground(mapBackground);
				map.setWidth(mapWidth);
				map.setHeight(mapHeight);
				
				if (map.isNew())
					map.setType(VMap.USER_GENERATED_MAP);
				manager.save(map);
				
				log.info("Map saved");
			}
			bw.write(ResponseAssembler.getSaveMapResponse(MapsConstants.SAVEMAP_ACTION, map, packetStr, totalPacketsStr));
		} catch (Exception e) {
			log.error("Map save error: " + e,e);
			bw.write(ResponseAssembler.getMapErrorResponse(MapsConstants.SAVEMAP_ACTION));
		} finally {
			bw.close();
			log.info("Sending response to the client");
		}
		return null;
	}

