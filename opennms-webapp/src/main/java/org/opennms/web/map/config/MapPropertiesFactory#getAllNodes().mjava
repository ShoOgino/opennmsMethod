	private Set getAllNodes()throws MapsException{
		Connection conn=null;
		Statement stmt = null;
		ResultSet rs = null;
		HashSet nodes = new HashSet();
		try {
			conn = Vault.getDbConnection();
			String sqlQuery = "select distinct nodeid from ipinterface";
			stmt = conn.createStatement();
			rs = stmt.executeQuery(sqlQuery);
			// add all matching nodes (id) with the source to the Set.
			while (rs.next()) {
				nodes.add(new Integer(rs.getInt(1)));
			}
			rs.close();
			stmt.close();
			conn.close();
		}catch(Exception e){
			throw new MapsException("Exception while getting all nodes "+e);
		}
		return nodes;
	}
	/*private static void reloadNodesPerSource() {
		nodesPerSource = new HashMap();
		Connection conn=null;
		Statement stmt = null;
		ResultSet rs = null;
		try {
			conn = Vault.getDbConnection();
			Iterator it = sourcesMap.keySet().iterator();
			while (it.hasNext()) {
				String key = (String) it.next();
				DataSource dataSource = (DataSource) sourcesMap.get(key);
				Filter[] filters = dataSource.getFilters();
				String sqlQuery = null;
				// contructs and execute the query
				if (filters != null) {
					sqlQuery = "select distinct " + filters[0].table + ".nodeid from ";
					for (int i = 0; i < filters.length; i++) {
						sqlQuery += filters[i].table;
						if (i < filters.length - 1) {
							sqlQuery += ",";
						}
					}
					sqlQuery += " where ";
					for (int i = 0; i < filters.length; i++) {
						sqlQuery += filters[i].condition;
						if (i < filters.length - 1) {
							sqlQuery += " AND ";
						}
					}
					log.debug("Applying filters for source "+key+" '"+sqlQuery+"'");
					HashSet nodes = new HashSet();
					stmt = conn.createStatement();
					rs = stmt.executeQuery(sqlQuery);
					// add all matching nodes (id) with the source to the Set.
					while (rs.next()) {
						nodes.add(new Integer(rs.getInt(1)));
					}
					nodesPerSource.put(key, nodes);
				}
			}
		} catch (Exception s) {
			log.error(s);
			throw new RuntimeException(s);
		} finally {
			try {
				rs.close();
				stmt.close();
				Vault.releaseDbConnection(conn);
			} catch (Exception e) {
				log.error(e);
				throw new RuntimeException(e);
			}
		}
		Iterator it = nodesPerSource.keySet().iterator();
		while(it.hasNext()){
			String sourceName = (String)it.next();
			HashSet nodes = (HashSet) nodesPerSource.get(sourceName);
			log.debug("found association source/nodes -> "+sourceName+"/"+nodes.toString());
		}

	}*/

