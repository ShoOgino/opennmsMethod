    /** {@inheritDoc} */
    public Set<LinkInfo> getLinksOnElements(Set<Integer> allnodes)
            throws MapsException {
        log.debug("getLinksOnElements " + allnodes);
        Set<LinkInfo> nodes = null;
        Connection conn = createConnection();
        try {
            nodes = new HashSet<LinkInfo>();
            if (allnodes == null || allnodes.size() == 0)
                return nodes;
            String nodelist = "";
            Iterator<Integer> ite = allnodes.iterator();
            while (ite.hasNext()) {
                nodelist += ite.next();
                if (ite.hasNext())
                    nodelist += ",";
            }

            Statement stmt = conn.createStatement();

            String sql = "SELECT "
                + "datalinkinterface.id, datalinkinterface.nodeid, ifindex,nodeparentid, " 
                + "parentifindex, status, linktypeid," 
                + "snmpiftype,snmpifspeed,snmpifoperstatus,snmpifadminstatus "
                + "FROM datalinkinterface "
                + "left join snmpinterface on nodeparentid = snmpinterface.nodeid "
                + "WHERE"
                + " (datalinkinterface.nodeid IN ("
                + nodelist
                + ")"
                + " AND nodeparentid in ("
                + nodelist
                + ")) "
                + "AND status != 'D' and datalinkinterface.parentifindex = snmpinterface.snmpifindex";

            log.debug("getLinksOnElements: executing query:\n " + sql);
            ResultSet rs = stmt.executeQuery(sql);
            
            while (rs.next()) {
                int id = -1;
                int nodeid = -1;
                int ifindex = -1;
                int nodeparentid = -1;
                int parentifindex = -1;
                int linktypeid = -1;
                String status = "U";
                
                int snmpiftype = -1;
                long snmpifspeed = -1;
                int snmpifoperstatus = -1;
                int snmpifadminstatus = -1;

                Object element = new Integer(rs.getInt("id"));
                if (element != null) {
                    id = ((Integer) element);
                }
    
                element = new Integer(rs.getInt("nodeid"));
                if (element != null) {
                    nodeid = ((Integer) element);
                }

                element = new Integer(rs.getInt("ifindex"));
                if (element != null) {
                    ifindex = ((Integer) element);
                }

                element = new Integer(rs.getInt("nodeparentid"));
                if (element != null) {
                    nodeparentid = ((Integer) element);
                }

                element = new Integer(rs.getInt("parentifindex"));
                if (element != null) {
                    parentifindex = ((Integer) element);
                }

                element = new String(rs.getString("status"));
                if (element != null) {
                    status = ((String) element);
                }
                
                element = new Integer(rs.getInt("linktypeid"));
                if (element != null) {
                    linktypeid = ((Integer) element);
                }

                element = new Integer(rs.getInt("snmpiftype"));
                if (element != null) {
                    snmpiftype = ((Integer) element);
                }
    
                element = new Long(rs.getLong("snmpifspeed"));
                if (element != null) {
                    snmpifspeed = ((Long) element);
                }
    
                element = new Integer(rs.getInt("snmpifoperstatus"));
                if (element != null) {
                    snmpifoperstatus = ((Integer) element);
                }
    
                element = new Integer(rs.getInt("snmpifadminstatus"));
                if (element != null) {
                    snmpifadminstatus = ((Integer) element);
                }
                log.debug("getLinksOnElements: id="+id);
                LinkInfo link = new LinkInfo(id, nodeid, ifindex,
                                             nodeparentid, parentifindex,
                                             snmpiftype, snmpifspeed,
                                             snmpifoperstatus,
                                             snmpifadminstatus, status,linktypeid);
    
                nodes.add(link);
            }
            rs.close();

            sql = "SELECT "
                    + "datalinkinterface.id, datalinkinterface.nodeid, ifindex,nodeparentid, " 
                    + "parentifindex, status, linktypeid, " 
                    + "snmpiftype,snmpifspeed,snmpifoperstatus,snmpifadminstatus "
                    + "FROM datalinkinterface "
                    + "left join snmpinterface on datalinkinterface.nodeid = snmpinterface.nodeid "
                    + "WHERE"
                    + " (datalinkinterface.nodeid IN ("
                    + nodelist
                    + ")"
                    + " AND nodeparentid in ("
                    + nodelist
                    + ")) "
                    + "AND status != 'D' and datalinkinterface.ifindex = snmpinterface.snmpifindex";

            log.debug("getLinksOnElements: executing query:\n" + sql);
            rs = stmt.executeQuery(sql);
            
            while (rs.next()) {
                int id = -1;
                int nodeid = -1;
                int ifindex = -1;
                int nodeparentid = -1;
                int parentifindex = -1;
                int linktypeid = -1;
                String status = "U";

                int snmpiftype = -1;
                long snmpifspeed = -1;
                int snmpifoperstatus = -1;
                int snmpifadminstatus = -1;

                Object element = new Integer(rs.getInt("id"));
                if (element != null) {
                    id = ((Integer) element);
                }

                element = new Integer(rs.getInt("nodeid"));
                if (element != null) {
                    nodeid = ((Integer) element);
                }

                element = new Integer(rs.getInt("ifindex"));
                if (element != null) {
                    ifindex = ((Integer) element);
                }

                element = new Integer(rs.getInt("nodeparentid"));
                if (element != null) {
                    nodeparentid = ((Integer) element);
                }

                element = new Integer(rs.getInt("parentifindex"));
                if (element != null) {
                    parentifindex = ((Integer) element);
                }
                
                element = new String(rs.getString("status"));
                if (element != null) {
                    status = ((String) element);
                }
                
                element = new Integer(rs.getInt("linktypeid"));
                if (element != null) {
                    linktypeid = ((Integer) element);
                }

                element = new Integer(rs.getInt("snmpiftype"));
                if (element != null) {
                    snmpiftype = ((Integer) element);
                }

                element = new Long(rs.getLong("snmpifspeed"));
                if (element != null) {
                    snmpifspeed = ((Long) element);
                }

                element = new Integer(rs.getInt("snmpifoperstatus"));
                if (element != null) {
                    snmpifoperstatus = ((Integer) element);
                }

                element = new Integer(rs.getInt("snmpifadminstatus"));
                if (element != null) {
                    snmpifadminstatus = ((Integer) element);
                }
                log.debug("getLinksOnElements: id="+id);
                LinkInfo link = new LinkInfo(id, nodeid, ifindex,
                                             nodeparentid, parentifindex,
                                             snmpiftype, snmpifspeed,
                                             snmpifoperstatus,
                                             snmpifadminstatus, status,linktypeid);

                nodes.add(link);
            }
            rs.close();
 
            sql = "SELECT "
                    + "id,nodeid, ifindex,nodeparentid, parentifindex, status, linktypeid "
                    + "FROM datalinkinterface " + "WHERE" + " (nodeid IN ("
                    + nodelist + ")" + " AND nodeparentid in (" + nodelist
                    + ")) " + "AND status != 'D'";

            log.debug("getLinksOnElements: executing query:\n" + sql);
            rs = stmt.executeQuery(sql);

            while (rs.next()) {
                int id = -1;
                int nodeid = -1;
                int ifindex = -1;
                int nodeparentid = -1;
                int parentifindex = -1;
                int linktypeid = -1;
                String status = "U";
                
                int snmpiftype = -1;
                long snmpifspeed = -1;
                int snmpifoperstatus = -1;
                int snmpifadminstatus = -1;

                Object element = new Integer(rs.getInt("id"));
                if (element != null) {
                    id = ((Integer) element);
                }

                element = new Integer(rs.getInt("nodeid"));
                if (element != null) {
                    nodeid = ((Integer) element);
                }

                element = new Integer(rs.getInt("ifindex"));
                if (element != null) {
                    ifindex = ((Integer) element);
                }

                element = new Integer(rs.getInt("nodeparentid"));
                if (element != null) {
                    nodeparentid = ((Integer) element);
                }

                element = new Integer(rs.getInt("parentifindex"));
                if (element != null) {
                    parentifindex = ((Integer) element);
                }
                
                element = new String(rs.getString("status"));
                if (element != null) {
                    status = ((String) element);
                }
                
                element = new Integer(rs.getInt("linktypeid"));
                if (element != null) {
                    linktypeid = ((Integer) element);
                }

                log.debug("getLinksOnElements: id="+id);
                LinkInfo link = new LinkInfo(id, nodeid, ifindex,
                                             nodeparentid, parentifindex,
                                             snmpiftype, snmpifspeed,
                                             snmpifoperstatus,
                                             snmpifadminstatus, status,linktypeid);

                nodes.add(link);
            }

            rs.close();
            stmt.close();

        } catch (Throwable e) {
            log.error(
                      "Exception while getting links on elements " + allnodes,
                      e);
            throw new MapsException(e);
        } finally {
            releaseConnection(conn);
        }
        return nodes;

    }

