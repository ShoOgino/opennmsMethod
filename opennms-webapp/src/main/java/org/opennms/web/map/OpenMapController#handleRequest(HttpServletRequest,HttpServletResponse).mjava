	public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws IOException {
		
		ThreadCategory.setPrefix(MapsConstants.LOG4J_CATEGORY);
		log = ThreadCategory.getInstance(this.getClass());
		String mapIdStr = request.getParameter("MapId");
		
		
		String user = request.getRemoteUser();
		
		String role = MapsConstants.ROLE_USER;

		if ((manager.isUserAdmin())) {
			role=MapsConstants.ROLE_ADMIN;
			log.info("Admin mode");
		}					

		float widthFactor = 1;
		float heightFactor =1;
		
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(response
				.getOutputStream()));

		try {
			MapStartUpConfig config = null;
			config=manager.getMapStartUpConfig();
			int mapWidth = config.getScreenWidth();
			int mapHeight = config.getScreenHeight();

			log.debug("Current mapWidth=" + mapWidth
						+ " and MapHeight=" + mapHeight);
			VMap map = null;
			if(mapIdStr!=null){
				int mapid = WebSecurityUtils.safeParseInt(mapIdStr);
				log.debug("Opening map "+mapid+" for user "+user);
				map = manager.openMap(mapid, user, !manager.isAdminMode());
			}else{
				log.debug("Opening map without passing mapid");
				map = manager.openMap();
			}
			 

			if(map != null){
				int oldMapWidth = map.getWidth();
				int oldMapHeight = map.getHeight();
				widthFactor = (float) mapWidth / oldMapWidth;
				heightFactor = (float) mapHeight / oldMapHeight;

				log.debug("Old saved mapWidth=" + oldMapWidth
						+ " and MapHeight=" + oldMapHeight);
				log.debug("widthFactor=" + widthFactor);
				log.debug("heightFactor=" + heightFactor);
				log.debug("Setting new width and height to the session map");
				
				map.setHeight(mapHeight);
				map.setWidth(mapWidth);
				map.setAccessMode(role);
				
			}
			
			bw.write(ResponseAssembler.getMapResponse(MapsConstants.OPENMAP_ACTION, map,widthFactor,heightFactor,true));

		} catch (Exception e) {
			log.error("Error while opening map with id:"+mapIdStr+", for user:"+user+", and role:"+role,e);
			bw.write(ResponseAssembler.getMapErrorResponse(MapsConstants.OPENMAP_ACTION));
		} finally {
			bw.close();
		}

		return null;
	}

