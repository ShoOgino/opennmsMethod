	public void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		BufferedWriter bw = null;
		try {
			ThreadCategory.setPrefix(MapsConstants.LOG4J_CATEGORY);
			log = ThreadCategory.getInstance(this.getClass());
			bw = new BufferedWriter(new OutputStreamWriter(response
					.getOutputStream()));

			SharedChanges sharedChanges = (SharedChanges)getServletContext().getAttribute("MapSharedChanges");
			if(sharedChanges==null){
				log.error("No MapSharedChanges found. Creating a new one.");
				return;
			}
			ServletInputStream sis = request.getInputStream();
			 BufferedInputStream buf=new BufferedInputStream(sis);//for better performance
			 ByteArrayOutputStream output = new ByteArrayOutputStream(1024);
			 byte[] buffer=new byte[1024];//byte buffer
			 int bytesRead=0;
			 while (true){
				 bytesRead=buf.read(buffer,0,1024);
	//			 bytesRead returns the actual number of bytes read from
	//			 the stream. returns -1 when end of stream is detected
				 if (bytesRead == -1) break;
				 output.write(buffer,0,bytesRead);
				 }
		 	
			if(buf!=null)buf.close();
			String nodeChangeXml = output.toString();
			log.info("Received node change xml:");
			log.info(nodeChangeXml);
			StringReader sr = new StringReader(nodeChangeXml);
			NodeChange nch = (NodeChange) NodeChange.unmarshal(sr);
			log.info("adding it to sharedChanges object");
			
			synchronized (sharedChanges) {
				sharedChanges.addChangedNode(nch);
				getServletContext().setAttribute("MapSharedChanges", sharedChanges);
				log.debug("NotifyAll on MapSharedChanges");
				sharedChanges.notifyAll();
				log.debug("did NotifyAll.");
			}
		} catch (Exception e) {
			if (bw == null) {
				bw = new BufferedWriter(new OutputStreamWriter(response
						.getOutputStream()));
			}
			bw.write("Failed");
			log.error("Failure: "+e,e);
		}finally{
			bw.close();
		}
	}

