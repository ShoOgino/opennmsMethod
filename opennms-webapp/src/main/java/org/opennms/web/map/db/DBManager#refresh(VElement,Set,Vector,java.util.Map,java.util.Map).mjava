    private VElement refresh(VElement mapElement, Set nodesBySource, Vector deletedNodeids, java.util.Map outagedNodes,java.util.Map avails) throws MapsException {
		VElement ve = (VElement) mapElement.clone();
		if (log.isDebugEnabled())
			log.debug("refreshElements: parsing VElement ID " + ve.getId()
					+ ve.getType() + ", label:"+ve.getLabel()+" with node by sources: " +nodesBySource.toString() + " deletedNodeids: " + deletedNodeids.toString()
					+ " outagedNode: " +outagedNodes.keySet().toString());

		double elementAvail = defaultEnableFalseAvail.getMin();
		int elementStatus = defaultStatusId;
		float elementSeverity = defaultSeverityId;

		
		// get status, severity and availability: for each node, look for alternative data
		// sources; if no source is found or if the data is not retrieved, use opennms. 
		if (ve.isNode()) {
			ve.setLabel(getNodeLabel(ve.getId()));
			//FIRST: get data from OpenNMS
			if(deletedNodeids.contains(new Integer(ve.getId()))){
				elementAvail = undefinedAvail.getMin();
				elementStatus=unknownStatusId;
				elementSeverity = indeterminateSeverityId;
			} else{ //if the node isn't deleted
				
				if (nodesBySource.contains(new Integer(ve.getId()))) {
					org.opennms.web.map.datasources.DataSourceInterface dataSourceToUse = getDataSourceImplementation();
					Object id = new Integer(ve.getId());
					log.debug("getting status from alternative source " + dataSourceToUse.getClass().getName());
					int status = dataSourceToUse.getStatus(id);
					if (status >= 0) {
						elementStatus = status;
						log.debug("got status from alternative source. Value is "+elementStatus);
					}
					
					int sev = dataSourceToUse.getSeverity(id);
					if (sev >= 0) {
						elementSeverity = sev;
						log.debug("got severity from alternative source. Value is "+sev);
					} 
					if (availEnabled) {
						double avail = dataSourceToUse.getAvailability(id);
						if (avail >= 0) {
							elementAvail = avail;
							log.debug("got availability from alternative source. Value is "+avail);
						} 
					}
				} else {
					OutageInfo oi = (OutageInfo) outagedNodes.get(new Integer(ve.getId()));
					if (oi != null) {
						elementStatus = oi.getStatus();
						elementSeverity= oi.getSeverity();
					}
	  				if (availEnabled) {
	   					elementAvail =((Double) avails.get(new Integer(ve.getId()))).doubleValue();
	   				}				
					
				}
			}				
		} else { // the element is a Map
			log.debug("Calculating severity for submap Element " + ve.getId()
					+ " using '" + calculateSeverityAs + "' mode.");
			Set nodesonve = getNodeidsOnElement(ve);
			if (nodesonve != null && nodesonve.size() > 0) {
				log.debug("found nodes on Map element :" + nodesonve.toString());
				elementAvail = defaultEnableFalseAvail.getMin();
				float sev = 0;
				if (calculateSeverityAs.equalsIgnoreCase("worst")
						|| calculateSeverityAs.equalsIgnoreCase("best")) {
					sev = defaultSeverityId;
				}
				Iterator ite = nodesonve.iterator();
				while (ite.hasNext()) {
					Integer nextNodeId = (Integer) ite.next();
					if(deletedNodeids.contains(nextNodeId)){
						elementAvail = undefinedAvail.getMin();
						elementStatus=unknownStatusId;
						elementSeverity = indeterminateSeverityId;
					}else{ //if the node isn't deleted
						if (nodesBySource.contains(nextNodeId)) {
							org.opennms.web.map.datasources.DataSourceInterface dataSourceToUse = getDataSourceImplementation();
							int st = dataSourceToUse.getStatus(nextNodeId);
							if (st >= 0) {
								if (st < elementStatus) {
									elementStatus = st;
								}
								log.debug("got status from alternative source. Value is "+st);
							}

							int tempSeverity = dataSourceToUse.getSeverity(nextNodeId);
							if (tempSeverity >= 0) {
								log.debug("got severity from alternative source. Value is "+tempSeverity);
								if (calculateSeverityAs.equalsIgnoreCase("avg")) {
									sev += tempSeverity;
								} else if (calculateSeverityAs
										.equalsIgnoreCase("worst")) {
									if (sev > tempSeverity) {
										sev = tempSeverity;
									}
								} else if (calculateSeverityAs
										.equalsIgnoreCase("best")) {
									if (sev < tempSeverity) {
										sev = tempSeverity;
									}
								}
							} 	
							if (availEnabled) {
								double avail = dataSourceToUse.getAvailability(nextNodeId);
								if (avail >= 0) {
									elementAvail = avail;
									log.debug("got availability from alternative source. Value is "+avail);
								} 
							}
							
						} else {
							OutageInfo oi = (OutageInfo) outagedNodes.get(nextNodeId);
							if (oi != null) {
								elementStatus = oi.getStatus();
								float tempSeverity= oi.getSeverity();
								if (tempSeverity >= 0) {
									if (calculateSeverityAs.equalsIgnoreCase("avg")) {
										sev += tempSeverity;
									} else if (calculateSeverityAs
											.equalsIgnoreCase("worst")) {
										if (sev > tempSeverity) {
											sev = tempSeverity;
										}
									} else if (calculateSeverityAs
											.equalsIgnoreCase("best")) {
										if (sev < tempSeverity) {
											sev = tempSeverity;
										}
									}
								} 	
							}
			  				if (availEnabled) {
			   					elementAvail =((Double) avails.get(nextNodeId)).doubleValue();
			   				}	
							
						}
					}
				}
				if (calculateSeverityAs.equalsIgnoreCase("avg")) {
					elementSeverity = sev / nodesonve.size();
				} else {
					elementSeverity = sev;
				}
			} else {
				log.debug("no nodes on Map element found");
			}
		}
		

		if (log.isDebugEnabled())
			log.debug("refreshElement: element avail/status/severity "
					+ elementAvail + "/" + elementStatus + "/"
					+ elementSeverity);

		ve.setRtc(elementAvail);
		ve.setStatus(elementStatus);
		ve.setSeverity(new BigDecimal(elementSeverity + 1 / 2).intValue());
		return ve;
	}

