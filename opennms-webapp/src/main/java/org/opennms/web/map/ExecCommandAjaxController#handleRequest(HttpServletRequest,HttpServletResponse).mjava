    /** {@inheritDoc} */
    @Override
    public ModelAndView handleRequest(HttpServletRequest request,
            HttpServletResponse response) throws IOException {
        ThreadCategory.setPrefix(MapsConstants.LOG4J_CATEGORY);
        log = ThreadCategory.getInstance(this.getClass());


        String id = request.getParameter("id");

        String command = request.getParameter("command");
        
        String address = request.getParameter("address");

        
        response.setBufferSize(0);
        response.setContentType("text/html");
        response.setHeader("pragma", "no-Cache");
        response.setHeader("Expires", "0");
        response.setHeader("Cache-Control", "no-Cache");
        
        final OutputStreamWriter os = new OutputStreamWriter(
                                                             response.getOutputStream(),
                                                             "UTF-8");        
        try {
            final Command p;
            if (id == null) {
                if (command == null )
                    throw new IllegalArgumentException("Command or id is required");
                if (address == null )
                    throw new IllegalArgumentException("Address is required");
                
                if ( NetworkElementFactory.getInstance(getServletContext()).getInterfacesWithIpAddress(address).length == 0 ) {
                    os.write("NOADDRESSINDATABASE");
                } else if (!manager.checkCommandExecution()) {
                    os.write("NOEXECUTIONALLOWED");
                } else {
                    String commandToExec = getCommandToExec(request,command,address);
                    p = new Command(commandToExec);
                    log.info("Executing " + commandToExec);
                    os.write(manager.execCommand(p));
                }
            } else {
                log.info("Getting output for id: " + id);
                p=manager.getCommand(id);
                String s = p.getNextLine();
                if (p.runned() && s == null) {
                    log.info("Process ended and no more output for id: " + id);
                    manager.removeCommand(id);
                    os.write("END");
                } else {
                    if (s == null ) {
                        os.write("BLANCK");
                        log.debug("no lines in buffer found");
                    } else {
                        os.write(s);
                        log.debug("Got line: " + s);
                    }
                }
            }
        } catch (Throwable e) {
            log.error("An error occourred while executing command.", e);
            os.write("ERROR");
        } finally {
            os.flush();
            os.close();
        }

        return null;
    }

