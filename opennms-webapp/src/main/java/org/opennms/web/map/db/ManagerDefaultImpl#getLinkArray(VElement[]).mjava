    private VLink[] getLinkArray(VElement[] elems) throws MapsException {
    	if (elems == null) return null;
        String multilinkStatus = mapsPropertiesFactory.getMultilinkStatus();
    	List<VLink> links = new ArrayList<VLink>();
        
    	java.util.Map<Integer,Set<VElement>> node2Element = new HashMap<Integer,Set<VElement>>();
    	
    	HashSet<Integer> allNodes = new HashSet<Integer>();

    	for (int i = 0; i < elems.length; i++) {
    		for (Integer nodeid: getNodeidsOnElement(elems[i])) {	        		
         	    allNodes.add(nodeid);
	    		Set<VElement> elements = node2Element.get(nodeid);
	    		if (elements == null) {
                    elements = new java.util.HashSet<VElement>();
                }
	    		elements.add(elems[i]);
	    		node2Element.put(nodeid,elements);
	    	}
	    }
		
    	for (LinkInfo linfo: dbManager.getLinksOnElements(allNodes)) {
    		log.debug("Found link: node1:"+linfo.nodeid+" node2: "+linfo.nodeparentid);
    		log.debug("Getting linkinfo for nodeid "+linfo.nodeid);
    		if (!node2Element.containsKey(linfo.nodeid)) 
    		    continue;
            if (!node2Element.containsKey(linfo.nodeparentid)) 
                continue;
    		for (VElement first: node2Element.get(linfo.nodeid)) {
	    		log.debug("Getting linkinfo for nodeid "+linfo.nodeparentid);
	            for (VElement second: node2Element.get(linfo.nodeparentid)) {
	    			if (first.hasSameIdentifier(second)) {
                        continue;
                    }
	    			VLink vlink = new VLink(first,second);
	    			vlink.setLinkStatus(getLinkStatus(linfo));
	    			vlink.setLinkTypeId(getLinkTypeId(linfo));
	    			vlink.setLinkInfo(linfo);
	    			int index = links.indexOf(vlink);
	    			if(index!=-1){
	    				VLink alreadyIn = links.get(index);
	    				if(alreadyIn.equals(vlink)){
	    					if(multilinkStatus.equals(MapPropertiesFactory.MULTILINK_BEST_STATUS)){
	    						if(vlink.getLinkOperStatus()<alreadyIn.getLinkOperStatus()){
	    							log.debug("removing to the array link "+alreadyIn.toString()+ " with status "+alreadyIn.getLinkOperStatus());
	    							links.remove(index);
	    							links.add(vlink);
	    							log.debug("adding to the array link "+vlink.toString()+ " with status "+vlink.getLinkOperStatus());
	    						}
	    					}else if(vlink.getLinkOperStatus()>alreadyIn.getLinkOperStatus()){
	    						log.debug("removing to the array link "+alreadyIn.toString()+ " with status "+alreadyIn.getLinkOperStatus());
    							links.remove(index);
    							links.add(vlink);
    							log.debug("adding to the array link "+vlink.toString()+ " with status "+vlink.getLinkOperStatus());
    						}
	    				}
	    			}else{
		    			log.debug("adding link ("+vlink.hashCode()+") "+vlink.getFirst().getId()+"-"+vlink.getSecond().getId());
		    			links.add(vlink);
	    			}
	    		}   			
    		}
    	}
        return links.toArray(new VLink[0]);
    }

