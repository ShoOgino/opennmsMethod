    private List<VLink> getLinks(Collection<VElement> elems) throws MapsException {
        if (elems == null)
            return null;
        String multilinkStatus = mapsPropertiesFactory.getMultilinkStatus();
        List<VLink> links = new ArrayList<VLink>();
        Map<String,List<VLink>> singlevlinkmap = new HashMap<String,List<VLink>>();
        Map<String,VLink> multivlinkmap = new HashMap<String,VLink>();
        Map<String,Integer> numberofsinglelinksmap = new HashMap<String,Integer>();

        java.util.Map<Integer, Set<VElement>> node2Element = new HashMap<Integer, Set<VElement>>();

        HashSet<Integer> allNodes = new HashSet<Integer>();

        for (VElement ve : elems) {
            for (Integer nodeid : getNodeidsOnElement(ve)) {
                allNodes.add(nodeid);
                Set<VElement> elements = node2Element.get(nodeid);
                if (elements == null) {
                    elements = new java.util.HashSet<VElement>();
                }
                elements.add(ve);
                node2Element.put(nodeid, elements);
            }
        }

        for (LinkInfo linfo : dbManager.getLinksOnElements(allNodes)) {
            LOG.debug("Found link: node1:{} node2: {}", linfo.nodeid, linfo.nodeparentid);
            LOG.debug("Getting linkinfo for nodeid {}", linfo.nodeid);
            
            for (VElement first : node2Element.get(linfo.nodeid)) {
                LOG.debug("Getting linkinfo for nodeid {}", linfo.nodeparentid);
                for (VElement second : node2Element.get(linfo.nodeparentid)) {
                    if (first.hasSameIdentifier(second)) {
                        continue;
                    }
                    
                    int status=getLinkStatus(linfo);
                    String statusString = getLinkStatusString(status);
 
                    VLink vlink = new VLink(first.getId(), first.getType(),
                                            second.getId(), second.getType(), getLinkTypeId(linfo));
                    vlink.setLinkStatusString(statusString);
                    vlink.increaseStatusMapLinks(statusString);
                    Set<Integer> nodeids=vlink.getNodeids();
                    nodeids.add(linfo.nodeid);
                    nodeids.add(linfo.nodeparentid);
                    vlink.setNodeids(nodeids);
                    LOG.debug("adding new link as single link: {}", vlink.toString());
                    
                    List<VLink> templinks=null;
                    if (singlevlinkmap.containsKey(vlink.getId())) {
                        templinks=singlevlinkmap.get(vlink.getId());
                    } else {
                        templinks = new ArrayList<VLink>();
                    }
                    templinks.add(vlink);
                    singlevlinkmap.put(vlink.getId(), templinks);
                    
                    int numberofelement=1;
                    if (numberofsinglelinksmap.containsKey(vlink.getIdWithoutLinkType())) {
                        numberofelement = numberofsinglelinksmap.get(vlink.getIdWithoutLinkType());
                        numberofelement++;
                    }
                    numberofsinglelinksmap.put(vlink.getIdWithoutLinkType(), numberofelement);
                    LOG.debug("updated link counter between elements: {} Found #{}", vlink.getIdWithoutLinkType(), numberofelement);


                    VLink vmultilink = new VLink(first.getId(), first.getType(),
                                                 second.getId(), second.getType(), getLinkTypeId(linfo));
                    vmultilink.setLinkStatusString(statusString);
                    vmultilink.increaseStatusMapLinks(statusString);
                    if (multivlinkmap.containsKey(vmultilink.getId())) {
                        VLink alreadyIn = multivlinkmap.get(vmultilink.getId());
                        int numberOfLinks = alreadyIn.increaseLinks();
                        LOG.debug("Updated {} on Link: {}", numberOfLinks, alreadyIn.getId());
                        int numberOfLinkwithStatus = alreadyIn.increaseStatusMapLinks(statusString);
                        LOG.debug("Updated Status Map: found: {} links with Status: {}", numberOfLinkwithStatus, statusString );
                        if ( ( multilinkStatus.equals(MapPropertiesFactory.MULTILINK_BEST_STATUS) 
                               && status < getLinkStatusInt(alreadyIn.getLinkStatusString())
                             ) 
                          || ( multilinkStatus.equals(MapPropertiesFactory.MULTILINK_WORST_STATUS) 
                               && status > getLinkStatusInt(alreadyIn.getLinkStatusString())
                             )
                            ) {
                            LOG.debug("Upgrading with Link info becouse multilink.status={}", multilinkStatus);
                            LOG.debug("updating existing the link {} with status {}", alreadyIn.toString(), alreadyIn.getLinkStatusString());

                            LOG.debug("setting link properties: {} with new found status {}", vmultilink.toString(), vmultilink.getLinkStatusString());
                            alreadyIn.setLinkStatusString(statusString);
                        }
                        nodeids=alreadyIn.getNodeids();
                        nodeids.add(linfo.nodeid);
                        nodeids.add(linfo.nodeparentid);
                        alreadyIn.setNodeids(nodeids);
                        LOG.debug("updating multi link: {}", alreadyIn.toString());
                        multivlinkmap.put(alreadyIn.getId(),alreadyIn);
                    } else {
                        Set<Integer> vmnodeids=vmultilink.getNodeids();
                        vmnodeids.add(linfo.nodeid);
                        vmnodeids.add(linfo.nodeparentid);
                        vmultilink.setNodeids(vmnodeids);
                        LOG.debug("adding multi link: {}", vmultilink.toString());
                        multivlinkmap.put(vmultilink.getId(),vmultilink);
                    }
                } // end second element for
            } //end first element for
        } // end linkinfo for
        // Now add the VLink to links......
        int maxlinks=mapsPropertiesFactory.getMaxLinks();

        for (final Map.Entry<String,Integer> entry : numberofsinglelinksmap.entrySet()) {
            final String elid = entry.getKey();
            final Integer numLinks = entry.getValue();

            LOG.debug("parsing link between element: {} with #links {}", elid, numLinks);
            if (numLinks <= maxlinks) {
                for (final Map.Entry<String,List<VLink>> vlinkEntry : singlevlinkmap.entrySet()) {
                    final String linkid = vlinkEntry.getKey();
                    if (linkid.indexOf(elid) != -1) {
                        final List<VLink> vlinks = vlinkEntry.getValue();
                        LOG.debug("adding single links for {} Adding links # {}", linkid, vlinks.size());
                        links.addAll(vlinks);
                    }
                }
            } else {
                for (final Map.Entry<String,VLink> vlinkEntry : multivlinkmap.entrySet()) {
                    final String linkid = vlinkEntry.getKey();
                    if (linkid.indexOf(elid) != -1) { 
                        LOG.debug("adding multi link for : {}", linkid);
                        links.add(vlinkEntry.getValue());
                    }
                }
                
            }
        }
        LOG.debug("Found links #{}", links.size());
        for (VLink vlink : links) {
            LOG.debug(vlink.toString());
        }
        return links;
    }

