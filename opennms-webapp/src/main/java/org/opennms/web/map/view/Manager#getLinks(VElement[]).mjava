    public List getLinks(VElement[] elems) throws SQLException, MapsException {

    	List links = new ArrayList();
        
    	// this is the list of nodes set related to Element
    	java.util.List elemNodes = new java.util.ArrayList();
    	try{
	    	if (elems != null) {
	        	for (int i = 0; i < elems.length; i++) {
	                Set nodeids = getNodeidsOnElement(elems[i]);
	                elemNodes.add(nodeids);
	         	}
	        }
	        
	        Iterator ite = elemNodes.iterator();
	        int firstelemcount = 0;
	        Set linkid = new TreeSet();
	        Connection conn = Vault.getDbConnection();
	        while (ite.hasNext()) {
	        	Set firstelemnodes = (TreeSet) ite.next();
	        	Set firstlinkednodes = getLinkedNodeidsOnNodes(firstelemnodes, conn);
	            int secondelemcount = firstelemcount +1;
	            Iterator sub_ite = elemNodes.subList(secondelemcount,elemNodes.size()).iterator(); 
	        	while (sub_ite.hasNext()) {
	        		Iterator node_ite = ((TreeSet) sub_ite.next()).iterator();
	        		while (node_ite.hasNext()) {
	        			Integer curNodeId = (Integer) node_ite.next();
	        			if (firstlinkednodes.contains(curNodeId)) {
	        				VLink vlink = new VLink(elems[firstelemcount],elems[secondelemcount]);
	        				if(!links.contains(vlink)){
	        					log.debug("adding link "+vlink.getFirst().getId()+vlink.getFirst().getType()+"-"+vlink.getSecond().getId()+vlink.getSecond().getType());
	        					links.add(vlink);
	        				}
	        			}
	        		}
	        		secondelemcount++;
				}
				firstelemcount++;
			}
	        Vault.releaseDbConnection(conn);
    	}catch(SQLException s){
    		throw s;
    	}catch(Exception e){
    		throw new MapsException(e);
    	}
        return links;
    }

