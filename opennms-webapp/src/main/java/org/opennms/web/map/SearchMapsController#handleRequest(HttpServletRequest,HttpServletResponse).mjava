	/** {@inheritDoc} */
        @Override
	public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws IOException {
		
		ThreadCategory.setPrefix(MapsConstants.LOG4J_CATEGORY);
		log = ThreadCategory.getInstance(this.getClass());
	    int mapWidth = WebSecurityUtils.safeParseInt(request
	                                                   .getParameter("MapWidth"));
        int mapHeight = WebSecurityUtils.safeParseInt(request
	                                                       .getParameter("MapHeight"));

        log.debug("Current mapWidth=" + mapWidth + " and MapHeight=" + mapHeight);

        int d = WebSecurityUtils.safeParseInt(request
                                                     .getParameter("MapElemDimension"));
        
        log.debug("default element dimension: "+d );


        String elems = request.getParameter("elems");
        log.debug("Adding Searching Maps: elems="+elems );


        int n = mapWidth /4/d;
        int k = mapHeight/2/d;
        log.debug("Max number of element on the row: "+n );
        log.debug("Max number of element in the map: "+n * k );

        String[] smapids = elems.split(",");

        log.debug("Map Element to add to the Search Map: " + smapids.length);

        while (smapids.length > n*k) {
            log.info("the map dimension is too big: resizing");
            d = d - 5;
            log.info("new element dimension: " + d);
            n = mapWidth /4/d;
            k = mapHeight/2/d;
            log.debug("Recalculated - Max number of element on the row: "+n );
            log.debug("Recalculated - Max number of element in the map: "+n * k );
        }
		
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(response
                                                                      .getOutputStream(), "UTF-8"));
		try {
            List<VElement> velems = new ArrayList<VElement>();
            // response for addElement
			
			int x = -1;
            int y = 0;
            int s = 1;

			for (int i = 0; i<smapids.length;i++) {

			    if (x < n) {
			        x++;
			    } else {
	               y++;
       		        if (s==1) {
       		            x=1;
       		            s--;
       		        } else {
                        x=0;
                        s++;
       		        }
			    }
			    velems.add(manager.newElement(MapsConstants.SEARCH_MAP, new Integer(smapids[i]), MapsConstants.MAP_TYPE, null, x*4*d+s*2*d, y*2*d+d));
			} // end for

			//get map
            VMap map = manager.searchMap(request
                                         .getRemoteUser(), request.getRemoteUser(),
                                         mapWidth, mapHeight,velems);
            log.debug("Got search map from manager "+map);
			bw.write(ResponseAssembler.getMapResponse(map));
		} catch (Throwable e) {
			log.error("Error while adding Maps: ",e);
			bw.write(ResponseAssembler.getMapErrorResponse(MapsConstants.SEARCHMAPS_ACTION));
		} finally {
			bw.close();
		}

		return null;
	}

