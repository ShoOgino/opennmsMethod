    /**
     * Parses the map.properties file into two mappings: from severity label to Severity and
     *  from status uei to Status.
     *  
     */
    protected static Map[] parseMapProperties() throws FileNotFoundException, IOException {
        log.debug("Parsing map.properties...");
    	severitiesMap = new HashMap();
        statusesMap = new HashMap();
        availsMap = new HashMap();
        assetFields = new ArrayList();
        // read the file
        Properties props = new Properties();
        props.load(new FileInputStream(MapPropertiesFactory.mapPropertiesFile));

        // look up severities and their properties
        String[] severities = BundleLists.parseBundleList(props.getProperty("severities"));

        for (int i = 0; i < severities.length; i++) {
            String id = props.getProperty("severity." + severities[i] + ".id");
            String label = props.getProperty("severity." + severities[i] + ".label");
            String color = props.getProperty("severity." + severities[i] + ".color");
            String flash = props.getProperty("severity." + severities[i] + ".flash");
            Severity sev = new Severity(Integer.parseInt(id),label,color);
            if (flash != null && flash.equalsIgnoreCase("true")) sev.setFlash(true);
            log.debug("found severity "+severities[i]+" with id="+id+", label="+label+", color="+color+ ". Adding it.");
            severitiesMap.put(label, sev);
        }

        // look up statuses and their properties
        String[] statuses = BundleLists.parseBundleList(props.getProperty("statuses"));

        
        for (int i = 0; i < statuses.length; i++) {
            String id = props.getProperty("status." + statuses[i] + ".id");
            String uei = props.getProperty("status." + statuses[i] + ".uei");
            String color = props.getProperty("status." + statuses[i] + ".color");
            String text = props.getProperty("status." + statuses[i] + ".text");
            log.debug("found status "+statuses[i]+" with id="+id+", uei="+uei+", color="+color+ ", text="+text+ ". Adding it.");
            Status status = new Status(Integer.parseInt(id),uei,color,text);
            statusesMap.put(uei, status);
        }
        
        // look up statuses and their properties
        String[] availes = BundleLists.parseBundleList(props.getProperty("availabilities"));
        
        for (int i = 0; i < availes.length; i++) {
            String id = props.getProperty("avail." + availes[i] + ".id");
            String min = props.getProperty("avail." + availes[i] + ".min");
            String color = props.getProperty("avail." + availes[i] + ".color");
            String flash = props.getProperty("avail." + availes[i] + ".flash");
            log.debug("found avail "+statuses[i]+" with id="+id+", min="+min+", color="+color+ ". Adding it.");
            Avail avail = new Avail(Integer.parseInt(id),Integer.parseInt(min),color);
            if (flash != null && flash.equalsIgnoreCase("true")) avail.setFlash(true);
            availsMap.put(min, avail);
        }
        // look up asset fields
        String assets =props.getProperty("assets");
        if(assets!=null){
	        String[] assFields = BundleLists.parseBundleList(props.getProperty("assets"));
	        assetFields = Arrays.asList(assFields);
        }
        propertiesMaps = new Map[] { severitiesMap, statusesMap, availsMap };

        return (propertiesMaps);
    }

