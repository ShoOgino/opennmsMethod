    private VElement refreshNodeElement(VElement ve, Set<Integer> nodesBySource,
            List<Integer> deletedNodeids,
            java.util.Map<Integer, AlarmInfo> outagedNodes,
            java.util.Map<Integer, Double> avails) throws MapsException {
    

        if (deletedNodeids.contains(Integer.valueOf(ve.getId())) ) {
            ve.setAvail(mapsPropertiesFactory.getUndefinedAvail().getMin());
            ve.setStatus(mapsPropertiesFactory.getUnknownStatus().getId());
            ve.setSeverity(mapsPropertiesFactory.getIndeterminateSeverity().getId());
            LOG.warn("refresh: The node with id={} has been deleted", ve.getId());
            return ve;
        }
        
        ve.setAvail(mapsPropertiesFactory.getDisabledAvail().getMin());
        ve.setStatus(mapsPropertiesFactory.getDefaultStatus().getId());
        ve.setSeverity(mapsPropertiesFactory.getDefaultSeverity().getId());

        if (nodesBySource.contains(Integer.valueOf(ve.getId()))) {
            Object id = Integer.valueOf(ve.getId());
            LOG.debug("refresh: getting status from alternative source {}", dataSource.getClass().getName());
            int status = mapsPropertiesFactory.getStatus(dataSource.getStatus(id));
            LOG.debug("refresh: got status from alternative source. Value is {}", status);
           if (status >= 0) {
                ve.setStatus(status);
            }

            int sev = mapsPropertiesFactory.getSeverity(dataSource.getSeverity(id));
            LOG.debug("refresh: got severity from alternative source. Value is {}", sev);
            if (sev >= 0) {
                ve.setSeverity(sev);
            }
            if (mapsPropertiesFactory.isAvailEnabled()) {
                double avail = dataSource.getAvailability(id);
                LOG.debug("refresh: got availability from alternative source. Value is {}", avail);
                if (avail >= 0) {
                    ve.setAvail(avail);
                }
            }
            return ve;
        } 
       
        AlarmInfo oi = outagedNodes.get(Integer.valueOf(ve.getId()));
        if (oi != null) {
            ve.setStatus(oi.getStatus());
            ve.setSeverity(oi.getSeverity());
        }
        if (mapsPropertiesFactory.isAvailEnabled()
                && (Integer.valueOf(ve.getId()) != null)
                && (avails.get(Integer.valueOf(ve.getId())) != null)) {
            ve.setAvail(avails.get(Integer.valueOf(ve.getId())).doubleValue());
        }
        return ve;
    } 

