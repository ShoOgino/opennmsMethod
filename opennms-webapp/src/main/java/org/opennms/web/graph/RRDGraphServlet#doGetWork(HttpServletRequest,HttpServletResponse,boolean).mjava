    public void doGetWork(HttpServletRequest request,
                          HttpServletResponse response,
                          boolean debug)
            throws ServletException, IOException {
        String typeName = request.getParameter("type");
        String resourceTypeName = request.getParameter("resourceType");
        String adhoc = request.getParameter("adhoc");

        String[] requiredParameters = {
                "type",
                "resourceType"
        };

        if (typeName == null) {
            throw new MissingParameterException("type",
                                                requiredParameters);
        }
        if (resourceTypeName == null) {
            throw new MissingParameterException("resourceType",
                                                requiredParameters);
        }

        PrefabGraphType type = m_prefabGraphDao.findByName(typeName);
        if (type == null) {
            throw new IllegalArgumentException("graph type \"" + typeName
                                               + "\" is not valid");
        }
        
        GraphModel model = findGraphModelByName(type.getName());

        GraphResourceType resourceType =
            model.getResourceTypeByName(resourceTypeName);

	String command;
	if ("true".equals(adhoc)) {
            String[] adhocRequiredParameters = {
                    "node or domain",
                    "resource"
            };
            String nodeIdString = request.getParameter("node");
            String domain = request.getParameter("domain");
            if (nodeIdString == null && domain == null) {
                throw new MissingParameterException("node or domain",
                                                    adhocRequiredParameters);
            }
            
            int nodeId = -1;
            if (nodeIdString != null) {
                try {
                    nodeId = Integer.parseInt(nodeIdString);
                } catch (NumberFormatException e) {
                    throw new IllegalArgumentException("Could not parse node "
                                                       + "parameter '"
                                                       + nodeIdString
                                                       + "' as an integer",
                                                       e);
                }
            }

            String resourceName = request.getParameter("resource");
            if (resourceName == null) {
                throw new MissingParameterException("resource",
                                                    adhocRequiredParameters);
            }
            
            AdhocGraphType adhocType = m_prefabGraphDao.findAdhocByName(typeName);
            
            GraphResource resource;
            String resourceParent;
            if (nodeId != -1) {
                resource = model.getResourceForNodeResourceResourceType(nodeId, resourceName, resourceTypeName);
                resourceParent = Integer.toString(nodeId);
            } else {
                resource = model.getResourceForDomainResourceResourceType(domain, resourceName, resourceTypeName);
                resourceParent = domain;
            }
	    command = getCommandAdhoc(adhocType, resourceParent,
                                      resourceType, resource,
                                      request, response);
	} else {
	    command = getCommandNonAdhoc(type, resourceType,
                                         request, response);
	}

        File workDir = resourceType.getRrdDirectory();

        InputStream tempIn = null;
        try {
            log("Executing RRD command in this directory: " + workDir);
            log(command);

            tempIn = RrdUtils.createGraph(command, workDir);
        } catch (RrdException e) {
            String message = "RrdException received while creating graph: "
                + e.getMessage(); 
            log(message, e);
            if (debug) {
                throw new ServletException(message, e);
            } else {
                returnErrorImage(response, s_rrdError);
                return;
            }
        } catch (IOException e) {
            String message = "IOException received while creating graph: "
                + e.getMessage(); 
            log(message, e);
            if (debug) {
                throw new ServletException(message, e);
            } else {
                returnErrorImage(response, s_rrdError);
                return;
            }
	}

        if (tempIn != null) {
            response.setContentType(type.getOutputMimeType());

            StreamUtils.streamToStream(tempIn, response.getOutputStream());

            tempIn.close();
        }
    }

