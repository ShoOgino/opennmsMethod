    public GraphTypeConfig loadGraphTypeConfig(String type,
					       String propertiesFilename)
		throws ServletException {
        Properties properties = new Properties();

        FileInputStream fileInputStream = null;
        try {
            fileInputStream = new FileInputStream(propertiesFilename);
            properties.load(fileInputStream);

            RrdUtils.graphicsInitialize();
        } catch (FileNotFoundException e) {
            log("Could not find configuration file", e);
            throw new ServletException("Could not find configuration file", e);
        } catch (IOException e) {
            log("Could not load configuration file", e);
            throw new ServletException("Could not load configuration file: ", e);
        } catch (RrdException e) {
            log("Could not inititalize the graphing system", e);
            throw new ServletException("Could not initialize graphing system: " + e.getMessage(), e);
        } catch (Throwable e) {
            log("Unexpected exception or error occurred", e);
            throw new ServletException("Unexpected exception or error occured: " + e.getMessage(), e);
        } finally {
            try {
                if (fileInputStream != null) fileInputStream.close();
            } catch (Exception e) {
                this.log("init: Error closing properties file.",e);
            }
        }

        GraphTypeConfig config = new GraphTypeConfig();

        config.setWorkDir(new File(properties.getProperty("command.input.dir")));
        config.setCommandPrefix(properties.getProperty("command.prefix"));
        config.setMimeType(properties.getProperty("output.mime"));

	Map map;
	if (isTypeAdHoc(type)) {
	    map = new HashMap();
	    map.put("adhoc", properties);
	} else {
	    map = PrefabGraph.getPrefabGraphDefinitions(properties);
	}
        config.setReportMap(map);

        return config;
    }

