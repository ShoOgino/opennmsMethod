    public PrefabGraph[] getQueriesByResourceTypeAttributes(String resourceType,
            Set<GraphAttribute> attributes, PrefabGraph[] availableQueries) {

        List<PrefabGraph> returnList = new LinkedList<PrefabGraph>();

        Set<String> availDataSourceList = new HashSet<String>(attributes.size());
        for (GraphAttribute attribute : attributes) {
            availDataSourceList.add(attribute.getName());
        }

        for (PrefabGraph query : availableQueries) {
            if (resourceType != null &&
                    !resourceType.equals(query.getType())) {
                if (log().isDebugEnabled()) {
                    log().debug("skipping " + query.getName() + " because its type \"" + query.getType() + "\" does not equal resourceType \"" + resourceType + "\"");
                }
                continue;
            }
            
            List<String> requiredList = Arrays.asList(query.getColumns());

            if (availDataSourceList.containsAll(requiredList)) {
                if (log().isDebugEnabled()) {
                    log().debug("adding " + query.getName() + " to query list");
                }
                returnList.add(query);
            } else {
                if (log().isDebugEnabled()) {
                    log().debug("not adding " + query.getName() + " to query list because required list of attributes (" + StringUtils.collectionToDelimitedString(requiredList, ", ") + ") is not in the list of attributes on the resource (" + StringUtils.collectionToDelimitedString(availDataSourceList, ", ")+ ")");
                }
            }
        }

        PrefabGraph[] availQueries = (PrefabGraph[])
        returnList.toArray(new PrefabGraph[returnList.size()]);

        return availQueries;
    }

