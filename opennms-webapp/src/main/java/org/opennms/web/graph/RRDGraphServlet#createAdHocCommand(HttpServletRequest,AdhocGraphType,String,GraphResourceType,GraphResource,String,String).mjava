    protected String createAdHocCommand(HttpServletRequest request,
					AdhocGraphType adhocType,
                                        String resourceParent,
                                        GraphResourceType resourceType,
					GraphResource resource,
                                        String start, String end) {
        String commandPrefix = adhocType.getCommandPrefix();
        String title = adhocType.getTitleTemplate();
        String ds = adhocType.getDataSourceTemplate();
        String graphline = adhocType.getGraphLineTemplate();

        /*
         * Remember that rrdtool wants the time in seconds, not milliseconds;
         * java.util.Date.getTime() returns milliseconds, so divide by 1000
         */
        String starttime = Long.toString(Long.parseLong(start) / 1000);
        String endtime = Long.toString(Long.parseLong(end) / 1000);

        String graphtitle = request.getParameter("title");
        String dsNames[] = request.getParameterValues("ds");
        String dsAggregFxns[] = request.getParameterValues("agfunction");
        String colors[] = request.getParameterValues("color");
        String dsTitles[] = request.getParameterValues("dstitle");
        String dsStyles[] = request.getParameterValues("style");

        String[] requiredParameters = new String[] {
                "title",
                "ds",
                "agfunction",
                "color",
                "dstitle",
                "style"
        };

        if (graphtitle == null) {
            throw new MissingParameterException("title", requiredParameters);
        }

        if (dsNames == null) {
            throw new MissingParameterException("ds", requiredParameters);
        }
        
        if (dsAggregFxns == null) {
            throw new MissingParameterException("agfunction",
                                                requiredParameters);
        }
        
        if (colors == null) {
            throw new MissingParameterException("color", requiredParameters);
        }
        
        if (dsTitles == null) {
            throw new MissingParameterException("dstitle",
                                                requiredParameters);
        }
        
        if (dsStyles == null) {
            throw new MissingParameterException("style", requiredParameters);
        }

        StringBuffer buf = new StringBuffer();
        buf.append(commandPrefix);
        buf.append(" ");
        buf.append(title);
        
        Set<String> attributeNames = new HashSet<String>();
        for (GraphAttribute attribute : resource.getAttributes()) {
            attributeNames.add(attribute.getName());
        }
        
        for (String dsName : dsNames) {
            if (!attributeNames.contains(dsName)) {
                throw new IllegalArgumentException("dsName \"" + dsName
                                                   + "\" is not available "
                                                   + "on this resource.  "
                                                   + "Available: "
                                                   + StringUtils.collectionToDelimitedString(attributeNames, ", "));
            }
        }

        for (int i = 0; i < dsNames.length; i++) {
            String dsAbbrev = "ds" + Integer.toString(i);

            String dsName = dsNames[i];
            String rrd = resourceType.getRelativePathForAttribute(resourceParent, resource.getName(), dsName);
            String dsAggregFxn = dsAggregFxns[i];
            String color = colors[i];
            String dsTitle = dsTitles[i];
            String dsStyle = dsStyles[i];

            buf.append(" ");
            buf.append(MessageFormat.format(ds, rrd, starttime,
                                            endtime, graphtitle,
                                            dsAbbrev, dsName,
                                            dsAggregFxn, dsStyle,
                                            color, dsTitle));
        }

        for (int i = 0; i < dsNames.length; i++) {
            String dsAbbrev = "ds" + Integer.toString(i);

            String dsName = dsNames[i];
            String rrd = resourceType.getRelativePathForAttribute(resourceParent, resource.getName(), dsName);
            String dsAggregFxn = dsAggregFxns[i];
            String color = colors[i];
            String dsTitle = dsTitles[i];
            String dsStyle = dsStyles[i];

            buf.append(" ");
            buf.append(MessageFormat.format(graphline, rrd,
                                            starttime, endtime, graphtitle,
                                            dsAbbrev, dsName, dsAggregFxn,
                                            dsStyle, color, dsTitle));
        }

        log().debug("formatting: " + buf + ", bogus-rrd, " + starttime + ", "
                    + endtime + ", " + graphtitle);
        return MessageFormat.format(buf.toString(), "bogus-rrd",
                                    starttime, endtime, graphtitle);
    }

