    /**
     * This method saves the list of events to the specified file
     * 
     * @exception XMLWriteException,
     *                if the save failed
     */
    protected void saveDocument(Collection events) throws XMLWriteException {
        Element root = m_document.createElement("events");
        m_document.appendChild(root);

        // if there are any users print them out
        if (events.size() > 0) {
            // write each event
            Iterator i = events.iterator();
            while (i.hasNext()) {
                Object eventObject = i.next();

                // expecting the first object in the collection to be the Global
                // information
                if (eventObject instanceof Global) {
                    buildGlobalElement(root, (Global) eventObject);
                }
                // everything else should be the Event objects
                else if (eventObject instanceof Event) {
                    Event curEvent = (Event) eventObject;

                    Element curEventElement = addEmptyElement(root, "event");

                    // mask information
                    if (curEvent.getMask().size() > 0) {
                        Element maskElement = addEmptyElement(curEventElement, "mask");

                        List maskElements = curEvent.getMask();
                        for (int q = 0; q < maskElements.size(); q++) {
                            MaskElement curElement = (MaskElement) maskElements.get(q);

                            Element maskElementElement = addEmptyElement(maskElement, "maskelement");

                            addDataElement(maskElementElement, "mename", curElement.getElementName());

                            List values = curElement.getElementValues();
                            for (int j = 0; j < values.size(); j++) {
                                addDataElement(maskElementElement, "mevalue", (String) values.get(j));
                            }
                        }
                    }

                    addDataElement(curEventElement, "uei", curEvent.getUei());

                    // snmp tag
                    if (curEvent.getSnmp() != null) {
                        buildSnmpElement(curEventElement, curEvent.getSnmp());
                    }

                    addCDataElement(curEventElement, "descr", curEvent.getDescription());

                    Element logMessageElement = addCDataElement(curEventElement, "logmsg", curEvent.getLogMessage());
                    logMessageElement.setAttribute("dest", curEvent.getLogMessageDestination());

                    addDataElement(curEventElement, "severity", curEvent.getSeverity());

                    // correlation tag
                    if (curEvent.getCorrelation() != null) {
                        buildCorrelationElement(curEventElement, curEvent.getCorrelation());
                    }

                    // operator instruction
                    if (curEvent.getOperInstruct() != null && !curEvent.getOperInstruct().trim().equals("")) {
                        addDataElement(curEventElement, "operinstruct", curEvent.getOperInstruct());
                    }

                    List autoActions = curEvent.getAutoActions();
                    for (int k = 0; k < autoActions.size(); k++) {
                        AutoAction curAction = (AutoAction) autoActions.get(k);

                        Element actionElement = addCDataElement(curEventElement, "autoaction", curAction.getAutoAction());
                        actionElement.setAttribute("state", curAction.getState());
                    }

                    List operActions = curEvent.getOperatorActions();
                    for (int l = 0; l < operActions.size(); l++) {
                        OperatorAction curAction = (OperatorAction) operActions.get(l);

                        Element actionElement = addCDataElement(curEventElement, "operaction", curAction.getOperatorAction());
                        actionElement.setAttribute("state", curAction.getState());
                        actionElement.setAttribute("menutext", curAction.getMenuText());
                    }

                    List logGroups = curEvent.getLogGroups();
                    for (int m = 0; m < logGroups.size(); m++) {
                        addDataElement(curEventElement, "loggroup", (String) logGroups.get(m));
                    }

                    List notifications = curEvent.getNotifications();
                    for (int n = 0; n < notifications.size(); n++) {
                        addCDataElement(curEventElement, "notification", (String) notifications.get(n));
                    }

                    if (curEvent.getTTicket() != null && !curEvent.getTTicket().trim().equals("")) {
                        Element ticketElement = addCDataElement(curEventElement, "tticket", curEvent.getTTicket());
                        ticketElement.setAttribute("state", curEvent.getTTicketState());
                    }

                    List forwards = curEvent.getForwards();
                    for (int p = 0; p < forwards.size(); p++) {
                        Forward curForward = (Forward) forwards.get(p);

                        Element forwardElement = addDataElement(curEventElement, "forward", curForward.getForward());
                        forwardElement.setAttribute("state", curForward.getState());
                        forwardElement.setAttribute("mechanism", curForward.getMechanism());
                    }

                    if (curEvent.getMouseOverText() != null && !curEvent.getMouseOverText().trim().equals("")) {
                        addDataElement(curEventElement, "mouseovertext", curEvent.getMouseOverText());
                    }
                }
            }
        }

        serializeToFile();
    }

