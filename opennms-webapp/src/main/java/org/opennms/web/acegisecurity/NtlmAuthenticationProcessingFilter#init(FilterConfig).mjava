        /**
         * Does JCIFS Initialization. We use IoC container lifecycle services instead.
         *
         * @param arg0 ignored
         *
         * @throws ServletException ignored
         */
        
        public void init(FilterConfig arg0) throws ServletException {
        	if (properties ==null || properties.isEmpty() ) return;
        	
        	log().debug("init");
            String name;
            int level;

            /* Set jcifs properties we know we want; soTimeout and cachePolicy to 10min.
             */
            Config.setProperty( "jcifs.smb.client.soTimeout", "300000" );
            Config.setProperty( "jcifs.netbios.cachePolicy", "1200" );

            Iterator e = properties.keySet().iterator();
            while( e.hasNext() ) {
                name = (String) e.next();
                if( name.startsWith( "jcifs." )) {
                    Config.setProperty( name, (String)properties.get( name ));
                }
            }
            defaultDomain = Config.getProperty("jcifs.smb.client.domain");
            domainController = Config.getProperty( "jcifs.http.domainController" );
            if( domainController == null ) {
                domainController = defaultDomain;
                loadBalance = Config.getBoolean( "jcifs.http.loadBalance", true );
            }
            enableBasic = Boolean.valueOf(
                    Config.getProperty("jcifs.http.enableBasic")).booleanValue();
            insecureBasic = Boolean.valueOf(
                    Config.getProperty("jcifs.http.insecureBasic")).booleanValue();
            realm = Config.getProperty("jcifs.http.basicRealm");
            if (realm == null) realm = "jCIFS";

            if(( level = Config.getInt( "jcifs.util.loglevel", -1 )) != -1 ) {
                LogStream.setLevel( level );
            }
    		initialized = true;
        }

