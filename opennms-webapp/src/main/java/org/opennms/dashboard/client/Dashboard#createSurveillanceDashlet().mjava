    private SurveillanceDashlet createSurveillanceDashlet() {
        final SurveillanceDashlet surveillance = new SurveillanceDashlet();
        
        SurveillanceListener listener = new SurveillanceListener() {

            public void onAllClicked(SurveillanceDashlet viewer) {
                Window.alert("All");
            }

            public void onIntersectionClicked(SurveillanceDashlet viewer, SurveillanceIntersection intersection) {
                m_alarms.setIntersection(intersection);
            }

            public void onSurveillanceGroupClicked(SurveillanceDashlet viewer, SurveillanceGroup group) {
                Window.alert("Group: "+group);
            }
            
        };
        
        surveillance.addSurveillanceViewListener(listener);
        
        
        // define the service you want to call
        final SurveillanceServiceAsync svc = (SurveillanceServiceAsync) GWT.create(SurveillanceService.class);
        ServiceDefTarget endpoint = (ServiceDefTarget) svc;
        endpoint.setServiceEntryPoint(GWT.getModuleBaseURL()+"surveillanceService.gwt");
        
        
        AsyncCallback cb = new AsyncCallback() {

            public void onFailure(Throwable e) {
                error(e);
            }

            public void onSuccess(Object arg) {
                SurveillanceData data = (SurveillanceData)arg;
                surveillance.setData(data);
                
                
                if (!data.isComplete()) {
                    final AsyncCallback cb = this;
                    Timer timer = new Timer() {
                        public void run() {
                            svc.getSurveillanceData(cb);
                        }
                    };
                    timer.schedule(2000);
                }
            }
            
        };

        svc.getSurveillanceData(cb);
        
        m_surveillance = surveillance;
        return m_surveillance;
    }

