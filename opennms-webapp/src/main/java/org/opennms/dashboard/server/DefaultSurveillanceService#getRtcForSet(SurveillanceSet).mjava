    public NodeRtc[] getRtcForSet(SurveillanceSet set) {
        OnmsCriteria serviceCriteria = m_rtcService.createServiceCriteria();
        OnmsCriteria outageCriteria = m_rtcService.createOutageCriteria();
        addCriteriaForSurveillanceSet(serviceCriteria, set);
        addCriteriaForSurveillanceSet(outageCriteria, set);
        
        RtcNodeModel model = m_rtcService.getNodeListForCriteria(serviceCriteria, outageCriteria);
        
        NodeRtc[] nodeRtc = new NodeRtc[model.getNodeList().size()];
        
        int index = 0;
        boolean isDashboardRole = isDashboardRole();
        for (RtcNode node : model.getNodeList()) {
            NodeRtc n = new NodeRtc();
            
            n.setNodeLabel(node.getNode().getLabel());
            n.setNodeId(node.getNode().getNodeId());
            n.setIsDashboardRole(isDashboardRole);
            n.setDownServiceCount(node.getDownServiceCount());
            n.setServiceCount(node.getServiceCount());
            if (node.getDownServiceCount() == 0) {
                n.setServiceStyle("Normal");
            } else {
                n.setServiceStyle("Critical");
            }
            
            n.setAvailability(node.getAvailabilityAsString());
            if (node.getAvailability() == 1.0) {
                n.setAvailabilityStyle("Normal");
            } else {
                n.setAvailabilityStyle("Critical");
            }
            
            nodeRtc[index++] = n;
        }
        
        return nodeRtc;
    }

