	/**
	 * @param gdef
	 * @return 
	 * @throws RrdException
	 */
	private RrdGraphDef getRrdGraphDef(GraphDefinition gdef) throws RrdException {
//		RrdGraphDef graphDef = new RrdGraphDef(gdef.getStartTime() / 1000, gdef.getEndTime() / 1000);
	        RrdGraphDef graphDef = new RrdGraphDef();
		graphDef.setTimeSpan(1086793506L, 1086879506L);
		graphDef.setTitle(gdef.getGraphTitle());
		
		LinkedList elist = gdef.getGraphDataElements();
		for (Iterator iter = elist.iterator(); iter.hasNext();) {
			GraphDataElement gde = (GraphDataElement) iter.next();
			graphDef.datasource(gde.getUniqueID(), // java.lang.String name,  name - Graph source name.
					gde.getDataSource().getSource(),  // java.lang.String file,  file - Path to RRD file.
					gde.getDataSource().getDataSource(),          // java.lang.String dsName,  dsName - Data source name defined in the RRD file.
			        "AVERAGE" );                //java.lang.String consolFunc  consolFunc - Consolidation function that will be used 
			// to extract data from the RRD file ("AVERAGE", "MIN", "MAX" or "LAST").
			
			if (gde instanceof GraphDataLine ) {
				// add GraphDataLine  to graphDef
				GraphDataLine gdl = (GraphDataLine)gde;
				graphDef.line(gdl.getUniqueID(), gdl.getColor(), gdl.getLegend(), gdl.getLineWidth());
				graphDef.gprint(gdl.getUniqueID(),"MIN","Min = @2@C");
				graphDef.gprint(gdl.getUniqueID(),"MAX","Max = @2@r");
			} 
			else {
				System.err.println("ErrorGraphRenderImpl - Printing other than GraphDataLine not defined");
			}
		}
		return graphDef;
	}

