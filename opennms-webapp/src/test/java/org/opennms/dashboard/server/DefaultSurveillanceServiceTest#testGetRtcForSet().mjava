    public void testGetRtcForSet() {
        UserDetails details = populateSecurityContext();
        
        EasyMockUtils mock = new EasyMockUtils();
        
        MonitoredServiceDao monSvcDao = mock.createMock(MonitoredServiceDao.class);
        OutageDao outageDao = mock.createMock(OutageDao.class);
        SurveillanceViewConfigDao survViewConfigDao = mock.createMock(SurveillanceViewConfigDao.class);
        GroupDao groupDao = mock.createMock(GroupDao.class);
        CategoryDao categoryDao = mock.createMock(CategoryDao.class);
        
        mock.replayAll();
        
        DefaultRtcService rtcService = new DefaultRtcService();
        rtcService.setMonitoredServiceDao(monSvcDao);
        rtcService.setOutageDao(outageDao);
        rtcService.afterPropertiesSet();
        
        m_service.setRtcService(rtcService);
        m_service.setSurveillanceViewConfigDao(survViewConfigDao);
        m_service.setGroupDao(groupDao);
        m_service.setCategoryDao(categoryDao);
        mock.verifyAll();

        expect(survViewConfigDao.getView(details.getUsername())).andReturn(null).atLeastOnce();
        expect(groupDao.findGroupsForUser(details.getUsername())).andReturn(new ArrayList<Group>()).atLeastOnce();
        
        View defaultView = new View();
        defaultView.setColumns(new Columns());
        defaultView.setRows(new Rows());
        expect(survViewConfigDao.getDefaultView()).andReturn(defaultView).atLeastOnce();
        
        expect(monSvcDao.findMatching(isA(OnmsCriteria.class))).andReturn(new ArrayList<OnmsMonitoredService>());
        expect(outageDao.findMatching(isA(OnmsCriteria.class))).andReturn(new ArrayList<OnmsOutage>());

        mock.replayAll();
        NodeRtc[] rtcs = m_service.getRtcForSet(SurveillanceSet.DEFAULT);
        mock.verifyAll();
        
        assertNotNull("rtcs should not be null", rtcs);
    }

