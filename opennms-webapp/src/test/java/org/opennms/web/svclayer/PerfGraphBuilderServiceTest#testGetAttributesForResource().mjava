	public void testGetAttributesForResource() {

		// the node
		NodeBuilder nodeBuilder = new NodeBuilder(1, "TestNode");
		OnmsNode node = nodeBuilder.getNode();
		
		// expect the node dao to be called to retrieve this node
		expect(m_mockNodeDao.get(1)).andReturn(node);

		// the expected palette for the node
		PaletteBuilder paletteBuilder = new PaletteBuilder("TestNode");
		
		Palette expectedPalette = paletteBuilder.getPalette();
		paletteBuilder.addCategory("Node Attributes");

		// the node attributes
		addAttribute(nodeBuilder, paletteBuilder, "node:1:avgBusy5", "Avg Busy 5");
		addAttribute(nodeBuilder, paletteBuilder, "node:1:tcpResets", "Tcp Resets");
		addAttribute(nodeBuilder, paletteBuilder, "node:1:avgBusy15", "Avg Busy 15");

		// expect the attributes dao to be called to retrived the attributes for the node
		expect(m_mockAttributeDao.getAttributesForNode(node)).andReturn(nodeBuilder.getAttributes());
		
		int ifCount = 3;
		// add ip interfaces
		String[] svcTypes = new String[] { "ICMP", "SSH", "HTTP" };
		for(int i = 1; i <= ifCount; i++) {
			
			IfBuilder ifBuilder = nodeBuilder.addInterface("192.168.1."+i);
			paletteBuilder.addCategory("Interface: 192.168.1."+i);
			
			addAttribute(ifBuilder, paletteBuilder, "if:192.168.1."+i+":ifInOctets", "If In Octets");
			addAttribute(ifBuilder, paletteBuilder, "if:192.168.1."+i+":ifInOctets", "If Out Octets");
			
			expect(m_mockAttributeDao.getAttributesForInterface(ifBuilder.getInterface())).andReturn(ifBuilder.getAttributes());
			
			paletteBuilder.addSpacer();
			
			for (String svcName : svcTypes) {
				
				OnmsMonitoredService svc = ifBuilder.addService(svcName);
				OnmsSecretAttribute attr = new OnmsSecretAttribute("svc:192.168.1."+i+":"+svcName+":responseTime", "responseTime");

				//expect(m_mockAttributeDao.getResponseTimeAttributeForService(svc)).andReturn(attr);
				//paletteBuilder.addItem("svc:192.168.1."+i+":"+svcName+":responseTime", svcName);
			}
			
		}		

		replay(m_mockNodeDao);
		replay(m_mockAttributeDao);
		
		Palette actualPalette = m_perfGraphBuilderService.getAttributePalette(1);
		assertNotNull(actualPalette);
		
		assertPaletteEquals(expectedPalette, actualPalette);
		
		verify(m_mockNodeDao);
		verify(m_mockAttributeDao);
	}

