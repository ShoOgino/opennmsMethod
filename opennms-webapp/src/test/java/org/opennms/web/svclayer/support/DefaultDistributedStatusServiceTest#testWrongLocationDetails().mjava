    public void testWrongLocationDetails() {
        List<OnmsMonitoringLocationDefinition> locationDefinitions =
            new LinkedList<OnmsMonitoringLocationDefinition>();
        locationDefinitions.add(m_locationDefinition1);
        locationDefinitions.add(m_locationDefinition2);
        locationDefinitions.add(m_locationDefinition3);
        expect(m_locationMonitorDao.findAllMonitoringLocationDefinitions()).andReturn(locationDefinitions);
        
        Set<OnmsApplication> applications = new HashSet<OnmsApplication>();
        applications.add(m_application1);
        applications.add(m_application2);
        expect(m_applicationDao.findAll()).andReturn(applications);
        
        expect(m_locationMonitorDao.findMonitoringLocationDefinition("Raleigh-bad")).andReturn(null);
        expect(m_applicationDao.findByName("Application 2")).andReturn(m_application2);
        
        Collection<OnmsLocationMonitor> monitors = new HashSet<OnmsLocationMonitor>();
        monitors.add(m_locationMonitor1_1);
        expect(m_locationMonitorDao.findByLocationDefinition(m_locationDefinition1)).andReturn(monitors);
        
        for (OnmsMonitoredService service : m_application2.getMemberServices()) {
            m_locationMonitorDao.initialize(service.getIpInterface());
            m_locationMonitorDao.initialize(service.getIpInterface().getNode());
        }

        String locationName = "Raleigh-bad";
        String applicationName = m_application2.getName();
        String monitorId = "";
        String previousLocation = "";
        String timeSpan = "";
        
        replayEverything();
        
        DistributedStatusHistoryModel summary =
            m_service.createHistoryModel(locationName, monitorId, applicationName, timeSpan, previousLocation);
        
        verifyEverything();
        
        assertNotNull("summary should not be null", summary);
        assertNotNull("summary locations list should not be null", summary.getLocations());
        assertNotNull("summary applications list should not be null", summary.getApplications());
        assertNotNull("summary chosen location should not be null", summary.getChosenLocation());
        assertNotNull("summary chosen application should not be null", summary.getChosenApplication());
        assertNotNull("summary error list should not be null", summary.getErrors());
        
        assertEquals("summary locations list size", locationDefinitions.size(), summary.getLocations().size());
        assertEquals("summary applications list size", applications.size(), summary.getApplications().size());
        assertEquals("summary error list size", 1, summary.getErrors().size());
        
        // Verify sorting of applications
        assertEquals("summary applications 1", m_application1, summary.getApplications().get(0));
        assertEquals("summary applications 2", m_application2, summary.getApplications().get(1));
        
        // Verify errors
        assertEquals("summary error 1", "Could not find location definition 'Raleigh-bad'", summary.getErrors().get(0));
        
        // Verify chosen ones
        assertEquals("summary chosen location", m_locationDefinition1, summary.getChosenLocation());
        assertEquals("summary chosen application", m_application2, summary.getChosenApplication());
        
        // And verify that they are in the lists in the right place
        assertEquals("summary chosen location matches list", summary.getLocations().get(0), summary.getChosenLocation());
        assertEquals("summary chosen application matches list", summary.getApplications().get(1), summary.getChosenApplication());

    }

