    /*
     * XXX need to check sorting
     */
    // TODO: PatrickTest is broken but not sure what to do to fix it
    @Ignore
    @Test
    public void testCreateFacilityStatusTableLayoutApplicationsVertically() throws Exception {
        // No need to shuffle, since this is a list
        List<OnmsMonitoringLocation> locationDefinitions = new LinkedList<>();
        locationDefinitions.add(m_locationDefinition1);
        locationDefinitions.add(m_locationDefinition2);
        locationDefinitions.add(m_locationDefinition3);
        
        List<OnmsApplication> applications = new LinkedList<>();
        applications.add(m_application1);
        applications.add(m_application2);
        Collections.shuffle(applications);
        
        OnmsMonitoredService httpService = findMonitoredService(m_services, m_ip, "HTTP");
        OnmsMonitoredService httpsService = findMonitoredService(m_services, m_ip, "HTTPS");
        OnmsMonitoredService icmpService = findMonitoredService(m_services, m_ip, "ICMP");
        
        Collection<OnmsLocationSpecificStatus> mostRecentStatuses = new LinkedList<>();
        mostRecentStatuses.add(createStatus(m_locationDefinition1, httpService, PollStatus.available(), "20061011-00:00:00"));
        mostRecentStatuses.add(createStatus(m_locationDefinition1, httpsService, PollStatus.available(), "20061012-06:00:00"));
        mostRecentStatuses.add(createStatus(m_locationDefinition1, httpService, PollStatus.available(), "20061011-00:00:00"));
        mostRecentStatuses.add(createStatus(m_locationDefinition1, httpsService, PollStatus.available(), "20061012-06:00:00"));
        mostRecentStatuses.add(createStatus(m_locationDefinition1, httpService, PollStatus.available(), "20061011-00:00:00"));
        mostRecentStatuses.add(createStatus(m_locationDefinition1, httpsService, PollStatus.available(), "20061012-06:00:00"));
        
        Collection<OnmsLocationSpecificStatus> statusChanges = new LinkedList<>();
        statusChanges.add(createStatus(m_locationDefinition1, httpService, PollStatus.available(), "20061011-00:00:00"));
        statusChanges.add(createStatus(m_locationDefinition1, httpsService, PollStatus.unavailable(), "20061012-00:00:00"));
        statusChanges.add(createStatus(m_locationDefinition1, httpsService, PollStatus.available(), "20061012-06:00:00"));
        statusChanges.add(createStatus(m_locationDefinition1, icmpService, PollStatus.down(), "20061010-06:00:00"));

        Date startDate = s_dbDate.parse("2006-10-12 00:00:00.0");
        Date endDate = s_dbDate.parse("2006-10-13 00:00:00.0");

        expect(m_monitoringLocationDao.findAll()).andReturn(locationDefinitions);
        expect(m_applicationDao.findAll()).andReturn(applications);
        expect(m_locationSpecificStatusDao.getAllMostRecentStatusChanges()).andReturn(mostRecentStatuses);
        Collection<OnmsMonitoringLocation> monitors2 = new HashSet<>();
        monitors2.add(m_locationDefinition2);
        expect(m_locationSpecificStatusDao.getStatusChangesBetween(startDate, endDate)).andReturn(statusChanges);
        expect(m_locationSpecificStatusDao.getAllStatusChangesAt(startDate)).andReturn(new HashSet<OnmsLocationSpecificStatus>());

        expect(m_monitoredServiceDao.findByApplication(m_application1)).andReturn(m_applicationServices1).times(3);
        expect(m_monitoredServiceDao.findByApplication(m_application2)).andReturn(m_applicationServices2).times(3);
        
        m_service.setLayoutApplicationsVertically(true);

        m_easyMockUtils.replayAll();
        SimpleWebTable table = m_service.createFacilityStatusTable(startDate, endDate);
        m_easyMockUtils.verifyAll();
        
        SimpleWebTable expectedTable = new SimpleWebTable();
        expectedTable.setTitle("Distributed Status Summary");
        expectedTable.addColumn("Application", "");
        expectedTable.addColumn("Raleigh", "");
        expectedTable.addColumn("Durham", "");
        expectedTable.addColumn("Columbus", "");
        
        
        expectedTable.newRow();
        expectedTable.addCell("Application 1", "");
        expectedTable.addCell("75.000%", "Normal", "distributedStatusHistory.htm?location=Raleigh&application=Application+1");
        expectedTable.addCell("No data", "Normal");
        expectedTable.addCell("No data", "Indeterminate");
        
        expectedTable.newRow();
        expectedTable.addCell("Application 2", "");
        expectedTable.addCell("75.000%", "Normal", "distributedStatusHistory.htm?location=Raleigh&application=Application+2");
        expectedTable.addCell("No data", "Normal");
        expectedTable.addCell("No data", "Indeterminate");
        
        assertTableEquals(expectedTable, table);
    }

