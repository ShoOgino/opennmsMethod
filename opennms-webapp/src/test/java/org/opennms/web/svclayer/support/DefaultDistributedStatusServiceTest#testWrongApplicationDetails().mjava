    public void testWrongApplicationDetails() {
        List<OnmsMonitoringLocation> locationDefinitions = new LinkedList<>();
        locationDefinitions.add(m_locationDefinition1);
        locationDefinitions.add(m_locationDefinition2);
        locationDefinitions.add(m_locationDefinition3);
        expect(m_monitoringLocationDao.findAll()).andReturn(locationDefinitions);
        
        List<OnmsApplication> applications = new ArrayList<>();
        applications.add(m_application1);
        applications.add(m_application2);
        expect(m_applicationDao.findAll()).andReturn(applications);
        
        expect(m_monitoringLocationDao.get(m_locationDefinition2.getLocationName())).andReturn(m_locationDefinition2);
        expect(m_applicationDao.findByName("Big Bad Voodoo Daddy Application")).andReturn(null);
        
        List<OnmsLocationMonitor> monitors = new ArrayList<>();
        monitors.add(m_locationMonitor2_1);
        monitors.add(m_locationMonitor2_2);
        expect(m_locationMonitorDao.findByLocationDefinition(m_locationDefinition2)).andReturn(monitors);

        for (OnmsMonitoredService service : m_applicationServices1) {
            m_locationMonitorDao.initialize(service.getIpInterface());
            m_locationMonitorDao.initialize(service.getIpInterface().getNode());
        }

        String locationName = m_locationDefinition2.getLocationName();
        String applicationName = "Big Bad Voodoo Daddy Application";
        String monitorId = "";
        String previousLocation = "";
        String timeSpan = "";
        
        expect(m_monitoredServiceDao.findByApplication(m_application1)).andReturn(m_applicationServices1).times(2);

        expectResourceDaoCall(m_locationMonitor2_1, m_applicationServices1);

        m_easyMockUtils.replayAll();
        DistributedStatusHistoryModel summary = m_service.createHistoryModel(locationName, monitorId, applicationName, timeSpan, previousLocation);
        m_easyMockUtils.verifyAll();
        
        assertNotNull("summary should not be null", summary);
        assertNotNull("summary locations list should not be null", summary.getLocations());
        assertNotNull("summary applications list should not be null", summary.getApplications());
        assertNotNull("summary chosen location should not be null", summary.getChosenLocation());
        assertNotNull("summary chosen application should not be null", summary.getChosenApplication());
        assertNotNull("summary error list should not be null", summary.getErrors());
        
        assertEquals("summary locations list size", locationDefinitions.size(), summary.getLocations().size());
        assertEquals("summary applications list size", applications.size(), summary.getApplications().size());
        assertEquals("summary error list size", 1, summary.getErrors().size());
        
        // Verify sorting of applications
        assertEquals("summary applications 1", m_application1, summary.getApplications().get(0));
        assertEquals("summary applications 2", m_application2, summary.getApplications().get(1));
        
        // Verify errors
        assertEquals("summary error 1", "Could not find application 'Big Bad Voodoo Daddy Application'", summary.getErrors().get(0));
        
        // Verify chosen ones
        assertEquals("summary chosen location", m_locationDefinition2, summary.getChosenLocation());
        assertEquals("summary chosen application", m_application1, summary.getChosenApplication());
        
        // And verify that they are in the lists in the right place
        assertEquals("summary chosen location matches list", summary.getLocations().get(1), summary.getChosenLocation());
        assertEquals("summary chosen application matches list", summary.getApplications().get(0), summary.getChosenApplication());
    }

