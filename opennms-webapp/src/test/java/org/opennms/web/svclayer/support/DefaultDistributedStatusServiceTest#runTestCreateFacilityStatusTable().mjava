    /*
     * XXX need to check sorting
     */
    public void runTestCreateFacilityStatusTable() {
        resetEverything();
        
        // No need to shuffle, since this is a list
        List<OnmsMonitoringLocationDefinition> locationDefinitions =
            new LinkedList<OnmsMonitoringLocationDefinition>();
        locationDefinitions.add(m_locationDefinition1);
        locationDefinitions.add(m_locationDefinition2);
        locationDefinitions.add(m_locationDefinition3);
        
        List<OnmsApplication> applications =
            new LinkedList<OnmsApplication>();
        applications.add(m_application1);
        applications.add(m_application2);
        Collections.shuffle(applications);
        
        OnmsMonitoredService httpService = findMonitoredService(m_services, m_ip, "HTTP");
        OnmsMonitoredService httpsService = findMonitoredService(m_services, m_ip, "HTTPS");
        
        Collection<OnmsLocationSpecificStatus> mostRecentStatuses =
            new LinkedList<OnmsLocationSpecificStatus>();
        mostRecentStatuses.add(createStatus(m_locationMonitor1_1, httpService, PollStatus.available(), "20061011-00:00:00"));
        mostRecentStatuses.add(createStatus(m_locationMonitor1_1, httpsService, PollStatus.available(), "20061012-06:00:00"));
        mostRecentStatuses.add(createStatus(m_locationMonitor2_1, httpService, PollStatus.available(), "20061011-00:00:00"));
        mostRecentStatuses.add(createStatus(m_locationMonitor2_1, httpsService, PollStatus.available(), "20061012-06:00:00"));
        mostRecentStatuses.add(createStatus(m_locationMonitor2_2, httpService, PollStatus.available(), "20061011-00:00:00"));
        mostRecentStatuses.add(createStatus(m_locationMonitor2_2, httpsService, PollStatus.available(), "20061012-06:00:00"));
        
        Collection<OnmsLocationSpecificStatus> statusChanges =
            new LinkedList<OnmsLocationSpecificStatus>();
        statusChanges.add(createStatus(m_locationMonitor1_1, httpService, PollStatus.available(), "20061011-00:00:00"));
        statusChanges.add(createStatus(m_locationMonitor1_1, httpsService, PollStatus.available(), "20061012-06:00:00"));

        Date startDate = new Date(2006 - 1900, 10 - 1, 12, 0, 0, 0);
        Date endDate = new Date(2006 - 1900, 10 - 1, 13, 0, 0, 0);

        
        expect(m_locationMonitorDao.findAllMonitoringLocationDefinitions()).andReturn(locationDefinitions);
        expect(m_applicationDao.findAll()).andReturn(applications);
        expect(m_locationMonitorDao.getAllMostRecentStatusChanges()).andReturn(mostRecentStatuses);
        expect(m_locationMonitorDao.findByLocationDefinition(locationDefinitions.get(0))).andReturn(Collections.singleton(m_locationMonitor1_1));
        Collection<OnmsLocationMonitor> monitors2 = new HashSet<OnmsLocationMonitor>();
        monitors2.add(m_locationMonitor2_1);
        monitors2.add(m_locationMonitor2_2);
        expect(m_locationMonitorDao.findByLocationDefinition(locationDefinitions.get(1))).andReturn(monitors2);
        expect(m_locationMonitorDao.findByLocationDefinition(locationDefinitions.get(2))).andReturn(Collections.EMPTY_SET);
        expect(m_locationMonitorDao.getStatusChangesBetween(startDate, endDate)).andReturn(statusChanges);
        expect(m_locationMonitorDao.getAllStatusChangesAt(startDate)).andReturn(Collections.EMPTY_SET);


        replayEverything();
        SimpleWebTable table = m_service.createFacilityStatusTable(startDate,
                                                                   endDate);
        verifyEverything();
        
        //System.out.print(table.toString());
        
        SimpleWebTable expectedTable = new SimpleWebTable();
        expectedTable.setTitle("Distributed Poller Status Summary");
        expectedTable.addColumn("Area", "simpleWebTableRowLabel");
        expectedTable.addColumn("Location", "simpleWebTableRowLabel");
        expectedTable.addColumn("Application 1", "simpleWebTableRowLabel");
        expectedTable.addColumn("Application 2", "simpleWebTableRowLabel");

        expectedTable.newRow();
        expectedTable.addCell("OpenNMS NC", "simpleWebTableRowLabel");
        expectedTable.addCell("Raleigh", "simpleWebTableRowLabel");
        expectedTable.addCell("75.000%", "Normal", "distributedStatusHistory.htm?location=Raleigh&application=Application+1");
        expectedTable.addCell("75.000%", "Normal", "distributedStatusHistory.htm?location=Raleigh&application=Application+2");
        
        expectedTable.newRow();
        expectedTable.addCell("OpenNMS NC", "simpleWebTableRowLabel");
        expectedTable.addCell("Durham", "simpleWebTableRowLabel");
        expectedTable.addCell("0.000%", "Normal", "distributedStatusHistory.htm?location=Durham&application=Application+1");
        expectedTable.addCell("0.000%", "Normal", "distributedStatusHistory.htm?location=Durham&application=Application+2");
        
        expectedTable.newRow();
        expectedTable.addCell("OpenNMS OH", "simpleWebTableRowLabel");
        expectedTable.addCell("Columbus", "simpleWebTableRowLabel");
        expectedTable.addCell("0.000%", "Indeterminate", "distributedStatusHistory.htm?location=Columbus&application=Application+1");
        expectedTable.addCell("0.000%", "Indeterminate", "distributedStatusHistory.htm?location=Columbus&application=Application+2");

        assertTableEquals(expectedTable, table);
    }

