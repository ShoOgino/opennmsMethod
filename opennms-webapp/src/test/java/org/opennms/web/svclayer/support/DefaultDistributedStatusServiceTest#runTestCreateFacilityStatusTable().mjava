    public void runTestCreateFacilityStatusTable() {
        resetEverything();
        
        // No need to shuffle, since this is a list
        List<OnmsMonitoringLocationDefinition> locationDefinitions =
            new LinkedList<OnmsMonitoringLocationDefinition>();
        locationDefinitions.add(m_locationDefinition1);
        locationDefinitions.add(m_locationDefinition2);
        locationDefinitions.add(m_locationDefinition3);
        
        List<OnmsApplication> applications =
            new LinkedList<OnmsApplication>();
        applications.add(m_application1);
        applications.add(m_application2);
        Collections.shuffle(applications);
        
        Collection<OnmsLocationSpecificStatus> statuses =
            new LinkedList<OnmsLocationSpecificStatus>();
        
        expect(m_locationMonitorDao.findAllMonitoringLocationDefinitions()).andReturn(locationDefinitions);
        expect(m_applicationDao.findAll()).andReturn(applications);
        expect(m_locationMonitorDao.getAllMostRecentStatusChanges()).andReturn(statuses);
        expect(m_locationMonitorDao.findByLocationDefinition(locationDefinitions.get(0))).andReturn(m_locationMonitor1);
        expect(m_locationMonitorDao.findByLocationDefinition(locationDefinitions.get(1))).andReturn(m_locationMonitor2);
        expect(m_locationMonitorDao.findByLocationDefinition(locationDefinitions.get(2))).andReturn(m_locationMonitor3);
        
        replayEverything();
        SimpleWebTable table = m_service.createFacilityStatusTable();
        verifyEverything();
        
        //System.out.print(table.toString());
        
        SimpleWebTable expectedTable = new SimpleWebTable();
        expectedTable.setTitle("Distributed Poller Status Summary");
        expectedTable.addColumn("Area", "simpleWebTableRowLabel");
        expectedTable.addColumn("Location", "simpleWebTableRowLabel");
        expectedTable.addColumn("Application 1", "simpleWebTableRowLabel");
        expectedTable.addColumn("Application 2", "simpleWebTableRowLabel");

        expectedTable.newRow();
        expectedTable.addCell("OpenNMS NC", "simpleWebTableRowLabel");
        expectedTable.addCell("Raleigh", "simpleWebTableRowLabel");
        expectedTable.addCell("Percentage not calculated", "Indeterminate", "distributedStatusDetails.htm?location=Raleigh&application=Application+1");
        expectedTable.addCell("Percentage not calculated", "Indeterminate", "distributedStatusDetails.htm?location=Raleigh&application=Application+2");
        
        expectedTable.newRow();
        expectedTable.addCell("OpenNMS NC", "simpleWebTableRowLabel");
        expectedTable.addCell("Durham", "simpleWebTableRowLabel");
        expectedTable.addCell("Percentage not calculated", "Indeterminate", "distributedStatusDetails.htm?location=Durham&application=Application+1");
        expectedTable.addCell("Percentage not calculated", "Indeterminate", "distributedStatusDetails.htm?location=Durham&application=Application+2");
        
        expectedTable.newRow();
        expectedTable.addCell("OpenNMS OH", "simpleWebTableRowLabel");
        expectedTable.addCell("Columbus", "simpleWebTableRowLabel");
        expectedTable.addCell("Percentage not calculated", "Indeterminate", "distributedStatusDetails.htm?location=Columbus&application=Application+1");
        expectedTable.addCell("Percentage not calculated", "Indeterminate", "distributedStatusDetails.htm?location=Columbus&application=Application+2");

        assertTableEquals(expectedTable, table);
    }

