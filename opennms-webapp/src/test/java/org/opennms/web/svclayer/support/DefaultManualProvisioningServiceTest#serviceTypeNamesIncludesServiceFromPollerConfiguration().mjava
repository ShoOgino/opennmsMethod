    @Test
    public void serviceTypeNamesIncludesServiceFromPollerConfiguration() {
        // Map of service monitors
        final Map<String, ServiceMonitor> serviceMonitors = new HashMap<String, ServiceMonitor>();
        serviceMonitors.put("Shochu-Stock-Level", new AbstractServiceMonitor() {
            @Override
            public PollStatus poll(MonitoredService svc, Map<String, Object> parameters) {
                return null;
            }
        });

        // Build a mock config. that returns our map
        final PollerConfig pollerConfig = EasyMock.createNiceMock(PollerConfig.class);
        EasyMock.expect(pollerConfig.getServiceMonitors()).andReturn(serviceMonitors).anyTimes();
        m_provisioningService.setPollerConfig(pollerConfig);

        EasyMock.replay(pollerConfig);

        final Collection<String> services = m_provisioningService.getServiceTypeNames("");
        assertTrue(services.contains("ICMP"));
        assertTrue(services.contains("Shochu-Stock-Level"));

        EasyMock.verify(pollerConfig);
    }

