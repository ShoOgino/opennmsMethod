    public void runTestCreateStatusNoLocationMonitor() {
        //expectEverything();
        resetEverything();
        
        expect(m_applicationDao.findByName("Application 2")).andReturn(m_application2);
        expect(m_locationMonitorDao.findMonitoringLocationDefinition(m_locationDefinition3.getName())).andReturn(m_locationDefinition3);
        expect(m_locationMonitorDao.findByLocationDefinition(m_locationDefinition3)).andReturn(Collections.EMPTY_SET);
        //expect(m_pollerConfig.getPackage("columbus")).andReturn(m_pkg);
        //expect(m_pollerConfig.getServiceSelectorForPackage(m_pkg)).andReturn(m_selector);
        //expect(m_monitoredServiceDao.findMatchingServices(m_selector)).andReturn(m_services);
        
        ThrowableAnticipator ta = new ThrowableAnticipator();
        ta.anticipate(new IllegalArgumentException("No location monitors have registered for location \"Columbus\""));
        
        replayEverything();
        try {
            SimpleWebTable table =
                m_service.createStatusTable(m_locationDefinition3.getName(),
                                            m_application2.getName());
        } catch (Throwable t) {
            ta.throwableReceived(t);
        }
        ta.verifyAnticipated();

        verifyEverything();

        /*
        
        
        //System.out.print(table.toString());
        
        SimpleWebTable expectedTable = new SimpleWebTable();
        expectedTable.setTitle("Distributed poller view for Application 2 from Columbus location");
        
        expectedTable.addColumn("Node", "simpleWebTableHeader");
        expectedTable.addColumn("Monitor", "simpleWebTableHeader");
        expectedTable.addColumn("Service", "simpleWebTableHeader");
        expectedTable.addColumn("Status", "simpleWebTableHeader");
        expectedTable.addColumn("Response Time", "simpleWebTableHeader");
        
        expectedTable.newRow();
        expectedTable.addCell("Node 1", "Critical");
        expectedTable.addCell("Node 1", "");
        expectedTable.addCell("HTTPS", "");
        expectedTable.addCell("Unknown", "bright");
        expectedTable.addCell("", "");
        
        assertTableEquals(expectedTable, table);
        */
    }

