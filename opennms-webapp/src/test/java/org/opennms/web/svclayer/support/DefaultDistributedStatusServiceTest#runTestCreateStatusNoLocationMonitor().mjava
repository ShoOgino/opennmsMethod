    public void runTestCreateStatusNoLocationMonitor() {
        //expectEverything();
        resetEverything();
        
        expect(m_applicationDao.findByLabel("Application 2")).andReturn(m_application2);
        expect(m_locationMonitorDao.findMonitoringLocationDefinition(m_locationDefinition3.getName())).andReturn(m_locationDefinition3);
        expect(m_locationMonitorDao.findByLocationDefinition(m_locationDefinition3)).andReturn(m_locationMonitor3);
        expect(m_pollerConfig.getPackage("columbus")).andReturn(m_pkg);
        expect(m_pollerConfig.getServiceSelectorForPackage(m_pkg)).andReturn(m_selector);
        expect(m_monitoredServiceDao.findMatchingServices(m_selector)).andReturn(m_services);
        
        expect(m_categoryDao.findByNode(m_node)).andReturn(null).times(m_application2.getMemberServices().size());
        
        replayEverything();
        SimpleWebTable table =
            m_service.createStatusTable(m_locationDefinition3.getName(),
                                        m_application2.getLabel());
        
        verifyEverything();
        
        //System.out.print(table.toString());
        
        SimpleWebTable expectedTable = new SimpleWebTable();
        expectedTable.setTitle("Distributed poller view for Application 2 from Columbus location");
        
        expectedTable.addColumn("Category", "simpleWebTableHeader");
        expectedTable.addColumn("Node", "simpleWebTableHeader");
        expectedTable.addColumn("Service", "simpleWebTableHeader");
        expectedTable.addColumn("Status", "simpleWebTableHeader");
        expectedTable.addColumn("Response Time", "simpleWebTableHeader");
        
        expectedTable.newRow();
        expectedTable.addCell("", "simpleWebTableRowLabel");
        expectedTable.addCell("Node 1", "simpleWebTableRowLabel");
        expectedTable.addCell("HTTP", "simpleWebTableRowLabel");
        expectedTable.addCell("Unknown", "simpleWebTableRowLabel");
        expectedTable.addCell("", "simpleWebTableRowLabel");
        expectedTable.newRow();
        
        expectedTable.addCell("", "simpleWebTableRowLabel");
        expectedTable.addCell("Node 1", "simpleWebTableRowLabel");
        expectedTable.addCell("HTTPS", "simpleWebTableRowLabel");
        expectedTable.addCell("Unknown", "simpleWebTableRowLabel");
        expectedTable.addCell("", "simpleWebTableRowLabel");
        
        assertTableEquals(expectedTable, table);
    }

