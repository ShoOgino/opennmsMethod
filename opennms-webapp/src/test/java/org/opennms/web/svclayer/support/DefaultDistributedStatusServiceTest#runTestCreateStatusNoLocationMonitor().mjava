    public void runTestCreateStatusNoLocationMonitor() {
        DistributedStatusDetailsCommand command =
            new DistributedStatusDetailsCommand();
        Errors errors = new BindException(command, "command");

        command.setLocation(m_locationDefinition3.getName());
        command.setApplication(m_application2.getName());

        resetEverything();

        expect(m_applicationDao.findByName("Application 2")).andReturn(m_application2);
        expect(m_locationMonitorDao.findMonitoringLocationDefinition(m_locationDefinition3.getName())).andReturn(m_locationDefinition3);
        expect(m_locationMonitorDao.findByLocationDefinition(m_locationDefinition3)).andReturn(Collections.EMPTY_LIST);

        replayEverything();
        SimpleWebTable table =
            m_service.createStatusTable(command, errors);

        assertEquals("Number of errors", 1, errors.getErrorCount());
        assertEquals("Number of global errors", 1, errors.getGlobalErrorCount());
        assertEquals("Number of field errors", 0, errors.getFieldErrorCount());
        ObjectError e = (ObjectError) errors.getGlobalErrors().get(0);
        assertEquals("Error code 0", "location.no-monitors", e.getCode());
        assertEquals("Error 0 argument count", 2, e.getArguments().length);
        assertEquals("Error argument 0.0", "Application 2", e.getArguments()[0]);
        assertEquals("Error argument 0.0", "Columbus", e.getArguments()[1]);

        verifyEverything();

        /*
        
        
        //System.out.print(table.toString());
        
        SimpleWebTable expectedTable = new SimpleWebTable();
        expectedTable.setTitle("Distributed poller view for Application 2 from Columbus location");
        
        expectedTable.addColumn("Node", "simpleWebTableHeader");
        expectedTable.addColumn("Monitor", "simpleWebTableHeader");
        expectedTable.addColumn("Service", "simpleWebTableHeader");
        expectedTable.addColumn("Status", "simpleWebTableHeader");
        expectedTable.addColumn("Response Time", "simpleWebTableHeader");
        
        expectedTable.newRow();
        expectedTable.addCell("Node 1", "Critical");
        expectedTable.addCell("Node 1", "");
        expectedTable.addCell("HTTPS", "");
        expectedTable.addCell("Unknown", "bright");
        expectedTable.addCell("", "");
        
        assertTableEquals(expectedTable, table);
        */
    }

