    @Override
    protected void setUp() throws Exception {
        super.setUp();

        Locale.setDefault(Locale.US);

        m_service.setMonitoredServiceDao(m_monitoredServiceDao);
        m_service.setMonitoringLocationDao(m_monitoringLocationDao);
        m_service.setLocationMonitorDao(m_locationMonitorDao);
        m_service.setApplicationDao(m_applicationDao);
        m_service.setResourceDao(m_resourceDao);
        m_service.setGraphDao(m_graphDao);
        m_service.afterPropertiesSet();
        
        m_locationDefinition1 = new OnmsMonitoringLocation("Raleigh", "OpenNMS NC", "raleigh");
        m_locationDefinition2 = new OnmsMonitoringLocation("Durham", "OpenNMS NC", "durham");
        m_locationDefinition3 = new OnmsMonitoringLocation("Columbus", "OpenNMS OH", "columbus");

        m_application1 = new OnmsApplication();
        m_application1.setName("Application 1");
        
        m_application2 = new OnmsApplication();
        m_application2.setName("Application 2");

        m_locationMonitor1_1 = new OnmsLocationMonitor();
        m_locationMonitor1_1.setId(LOCATION_MONITOR_ID_A);
        m_locationMonitor1_1.setLastUpdated(new Date());
        m_locationMonitor1_1.setLocation("Raleigh");
        m_locationMonitor1_1.setStatus(MonitorStatus.STARTED);
        assertEquals("location monitor 1.1 status", MonitorStatus.STARTED, m_locationMonitor1_1.getStatus());
        
        m_locationMonitor2_1 = new OnmsLocationMonitor();
        m_locationMonitor2_1.setId(LOCATION_MONITOR_ID_B);
        m_locationMonitor2_1.setLastUpdated(new Date());
        m_locationMonitor2_1.setLocation("Durham");
        m_locationMonitor2_1.setStatus(MonitorStatus.STARTED);
        assertEquals("location monitor 2.1 status", MonitorStatus.STARTED, m_locationMonitor2_1.getStatus());
        
        m_locationMonitor2_2 = new OnmsLocationMonitor();
        m_locationMonitor2_2.setId(LOCATION_MONITOR_ID_C);
        m_locationMonitor2_2.setLocation("Durham");
        m_locationMonitor2_2.setStatus(MonitorStatus.STARTED);
        assertEquals("location monitor 2.2 status", MonitorStatus.STARTED, m_locationMonitor2_2.getStatus());
        
        List<String> serviceNames = new ArrayList<String>();
        serviceNames.add("ICMP");
        serviceNames.add("DNS");
        serviceNames.add("HTTP");
        serviceNames.add("HTTPS");
        Collections.shuffle(serviceNames); // shuffle to test sorting
        
        m_node = new OnmsNode();
        m_ip = InetAddressUtils.addr("1.1.1.1");
        m_node.setLabel("Node 1");
        m_node.setId(1);
        
        // Can't shuffle since it's a set
        m_services = new HashSet<OnmsMonitoredService>();
        m_services.add(new OnmsMonitoredService(new OnmsIpInterface(m_ip, m_node), new OnmsServiceType("ICMP")));
        m_services.add(new OnmsMonitoredService(new OnmsIpInterface(m_ip, m_node), new OnmsServiceType("DNS")));
        m_services.add(new OnmsMonitoredService(new OnmsIpInterface(m_ip, m_node), new OnmsServiceType("HTTP")));
        m_services.add(new OnmsMonitoredService(new OnmsIpInterface(m_ip, m_node), new OnmsServiceType("HTTPS")));

        // Can't shuffle since these since they are sets
        m_applicationServices1 = new TreeSet<OnmsMonitoredService>();
        m_applicationServices1.add(findMonitoredService(m_services, m_ip, "HTTP"));
        m_applicationServices1.add(findMonitoredService(m_services, m_ip, "HTTPS"));
//        m_application1.setMemberServices(applicationServices1);
        
        m_applicationServices2 = new TreeSet<OnmsMonitoredService>();
        m_applicationServices2.add(findMonitoredService(m_services, m_ip, "HTTPS"));
//        m_application2.setMemberServices(applicationServices2);


        /*
        m_application2 = new OnmsApplication();
        m_application2.setLabel("Application 2");
        // XXX shuffle to verify sorting? create new list and do: Collections.shuffle(applicationServices2)
        m_application2.setMemberServices(applicationServices1);
        */

        
    }

