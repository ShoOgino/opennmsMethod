    protected void setUp() {
        m_service.setPollerConfig(m_pollerConfig);
        m_service.setMonitoredServiceDao(m_monitoredServiceDao);
        m_service.setLocationMonitorDao(m_locationMonitorDao);
        m_service.setApplicationDao(m_applicationDao);
        
        m_locationDefinition1 = new OnmsMonitoringLocationDefinition("Raleigh", "raleigh", "OpenNMS NC");
        m_locationDefinition2 = new OnmsMonitoringLocationDefinition("Durham", "durham", "OpenNMS NC");
        m_locationDefinition3 = new OnmsMonitoringLocationDefinition("Columbus", "columbus", "OpenNMS OH");

        m_application1 = new OnmsApplication();
        m_application1.setName("Application 1");
        
        m_application2 = new OnmsApplication();
        m_application2.setName("Application 2");

        m_locationMonitor1_1 = new OnmsLocationMonitor();
        m_locationMonitor1_1.setLastCheckInTime(new Date());
        m_locationMonitor1_1.setDefinitionName("Raleigh");
        
        m_locationMonitor2_1 = new OnmsLocationMonitor();
        m_locationMonitor2_1.setLastCheckInTime(new Date());
        m_locationMonitor2_1.setDefinitionName("Durham");
        
        m_locationMonitor2_2 = new OnmsLocationMonitor();
        m_locationMonitor2_2.setDefinitionName("Durham");
        
        m_locationMonitor3_1 = null; // Test the case where there is no monitor for this location

        m_pkg = new Package();

        List<String> serviceNames = new ArrayList<String>();
        serviceNames.add("ICMP");
        serviceNames.add("DNS");
        serviceNames.add("HTTP");
        serviceNames.add("HTTPS");
        Collections.shuffle(serviceNames); // shuffle to test sorting

        m_selector = new ServiceSelector("IPADDR IPLIKE *.*.*.*", serviceNames);
        
        m_node = new OnmsNode();
        m_ip = "1.1.1.1";
        m_node.setLabel("Node 1");
        
        // Can't shuffle since it's a set
        m_services = new HashSet<OnmsMonitoredService>();
        m_services.add(new OnmsMonitoredService(new OnmsIpInterface(m_ip, m_node), new OnmsServiceType("ICMP")));
        m_services.add(new OnmsMonitoredService(new OnmsIpInterface(m_ip, m_node), new OnmsServiceType("DNS")));
        m_services.add(new OnmsMonitoredService(new OnmsIpInterface(m_ip, m_node), new OnmsServiceType("HTTP")));
        m_services.add(new OnmsMonitoredService(new OnmsIpInterface(m_ip, m_node), new OnmsServiceType("HTTPS")));

        // Can't shuffle since these since they are sets
        Set<OnmsMonitoredService> applicationServices1 = new HashSet<OnmsMonitoredService>();
        applicationServices1.add(findMonitoredService(m_services, m_ip, "HTTP"));
        applicationServices1.add(findMonitoredService(m_services, m_ip, "HTTPS"));
        m_application1.setMemberServices(applicationServices1);
        
        Set<OnmsMonitoredService> applicationServices2 = new HashSet<OnmsMonitoredService>();
        applicationServices2.add(findMonitoredService(m_services, m_ip, "HTTPS"));
        m_application2.setMemberServices(applicationServices2);


        /*
        m_application2 = new OnmsApplication();
        m_application2.setLabel("Application 2");
        // XXX shuffle to verify sorting? create new list and do: Collections.shuffle(applicationServices2)
        m_application2.setMemberServices(applicationServices1);
        */

        
    }

