    @Test
    @JUnitTemporaryDatabase // Relies on specific IDs so we need a fresh database
    public void testGetOutagesByLocation() {
        createNodeEventAndOutage("Pittsboro", "nodeA", "172.16.10.10", "ICMP");
        createNodeEventAndOutage("Pittsboro", "nodeB", "172.16.10.20", "ICMP");
        createNodeEventAndOutage("Minneapolis", "nodeC", "172.16.20.10", "ICMP");
        createNodeEventAndOutage("Minneapolis", "nodeD", "172.16.20.20", "ICMP");
        createNodeEventAndOutage("Minneapolis", "nodeE", "172.16.20.30", "ICMP");

        Outage[] outage1 = m_daoOutageRepo.getMatchingOutages(new OutageCriteria());
        assertEquals(10, outage1.length);

        Outage[] outage2 = m_daoOutageRepo.getMatchingOutages(new OutageCriteria(new LocationFilter("Minneapolis")));
        assertEquals(3, outage2.length);
        assertTrue(Arrays.stream(outage2).allMatch(o -> o.getLocation().equals("Minneapolis")));

        Outage[] outage3 = m_daoOutageRepo.getMatchingOutages(new OutageCriteria(new NegativeLocationFilter("Minneapolis")));
        assertEquals(7, outage3.length);
        assertTrue(Arrays.stream(outage3).allMatch(o -> !o.getLocation().equals("Minneapolis")));
    }

