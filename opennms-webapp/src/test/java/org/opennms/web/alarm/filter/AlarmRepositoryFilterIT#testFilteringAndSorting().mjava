    @Test
    @Transactional
    @JUnitTemporaryDatabase
    public void testFilteringAndSorting() {
        final OnmsDistPoller poller = m_dbPopulator.getDistPollerDao().whoami();

        // set up alarms...
        final OnmsEvent event = new OnmsEvent();
        event.setEventLog("Y");
        event.setEventDisplay("Y");
        event.setEventCreateTime(new Date());
        event.setDistPoller(poller);
        event.setEventTime(new Date());
        event.setEventSeverity(OnmsSeverity.CRITICAL.getId());
        event.setEventUei("uei://org/opennms/test/EventDaoTest");
        event.setEventSource("test");
        m_dbPopulator.getEventDao().save(event);
        m_dbPopulator.getEventDao().flush();

        final OnmsNode node = m_dbPopulator.getNodeDao().findAll().iterator().next();

        final OnmsAlarm alarm1 = new OnmsAlarm();
        alarm1.setNode(node);
        alarm1.setUei(event.getEventUei());
        alarm1.setSeverityId(event.getEventSeverity());
        alarm1.setFirstEventTime(event.getEventTime());
        alarm1.setLastEvent(event);
        alarm1.setCounter(1);
        alarm1.setDistPoller(poller);
        m_dbPopulator.getAlarmDao().save(alarm1);
        m_dbPopulator.getAlarmDao().flush();

        final OnmsAlarm alarm2 = new OnmsAlarm();
        alarm2.setNode(node);
        alarm2.setUei(event.getEventUei());
        alarm2.setSeverityId(event.getEventSeverity());
        alarm2.setFirstEventTime(event.getEventTime());
        alarm2.setLastEvent(event);
        alarm2.setCounter(1);
        alarm2.setDistPoller(poller);
        m_dbPopulator.getAlarmDao().save(alarm2);
        m_dbPopulator.getAlarmDao().flush();

        // ...and one situation
        final OnmsAlarm alarm3 = new OnmsAlarm();
        alarm3.setNode(node);
        alarm3.setUei(event.getEventUei());
        alarm3.setSeverityId(event.getEventSeverity());
        alarm3.setFirstEventTime(event.getEventTime());
        alarm3.setLastEvent(event);
        alarm3.setCounter(1);
        alarm3.setDistPoller(poller);
        alarm2.setRelatedAlarms(Sets.newHashSet(alarm1, alarm2));
        m_dbPopulator.getAlarmDao().save(alarm3);
        m_dbPopulator.getAlarmDao().flush();

        // some more alarms
        for(int i=0;i<10; i++) {
            final OnmsAlarm alarm = new OnmsAlarm();
            alarm.setNode(node);
            alarm.setUei(event.getEventUei());
            alarm.setSeverityId(event.getEventSeverity());
            alarm.setFirstEventTime(event.getEventTime());
            alarm.setLastEvent(event);
            alarm.setCounter(1);
            alarm.setDistPoller(poller);
            m_dbPopulator.getAlarmDao().save(alarm);
            m_dbPopulator.getAlarmDao().flush();
        }

        // 14 in total
        assertEquals(14, m_dbPopulator.getAlarmDao().findAll().size());

        // check for the single situation
        checkFilteringAndSorting(SortStyle.ID, Lists.newArrayList(new SituationFilter(true)), 10, 0, 1, 1);
        // check for all, first page of two
        checkFilteringAndSorting(SortStyle.ID, Lists.newArrayList(), 10, 0, 14, 10);
        // check for second page
        checkFilteringAndSorting(SortStyle.ID, Lists.newArrayList(), 10, 1, 14, 4);
        // check that all the sort styles work
        for(SortStyle sortStyle : SortStyle.values()) {
            checkFilteringAndSorting(sortStyle, Lists.newArrayList(new SituationFilter(true)), 10, 0, 1, 1);
        }
    }

