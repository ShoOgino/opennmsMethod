    public void testPrefabPropertiesReloadBad() throws IOException, InterruptedException {
        /*
         * We're not going to use the anticipator functionality, but it's
         * handy for handling temporary directories.
         */
        FileAnticipator fa = new FileAnticipator();
        
        MockLogAppender.setupLogging(false, "DEBUG");
        
        try {
            File f = fa.tempFile("snmp-graph.properties");

            FileWriter writer = new FileWriter(f);
            writer.write(s_prefab);
            writer.close();

            PropertiesGraphDao dao = new PropertiesGraphDao("performance=" + f.getAbsolutePath(), "");
            PrefabGraphType type = dao.findByName("performance");
            assertNotNull("could not get performance prefab graph type", type);
            
            assertNotNull("could not get mib2.bits report", type.getQuery("mib2.bits"));
            assertNotNull("could not get mib2.discards report", type.getQuery("mib2.discards"));

            /*
             *  On UNIX, the resolution of the last modified time is 1 second,
             *  so we need to wait at least that long before rewriting the
             *  file to ensure that we have crossed over into the next second.
             *  At least we're not crossing over with John Edward.
             */
            Thread.sleep(1100);

            writer = new FileWriter(f);
            // Don't include the reports line at all so we get an error
            String noReports = s_prefab.replace("reports=mib2.bits, mib2.discards", "");
            writer.write(noReports);
            writer.close();
            
            type = dao.findByName("performance");
            assertNotNull("could not get performance prefab graph type after rewriting config file", type);
            assertNotNull("could not get mib2.bits report after rewriting config file", type.getQuery("mib2.bits"));
            assertNotNull("could not get mib2.discards report after rewriting config file", type.getQuery("mib2.discards"));
        } finally {
            fa.deleteExpected();
            fa.tearDown();
        }
        
        LoggingEvent[] events = MockLogAppender.getEvents();
        assertNotNull("logged event list was null", events);
        assertEquals("should only have received two logged events", 2, events.length);
        assertEquals("should have received an ERROR event" + events[0], Level.ERROR, events[0].getLevel());
        assertEquals("should have received an INFO event" + events[1], Level.INFO, events[1].getLevel());
    }

