    @Test
    public void testCreateAndDeleteFavorites() throws FilterFavoriteService.FilterFavoriteException {
        List<OnmsFilterFavorite> alarmFavorites = service.getFavorites("mvr", OnmsFilterFavorite.Page.ALARM);
        List<OnmsFilterFavorite> eventFavorites = service.getFavorites("mvr", OnmsFilterFavorite.Page.EVENT);

        // CREATE OK
        OnmsFilterFavorite favorite = createFavorite(service, "mvr", "First Favorite", "filter=severity=6&amp;filter=node=2", OnmsFilterFavorite.Page.EVENT);
        Assert.assertEquals(favorite, service.getFavorite(favorite.getId(), "mvr"));

        // check that the created favorite is not in both lists, but in event list
        List<OnmsFilterFavorite> newAlarmFavorites = service.getFavorites("mvr", OnmsFilterFavorite.Page.ALARM);
        List<OnmsFilterFavorite> newEventFavorites = service.getFavorites("mvr", OnmsFilterFavorite.Page.EVENT);

        Assert.assertEquals(alarmFavorites, newAlarmFavorites);
        Assert.assertEquals(eventFavorites.size() + 1, newEventFavorites.size());
        Assert.assertTrue(newEventFavorites.contains(favorite));

        // CREATE NOK
        try {
            createFavorite(service, favorite.getUsername(), favorite.getName(), favorite.getFilter(), favorite.getPage());
            Assert.fail("Creation should have been failed");
        } catch (FilterFavoriteService.FilterFavoriteException ex) {
            ; // Don't panic, this is expected ;)
        }

        // READ OK
        Assert.assertEquals(favorite, service.getFavorite(favorite.getId(), "mvr"));

        // READ NOK
        Assert.assertNull(service.getFavorite(favorite.getId(), "admin")); // does not have this favorite

        // DELETE NOK
        Assert.assertEquals(false, service.deleteFavorite(favorite.getId(), "admin")); // does not belong to this user
        Assert.assertNotNull(service.getFavorite(favorite.getId(), "mvr")); // check original user, should still be there

        // DELETE OK
        Assert.assertEquals(true, service.deleteFavorite(favorite.getId(), "mvr")); // does belong to this user
        Assert.assertNull(service.getFavorite(favorite.getId(), "mvr")); // check original user, should be deleted
    }

