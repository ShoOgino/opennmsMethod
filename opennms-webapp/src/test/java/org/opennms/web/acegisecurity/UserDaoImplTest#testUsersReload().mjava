    public void testUsersReload() throws Exception {
        /*
         * We're not going to use the anticipator functionality, but it's
         * handy for handling temporary directories.
         */
        FileAnticipator fa = new FileAnticipator();
        
        try {
            File users = fa.tempFile("users.xml");
            File magicUsers = fa.tempFile("magic-users.properties");
            
            writeTemporaryFile(users, getUsersXmlContents());
            writeTemporaryFile(magicUsers, getMagicUsersContents());

            UserDaoImpl dao = new UserDaoImpl();
            dao.setUsersConfigurationFile(users.getAbsolutePath());
            dao.setMagicUsersConfigurationFile(magicUsers.getAbsolutePath());

            User user;
            
            user = dao.getByUsername("dashboard");
            assertNotNull("dashboard user should exist and the object should not be null", user);
            
            user = dao.getByUsername("dashboard-foo");
            assertNull("dashboard-foo user should not exist and the object should be null", user);

            /*
             *  On UNIX, the resolution of the last modified time is 1 second,
             *  so we need to wait at least that long before rewriting the
             *  file to ensure that we have crossed over into the next second.
             *  At least we're not crossing over with John Edward.
             */
            Thread.sleep(1100);

            writeTemporaryFile(users, getUsersXmlContents().replace("<user-id>dashboard</user-id>", "<user-id>dashboard-foo</user-id>"));

            user = dao.getByUsername("dashboard");
            assertNull("dashboard user should no longer exist and the object should be null", user);
            
            user = dao.getByUsername("dashboard-foo");
            assertNotNull("dashboard-foo user should now exist and the object should not be null", user);
        } finally {
            fa.deleteExpected();
            fa.tearDown();
        }
    }

