    /**
     * Actually process the operations be calling the underlying delegate
     * strategy
     */
    private void processPendingOperations() {
        Logging.withPrefix(m_category, new Runnable() {
            @Override public void run() {
                Object rrd = null;
                String fileName = null;

                try {
                    final LinkedList<Operation> ops = getNext();
                    if (ops == null) {
                        return;
                    }
                    // update stats correctly we update them even if an exception occurs
                    // while we are processing
                    for (final Operation op : ops) {
                        if (op.isSignificant()) {
                            setSignificantOpsCompleted(getSignificantOpsCompleted() + 1);
                        }

                    }
                    // now we actually process the events
                    for (final Operation op : ops) {
                        fileName = op.getFileName();
                        rrd = op.process(rrd);
                    }
                } catch (final Throwable e) {
                    setErrors(getErrors() + 1);
                    logLapTime("Error updating file " + fileName + ": " + e.getMessage());
                    m_log.debug("Error updating file {}: {}", fileName, e.getMessage(), e);
                } finally {
                    processClose(rrd);
                }
            }
        });
    }

