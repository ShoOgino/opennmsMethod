    /**
     * Add datapoints to a round robin database.
     * 
     * @param owner
     *            the owner of the file. This is used in log messages
     * @param repositoryDir
     *            the directory the file resides in
     * @param rrdName
     *            the name for the rrd file.
     * @param timestamp
     *            the timestamp in millis to use for the rrd update (this gets rounded to the nearest second)
     * @param val
     *            a colon separated list of values representing the updates for datasources for this rrd
     *            
     * @throws RrdException
     */
    public static void updateRRD(String owner, String repositoryDir, String rrdName, long timestamp, String val) throws RrdException {
        // Issue the RRD update
        String rrdFile = repositoryDir + File.separator + rrdName + getExtension();
        long time = (timestamp + 500L) / 1000L;

        String updateVal = Long.toString(time) + ":" + val;

        log().info("updateRRD:updating RRD file: " + rrdFile + " with value: " + updateVal);

        Object rrd = null;
        try {
            rrd = getStrategy().openFile(rrdFile);
            getStrategy().updateFile(rrd, owner, updateVal);
        } catch (Exception e) {
            log().error("Error updating rrdFile " + rrdFile + " with value: " + updateVal, e);
            throw new org.opennms.netmgt.rrd.RrdException("Error updating rrdFile " + rrdFile + " with value: " + updateVal, e);
        } finally {
            try {
                if (rrd != null) {
                    getStrategy().closeFile(rrd);
                }
            } catch (Exception e) {
                throw new org.opennms.netmgt.rrd.RrdException("Exception closing rrdDb", e);
            }
        }

        if (log().isDebugEnabled()) {
            log().debug("updateRRD: RRD update command completed.");
        }
    }

