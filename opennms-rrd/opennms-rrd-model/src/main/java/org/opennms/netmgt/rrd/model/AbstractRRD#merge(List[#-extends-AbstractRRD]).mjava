    /**
     * Merge.
     *
     * @param rrdList the RRD list
     * @throws IllegalArgumentException the illegal argument exception
     */
    public void merge(List<? extends AbstractRRD> rrdList) throws IllegalArgumentException {
        if (rrdList.size() != getDataSources().size()) {
            throw new IllegalArgumentException("Cannot merge RRDs because the amount of RRDs doesn't match the amount of data sources.");
        }
        for (AbstractRRD arrd : rrdList) {
            if (!getVersion().equals(getVersion())) {
                throw new IllegalArgumentException("Cannot merge RRDs because one of them have a different file version.");
            }
            if (!hasEqualsRras(arrd)) {
                throw new IllegalArgumentException("Cannot merge RRDs because one of them as different RRA configuration.");
            }
            if (arrd.getDataSources().size() > 1) {
                throw new IllegalArgumentException("Cannot merge RRDs because one of them has more than one DS.");
            }
        }
        Collections.sort(rrdList, new Comparator<AbstractRRD>() {
            @Override
            public int compare(AbstractRRD a, AbstractRRD b) {
                int aInt = getIndex(a.getDataSources().get(0).getName());
                int bInt = getIndex(b.getDataSources().get(0).getName());
                return aInt - bInt;
            }
        });
        for (int i = 0; i < getRras().size(); i++) {
            AbstractRRA rra = getRras().get(i);
            for (int j = 0; j < rra.getRows().size(); j++) {
                Row row = rra.getRows().get(j);
                for (int k = 0; k < row.getValues().size(); k++) {
                    Double v = rrdList.get(k).getRras().get(i).getRows().get(j).getValues().get(0);
                    if (!v.isNaN()) {
                        row.getValues().set(k, v);
                    }
                }
            }
        }
    }

