    /**
     * Merge.
     *
     * @param rrdList the RRD list
     * @throws IllegalArgumentException the illegal argument exception
     */
    public void merge(List<? extends AbstractRRD> rrdList) throws IllegalArgumentException {
        if (rrdList.size() != getDataSources().size()) {
            final String msg = String.format("Cannot merge RRDs because the amount of RRDs (%d) doesn't match the amount of data sources (%d)", rrdList.size(), getDataSources().size());
            throw new IllegalArgumentException(msg);
        }
        int validDsFound = 0;
        for (AbstractRRD singleMetricRrd : rrdList) {
            if (!singleMetricRrd.getStep().equals(getStep())) {
                throw new IllegalArgumentException("Cannot merge RRDs because one of them have a different step value.");
            }
            if (!singleMetricRrd.getVersion().equals(getVersion())) {
                throw new IllegalArgumentException("Cannot merge RRDs because one of them have a different file version.");
            }
            if (singleMetricRrd.getDataSources().size() > 1) {
                throw new IllegalArgumentException("Cannot merge RRDs because one of them has more than one DS.");
            }
            for (AbstractDS ds : getDataSources()) {
                if (ds.getName().equals(singleMetricRrd.getDataSource(0).getName())) {
                    validDsFound++;
                    break;
                }
            }
            if (!hasMergeableRRAs(singleMetricRrd)) {
                throw new IllegalArgumentException("Cannot merge RRDs because there are no mergeable RRA configuration.");
            }
        }
        if (validDsFound != getDataSources().size()) {
            throw new IllegalArgumentException("Cannot merge RRDs because some data sources don't have a RRD file on the list.");
        }
        for (AbstractRRA localRra : getRras()) {
            for (Row localRow : localRra.getRows()) {
                for (int k = 0; k < getDataSources().size(); k++) {
                    final String ds = getDataSources().get(k).getName();
                    AbstractRRA singleMetricRra = null;
                    AbstractRRD singleMetricRrd = null;
                    for (AbstractRRD rrd : rrdList) {
                        if (rrd.getDataSource(0).getName().equals(ds)) {
                            singleMetricRrd = rrd;
                            singleMetricRra = rrd.getMergeableRRA(localRra);
                            break;
                        }
                    }
                    if (singleMetricRra != null) {
                        Long ts = findTimestampByRow(localRra, localRow);
                        Row row = singleMetricRrd.findRowByTimestamp(singleMetricRra, ts);
                        if (row != null) {
                            Double v = row.getValues().get(0);
                            if (!v.isNaN()) {
                                localRow.getValues().set(k, v);
                            }
                        }
                    }
                }
            }
        }
    }

