	/**
	 * <P>
	 * Test to see if the passed host-port pair is an endpoint for a TCP server.
	 * If there is a TCP server at the destination value then a connection is
	 * made using the params variable data and a check is requested from the
	 * remote WMI service.
	 * </P>
	 * 
	 * @param host
	 *            The remote host to connect to.
	 * @param retries
	 *            The number of retries to attempt when connecting.
	 * @param timeout
	 *            The TCP socket timeout to use.
	 * @param params
	 *            The WMI parameters used to validate the response.
	 * @return The WmiResult the server sent, updated by WmiManager to
	 *         contain the proper result code based on the params passed.
	 */
	private WmiResult isServer(final InetAddress host, final String user, final String pass,
	        final String domain, final String matchType, final int retries, final int timeout, final WmiParams params, final String wmiNamespace) {
		boolean isAServer = false;

		WmiResult result = null;
		for (int attempts = 0; attempts <= retries && !isAServer; attempts++) {
		    WmiManager mgr = null;
			try {
				// Create the WMI Manager
				mgr = new WmiManager(InetAddressUtils.str(host), user, pass, domain, matchType);

				// Set the WMI namespace
				mgr.setNamespace(wmiNamespace);
				// Connect to the WMI server.
				mgr.init();

				// Perform the operation specified in the parameters.
				result = mgr.performOp(params);
                if(params.getWmiOperation().equals(WmiParams.WMI_OPERATION_WQL)) {
                    LOG.debug("WmiPlugin: {} :  {}", params.getWql(), WmiResult.convertStateToString(result.getResultCode()));
                } else {
                    LOG.debug("\\\\{}\\{} : {}", params.getWmiClass(), params.getWmiObject(), WmiResult.convertStateToString(result.getResultCode()));
                }

                isAServer = true;
			} catch (final WmiException e) {
			    LOG.info("WmiPlugin: Check failed.", e);
				isAServer = false;
			} finally {
			    if (mgr != null) {
			        try {
			            mgr.close();
			        } catch (final WmiException e) {
			            LOG.warn("An error occurred closing the WMI manager.", e);
			        }
			    }
			}
		}
		return result;
	}

