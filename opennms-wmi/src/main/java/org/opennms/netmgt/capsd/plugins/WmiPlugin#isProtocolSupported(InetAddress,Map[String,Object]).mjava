	/**
	 * Returns true if the protocol defined by this plugin is supported. If the
	 * protocol is not supported then a false value is returned to the caller.
	 * The qualifier map passed to the method is used by the plugin to return
	 * additional information by key-name. These key-value pairs can be added to
	 * service events if needed.
	 * <P>
	 * The following parameters are used by this plugin:
	 * <UL>
	 * <LI>wmiObject - the command to be executed on this node.
	 * <LI>wmiClass - the command to be executed on this node.
	 * <LI>password - used to override the default WMI password
	 * <LI>retry - overrides the number of times to retry connecting to the
	 * service.
	 * <LI>timeout - tcp port timeout.
	 * <LI>parameter - a string used for checking services. see documentation
	 * on specific check types for use.
	 * </UL>
	 * Protocol will return as supported only if the result code is
	 * <code>WmiResult.RES_STATE_OK</code> or
	 * <code>WmiResult.RES_STATE_WARNING</code>.
	 * 
	 * @param address
	 *            The address to check for support.
	 * @param qualifiers
	 *            The map where qualification are set by the plugin.
	 * @return True if the protocol is supported by the address.
	 */
	@Override
	public boolean isProtocolSupported(InetAddress address,
			Map<String, Object> qualifiers) {
		WmiAgentConfig agentConfig = WmiPeerFactory.getInstance().getAgentConfig(address);
		String matchType = DEFAULT_WMI_MATCH_TYPE;
		String compVal = DEFAULT_WMI_COMP_VAL;
		String compOp = DEFAULT_WMI_COMP_OP;
		String wmiClass = DEFAULT_WMI_CLASS;
		String wmiObject = DEFAULT_WMI_OBJECT;
		
		if (qualifiers != null) {
            if (qualifiers.get("timeout") != null) {
            	int timeout = ParameterMap.getKeyedInteger(qualifiers, "timeout", agentConfig.getTimeout());
                agentConfig.setTimeout(timeout);
            }
            
            if (qualifiers.get("retry") != null) {
            	int retries = ParameterMap.getKeyedInteger(qualifiers, "retry", agentConfig.getRetries());
                agentConfig.setRetries(retries);
            }

            if (qualifiers.get("username") != null) {
                String user = ParameterMap.getKeyedString(qualifiers, "username", agentConfig.getUsername());
                agentConfig.setUsername(user);
            }
            
            if (qualifiers.get("password") != null) {
                String pass = ParameterMap.getKeyedString(qualifiers, "password", agentConfig.getPassword());
                agentConfig.setUsername(pass);
            }
            
            if (qualifiers.get("domain") != null) {
                String domain = ParameterMap.getKeyedString(qualifiers, "domain", agentConfig.getDomain());
                agentConfig.setUsername(domain);
            }
            
            matchType = ParameterMap.getKeyedString(qualifiers, "matchType",
					DEFAULT_WMI_MATCH_TYPE);
			compVal = ParameterMap.getKeyedString(qualifiers, "compareValue",
					DEFAULT_WMI_COMP_VAL);
			compOp = ParameterMap.getKeyedString(qualifiers, "compareOp", DEFAULT_WMI_COMP_OP);
			wmiClass = ParameterMap.getKeyedString(qualifiers, "wmiClass",
					DEFAULT_WMI_CLASS);
			wmiObject = ParameterMap.getKeyedString(qualifiers, "wmiObject",
					DEFAULT_WMI_OBJECT);
		}

		// Create the check parameters holder.
		WmiParams clientParams = new WmiParams(compVal, compOp, wmiClass,
				wmiObject);

		// Perform the operation specified in the parameters.
		WmiResult result = isServer(address, agentConfig.getUsername(), agentConfig.getPassword(), agentConfig.getDomain(), matchType,
				agentConfig.getRetries(), agentConfig.getTimeout(), clientParams);

		// Only fail on critical and unknown returns.
		if (result.getResultCode() != WmiResult.RES_STATE_CRIT
				&& result.getResultCode() != WmiResult.RES_STATE_UNKNOWN) {

			return true;
		} else {
			return false;
		}

	}

