	/**
	 * <p>main</p>
	 *
	 * @param args an array of {@link java.lang.String} objects.
	 * @throws org.apache.commons.cli.ParseException if any.
	 */
	public static void main(String[] args) throws ParseException {
		Options options = new Options();
		options.addOption("domain", true,
				"the NT/AD domain the credentials belong to");
		options.addOption("wmiClass", true, "the object class in WMI to query");
		options.addOption("wmiObject", true, "the object to query in WMI");
        options.addOption("wmiWql", true, "the query string to execute in WMI");
		options.addOption("op", true,
				"compare operation: NOOP, EQ, NEQ, GT, LT");
		options.addOption("value", true, "the value to compare to");
		options.addOption("matchType", true,
				"type of matching for multiple results: all, none, some, one");

		CommandLineParser parser = new PosixParser();
		CommandLine cmd = parser.parse(options, args);

		List<String> arguments = cmd.getArgList();
		if (arguments.size() < 2) {
			usage(options, cmd);
			System.exit(1);
		}

		String host = arguments.remove(0);
		String user = arguments.remove(0);
		String pass = arguments.remove(0);

		String wmiClass = "";
		if (cmd.hasOption("wmiClass")) {
			wmiClass = cmd.getOptionValue("wmiClass");
		}/* else {
			usage(options, cmd);
			System.exit(1);
		}*/

		String wmiObject = "";
		if (cmd.hasOption("wmiObject")) {
			wmiObject = cmd.getOptionValue("wmiObject");
		} else {
			usage(options, cmd);
			System.exit(1);
		}
        
        String wmiWql = "";
        if (cmd.hasOption("wmiWql")) {
            wmiWql = cmd.getOptionValue("wmiWql");
        } /*else {
            usage(options, cmd);
            System.exit(1);
        } */

		String compVal = "";
		if (cmd.hasOption("value")) {
			compVal = cmd.getOptionValue("value");
		} else {
			usage(options, cmd);
			System.exit(1);
		}

		String compOp = "";
		if (cmd.hasOption("op")) {
			compOp = cmd.getOptionValue("op");
		} else {
			usage(options, cmd);
			System.exit(1);
		}

		String domain = "";
		if (cmd.hasOption("domain")) {
			domain = cmd.getOptionValue("domain");
		}

		String matchType = "all";
		if (cmd.hasOption("matchType")) {
			matchType = cmd.getOptionValue("matchType");
		}

		try {
			// Hold the WMI objects from the results.
			ArrayList<Object> wmiObjects;
			// Create the check parameters holder.
			WmiParams clientParams;
            if(wmiWql == null || wmiWql.length() == 0)
                clientParams = new WmiParams(WmiParams.WMI_OPERATION_INSTANCEOF, compVal, compOp, wmiClass,
					wmiObject);
            else
                clientParams = new WmiParams(WmiParams.WMI_OPERATION_WQL, compVal, compOp, wmiWql,
                                            wmiObject);
			// Create the WMI Manager
			WmiManager mgr = new WmiManager(host, user, pass, domain, matchType);

			// Connect to the WMI server.
			mgr.init();

			// Perform the operation specified in the parameters.
			WmiResult result = mgr.performOp(clientParams);
			// And retrieve the WMI objects from the results.
			wmiObjects = result.getResponse();
			
			// Now output a brief report of the check results.
			System.out.println("Checking: " + wmiWql + " for " + wmiObject
					+ " Op: " + compOp + " Val: " + compVal);
			System.out.println("Check results: "
					+ WmiResult.convertStateToString(result.getResultCode())
					+ " (" + wmiObjects.size() + ")");
            
			for (int i = 0; i < wmiObjects.size(); i++) {
				System.out.println("Result for (" + (i + 1) + ") " + wmiClass
						+ "\\" + wmiObject + ": " + wmiObjects.get(i));
			}

			// Disconnect when we're done.
			mgr.close();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

