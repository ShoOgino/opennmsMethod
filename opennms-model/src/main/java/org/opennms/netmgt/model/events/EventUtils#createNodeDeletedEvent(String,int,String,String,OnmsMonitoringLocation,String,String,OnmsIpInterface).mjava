    /**
     * This method is responsible for generating a nodeDeleted event and sending
     * it to eventd..
     *
     * @param source
     *            A string representing the source of the event
     * @param nodeId
     *            Nodeid of the node got deleted.
     * @param hostName
     *            the Host server name.
     * @param nodeLabel
     *            the node label of the deleted node.
     * @return a {@link org.opennms.netmgt.xml.event.Event} object.
     */
    public static Event createNodeDeletedEvent(final String source, final int nodeId, final String hostName, final String nodeLabel, final OnmsMonitoringLocation nodeLocation, final String nodeForeignId, final String nodeForeignSource, final OnmsIpInterface nodePrimaryInterface) {
        
        debug("createNodeDeletedEvent for nodeid:  %d", nodeId);

        final EventBuilder bldr = new EventBuilder(NODE_DELETED_EVENT_UEI, source);
        bldr.setNodeid(nodeId);
        bldr.setHost(hostName);

        if (nodeLabel != null) {
            bldr.addParam(PARM_NODE_LABEL, nodeLabel);
        }

        if (nodeLocation != null) {
            bldr.addParam(PARM_LOCATION, nodeLocation.getLocationName());
        }

        if (nodeForeignId != null) {
            bldr.addParam(PARM_FOREIGN_ID, nodeForeignId);
        }

        if (nodeForeignSource != null) {
            bldr.addParam(PARM_FOREIGN_SOURCE, nodeForeignSource);
        }

        if (nodePrimaryInterface != null && nodePrimaryInterface.getIpAddress() != null) {
            bldr.addParam(PARM_INTERFACE, InetAddressUtils.str(nodePrimaryInterface.getIpAddress()));
        }

        return bldr.getEvent();
    }

