    /**
     * <P>
     * Creates a new IPAddressRange object that can be used to encapsulate a contiguous range of IP
     * Addresses. Once created the object can be used to get either an Iterator or Enumeration
     * object to cycle through the list of address encapsulated by this object.
     * </P>
     * 
     * <P>
     * It is important to note that if the address for start is greater than end, the values will be
     * swapped so that the iteration is always from the lowest address to the highest address.
     * </P>
     * 
     * @param start The starting address.
     * @param end The ending address.
     * 
     */
    IPAddrRange ( InetAddress start, InetAddress end )
    {
        byte[] from = start.getAddress();
        byte[] to = end.getAddress();

        if ( new ByteArrayComparator().compare( from, to ) > 0 )
        {
            LOG.warn( "The beginning of the address range is greater than the end of the address range ({} - {}), swapping values to create a valid IP address range",
                            InetAddressUtils.str( start ), InetAddressUtils.str( end ) );
            m_end = from;
            m_begin = to;
        }
        else
        {
            m_begin = from;
            m_end = to;
        }
    }

