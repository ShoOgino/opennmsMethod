    /**
     * Updates an existing record in the OpenNMS ipInterface table.
     * 
     * @param c
     *            The connection used for the update.
     * 
     * @throws java.sql.SQLException
     *             Thrown if an error occurs with the connection
     */
    private void update(Connection c) throws SQLException {
        if (!m_fromDb) {
            throw new IllegalStateException("The record does not exists in the database");
        }

        // first extract the next node identifier
        StringBuffer sqlText = new StringBuffer("UPDATE ipInterface SET ");

        char comma = ' ';
        if ((m_changed & CHANGED_IFINDEX) == CHANGED_IFINDEX) {
            sqlText.append(comma).append("ifIndex = ?");
            comma = ',';
        }

        if ((m_changed & CHANGED_HOSTNAME) == CHANGED_HOSTNAME) {
            sqlText.append(comma).append("ipHostname = ?");
            comma = ',';
        }

        if ((m_changed & CHANGED_MANAGED) == CHANGED_MANAGED) {
            sqlText.append(comma).append("isManaged = ?");
            comma = ',';
        }

        if ((m_changed & CHANGED_STATUS) == CHANGED_STATUS) {
            sqlText.append(comma).append("ipStatus = ?");
            comma = ',';
        }

        if ((m_changed & CHANGED_POLLTIME) == CHANGED_POLLTIME) {
            sqlText.append(comma).append("ipLastCapsdPoll = ?");
            comma = ',';
        }

        if ((m_changed & CHANGED_PRIMARY) == CHANGED_PRIMARY) {
            sqlText.append(comma).append("isSnmpPrimary = ?");
            comma = ',';
        }

        if (m_useIfIndexAsKey) {
            sqlText.append(" WHERE nodeID = ? AND ipAddr = ? AND ifIndex = ?");
        } else {
            sqlText.append(" WHERE nodeID = ? AND ipAddr = ?");
        }

        if ((m_changed & CHANGED_PRIMARY) == CHANGED_PRIMARY && m_primaryState == 'N') {
            sqlText.append(" AND isSnmpPrimary != 'C'");
        }

        sqlText.append(" AND isManaged <> 'D'");

        LOG.debug("DbIpInterfaceEntry.update: SQL update statment = {}", sqlText.toString());

        // create the Prepared statement and then start setting the result values
        PreparedStatement stmt = null;
        final DBUtils d = new DBUtils(getClass());

        try {
            stmt = c.prepareStatement(sqlText.toString());
            d.watch(stmt);
            sqlText = null;
            int ndx = 1;
            if ((m_changed & CHANGED_IFINDEX) == CHANGED_IFINDEX) {
                if (m_ifIndex == -1) {
                    stmt.setNull(ndx++, Types.INTEGER);
                } else {
                    stmt.setInt(ndx++, m_ifIndex);
                }
            }
            if ((m_changed & CHANGED_HOSTNAME) == CHANGED_HOSTNAME) {
                if (m_hostname != null) {
                    stmt.setString(ndx++, m_hostname);
                } else {
                    stmt.setNull(ndx++, Types.VARCHAR);
                }
            }
            if ((m_changed & CHANGED_MANAGED) == CHANGED_MANAGED) {
                if (m_managedState == STATE_UNKNOWN) {
                    stmt.setString(ndx++, "N");
                } else {
                    stmt.setString(ndx++,
                                   new String(new char[] { m_managedState }));
                }
            }
            if ((m_changed & CHANGED_STATUS) == CHANGED_STATUS) {
                if (m_status == -1) {
                    stmt.setNull(ndx++, Types.INTEGER);
                } else {
                    stmt.setInt(ndx++, m_status);
                }
            }
            if ((m_changed & CHANGED_POLLTIME) == CHANGED_POLLTIME) {
                if (m_lastPoll != null) {
                    stmt.setTimestamp(ndx++, m_lastPoll);
                } else {
                    stmt.setNull(ndx++, Types.TIMESTAMP);
                }
            }
            if ((m_changed & CHANGED_PRIMARY) == CHANGED_PRIMARY) {
                if (m_primaryState == SNMP_UNKNOWN) {
                    stmt.setNull(ndx++, Types.CHAR);
                } else {
                    stmt.setString(ndx++,
                                   new String(new char[] { m_primaryState }));
                }
            }
            stmt.setLong(ndx++, m_nodeId);
            stmt.setString(ndx++, InetAddressUtils.str(m_ipAddr));
            if (m_useIfIndexAsKey) {
                if (m_ifIndex == -1) {
                    stmt.setNull(ndx++, Types.INTEGER);
                } else {
                    stmt.setInt(ndx++, m_originalIfIndex);
                }
            }
            // Run the insert
            int rc = stmt.executeUpdate();
            LOG.debug("DbIpInterfaceEntry.update: update result = {}", rc);
        } finally {
            d.cleanUp();
        }

        // clear the mask and mark as backed by the database
        m_changed = 0;
    }

