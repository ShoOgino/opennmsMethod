    //   this=topSegment {tmac...} {(tbridge,tport)....}U{bridgeId, bridgeIdPortId} 
    //        |
    //     bridge Id
    //        |
    //      shared {smac....} {(sbridge,sport).....}U{bridgeId,bridgePort)
    //       | | |
    //       A B C
    //    move all the macs and port on shared
    //  ------> topSegment {tmac...}U{smac....} {(tbridge,tport)}U{(sbridge,sport).....}
    public void mergeBridge(SharedSegment shared, Integer bridgeId) {

        for (BridgeBridgeLink bblink: m_bridgeportsOnLink) {
            for (BridgeMacLink link: shared.getBridgeMacLinks()) {
                BridgeMacLink nlink = new BridgeMacLink();
                nlink.setNode(bblink.getNode());
                nlink.setBridgePort(bblink.getBridgePort());
                nlink.setBridgePortIfIndex(bblink.getBridgePortIfIndex());
                nlink.setBridgePortIfName(bblink.getBridgePortIfName());
                nlink.setVlan(bblink.getVlan());
                nlink.setMacAddress(link.getMacAddress());
                nlink.setBridgeDot1qTpFdbStatus(BridgeDot1qTpFdbStatus.DOT1D_TP_FDB_STATUS_LEARNED);
                m_bridgeportsOnSegment.add(nlink);
                BridgeMacLink klink = new BridgeMacLink();
                klink.setNode(bblink.getDesignatedNode());
                klink.setBridgePort(bblink.getDesignatedPort());
                klink.setBridgePortIfIndex(bblink.getDesignatedPortIfIndex());
                klink.setBridgePortIfName(bblink.getDesignatedPortIfName());
                klink.setVlan(bblink.getDesignatedVlan());
                klink.setMacAddress(link.getMacAddress());
                klink.setBridgeDot1qTpFdbStatus(BridgeDot1qTpFdbStatus.DOT1D_TP_FDB_STATUS_LEARNED);
                m_bridgeportsOnSegment.add(klink);
            }            
        }

        for (BridgeBridgeLink dlink: shared.getBridgeBridgeLinks())
            add(dlink);

        for (BridgeMacLink link: shared.getBridgeMacLinks()) {
            m_bridgeportsOnSegment.add(link);
        }        
    }

