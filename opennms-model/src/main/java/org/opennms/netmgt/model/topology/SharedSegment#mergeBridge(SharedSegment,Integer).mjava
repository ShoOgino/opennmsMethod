    //   this=topSegment {tmac...} {(tbridge,tport)....}U{bridgeId, bridgeIdPortId} 
    //        |
    //     bridge Id
    //        |
    //      shared {smac....} {(sbridge,sport).....}U{bridgeId,bridgePort)
    //       | | |
    //       A B C
    //    move all the macs and port on shared
    //  ------> topSegment {tmac...}U{smac....} {(tbridge,tport)}U{(sbridge,sport).....}
    public void mergeBridge(SharedSegment shared, Integer bridgeId) {
        // if there is a single port on the segment
        BridgeBridgeLink first = m_portsOnSegment.iterator().next();
        if (m_macsOnSegment.isEmpty() && m_portsOnSegment.size() == 1 && first.getNode().getId().intValue() == 
                first.getDesignatedNode().getId().intValue()) {
            
            if (shared.getBridgeBridgeLinks().isEmpty()) {
                for (BridgeMacLink mlink: shared.getBridgeMacLinks()) {
                    mlink.setNode(first.getDesignatedNode());
                    mlink.setBridgePort(first.getDesignatedPort());
                    mlink.setBridgePortIfIndex(first.getDesignatedPortIfIndex());
                    mlink.setBridgePortIfName(first.getDesignatedPortIfName());
                    mlink.setVlan(first.getDesignatedVlan());
                    m_macsOnSegment.add(mlink);
                }
                m_portsOnSegment.clear();
                return;
            } 
            
            BridgeBridgeLink sharedFirst = shared.getBridgeBridgeLinks().iterator().next();
            
            if (sharedFirst.getDesignatedNode().getId().intValue() == bridgeId.intValue()) {
                m_portsOnSegment.clear();
            } else {
                first.setNode(sharedFirst.getDesignatedNode());
                first.setBridgePort(sharedFirst.getDesignatedPort());
                first.setBridgePortIfIndex(sharedFirst.getDesignatedPortIfIndex());
                first.setBridgePortIfName(sharedFirst.getDesignatedPortIfName());
                first.setVlan(sharedFirst.getDesignatedVlan());
            }
            for (BridgeBridgeLink blink : shared.getBridgeBridgeLinks()) {
                if (blink.getNode().getId().intValue() == bridgeId.intValue())
                    continue;
                blink.setDesignatedNode(first.getDesignatedNode());
                blink.setDesignatedPort(first.getDesignatedPort());
                blink.setDesignatedPortIfIndex(first.getDesignatedPortIfIndex());
                blink.setDesignatedPortIfName(first.getDesignatedPortIfName());
                blink.setDesignatedVlan(first.getDesignatedVlan());
                m_portsOnSegment.add(blink);
            }

            for (BridgeMacLink mlink: shared.getBridgeMacLinks()) {
                if (mlink.getNode().getId().intValue() == bridgeId.intValue()) {
                    mlink.setNode(first.getDesignatedNode());
                    mlink.setBridgePort(first.getDesignatedPort());
                    mlink.setBridgePortIfIndex(first.getDesignatedPortIfIndex());
                    mlink.setBridgePortIfName(first.getDesignatedPortIfName());
                    mlink.setVlan(first.getDesignatedVlan());
                } 
                m_macsOnSegment.add(mlink);    
            }
            return;            
        }

        
        for (BridgeMacLink mlink: shared.getBridgeMacLinks()) {
            if (mlink.getNode().getId().intValue() == bridgeId.intValue()) {
                mlink.setNode(first.getDesignatedNode());
                mlink.setBridgePort(first.getDesignatedPort());
                mlink.setBridgePortIfIndex(first.getDesignatedPortIfIndex());
                mlink.setBridgePortIfName(first.getDesignatedPortIfName());
                mlink.setVlan(first.getDesignatedVlan());
            }
            m_macsOnSegment.add(mlink);
        }            

        if (shared.getBridgeBridgeLinks().isEmpty())
            return;
        
        BridgeBridgeLink sharedFirst = shared.getBridgeBridgeLinks().iterator().next();
        
        if (sharedFirst.getDesignatedNode().getId().intValue() == bridgeId.intValue()) {
            for (BridgeBridgeLink blink : shared.getBridgeBridgeLinks()) {
                blink.setDesignatedNode(first.getDesignatedNode());
                blink.setDesignatedPort(first.getDesignatedPort());
                blink.setDesignatedPortIfIndex(first.getDesignatedPortIfIndex());
                blink.setDesignatedPortIfName(first.getDesignatedPortIfName());
                blink.setDesignatedVlan(first.getDesignatedVlan());
                m_portsOnSegment.add(blink);
            }
            return;
        } 
        
        BridgeBridgeLink nbblink = new BridgeBridgeLink();
        nbblink.setNode(sharedFirst.getDesignatedNode());
        nbblink.setBridgePort(sharedFirst.getDesignatedPort());
        nbblink.setBridgePortIfIndex(sharedFirst.getDesignatedPortIfIndex());
        nbblink.setBridgePortIfName(sharedFirst.getDesignatedPortIfName());
        nbblink.setVlan(sharedFirst.getDesignatedVlan());
        nbblink.setDesignatedNode(first.getDesignatedNode());
        nbblink.setDesignatedPort(first.getDesignatedPort());
        nbblink.setDesignatedPortIfIndex(first.getDesignatedPortIfIndex());
        nbblink.setDesignatedPortIfName(first.getDesignatedPortIfName());
        nbblink.setDesignatedVlan(first.getDesignatedVlan());
        m_portsOnSegment.add(nbblink);
        
        for (BridgeBridgeLink blink : shared.getBridgeBridgeLinks()) {
            if (blink.getNode().getId().intValue() == bridgeId.intValue())
                continue;
            blink.setDesignatedNode(first.getDesignatedNode());
            blink.setDesignatedPort(first.getDesignatedPort());
            blink.setDesignatedPortIfIndex(first.getDesignatedPortIfIndex());
            blink.setDesignatedPortIfName(first.getDesignatedPortIfName());
            blink.setDesignatedVlan(first.getDesignatedVlan());
            m_portsOnSegment.add(blink);
        }

    }

