    private List<BridgeMacLink> getEffectiveBFT(Bridge bridge) {
        Map<Integer,Set<String>> bft = new HashMap<Integer, Set<String>>();
        Integer bridgeId = bridge.getId();
        LOG.info("getEffectiveBFT: loading BFT for node: {}",bridgeId);
        List<BridgeMacLink> links = new ArrayList<BridgeMacLink>();
        OnmsNode node=new OnmsNode();
        node.setId(bridgeId);
        for (SharedSegment segment: m_topology) {
            if (segment.getMacsOnSegment().isEmpty())
                continue;
            LOG.debug("getEffectiveBFT: parsing segment: designated node {}, designated port {}", segment.getDesignatedBridge(), segment.getDesignatedPort());
            Integer bridgeport = getTopLevelPortUpBridge(segment,bridge);
            LOG.debug("getEffectiveBFT: assigning macs to node {}, port {}", bridgeId, bridgeport);
            if (!bft.containsKey(bridgeport))
                bft.put(bridgeport, new HashSet<String>());
            bft.get(bridgeport).addAll(segment.getMacsOnSegment());
       }
            
        for (Integer bridgePort: bft.keySet()) {
            for (String mac: bft.get(bridgePort)) {
                LOG.debug("getEffectiveBFT: assigning mac {} to node {}, port {}",mac, bridgeId, bridgePort);
                BridgeMacLink link = new BridgeMacLink();
                link.setNode(node);
                link.setBridgePort(bridgePort);
                link.setMacAddress(mac);
                link.setBridgeDot1qTpFdbStatus(BridgeDot1qTpFdbStatus.DOT1D_TP_FDB_STATUS_LEARNED);
                links.add(link);
            }
        }
        LOG.info("getEffectiveBFT: BFT for node: {}, with size: {}",bridgeId, links.size());
        return links;
    }

