    public List<BridgeMacLink> calculateBFT(Bridge bridge) {
        Map<Integer,Set<String>> bft = new HashMap<Integer, Set<String>>();
        Map<Integer,BridgePort> portifindexmap = new HashMap<Integer, BridgePort>();
        Integer bridgeId = bridge.getId();
        List<BridgeMacLink> links = new ArrayList<BridgeMacLink>();
        OnmsNode node=new OnmsNode();
        node.setId(bridgeId);
        for (SharedSegment segment: getSharedSegmentOnTopologyForBridge(bridgeId)) {
            Integer bridgeport =segment.getPortForBridge(bridgeId);
            BridgePort bridgeportifIndex = segment.getBridgePort(bridgeId);
            portifindexmap.put(bridgeport, bridgeportifIndex);

        }
        for (SharedSegment segment: getTopology()) {
            
            Set<String> macs = segment.getMacsOnSegment();
            
            if (macs == null || macs.isEmpty())
                continue;
            Integer bridgeport = goUp(segment,bridge,0);
            if (!bft.containsKey(bridgeport))
                bft.put(bridgeport, new HashSet<String>());
            bft.get(bridgeport).addAll(macs);
       }
            
        for (Integer bridgePort: bft.keySet()) {
            for (String mac: bft.get(bridgePort)) {
                BridgeMacLink link = new BridgeMacLink();
                link.setNode(node);
                link.setBridgePort(bridgePort);
                link.setBridgePortIfIndex(portifindexmap.get(bridgePort).getBridgePortIfIndex());
                link.setBridgePortIfName(portifindexmap.get(bridgePort).getBridgePortIfName());
                link.setVlan(portifindexmap.get(bridgePort).getVlan());
                link.setMacAddress(mac);
                link.setBridgeDot1qTpFdbStatus(BridgeDot1qTpFdbStatus.DOT1D_TP_FDB_STATUS_LEARNED);
                links.add(link);
            }
        }
        if (m_forwarding.containsKey(bridgeId))
            links.addAll(m_forwarding.get(bridgeId));
        return links;
    }

