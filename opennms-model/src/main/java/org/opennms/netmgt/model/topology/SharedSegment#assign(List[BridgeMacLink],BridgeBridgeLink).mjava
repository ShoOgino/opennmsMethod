    public void assign(List<BridgeMacLink> links, BridgeBridgeLink dlink) {
        if (isEmpty()) {
            if (links.isEmpty())
                m_bridgeportsOnLink.add(dlink);
            else
                m_bridgeportsOnSegment = links;
            return;
        }
        // if there are no macs on segment...just add the BridgeBridgeLink
        // only one port and one node for shared is allowed
        // so we should create a segment based on this
        //
        if (noMacsOnSegment() && links.isEmpty()) {
            BridgeBridgeLink first = m_bridgeportsOnLink.iterator().next();
            BridgeBridgeLink x = new BridgeBridgeLink();
            x.setNode(first.getNode());
            x.setBridgePort(first.getBridgePort());
            x.setBridgePortIfIndex(first.getBridgePortIfIndex());
            x.setBridgePortIfName(first.getBridgePortIfName());
            x.setVlan(first.getVlan());
            
            x.setDesignatedNode(dlink.getNode());
            x.setDesignatedPort(dlink.getBridgePort());
            x.setDesignatedPortIfIndex(dlink.getBridgePortIfIndex());
            x.setDesignatedPortIfName(dlink.getBridgePortIfName());
            x.setDesignatedVlan(dlink.getVlan());
            
            BridgeBridgeLink y = new BridgeBridgeLink();
            y.setNode(first.getNode());
            y.setBridgePort(first.getBridgePort());
            y.setBridgePortIfIndex(first.getBridgePortIfIndex());
            y.setBridgePortIfName(first.getBridgePortIfName());
            y.setVlan(first.getVlan());
            
            y.setDesignatedNode(dlink.getDesignatedNode());
            y.setDesignatedPort(dlink.getDesignatedPort());
            y.setDesignatedPortIfIndex(dlink.getDesignatedPortIfIndex());
            y.setDesignatedPortIfName(dlink.getDesignatedPortIfName());
            y.setDesignatedVlan(dlink.getDesignatedVlan());
            m_bridgeportsOnLink.add(x);
            m_bridgeportsOnLink.add(y);
            return;
        }
        
        // we are assigning links to a segment that has mac address
        // the set of link must be ...merged using mac address, 
        // this means that only incoming macs 
        // must be saved to the segment
        // intersection is null
        // we need to convert all the 
        // local links to BridgeBridgeLink
        // and add the BridgeBridgeLink
        if (links.isEmpty()) {
            convertSegmentToLink();
            m_bridgeportsOnLink.add(dlink);
            return;
        }
        
        List<BridgeMacLink> sharedsegmentmaclinks = new ArrayList<BridgeMacLink>();
        Set<Integer> nodeidadding = new HashSet<Integer>();
        for (BridgeMacLink link: links) {
            if (containsMac(link.getMacAddress()))
                sharedsegmentmaclinks.add(link);
            nodeidadding.add(link.getNode().getId());
        }

        //intersection is not null, then we have to add all the BridgeMacLink
        // for each mac address
        for (BridgeMacLink link: m_bridgeportsOnSegment) {
            if (nodeidadding.contains(link.getNode().getId()))
                    continue;
                sharedsegmentmaclinks.add(link);
        }

        m_bridgeportsOnSegment = sharedsegmentmaclinks;
        m_bridgeportsOnLink.clear();
    }

