    public void assign(List<BridgeMacLink> links, BridgeBridgeLink dlink) {
        // if there is not yet links on segment add it
       if (isEmpty() && !links.isEmpty()) {
            m_bridgeportsOnSegment = links;
            return;
        }
        // if there are no macs on segment...just add the BridgeBridgeLink
        if (noMacsOnSegment() && links.isEmpty()) {
            m_bridgeportsOnLink.add(dlink);
            return;
        }
        
        // we are assigning links to a segment that has mac address
        // the set of link must be ...merged using mac address, 
        // this means that only incoming macs 
        // must be saved to the segment
        // intersection is null
        // we need to convert all the 
        // local links to BridgeBridgeLink
        // and add the BridgeBridgeLink
        if (links.isEmpty()) {
            convertSegmentToLink();
            m_bridgeportsOnLink.add(dlink);
            m_bridgeportsOnSegment.clear();
            return;
        }
        
        Set<String> macsonLinks=new HashSet<String>();
        List<BridgeMacLink> sharedsegmentmaclinks = new ArrayList<BridgeMacLink>();
        Set<Integer> nodeidadding = new HashSet<Integer>();
        for (BridgeMacLink link: links) {
            sharedsegmentmaclinks.add(link);
            nodeidadding.add(link.getNode().getId());
            macsonLinks.add(link.getMacAddress());
        }

        //intersection is not null, then we have to add all the BridgeMacLink
        // for each mac address
        for (BridgeMacLink link: m_bridgeportsOnSegment) {
            if (nodeidadding.contains(link.getNode().getId()))
                    continue;
                sharedsegmentmaclinks.add(link);
        }

        m_bridgeportsOnSegment = sharedsegmentmaclinks;
        m_bridgeportsOnLink.clear();
    }

