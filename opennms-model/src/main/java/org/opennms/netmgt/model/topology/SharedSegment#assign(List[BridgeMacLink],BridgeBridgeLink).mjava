    public void assign(List<BridgeMacLink> links, BridgeBridgeLink dlink) {
        // if there is not yet links on segment add it
        if (isEmpty() && !links.isEmpty()) {
            m_bridgeportsOnSegment = links;
            return;
        }
        // if there are no macs on segment...just add the BridgeBridgeLink
        if (noMacsOnSegment() && dlink != null) {
            m_bridgeportsOnLink.add(dlink);
            return;
        }
        
        // we are assigning links to a segment that has mac address
        // the set of link must be ...merged using mac address, 
        // this means that
        // only intersection of common macs is
        // must be saved to segment
        
        Set<String> macsonLinks=new HashSet<String>();
        for (BridgeMacLink link: links)
            macsonLinks.add(link.getMacAddress());
        
        Set<String> retained = new HashSet<String>();
        retained.addAll(getMacsOnSegment());
        retained.retainAll(macsonLinks);
        // intersection is null
        // we need to convert all the 
        // local links to BridgeBridgeLink
        // and add the BridgeBridgeLink
        if (retained.isEmpty()) {
            convertSegmentToLink();
            m_bridgeportsOnLink.add(dlink);
            m_bridgeportsOnSegment.clear();
            return;
        }
        
        //intersection is not null, then we have to add all the BridgeMacLink
        // for each mac address
        List<BridgeMacLink> linksonsegment = new ArrayList<BridgeMacLink>();
        for (String mac: retained) {
            for (BridgeMacLink link: m_bridgeportsOnSegment) {
                if (mac.equals(link.getMacAddress())) 
                    linksonsegment.add(link);
            }
            for (BridgeMacLink link: links) {
                if (mac.equals(link.getMacAddress())) 
                    linksonsegment.add(link);
            }
        }
        m_bridgeportsOnSegment = linksonsegment;
        m_bridgeportsOnLink.clear();
    }

