    // what does this means?
    // we are assigning links to a segment
    // if no macs on segment: add if not null
    // if macs on segment: 
    // the set of link must be ...merged, this means that
    // only intersection is saved to segment
    // this means removing other mac referentiated
    // if intersection is null then move to BridgeBridgeLink    
    public void assign(List<BridgeMacLink> links, BridgeBridgeLink dlink) {
        if (isEmpty() && !links.isEmpty()) {
            m_bridgeportsOnSegment = links;
            return;
        }
        if (noMacsOnSegment() && dlink != null) {
            m_bridgeportsOnLink.add(dlink);
            return;
        }
        
        Set<String> macsonLinks=new HashSet<String>();
        for (BridgeMacLink link: links)
            macsonLinks.add(link.getMacAddress());
        Set<String> retained = new HashSet<String>();
        retained.addAll(getMacsOnSegment());
        retained.retainAll(macsonLinks);
        if (retained.isEmpty()) {
            convertSegmentToLink();
            m_bridgeportsOnLink.add(dlink);
            return;
        }
        
        List<BridgeMacLink> linksonsegment = new ArrayList<BridgeMacLink>();
        for (String mac: retained) {
            for (BridgeMacLink link: m_bridgeportsOnSegment) {
                if (mac.equals(link.getMacAddress())) 
                    linksonsegment.add(link);
            }
            for (BridgeMacLink link: links) {
                if (mac.equals(link.getMacAddress())) 
                    linksonsegment.add(link);
            }
        }
        m_bridgeportsOnSegment = linksonsegment;
    }

