    public void mergeTopology() {
    	Set<BridgeTopologyPort> parsedNode = new HashSet<BridgeTopologyPort>(); 
    	for (BridgeTopologyLinkCandidate candidateA: bridgeTopologyPortCandidates) {
    		if (parsedNode.contains(candidateA.getBridgeTopologyPort()))
    				continue;
    	    parsedNode.add(candidateA.getBridgeTopologyPort());
    		if (candidateA.getTargets().isEmpty()) 
    			continue;
			for (BridgeTopologyLinkCandidate candidateB: bridgeTopologyPortCandidates) {
				if (parsedNode.contains(candidateB.getBridgeTopologyPort()))
					continue;
				if (candidateB.getTargets().isEmpty())
					continue;
				if (candidateA.getBridgeTopologyPort().getNodeid().intValue() == candidateB.getBridgeTopologyPort().getNodeid().intValue())
					continue;
				if (candidateA.getTargets().contains(candidateB.getBridgeTopologyPort().getNodeid()) 
						&& candidateB.getTargets().contains(candidateA.getBridgeTopologyPort().getNodeid())) {
					candidateA.getTargets().clear();
					candidateB.getTargets().clear();
					candidateA.getTargets().add(candidateB.getBridgeTopologyPort().getNodeid());
					candidateB.getTargets().add(candidateA.getBridgeTopologyPort().getNodeid());
					candidateA.merge(candidateB);
					candidateB.merge(candidateA);
					parsedNode.add(candidateB.getBridgeTopologyPort());
				}
			}
    	}
    }

