    public void removeBridge(int bridgeId) {
        List<BridgeMacLink> updatemacsonsegment = new ArrayList<BridgeMacLink>();
        List<BridgeBridgeLink> updateportonsegment = new ArrayList<BridgeBridgeLink>();
        List<BridgeBridgeLink> deleteportonsegment = new ArrayList<BridgeBridgeLink>();
        BridgeBridgeLink first = m_portsOnSegment.iterator().next();
        if (!m_portsOnSegment.isEmpty()) {
            if (first.getDesignatedNode().getId().intValue() == bridgeId) {
                for (BridgeBridgeLink link: m_portsOnSegment) {
                    link.setDesignatedNode(first.getNode());
                    link.setDesignatedPort(first.getBridgePort());
                    link.setDesignatedPortIfIndex(first.getBridgePortIfIndex());
                    link.setDesignatedPortIfName(first.getBridgePortIfName());
                    link.setDesignatedVlan(first.getVlan());
                    if (link.getNode().getId() == first.getNode().getId()) {
                        deleteportonsegment.add(link);
                        continue;
                    }
                    updateportonsegment.add(link);
                }
            } else {
                for (BridgeBridgeLink link: m_portsOnSegment) {
                    if (link.getNode().getId().intValue() == bridgeId ) {
                        deleteportonsegment.add(link);
                        continue;
                    }
                    updateportonsegment.add(link);
                }
            }
        }

        if (updateportonsegment.isEmpty() && m_macsOnSegment.isEmpty()) {
            m_portsOnSegment=deleteportonsegment;
            return;
        }
        m_portsOnSegment = updateportonsegment;

        for (BridgeMacLink link: m_macsOnSegment) {
            if (link.getNode().getId().intValue() == bridgeId ) {
               continue;
            }
            updatemacsonsegment.add(link);
        }
        m_macsOnSegment = updatemacsonsegment;
        
    }

