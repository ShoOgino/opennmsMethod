    public List<BridgeTopologyLink> getTopology() {
    	Set<BridgeTopologyPort> parsedNode = new HashSet<BridgeTopologyPort>(); 
    	for (BridgeTopologyLinkCandidate candidateA: bridgeTopologyPortCandidates) {
    		if (parsedNode.contains(candidateA.getBridgeTopologyPort()))
				continue;
    		if (candidateA.getTargets().isEmpty()) {
    			continue;
    		}
            LOG.info("getTopology: bridgetobridge discovery: parsing nodeidA {}, portA {}, macsA {}, targetsA {}.",
                    candidateA.getBridgeTopologyPort().getNodeid(), candidateA.getBridgeTopologyPort().getBridgePort(), 
                    candidateA.getMacs(), candidateA.getTargets());
			for (BridgeTopologyLinkCandidate candidateB: bridgeTopologyPortCandidates) {
				if (parsedNode.contains(candidateB.getBridgeTopologyPort()))
					continue;
				if (candidateB.getTargets().isEmpty()) {
					continue;
				}
                LOG.info("getTopology: bridgetobridge discovery: parsing nodeidB {}, portB {}, macsB {}, targetsB {}.",
                        candidateB.getBridgeTopologyPort().getNodeid(), candidateB.getBridgeTopologyPort().getBridgePort(), 
                        candidateB.getMacs(), candidateB.getTargets());
				if (candidateA.getBridgeTopologyPort().getNodeid().intValue() == candidateB.getBridgeTopologyPort().getNodeid().intValue())
					continue;
				if (candidateA.getTargets().contains(candidateB.getBridgeTopologyPort().getNodeid()) 
						&& candidateB.getTargets().contains(candidateA.getBridgeTopologyPort().getNodeid())) {
	        		parsedNode.add(candidateA.getBridgeTopologyPort());
					parsedNode.add(candidateB.getBridgeTopologyPort());
					BridgeTopologyLink link = new BridgeTopologyLink(candidateA.getBridgeTopologyPort(), candidateB.getBridgeTopologyPort());
					LOG.info("getTopology: link found {}", link);
					bridgelinks.add(link);
				}
			}
    	}
    	for (BridgeTopologyLinkCandidate candidate: bridgeTopologyPortCandidates) {
    		if (parsedNode.contains(candidate.getBridgeTopologyPort()))
				continue;
            LOG.info("getTopology: mac discovery: parsing nodeid {}, port {}, macs {}, targets {}.",
                    candidate.getBridgeTopologyPort().getNodeid(), candidate.getBridgeTopologyPort().getBridgePort(), 
                    candidate.getMacs(), candidate.getTargets());
    		BridgeTopologyLink link = new BridgeTopologyLink(new BridgeTopologyPort(candidate.getBridgeTopologyPort().getNodeid(), candidate.getBridgeTopologyPort().getBridgePort(), candidate.getMacs()));
			SwitchPort swPort = null;
    		for (String mac: candidate.getMacs()) {
    			if (!bridgeAssociatedMacAddressMap.containsKey(mac)) {
    				swPort = null;
    				break;
    			}
    			if (swPort != null && !swPort.equals(bridgeAssociatedMacAddressMap.get(mac))) {
    				swPort = null;
    				break;
    			} else {
                    swPort = bridgeAssociatedMacAddressMap.get(mac);
                    LOG.info("getTopology: parsing nodeid {}, port {}: mac {} is associated to switch Node {}, Port {}",
                            candidate.getBridgeTopologyPort().getNodeid(), candidate.getBridgeTopologyPort().getBridgePort(), 
                            mac, swPort.getNodeid(),swPort.getIfindex());        				
    			}
    		}
    		if (swPort != null)
    			link.setLinkedSwitchPort(swPort);
			LOG.info("getTopology: link found {}", link);
    		bridgelinks.add(link);
    	}
        return bridgelinks;
    }

