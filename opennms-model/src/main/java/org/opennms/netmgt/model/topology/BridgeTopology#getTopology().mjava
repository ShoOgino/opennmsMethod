    public List<BridgeTopologyLink> getTopology() {
    	Set<BridgeTopologyPort> foundedOnBridgeLink = new HashSet<BridgeTopologyPort>(); 
    	
    	for (BridgeTopologyLinkCandidate candidateA: bridgeTopologyPortCandidates) {
    		if (foundedOnBridgeLink.contains(candidateA.getBridgeTopologyPort()))
				continue;
    		if (candidateA.getTargets().isEmpty()) {
    			continue;
    		}
            LOG.info("getTopology: bridgetobridge discovery: parsing nodeidA {}, portA {}, targetsA {}.",
                    candidateA.getBridgeTopologyPort().getNodeid(), candidateA.getBridgeTopologyPort().getBridgePort(), 
                    candidateA.getTargets());
			for (BridgeTopologyLinkCandidate candidateB: bridgeTopologyPortCandidates) {
				if (foundedOnBridgeLink.contains(candidateB.getBridgeTopologyPort()))
					continue;
				if (candidateB.getTargets().isEmpty())
					continue;
				if (candidateA.getBridgeTopologyPort().getNodeid().intValue() == candidateB.getBridgeTopologyPort().getNodeid().intValue())
					continue;
                LOG.info("getTopology: bridgetobridge discovery: parsing nodeidB {}, portB {}, targetsB {}.",
                        candidateB.getBridgeTopologyPort().getNodeid(), candidateB.getBridgeTopologyPort().getBridgePort(), 
                        candidateB.getTargets());
				if (candidateA.getTargets().contains(candidateB.getBridgeTopologyPort().getNodeid()) 
						&& candidateB.getTargets().contains(candidateA.getBridgeTopologyPort().getNodeid())) {
					foundedOnBridgeLink.add(candidateB.getBridgeTopologyPort());
		    		foundedOnBridgeLink.add(candidateA.getBridgeTopologyPort());
					BridgeTopologyLink link = new BridgeTopologyLink(candidateA.getBridgeTopologyPort(), candidateB.getBridgeTopologyPort());
					LOG.info("getTopology: bridgetobridge discovery: link found {}", link);
					bridgelinks.add(link);
				}
			}
    	}
    	for (BridgeTopologyLinkCandidate candidate: bridgeTopologyPortCandidates) {
    		if (foundedOnBridgeLink.contains(candidate.getBridgeTopologyPort()))
				continue;
            LOG.info("getTopology: mac discovery: parsing nodeid {}, port {}, macs {}, targets {}.",
                    candidate.getBridgeTopologyPort().getNodeid(), candidate.getBridgeTopologyPort().getBridgePort(), 
                    candidate.getMacs(), candidate.getTargets());
    		if (candidate.getLinkPortCandidate() == null ) {
        		BridgeTopologyLink link = new BridgeTopologyLink(new BridgeTopologyPort(candidate.getBridgeTopologyPort().getNodeid(), candidate.getBridgeTopologyPort().getBridgePort(), candidate.getMacs()));
    			LOG.info("getTopology: bridgetomac link found {}", link);
        		bridgelinks.add(link);
        		continue;
    		} 
    		if (foundedOnBridgeLink.contains(candidate.getLinkPortCandidate())) {
    			continue;
    		}
    		BridgeTopologyLink link = new BridgeTopologyLink(new BridgeTopologyPort(candidate.getBridgeTopologyPort().getNodeid(), candidate.getBridgeTopologyPort().getBridgePort(), candidate.getMacs()),candidate.getLinkPortCandidate());
			LOG.info("getTopology: bridgebridge link found using port associated mac {}", link);
    		bridgelinks.add(link);
    	}
        return bridgelinks;
    }

