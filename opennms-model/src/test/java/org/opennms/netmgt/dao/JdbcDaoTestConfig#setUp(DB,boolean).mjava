    protected PlatformTransactionManager setUp(DB db, boolean createDb) throws Exception {
        m_createDb = createDb;
        
        if (createDb) {
        	System.err.println("user.dir = "+System.getProperty("user.dir"));
            String cmd = System.getProperty("psql.command", "psql") ;
            System.err.println("psql.command = "+cmd);
            String basedir = System.getProperty("basedir");
            System.err.println("basedir = "+ basedir);
            String createSqlDir = System.getProperty("create.sql.dir", basedir+"/src/test/resources");
            System.err.println("create.sql.dir = "+createSqlDir);
            File createSql = new File(createSqlDir, "create.sql");
            cmd = cmd+" test -U opennms -f "+createSql.getAbsolutePath();
            System.err.println("Executing: "+cmd);
            Process p = Runtime.getRuntime().exec(cmd);
            p.waitFor();
            System.err.println("Got an exitValue of "+p.exitValue());
        }
                
        //m_dataSource = db.getDataSource();
        m_dataSource = db.getPoolingDataSource();
        
        // initialize the factory classs and register them with the Cache
        AssetRecordFactory.register(m_dataSource);
        DistPollerFactory.register(m_dataSource);
        IpInterfaceFactory.register(m_dataSource);
        MonitoredServiceFactory.register(m_dataSource);
        NodeFactory.register(m_dataSource);
        CategoryFactory.register(m_dataSource);
        ServiceTypeFactory.register(m_dataSource);
        SnmpInterfaceFactory.register(m_dataSource);
        OutageFactory.register(m_dataSource);
        EventFactory.register(m_dataSource);
        AgentFactory.register(m_dataSource);
        AlarmFactory.register(m_dataSource);
        
        return new DataSourceTransactionManager(m_dataSource);
    }

