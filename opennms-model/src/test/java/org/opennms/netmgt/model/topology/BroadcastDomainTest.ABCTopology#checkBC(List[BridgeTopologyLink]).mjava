        public void checkBC(List<BridgeTopologyLink> links) {
            printBridgeTopologyLinks(links);
            assertEquals(4, links.size());
            for (BridgeTopologyLink link: links) {
                if (link.getMacs().isEmpty()) {
                    assertEquals(nodeB, link.getBridgeTopologyPort().getNodeid());
                    assertEquals(portBC,link.getBridgeTopologyPort().getBridgePort());
                    assertEquals(nodeC, link.getDesignateBridgePort().getNodeid());
                    assertEquals(portCB,link.getDesignateBridgePort().getBridgePort());
                } else if (link.getMacs().contains(mac1)) {
                    assertEquals(1, link.getMacs().size());
                    assertEquals(nodeB, link.getBridgeTopologyPort().getNodeid());
                    assertEquals(portBA,link.getBridgeTopologyPort().getBridgePort());
                    assertEquals(null, link.getDesignateBridgePort());
                } else if (link.getMacs().contains(mac2)) {
                    assertEquals(1, link.getMacs().size());
                    assertEquals(nodeB, link.getBridgeTopologyPort().getNodeid());
                    assertEquals(portB,link.getBridgeTopologyPort().getBridgePort());
                    assertEquals(null, link.getDesignateBridgePort());
                } else if (link.getMacs().contains(mac3)) {
                    assertEquals(1, link.getMacs().size());
                    assertEquals(nodeC, link.getBridgeTopologyPort().getNodeid());
                    assertEquals(portC,link.getBridgeTopologyPort().getBridgePort());
                    assertEquals(null, link.getDesignateBridgePort());
                } else {
                    assertEquals(false, true);
                }
            }

        }

