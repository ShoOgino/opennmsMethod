        public void checkEF(List<BridgeTopologyLink> links) {
            printBridgeTopologyLinks(links);
            assertEquals(3, links.size());
            for (BridgeTopologyLink link: links) {
                if (link.getMacs().contains(mac3)) {
                    assertEquals(2, link.getMacs().size());
                    assertEquals(true,link.getMacs().contains(mac4));
                    assertEquals(nodeF, link.getBridgeTopologyPort().getNodeid());
                    assertEquals(portF,link.getBridgeTopologyPort().getBridgePort());
                    assertEquals(null, link.getDesignateBridgePort());
                } else if (link.getMacs().contains(mac5)) {
                    assertEquals(2, link.getMacs().size());
                    assertEquals(true,link.getMacs().contains(mac6));
                    assertEquals(nodeE, link.getBridgeTopologyPort().getNodeid());
                    assertEquals(portE,link.getBridgeTopologyPort().getBridgePort());
                    assertEquals(null, link.getDesignateBridgePort());
                }  else if (link.getMacs().contains(mac7)) {
                    assertEquals(4, link.getMacs().size());
                    assertEquals(true,link.getMacs().contains(mac1));
                    assertEquals(true,link.getMacs().contains(mac2));
                    assertEquals(true,link.getMacs().contains(mac8));
                    assertEquals(nodeE, link.getBridgeTopologyPort().getNodeid());
                    assertEquals(portEE,link.getBridgeTopologyPort().getBridgePort());
                    assertEquals(nodeF, link.getDesignateBridgePort().getNodeid());
                    assertEquals(portFF,link.getDesignateBridgePort().getBridgePort());
                } else {
                    assertEquals(false, true);
                }
            }
        }

