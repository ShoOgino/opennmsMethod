    @Test 
    public void testTwoBridgeTwoCalculation() {
        Integer nodeAId = 22101;
        Integer nodeBId = 22102;

        OnmsNode nodeA= new OnmsNode();
        nodeA.setId(nodeAId);
        BridgeElement elementA = new BridgeElement();
        elementA.setNode(nodeA);
        elementA.setBaseBridgeAddress("aaaaaaaaaaaa");
        List<BridgeElement> elemAlist = new ArrayList<BridgeElement>();
        elemAlist.add(elementA);
        List<BridgeMacLink> bftA = new ArrayList<BridgeMacLink>();

        OnmsNode nodeB= new OnmsNode();
        nodeB.setId(nodeBId);
        BridgeElement elementB = new BridgeElement();
        elementB.setNode(nodeB);
        elementB.setBaseBridgeAddress("bbbbbbbbbbbb");
        List<BridgeElement> elemBlist = new ArrayList<BridgeElement>();
        elemBlist.add(elementB);
        List<BridgeMacLink> bftB = new ArrayList<BridgeMacLink>();

        Integer portA1 = 1;
        Integer portA6 = 6;
        Integer portAB = 12;
        Integer portBA = 21;
        Integer portB2 = 2 ;
        Integer portB7 = 7 ;

        
        String macA11 = "000daa000a11"; // port A1 ---port BA 
        String macA12 = "000daa000a12"; // port A1 ---port BA 
        String macA13 = "000daa000a13"; // port A1  
        String macA14 = "000daa000a14"; // port A1          

        String macA61 = "000daa000a61"; // port A6 ---port BA 
        String macA62 = "000daa000a62"; // port A6 ---port BA 
        String macA63 = "000daa000a63"; // port A6 ---port BA  
        String macA64 = "000daa000a64"; // port A6          

        String macAB1  = "000daa000ab1"; // port AB ---port BA 
        String macAB2  = "000daa000ab2"; // port AB ---port BA 
        String macAB3  = "000daa000ab3"; // port AB ---port BA 
        String macAB4  = "000daa000ab4"; // port AB 
        String macAB5  = "000daa000ab5"; // port AB 
        String macAB6  = "000daa000ab6"; // port AB 

        String macBA1  = "000daa000ba1"; //          ---port BA 
        String macBA2  = "000daa000ba2"; //          ---port BA 
        String macBA3  = "000daa000ba3"; //          ---port BA 

        String macB21 = "000daa000b21"; // port AB ---port B2 
        String macB22 = "000daa000b22"; // port AB ---port B2
        String macB23 = "000daa000b23"; //         ---port B2

        String macB71 = "000daa000b71"; //         ---port B7 
        String macB72 = "000daa000b72"; //         ---port B7
        String macB73 = "000daa000b73"; //         ---port B7

        bftA =addBridgeForwardingTableEntry(nodeA,portA1, macA11,bftA);
        bftA =addBridgeForwardingTableEntry(nodeA,portA1, macA12,bftA);
        bftA =addBridgeForwardingTableEntry(nodeA,portA1, macA13,bftA);
        bftA =addBridgeForwardingTableEntry(nodeA,portA1, macA14,bftA);
        
        bftA =addBridgeForwardingTableEntry(nodeA,portA6, macA61,bftA);
        bftA =addBridgeForwardingTableEntry(nodeA,portA6, macA62,bftA);
        bftA =addBridgeForwardingTableEntry(nodeA,portA6, macA63,bftA);
        bftA =addBridgeForwardingTableEntry(nodeA,portA6, macA64,bftA);

        bftA =addBridgeForwardingTableEntry(nodeA,portAB, macAB1,bftA);
        bftA =addBridgeForwardingTableEntry(nodeA,portAB, macAB2,bftA);
        bftA =addBridgeForwardingTableEntry(nodeA,portAB, macAB3,bftA);
        bftA =addBridgeForwardingTableEntry(nodeA,portAB, macAB4,bftA);
        bftA =addBridgeForwardingTableEntry(nodeA,portAB, macAB5,bftA);
        bftA =addBridgeForwardingTableEntry(nodeA,portAB, macAB6,bftA);
        bftA =addBridgeForwardingTableEntry(nodeA,portAB, macB21,bftA);
        bftA =addBridgeForwardingTableEntry(nodeA,portAB, macB22,bftA);


        bftB =addBridgeForwardingTableEntry(nodeB,portBA, macA11,bftB);
        bftB =addBridgeForwardingTableEntry(nodeB,portBA, macA12,bftB);
        bftB =addBridgeForwardingTableEntry(nodeB,portBA, macA61,bftB);
        bftB =addBridgeForwardingTableEntry(nodeB,portBA, macA62,bftB);
        bftB =addBridgeForwardingTableEntry(nodeB,portBA, macA63,bftB);
        bftB =addBridgeForwardingTableEntry(nodeB,portBA, macAB1,bftB);
        bftB =addBridgeForwardingTableEntry(nodeB,portBA, macAB2,bftB);
        bftB =addBridgeForwardingTableEntry(nodeB,portBA, macAB3,bftB);
        bftB =addBridgeForwardingTableEntry(nodeB,portBA, macBA1,bftB);
        bftB =addBridgeForwardingTableEntry(nodeB,portBA, macBA2,bftB);
        bftB =addBridgeForwardingTableEntry(nodeB,portBA, macBA3,bftB);

        bftB =addBridgeForwardingTableEntry(nodeB,portB2, macB21,bftB);
        bftB =addBridgeForwardingTableEntry(nodeB,portB2, macB22,bftB);
        bftB =addBridgeForwardingTableEntry(nodeB,portB2, macB23,bftB);

        bftB =addBridgeForwardingTableEntry(nodeB,portB7, macB71,bftB);
        bftB =addBridgeForwardingTableEntry(nodeB,portB7, macB72,bftB);
        bftB =addBridgeForwardingTableEntry(nodeB,portB7, macB73,bftB);

        BroadcastDomain bridgeTopology = new BroadcastDomain();

        bridgeTopology.loadBFT(nodeAId,bftA,null,elemAlist);
        bridgeTopology.calculate();
        List<SharedSegment> shsegsA = bridgeTopology.getTopology();
        printBridgeTopology(shsegsA);
        assertEquals(3, shsegsA.size());
        
        bridgeTopology.loadBFT(nodeBId,bftB,null,elemBlist);
        bridgeTopology.calculate();

        List<SharedSegment> shsegs = bridgeTopology.getTopology();
        printBridgeTopology(shsegs);
        assertEquals(5, shsegs.size());
    }

