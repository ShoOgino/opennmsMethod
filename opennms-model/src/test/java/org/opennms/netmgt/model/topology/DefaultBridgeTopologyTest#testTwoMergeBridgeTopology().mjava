    @Test
    public void testTwoMergeBridgeTopology() throws Exception {

        Integer nodeAId  = 1111;
        Integer nodeBId  = 2222;

        OnmsNode nodeA= new OnmsNode();
        nodeA.setId(nodeAId);
        BridgeElement elementA = new BridgeElement();
        elementA.setNode(nodeA);
        elementA.setBaseBridgeAddress("aaaaaaaaaaaa");
        List<BridgeElement> elemAlist = new ArrayList<BridgeElement>();
        elemAlist.add(elementA);
        List<BridgeMacLink> bftA = new ArrayList<BridgeMacLink>();

        OnmsNode nodeB= new OnmsNode();
        nodeB.setId(nodeBId);
        BridgeElement elementB = new BridgeElement();
        elementB.setNode(nodeB);
        elementB.setBaseBridgeAddress("bbbbbbbbbbbb");
        List<BridgeElement> elemBlist = new ArrayList<BridgeElement>();
        elemBlist.add(elementB);
        List<BridgeMacLink> bftB = new ArrayList<BridgeMacLink>();

        Integer portA8 = 8;
        Integer portAB = 16;
        Integer portBA = 24;
        Integer portB6 = 6;

        String mac1 = "000daaaa0001"; // port AB ---port BA
        String mac2 = "000daaaa0002"; // port AB ---port BA
        String mac3 = "000daaaa0003"; // port AB ---port BA
        String mac4 = "000daaaa0004"; // port AB ---port BA
        String mac5 = "000daaaa0005"; // port AB ---port BA
        String mac6 = "000daaaa0006"; // port AB ---port B6
        String mac7 = "000daaaa0007"; // port AB ---port BA
        String mac8 = "000daaaa0008"; // port A8 ---port BA
        String mac9 = "000daaaa0009"; // port AB ---port BA


        bftA =addBridgeForwardingTableEntry(nodeA,portAB, mac1,bftA);
        bftA =addBridgeForwardingTableEntry(nodeA,portAB, mac2,bftA);
        bftA =addBridgeForwardingTableEntry(nodeA,portAB, mac3,bftA);
        bftA =addBridgeForwardingTableEntry(nodeA,portAB, mac4,bftA);
        bftA =addBridgeForwardingTableEntry(nodeA,portAB, mac5,bftA);

        bftA =addBridgeForwardingTableEntry(nodeA,portAB, mac6,bftA);
        bftA =addBridgeForwardingTableEntry(nodeA,portAB, mac7,bftA);
        bftA =addBridgeForwardingTableEntry(nodeA,portA8, mac8,bftA);
        bftA =addBridgeForwardingTableEntry(nodeA,portAB, mac9,bftA);


        bftB =addBridgeForwardingTableEntry(nodeB,portBA, mac1,bftB);
        bftB =addBridgeForwardingTableEntry(nodeB,portBA, mac2,bftB);
        bftB =addBridgeForwardingTableEntry(nodeB,portBA, mac3,bftB);
        bftB =addBridgeForwardingTableEntry(nodeB,portBA, mac4,bftB);
        bftB =addBridgeForwardingTableEntry(nodeB,portBA, mac5,bftB);

        bftB =addBridgeForwardingTableEntry(nodeB,portB6, mac6,bftB);
        bftB =addBridgeForwardingTableEntry(nodeB,portBA, mac7,bftB);
        bftB =addBridgeForwardingTableEntry(nodeB,portBA, mac8,bftB);
        bftB =addBridgeForwardingTableEntry(nodeB,portBA, mac9,bftB);

        BroadcastDomain bridgeTopology = new BroadcastDomain();

        bridgeTopology.loadBFT(nodeAId,bftA,null,elemAlist);
        bridgeTopology.loadBFT(nodeBId,bftB,null,elemBlist);
        assertTrue(bridgeTopology.isTopologyChanged());
        assertTrue(!bridgeTopology.isCalculating());

        bridgeTopology.calculate();
        List<SharedSegment> shsegs = bridgeTopology.getTopology();
        printBridgeTopology(shsegs);
        assertEquals(3, shsegs.size());

        for (SharedSegment shared: shsegs) {
            assertEquals(false, shared.noMacsOnSegment());
            if (shared.getMacsOnSegment().contains(mac1)) {
                assertEquals(7, shared.getMacsOnSegment().size());
                assertEquals(true,  shared.getMacsOnSegment().contains(mac2));
                assertEquals(true,  shared.getMacsOnSegment().contains(mac3));
                assertEquals(true,  shared.getMacsOnSegment().contains(mac4));
                assertEquals(true,  shared.getMacsOnSegment().contains(mac5));
                assertEquals(false, shared.getMacsOnSegment().contains(mac6));
                assertEquals(true,  shared.getMacsOnSegment().contains(mac7));
                assertEquals(false, shared.getMacsOnSegment().contains(mac8));
                assertEquals(true,  shared.getMacsOnSegment().contains(mac9));
                for (BridgeMacLink link: shared.getBridgeMacLinks()) {
                    if (link.getNode().getId() == nodeAId) {
                        assertEquals(portAB,link.getBridgePort());
                    } else if (link.getNode().getId() == nodeBId) {
                        assertEquals(portBA,link.getBridgePort());
                    } else {
                        assertTrue(false);
                    }
                }
            } else if (shared.getMacsOnSegment().contains(mac6)) {
                assertEquals(1, shared.getMacsOnSegment().size());
                assertEquals(nodeBId, shared.getDesignatedBridge());
                assertEquals(portB6,shared.getDesignatedPort());
                BridgeMacLink link = shared.getBridgeMacLinks().iterator().next();
                assertEquals(mac6, link.getMacAddress());
                assertEquals(nodeBId,link.getNode().getId());
                assertEquals(portB6,link.getBridgePort());
            } else if (shared.getMacsOnSegment().contains(mac8)) {
                assertEquals(1, shared.getMacsOnSegment().size());
                assertEquals(nodeAId, shared.getDesignatedBridge());
                assertEquals(portA8,shared.getDesignatedPort());
                BridgeMacLink link = shared.getBridgeMacLinks().iterator().next();
                assertEquals(mac8, link.getMacAddress());
                assertEquals(nodeAId,link.getNode().getId());
                assertEquals(portA8,link.getBridgePort());
            } else {
                assertEquals(false, true);
            }
        }


    }

