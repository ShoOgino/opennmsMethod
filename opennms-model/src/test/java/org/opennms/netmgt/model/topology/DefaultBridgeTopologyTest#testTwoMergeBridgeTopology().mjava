    @Test
    public void testTwoMergeBridgeTopology() throws Exception {

        Integer nodeA  = 1111;
        Integer nodeB  = 2222;

        Integer portA8 = 8;
        Integer portAB = 16;
        Integer portBA = 24;
        Integer portB6 = 6;

        String mac1 = "000daaaa0001"; // port AB ---port BA
        String mac2 = "000daaaa0002"; // port AB ---port BA
        String mac3 = "000daaaa0003"; // port AB ---port BA
        String mac4 = "000daaaa0004"; // port AB ---port BA
        String mac5 = "000daaaa0005"; // port AB ---port BA
        String mac6 = "000daaaa0006"; // port AB ---port B6
        String mac7 = "000daaaa0007"; // port AB ---port BA
        String mac8 = "000daaaa0008"; // port A8 ---port BA
        String mac9 = "000daaaa0009"; // port AB ---port BA

        Map<Integer,Set<String>> bftA = new HashMap<Integer, Set<String>>();

        bftA =addBridgeForwardingTableEntry(portAB, mac1,bftA);
        bftA =addBridgeForwardingTableEntry(portAB, mac2,bftA);
        bftA =addBridgeForwardingTableEntry(portAB, mac3,bftA);
        bftA =addBridgeForwardingTableEntry(portAB, mac4,bftA);
        bftA =addBridgeForwardingTableEntry(portAB, mac5,bftA);

        bftA =addBridgeForwardingTableEntry(portAB, mac6,bftA);
        bftA =addBridgeForwardingTableEntry(portAB, mac7,bftA);
        bftA =addBridgeForwardingTableEntry(portA8, mac8,bftA);
        bftA =addBridgeForwardingTableEntry(portAB, mac9,bftA);

        Map<Integer,Set<String>> bftB = new HashMap<Integer, Set<String>>();

        bftB =addBridgeForwardingTableEntry(portBA, mac1,bftB);
        bftB =addBridgeForwardingTableEntry(portBA, mac2,bftB);
        bftB =addBridgeForwardingTableEntry(portBA, mac3,bftB);
        bftB =addBridgeForwardingTableEntry(portBA, mac4,bftB);
        bftB =addBridgeForwardingTableEntry(portBA, mac5,bftB);

        bftB =addBridgeForwardingTableEntry(portB6, mac6,bftB);
        bftB =addBridgeForwardingTableEntry(portBA, mac7,bftB);
        bftB =addBridgeForwardingTableEntry(portBA, mac8,bftB);
        bftB =addBridgeForwardingTableEntry(portBA, mac9,bftB);

        BridgeTopologyOld bridgeTopology = new BridgeTopologyOld();

        bridgeTopology.parseBFT(nodeA,bftA);
        bridgeTopology.parseBFT(nodeB,bftB);

        List<BridgeTopologyLink> links = bridgeTopology.getTopology();
        printBridgeTopologyLinks(links);
        assertEquals(3, links.size());

        for (BridgeTopologyLink link: links) {
            assertEquals(false, link.getMacs().isEmpty());
            if (link.getMacs().contains(mac1)) {
                assertEquals(7, link.getMacs().size());
                assertEquals(true, link.getMacs().contains(mac2));
                assertEquals(true, link.getMacs().contains(mac3));
                assertEquals(true, link.getMacs().contains(mac4));
                assertEquals(true, link.getMacs().contains(mac5));
                assertEquals(false, link.getMacs().contains(mac6));
                assertEquals(true, link.getMacs().contains(mac7));
                assertEquals(false, link.getMacs().contains(mac8));
                assertEquals(true, link.getMacs().contains(mac9));
                assertEquals(nodeA, link.getBridgeTopologyPort().getNodeid());
                assertEquals(portAB,link.getBridgeTopologyPort().getBridgePort());
                assertEquals(nodeB, link.getDesignateBridgePort().getNodeid());
                assertEquals(portBA,link.getDesignateBridgePort().getBridgePort());
            } else if (link.getMacs().contains(mac6)) {
                assertEquals(1, link.getMacs().size());
                assertEquals(nodeB, link.getBridgeTopologyPort().getNodeid());
                assertEquals(portB6,link.getBridgeTopologyPort().getBridgePort());
                assertEquals(null, link.getDesignateBridgePort());
            } else if (link.getMacs().contains(mac8)) {
                assertEquals(1, link.getMacs().size());
                assertEquals(nodeA, link.getBridgeTopologyPort().getNodeid());
                assertEquals(portA8,link.getBridgeTopologyPort().getBridgePort());
                assertEquals(null, link.getDesignateBridgePort());
            } else {
                assertEquals(false, true);
            }
        }


    }

