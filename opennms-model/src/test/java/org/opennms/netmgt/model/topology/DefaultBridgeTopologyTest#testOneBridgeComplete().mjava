    @Test
    public void testOneBridgeComplete() throws Exception {

        Integer nodeA = 30;

        Integer portA1 = 1;
        Integer portA2 = 2;
        Integer portA3 = 3;
        Integer portA4 = 4;

        Integer portA23 = 23;
        Integer portA24 = 24;
        Integer portA25 = 25;

        String mac1 = "000daaaa0001"; // port A1
        String mac2 = "000daaaa0002"; // port A2
        String mac3 = "000daaaa0003"; // port A3
        String mac4 = "000daaaa0004"; // port A4

        String mac231 = "000daaaa0231"; // port A23
        String mac232 = "000daaaa0232"; // port A23
        String mac233 = "000daaaa0233"; // port A23
        String mac234 = "000daaaa0234"; // port A23

        String mac241 = "000daaaa0241"; // port A24
        String mac242 = "000daaaa0242"; // port A24
        String mac243 = "000daaaa0243"; // port A24
        String mac244 = "000daaaa0244"; // port A24
        String mac245 = "000daaaa0245"; // port A24

        String mac251 = "000daaaa0251"; // port A25
        String mac252 = "000daaaa0252"; // port A25
        String mac253 = "000daaaa0253"; // port A25

        Map<Integer,Set<String>> bftA = new HashMap<Integer, Set<String>>();

        bftA =addBridgeForwardingTableEntry(portA1, mac1,bftA);
        bftA =addBridgeForwardingTableEntry(portA2, mac2,bftA);
        bftA =addBridgeForwardingTableEntry(portA3, mac3,bftA);
        bftA =addBridgeForwardingTableEntry(portA4, mac4,bftA);

        bftA =addBridgeForwardingTableEntry(portA23, mac231,bftA);
        bftA =addBridgeForwardingTableEntry(portA23, mac232,bftA);
        bftA =addBridgeForwardingTableEntry(portA23, mac233,bftA);
        bftA =addBridgeForwardingTableEntry(portA23, mac234,bftA);

        bftA =addBridgeForwardingTableEntry(portA24, mac241,bftA);
        bftA =addBridgeForwardingTableEntry(portA24, mac242,bftA);
        bftA =addBridgeForwardingTableEntry(portA24, mac243,bftA);
        bftA =addBridgeForwardingTableEntry(portA24, mac244,bftA);
        bftA =addBridgeForwardingTableEntry(portA24, mac245,bftA);

        bftA =addBridgeForwardingTableEntry(portA25, mac251,bftA);
        bftA =addBridgeForwardingTableEntry(portA25, mac252,bftA);
        bftA =addBridgeForwardingTableEntry(portA25, mac253,bftA);


        BridgeTopology bridgeTopology = new BridgeTopology();

        bridgeTopology.parseBFT(nodeA,bftA);

        List<BridgeTopologyLink> links = bridgeTopology.getTopology();
        printBridgeTopologyLinks(links);
        assertEquals(7, links.size());
        for (BridgeTopologyLink link: links) {
            BridgeTopologyPort port = link.getBridgeTopologyPort();
            assertEquals(port.getMacs(),link.getMacs());
            assertEquals(null,link.getDesignateBridgePort());
            if (link.getBridgeTopologyPort().getBridgePort() == portA1) {
                assertEquals(1, link.getMacs().size());
                Iterator<String> macs = link.getMacs().iterator();
                assertEquals(mac1, macs.next());
            } else if (link.getBridgeTopologyPort().getBridgePort() == portA2) {
                assertEquals(1, link.getMacs().size());
                Iterator<String> macs = link.getMacs().iterator();
                assertEquals(mac2, macs.next());
            } else if (link.getBridgeTopologyPort().getBridgePort() == portA3) {
                assertEquals(1, link.getMacs().size());
                Iterator<String> macs = link.getMacs().iterator();
                assertEquals(mac3, macs.next());
            } else if (link.getBridgeTopologyPort().getBridgePort() == portA4) {
                assertEquals(1, link.getMacs().size());
                Iterator<String> macs = link.getMacs().iterator();
                assertEquals(mac4, macs.next());
            } else if (link.getBridgeTopologyPort().getBridgePort() == portA23) {
                final Set<String> macs = link.getMacs();
                assertEquals(4, macs.size());
                assertTrue(macs.contains(mac231));
                assertTrue(macs.contains(mac232));
                assertTrue(macs.contains(mac233));
                assertTrue(macs.contains(mac234));
            } else if (link.getBridgeTopologyPort().getBridgePort() == portA24) {
                final Set<String> macs = link.getMacs();
                assertEquals(5, macs.size());
                assertTrue(macs.contains(mac241));
                assertTrue(macs.contains(mac242));
                assertTrue(macs.contains(mac243));
                assertTrue(macs.contains(mac244));
                assertTrue(macs.contains(mac245));
            } else if (link.getBridgeTopologyPort().getBridgePort() == portA25) {
                final Set<String> macs = link.getMacs();
                assertEquals(3, macs.size());
                assertTrue(macs.contains(mac251));
                assertTrue(macs.contains(mac252));
                assertTrue(macs.contains(mac253));
            } else {
                assertEquals(-1, 1);
            }
        }

    }

