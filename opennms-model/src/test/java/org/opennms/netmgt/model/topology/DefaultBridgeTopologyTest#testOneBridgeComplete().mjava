	@Test
	public void testOneBridgeComplete() throws Exception {

		Integer nodeA = 30;

		Integer portA1 = 1;
		Integer portA2 = 2;
		Integer portA3 = 3;
		Integer portA4 = 4;

		Integer portA23 = 23;
		Integer portA24 = 24;
		Integer portA25 = 25;

		String mac1 = "000daaaa0001"; // port A1
		String mac2 = "000daaaa0002"; // port A2
		String mac3 = "000daaaa0003"; // port A3
		String mac4 = "000daaaa0004"; // port A4

		String mac231 = "000daaaa0231"; // port A23
		String mac232 = "000daaaa0232"; // port A23
		String mac233 = "000daaaa0233"; // port A23
		String mac234 = "000daaaa0234"; // port A23

		String mac241 = "000daaaa0241"; // port A24
		String mac242 = "000daaaa0242"; // port A24
		String mac243 = "000daaaa0243"; // port A24
		String mac244 = "000daaaa0244"; // port A24
		String mac245 = "000daaaa0245"; // port A24

		String mac251 = "000daaaa0251"; // port A25
		String mac252 = "000daaaa0252"; // port A25
		String mac253 = "000daaaa0253"; // port A25
		
        LinkableSnmpNode snmpnodeA = new LinkableSnmpNode(nodeA, null, null, null);
        LinkableNode linkablenodeA = new LinkableNode(snmpnodeA, null);

        linkablenodeA.addBridgeForwardingTableEntry(portA1, mac1);
        linkablenodeA.addBridgeForwardingTableEntry(portA2, mac2);
        linkablenodeA.addBridgeForwardingTableEntry(portA3, mac3);
        linkablenodeA.addBridgeForwardingTableEntry(portA4, mac4);

        linkablenodeA.addBridgeForwardingTableEntry(portA23, mac231);
        linkablenodeA.addBridgeForwardingTableEntry(portA23, mac232);
        linkablenodeA.addBridgeForwardingTableEntry(portA23, mac233);
        linkablenodeA.addBridgeForwardingTableEntry(portA23, mac234);

        linkablenodeA.addBridgeForwardingTableEntry(portA24, mac241);
        linkablenodeA.addBridgeForwardingTableEntry(portA24, mac242);
        linkablenodeA.addBridgeForwardingTableEntry(portA24, mac243);
        linkablenodeA.addBridgeForwardingTableEntry(portA24, mac244);
        linkablenodeA.addBridgeForwardingTableEntry(portA24, mac245);

        linkablenodeA.addBridgeForwardingTableEntry(portA25, mac251);
        linkablenodeA.addBridgeForwardingTableEntry(portA25, mac252);
        linkablenodeA.addBridgeForwardingTableEntry(portA25, mac253);
        

        BridgeTopology bridgeTopology = new BridgeTopology();
        
        bridgeTopology.addNodeToTopology(linkablenodeA);

        List<BridgeTopologyLink> links = bridgeTopology.getTopology();
        printBridgeTopologyLinks(links);
        assertEquals(7, links.size());
        for (BridgeTopologyLink link: links) {
        	BridgeTopologyPort port = link.getBridgeTopologyPort();
    		assertEquals(port.getMacs(),link.getMacs());
        	assertEquals(null,link.getDesignatebridgePort());
        	if (link.getBridgeTopologyPort().getBridgePort() == portA1) {
        		assertEquals(1, link.getMacs().size());
        		Iterator<String> macs = link.getMacs().iterator();
        		assertEquals(mac1, macs.next());
        	} else if (link.getBridgeTopologyPort().getBridgePort() == portA2) {
        		assertEquals(1, link.getMacs().size());
        		Iterator<String> macs = link.getMacs().iterator();
        		assertEquals(mac2, macs.next());
        	} else if (link.getBridgeTopologyPort().getBridgePort() == portA3) {
        		assertEquals(1, link.getMacs().size());
        		Iterator<String> macs = link.getMacs().iterator();
        		assertEquals(mac3, macs.next());
        	} else if (link.getBridgeTopologyPort().getBridgePort() == portA4) {
        		assertEquals(1, link.getMacs().size());
        		Iterator<String> macs = link.getMacs().iterator();
        		assertEquals(mac4, macs.next());
        	} else if (link.getBridgeTopologyPort().getBridgePort() == portA23) {
        		assertEquals(4, link.getMacs().size());
        		Iterator<String> macs = link.getMacs().iterator();
        		assertEquals(mac232, macs.next());
        		assertEquals(mac231, macs.next());
        		assertEquals(mac234, macs.next());
        		assertEquals(mac233, macs.next());
        	} else if (link.getBridgeTopologyPort().getBridgePort() == portA24) {
        		assertEquals(5, link.getMacs().size());
        		Iterator<String> macs = link.getMacs().iterator();
        		assertEquals(mac241, macs.next());
        		assertEquals(mac245, macs.next());
        		assertEquals(mac244, macs.next());
        		assertEquals(mac243, macs.next());
        		assertEquals(mac242, macs.next());
        	} else if (link.getBridgeTopologyPort().getBridgePort() == portA25) {
        		assertEquals(3, link.getMacs().size());
        		Iterator<String> macs = link.getMacs().iterator();
        		assertEquals(mac253, macs.next());
        		assertEquals(mac251, macs.next());
        		assertEquals(mac252, macs.next());
        	} else {
        		assertEquals(-1, 1);
        	}
        }

	}

