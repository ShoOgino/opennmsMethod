	    public void checkDE(List<BridgeTopologyLink> links) {
	        printBridgeTopologyLinks(links);
	        assertEquals(3, links.size());
	        for (BridgeTopologyLink link: links) {
	        	if (link.getMacs().contains(mac1)) {
	        		assertEquals(2, link.getMacs().size());
	        		assertEquals(true,link.getMacs().contains(mac2));
	        		assertEquals(nodeD, link.getBridgeTopologyPort().getNodeid());
	        		assertEquals(portD,link.getBridgeTopologyPort().getBridgePort());
	        		assertEquals(null, link.getDesignateBridgePort());
	        	} else if (link.getMacs().contains(mac5)) {
	        		assertEquals(2, link.getMacs().size());
	        		assertEquals(true,link.getMacs().contains(mac6));
	        		assertEquals(nodeE, link.getBridgeTopologyPort().getNodeid());
	        		assertEquals(portE,link.getBridgeTopologyPort().getBridgePort());
	        		assertEquals(null, link.getDesignateBridgePort());
	        	} else if (link.getMacs().contains(mac7)) {
	        		assertEquals(4, link.getMacs().size());
	        		assertEquals(true,link.getMacs().contains(mac3));
	        		assertEquals(true,link.getMacs().contains(mac4));
	        		assertEquals(true,link.getMacs().contains(mac8));
	        		assertEquals(nodeD, link.getBridgeTopologyPort().getNodeid());
	        		assertEquals(portDD,link.getBridgeTopologyPort().getBridgePort());
	        		assertEquals(nodeE, link.getDesignateBridgePort().getNodeid());
	        		assertEquals(portEE,link.getDesignateBridgePort().getBridgePort());
	        	} else {
	    			assertEquals(false, true);
	    		}
	        }
	    	
	    }

