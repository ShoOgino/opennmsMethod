    @Test 
    public void testTwoBridgeWithBackbonePortsUsingBridgeAddressInBft() {
        Integer nodeAId = 1101;
        Integer nodeBId = 1102;

        OnmsNode nodeA= new OnmsNode();
        nodeA.setId(nodeAId);
        BridgeElement elementA = new BridgeElement();
        elementA.setNode(nodeA);
        elementA.setBaseBridgeAddress("aaaaaaaaaaaa");
        List<BridgeElement> elemAlist = new ArrayList<BridgeElement>();
        elemAlist.add(elementA);
        List<BridgeMacLink> bftA = new ArrayList<BridgeMacLink>();

        OnmsNode nodeB= new OnmsNode();
        nodeB.setId(nodeBId);
        BridgeElement elementB = new BridgeElement();
        elementB.setNode(nodeB);
        elementB.setBaseBridgeAddress("bbbbbbbbbbbb");
        List<BridgeElement> elemBlist = new ArrayList<BridgeElement>();
        elemBlist.add(elementB);
        List<BridgeMacLink> bftB = new ArrayList<BridgeMacLink>();

        Integer portA1 = 1;
        Integer portAB = 12;
        Integer portBA = 21;
        Integer portB2 = 2 ;

        String macA11 = "000daa000a11"; // port A1 ---port BA 
        String macA12 = "000daa000a12"; // port A1 ---port BA 

        String macAB  = "000daa0000ab"; // port AB ---port BA 

        String macB21 = "000daa000b21"; // port AB ---port B2 
        String macB22 = "000daa000b22"; // port AB ---port B2


        bftA =addBridgeForwardingTableEntry(nodeA,portA1, macA11,bftA);
        bftA =addBridgeForwardingTableEntry(nodeA,portA1, macA12,bftA);
        bftA =addBridgeForwardingTableEntry(nodeA,portAB, "bbbbbbbbbbbb",bftA);


        bftB =addBridgeForwardingTableEntry(nodeB,portBA, macA11,bftB);
        bftB =addBridgeForwardingTableEntry(nodeB,portBA, macA12,bftB);
        bftB =addBridgeForwardingTableEntry(nodeB,portBA, macAB,bftB);
        bftB =addBridgeForwardingTableEntry(nodeB,portB2, macB21,bftB);
        bftB =addBridgeForwardingTableEntry(nodeB,portB2, macB22,bftB);

        BroadcastDomain bridgeTopology = new BroadcastDomain();

        bridgeTopology.loadBFT(nodeAId,bftA,null,elemAlist);
        bridgeTopology.loadBFT(nodeBId,bftB,null,elemBlist);
        assertTrue(bridgeTopology.isTopologyChanged());
        assertTrue(!bridgeTopology.isCalculating());

        bridgeTopology.calculate();
        List<SharedSegment> shsegs = bridgeTopology.getTopology();
        printBridgeTopology(shsegs);
        assertEquals(3, shsegs.size());

        for (SharedSegment shared: shsegs) {
            assertEquals(false, shared.noMacsOnSegment());
            if (shared.getMacsOnSegment().contains(macAB)) {
                assertEquals(2, shared.getMacsOnSegment().size());
                assertEquals(2, shared.getBridgeIdsOnSegment().size());
                List<BridgeMacLink> links = shared.getBridgeMacLinks();
                assertEquals(2, links.size());
                for (BridgeMacLink link: links) {
                    if (link.getNode().getId() == nodeAId) {
                        assertEquals("bbbbbbbbbbbb", link.getMacAddress());
                        assertEquals(portAB,link.getBridgePort());
                    } else if (link.getNode().getId() == nodeBId) {
                       assertEquals(macAB, link.getMacAddress());
                       assertEquals(portBA,link.getBridgePort());
                    } else 
                       assertTrue(false);
                }
            } else if (shared.getMacsOnSegment().contains(macA11)) {
                assertEquals(2, shared.getMacsOnSegment().size());
                assertEquals(1, shared.getBridgeIdsOnSegment().size());
                assertEquals(true, shared.getMacsOnSegment().contains(macA12));
                assertEquals(nodeAId, shared.getDesignatedBridge());
                assertEquals(portA1,shared.getDesignatedPort());
                List<BridgeMacLink> links = shared.getBridgeMacLinks();
                assertEquals(2, links.size());
                for (BridgeMacLink link: links) {
                    assertEquals(nodeAId, link.getNode().getId());
                    assertEquals(portA1, link.getBridgePort());
                    boolean pass1 = true;
                    boolean pass2 = true;
                   if (pass1 && link.getMacAddress().equals(macA11)) {
                        assertTrue(true);
                        pass1 = false;
                   } else if (pass2 && link.getMacAddress().equals(macA12)) {
                        assertTrue(true);
                        pass2 = false;
                   } else
                        assertTrue(false);
                }
            } else if (shared.getMacsOnSegment().contains(macB21)) {
                assertEquals(2, shared.getMacsOnSegment().size());
                assertEquals(1, shared.getBridgeIdsOnSegment().size());
                assertEquals(true, shared.getMacsOnSegment().contains(macB22));
                assertEquals(nodeBId, shared.getDesignatedBridge());
                assertEquals(portB2,shared.getDesignatedPort());
                List<BridgeMacLink> links = shared.getBridgeMacLinks();
                assertEquals(2, links.size());
                for (BridgeMacLink link: links) {
                    assertEquals(nodeBId, link.getNode().getId());
                    assertEquals(portB2, link.getBridgePort());
                    boolean pass1 = true;
                    boolean pass2 = true;
                   if (pass1 && link.getMacAddress().equals(macB21)) {
                        assertTrue(true);
                        pass1 = false;
                   } else if (pass2 && link.getMacAddress().equals(macB22)) {
                        assertTrue(true);
                        pass2 = false;
                   } else
                        assertTrue(false);
                }
            } else {
                assertEquals(false, true);
            }
        }

    }

