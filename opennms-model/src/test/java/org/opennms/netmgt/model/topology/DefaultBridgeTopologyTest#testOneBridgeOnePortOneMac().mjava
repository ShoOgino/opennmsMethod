    @Test
    public void testOneBridgeOnePortOneMac() throws Exception {

        Integer nodeAId  = 10;
        OnmsNode nodeA= new OnmsNode();
        nodeA.setId(nodeAId);
        BridgeElement element = new BridgeElement();
        element.setNode(nodeA);
        element.setBaseBridgeAddress("aaaaaaaaaaaa");
        List<BridgeElement> elemlist = new ArrayList<BridgeElement>();
        elemlist.add(element);
        List<BridgeMacLink> bftA = new ArrayList<BridgeMacLink>();

        Integer portA1 = 1;
        Integer portA2 = 2;
        Integer portA3 = 3;
        Integer portA4 = 4;
        Integer portA5 = 5;

        String mac1 = "000daaaa0001"; // learned on port A1
        String mac2 = "000daaaa0002"; // learned on port A2 
        String mac3 = "000daaaa0003"; // learned on port A2 
        String mac4 = "000daaaa0004"; // learned on port A2 
        String mac5 = "000daaaa0005"; // learned on port A2 

        bftA = addBridgeForwardingTableEntry(nodeA,portA1, mac1, bftA);
        bftA = addBridgeForwardingTableEntry(nodeA,portA2, mac2, bftA);
        bftA = addBridgeForwardingTableEntry(nodeA,portA3, mac3, bftA);
        bftA = addBridgeForwardingTableEntry(nodeA,portA4, mac4, bftA);
        bftA = addBridgeForwardingTableEntry(nodeA,portA5, mac5, bftA);

        BroadcastDomain bridgeTopology = new BroadcastDomain();

        bridgeTopology.loadBFT(nodeAId,bftA,null,elemlist);
        
        assertTrue(bridgeTopology.isTopologyChanged());
        assertTrue(!bridgeTopology.isCalculating());

        bridgeTopology.calculate();
        List<SharedSegment> links = bridgeTopology.getTopology();
        printBridgeTopology(links);
        assertEquals(5, links.size());
        for (SharedSegment shared: links) {
            assertTrue(!shared.noMacsOnSegment());
            assertEquals(nodeAId,shared.getDesignatedBridge());
            assertEquals(1, shared.getBridgeIdsOnSegment().size());
            assertEquals(1, shared.getMacsOnSegment().size());
            for (BridgeMacLink link: shared.getBridgeMacLinks()) {
                assertEquals(link.getBridgePort(),shared.getDesignatedPort());
            if (link.getBridgePort() == portA1) {
                assertEquals(mac1, link.getMacAddress());
            } else if (link.getBridgePort() == portA2) {
                assertEquals(mac2, link.getMacAddress());
            } else if (link.getBridgePort() == portA3) {
                assertEquals(mac3, link.getMacAddress());
            } else if (link.getBridgePort() == portA4) {
                assertEquals(mac4, link.getMacAddress());
            } else if (link.getBridgePort() == portA5) {
                assertEquals(mac5, link.getMacAddress());
            } else {
                assertEquals(-1, 1);
            }
            }
        }
        assertTrue(!bridgeTopology.isTopologyChanged());
        assertTrue(!bridgeTopology.isCalculating());

    }

