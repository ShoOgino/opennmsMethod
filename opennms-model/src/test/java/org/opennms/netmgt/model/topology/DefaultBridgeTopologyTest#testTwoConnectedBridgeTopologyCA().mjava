	@Test
	public void testTwoConnectedBridgeTopologyCA() {

		ABCTopology topology = new ABCTopology();
        BridgeTopology bridgeTopology = new BridgeTopology();
        
        bridgeTopology.parseBFT(topology.nodeC,topology.bftC);
        bridgeTopology.parseBFT(topology.nodeA,topology.bftA);

        List<BridgeTopologyLink> links = bridgeTopology.getTopology();
        printBridgeTopologyLinks(links);
        assertEquals(3, links.size());
        
        for (BridgeTopologyLink link: links) {
        	if (link.getMacs().contains(topology.mac1)) {
        		assertEquals(1, link.getMacs().size());
        		assertEquals(topology.nodeA, link.getBridgeTopologyPort().getNodeid());
        		assertEquals(topology.portA,link.getBridgeTopologyPort().getBridgePort());
        		assertEquals(null, link.getDesignateBridgePort());
       		} else if (link.getMacs().contains(topology.mac2)) {
        		assertEquals(1, link.getMacs().size());
        		assertEquals(topology.nodeC, link.getBridgeTopologyPort().getNodeid());
        		assertEquals(topology.portCB,link.getBridgeTopologyPort().getBridgePort());
        		assertEquals(topology.nodeA, link.getDesignateBridgePort().getNodeid());
        		assertEquals(topology.portAB,link.getDesignateBridgePort().getBridgePort());
       		} else if (link.getMacs().contains(topology.mac3)) {
        		assertEquals(1, link.getMacs().size());
        		assertEquals(topology.nodeC, link.getBridgeTopologyPort().getNodeid());
        		assertEquals(topology.portC,link.getBridgeTopologyPort().getBridgePort());
        		assertEquals(null, link.getDesignateBridgePort());
    		} else {
    			assertEquals(false, true);
    		}
        }
	}

