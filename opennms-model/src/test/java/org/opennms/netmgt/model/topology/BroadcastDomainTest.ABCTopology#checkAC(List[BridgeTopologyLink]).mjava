        public void checkAC(List<BridgeTopologyLink> links) {
            printBridgeTopologyLinks(links);
            assertEquals(3, links.size());

            for (BridgeTopologyLink link: links) {
                if (link.getMacs().contains(mac1)) {
                    assertEquals(1, link.getMacs().size());
                    assertEquals(nodeA, link.getBridgeTopologyPort().getNodeid());
                    assertEquals(portA,link.getBridgeTopologyPort().getBridgePort());
                    assertEquals(null, link.getDesignateBridgePort());
                } else if (link.getMacs().contains(mac2)) {
                    assertEquals(1, link.getMacs().size());
                    assertEquals(nodeA, link.getBridgeTopologyPort().getNodeid());
                    assertEquals(portAB,link.getBridgeTopologyPort().getBridgePort());
                    assertEquals(nodeC, link.getDesignateBridgePort().getNodeid());
                    assertEquals(portCB,link.getDesignateBridgePort().getBridgePort());
                } else if (link.getMacs().contains(mac3)) {
                    assertEquals(1, link.getMacs().size());
                    assertEquals(nodeC, link.getBridgeTopologyPort().getNodeid());
                    assertEquals(portC,link.getBridgeTopologyPort().getBridgePort());
                    assertEquals(null, link.getDesignateBridgePort());
                } else {
                    assertEquals(false, true);
                }
            }
        }

