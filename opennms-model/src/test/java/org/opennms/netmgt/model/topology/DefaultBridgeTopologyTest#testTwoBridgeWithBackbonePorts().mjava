	@Test 
	public void testTwoBridgeWithBackbonePorts() {
		Integer nodeA = 1101;
        Integer nodeB = 1102;
        
        Integer portA1 = 1;
		Integer portAB = 12;
		Integer portBA = 21;
		Integer portB2 = 2 ;
		
        String macA11 = "000daa000a11"; // port A1 ---port BA 
        String macA12 = "000daa000a12"; // port A1 ---port BA 

        String macAB  = "000daa0000ab"; // port AB ---port BA 

        String macB21 = "000daa000b21"; // port AB ---port B2 
        String macB22 = "000daa000b22"; // port AB ---port B2
        
        Map<Integer,Set<String>> bftA = new HashMap<Integer, Set<String>>();

        bftA =addBridgeForwardingTableEntry(portA1, macA11,bftA);
        bftA =addBridgeForwardingTableEntry(portA1, macA12,bftA);
        bftA =addBridgeForwardingTableEntry(portAB, macAB,bftA);
        bftA =addBridgeForwardingTableEntry(portAB, macB21,bftA);
        bftA =addBridgeForwardingTableEntry(portAB, macB22,bftA);

        Map<Integer,Set<String>> bftB = new HashMap<Integer, Set<String>>();

        bftB =addBridgeForwardingTableEntry(portBA, macA11,bftB);
        bftB =addBridgeForwardingTableEntry(portBA, macA12,bftB);
        bftB =addBridgeForwardingTableEntry(portBA, macAB,bftB);
        bftB =addBridgeForwardingTableEntry(portB2, macB21,bftB);
        bftB =addBridgeForwardingTableEntry(portB2, macB22,bftB);

        BridgeTopology bridgeTopology = new BridgeTopology();
        
        bridgeTopology.parseBFT(nodeA,bftA);
        bridgeTopology.parseBFT(nodeB,bftB);

        List<BridgeTopologyLink> links = bridgeTopology.getTopology();
        printBridgeTopologyLinks(links);
        assertEquals(3, links.size());
        
        for (BridgeTopologyLink link: links) {
        	assertEquals(false, link.getMacs().isEmpty());
        	if (link.getMacs().contains(macAB)) {
        		assertEquals(1, link.getMacs().size());
        		assertEquals(nodeA, link.getBridgeTopologyPort().getNodeid());
        		assertEquals(portAB,link.getBridgeTopologyPort().getBridgePort());
        		assertEquals(nodeB, link.getDesignateBridgePort().getNodeid());
        		assertEquals(portBA,link.getDesignateBridgePort().getBridgePort());
    		} else if (link.getMacs().contains(macA12)) {
        		assertEquals(2, link.getMacs().size());
        		assertEquals(true, link.getMacs().contains(macA12));
        		assertEquals(nodeA, link.getBridgeTopologyPort().getNodeid());
        		assertEquals(portA1,link.getBridgeTopologyPort().getBridgePort());
        		assertEquals(null, link.getDesignateBridgePort());
    		} else if (link.getMacs().contains(macB21)) {
        		assertEquals(2, link.getMacs().size());
        		assertEquals(true, link.getMacs().contains(macB22));
        		assertEquals(nodeB, link.getBridgeTopologyPort().getNodeid());
        		assertEquals(portB2,link.getBridgeTopologyPort().getBridgePort());
        		assertEquals(null, link.getDesignateBridgePort());
    		} else {
    			assertEquals(false, true);
    		}
        }

	}

