	@Test
    public void testTwoConnectedBridgeTopology() throws Exception {

        Integer nodeA  = 1111;
        Integer nodeB  = 2222;
        
        Integer portA1 = 1;
        Integer portA2 = 2;
        Integer portA3 = 3;
        Integer portA4 = 4;
        Integer portA5 = 5;
        Integer portAB = 16;
        Integer portBA = 24;
        Integer portB6 = 6;
        Integer portB7 = 7;
        Integer portB8 = 8;
        Integer portB9 = 9;

        String mac1 = "000daaaa0001"; // port A1 ---port BA
        String mac2 = "000daaaa0002"; // port A2 ---port BA
        String mac3 = "000daaaa0003"; // port A3 ---port BA
        String mac4 = "000daaaa0004"; // port A4 ---port BA
        String mac5 = "000daaaa0005"; // port A5 ---port BA
        String mac6 = "000daaaa0006"; // port AB ---port B6 
        String mac7 = "000daaaa0007"; // port AB ---port B7
        String mac8 = "000daaaa0008"; // port AB ---port B8
        String mac9 = "000daaaa0009"; // port AB ---port B9

        Map<Integer,Set<String>> bftA = new HashMap<Integer, Set<String>>();

        bftA =addBridgeForwardingTableEntry(portA1, mac1,bftA);
        bftA =addBridgeForwardingTableEntry(portA2, mac2,bftA);
        bftA =addBridgeForwardingTableEntry(portA3, mac3,bftA);
        bftA =addBridgeForwardingTableEntry(portA4, mac4,bftA);
        bftA =addBridgeForwardingTableEntry(portA5, mac5,bftA);

        bftA =addBridgeForwardingTableEntry(portAB, mac6,bftA);
        bftA =addBridgeForwardingTableEntry(portAB, mac7,bftA);
        bftA =addBridgeForwardingTableEntry(portAB, mac8,bftA);
        bftA =addBridgeForwardingTableEntry(portAB, mac9,bftA);
        
        Map<Integer,Set<String>> bftB = new HashMap<Integer, Set<String>>();

        bftB =addBridgeForwardingTableEntry(portBA, mac1,bftB);
        bftB =addBridgeForwardingTableEntry(portBA, mac2,bftB);
        bftB =addBridgeForwardingTableEntry(portBA, mac3,bftB);
        bftB =addBridgeForwardingTableEntry(portBA, mac4,bftB);
        bftB =addBridgeForwardingTableEntry(portBA, mac5,bftB);

        bftB =addBridgeForwardingTableEntry(portB6, mac6,bftB);
        bftB =addBridgeForwardingTableEntry(portB7, mac7,bftB);
        bftB =addBridgeForwardingTableEntry(portB8, mac8,bftB);
        bftB =addBridgeForwardingTableEntry(portB9, mac9,bftB);

        BridgeTopology bridgeTopology = new BridgeTopology();
        
        bridgeTopology.parseBFT(nodeA,bftA);
        bridgeTopology.parseBFT(nodeB,bftB);

        List<BridgeTopologyLink> links = bridgeTopology.getTopology();
        printBridgeTopologyLinks(links);
        assertEquals(10, links.size());
        for (BridgeTopologyLink link: links) {
        	if (link.getMacs().isEmpty()) {
        		assertEquals(nodeA, link.getBridgeTopologyPort().getNodeid());
        		assertEquals(portAB,link.getBridgeTopologyPort().getBridgePort());
        		assertEquals(nodeB, link.getDesignateBridgePort().getNodeid());
        		assertEquals(portBA,link.getDesignateBridgePort().getBridgePort());
        	} else {
        		assertEquals(1, link.getMacs().size());
        		String mac = link.getMacs().iterator().next();
        		if (mac.equals(mac1)) {
            		assertEquals(nodeA, link.getBridgeTopologyPort().getNodeid());
            		assertEquals(portA1,link.getBridgeTopologyPort().getBridgePort());
            		assertEquals(null, link.getDesignateBridgePort());
        		} else if (mac.equals(mac2)) {
            		assertEquals(nodeA, link.getBridgeTopologyPort().getNodeid());
            		assertEquals(portA2,link.getBridgeTopologyPort().getBridgePort());
            		assertEquals(null, link.getDesignateBridgePort());
        		} else if (mac.equals(mac3)) {
            		assertEquals(nodeA, link.getBridgeTopologyPort().getNodeid());
            		assertEquals(portA3,link.getBridgeTopologyPort().getBridgePort());
            		assertEquals(null, link.getDesignateBridgePort());
        		} else if (mac.equals(mac4)) {
            		assertEquals(nodeA, link.getBridgeTopologyPort().getNodeid());
            		assertEquals(portA4,link.getBridgeTopologyPort().getBridgePort());
            		assertEquals(null, link.getDesignateBridgePort());
        		} else if (mac.equals(mac5)) {
            		assertEquals(nodeA, link.getBridgeTopologyPort().getNodeid());
            		assertEquals(portA5,link.getBridgeTopologyPort().getBridgePort());
            		assertEquals(null, link.getDesignateBridgePort());
        		} else if (mac.equals(mac6)) {
            		assertEquals(nodeB, link.getBridgeTopologyPort().getNodeid());
            		assertEquals(portB6,link.getBridgeTopologyPort().getBridgePort());
            		assertEquals(null, link.getDesignateBridgePort());
        		} else if (mac.equals(mac7)) {
            		assertEquals(nodeB, link.getBridgeTopologyPort().getNodeid());
            		assertEquals(portB7,link.getBridgeTopologyPort().getBridgePort());
            		assertEquals(null, link.getDesignateBridgePort());
        		} else if (mac.equals(mac8)) {
            		assertEquals(nodeB, link.getBridgeTopologyPort().getNodeid());
            		assertEquals(portB8,link.getBridgeTopologyPort().getBridgePort());
            		assertEquals(null, link.getDesignateBridgePort());
        		} else if (mac.equals(mac9)) {
            		assertEquals(nodeB, link.getBridgeTopologyPort().getNodeid());
            		assertEquals(portB9,link.getBridgeTopologyPort().getBridgePort());
            		assertEquals(null, link.getDesignateBridgePort());
        		} else {
        			assertEquals(false, true);
        		}
        	}
        }
  
    }

