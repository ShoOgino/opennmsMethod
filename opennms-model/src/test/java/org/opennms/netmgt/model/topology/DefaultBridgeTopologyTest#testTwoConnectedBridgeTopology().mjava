    @Test
    public void testTwoConnectedBridgeTopology() throws Exception {

        Integer nodeAId  = 1111;
        Integer nodeBId = 2222;
        OnmsNode nodeA= new OnmsNode();
        nodeA.setId(nodeAId);
        BridgeElement elementA = new BridgeElement();
        elementA.setNode(nodeA);
        elementA.setBaseBridgeAddress("aaaaaaaaaaaa");
        List<BridgeElement> elemAlist = new ArrayList<BridgeElement>();
        elemAlist.add(elementA);
        List<BridgeMacLink> bftA = new ArrayList<BridgeMacLink>();

        OnmsNode nodeB= new OnmsNode();
        nodeB.setId(nodeBId);
        BridgeElement elementB = new BridgeElement();
        elementB.setNode(nodeB);
        elementB.setBaseBridgeAddress("bbbbbbbbbbbb");
        List<BridgeElement> elemBlist = new ArrayList<BridgeElement>();
        elemBlist.add(elementB);
        List<BridgeMacLink> bftB = new ArrayList<BridgeMacLink>();

        Integer portA1 = 1;
        Integer portA2 = 2;
        Integer portA3 = 3;
        Integer portA4 = 4;
        Integer portA5 = 5;
        Integer portAB = 16;
        Integer portBA = 24;
        Integer portB6 = 6;
        Integer portB7 = 7;
        Integer portB8 = 8;
        Integer portB9 = 9;

        String mac1 = "000daaaa0001"; // port A1 ---port BA
        String mac2 = "000daaaa0002"; // port A2 ---port BA
        String mac3 = "000daaaa0003"; // port A3 ---port BA
        String mac4 = "000daaaa0004"; // port A4 ---port BA
        String mac5 = "000daaaa0005"; // port A5 ---port BA
        String mac6 = "000daaaa0006"; // port AB ---port B6 
        String mac7 = "000daaaa0007"; // port AB ---port B7
        String mac8 = "000daaaa0008"; // port AB ---port B8
        String mac9 = "000daaaa0009"; // port AB ---port B9

        bftA =addBridgeForwardingTableEntry(nodeA,portA1, mac1,bftA);
        bftA =addBridgeForwardingTableEntry(nodeA,portA2, mac2,bftA);
        bftA =addBridgeForwardingTableEntry(nodeA,portA3, mac3,bftA);
        bftA =addBridgeForwardingTableEntry(nodeA,portA4, mac4,bftA);
        bftA =addBridgeForwardingTableEntry(nodeA,portA5, mac5,bftA);

        bftA =addBridgeForwardingTableEntry(nodeA,portAB, mac6,bftA);
        bftA =addBridgeForwardingTableEntry(nodeA,portAB, mac7,bftA);
        bftA =addBridgeForwardingTableEntry(nodeA,portAB, mac8,bftA);
        bftA =addBridgeForwardingTableEntry(nodeA,portAB, mac9,bftA);


        bftB =addBridgeForwardingTableEntry(nodeB,portBA, mac1,bftB);
        bftB =addBridgeForwardingTableEntry(nodeB,portBA, mac2,bftB);
        bftB =addBridgeForwardingTableEntry(nodeB,portBA, mac3,bftB);
        bftB =addBridgeForwardingTableEntry(nodeB,portBA, mac4,bftB);
        bftB =addBridgeForwardingTableEntry(nodeB,portBA, mac5,bftB);

        bftB =addBridgeForwardingTableEntry(nodeB,portB6, mac6,bftB);
        bftB =addBridgeForwardingTableEntry(nodeB,portB7, mac7,bftB);
        bftB =addBridgeForwardingTableEntry(nodeB,portB8, mac8,bftB);
        bftB =addBridgeForwardingTableEntry(nodeB,portB9, mac9,bftB);

        BroadcastDomain bridgeTopology = new BroadcastDomain();

        bridgeTopology.loadBFT(nodeAId,bftA,null,elemAlist);
        bridgeTopology.loadBFT(nodeBId,bftB,null,elemBlist);
        assertTrue(bridgeTopology.isTopologyChanged());
        assertTrue(!bridgeTopology.isCalculating());

        bridgeTopology.calculate();
        List<SharedSegment> shsegs = bridgeTopology.getTopology();
        printBridgeTopology(shsegs);

        assertEquals(10, shsegs.size());
        for (SharedSegment shared: shsegs) {
            if (shared.noMacsOnSegment()) {
                assertEquals(0, shared.getBridgeMacLinks().size());
                assertEquals(1, shared.getBridgeBridgeLinks().size());
                BridgeBridgeLink link=shared.getBridgeBridgeLinks().iterator().next();
                assertEquals(nodeAId, link.getNode().getId());
                assertEquals(portAB,link.getBridgePort());
                assertEquals(nodeBId, link.getDesignatedNode().getId());
                assertEquals(portBA,link.getDesignatedPort());
            } else {
                assertEquals(1, shared.getMacsOnSegment().size());
                BridgeMacLink link = shared.getBridgeMacLinks().iterator().next();
                if (link.getMacAddress().equals(mac1)) {
                    assertEquals(nodeAId, link.getNode().getId());
                    assertEquals(portA1,link.getBridgePort());
                } else if (link.getMacAddress().equals(mac2)) {
                    assertEquals(nodeAId, link.getNode().getId());
                    assertEquals(portA2,link.getBridgePort());
                } else if (link.getMacAddress().equals(mac3)) {
                    assertEquals(nodeAId, link.getNode().getId());
                    assertEquals(portA3,link.getBridgePort());
                } else if (link.getMacAddress().equals(mac4)) {
                    assertEquals(nodeAId, link.getNode().getId());
                    assertEquals(portA4,link.getBridgePort());
                } else if (link.getMacAddress().equals(mac5)) {
                    assertEquals(nodeAId, link.getNode().getId());
                    assertEquals(portA5,link.getBridgePort());
                } else if (link.getMacAddress().equals(mac6)) {
                    assertEquals(nodeBId, link.getNode().getId());
                    assertEquals(portB6,link.getBridgePort());
                } else if (link.getMacAddress().equals(mac7)) {
                    assertEquals(nodeBId, link.getNode().getId());
                    assertEquals(portB7,link.getBridgePort());
                } else if (link.getMacAddress().equals(mac8)) {
                    assertEquals(nodeBId, link.getNode().getId());
                    assertEquals(portB8,link.getBridgePort());
                } else if (link.getMacAddress().equals(mac9)) {
                    assertEquals(nodeBId, link.getNode().getId());
                    assertEquals(portB9,link.getBridgePort());
                } else {
                    assertEquals(false, true);
                }
            }
        }

    }

