    @Test 
    public void testTwoBridgeOneCalculation() {
        Integer nodeAId = 22101;
        Integer nodeBId = 22102;

        OnmsNode nodeA= new OnmsNode();
        nodeA.setId(nodeAId);
        BridgeElement elementA = new BridgeElement();
        elementA.setNode(nodeA);
        elementA.setBaseBridgeAddress("aaaaaaaaaaaa");
        List<BridgeElement> elemAlist = new ArrayList<BridgeElement>();
        elemAlist.add(elementA);
        List<BridgeMacLink> bftA = new ArrayList<BridgeMacLink>();

        OnmsNode nodeB= new OnmsNode();
        nodeB.setId(nodeBId);
        BridgeElement elementB = new BridgeElement();
        elementB.setNode(nodeB);
        elementB.setBaseBridgeAddress("bbbbbbbbbbbb");
        List<BridgeElement> elemBlist = new ArrayList<BridgeElement>();
        elemBlist.add(elementB);
        List<BridgeMacLink> bftB = new ArrayList<BridgeMacLink>();

        Integer portA1 = 1;
        Integer portA6 = 6;
        Integer portAB = 12;
        Integer portBA = 21;
        Integer portB2 = 2 ;
        Integer portB7 = 7 ;

        
        String macA11 = "000daa000a11"; // port A1 ---port BA 
        String macA12 = "000daa000a12"; // port A1 ---port BA 
        String macA13 = "000daa000a13"; // port A1  
        String macA14 = "000daa000a14"; // port A1          

        String macA61 = "000daa000a61"; // port A6 ---port BA 
        String macA62 = "000daa000a62"; // port A6 ---port BA 
        String macA63 = "000daa000a63"; // port A6 ---port BA  
        String macA64 = "000daa000a64"; // port A6          

        String macAB1  = "000daa000ab1"; // port AB ---port BA 
        String macAB2  = "000daa000ab2"; // port AB ---port BA 
        String macAB3  = "000daa000ab3"; // port AB ---port BA 
        String macAB4  = "000daa000ab4"; // port AB 
        String macAB5  = "000daa000ab5"; // port AB 
        String macAB6  = "000daa000ab6"; // port AB 

        String macBA1  = "000daa000ba1"; //          ---port BA 
        String macBA2  = "000daa000ba2"; //          ---port BA 
        String macBA3  = "000daa000ba3"; //          ---port BA 

        String macB21 = "000daa000b21"; // port AB ---port B2 
        String macB22 = "000daa000b22"; // port AB ---port B2
        String macB23 = "000daa000b23"; //         ---port B2

        String macB71 = "000daa000b71"; //         ---port B7 
        String macB72 = "000daa000b72"; //         ---port B7
        String macB73 = "000daa000b73"; //         ---port B7

        bftA =addBridgeForwardingTableEntry(nodeA,portA1, macA11,bftA);
        bftA =addBridgeForwardingTableEntry(nodeA,portA1, macA12,bftA);
        bftA =addBridgeForwardingTableEntry(nodeA,portA1, macA13,bftA);
        bftA =addBridgeForwardingTableEntry(nodeA,portA1, macA14,bftA);
        
        bftA =addBridgeForwardingTableEntry(nodeA,portA6, macA61,bftA);
        bftA =addBridgeForwardingTableEntry(nodeA,portA6, macA62,bftA);
        bftA =addBridgeForwardingTableEntry(nodeA,portA6, macA63,bftA);
        bftA =addBridgeForwardingTableEntry(nodeA,portA6, macA64,bftA);

        bftA =addBridgeForwardingTableEntry(nodeA,portAB, macAB1,bftA);
        bftA =addBridgeForwardingTableEntry(nodeA,portAB, macAB2,bftA);
        bftA =addBridgeForwardingTableEntry(nodeA,portAB, macAB3,bftA);
        bftA =addBridgeForwardingTableEntry(nodeA,portAB, macAB4,bftA);
        bftA =addBridgeForwardingTableEntry(nodeA,portAB, macAB5,bftA);
        bftA =addBridgeForwardingTableEntry(nodeA,portAB, macAB6,bftA);
        bftA =addBridgeForwardingTableEntry(nodeA,portAB, macB21,bftA);
        bftA =addBridgeForwardingTableEntry(nodeA,portAB, macB22,bftA);


        bftB =addBridgeForwardingTableEntry(nodeB,portBA, macA11,bftB);
        bftB =addBridgeForwardingTableEntry(nodeB,portBA, macA12,bftB);
        bftB =addBridgeForwardingTableEntry(nodeB,portBA, macA61,bftB);
        bftB =addBridgeForwardingTableEntry(nodeB,portBA, macA62,bftB);
        bftB =addBridgeForwardingTableEntry(nodeB,portBA, macA63,bftB);
        bftB =addBridgeForwardingTableEntry(nodeB,portBA, macAB1,bftB);
        bftB =addBridgeForwardingTableEntry(nodeB,portBA, macAB2,bftB);
        bftB =addBridgeForwardingTableEntry(nodeB,portBA, macAB3,bftB);
        bftB =addBridgeForwardingTableEntry(nodeB,portBA, macBA1,bftB);
        bftB =addBridgeForwardingTableEntry(nodeB,portBA, macBA2,bftB);
        bftB =addBridgeForwardingTableEntry(nodeB,portBA, macBA3,bftB);

        bftB =addBridgeForwardingTableEntry(nodeB,portB2, macB21,bftB);
        bftB =addBridgeForwardingTableEntry(nodeB,portB2, macB22,bftB);
        bftB =addBridgeForwardingTableEntry(nodeB,portB2, macB23,bftB);

        bftB =addBridgeForwardingTableEntry(nodeB,portB7, macB71,bftB);
        bftB =addBridgeForwardingTableEntry(nodeB,portB7, macB72,bftB);
        bftB =addBridgeForwardingTableEntry(nodeB,portB7, macB73,bftB);

        BroadcastDomain bridgeTopology = new BroadcastDomain();

        bridgeTopology.loadBFT(nodeAId,bftA,null,elemAlist);
        bridgeTopology.loadBFT(nodeBId,bftB,null,elemBlist);
        assertTrue(bridgeTopology.isTopologyChanged());
        assertTrue(!bridgeTopology.isCalculating());

        bridgeTopology.calculate();
        List<SharedSegment> shsegs = bridgeTopology.getTopology();
        assertEquals(5, shsegs.size());
        for (SharedSegment shared: shsegs) {
            printSharedSegment(shared);
            assertTrue(!shared.noMacsOnSegment());
            Set<Integer> nodeidsOnSegment = shared.getBridgeIdsOnSegment();
            List<BridgeMacLink> links = shared.getBridgeMacLinks();
            Set<String> macs = shared.getMacsOnSegment();
            if (shared.getDesignatedBridge().intValue() == nodeBId.intValue() && shared.getDesignatedPort() == portBA) {
                assertEquals(2, nodeidsOnSegment.size());
                assertEquals(9, macs.size());
                assertEquals(12, links.size());
                assertTrue(nodeidsOnSegment.contains(nodeAId));
                assertTrue(nodeidsOnSegment.contains(nodeBId));
                assertTrue(macs.contains(macAB1));
                assertTrue(macs.contains(macAB2));
                assertTrue(macs.contains(macAB3));
                assertTrue(macs.contains(macAB4));
                assertTrue(macs.contains(macAB5));
                assertTrue(macs.contains(macAB6));
                assertTrue(macs.contains(macBA1));
                assertTrue(macs.contains(macBA2));
                assertTrue(macs.contains(macBA3));
                for (BridgeMacLink link: links) {
                    if (link.getNode().getId() == nodeAId) {
                        assertEquals(portAB, link.getBridgePort());
                    } else  if (link.getNode().getId() == nodeBId) {
                        assertEquals(portBA, link.getBridgePort());
                    } else {
                        assertTrue(false);
                    }
                }
            } else if (shared.getDesignatedBridge().intValue() == nodeBId.intValue() && shared.getDesignatedPort() == portB2) {
                assertEquals(1, nodeidsOnSegment.size());
                assertTrue(nodeidsOnSegment.contains(nodeBId));
                assertEquals(3, macs.size());
                assertEquals(3, links.size());
                assertTrue(macs.contains(macB21));
                assertTrue(macs.contains(macB22));
                assertTrue(macs.contains(macB23));
                for (BridgeMacLink link: links) {
                    assertEquals(nodeBId, link.getNode().getId());
                    assertEquals(portB2, link.getBridgePort());
                }
            } else if (shared.getDesignatedBridge().intValue() == nodeBId.intValue() && shared.getDesignatedPort() == portB7) {
                assertEquals(1, nodeidsOnSegment.size());
                assertTrue(nodeidsOnSegment.contains(nodeBId));
                assertEquals(3, macs.size());
                assertEquals(3, links.size());
                assertTrue(macs.contains(macB71));
                assertTrue(macs.contains(macB72));
                assertTrue(macs.contains(macB73));
                for (BridgeMacLink link: links) {
                    assertEquals(nodeBId, link.getNode().getId());
                    assertEquals(portB7, link.getBridgePort());
                }
            } else if (shared.getDesignatedBridge().intValue() == nodeAId.intValue() && shared.getDesignatedPort() == portA1) {
                assertEquals(1, nodeidsOnSegment.size());
                assertTrue(nodeidsOnSegment.contains(nodeAId));
                assertEquals(4, macs.size());
                assertEquals(4, links.size());
                assertTrue(macs.contains(macA11));
                assertTrue(macs.contains(macA12));
                assertTrue(macs.contains(macA13));
                assertTrue(macs.contains(macA14));
                for (BridgeMacLink link: links) {
                    assertEquals(nodeAId, link.getNode().getId());
                    assertEquals(portA1, link.getBridgePort());
                }
            } else if (shared.getDesignatedBridge().intValue() == nodeAId.intValue() && shared.getDesignatedPort() == portA6) {
                assertEquals(1, nodeidsOnSegment.size());
                assertTrue(nodeidsOnSegment.contains(nodeAId));
                assertEquals(4, macs.size());
                assertEquals(4, links.size());
                assertTrue(macs.contains(macA61));
                assertTrue(macs.contains(macA62));
                assertTrue(macs.contains(macA63));
                assertTrue(macs.contains(macA64));
                for (BridgeMacLink link: links) {
                    assertEquals(nodeAId, link.getNode().getId());
                    assertEquals(portA6, link.getBridgePort());
                }
            } else {
                assertTrue(false);
            }
        }
    }

