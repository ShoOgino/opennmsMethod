    @Test
    public void testOneBridgeMoreMacOnePort() throws Exception {

        Integer nodeA  = 20;

        Integer portA1 = 1;

        String mac1 = "000daaaa0001"; // port A1 
        String mac2 = "000daaaa0002"; // port A1
        String mac3 = "000daaaa0003"; // port A1
        String mac4 = "000daaaa0004"; // port A1

        Map<Integer,Set<String>> bftA = new HashMap<Integer, Set<String>>();

        bftA = addBridgeForwardingTableEntry(portA1, mac1,bftA);
        bftA =addBridgeForwardingTableEntry(portA1, mac2,bftA);
        bftA =addBridgeForwardingTableEntry(portA1, mac3,bftA);
        bftA =addBridgeForwardingTableEntry(portA1, mac4,bftA);

        BridgeTopologyOld bridgeTopology = new BridgeTopologyOld();

        bridgeTopology.parseBFT(nodeA,bftA);

        List<BridgeTopologyLink> links = bridgeTopology.getTopology();
        printBridgeTopologyLinks(links);
        assertEquals(1, links.size());
        for (BridgeTopologyLink link: links) {
            BridgeTopologyPort port = link.getBridgeTopologyPort();
            assertEquals(port.getMacs(),link.getMacs());
            assertEquals(null,link.getDesignateBridgePort());
            if (link.getBridgeTopologyPort().getBridgePort() == portA1) {
                final Set<String> macs = link.getMacs();
                assertEquals(4, macs.size());
                assertTrue(macs.contains(mac1));
                assertTrue(macs.contains(mac2));
                assertTrue(macs.contains(mac3));
                assertTrue(macs.contains(mac4));
            } else {
                assertEquals(-1, 1);
            }
        }

    }

