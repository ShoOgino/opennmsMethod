	@Test
    public void testOneBridgeMoreMacOnePort() throws Exception {

        Integer nodeA  = 20;
        
        Integer portA1 = 1;

        String mac1 = "000daaaa0001"; // port A1 
        String mac2 = "000daaaa0002"; // port A1
        String mac3 = "000daaaa0003"; // port A1
        String mac4 = "000daaaa0004"; // port A1

        LinkableSnmpNode snmpnodeA = new LinkableSnmpNode(nodeA, null, null, null);
        LinkableNode linkablenodeA = new LinkableNode(snmpnodeA, null);

        linkablenodeA.addBridgeForwardingTableEntry(portA1, mac1);
        linkablenodeA.addBridgeForwardingTableEntry(portA1, mac2);
        linkablenodeA.addBridgeForwardingTableEntry(portA1, mac3);
        linkablenodeA.addBridgeForwardingTableEntry(portA1, mac4);
        
        BridgeTopology bridgeTopology = new BridgeTopology();
        
        bridgeTopology.addNodeToTopology(linkablenodeA);

        List<BridgeTopologyLink> links = bridgeTopology.getTopology();
        printBridgeTopologyLinks(links);
        assertEquals(1, links.size());
        for (BridgeTopologyLink link: links) {
        	BridgeTopologyPort port = link.getBridgeTopologyPort();
    		assertEquals(port.getMacs(),link.getMacs());
        	assertEquals(null,link.getDesignatebridgePort());
        	if (link.getBridgeTopologyPort().getBridgePort() == portA1) {
        		assertEquals(4, link.getMacs().size());
        		Iterator<String> macs = link.getMacs().iterator();
        		assertEquals(mac4, macs.next());
        		assertEquals(mac3, macs.next());
        		assertEquals(mac2, macs.next());
        		assertEquals(mac1, macs.next());
        	} else {
        		assertEquals(-1, 1);
        	}
        }

	}

