    	public void load(InputStream in) {
    		
            Scanner scanner = new Scanner(in);
            while(scanner.hasNext()) {
            	String lineType = scanner.next();
            	if ("#".equals(lineType)) {
            		scanner.nextLine();
            	}
            	else if ("node".equals(lineType)) {
            		/* expect line to be
            		 * node <nodeLabel> <nodeid> (<parentnodeid>?) 
            		 * 
            		 * Note: parent nodes need to be defined before their children
            		 * If the parentnodeid is missing then we assume that it has no parent
            		 */
            		String nodeLabel = scanner.next();
            		Integer nodeId = scanner.nextInt();
            		assert m_nodes.get(nodeId) == null : "Already have a node with id "+nodeId;

            		Integer parentId = null;
            		if (scanner.hasNextInt()) {
            			parentId = scanner.nextInt();
            		}
            		
            		assert (parentId == null || m_nodes.containsKey(parentId)) : "Reference to parentId "+parentId+" that is not yet defined";
            		
            		Node parent = (parentId == null ? null : m_nodes.get(parentId));
            		
            		Node node = new Node(nodeId, nodeLabel, parent);
            		m_nodes.put(nodeId, node);
            		
            	} else if ("event".equals(lineType)) {
            		/*
            		 * expect line to be
            		 * event delay uei nodeid 
            		 */
            		int delay = scanner.nextInt();
            		String uei = scanner.next();
            		Integer nodeId = scanner.nextInt();
            		
            		assert m_nodes.containsKey(nodeId) : "Invalid nodeId "+nodeId;
            		
            		EventBean e = new EventBean(uei, m_nodes.get(nodeId));
            		
            		SimItem item = new SimItem(delay, e);
            		
            		m_eventSequence.add(item);
            		
            	}
            	
            }
    	}

