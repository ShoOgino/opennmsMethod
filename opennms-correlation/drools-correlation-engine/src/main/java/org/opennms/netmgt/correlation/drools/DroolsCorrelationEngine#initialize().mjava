    /**
     * <p>initialize</p>
     *
     * @throws java.lang.Exception if any.
     */
    public void initialize() throws Exception {
        KieServices ks = KieServices.Factory.get();
        KieFileSystem kFileSystem = ks.newKieFileSystem();
        loadRules(kFileSystem);

        KieBuilder kbuilder = ks.newKieBuilder( kFileSystem );
        kbuilder.buildAll();
        if (kbuilder.getResults().hasMessages(org.kie.api.builder.Message.Level.ERROR)) {
            LOG.warn("Unable to initialize Drools engine: {}", kbuilder.getResults().getMessages(Level.ERROR));
            throw new IllegalStateException("Unable to initialize Drools engine: " + kbuilder.getResults().getMessages(Level.ERROR));
        }

        KieContainer kContainer = ks.newKieContainer(ks.getRepository().getDefaultReleaseId());

        AssertBehaviour behaviour = AssertBehaviour.determineAssertBehaviour(m_assertBehaviour);
        RuleBaseConfiguration ruleBaseConfig = new RuleBaseConfiguration();
        ruleBaseConfig.setAssertBehaviour(behaviour);

        EventProcessingOption eventProcessingOption = EventProcessingOption.CLOUD;
        if (m_eventProcessingMode != null && m_eventProcessingMode.toLowerCase().equals("stream")) {
            eventProcessingOption = EventProcessingOption.STREAM;
            m_isStreaming = true;
        }
        ruleBaseConfig.setEventProcessingMode(eventProcessingOption);

        m_kieBase = kContainer.newKieBase(ruleBaseConfig);

        final KieMarshallers kMarshallers = KieServices.Factory.get().getMarshallers();
        final ObjectMarshallingStrategy oms = kMarshallers.newSerializeMarshallingStrategy();
        m_marshaller = kMarshallers.newMarshaller( m_kieBase, new ObjectMarshallingStrategy[]{ oms } );

        m_kieSession = m_kieBase.newKieSession();
        m_kieSession.setGlobal("engine", this);

        for (final Map.Entry<String, Object> entry : m_globals.entrySet()) {
            m_kieSession.setGlobal(entry.getKey(), entry.getValue());
        }

        if (m_persistState != null && m_persistState) {
            unmarshallStateFromDisk();
        }

        if (factObjects != null) {
            factObjects.forEach(this::unmarshalAndInsert);
            factObjects.clear();
        }

        if (m_isStreaming) {
            m_shuttingDownStreamThread.set(false);
            m_streamThread = new Thread(() -> {
                Logging.putPrefix(getClass().getSimpleName() + '-' + getName());
                try {
                    m_kieSession.fireUntilHalt();
                } catch (Exception e) {
                    if (m_shuttingDownStreamThread.get()) {
                        // We're shutting down, don't trigger a reload!
                        return;
                    }
                    LOG.error("Exception while running rules, reloading engine ", e);
                    doReload(e);
                }
            }, "FireTask [" + m_name + "]");
            m_streamThread.start();
        }

    }

