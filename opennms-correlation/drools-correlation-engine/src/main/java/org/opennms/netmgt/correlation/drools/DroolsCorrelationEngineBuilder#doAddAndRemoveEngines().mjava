    // This handles only the addition of new engines and the removal of existing engines.
    // For updating existing engines, use the appropriate value for the daemonName
    private void doAddAndRemoveEngines() {
        LOG.info("Analyzing directory {} to add/remove drools engines...", m_configDirectory);
        EventBuilder ebldr = null;
        try {
            final PluginConfiguration[] newPlugins = locatePluginConfigurations();
            final List<RuleSet> newEngines = Arrays.stream(newPlugins).peek(p -> p.readConfig()).flatMap(pc -> pc.getRuleSets().stream()).collect(Collectors.toList());
            final List<RuleSet> currentEngines = Arrays.stream(m_pluginConfigurations).flatMap(pc -> pc.getRuleSets().stream()).collect(Collectors.toList());
            LOG.debug("Current engines: {}", currentEngines);
            LOG.debug("New engines: {}", newEngines);
            // Find old engines to remove
            currentEngines.stream().filter(en -> !newEngines.contains(en)).forEach(en -> {
                LOG.warn("Deleting engine {}", en);
                m_correlator.removeCorrelationEngine(en.getName());
            });
            // Find new engines to add
            newEngines.stream().filter(en -> !currentEngines.contains(en)).forEach(en -> {
                LOG.warn("Adding engine {}", en);
                addEngine(newPlugins, en);
            });
            m_pluginConfigurations = newPlugins;
            ebldr = new EventBuilder(EventConstants.RELOAD_DAEMON_CONFIG_SUCCESSFUL_UEI, getName());
            ebldr.addParam(EventConstants.PARM_DAEMON_NAME, getName());
        } catch (Exception ex) {
            LOG.error("Cannot process reloadDaemonConfig", ex);
            ebldr = new EventBuilder(EventConstants.RELOAD_DAEMON_CONFIG_FAILED_UEI, getName());
            ebldr.addParam(EventConstants.PARM_DAEMON_NAME, getName());
            ebldr.addParam(EventConstants.PARM_REASON, ex.getMessage());
        } finally {
            if (ebldr != null)
                try {
                    m_eventIpcManager.send(ebldr.getEvent());
                } catch (EventProxyException epx) {
                    LOG.error("Can't send reloadDaemonConfig status event", epx);
                }
        }
    }

