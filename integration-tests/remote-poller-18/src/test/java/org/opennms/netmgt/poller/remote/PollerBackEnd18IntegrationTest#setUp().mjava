	@Before
	public void setUp() throws Exception {
		MockLogAppender.setupLogging();

		// Register the MockEventIpcManager as an implementation of the event classes that
		// the remotePollerBackEnd context requires.
		m_registry.register(m_eventIpcManager, new Class<?>[] { EventProxy.class, EventSubscriptionService.class });

		// Create a new JUnitHttpServer running on port {@link #REMOTING_WEBAPP_PORT}
		server = new JUnitServer(new JUnitHttpServer() {

			@Override
			public Class<? extends Annotation> annotationType() { return JUnitHttpServer.class; }

			@Override
			public Webapp[] webapps() {
				return new Webapp[] {
						new Webapp() {

							@Override
							public Class<? extends Annotation> annotationType() { return Webapp.class; }

							@Override
							public String context() { return "/"; }

							@Override
							public String path() {
								String path = System.getProperty("httpRemotingWebAppPath");
								//String path = System.getProperty("org.opennms.assemblies:org.opennms.assemblies.http-remoting:war");
								Assert.notNull(path);
								return path;
							}
						}
				};
			}

			@Override
			public String[] vhosts() { return new String[0]; }

			@Override
			public String resource() { return ""; }

			@Override
			public int port() { return REMOTING_WEBAPP_PORT; }

			@Override
			public String keystorePassword() { return null; }

			@Override
			public String keystore() { return null; }

			@Override
			public String keyPassword() { return null; }

			@Override
			public boolean https() { return false; }

			@Override
			public String basicAuthFile() { return null; }

			@Override
			public boolean basicAuth() { return false; }
		});

		// Start the HTTP server
		server.start();
	}

