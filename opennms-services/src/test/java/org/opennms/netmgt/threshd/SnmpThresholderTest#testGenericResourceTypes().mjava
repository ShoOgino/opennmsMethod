    public void testGenericResourceTypes() throws Exception {
        System.err.println("--------------------------------------------------------");
        // Set storeByGroup, because JRBs will be created with this feature
        System.setProperty("org.opennms.rrd.storeByGroup", "true");

        // Get ThresholdGroup and validate data
        ThresholdGroup group = m_thresholdsDao.get("generic-snmp");
        assertEquals(1, group.getGenericResourceTypeMap().size());
        assertEquals(2, group.getGenericResourceTypeMap().get("frCircuitIfIndex").getThresholdMap().size());

        // Common Variables
        File path = m_fileAnticipator.getTempDir();
        File nodeDir = m_fileAnticipator.tempDir(path, "1");
        File rtDir = m_fileAnticipator.tempDir(nodeDir, "frCircuitIfIndex");
        Properties strings = new Properties();
        long start = System.currentTimeMillis();
        List<String> sources = new ArrayList<String>();
        sources.add("frSentFrames");
        sources.add("frSentOctets");
        sources.add("frReceivedFrames");
        sources.add("frReceivedOctets");

        // Create JRB File for Resource 1
        File r1Dir = m_fileAnticipator.tempDir(rtDir, "Se0.100");
        File rrd1 = m_fileAnticipator.tempFile(r1Dir, "rfc1315-frame-relay.jrb");
        createDsProperties(r1Dir, sources, "rfc1315-frame-relay");
                
        // Creating strings.properties for Resource 1
        strings.setProperty("frName", "caracas");
        strings.setProperty("frDlci", "100");
        strings.setProperty("frIntf", "0");
        File sFile1 = m_fileAnticipator.tempFile(r1Dir, "strings.properties");
        strings.store(new FileOutputStream(sFile1), null);
        
        // Creating JRB content for Resource 1
        List<String> data1 = new ArrayList<String>();
        data1.add("100:200:300:350"); // TRIGGERED:TRIGGERED:NONE:NONE
        createAndUpdateRrd(rrd1, start, sources, data1);
                
        // Create Temporal Files for Resource 2
        File r2Dir = m_fileAnticipator.tempDir(rtDir, "Se1.200");
        File rrd2 = m_fileAnticipator.tempFile(r2Dir, "rfc1315-frame-relay.jrb");
        createDsProperties(r2Dir, sources, "rfc1315-frame-relay");

        // Creating strings.properties for Resource 2
        strings.setProperty("frDlci", "200");
        strings.setProperty("frIntf", "1");
        File sFile2 = m_fileAnticipator.tempFile(r2Dir, "strings.properties");
        strings.store(new FileOutputStream(sFile2), null);
        
        // Creating JRB content for Resource 2        
        List<String> data2 = new ArrayList<String>();
        data2.add("50:150:400:300"); // RE_ARMED:NO_CHANGE:NONE:NONE
        createAndUpdateRrd(rrd2, start, sources, data2);

        // Run Thresholds Check and Validate. It must generate 3 events
        m_thresholdInterface.getThresholdConfiguration().setThresholdGroup(group);
        Events events = new Events();
        m_snmpThresholder.checkResourceDir(rtDir, m_thresholdInterface, new Date(start), events);
        //assertEquals(3, events.getEventCount()); // with no Filters. See test-thresholds.xml
        assertEquals(2, events.getEventCount()); // with Filters Enabled. See test-thresholds.xml
        // Validating ds-value for bug 2129
        for (Event e : events.getEvent()) {
        	assertEquals("label", e.getParms().getParm(5).getParmName());
        	assertEquals("caracas", e.getParms().getParm(5).getValue().getContent());
        }
    }

