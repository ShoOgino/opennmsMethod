    public void testGetEventForStateTriggered() {
        Threshold threshold = new Threshold();
        threshold.setType("relativeChange");
        threshold.setDsName("ds-name");
        threshold.setDsType("ds-type");
        threshold.setValue(1.1);
        threshold.setRearm(0.5);
        threshold.setTrigger(3);
        ThresholdEvaluatorStateRelativeChange evaluator = new ThresholdEvaluatorStateRelativeChange(threshold);

        assertEquals("should not trigger", Status.NO_CHANGE, evaluator.evaluate(8.0));
        assertEquals("should trigger", Status.TRIGGERED, evaluator.evaluate(10.0));
        Event event = evaluator.getEventForState(Status.TRIGGERED, new Date(), 10.0);
        assertNotNull("should have created an event", event);
        assertEquals("UEIs should be the same", EventConstants.RELATIVE_CHANGE_THRESHOLD_EVENT_UEI, event.getUei());
        
        assertNotNull("event should have parms", event.getParms());
        
        boolean hasValueParm = false;
        boolean hasPreviousValueParm = false;
        boolean hasMultiplierParm = false;
        for (Parm parm : getParmCollection(event)) {
            if ("value".equals(parm.getParmName())) {
                assertEquals("value", "10.0", parm.getValue().getContent());
                hasValueParm = true;
            }
            if ("previousValue".equals(parm.getParmName())) {
                assertEquals("previousValue", "8.0", parm.getValue().getContent());
                hasPreviousValueParm = true;
            }
            if ("multiplier".equals(parm.getParmName())) {
                assertEquals("multiplier", "1.1", parm.getValue().getContent());
                hasMultiplierParm = true;
            }
        }
        
        assertTrue("did not find 'value' parm in event", hasValueParm);
        assertTrue("did not find 'previousValue' parm in event", hasPreviousValueParm);
        assertTrue("did not find 'multiplier' parm in event", hasMultiplierParm);
    }

