    @Before
    public void setUp() throws Exception {
        // Resets Counters Cache Data
        System.setProperty("org.opennms.thresholds.filtersReloadEnabled", "false");
        CollectionResourceWrapper.s_cache.clear();

        // This is set at ERROR because JEXL prints some harmless, expected warning messages
        m_defaultErrorLevelToCheck = Level.ERROR;
        System.setProperty("mock.logLevel", "DEBUG");
        MockLogAppender.setupLogging();

        m_filterDao = EasyMock.createMock(FilterDao.class);
        EasyMock.expect(m_filterDao.getIPList((String)EasyMock.anyObject())).andReturn(Collections.singletonList("127.0.0.1")).anyTimes();
        FilterDaoFactory.setInstance(m_filterDao);
        EasyMock.replay(m_filterDao);

        m_anticipator = new EventAnticipator();
        MockEventIpcManager eventMgr = new MockEventIpcManager();
        eventMgr.setEventAnticipator(m_anticipator);
        eventMgr.setSynchronous(true);
        EventIpcManager eventdIpcMgr = (EventIpcManager)eventMgr;
        EventIpcManagerFactory.setIpcManager(eventdIpcMgr);
        
        initFactories("/threshd-configuration.xml","/test-thresholds.xml");
        m_anticipatedEvents = new ArrayList<Event>();
        
        m_parmComparator = new Comparator<Parm>() {

            public int compare(Parm o1, Parm o2) {
                if (o1 == null && o2 == null) return 0;
                if (o1 == null && o2 != null) return 1;
                if (o1 != null && o2 == null) return -1;

                int retVal = o1.getParmName().compareTo(o2.getParmName());
                if (retVal == 0) {
                    String c1 = o1.getValue().getContent();
                    String c2 = o2.getValue().getContent();
                    if (c1 == null && c2 == null) return 0;
                    if (c1 == null && c2 != null) return 1;
                    if (c1 != null && c2 == null) return -1;
                    
                    retVal = c1.compareTo(c2);
                }
                return retVal;
            }
        };

        m_eventComparator = new Comparator<Event>() {

            private int compareStrings(String s1, String s2) {
                if (s1 == null && s2 == null) return 0;
                if (s1 == null && s2 != null) return 1;
                if (s1 != null && s2 == null) return -1;
                return (s1.compareTo(s2));
            }

            public int compare(Event e1, Event e2) {
                if (e1 == null && e2 == null) return 0;
                if (e1 == null && e2 != null) return 1;
                if (e1 != null && e2 == null) return -1;

                int retVal = compareStrings(e1.getUei(), e2.getUei());
                if (retVal == 0) {
                    retVal = compareStrings(e1.getInterface(), e2.getInterface());
                }
                if (retVal == 0) {
                    retVal = compareStrings(e1.getService(), e2.getService());
                }
                if (retVal == 0) {
                    List<Parm> anticipatedParms = e1.getParms().getParmCollection();
                    List<Parm> receivedParms = e2.getParms().getParmCollection();
                    Collections.sort(anticipatedParms, m_parmComparator);
                    Collections.sort(receivedParms, m_parmComparator);
                    if (anticipatedParms.size() != receivedParms.size()) {
                        retVal = Integer.valueOf(anticipatedParms.size()).compareTo(Integer.valueOf(receivedParms.size()));
                    }
                    if (retVal == 0) {
                        for (int i = 0; i < anticipatedParms.size(); i++) {
                            Parm anticipated = anticipatedParms.get(i);
                            Parm received = receivedParms.get(i);
                            
                            retVal = compareStrings(anticipated.getParmName(), received.getParmName());
                            if (retVal == 0) {
                                retVal = compareStrings(anticipated.getValue().getContent(), received.getValue().getContent());
                            }
                            if (retVal != 0) {
                                break;
                            }
                        }
                    }
                }
                
                return retVal;
            }
        };
    }

