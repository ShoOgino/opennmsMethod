    public void testVisitResourceCounterData() {
        ThresholdingVisitor visitor = createVisitor();

        CollectionAgent agent = createCollectionAgent();
        NodeResourceType resourceType = createNodeResourceType(agent);
        MibObject mibObject = createMibObject("counter", "freeMem");
        SnmpAttributeType attributeType = new NumericAttributeType(resourceType, "default", mibObject, new AttributeGroupType("mibGroup", "ignore"));

        addAnticipatedEvent("uei.opennms.org/threshold/highThresholdExceeded");
        addAnticipatedEvent("uei.opennms.org/threshold/highThresholdRearmed");

        // Collect Step 1 : Initialize counter cache
        SnmpCollectionResource resource = new NodeInfo(resourceType, agent);
        resource.setAttributeValue(attributeType, SnmpUtils.getValueFactory().getCounter32(15000));
        resource.visit(visitor);

        // Collect Step 2 : Trigger
        resource = new NodeInfo(resourceType, agent);
        resource.setAttributeValue(attributeType, SnmpUtils.getValueFactory().getCounter32(30000));
        resource.visit(visitor);

        // Collect Step 3 : Rearm
        resource = new NodeInfo(resourceType, agent);
        resource.setAttributeValue(attributeType, SnmpUtils.getValueFactory().getCounter32(4000));
        resource.visit(visitor);

        // Collect Step 3 : Reset counter (bad value)
        resource = new NodeInfo(resourceType, agent);
        resource.setAttributeValue(attributeType, SnmpUtils.getValueFactory().getCounter32(10));
        resource.visit(visitor);

        // Collect Step 3 : Normal
        resource = new NodeInfo(resourceType, agent);
        resource.setAttributeValue(attributeType, SnmpUtils.getValueFactory().getCounter32(1010));
        resource.visit(visitor);

        EasyMock.verify(agent);
        m_anticipator.verifyAnticipated(0, 0, 0, 0, 0);
    }

