    @Test
    public void testGetCounterValueWithWrap() throws Exception {
        // Create Resource
        CollectionAgent agent = createCollectionAgent();
        SnmpCollectionResource resource = createNodeResource(agent);

		// We manipulate the Date objects passed to the
		// CollectionResourceWrapper to simulate various collection intervals
		Date baseDate = new Date();

        // Add Counter Attribute
        String attributeName = "myCounter";
        String attributeId = "node[1].resourceType[node].instance[null].metric[" + attributeName + "]";
        Map<String, CollectionAttribute> attributes = new HashMap<String, CollectionAttribute>();
        BigInteger initialValue = new BigDecimal(Math.pow(2, 32) - 20000).toBigInteger();
        SnmpAttribute attribute = addAttributeToCollectionResource(resource, attributeName, "counter", "0", initialValue);
        attributes.put(attribute.getName(), attribute);
        
        // Get counter value - first time
        CollectionResourceWrapper wrapper = createWrapper(resource, attributes, baseDate);
        Assert.assertFalse(CollectionResourceWrapper.s_cache.containsKey(attributeId));
        Assert.assertEquals(Double.valueOf(Double.NaN), wrapper.getAttributeValue(attributeName)); // Last value is null
        Assert.assertEquals(Double.valueOf(Double.NaN), wrapper.getAttributeValue(attributeName)); // Last value is null
        Assert.assertEquals(Double.valueOf(initialValue.doubleValue()), CollectionResourceWrapper.s_cache.get(attributeId).value);

        // Increase counter
        attribute = addAttributeToCollectionResource(resource, attributeName, "counter", "0", new BigInteger("40000"));
        attributes.put(attribute.getName(), attribute);
        wrapper = createWrapper(resource, attributes, new Date(baseDate.getTime() + 300000));

        // Get counter value - second time (wrap)
        // last = MAX - 20000, new = 40000; then last - new = 60000, rate: 60000/300 = 200
        Assert.assertEquals(Double.valueOf(initialValue.doubleValue()), CollectionResourceWrapper.s_cache.get(attributeId).value);
        Assert.assertEquals(Double.valueOf(200.0), wrapper.getAttributeValue(attributeName));
        Assert.assertEquals(Double.valueOf(40000.0), CollectionResourceWrapper.s_cache.get(attributeId).value);
        Assert.assertEquals(Double.valueOf(200.0), wrapper.getAttributeValue(attributeName));
        Assert.assertEquals(Double.valueOf(40000.0), CollectionResourceWrapper.s_cache.get(attributeId).value);
        Assert.assertEquals(Double.valueOf(200.0), wrapper.getAttributeValue(attributeName));
        Assert.assertEquals(Double.valueOf(40000.0), CollectionResourceWrapper.s_cache.get(attributeId).value);

        EasyMock.verify(agent);
    }

