    @SuppressWarnings("deprecation")
    @Test
    public void testInterfaces() throws Exception {
        System.err.println("--------------------------------------------------------");
        setUpRrdStrategy();
        // Set storeByGroup, because JRBs will be created with this feature
        System.setProperty("org.opennms.rrd.storeByGroup", "true");

        // Get ThresholdGroup and validate data
        ThresholdGroup group = m_thresholdsDao.get("generic-snmp");

        // Common Variables
        File path = m_fileAnticipator.getTempDir();
        File nodeDir = m_fileAnticipator.tempDir(path, "1");
        long start = System.currentTimeMillis();        
        List<String> sources = new ArrayList<String>();
        sources.add("ifInOctets");
        sources.add("ifOutOctets");
        sources.add("ifInPackets");
        sources.add("ifOutPackets");

        // Create JRB File for Resource 1
        File intf1Dir = m_fileAnticipator.tempDir(nodeDir, "eth0");
        File rrd1 = m_fileAnticipator.tempFile(intf1Dir, "mib2-stats.jrb");
        createDsProperties(intf1Dir, sources, "mib2-stats");
        List<String> data1 = new ArrayList<String>();
        data1.add("100:200:300:350"); // TRIGGERED:TRIGGERED:NONE:NONE
        createAndUpdateRrd(rrd1, start, sources, data1);
                
        // Create Temporal Files for Resource 2
        File intf2Dir = m_fileAnticipator.tempDir(nodeDir, "wlan0");
        File rrd2 = m_fileAnticipator.tempFile(intf2Dir, "mib2-stats.jrb");
        createDsProperties(intf2Dir, sources, "mib2-stats");
        List<String> data2 = new ArrayList<String>();
        data2.add("50:150:400:300"); // NO_CHANGE:TRIGGERED:NONE:NONE
        createAndUpdateRrd(rrd2, start, sources, data2);

        // Run Thresholds Check and Validate. It must generate 3 events
        m_thresholdInterface.getThresholdConfiguration().setThresholdGroup(group);
        Events events = new Events();
        
        // Creating Mock ifInfo Data for eth0
        Map<String,String> ifInfoEth0 = new HashMap<String,String>();
        ifInfoEth0.put("snmpifindex", "1");
        ifInfoEth0.put("snmpifdesc", "eth0");
        ifInfoEth0.put("snmpifalias", "ethernet interface");
        EasyMock.expect(m_ifInfoGetter.getIfInfoForNodeAndLabel(1, "eth0")).andReturn(ifInfoEth0).times(2);

        // Creating Mock ifInfo Data for wlan0
        Map<String,String> ifInfoWlan0 = new HashMap<String,String>();
        ifInfoWlan0.put("snmpifindex", "2");
        ifInfoWlan0.put("snmpifdesc", "wlan0");
        ifInfoWlan0.put("snmpifalias", "wireless interface");
        EasyMock.expect(m_ifInfoGetter.getIfInfoForNodeAndLabel(1, "wlan0")).andReturn(ifInfoWlan0).times(2);

        m_mocks.replayAll();
        m_snmpThresholder.checkIfDir(intf1Dir, m_thresholdInterface, new Date(start), events);
        m_snmpThresholder.checkIfDir(intf2Dir, m_thresholdInterface, new Date(start), events);
        m_mocks.verifyAll();
        
        //assertEquals(3, events.getEventCount()); // with no Filters. See test-thresholds.xml
        assertEquals(2, events.getEventCount()); // with Filters Enabled. See test-thresholds.xml
    }

