    /*
     * Testing custom ThresholdingSet implementation for in-line Latency thresholds processing for Pollerd.
     */
    @Test    
    public void testLatencyThresholdingSet() throws Exception {
        setupSnmpInterfaceDatabase("127.0.0.1", "lo0");

        LatencyThresholdingSet thresholdingSet = new LatencyThresholdingSet(1, "127.0.0.1", "HTTP", getRepository());
        assertTrue(thresholdingSet.hasThresholds()); // Global Test
        assertTrue(thresholdingSet.hasThresholds("http")); // Datasource Test
        Map<String, Double> attributes = new HashMap<String, Double>();        

        attributes.put("http", 90.0);
        List<Event> events = thresholdingSet.applyThresholds("http", attributes);
        assertTrue(events.size() == 0);

        attributes.put("http", 200.0);
        if (thresholdingSet.hasThresholds("http")) {
            events = thresholdingSet.applyThresholds("http", attributes);
            assertTrue(events.size() == 0); // Trigger == 1
        }
        if (thresholdingSet.hasThresholds("http")) {
            events = thresholdingSet.applyThresholds("http", attributes);
            assertTrue(events.size() == 0); // Trigger == 2
        }
        if (thresholdingSet.hasThresholds("http")) {
            events = thresholdingSet.applyThresholds("http", attributes);
            assertTrue(events.size() == 1); // Trigger == 3
        }

        addEvent("uei.opennms.org/threshold/highThresholdExceeded", "HTTP", 3, 100, 50, 200, "Unknown", "127.0.0.1[http]", "http", "127.0.0.1", null);
        ThresholdingEventProxy proxy = new ThresholdingEventProxy();
        proxy.add(events);
        proxy.sendAllEvents();
        verifyEvents(0);
    }

