    @Test
    public void testGetCounterValue() throws Exception {
        // Create Resource
        CollectionAgent agent = createCollectionAgent();
        SnmpCollectionResource resource = createNodeResource(agent);

        // Add Counter Attribute
        String attributeName = "myCounter";
        String attributeId = "node[1].resourceType[node].instance[null].metric[" + attributeName + "]";
        Map<String, CollectionAttribute> attributes = new HashMap<String, CollectionAttribute>();
        SnmpAttribute attribute = addAttributeToCollectionResource(resource, attributeName, "counter", "0", 1000);
        attributes.put(attribute.getName(), attribute);
        
        //We manipulate the Date objects passed to the CollectionResourceWrapper to simulate various collection intervals
        Date baseDate = new Date();
        
        // Get counter value - first time
        CollectionResourceWrapper wrapper = createWrapper(resource, attributes, baseDate);

        Assert.assertFalse(CollectionResourceWrapper.s_cache.containsKey(attributeId));
        Assert.assertEquals(Double.valueOf(Double.NaN), wrapper.getAttributeValue(attributeName)); // Last value is null
        Assert.assertEquals(Double.valueOf(Double.NaN), wrapper.getAttributeValue(attributeName)); // Last value is null
        Assert.assertEquals(Double.valueOf(1000.0), CollectionResourceWrapper.s_cache.get(attributeId).value);

        // Increase counter
        attribute = addAttributeToCollectionResource(resource, attributeName, "counter", "0", 2500);
        attributes.put(attribute.getName(), attribute);
        //Next wrapper is told the data was collected 5 minutes in the future (300 seconds)
        wrapper = createWrapper(resource, attributes, new Date(baseDate.getTime()+300000));
       
        // Get counter value - second time
        // Last value is 1000.0, so 2500-1000/300 = 1500/300 =  5.
        Assert.assertEquals(Double.valueOf(1000.0), CollectionResourceWrapper.s_cache.get(attributeId).value);
        Assert.assertEquals(Double.valueOf(5.0), wrapper.getAttributeValue(attributeName));
        //Validate that the cached counter value has been updated
        Assert.assertEquals(Double.valueOf(2500.0), CollectionResourceWrapper.s_cache.get(attributeId).value);
        //but that calling getAttributeValue doesn't re-calculate the rate inappropriately
        Assert.assertEquals(Double.valueOf(5.0), wrapper.getAttributeValue(attributeName));
        Assert.assertEquals(Double.valueOf(2500.0), CollectionResourceWrapper.s_cache.get(attributeId).value);
        Assert.assertEquals(Double.valueOf(5.0), wrapper.getAttributeValue(attributeName));
        Assert.assertEquals(Double.valueOf(2500.0), CollectionResourceWrapper.s_cache.get(attributeId).value);

        // Increase counter
        attribute = addAttributeToCollectionResource(resource, attributeName, "counter", "0", 5500);
        attributes.put(attribute.getName(), attribute);
        //Next wrapper is told the data was collected 10 minutes in the future (600 seconds), or after the first collection
        wrapper = createWrapper(resource, attributes, new Date(baseDate.getTime()+600000));

        // Get counter value - third time
        // Last value is 2500.0, so 5500-2500/300 = 3000/300 =  10;
        Assert.assertEquals(Double.valueOf(2500.0), CollectionResourceWrapper.s_cache.get(attributeId).value);
        Assert.assertEquals(Double.valueOf(10.0), wrapper.getAttributeValue(attributeName));
        Assert.assertEquals(Double.valueOf(5500.0), CollectionResourceWrapper.s_cache.get(attributeId).value);
        Assert.assertEquals(Double.valueOf(10.0), wrapper.getAttributeValue(attributeName));
        Assert.assertEquals(Double.valueOf(5500.0), CollectionResourceWrapper.s_cache.get(attributeId).value);
        Assert.assertEquals(Double.valueOf(10.0), wrapper.getAttributeValue(attributeName));
        Assert.assertEquals(Double.valueOf(5500.0), CollectionResourceWrapper.s_cache.get(attributeId).value);
    }

