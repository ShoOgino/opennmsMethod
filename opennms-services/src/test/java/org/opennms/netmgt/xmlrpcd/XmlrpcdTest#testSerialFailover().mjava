    public void testSerialFailover() throws Exception {
        XmlrpcdConfigFactory.setInstance(new XmlrpcdConfigFactory(m_configTwo));
        
        Date date = new Date();
        anticipateNotifyReceivedEvent(m_anticipator1);
        m_anticipator2 = new XmlrpcAnticipator(m_port2);
        anticipateNotifyReceivedEvent(m_anticipator2);
        m_xmlrpcd.init();
        m_xmlrpcd.start();

        anticipateRouterServiceCall(m_anticipator1, "sendServiceDownEvent", date);
     
        Event nodeOneEvent = new Event();
        nodeOneEvent.setUei("uei.opennms.org/nodes/nodeLostService");
        nodeOneEvent.setTime(EventConstants.formatToString(date));
        nodeOneEvent.setNodeid(1);
        nodeOneEvent.setSource("the one true event source");
        nodeOneEvent.setInterface("192.168.1.1");
        nodeOneEvent.setService("ICMP");
        getEventIpcManager().sendNow(nodeOneEvent);

        Thread.sleep(1000);
        
        m_anticipator1.verifyAnticipated();
        m_anticipator1.shutdown();
        
        anticipateServerServiceCall(m_anticipator2, "sendServiceDownEvent", date);

        Event nodeTwoEvent = new Event();
        nodeTwoEvent.setUei("uei.opennms.org/nodes/nodeLostService");
        nodeTwoEvent.setTime(EventConstants.formatToString(date));
        nodeTwoEvent.setNodeid(2);
        nodeTwoEvent.setSource("the one true event source");
        nodeTwoEvent.setInterface("192.168.1.2");
        nodeTwoEvent.setService("SNMP");
        getEventIpcManager().sendNow(nodeTwoEvent);
        
        Thread.sleep(1000);

        m_xmlrpcd.stop();
        Thread.sleep(2000);
        
        LoggingEvent[] errors = MockLogAppender.getEventsGreaterOrEqual(Level.ERROR);
        /*
         * XXX Hack Reset the events now, otherwise any failures below are
         * masked when MockLogAppender.assertNoWarningsOrGreater() is called in
         * OpenNMSTestCase.
         */
        MockLogAppender.resetEvents();

        if (errors.length == 0) {
            fail("No errors received by log4j, however some errors "
                    + "should have been received while the XML-RPC"
                    + "anticipator was down");
        }
        
        for (int i = 0; i < errors.length; i++) {
            String message = errors[i].getMessage().toString();
            if (("Failed to send message to XMLRPC server: http://localhost:" + m_port1).equals(message)) {
                continue;
            }
            if (("Could not successfully communicate with XMLRPC server 'http://localhost:" + m_port1 + "' after 1 tries").equals(message)) {
                continue;
            }
            if (("Failed to send message to XMLRPC server http://localhost:" + m_port1).equals(message)) {
                continue;
            }
            if ("Can not set up communication with any XMLRPC server".equals(message)) {
                continue;
            }
            fail("Unexpected error logged: [" + errors[i].getLevel().toString() + "] "
                    + errors[i].getLoggerName() +": " + errors[i].getMessage());
        }

        MockLogAppender.resetEvents();

        finishUp();
    }

