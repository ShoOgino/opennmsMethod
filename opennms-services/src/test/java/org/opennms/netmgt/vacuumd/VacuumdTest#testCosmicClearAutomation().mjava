    /**
     * This tests the capabilities of the cosmicClear autmation as shipped in the standard build.
     * @throws InterruptedException 
     */
    public final void testCosmicClearAutomation() throws InterruptedException {
        // create node down events with severity 6
        bringNodeDownCreatingEvent(1);
        bringNodeDownCreatingEvent(2);
        Thread.sleep(1000);
        // create node up event with severity 3
        bringNodeUpCreatingEvent(1);
        Thread.sleep(1000);
        
        assertEquals("clearUei for nodeUp", "uei.opennms.org/nodes/nodeDown", getJdbcTemplate().queryForObject("select clearUei from alarms where eventUei = ?", String.class, "uei.opennms.org/nodes/nodeUp"));
        
        // should have three alarms, one for each event
        assertEquals("should have one alarm for each event", 3, getJdbcTemplate().queryForLong("select count(*) from alarms"));

        // the automation should have cleared the nodeDown for node 1 so it should now have severity CLEARED == 2
        assertEquals("alarms with severity == 2", 1, getJdbcTemplate().queryForLong("select count(*) from alarms where severity = 2"));

        // There should still be a nodeUp alarm and an uncleared nodeDown alarm
        assertEquals("alarms with severity > 2", 2, getJdbcTemplate().queryForLong("select count(*) from alarms where severity > 2"));

        // run this automation again and make sure nothing happens since we've already processed the clear
        AutomationProcessor ap = new AutomationProcessor(VacuumdConfigFactory.getInstance().getAutomation("cosmicClear"));
        ap.run();
        Thread.sleep(1000);
        
        // same as above
        assertEquals("alarms with severity == 2", 1, getJdbcTemplate().queryForLong("select count(*) from alarms where severity = 2"));

        // save as above
        assertEquals("alarms with severity > 2", 2, getJdbcTemplate().queryForLong("select count(*) from alarms where severity > 2"));
    }

