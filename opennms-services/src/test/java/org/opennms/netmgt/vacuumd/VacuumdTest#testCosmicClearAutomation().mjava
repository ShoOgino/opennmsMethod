    /**
     * This tests the capabilities of the cosmicClear autmation as shipped in the standard build.
     * @throws InterruptedException 
     */
    public final void testCosmicClearAutomation() throws InterruptedException {

        // create node down events with severity 6
        bringNodeDownCreatingEvent(1);
        bringNodeDownCreatingEvent(2);
        Thread.sleep(500);
        // create node up event with severity 3
        bringNodeUpCreatingEvent(1);
        Thread.sleep(500);
        
        SingleResultQuerier srq = new SingleResultQuerier(m_db, "select clearUei from alarms where eventUei = \'uei.opennms.org/nodes/nodeUp\'");
        srq.execute();
        String result = (String)srq.getResult();
        MockUtil.println(result);
        assertTrue("uei.opennms.org/nodes/nodeDown".equals(result));
        
        // should have three alarms, one for each event
        srq = new SingleResultQuerier(m_db, "select count(*) from alarms");
        srq.execute();
        Integer rows = (Integer)srq.getResult();
        assertEquals(3, rows.intValue());

        // the automation should have cleared the nodeDown for node 1 so it should now have severity CLEARED == 2
        srq = new SingleResultQuerier(m_db, "select count(*) from alarms where severity = 2");
        srq.execute();
        rows = (Integer)srq.getResult();
        assertEquals(1, rows.intValue());

        // There should still be a nodeUp alarm and an uncleared nodeDown alarm
        srq = new SingleResultQuerier(m_db, "select count(*) from alarms where severity > 2");
        srq.execute();
        rows = (Integer)srq.getResult();
        assertEquals(2, rows.intValue());

        // run this automation again and make sure nothing happens since we've already processed the clear
        AutomationProcessor ap = new AutomationProcessor(VacuumdConfigFactory.getInstance().getAutomation("cosmicClear"));
        ap.run();
        Thread.sleep(1000);
        
        // same as above
        srq = new SingleResultQuerier(m_db, "select count(*) from alarms where severity = 2");
        srq.execute();
        rows = (Integer)srq.getResult();
        assertEquals(1, rows.intValue());

        // save as above
        srq = new SingleResultQuerier(m_db, "select count(*) from alarms where severity > 2");
        srq.execute();
        rows = (Integer)srq.getResult();
        assertEquals(2, rows.intValue());
        
    }

