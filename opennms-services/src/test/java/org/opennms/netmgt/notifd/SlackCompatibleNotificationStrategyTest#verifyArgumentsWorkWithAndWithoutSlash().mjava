    @Test
    public void verifyArgumentsWorkWithAndWithoutSlash() {
        final List<Argument> arguments = Lists.newArrayList();
        arguments.add(new Argument("-url", null, "http://localhost:1234/hooks/hooky", false));
        arguments.add(new Argument("-channel", null, "channel", false));
        arguments.add(new Argument("-username", null, "opennms", false));
        arguments.add(new Argument("-iconurl", null, "http://opennms.org/logo.png", false));
        arguments.add(new Argument("-iconemoji", null, ":shipit:", false));
        arguments.add(new Argument("-subject", null, "Test", false));
        arguments.add(new Argument("-tm", null, "This is only a test", false));

        strategy.setArguments(arguments);
        assertThat(strategy.getValue("url"), is("http://localhost:1234/hooks/hooky"));
        assertThat(strategy.getValue("-url"), is("http://localhost:1234/hooks/hooky"));

        assertThat(strategy.getValue("channel"), is("channel"));
        assertThat(strategy.getValue("-channel"), is("channel"));

        assertThat(strategy.getValue("username"), is("opennms"));
        assertThat(strategy.getValue("-username"), is("opennms"));

        assertThat(strategy.getValue("iconurl"), is("http://opennms.org/logo.png"));
        assertThat(strategy.getValue("-iconurl"), is("http://opennms.org/logo.png"));

        assertThat(strategy.getValue("iconemoji"), is(":shipit:"));
        assertThat(strategy.getValue("-iconemoji"), is(":shipit:"));

        assertThat(strategy.getValue("subject"), is("Test"));
        assertThat(strategy.getValue("-subject"), is("Test"));

        assertThat(strategy.getValue("tm"), is("This is only a test"));
        assertThat(strategy.getValue("-tm"), is("This is only a test"));
    }

