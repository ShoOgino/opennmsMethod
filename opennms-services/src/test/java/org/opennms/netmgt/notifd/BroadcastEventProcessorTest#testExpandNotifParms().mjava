    /**
     * Test calling expandNotifParms to see if the regular expression in
     * m_notifdExpandRE is initialized from {@link BroadcastEventProcessor.NOTIFD_EXPANSION_PARM}.
     */
    @Test
    public void testExpandNotifParms() throws Exception {
        String expandResult = BroadcastEventProcessor.expandNotifParms("%foo%", new TreeMap<String,String>());
        assertEquals("%foo%", expandResult);

        // This is kinda non-intuitive... but expandNotifParms() only works on whitelisted expansion params
        expandResult = BroadcastEventProcessor.expandNotifParms("%foo%", Collections.singletonMap("foo", "bar"));
        assertEquals("%foo%", expandResult);

        // The 'noticeid' param is in the whitelist
        expandResult = BroadcastEventProcessor.expandNotifParms("Notice #%noticeid% RESOLVED: ", Collections.singletonMap("noticeid", "999"));
        assertEquals("Notice #999 RESOLVED: ", expandResult);

        expandResult = BroadcastEventProcessor.expandNotifParms("RESOLVED: ", Collections.singletonMap("noticeid", "999"));
        assertEquals("RESOLVED: ", expandResult);

        // <notification name="Disk Threshold" status="on"> from bug 2888
        expandResult = BroadcastEventProcessor.expandNotifParms("Notice %noticeid%: Disk threshold exceeded on %nodelabel%: %parm[all]%.", new TreeMap<String,String>());
        assertEquals("Notice %noticeid%: Disk threshold exceeded on %nodelabel%: %parm[all]%.", expandResult);
        /*
        <event>
            <uei xmlns="">uei.opennms.org/abian/hr-dsk-full</uei>
            <event-label xmlns="">Disk Full</event-label>
            <descr xmlns="">Threshold exceeded for %service% datasource %parm[ds]% on interface %interface%, parms: %parm[all]%</descr>
            <logmsg dest="logndisplay">Threshold exceeded for %service% datasource %parm[ds]% on interface %interface%, parms: %parm[all]%</logmsg>
            <severity xmlns="">Minor</severity>
            <alarm-data reduction-key="%uei%!%nodeid%!%parm[label]%" alarm-type="1" auto-clean="false" />
        </event>
         */
        Event event = new Event();
        event.setUei("uei.opennms.org/threshold/highThresholdExceeded");
        event.setDescr("High threshold exceeded for %service% datasource %parm[ds]% on interface %interface%, parms: %parm[all]%");
        Logmsg logmsg = new Logmsg();
        logmsg.setContent("High threshold exceeded for %service% datasource %parm[ds]% on interface %interface%, parms: %parm[all]%");
        logmsg.setNotify(true);
        event.setLogmsg(logmsg);
        event.setNodeid(0);
        event.setInterface("0.0.0.0");

        Parms parms = new Parms();

        Parm parm = new Parm();
        parm.setParmName("ds");
        Value value = new Value();
        value.setContent("dsk-usr-pcent");
        parm.setValue(value);
        parms.addParm(parm);

        parm = new Parm();
        parm.setParmName("value");
        value = new Value();
        value.setContent("Crap! There's only 15% free on the SAN and we need 20%! RUN AWAY!");
        parm.setValue(value);
        parms.addParm(parm);

        parm = new Parm();
        parm.setParmName("threshold");
        value = new Value();
        value.setContent("");
        parm.setValue(value);
        parms.addParm(parm);

        parm = new Parm();
        parm.setParmName("trigger");
        value = new Value();
        value.setContent("");
        parm.setValue(value);
        parms.addParm(parm);

        parm = new Parm();
        parm.setParmName("rearm");
        value = new Value();
        value.setContent("");
        parm.setValue(value);
        parms.addParm(parm);

        parm = new Parm();
        parm.setParmName("label");
        value = new Value();
        value.setContent("");
        parm.setValue(value);
        parms.addParm(parm);

        parm = new Parm();
        parm.setParmName("ifIndex");
        value = new Value();
        value.setContent("");
        parm.setValue(value);
        parms.addParm(parm);

        event.setParms(parms);

        /*
        List<String> names = m_notificationManager.getNotificationNames();
        Collections.sort(names);
        for (String name : names) {
            System.out.println(name);
        }
        */
        Notification[] notifications = null;
        notifications = m_notificationManager.getNotifForEvent(null);
        assertNull(notifications);
        notifications = m_notificationManager.getNotifForEvent(event);
        assertNotNull(notifications);
        assertEquals(1, notifications.length);
        Map<String,String> paramMap = BroadcastEventProcessor.buildParameterMap(notifications[0], event, 9999);
        /*
        for (Map.Entry<String,String> entry : paramMap.entrySet()) {
            System.out.println(entry.getKey() + " => " + entry.getValue());
        }
         */
        assertEquals("High disk Threshold exceeded on 0.0.0.0, dsk-usr-pcent with Crap! There's only 15% free on the SAN and we need 20%! RUN AWAY!", paramMap.get("-tm"));
        expandResult = BroadcastEventProcessor.expandNotifParms("Notice #%noticeid%: Disk threshold exceeded on %nodelabel%: %parm[all]%.", paramMap);
        assertEquals("Notice #9999: Disk threshold exceeded on %nodelabel%: %parm[all]%.", expandResult);
    }

