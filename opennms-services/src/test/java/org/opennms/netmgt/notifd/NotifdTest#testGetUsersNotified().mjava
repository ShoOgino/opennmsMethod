    @Test
    public void testGetUsersNotified() throws Exception {
        MockInterface iface = m_network.getInterface(1, "192.168.1.1");

        Date downDate = new Date();
        anticipateNotificationsForGroup("interface 192.168.1.1 down.", "All services are down on interface 192.168.1.1, dot1 interface alias.", "InitialGroup", downDate, 0);

        //bring node down now
        Event event = iface.createDownEvent(downDate);
        m_eventMgr.sendEventToListeners(event);

        sleep(1000);
        
        Collection<List<String>> expectedResults = new LinkedList<List<String>>();
        Collection<String> users = getUsersInGroup("InitialGroup");
        for (String userID : users) {
            List<String> cmdList = new LinkedList<String>();
            cmdList.add(userID);
            cmdList.add("mockNotifier");
            expectedResults.add(cmdList);
        }
        
        Collection<Integer> notifIds = m_db.findNoticesForEvent(event);
        assertEquals("notification ID size", 1, notifIds.size());
        
        Integer notifId = notifIds.iterator().next();
        assertNotNull("first notifId should not be null", notifId);
        
        final Collection<List<String>> actualResults = new LinkedList<List<String>>();
        RowProcessor rp = new RowProcessor() {
            @Override
            public void processRow(ResultSet rs) throws SQLException {
                List<String> cmdList = new LinkedList<String>();
                cmdList.add(rs.getString("userID"));
                cmdList.add(rs.getString("media"));
                actualResults.add(cmdList);
            }
        };
        m_notificationManager.forEachUserNotification(notifId.intValue(), rp);

        /*
         * This test does not work reliably because notifications within a
         * group are not guaranteed to be in a certain order.
         */
        //assertEquals("Notifications", expectedResults, actualResults);
        
        // Use a set instead so we don't care about ordering.
        Set<List<String>> expectedSet = new HashSet<List<String>>(expectedResults);
        Set<List<String>> actualSet = new HashSet<List<String>>(actualResults);

        assertEquals("Notifications as a set", expectedSet, actualSet);

    }

