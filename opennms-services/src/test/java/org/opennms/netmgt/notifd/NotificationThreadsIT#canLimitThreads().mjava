    /**
     * NMS-9766: Verifies that the number of threads used to concurrently execute
     * the notification strategies does not exceed the "max-threads" configuration.
     */
    @Test
    public void canLimitThreads() throws Exception {
        // Verify the thread limit N
        final int N = m_notifdConfig.getConfiguration().getMaxThreads();
        assertTrue( N + " should be some positive value < max int.",
                0 < N && N < Integer.MAX_VALUE);

        // Setup the locker
        final ThreadLocker threadLocker = ThreadLockingNotificationStrategy.getThreadLocker();
        final CompletableFuture<Integer> future = ThreadLockingNotificationStrategy.getThreadLocker().waitForThreads(N);

        // Trigger M notifications where M = 2 * N
        final int M = 2 * N;
        for (int i = 0; i < M; i++) {
            MockNode node = m_network.getNode(1);
            EventBuilder eb = new EventBuilder("uei.opennms.org/test/notificationConcurrencyTest", "test");
            eb.setNodeid(node.getNodeId());
            m_eventMgr.sendEventToListeners(eb.getEvent());
        }

        // Wait until N threads a locked
        future.get(1, TimeUnit.MINUTES);

        // Wait a little longer and verify that no extra threads are waiting
        // This validates that no more than N threads are currently invoking
        // the notification strategy
        Thread.sleep(TimeUnit.SECONDS.toMillis(1));
        assertEquals(0, threadLocker.getNumExtraThreadsWaiting());

        // Release the gate
        threadLocker.release();

        // Wait until all M notifications have been executed
        // This validates that all of the M notifications end up
        // being invoked
        Thread.sleep(TimeUnit.SECONDS.toMillis(5));
        await().atMost(5, TimeUnit.SECONDS)
                .until(ThreadLockingNotificationStrategy::getNotificationsSent, equalTo((long)M));
    }

