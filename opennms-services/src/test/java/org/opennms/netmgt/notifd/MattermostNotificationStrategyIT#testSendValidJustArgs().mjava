    /*
     * Test method for 'org.opennms.netmgt.notifd.MattermostNotificationStrategy.send(List)'
     */
    @Test
    @JUnitHttpServer(webapps={
            @Webapp(context="/hooks", path="src/test/resources/MattermostNotificationStrategyTest")
    })
    public void testSendValidJustArgs() {
        final int port = JUnitHttpServerExecutionListener.getPort();
        assertTrue(port > 0);
        try {

            final NotificationStrategy ns = new MattermostNotificationStrategy();
            final List<Argument> arguments = new ArrayList<>();

            // Set these properties. We will override them with Args on the first run.
            System.setProperty("org.opennms.netmgt.notifd.mattermost.webhookURL", "http://localhost:" + port + "/hooks/abunchofstuffthatidentifiesawebhook");
            System.setProperty("org.opennms.netmgt.notifd.mattermost.channel", "integrationtestsXX");
            System.setProperty("org.opennms.netmgt.notifd.mattermost.iconURL", "http://opennms.org/logo.pngXX");
            System.setProperty("org.opennms.netmgt.notifd.mattermost.iconEmoji", ":shipitXX:");
            System.setProperty("org.opennms.netmgt.notifd.mattermost.username", "opennmsXX");

            arguments.add(new Argument("url", null, "http://localhost:" + port + "/hooks/abunchofstuffthatidentifiesawebhook", false));
            arguments.add(new Argument("channel", null, "integrationtests", false));
            arguments.add(new Argument("username", null, "opennms", false));
            arguments.add(new Argument("iconurl", null, "http://opennms.org/logo.png", false));
            arguments.add(new Argument("iconemoji", null, ":shipit:", false));
            arguments.add(new Argument("-subject", null, "Test", false));
            arguments.add(new Argument("-tm", null, "This is only a test", false));
            
            int statusCode = ns.send(arguments);
            assertEquals(0, statusCode);
            
            JSONObject inputJson = MattermostNotificationStrategyTestServlet.getInputJson();
            assertNotNull(inputJson);
            assertEquals("opennms", inputJson.get("username"));
            assertEquals("*Test*\nThis is only a test", inputJson.get("text"));
            assertEquals("integrationtests", inputJson.get("channel"));
            assertEquals("http://opennms.org/logo.png", inputJson.get("icon_url"));
            assertEquals(":shipit:", inputJson.get("icon_emoji"));
            assertEquals(5, inputJson.size());
            
            // Now do it again, without the Args, and verify that the property values come out
            arguments.clear();
            arguments.add(new Argument("-subject", null, "Test again", false));
            arguments.add(new Argument("-tm", null, "This is only a second test", false));
            
            statusCode = ns.send(arguments);
            assertEquals(0, statusCode);
            
            inputJson = MattermostNotificationStrategyTestServlet.getInputJson();
            assertNotNull(inputJson);
            assertEquals("opennmsXX", inputJson.get("username"));
            assertEquals("*Test again*\nThis is only a second test", inputJson.get("text"));
            assertEquals("integrationtestsXX", inputJson.get("channel"));
            assertEquals("http://opennms.org/logo.pngXX", inputJson.get("icon_url"));
            assertEquals(":shipitXX:", inputJson.get("icon_emoji"));
            assertEquals(5, inputJson.size());

        } catch (Throwable e) {
            e.printStackTrace();
            fail("Caught Exception: " + e.getMessage());
        }
    }

