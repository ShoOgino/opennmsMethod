	protected static ManagedObject getMOFromPropString(String oidStr, String valStr) {
		OID moOID = new OID(oidStr);
		String moTypeStr = valStr.substring(0, valStr.indexOf(":"));
		String moValStr = valStr.substring(valStr.indexOf(":") + 2);
		ManagedObject newMO;
		Variable newVar;
		try {
		if (moTypeStr.equals("STRING")) {
			newVar = new OctetString(moValStr);
		} else if (moTypeStr.equals("Hex-STRING")) {
			newVar = OctetString.fromHexString(moValStr.trim());
		} else if (moTypeStr.equals("INTEGER")) {
			newVar = new Integer32(Integer.parseInt(moValStr));
		} else if (moTypeStr.equals("Gauge32")) {
			newVar = new Gauge32(Integer.parseInt(moValStr));
		} else if (moTypeStr.equals("Counter32")) {
			newVar = new Counter32(Long.parseLong(moValStr)); // a 32 bit counter can be > 2 ^ 31, which is > INTEGER_MAX
		} else if (moTypeStr.equals("Counter64")) {
			newVar = new Counter64(Long.parseLong(moValStr));
		} else if (moTypeStr.equals("TimeTicks")) {
			Integer ticksInt = Integer.parseInt( moValStr.substring( moValStr.indexOf("(") + 1, moValStr.indexOf(")") ) );
			newVar = new TimeTicks(ticksInt);
		} else if (moTypeStr.equals("OID")) {
			newVar = new OID(moValStr);
		} else {
			// Punt, assume it's a String
			newVar = new OctetString(moValStr);
		}
		} catch (Throwable t) {
			throw new UndeclaredThrowableException(t, "Could not convert value '" + moValStr + "' of type '" + moTypeStr + "' to SNMP object for OID " + oidStr);
		}
		newMO = new MOScalar(moOID, MOAccessImpl.ACCESS_READ_ONLY, newVar);
		return newMO;
	}

