    protected void setUp() throws Exception {
        super.setUp();
        MockUtil.println("------------ Begin Test "+getName()+" --------------------------");
        MockLogAppender.setupLogging();
        
        if (m_runSupers) {
        
            m_network = new MockNetwork();
            m_network.setCriticalService("ICMP");
            m_network.addNode(1, "Router");
            m_network.addInterface("192.168.1.1");
            m_network.addService("ICMP");
            m_network.addService("SMTP");
            m_network.addInterface("192.168.1.2");
            m_network.addService("ICMP");
            m_network.addService("SMTP");
            m_network.addNode(2, "Server");
            m_network.addInterface("192.168.1.3");
            m_network.addService("ICMP");
            m_network.addService("HTTP");
            m_network.addNode(3, "Firewall");
            m_network.addInterface("192.168.1.4");
            m_network.addService("SMTP");
            m_network.addService("HTTP");
            m_network.addInterface("192.168.1.5");
            m_network.addService("SMTP");
            m_network.addService("HTTP");
            
            m_db = new MockDatabase();
            m_db.populate(m_network);
            
            DataSourceFactory.setInstance(m_db);

            Reader rdr = new StringReader(getSnmpConfig());
            SnmpPeerFactory.setInstance(new SnmpPeerFactory(rdr));
            
            if (isStartEventd()) {
                m_eventd = new Eventd();
                m_eventd.setDataSource(m_db);
                m_eventdConfigMgr = new MockEventConfigManager(MOCK_EVENT_CONFIG);
                m_eventd.setConfigManager(m_eventdConfigMgr);
                
                
                Reader configRdr = new StringReader(MOCK_EVENT_CONF);
                EventConfigurationManager.loadConfiguration(configRdr);
                
                
                m_eventdIpcMgr = new EventIpcManagerDefaultImpl(m_eventdConfigMgr);
                m_eventProxy = new EventProxy() {

                    public void send(Event event) throws EventProxyException {
                        m_eventdIpcMgr.sendNow(event);
                    }

                    public void send(Log eventLog) throws EventProxyException {
                        m_eventdIpcMgr.sendNow(eventLog);
                    }
                    
                };
                
                EventIpcManagerFactory.setIpcManager(m_eventdIpcMgr);
                m_eventd.setEventIpcManager(m_eventdIpcMgr);
                m_eventd.init();
                m_eventd.start();
            }
        
        }

    }

