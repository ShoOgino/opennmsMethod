	public void verifyAnticipated(long wait,
			long sleepMiddle,
			long sleepAfter,
			int anticipatedSize,
			int unanticipatedSize) {
		
		StringBuffer problems = new StringBuffer();

		Collection missingEvents = waitForAnticipated(wait);
		
		if (sleepMiddle > 0) {
			try {
				Thread.sleep(sleepMiddle);
			} catch (InterruptedException e) {
			}
		}

		if (missingEvents.size() != anticipatedSize) {
			problems.append(missingEvents.size() +
					" expected events still outstanding (expected " +
					anticipatedSize + "):\n");
			problems.append(listEvents("\t", missingEvents));
		}
		if (unanticipatedEvents().size() != unanticipatedSize) {
			problems.append(unanticipatedEvents().size() +
					" unanticipated events received (expected " +
					unanticipatedSize + "):\n");
			problems.append(listEvents("\t", unanticipatedEvents()));
		}
		
		if (problems.length() > 0) {
			problems.deleteCharAt(problems.length() - 1);
			Assert.fail(problems.toString());
		}
	}

