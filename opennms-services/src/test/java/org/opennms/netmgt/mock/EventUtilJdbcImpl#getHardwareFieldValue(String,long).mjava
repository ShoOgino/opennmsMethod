    /**
     * Helper method.
     * 
     * @deprecated Replace with standard DAO calls instead of using JDBC
     * @param parm
     * @param event
     * @return The value of a hardware field based on the nodeid of the event 
     */
    public String getHardwareFieldValue(String parm, long nodeId) {
        String retParmVal = null;
        int end = parm.lastIndexOf(HARDWARE_END_SUFFIX);
        // The "hardware[" start of this parameter is 6 characters long
        String[] parts = parm.substring(HARDWARE_BEGIN.length(),end).split(":");
        if (parts.length != 2) {
            return null;
        }
        String sql = null;
        boolean isCustomAttr = !parts[1].startsWith("entPhysical");
        if (isCustomAttr) {
            sql = "SELECT a.attribValue FROM hwEntityAttribute a, hwEntity h, hwEntityAttributeType t WHERE h.nodeId = " + String.valueOf(nodeId) + " AND a.hwEntityId = h.id AND a.hwAttribTypeId = t.id AND t.attribName = '" + parts[1] + "'";
        } else {
            sql = "SELECT " + parts[1] + " FROM hwEntity WHERE nodeId = " + String.valueOf(nodeId);
        }
        if (parts[0].matches("^\\d+$")) {
            // entPhysicalIndex
            if (isCustomAttr) {
                sql += " AND h.entPhysicalIndex = " + parts[0];
            } else {
                sql += " AND entPhysicalIndex = " + parts[0];
            }
        } else {
            if (parts[0].startsWith("~")) {
                // ~regexOverEntPhysicalName
                if (isCustomAttr) {
                    sql += " AND h.entPhysicalName ~ '" + parts[0].substring(1) + "'";
                } else {
                    sql += " AND entPhysicalName ~ '" + parts[0].substring(1) + "'";
                }
            } else {
                // entPhysicalName
                if (isCustomAttr) {
                    sql += " AND h.entPhysicalName = '" + parts[0] + "'";
                } else {
                    sql += " AND entPhysicalName = '" + parts[0] + "'";
                }
            }
        }
        java.sql.Connection dbConn = null;
        try {
            Statement stmt = null;
            try {
                // Get datbase connection from the factory
                dbConn = DataSourceFactory.getInstance().getConnection();
                // Issue query and extract nodeLabel from result set
                stmt = dbConn.createStatement();
                ResultSet rs = stmt.executeQuery(sql);
                if (rs.next()) {
                    retParmVal = rs.getString(1);
                }
            } catch (SQLException sqlE) {
                // do nothing
            } finally {
                // Close the statement
                if (stmt != null) {
                    try {
                        stmt.close();
                    } catch (Throwable e) {
                        // do nothing
                    }
                }
            }
        } finally {
            // Close the database connection
            if (dbConn != null) {
                try {
                    dbConn.close();
                } catch (Throwable t) {
                    // do nothing
                }
            }
        }
        return retParmVal;
    }

