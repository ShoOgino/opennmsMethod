    /**
     * Load the current interface from the database. If the interface was
     * modified, the modifications are lost. The nodeid and ip address must be
     * set prior to this call.
     * 
     * @param c
     *            The connection used to load the data.
     * 
     * @throws java.sql.SQLException
     *             Thrown if an error occurs with the connection
     */
    private boolean load(Connection c) throws SQLException {
        if (!m_fromDb) {
            throw new IllegalStateException("The record does not exists in the database");
        }

        // create the Prepared statement and then start setting the query values
        PreparedStatement stmt = null;
        ResultSet rset = null;
        final DBUtils d = new DBUtils(getClass());

        try {
            stmt = c.prepareStatement(SQL_LOAD_REC);
            d.watch(stmt);
            stmt.setLong(1, m_nodeId);
            stmt.setInt(2, m_ifIndex);

            // Run the query
            rset = stmt.executeQuery();
            d.watch(rset);
            if (!rset.next()) {
                return false;
            }

            // extract the values
            int ndx = 1;

            // get the physical address
            m_physAddr = rset.getString(ndx++);
            if (rset.wasNull()) {
                m_physAddr = null;
            }

            // get the description
            m_ifDescription = rset.getString(ndx++);
            if (rset.wasNull()) {
                m_ifDescription = null;
            }

            // get the type
            m_ifType = rset.getInt(ndx++);
            if (rset.wasNull()) {
                m_ifIndex = -1;
            }

            // get the name
            m_ifName = rset.getString(ndx++);
            if (rset.wasNull()) {
                m_ifName = null;
            }

            // get the speed
            m_ifSpeed = rset.getLong(ndx++);
            if (rset.wasNull()) { 
                m_ifSpeed = -1L;
            }

            // get the admin status
            m_ifAdminStatus = rset.getInt(ndx++);
            if (rset.wasNull()) {
                m_ifAdminStatus = -1;
            }

            // get the operational status
            m_ifOperStatus = rset.getInt(ndx++);
            if (rset.wasNull()) {
                m_ifOperStatus = -1;
            }
            
            // get the alias
            m_ifAlias = rset.getString(ndx++);
            if (rset.wasNull()) {
                m_ifAlias = null;
            }

            // get the collect flag
            m_collect = rset.getString(ndx++);
            if (rset.wasNull()) {
                m_collect = null;
            }
        
        } finally {
            d.cleanUp();
        }
        
        return true;
    }

