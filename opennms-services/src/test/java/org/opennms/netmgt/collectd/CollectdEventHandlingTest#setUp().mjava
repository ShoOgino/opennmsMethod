    @Before
    public void setUp() {
        // Setup the transaction template
        MockTransactionTemplate transactionTemplate = new MockTransactionTemplate();
        transactionTemplate.afterPropertiesSet();
        collectd.setTransactionTemplate(transactionTemplate);

        // Create two collectable services
        CollectorUpdates svc1_udpates = new CollectorUpdates();
        svc1 = EasyMock.createMock(CollectableService.class);
        EasyMock.expect(svc1.getNodeId()).andReturn(42).anyTimes();
        EasyMock.expect(svc1.getAddress()).andReturn(InetAddressUtils.ONE_TWENTY_SEVEN).anyTimes();
        EasyMock.expect(svc1.getServiceName()).andReturn("JMX").anyTimes();
        EasyMock.expect(svc1.getCollectorUpdates()).andReturn(svc1_udpates).anyTimes();
        EasyMock.replay(svc1);
        collectd.getCollectableServices().add(svc1);

        CollectorUpdates svc2_udpates = new CollectorUpdates();
        svc2 = EasyMock.createMock(CollectableService.class);
        EasyMock.expect(svc2.getNodeId()).andReturn(43).anyTimes();
        EasyMock.expect(svc2.getAddress()).andReturn(InetAddressUtils.UNPINGABLE_ADDRESS).anyTimes();
        EasyMock.expect(svc2.getServiceName()).andReturn("WS-Man").anyTimes();
        EasyMock.expect(svc2.getCollectorUpdates()).andReturn(svc2_udpates).anyTimes();
        EasyMock.replay(svc2);
        collectd.getCollectableServices().add(svc2);
    }

