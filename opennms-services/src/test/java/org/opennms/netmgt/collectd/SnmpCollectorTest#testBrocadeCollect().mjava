    public void testBrocadeCollect() throws Exception {
        String svcName = "SNMP";

        String m_snmpConfig = "<?xml version=\"1.0\"?>\n"
                + "<snmp-config port=\"1691\" retry=\"3\" timeout=\"800\"\n"
                + "               read-community=\"public\"\n"
                + "               version=\"v1\">\n" + "</snmp-config>\n";

        initializeAgent("/org/opennms/netmgt/snmp/brocadeTestData1.properties");
        
        File nodeDir = m_fileAnticipator.expecting(getSnmpRrdDirectory(), "1");
        File brocadeDir = m_fileAnticipator.expecting(nodeDir, "brocadeFCPortIndex");
        for (int i = 1; i <= 8; i++) {
            File brocadeIndexDir = m_fileAnticipator.expecting(brocadeDir, Integer.toString(i));
            for (String file : new String[] { "strings.properties", "swFCPortTxWords.jrb", "swFCPortRxWords.jrb" }) {
                m_fileAnticipator.expecting(brocadeIndexDir, file);
            }
        }

        Reader dataCollectionConfig = getDataCollectionConfigReader("/org/opennms/netmgt/config/datacollection-brocade-config.xml");

        initialize(new StringReader(m_snmpConfig), dataCollectionConfig);
        dataCollectionConfig.close();

        OnmsNode node = new OnmsNode();
        node.setId(new Integer(1));
        node.setSysObjectId(".1.3.6.1.4.1.1588.2.1.1.1");
        OnmsIpInterface iface = new OnmsIpInterface("127.0.0.1", node);

        Collection outageCalendars = new LinkedList();

        Package pkg = new Package();
        Filter filter = new Filter();
        filter.setContent("IPADDR IPLIKE *.*.*.*");
        pkg.setFilter(filter);
        Service service = new Service();
        service.setName(svcName);
        pkg.addService(service);

        CollectdPackage wpkg = new CollectdPackage(pkg, "foo", false);
        CollectionSpecification spec = new CollectionSpecification(
                                                                   wpkg,
                                                                   svcName,
                                                                   outageCalendars,
                                                                   m_snmpCollector);

        CollectionAgent agent = new CollectionAgent(iface);

        assertEquals("collection status",
                     ServiceCollector.COLLECTION_SUCCEEDED,
                     spec.collect(agent));

        // Wait for any RRD writes to finish up
        Thread.sleep(1000);
    }

