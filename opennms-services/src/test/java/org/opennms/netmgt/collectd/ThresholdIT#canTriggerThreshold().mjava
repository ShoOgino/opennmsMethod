    @Test
    public void canTriggerThreshold() throws Exception {
        // Load our custom config
        try (InputStream in = ConfigurationTestUtils.getInputStreamForResource(this, "collectd-with-mock-collector.xml")) {
            collectdConfigFactory = new CollectdConfigFactory(in);
        }

        // Register our collector as the delegate for the mock
        MyServiceCollector collector = new MyServiceCollector(sessionUtils);
        MockServiceCollector.setDelegate(collector);

        // Load custom threshd configuration
        initThreshdFactories("threshd-configuration.xml","test-thresholds.xml");
        ThreshdConfigFactory.getInstance().rebuildPackageIpListMap();
        mockEventIpcManager.addEventListener((EventListener) thresholdingService, ThresholdingServiceImpl.UEI_LIST);

        // Wire and initialize collectd
        Collectd collectd = new Collectd();
        collectd.setCollectdConfigFactory(collectdConfigFactory);
        collectd.setIpInterfaceDao(ifaceDao);
        collectd.setFilterDao(filterDao);
        collectd.setServiceCollectorRegistry(serviceCollectorRegistry);
        collectd.setLocationAwareCollectorClient(locationAwareCollectorClient);
        collectd.setTransactionTemplate(transTemplate);
        collectd.setNodeDao(nodeDao);
        collectd.setEventIpcManager(mockEventIpcManager);
        collectd.setPersisterFactory(persisterFactory);
        collectd.setThresholdingService(thresholdingService);
        collectd.init();
        collectd.start();

        // Now let's add a node
        MockNetwork mockNetwork = new MockNetwork();
        mockNetwork.addNode(1, "Router");
        mockNetwork.addInterface("192.168.1.1");
        mockNetwork.addService("Mock");
        mockDatabase.populate(mockNetwork);

        // Set the sysObjectId
        transTemplate.execute(status -> {
            OnmsNode node = nodeDao.get(1);
            node.setSysObjectId(".1.3.6.1.4.1.8072.3.2.10");
            nodeDao.update(node);
            return node;
        });

        EventAnticipator eventAnticipator = mockEventIpcManager.getEventAnticipator();

        // Let's send a nodeGainedService event
        EventBuilder bldr = new EventBuilder(EventConstants.NODE_GAINED_SERVICE_EVENT_UEI, "Test");
        bldr.setNodeid(1);
        bldr.setInterface(addr("192.168.1.1"));
        bldr.setService("Mock");
        Event nodeGainedServiceEvent = bldr.getEvent();
        eventAnticipator.anticipateEvent(nodeGainedServiceEvent);
        mockEventIpcManager.sendNow(nodeGainedServiceEvent);

        // Assert 2 collections are performed and Threshold is not triggered
        collector.resetLatch(2);
        if (!collector.getLatch().await(30, TimeUnit.SECONDS)) {
            throw new IllegalStateException("Collector was not called!");
        }
        assertEquals(0, eventAnticipator.getUnanticipatedEvents().size());

        // Anticipate the high threshold event
        eventAnticipator.reset();
        EventBuilder threshBldr = new EventBuilder(EventConstants.HIGH_THRESHOLD_EVENT_UEI, "Test");
        threshBldr.setNodeid(1);
        threshBldr.setInterface(addr("192.168.1.1"));
        threshBldr.setService("Mock");
        eventAnticipator.anticipateEvent(threshBldr.getEvent());

        // Add the 'Development' category
        transTemplate.execute(status -> {
            OnmsNode node = nodeDao.get(1);
            node.addCategory(categoryDao.findByName("Development"));
            nodeDao.update(node);
            return node;
        });

        // Let's send a nodeCategoryChange event
        bldr = new EventBuilder(EventConstants.NODE_CATEGORY_MEMBERSHIP_CHANGED_EVENT_UEI, "Test");
        bldr.setNodeid(1);
        bldr.setInterface(addr("192.168.1.1"));
        Event nodeCategoryChangeEvent = bldr.getEvent();
        eventAnticipator.anticipateEvent(nodeCategoryChangeEvent);
        mockEventIpcManager.sendNow(nodeCategoryChangeEvent);

        // Now wait until our collector was called
        collector.resetLatch(1);
        if (!collector.getLatch().await(30, TimeUnit.SECONDS)) {
            throw new IllegalStateException("Collector was not called!");
        }

        // Wait until our threshold was triggered - the anticipator will remove the event from the list once received
        await().atMost(30, TimeUnit.SECONDS).until(eventAnticipator::getAnticipatedEvents, hasSize(0));

        eventAnticipator.reset();

        // Remove the 'Development' category
        transTemplate.execute(status -> {
            OnmsNode node = nodeDao.get(1);
            node.removeCategory(categoryDao.findByName("Development"));
            nodeDao.update(node);
            return node;
        });

        // Let's send a nodeCategoryChange event
        bldr = new EventBuilder(EventConstants.NODE_CATEGORY_MEMBERSHIP_CHANGED_EVENT_UEI, "Test");
        bldr.setNodeid(1);
        bldr.setInterface(addr("192.168.1.1"));
        nodeCategoryChangeEvent = bldr.getEvent();
        eventAnticipator.anticipateEvent(nodeCategoryChangeEvent);
        mockEventIpcManager.sendNow(nodeCategoryChangeEvent);

        eventAnticipator.reset();

        // Again, Assert 2 collections are performed and that Threshold is no longer triggered
        collector.resetLatch(2);
        if (!collector.getLatch().await(30, TimeUnit.SECONDS)) {
            throw new IllegalStateException("Collector was not called!");
        }
        assertEquals(0, eventAnticipator.getUnanticipatedEvents().size());

        // Stop collectd gracefully so we don't keep trying to collect during the tear down
        collectd.stop();
    }

