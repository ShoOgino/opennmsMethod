	protected void setUp() throws Exception {
		
		MockLogAppender.setupLogging();
        
        // Test setup
		
		m_eventIpcManager = mock(EventIpcManager.class);
		m_collectorConfigDao = mock(CollectorConfigDao.class);
		m_ipIfDao = mock(IpInterfaceDao.class);
		m_monSvcDao = mock(MonitoredServiceDao.class);
		
		m_collector = mock(ServiceCollector.class);

		m_scheduler = new MockScheduler();
		
		m_eventIpcManager.stubs();
		
        MockNetwork m_network = new MockNetwork();
        m_network.setCriticalService("ICMP");
        m_network.addNode(1, "Router");
        m_network.addInterface("192.168.1.1");
        m_network.addService("ICMP");
        m_network.addService("SMTP");
        m_network.addInterface("192.168.1.2");
        m_network.addService("ICMP");
        m_network.addService("SMTP");
        m_network.addNode(2, "Server");
        m_network.addInterface("192.168.1.3");
        m_network.addService("ICMP");
        m_network.addService("HTTP");
        m_network.addNode(3, "Firewall");
        m_network.addInterface("192.168.1.4");
        m_network.addService("SMTP");
        m_network.addService("HTTP");
        m_network.addInterface("192.168.1.5");
        m_network.addService("SMTP");
        m_network.addService("HTTP");
        
        MockDatabase m_db = new MockDatabase();
        m_db.populate(m_network);
        
        DataSourceFactory.setInstance(m_db);

        Resource dbConfig = new ClassPathResource("/org/opennms/netmgt/config/test-database-schema.xml");
        InputStreamReader r = new InputStreamReader(dbConfig.getInputStream());
        DatabaseSchemaConfigFactory dscf = new DatabaseSchemaConfigFactory(r);
        r.close();
        DatabaseSchemaConfigFactory.setInstance(dscf);
		
		Resource resource = new ClassPathResource("etc/poll-outages.xml"); 
		InputStreamReader pollOutagesRdr = new InputStreamReader(resource.getInputStream());
        PollOutagesConfigFactory.setInstance(new PollOutagesConfigFactory(pollOutagesRdr));
        pollOutagesRdr.close();

		
		m_collectd = new Collectd();
		m_collectd.setEventIpcManager(getEventIpcManager());
		m_collectd.setCollectorConfigDao(getCollectorConfigDao());
		m_collectd.setIpInterfaceDao(getIpInterfaceDao());
		m_collectd.setMonitoredServiceDao(getMonitoredServiceDao());
		m_collectd.setScheduler(m_scheduler);
		
		Package pkg = new Package();
		pkg.setName("pkg");
		Filter filter = new Filter();
		filter.setContent("IPADDR IPLIKE *.*.*.*");
		pkg.setFilter(filter);
		Service svc = new Service();
		pkg.addService(svc);
		svc.setName("SNMP");
		Parameter parm = new Parameter();
		parm.setKey("parm1");
		parm.setValue("value1");
		svc.addParameter(parm);
		
		CollectdPackage wpkg = new CollectdPackage(pkg, "localhost", false);
		
		m_spec = new CollectionSpecification(wpkg, "SNMP", null, getCollector());
	}

