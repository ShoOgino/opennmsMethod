    @Override
    public void afterTestMethod(TestContext testContext) throws Exception {
        JUnitCollector config = findCollectorAnnotation(testContext);
        if (config == null) {
            return;
        }
        
        boolean shouldIgnoreNonExistent = testContext.getTestException() != null;

        if (config.anticipateFiles().length > 0 ||
                config.anticipateRrds().length > 0) {
            // make sure any RRDs have time to get written
            Thread.sleep(1000);
        }

        if (config.anticipateRrds().length > 0) {
            for (String rrdFile : config.anticipateRrds()) {
                m_fileAnticipator.expecting(m_snmpRrdDirectory, rrdFile + RrdUtils.getExtension());
            }
        }

        if (config.anticipateFiles().length > 0) {
            for (String file : config.anticipateFiles()) {
                m_fileAnticipator.expecting(m_snmpRrdDirectory, file);
            }
        }

        Exception e = null;
        if (m_fileAnticipator.isInitialized()) {
        	try {
        		m_fileAnticipator.deleteExpected(shouldIgnoreNonExistent);
        	} catch (Throwable t) {
        		e = new RuntimeException(t);
        	}
        }

        deleteResursively(m_snmpRrdDirectory);
        m_fileAnticipator.tearDown();
        
        if (e != null) {
        	throw e;
        }
    }

