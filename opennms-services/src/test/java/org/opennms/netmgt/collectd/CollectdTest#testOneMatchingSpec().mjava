    public void testOneMatchingSpec() throws Exception {
        String svcName = "SNMP";
        OnmsIpInterface iface = getInterface();

        setupCollector(svcName);
        
        m_collector.initialize(isA(CollectionAgent.class), isAMap(String.class, Object.class));
        CollectionSet collectionSetResult=new CollectionSet() {
        	private Date m_timestamp = new Date();
                @Override
            public int getStatus() {
                return ServiceCollector.COLLECTION_SUCCEEDED;
            }

                @Override
            public void visit(CollectionSetVisitor visitor) {
                visitor.visitCollectionSet(this);   
                visitor.completeCollectionSet(this);
            }

                @Override
			public boolean ignorePersist() {
				return false;
			}
			
                @Override
			public Date getCollectionTimestamp() {
				return m_timestamp;
			}
        };      
        expect(m_collector.collect(isA(CollectionAgent.class), isA(EventProxy.class), isAMap(String.class, Object.class))).andReturn(collectionSetResult);
        setupInterface(iface);
        
        setupTransactionManager();
  
        expect(m_collectorConfigDao.getPackages()).andReturn(Collections.singleton(m_collectdPackage));
        
        m_easyMockUtils.replayAll();

        m_collectd.afterPropertiesSet();

        m_collectd.start();
        
        m_scheduler.next();

        assertEquals("scheduler entry count", 1, m_scheduler.getEntryCount());

        m_scheduler.next();

        m_collectd.stop();

        m_easyMockUtils.verifyAll();
    }

