    @Test
    public void testOneMatchingSpec() throws Exception {
        OnmsIpInterface iface = getInterface();

        setupCollector("SNMP");
        setupInterface(iface);
        setupTransactionManager();
  
        expect(m_collectdConfig.getPackages()).andReturn(Collections.singletonList(getCollectionPackageThatMatchesSNMP()));
        expect(m_collectdConfigFactory.interfaceInPackage(iface, getCollectionPackageThatMatchesSNMP())).andReturn(true);

        // Mock Thresholding
        ThresholdingService mockThresholdingService = m_easyMockUtils.createMock(ThresholdingService.class);
        ThresholdingSession mockThresholdingSession = m_easyMockUtils.createMock(ThresholdingSession.class);
        EasyMock.expect(mockThresholdingService.createSession(EasyMock.anyInt(), EasyMock.anyString(), 
                                                              EasyMock.anyString(), EasyMock.anyObject(), EasyMock.anyObject())).andReturn(mockThresholdingSession);
        mockThresholdingSession.accept(isA(CollectionSet.class));
        expectLastCall().anyTimes();

        m_collectd.setThresholdingService(mockThresholdingService);

        m_easyMockUtils.replayAll();

        assertEquals("scheduler entry count", 0, m_scheduler.getEntryCount());

        m_collectd.afterPropertiesSet();

        m_collectd.start();
        
        m_scheduler.next();

        assertEquals("scheduler entry count", 1, m_scheduler.getEntryCount());

        m_scheduler.next();

        m_collectd.stop();

        m_easyMockUtils.verifyAll();
    }

