    @Override
    protected void setUp() throws Exception {
        super.setUp();
        MockUtil.println("------------ Begin Test " + getName() + " --------------------------");
        MockLogAppender.setupLogging();

        MockNetwork m_network = new MockNetwork();
        m_network.setCriticalService("ICMP");
        m_network.addNode(1, "Router");
        m_network.addInterface("127.0.0.1");
        m_network.addService("ICMP");

        MockDatabase m_db = new MockDatabase();
        m_db.populate(m_network);

        DataSourceFactory.setInstance(m_db);
        
        MockEventIpcManager eventIpcManager = new MockEventIpcManager();
        
        EventIpcManagerFactory.setIpcManager(eventIpcManager);
        
        //RrdConfig.loadProperties(new ByteArrayInputStream(s_rrdConfig.getBytes()));
        RrdTestUtils.initialize();

        SnmpPeerFactory.setInstance(new SnmpPeerFactory(new StringReader(SNMP_CONFIG)));
        
        Reader rdr = ConfigurationTestUtils.getReaderForResource(this, "/org/opennms/netmgt/config/test-database-schema.xml");
        DatabaseSchemaConfigFactory.setInstance(new DatabaseSchemaConfigFactory(rdr));
        rdr.close();

        m_transMgr = new DataSourceTransactionManager(m_db) {
            private static final long serialVersionUID = 1L;

            @Override
            protected void doCommit(DefaultTransactionStatus status) {
                super.doCommit(status);
                System.err.println("call to commit a transaction");
            }

            @Override
            protected void doBegin(Object transaction, TransactionDefinition definition) {
                super.doBegin(transaction, definition);
                System.err.println("Call to begin a transaction");
            }
            
        };
        
        m_fileAnticipator = new FileAnticipator();
    }

