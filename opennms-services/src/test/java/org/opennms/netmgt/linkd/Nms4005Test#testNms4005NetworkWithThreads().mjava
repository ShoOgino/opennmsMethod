    /**
     * This test is the same as {@link #testNms4005Network()} except that it spawns multiple threads
     * for each scan to ensure that the upsert code is working properly.
     */
    @Test
    @JUnitSnmpAgents(value={
            @JUnitSnmpAgent(host="10.1.1.2", port=161, resource="classpath:linkd/nms4005/10.1.1.2-walk.txt"),
            @JUnitSnmpAgent(host="10.1.2.2", port=161, resource="classpath:linkd/nms4005/10.1.2.2-walk.txt"),
            @JUnitSnmpAgent(host="10.1.3.2", port=161, resource="classpath:linkd/nms4005/10.1.3.2-walk.txt"),
            @JUnitSnmpAgent(host="10.1.4.2", port=161, resource="classpath:linkd/nms4005/10.1.4.2-walk.txt")
    })
    public void testNms4005NetworkWithThreads() throws Exception {
    	m_nodeDao.save(getR1());
    	m_nodeDao.save(getR2());
    	m_nodeDao.save(getR3());
    	m_nodeDao.save(getR4());

        final OnmsNode cisco1 = m_nodeDao.findByForeignId("linkd", R1_NAME);
        final OnmsNode cisco2 = m_nodeDao.findByForeignId("linkd", R2_NAME);
        final OnmsNode cisco3 = m_nodeDao.findByForeignId("linkd", R3_NAME);
        final OnmsNode cisco4 = m_nodeDao.findByForeignId("linkd", R4_NAME);


        assertTrue(m_linkd.scheduleNodeCollection(cisco1.getId()));
        assertTrue(m_linkd.scheduleNodeCollection(cisco2.getId()));
        assertTrue(m_linkd.scheduleNodeCollection(cisco3.getId()));
        assertTrue(m_linkd.scheduleNodeCollection(cisco4.getId()));

        final int NUMBER_OF_THREADS = 20;

        List<Thread> waitForMe = new ArrayList<Thread>();
        for (int i = 0; i < NUMBER_OF_THREADS; i++) {
            Thread thread = new Thread("NMS-4005-Test-Thread-" + i) {
                public void run() {
                    assertTrue(m_linkd.runSingleSnmpCollection(cisco1.getId()));
                }
            };
            thread.start();
            waitForMe.add(thread);
        }
        for (Thread thread : waitForMe) {
            thread.join();
        }
        waitForMe.clear();
        for (int i = 0; i < NUMBER_OF_THREADS; i++) {
            Thread thread = new Thread("NMS-4005-Test-Thread-" + i) {
                public void run() {
                    assertTrue(m_linkd.runSingleSnmpCollection(cisco2.getId()));
                }
            };
            thread.start();
            waitForMe.add(thread);
        }
        for (Thread thread : waitForMe) {
            thread.join();
        }
        waitForMe.clear();
        for (int i = 0; i < NUMBER_OF_THREADS; i++) {
            Thread thread = new Thread("NMS-4005-Test-Thread-" + i) {
                public void run() {
                    assertTrue(m_linkd.runSingleSnmpCollection(cisco3.getId()));
                }
            };
            thread.start();
            waitForMe.add(thread);
        }
        for (Thread thread : waitForMe) {
            thread.join();
        }
        waitForMe.clear();
        for (int i = 0; i < NUMBER_OF_THREADS; i++) {
            Thread thread = new Thread("NMS-4005-Test-Thread-" + i) {
                public void run() {
                    assertTrue(m_linkd.runSingleSnmpCollection(cisco4.getId()));
                }
            };
            thread.start();
            waitForMe.add(thread);
        }
        for (Thread thread : waitForMe) {
            thread.join();
        }
        waitForMe.clear();

        assertTrue(m_linkd.runSingleLinkDiscovery("example1"));

        final List<DataLinkInterface> ifaces = m_dataLinkInterfaceDao.findAll();
        for (final DataLinkInterface link: ifaces) {
            printLink(link);
        }
        assertEquals("we should have found 4 data links", 4, ifaces.size());
    }

