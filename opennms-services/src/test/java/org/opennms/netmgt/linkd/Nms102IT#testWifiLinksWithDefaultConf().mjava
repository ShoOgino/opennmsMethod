    @Test
    @JUnitSnmpAgents(value={
            @JUnitSnmpAgent(host=MIKROTIK_IP, port=161, resource=MIKROTIK_SNMP_RESOURCE),
            @JUnitSnmpAgent(host=SAMSUNG_IP, port=161, resource=SAMSUNG_SNMP_RESOURCE),
            @JUnitSnmpAgent(host=MAC1_IP, port=161, resource=MAC1_SNMP_RESOURCE),
            @JUnitSnmpAgent(host=MAC2_IP, port=161, resource=MAC2_SNMP_RESOURCE)
    })
    public void testWifiLinksWithDefaultConf() throws Exception {

        m_nodeDao.save(builder.getMac1());
        m_nodeDao.save(builder.getMac2());
        m_nodeDao.save(builder.getMikrotik());
        m_nodeDao.save(builder.getSamsung());
        m_nodeDao.save(builder.getNodeWithoutSnmp("mobile", "192.168.0.13"));
        m_nodeDao.flush();
        
        final OnmsNode mac1 = m_nodeDao.findByForeignId("linkd", MAC1_NAME);
        final OnmsNode mac2 = m_nodeDao.findByForeignId("linkd", MAC2_NAME);
        final OnmsNode samsung = m_nodeDao.findByForeignId("linkd", SAMSUNG_NAME);
        final OnmsNode mikrotik = m_nodeDao.findByForeignId("linkd", MIKROTIK_NAME);
        final OnmsNode mobile = m_nodeDao.findByForeignId("linkd", "mobile");

        assertTrue(m_linkd.scheduleNodeCollection(mac1.getId()));
        assertTrue(m_linkd.scheduleNodeCollection(mac2.getId()));
        assertTrue(m_linkd.scheduleNodeCollection(samsung.getId()));
        assertTrue(m_linkd.scheduleNodeCollection(mikrotik.getId()));
        assertTrue(!m_linkd.scheduleNodeCollection(mobile.getId()));
 
        assertTrue(m_linkd.runSingleSnmpCollection(mac1.getId()));
        assertTrue(m_linkd.runSingleSnmpCollection(mac2.getId()));
        assertTrue(m_linkd.runSingleSnmpCollection(samsung.getId()));
        assertTrue(m_linkd.runSingleSnmpCollection(mikrotik.getId()));
 
        assertTrue(m_linkd.runSingleLinkDiscovery("example1"));
        
        final List<DataLinkInterface> ifaces = m_dataLinkInterfaceDao.findAll();
        for (final DataLinkInterface link: ifaces) {
            printLink(link);
        }

        assertEquals("we should have found 4 data links", 4, ifaces.size());
    }

