    /*
     *  Discover the following topology
     *  The CDP protocol must found all the links
     *  Either Ip Route must found links
     * 
     *  laptop
     *     |
     *  cisco7200a (2) --- (4) cisco7200b (1) --- (4) cisco2691 (2) --- (2) cisco1700
     *                     (2)                    (1)    
     *                      |                      |
     *                     (1)                    (2)
     *                  cisco3700  (3) --- (1)  cisco3600      
     */	
    @Test
    @JUnitSnmpAgents(value={
        @JUnitSnmpAgent(host=CISCO7200A_IP, port=161, resource=CISCO7200A_SNMP_RESOURCE),
        @JUnitSnmpAgent(host=LAPTOP_IP, port=161, resource=LAPTOP_SNMP_RESOURCE),
        @JUnitSnmpAgent(host=CISCO7200B_IP, port=161, resource=CISCO7200B_SNMP_RESOURCE),
        @JUnitSnmpAgent(host=CISCO3700_IP, port=161, resource=CISCO3700_SNMP_RESOURCE),
        @JUnitSnmpAgent(host=CISCO2691_IP, port=161, resource=CISCO2691_SNMP_RESOURCE),
        @JUnitSnmpAgent(host=CISCO1700_IP, port=161, resource=CISCO1700_SNMP_RESOURCE),
        @JUnitSnmpAgent(host=CISCO3600_IP, port=161, resource=CISCO3600_SNMP_RESOURCE)
    })
    public void testCiscoNetwork() throws Exception {

    	m_nodeDao.save(getExampleCom());
    	m_nodeDao.save(getLaptop());
    	m_nodeDao.save(getCisco7200a());
    	m_nodeDao.save(getCisco7200b());
    	m_nodeDao.save(getCisco3700());
    	m_nodeDao.save(getCisco2691());
    	m_nodeDao.save(getCisco1700());
    	m_nodeDao.save(getCisco3600());
    	m_nodeDao.flush();
    	
        final OnmsNode laptop = m_nodeDao.findByForeignId("linkd", LAPTOP_NAME);
        final OnmsNode cisco7200a = m_nodeDao.findByForeignId("linkd", CISCO7200A_NAME);
        final OnmsNode cisco7200b = m_nodeDao.findByForeignId("linkd", CISCO7200B_NAME);
        final OnmsNode cisco3700  = m_nodeDao.findByForeignId("linkd", CISCO3700_NAME);
        final OnmsNode cisco2691  = m_nodeDao.findByForeignId("linkd", CISCO2691_NAME);
        final OnmsNode cisco1700  = m_nodeDao.findByForeignId("linkd", CISCO1700_NAME);
        final OnmsNode cisco3600  = m_nodeDao.findByForeignId("linkd", CISCO3600_NAME);

        assertTrue(m_linkd.scheduleNodeCollection(laptop.getId()));
        assertTrue(m_linkd.scheduleNodeCollection(cisco7200a.getId()));
        assertTrue(m_linkd.scheduleNodeCollection(cisco7200b.getId()));
        assertTrue(m_linkd.scheduleNodeCollection(cisco3700.getId()));
        assertTrue(m_linkd.scheduleNodeCollection(cisco2691.getId()));
        assertTrue(m_linkd.scheduleNodeCollection(cisco1700.getId()));
        assertTrue(m_linkd.scheduleNodeCollection(cisco3600.getId()));

        assertTrue(m_linkd.runSingleSnmpCollection(laptop.getId()));
        assertTrue(m_linkd.runSingleSnmpCollection(cisco7200a.getId()));
        assertTrue(m_linkd.runSingleSnmpCollection(cisco7200b.getId()));
        assertTrue(m_linkd.runSingleSnmpCollection(cisco3700.getId()));
        assertTrue(m_linkd.runSingleSnmpCollection(cisco2691.getId()));
        assertTrue(m_linkd.runSingleSnmpCollection(cisco1700.getId()));
        assertTrue(m_linkd.runSingleSnmpCollection(cisco3600.getId()));

        assertTrue(m_linkd.runSingleLinkDiscovery("example1"));
        
        final List<DataLinkInterface> links = m_dataLinkInterfaceDao.findAll();
        int start = getStartPoint(links);
        for (final DataLinkInterface link: links) {
            int id = link.getId().intValue();
            if (id == start) {
                checkLink(laptop, cisco7200a, 10, 3, link);
                assertEquals(DiscoveryProtocol.iproute, link.getProtocol());
            } else if (id == start+1) {
                checkLink(cisco7200a, cisco7200b, 2, 4, link);
                assertEquals(DiscoveryProtocol.iproute, link.getProtocol());
            } else if (id == start+10) {
                checkLink(cisco7200b, cisco7200a, 4, 2, link);
                assertEquals(DiscoveryProtocol.cdp, link.getProtocol());
            } else if (id == start+2) {
                checkLink(cisco7200b, cisco2691, 1, 4, link);
                assertEquals(DiscoveryProtocol.iproute, link.getProtocol());
            } else if (id == start+8) {
                checkLink(cisco2691,cisco7200b , 4, 1, link);
                assertEquals(DiscoveryProtocol.cdp, link.getProtocol());
            } else if (id == start+3) {
                checkLink(cisco7200b, cisco3700, 2, 1, link);
                assertEquals(DiscoveryProtocol.iproute, link.getProtocol());
            } else if (id == start+9) {
                checkLink(cisco3700, cisco7200b, 1, 2, link);
                assertEquals(DiscoveryProtocol.cdp, link.getProtocol());
            } else if (id == start+4) {
                checkLink(cisco1700, cisco2691, 2, 2, link);
                assertEquals(DiscoveryProtocol.iproute, link.getProtocol());
            } else if (id == start+7) {
                checkLink(cisco1700, cisco2691, 2, 2, link);
                assertEquals(DiscoveryProtocol.cdp, link.getProtocol());
            } else if (id == start+6) {
                checkLink(cisco3600, cisco2691, 2, 1, link);
                assertEquals(DiscoveryProtocol.cdp, link.getProtocol());
            } else if (id == start+5) {
                checkLink(cisco3600, cisco3700, 1, 3, link);
                assertEquals(DiscoveryProtocol.iproute, link.getProtocol());
            } else if (id == start+11) {
                checkLink(cisco3600, cisco3700, 1, 3, link);
                assertEquals(DiscoveryProtocol.cdp, link.getProtocol());
            } else {
                assertEquals(false, true);
            }
        }

        assertEquals("we should have found 12 data links", 12, links.size());
    }

