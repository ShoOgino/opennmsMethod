    @Test
    @JUnitSnmpAgents(value={
            @JUnitSnmpAgent(host=CISCO_WS_C2948_IP, port=161, resource=CISCO_WS_C2948_SNMP_RESOURCE),
            @JUnitSnmpAgent(host=CISCO_C870_IP, port=161, resource=CISCO_C870_SNMP_RESOURCE),
            @JUnitSnmpAgent(host=DARWIN_10_8_IP, port=161, resource=DARWIN_10_8_SNMP_RESOURCE),
            @JUnitSnmpAgent(host=NETGEAR_SW_108_IP, port=161, resource=NETGEAR_SW_108_SNMP_RESOURCE),
            @JUnitSnmpAgent(host=LINUX_UBUNTU_IP, port=161, resource=LINUX_UBUNTU_SNMP_RESOURCE)
    })
    // mrgarrison:192.0.2.5:-1    -------- ciscoswitch:192.0.2.7:47 ---cdp 
    // workstation:192.0.2.101:-1 -------- ciscoswitch:192.0.2.7:47 ---bridge 
    // cisco870:192.0.2.1:3       -------- ciscoswitch:192.0.2.7:52 ---cdp 
    // cisco870:192.0.2.1:1       -------- ciscoswitch:192.0.2.7:52 ---bridge 
    // cisco870:192.0.2.1:13      -------- ciscoswitch:192.0.2.7:52 ---bridge 
    // cisco870:192.0.2.1:12      -------- ciscoswitch:192.0.2.7:52 ---bridge 
    // linuxubuntu:192.0.2.14:4   -------- ciscoswitch:192.0.2.7:11 ---bridge 
    // ng108switch:192.0.2.8:8    -------- ciscoswitch:192.0.2.7:9  ---bridge 
    // darwin108:192.0.2.28:4     -------- ng108switch:192.0.2.8:1  ---bridge 
    public void testAllLink() throws Exception {

        Package example1 = m_linkdConfig.getPackage("example1");
        example1.setUseBridgeDiscovery(true);
        example1.setUseLldpDiscovery(false);
        example1.setUseOspfDiscovery(false);
        example1.setUseIsisDiscovery(false);
        example1.setUseIpRouteDiscovery(false);
        example1.setUseCdpDiscovery(true);
        example1.setForceIpRouteDiscoveryOnEthernet(false);
        example1.setSaveRouteTable(false);
        example1.setSaveStpNodeTable(false);
        example1.setSaveStpInterfaceTable(false);

        m_nodeDao.save(builder.getCiscoC870());
        m_nodeDao.save(builder.getCiscoWsC2948());
        m_nodeDao.save(builder.getNetGearSw108());
        m_nodeDao.save(builder.getDarwin108());       
        m_nodeDao.save(builder.getLinuxUbuntu());
        m_nodeDao.save(builder.getNodeWithoutSnmp(ACCESSPOINT_NAME, ACCESSPOINT_IP));
        m_nodeDao.save(builder.getNodeWithoutSnmp(WORKSTATION_NAME, WORKSTATION_IP));

        m_nodeDao.flush();


        final OnmsNode ciscorouter = m_nodeDao.findByForeignId("linkd", CISCO_C870_NAME);
        final OnmsNode ciscows = m_nodeDao.findByForeignId("linkd", CISCO_WS_C2948_NAME);
        final OnmsNode ngsw108 = m_nodeDao.findByForeignId("linkd", NETGEAR_SW_108_NAME);
        final OnmsNode mac = m_nodeDao.findByForeignId("linkd", DARWIN_10_8_NAME);
        final OnmsNode linux = m_nodeDao.findByForeignId("linkd", LINUX_UBUNTU_NAME);
        final OnmsNode ciscoap = m_nodeDao.findByForeignId("linkd", ACCESSPOINT_NAME);
        final OnmsNode workstation = m_nodeDao.findByForeignId("linkd", WORKSTATION_NAME);


        
        assertEquals(7, m_nodeDao.countAll());

        assertTrue(m_linkd.scheduleNodeCollection(ciscows.getId()));
        assertTrue(m_linkd.scheduleNodeCollection(ciscorouter.getId()));
        assertTrue(m_linkd.scheduleNodeCollection(ngsw108.getId()));
        assertTrue(m_linkd.scheduleNodeCollection(mac.getId()));
        assertTrue(m_linkd.scheduleNodeCollection(linux.getId()));
        assertTrue(!m_linkd.scheduleNodeCollection(ciscoap.getId()));
        assertTrue(!m_linkd.scheduleNodeCollection(workstation.getId()));

        assertTrue(m_linkd.runSingleSnmpCollection(ciscorouter.getId()));
        assertTrue(m_linkd.runSingleSnmpCollection(ciscows.getId()));
        assertTrue(m_linkd.runSingleSnmpCollection(ngsw108.getId()));
        assertTrue(m_linkd.runSingleSnmpCollection(mac.getId()));
        assertTrue(m_linkd.runSingleSnmpCollection(linux.getId()));
        
        final Collection<LinkableNode> linkables = m_linkd.getLinkableNodesOnPackage("example1");
        assertEquals(5, linkables.size());       

        assertEquals(0,m_dataLinkInterfaceDao.countAll());
                                       
        assertEquals(5, m_linkd.getLinkableNodesOnPackage("example1").size());

        assertTrue(m_linkd.runSingleLinkDiscovery("example1"));

        assertEquals(8,m_dataLinkInterfaceDao.countAll());
        
        //
        final DataLinkInterface mactongsw108link = m_dataLinkInterfaceDao.findByNodeIdAndIfIndex(mac.getId(),4).iterator().next();
        
        assertEquals(mac.getId(), mactongsw108link.getNode().getId());
        assertEquals(4,mactongsw108link.getIfIndex().intValue());
        assertEquals(ngsw108.getId(), mactongsw108link.getNodeParentId());
        assertEquals(1, mactongsw108link.getParentIfIndex().intValue());        

        final DataLinkInterface ngsw108linktociscows = m_dataLinkInterfaceDao.findByNodeIdAndIfIndex(ngsw108.getId(), 8).iterator().next();
        
        assertEquals(ngsw108.getId(), ngsw108linktociscows.getNode().getId());
        assertEquals(8,ngsw108linktociscows.getIfIndex().intValue());
        assertEquals(ciscows.getId(), ngsw108linktociscows.getNodeParentId());
        assertEquals(9, ngsw108linktociscows.getParentIfIndex().intValue());

        final DataLinkInterface ciscorouterlinktociscows2 = m_dataLinkInterfaceDao.findByNodeIdAndIfIndex(ciscows.getId(), 52).iterator().next();
        assertEquals(ciscows.getId(), ciscorouterlinktociscows2.getNode().getId());
        assertEquals(52, ciscorouterlinktociscows2.getIfIndex().intValue());
        assertEquals(ciscorouter.getId(), ciscorouterlinktociscows2.getNodeParentId());
        assertEquals(3, ciscorouterlinktociscows2.getParentIfIndex().intValue());

        final DataLinkInterface linuxubuntulinktociscows = m_dataLinkInterfaceDao.findByNodeIdAndIfIndex(linux.getId(), 4).iterator().next();
        
        assertEquals(linux.getId(), linuxubuntulinktociscows.getNode().getId());
        assertEquals(4,linuxubuntulinktociscows.getIfIndex().intValue());
        assertEquals(ciscows.getId(), linuxubuntulinktociscows.getNodeParentId());
        assertEquals(11, linuxubuntulinktociscows.getParentIfIndex().intValue());

        final DataLinkInterface workstationlinktociscows = m_dataLinkInterfaceDao.findByNodeIdAndIfIndex(workstation.getId(), -1).iterator().next();
        
        assertEquals(workstation.getId(), workstationlinktociscows.getNode().getId());
        assertEquals(-1,workstationlinktociscows.getIfIndex().intValue());
        assertEquals(ciscows.getId(), workstationlinktociscows.getNodeParentId());
        assertEquals(47, workstationlinktociscows.getParentIfIndex().intValue());

        final DataLinkInterface ciscoaplinktociscows = m_dataLinkInterfaceDao.findByNodeIdAndIfIndex(ciscoap.getId(), -1).iterator().next();
        
        assertEquals(ciscoap.getId(), ciscoaplinktociscows.getNode().getId());
        assertEquals(-1, ciscoaplinktociscows.getIfIndex().intValue());
        assertEquals(ciscows.getId(), ciscoaplinktociscows.getNodeParentId());
        assertEquals(47,ciscoaplinktociscows.getParentIfIndex().intValue());
        

        Thread.sleep(5000);

        assertTrue(m_linkd.runSingleSnmpCollection(ciscorouter.getId()));
        assertTrue(m_linkd.runSingleSnmpCollection(ciscows.getId()));
        assertTrue(m_linkd.runSingleSnmpCollection(ngsw108.getId()));
        assertTrue(m_linkd.runSingleSnmpCollection(mac.getId()));
        assertTrue(m_linkd.runSingleSnmpCollection(linux.getId()));

        assertTrue(m_linkd.runSingleLinkDiscovery("example1"));
        for (OnmsAtInterface onmsat: m_atInterfaceDao.findAll()) {
            printAtInterface(onmsat);
        }
        for (DataLinkInterface link: m_dataLinkInterfaceDao.findAll())
            printLink(link);

        assertEquals(8,m_dataLinkInterfaceDao.countAll());

    }

