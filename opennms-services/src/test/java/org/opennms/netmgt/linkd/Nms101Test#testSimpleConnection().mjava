    /*
     * cisco1700 --- cisco1700b ??????
     * cisco1700b clearly does not have relation with this net...it has the same address
     * of cisco2691......and the link is between cisco1700 and cisco2691
     * what a fake....
     * 
     */
	@Test
    @JUnitSnmpAgents(value={
        @JUnitSnmpAgent(host="10.1.5.1", port=161, resource="classpath:linkd/nms101/cisco1700b.properties"),
        @JUnitSnmpAgent(host="10.1.5.2", port=161, resource="classpath:linkd/nms101/cisco1700.properties")
    })
    public void testSimpleConnection() throws Exception {
		m_nodeDao.save(getCisco1700());
		m_nodeDao.save(getCisco1700b());
		m_nodeDao.save(getExampleCom());
        m_nodeDao.flush();

        final OnmsNode cisco1700 = m_nodeDao.findByForeignId("linkd", "cisco1700");
        final OnmsNode cisco1700b = m_nodeDao.findByForeignId("linkd", "cisco1700b");

        LogUtils.debugf(this, "cisco1700  = %s", cisco1700);
        LogUtils.debugf(this, "cisco1700b = %s", cisco1700b);

        assertTrue(m_linkd.scheduleNodeCollection(cisco1700.getId()));
        assertTrue(m_linkd.scheduleNodeCollection(cisco1700b.getId()));

        assertTrue(m_linkd.runSingleSnmpCollection(cisco1700.getId()));
        assertTrue(m_linkd.runSingleSnmpCollection(cisco1700b.getId()));

        assertTrue(m_linkd.runSingleLinkDiscovery("example1"));
        
        final List<DataLinkInterface> ifaces = m_dataLinkInterfaceDao.findAll();
        for (final DataLinkInterface link: ifaces) {
            printLink(link);
        }
        assertEquals("we should have found 0 data link", 0, ifaces.size());
    }

