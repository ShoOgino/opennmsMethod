    @Test
    @JUnitSnmpAgents(value={
            @JUnitSnmpAgent(host=LINUX_UBUNTU_IP, port=161, resource="classpath:linkd/"+LINUX_UBUNTU_IP+"-walk.txt")
    })
    @Transactional
    public final void testLINUXUBUNTUCapsdCollection() throws MarshalException, ValidationException, IOException {
        m_capsd.init();
        m_capsd.start();
        m_capsd.scanSuspectInterface(LINUX_UBUNTU_IP);
        

        OnmsIpInterface ipmain = m_interfaceDao.findByIpAddress(LINUX_UBUNTU_IP).get(0);
        assertTrue("Should have 1 ip master interface",ipmain != null);
        
        Set<OnmsIpInterface> ifs = ipmain.getNode().getIpInterfaces();
        
        assertTrue("should have 2 ipinterface", ifs.size() == 2);
        for (OnmsIpInterface ip: ifs) {
            assertTrue("The if index should not be null", ip.getIfIndex() != null);
            assertTrue("The ifindex is not corresponding: ", ip.getIfIndex().intValue() == LINUX_UBUNTU_IP_IF_MAP.get(ip.getIpAddress()).intValue());
            assertTrue("The snmp interface is null",ip.getSnmpInterface() != null);
            assertTrue("The mac address is null",ip.getSnmpInterface().getPhysAddr() != null);
            assertTrue("The mac address is not corresponding"
                   ,ip.getSnmpInterface().getPhysAddr().equals(LINUX_UBUNTU_IF_MAC_MAP.get(ip.getIfIndex())));
        }

        Set<OnmsSnmpInterface> snmpifs = ipmain.getNode().getSnmpInterfaces();
        assertTrue("Has 6 snmp interface. Found: " + snmpifs.size(), snmpifs.size() == 6);
        for (OnmsSnmpInterface snmpinterface: snmpifs) {
            if (snmpinterface.getIfIndex() == 1)
            assertTrue("The mac address is not null for ifindex 1", snmpinterface.getPhysAddr() == null);
            else {
            assertTrue("The mac must be valid", snmpinterface.getPhysAddr().length() == 12);
            assertTrue("The mac for ifindex must correspond", 
                       snmpinterface.getPhysAddr().equals(LINUX_UBUNTU_IF_MAC_MAP.get(snmpinterface.getIfIndex())));
            }
        }
//        assertTrue(!m_linkd.scheduleNodeCollection(ipmain.getNode().getId()));
//        assertTrue(m_linkd.runSingleSnmpCollection(ipmain.getNode().getId()));
        m_capsd.stop();
    }

