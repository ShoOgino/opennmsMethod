    /*
     *  Discover the following topology
     * 
     *                     mikrotik
     *                         |
     *  ----------------------wifi-----------------
     *    |      |        |            |
     *  mac1    mac2    samsung     mobile
     *  
     */
    @Test
    @JUnitSnmpAgents(value={
        @JUnitSnmpAgent(host=MIKROTIK_IP, port=161, resource="classpath:linkd/nms102/"+MIKROTIK_NAME+"-"+MIKROTIK_IP+"-walk.txt"),
        @JUnitSnmpAgent(host=SAMSUNG_IP, port=161, resource="classpath:linkd/nms102/"+SAMSUNG_NAME+"-"+SAMSUNG_IP+"-walk.txt"),
        @JUnitSnmpAgent(host=MAC1_IP, port=161, resource="classpath:linkd/nms102/"+"mac-"+MAC1_IP+"-walk.txt"),
        @JUnitSnmpAgent(host=MAC2_IP, port=161, resource="classpath:linkd/nms102/"+"mac-"+MAC2_IP+"-walk.txt")
    })
    public void testLinks() throws Exception {

    	m_nodeDao.save(getMac1());
        m_nodeDao.save(getMac2());
        m_nodeDao.save(getMikrotik());
   	m_nodeDao.save(getSamsung());
   	m_nodeDao.save(getNodeWithoutSnmp("mobile", "192.168.0.13"));
    	m_nodeDao.flush();
    	
        final OnmsNode mac1 = m_nodeDao.findByForeignId("linkd", MAC1_NAME);
        final OnmsNode mac2 = m_nodeDao.findByForeignId("linkd", MAC2_NAME);
        final OnmsNode samsung = m_nodeDao.findByForeignId("linkd", SAMSUNG_NAME);
        final OnmsNode mikrotik = m_nodeDao.findByForeignId("linkd", MIKROTIK_NAME);

        assertTrue(m_linkd.scheduleNodeCollection(mac1.getId()));
        assertTrue(m_linkd.scheduleNodeCollection(mac2.getId()));
        assertTrue(m_linkd.scheduleNodeCollection(samsung.getId()));
        assertTrue(m_linkd.scheduleNodeCollection(mikrotik.getId()));
 
        assertTrue(m_linkd.runSingleSnmpCollection(mac1.getId()));
        assertTrue(m_linkd.runSingleSnmpCollection(mac2.getId()));
        assertTrue(m_linkd.runSingleSnmpCollection(samsung.getId()));
        assertTrue(m_linkd.runSingleSnmpCollection(mikrotik.getId()));
 
        assertTrue(m_linkd.runSingleLinkDiscovery("example1"));
        
        final List<DataLinkInterface> ifaces = m_dataLinkInterfaceDao.findAll();
        for (final DataLinkInterface link: ifaces) {
            printLink(link);
        }

        assertEquals("we should have found 3 data links", 3, ifaces.size());
    }

