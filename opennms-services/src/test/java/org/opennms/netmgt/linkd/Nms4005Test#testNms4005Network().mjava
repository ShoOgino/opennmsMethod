/*
 *  (3)10.1.1.2<>R1<>10.1.3.1 (2)---(1) 10.1.3.2 <>R3<>
 *        	   10.1.2.1                          <>R3<>
 *          	 (1)                             <>R3<>                                  
 *                |                              <>R3<>10.1.4.1 (2)---(1) 10.1.4.2<>R4
 *               (1)                             <>R3<>
 *             10.1.2.2                          <>R3<>
 * 			   <>R2<>10.1.5.1 (2)---(3) 10.1.5.2 <>R3<>
 */
    @Test
    @JUnitSnmpAgents(value={
            @JUnitSnmpAgent(host="10.1.1.2", port=161, resource="classpath:linkd/nms4005/10.1.1.2-walk.txt"),
            @JUnitSnmpAgent(host="10.1.2.2", port=161, resource="classpath:linkd/nms4005/10.1.2.2-walk.txt"),
            @JUnitSnmpAgent(host="10.1.3.2", port=161, resource="classpath:linkd/nms4005/10.1.3.2-walk.txt"),
            @JUnitSnmpAgent(host="10.1.4.2", port=161, resource="classpath:linkd/nms4005/10.1.4.2-walk.txt")
    })
    public void testNms4005Network() throws Exception {
    	m_nodeDao.save(builder.getR1());
    	m_nodeDao.save(builder.getR2());
    	m_nodeDao.save(builder.getR3());
    	m_nodeDao.save(builder.getR4());
    	
        final OnmsNode cisco1 = m_nodeDao.findByForeignId("linkd", R1_NAME);
        final OnmsNode cisco2 = m_nodeDao.findByForeignId("linkd", R2_NAME);
        final OnmsNode cisco3 = m_nodeDao.findByForeignId("linkd", R3_NAME);
        final OnmsNode cisco4 = m_nodeDao.findByForeignId("linkd", R4_NAME);

        assertTrue(m_linkd.scheduleNodeCollection(cisco1.getId()));
        assertTrue(m_linkd.scheduleNodeCollection(cisco2.getId()));
        assertTrue(m_linkd.scheduleNodeCollection(cisco3.getId()));
        assertTrue(m_linkd.scheduleNodeCollection(cisco4.getId()));

        assertTrue(m_linkd.runSingleSnmpCollection(cisco1.getId()));
        assertTrue(m_linkd.runSingleSnmpCollection(cisco2.getId()));
        assertTrue(m_linkd.runSingleSnmpCollection(cisco3.getId()));
        assertTrue(m_linkd.runSingleSnmpCollection(cisco4.getId()));

        assertTrue(m_linkd.runSingleLinkDiscovery("example1"));
        
        final List<DataLinkInterface> ifaces = m_dataLinkInterfaceDao.findAll();
        for (final DataLinkInterface link: ifaces) {
            printLink(link);
        }
        assertEquals("we should have found 4 data links", 4, ifaces.size());
        //Rerun collectionand discovery must be all the same...
        assertTrue(m_linkd.runSingleSnmpCollection(cisco1.getId()));
        assertTrue(m_linkd.runSingleSnmpCollection(cisco2.getId()));
        assertTrue(m_linkd.runSingleSnmpCollection(cisco3.getId()));
        assertTrue(m_linkd.runSingleSnmpCollection(cisco4.getId()));

        assertTrue(m_linkd.runSingleLinkDiscovery("example1"));
        
        assertEquals("we should have found 4 data links", 4, ifaces.size());

    }

