    @Test
    @JUnitSnmpAgents(value={
        @JUnitSnmpAgent(host=MIKROTIK_IP, port=161, resource="classpath:linkd/nms102/"+MIKROTIK_NAME+"-"+MIKROTIK_IP+"-walk.txt")
    })
    public void testMtxrWlRtabTableCollection() throws Exception {
        
        String name = "mtxrWlRtabTable";

        // froh
        MtxrWlRtabTable m_mtxrWlRtabTable = new MtxrWlRtabTable(InetAddressUtils.addr(MIKROTIK_IP));
        CollectionTracker[] tracker = new CollectionTracker[0];
        tracker = new CollectionTracker[]{m_mtxrWlRtabTable};
        SnmpAgentConfig snmpAgent = SnmpPeerFactory.getInstance().getAgentConfig(InetAddressUtils.addr(MIKROTIK_IP));
        SnmpWalker walker = SnmpUtils.createWalker(snmpAgent, name, tracker);
        walker.start();

        try {
            walker.waitFor();
        } catch (final InterruptedException e) {

        }
        
        Collection<MtxrWlRtabTableEntry> m_m_mtxrWlRtabTableEntryCollection = m_mtxrWlRtabTable.getEntries();
        assertEquals(4, m_m_mtxrWlRtabTableEntryCollection.size());
        
        int i=0;
        for (MtxrWlRtabTableEntry entry: m_m_mtxrWlRtabTableEntryCollection) {
            assertEquals(2, entry.getMtxrWlRtabIface().intValue());
            switch (i) {
                case 0: assertEquals("0015999f07ef", entry.getMtxrWlRtabAddr());
                        break;
                case 1: assertEquals("001b63cda9fd", entry.getMtxrWlRtabAddr());
                        break;
                case 2: assertEquals("60334b0817a8", entry.getMtxrWlRtabAddr());
                        break;
                case 3: assertEquals("f0728c99994d", entry.getMtxrWlRtabAddr());
                        break;
                default: assertEquals(true, false);
                        break;
            }
            i++;
        }
    }

