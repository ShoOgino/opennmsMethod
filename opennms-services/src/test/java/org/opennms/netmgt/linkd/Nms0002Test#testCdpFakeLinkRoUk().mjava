    /*
     * fixed a fake link found using cdp:
     * caused by duplicated ip address
s     * r-uk-nott-newt-103:Fa0:(1)<------>(4):Fa3:r-ro-suce-pict-001
     */
    @Test
    @JUnitSnmpAgents(value={
            @JUnitSnmpAgent(host = RPict001_IP, port = 161, resource = RPict001_SNMP_RESOURCE),
            @JUnitSnmpAgent(host = RNewt103_IP, port = 161, resource = RNewt103_SNMP_RESOURCE)
    })
    public void testCdpFakeLinkRoUk() throws Exception {
        
        m_nodeDao.save(getRPict001());
        m_nodeDao.save(getRNewt103());
        m_nodeDao.flush();

        Package example1 = m_linkdConfig.getPackage("example1");
        example1.setUseIsisDiscovery(false);
        example1.setUseIpRouteDiscovery(false);
        example1.setUseOspfDiscovery(false);
        example1.setUseLldpDiscovery(false);
        example1.setUseCdpDiscovery(true);
        example1.setUseBridgeDiscovery(false);

        example1.setEnableVlanDiscovery(false);

        example1.setSaveStpNodeTable(false);
        example1.setSaveStpInterfaceTable(false);
        example1.setSaveRouteTable(false);

        final OnmsNode routerRo = m_nodeDao.findByForeignId("linkd", RPict001_NAME);
        final OnmsNode routerUk = m_nodeDao.findByForeignId("linkd", RNewt103_NAME);
        
        assertTrue(m_linkd.scheduleNodeCollection(routerRo.getId()));
        assertTrue(m_linkd.scheduleNodeCollection(routerUk.getId()));

        assertTrue(m_linkd.runSingleSnmpCollection(routerRo.getId()));
        assertTrue(m_linkd.runSingleSnmpCollection(routerUk.getId()));
       
        assertEquals(0,m_dataLinkInterfaceDao.countAll());
                
        assertTrue(m_linkd.runSingleLinkDiscovery("example1"));
        
        assertEquals(0,m_dataLinkInterfaceDao.countAll());
    }

