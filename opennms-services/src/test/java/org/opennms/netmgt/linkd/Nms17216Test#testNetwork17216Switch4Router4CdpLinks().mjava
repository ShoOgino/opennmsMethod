    @Test
    @JUnitSnmpAgents(value={
            @JUnitSnmpAgent(host=SWITCH4_IP, port=161, resource=SWITCH4_SNMP_RESOURCE),
            @JUnitSnmpAgent(host=ROUTER3_IP, port=161, resource=ROUTER3_SNMP_RESOURCE)
    })
    public void testNetwork17216Switch4Router4CdpLinks() throws Exception {

        m_nodeDao.save(builder.getSwitch4());
        m_nodeDao.save(builder.getRouter3());

        m_nodeDao.flush();

        Package example1 = m_linkdConfig.getPackage("example1");
        assertEquals(false, example1.hasForceIpRouteDiscoveryOnEthernet());
        example1.setUseLldpDiscovery(false);
        example1.setUseBridgeDiscovery(false);
        example1.setUseOspfDiscovery(false);
        example1.setUseIpRouteDiscovery(false);
        example1.setUseCdpDiscovery(true);
        example1.setEnableVlanDiscovery(false);
        example1.setSaveRouteTable(false);
        example1.setSaveStpInterfaceTable(false);
        example1.setSaveStpNodeTable(false);
        example1.setUseIsisDiscovery(false);

        final OnmsNode switch4 = m_nodeDao.findByForeignId("linkd", SWITCH4_NAME);
        final OnmsNode router3 = m_nodeDao.findByForeignId("linkd", ROUTER3_NAME);

        final Integer switch4id = switch4.getId();
        final Integer router3id = router3.getId();

        assertTrue(m_linkd.scheduleNodeCollection(switch4id));
        assertTrue(m_linkd.scheduleNodeCollection(router3id));

        assertTrue(m_linkd.runSingleSnmpCollection(switch4id));
        assertTrue(m_linkd.runSingleSnmpCollection(router3id));

        assertEquals(0,m_dataLinkInterfaceDao.countAll());

        final Collection<LinkableNode> nodes = m_linkd.getLinkableNodesOnPackage("example1");

        assertEquals(2, nodes.size());

        for (LinkableNode node: nodes) {
            assertEquals(1, node.getCdpInterfaces().size());
        }

        assertTrue(m_linkd.runSingleLinkDiscovery("example1"));

        assertEquals(1,m_dataLinkInterfaceDao.countAll());
        final List<DataLinkInterface> datalinkinterfaces = m_dataLinkInterfaceDao.findAll();
        assertEquals(1, datalinkinterfaces.size());

        checkLinks(datalinkinterfaces,
            // switch1 gi0/9 -> switch2 gi0/1 --lldp
            new DataLinkTestMatcher(router3, switch4, 9, 10001, cdp)
        );
    }

