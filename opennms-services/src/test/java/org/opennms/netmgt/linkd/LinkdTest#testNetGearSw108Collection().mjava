    @Test
    @JUnitSnmpAgents(value={
            @JUnitSnmpAgent(host=NETGEAR_SW_108_IP, port=161, resource="classpath:linkd/nms7467/"+NETGEAR_SW_108_IP+"-walk.txt")
    })
    public void testNetGearSw108Collection() throws Exception {
        m_nodeDao.save(builder.getNetGearSw108());
        m_nodeDao.flush();

        final OnmsNode ngsw108 = m_nodeDao.findByForeignId("linkd", NETGEAR_SW_108_NAME);

        assertTrue(m_linkd.scheduleNodeCollection(ngsw108.getId()));

        assertTrue(m_linkd.runSingleSnmpCollection(ngsw108.getId()));

        // linkd has 1 linkable node
        assertEquals(1, m_linkd.getLinkableNodesOnPackage("example1").size());
        LinkableNode linkNode = m_linkd.getLinkableNodesOnPackage("example1").iterator().next();
        
        // linkabble node is not null
        assertTrue(linkNode != null);
        
        // has 0 route (next hop must be valid!) no ip route table
        assertEquals(0,linkNode.getRouteInterfaces().size());
        // has 0 vlan 
        assertEquals(0, m_vlanDao.countAll());
        
        String packageName = m_linkdConfig.getFirstPackageMatch(InetAddressUtils.addr(NETGEAR_SW_108_IP)).getName();

        assertEquals("example1", packageName);
        
        assertEquals(1,linkNode.getBridgeIdentifiers().size());

        // has 1 stp node entry check the bridge identifier and protocol
        assertEquals(NETGEAR_SW_108_BRIDGEID,linkNode.getBridgeIdentifier(1));
        
        // has 8 stp entry che ifIndex must be different then -1
        // 
        assertEquals(8, linkNode.getStpInterfaces().get(1).size());

        // no cdp inteface also if the walk return several interfaces
        assertEquals("cdp not supported",0,linkNode.getCdpInterfaces().size());
        
        for (OnmsStpInterface stpiface: linkNode.getStpInterfaces().get(1)) {
            assertTrue("should have a valid ifindex", stpiface.getIfIndex().intValue() > 0);
            assertTrue("should have a valid bridgeport", stpiface.getBridgePort().intValue() > 0);
        }

        // This make shure that the ip/mac association is saved
        /*
        * nodelabel:ip:mac:ifindex:ifdescr
        *      
        * NETGEAR_SW_108:192.0.2.8:00223ff00b7b::
        * Run the spanning tree protocol
        * with bridge identifier: 00223ff00b7b
        * Transparent Bridge
        */
        
        final Set<String> macAddresses = m_linkd.getMacAddressesOnPackage(packageName);
        assertNotNull(macAddresses);
        assertEquals(1, macAddresses.size());
        List<AtInterface> ats = m_linkd.getAtInterfaces(packageName, "00223ff00b7b");
        
        for (AtInterface at : ats) {
            if( at.getIpAddress().getHostAddress().equals("192.0.2.8"))
                assertTrue(at.getIfIndex().intValue() == -1);
            else 
                fail("ip: "+ at.getIpAddress().getHostAddress() + "does not match any known ip address");
        }

        
        // Now Let's test the database
        //1 atinterface in database: has itself in ipadress to media
        assertEquals(1, m_atInterfaceDao.findAll().size());

        final Criteria criteria = new Criteria(OnmsIpRouteInterface.class);
        criteria.setAliases(Arrays.asList(new Alias[] {
            new Alias("node", "node", JoinType.LEFT_JOIN)
        }));
        criteria.addRestriction(new EqRestriction("node.id", ngsw108.getId()));
        final List<OnmsIpRouteInterface> iproutes = m_ipRouteInterfaceDao.findMatching(criteria);
        // 7 route entry in database
        for (OnmsIpRouteInterface iproute: iproutes) {
            System.out.println(iproute.getRouteDest()+"/"+iproute.getRouteMask()+"/"+iproute.getRouteNextHop()+"/"+iproute.getRouteIfIndex());
        }
        assertEquals(0, iproutes.size());
        
        // 0 entry in vlan
        assertEquals(0, m_vlanDao.findAll().size());
 
        // 1 entry in stpnode
        assertEquals(1, m_stpNodeDao.countAll());
        
        OnmsStpNode stpnode = m_stpNodeDao.findByNodeAndVlan(ngsw108.getId(), 1);
        assertTrue(NETGEAR_SW_108_BRIDGEID.equals(stpnode.getBaseBridgeAddress()));
        assertEquals(8, stpnode.getBaseNumPorts().intValue());

        assertEquals(BridgeBaseType.TRANSPARENT_ONLY,stpnode.getBaseType());
        assertEquals(StpProtocolSpecification.IEEE8021D,stpnode.getStpProtocolSpecification());
        
        
        // 50 entry in stpinterface
        assertEquals(8, m_stpInterfaceDao.findAll().size());        
        
    }

