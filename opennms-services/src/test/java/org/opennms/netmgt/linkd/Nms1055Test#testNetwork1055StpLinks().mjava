    /*
    * We want to test that the next hop router discovered 
    * links can be discovered using the ospf neb table
    */
   @Test
   @JUnitSnmpAgents(value={
           @JUnitSnmpAgent(host=PENROSE_IP, port=161, resource="classpath:linkd/nms1055/"+PENROSE_NAME+"_"+PENROSE_IP+".txt"),
           @JUnitSnmpAgent(host=DELAWARE_IP, port=161, resource="classpath:linkd/nms1055/"+DELAWARE_NAME+"_"+DELAWARE_IP+".txt")
   })
   public void testNetwork1055StpLinks() throws Exception {
       m_nodeDao.save(getPenrose());
       m_nodeDao.save(getDelaware());
       m_nodeDao.flush();
       
       Package example1 = m_linkdConfig.getPackage("example1");
       example1.setUseBridgeDiscovery(true);
       example1.setUseLldpDiscovery(false);
       example1.setUseCdpDiscovery(false);
       example1.setUseIpRouteDiscovery(false);
       example1.setUseOspfDiscovery(false);
       example1.setUseIsisDiscovery(false);

       example1.setSaveRouteTable(false);
       example1.setSaveStpInterfaceTable(false);
       example1.setSaveStpNodeTable(false);

       final OnmsNode penrose = m_nodeDao.findByForeignId("linkd", PENROSE_NAME);
       final OnmsNode delaware = m_nodeDao.findByForeignId("linkd", DELAWARE_NAME);

       assertTrue(m_linkd.scheduleNodeCollection(penrose.getId()));
       assertTrue(m_linkd.scheduleNodeCollection(delaware.getId()));

       assertTrue(m_linkd.runSingleSnmpCollection(penrose.getId()));
       assertTrue(m_linkd.runSingleSnmpCollection(delaware.getId()));
 
       assertEquals(0,m_dataLinkInterfaceDao.countAll());

       assertTrue(m_linkd.runSingleLinkDiscovery("example1"));

       assertEquals(1,m_dataLinkInterfaceDao.countAll());

   }

