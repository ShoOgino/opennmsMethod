    /**
     * Send a raw syslog message and expect a given event as a result
     * 
     * @param testPDU The raw syslog message as it would appear on the wire (just the UDP payload)
     * @param expectedHost The host from which the event should be resolved as originating
     * @param expectedUEI The expected UEI of the resulting event
     * @param expectedLogMsg The expected contents of the logmsg for the resulting event 
     * 
     * @throws UnknownHostException 
     * @throws InterruptedException 
     */
    private List<Event> doMessageTest(String testPDU, String expectedHost, String expectedUEI, String expectedLogMsg) throws UnknownHostException, InterruptedException {
        startSyslogdGracefully();
        
        Event expectedEvent = new Event();
        expectedEvent.setUei(expectedUEI);
        expectedEvent.setSource("syslogd");
        expectedEvent.setInterface(expectedHost);
        Logmsg logmsg = new Logmsg();
        logmsg.setDest("logndisplay");
        logmsg.setContent(expectedLogMsg);
        expectedEvent.setLogmsg(logmsg);
    
        EventAnticipator ea = new EventAnticipator();
        getEventIpcManager().addEventListener(ea);
        ea.anticipateEvent(expectedEvent);
        
        SyslogClient sc = null;
        sc = new SyslogClient(null, 10, SyslogClient.LOG_DEBUG);
        sc.syslog(SyslogClient.LOG_DEBUG, testPDU);
        
        assertEquals(0, ea.waitForAnticipated(2000).size());
        Thread.sleep(2000);
        assertEquals(0, ea.unanticipatedEvents().size());
        
        Event receivedEvent = ea.getAnticipatedEventsRecieved().get(0);
        assertEquals("Log messages do not match", expectedLogMsg, receivedEvent.getLogmsg().getContent());
        
        return ea.getAnticipatedEventsRecieved();
    }

