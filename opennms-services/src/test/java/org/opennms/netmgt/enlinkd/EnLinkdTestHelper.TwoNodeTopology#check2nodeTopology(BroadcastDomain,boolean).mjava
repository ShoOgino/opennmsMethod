    public void check2nodeTopology(BroadcastDomain domain, boolean revertedbblink) throws BridgeTopologyException {
        Set<BridgePortWithMacs> forwardersA = domain.getForwarders(nodeAId);
        Set<BridgePortWithMacs> forwardersB = domain.getForwarders(nodeBId);
        assertEquals(1, forwardersA.size());
        assertEquals(1, forwardersB.size());
        Set<String> formacsA = new HashSet<String>();
        BridgePortWithMacs forwardA = forwardersA.iterator().next();
        assertEquals(nodeAId.intValue(), forwardA.getPort().getNodeId().intValue());
        assertEquals(portAB, forwardA.getPort().getBridgePort());
        formacsA.addAll(forwardA.getMacs());
        
        Set<String> formacsB = new HashSet<String>();
        BridgePortWithMacs forwardB = forwardersB.iterator().next();
        assertEquals(nodeBId.intValue(), forwardB.getPort().getNodeId().intValue());
        assertEquals(portBA, forwardB.getPort().getBridgePort());
        formacsB.addAll(forwardB.getMacs());

        assertTrue(formacsA.contains(macAforwd4));
        assertTrue(formacsA.contains(macAforwd5));
        assertTrue(formacsA.contains(macAforwd6));
        assertTrue(formacsB.contains(macBforwd1));
        assertTrue(formacsB.contains(macBforwd2));
        assertTrue(formacsB.contains(macBforwd3));

    	List<SharedSegment> shsegs = domain.getSharedSegments();
        assertEquals(5, shsegs.size());
        for (SharedSegment shared: shsegs) {
            assertTrue(!shared.noMacsOnSegment());
            Set<Integer> nodeidsOnSegment = shared.getBridgeIdsOnSegment();
            List<BridgeMacLink> links = SharedSegment.getBridgeMacLinks(shared);
            List<BridgeBridgeLink> bblinks = SharedSegment.getBridgeBridgeLinks(shared);
            if (shared.getMacsOnSegment().contains(macshared1)) {
                assertEquals(2, nodeidsOnSegment.size());
                assertEquals(3, shared.getMacsOnSegment().size());
                assertEquals(3, links.size());
                assertEquals(1, bblinks.size());
                assertTrue(nodeidsOnSegment.contains(nodeAId));
                assertTrue(nodeidsOnSegment.contains(nodeBId));
                assertTrue(shared.getMacsOnSegment().contains(macshared2));
                assertTrue(shared.getMacsOnSegment().contains(macshared3));
                assertEquals(1, SharedSegment.getBridgeBridgeLinks(shared).size());
                BridgeBridgeLink dlink = SharedSegment.getBridgeBridgeLinks(shared).iterator().next();
                Set<String> macs = new HashSet<String>();
                if (revertedbblink) {
                	assertEquals(nodeBId, dlink.getDesignatedNode().getId());
                	assertEquals(portBA, dlink.getDesignatedPort());
                	assertEquals(nodeAId, dlink.getNode().getId());
                	assertEquals(portAB, dlink.getBridgePort());                   
                        for (BridgeMacLink link: links) {
                            assertEquals(BridgeMacLinkType.BRIDGE_LINK, link.getLinkType());
                            assertTrue(shared.getMacsOnSegment().contains(link.getMacAddress()));
                            assertEquals(link.getNode().getId().intValue(), nodeBId.intValue());
                            assertEquals(portBA, link.getBridgePort());
                            assertEquals(BridgeMacLinkType.BRIDGE_LINK, link.getLinkType());
                            assertTrue(!macs.contains(link.getMacAddress()));
                            macs.add(link.getMacAddress());
                        }
                } else {
                	assertEquals(nodeAId, dlink.getDesignatedNode().getId());
                	assertEquals(portAB, dlink.getDesignatedPort());
                	assertEquals(nodeBId, dlink.getNode().getId());
                	assertEquals(portBA, dlink.getBridgePort());                                   	
                        for (BridgeMacLink link: links) {
                            assertEquals(BridgeMacLinkType.BRIDGE_LINK, link.getLinkType());
                            assertTrue(shared.getMacsOnSegment().contains(link.getMacAddress()));
                            assertEquals(link.getNode().getId().intValue(), nodeAId.intValue());
                            assertEquals(portAB, link.getBridgePort());
                            assertEquals(BridgeMacLinkType.BRIDGE_LINK, link.getLinkType());
                            assertTrue(!macs.contains(link.getMacAddress()));
                            macs.add(link.getMacAddress());
                        }
                }
                assertTrue(macs.contains(macshared1));
                assertTrue(macs.contains(macshared2));
                assertTrue(macs.contains(macshared3));

            } else if (shared.getMacsOnSegment().contains(macB21)) {
                assertEquals(0, SharedSegment.getBridgeBridgeLinks(shared).size());
                assertEquals(1, nodeidsOnSegment.size());
                assertTrue(nodeidsOnSegment.contains(nodeBId));
                assertEquals(3, shared.getMacsOnSegment().size());
                assertEquals(3, links.size());
                assertTrue(shared.getMacsOnSegment().contains(macB22));
                assertTrue(shared.getMacsOnSegment().contains(macB23));
                Set<String> macs = new HashSet<String>();
               for (BridgeMacLink link: links) {
                    assertEquals(nodeBId, link.getNode().getId());
                    assertEquals(portB2, link.getBridgePort());
                    assertEquals(BridgeMacLinkType.BRIDGE_LINK, link.getLinkType());
                    assertTrue(!macs.contains(link.getMacAddress()));
                    macs.add(link.getMacAddress());
                }
               assertTrue(macs.contains(macB21));
               assertTrue(macs.contains(macB22));
               assertTrue(macs.contains(macB23));
            } else if (shared.getMacsOnSegment().contains(macB71)) {
                assertEquals(0, SharedSegment.getBridgeBridgeLinks(shared).size());
                assertEquals(1, nodeidsOnSegment.size());
                assertTrue(nodeidsOnSegment.contains(nodeBId));
                assertEquals(3, shared.getMacsOnSegment().size());
                assertEquals(3, links.size());
                assertTrue(shared.getMacsOnSegment().contains(macB72));
                assertTrue(shared.getMacsOnSegment().contains(macB73));
                Set<String> macs = new HashSet<String>();
                for (BridgeMacLink link: links) {
                    assertEquals(nodeBId, link.getNode().getId());
                    assertEquals(portB7, link.getBridgePort());
                    assertEquals(BridgeMacLinkType.BRIDGE_LINK, link.getLinkType());
                    assertTrue(!macs.contains(link.getMacAddress()));
                    macs.add(link.getMacAddress());
                }
               assertTrue(macs.contains(macB71));
               assertTrue(macs.contains(macB72));
               assertTrue(macs.contains(macB73));
            } else if (shared.getMacsOnSegment().contains(macA11)) {
                assertEquals(0, SharedSegment.getBridgeBridgeLinks(shared).size());
                assertEquals(1, nodeidsOnSegment.size());
                assertTrue(nodeidsOnSegment.contains(nodeAId));
                assertEquals(4, shared.getMacsOnSegment().size());
                assertEquals(4, links.size());
                assertTrue(shared.getMacsOnSegment().contains(macA12));
                assertTrue(shared.getMacsOnSegment().contains(macA13));
                assertTrue(shared.getMacsOnSegment().contains(macA14));
                Set<String> macs = new HashSet<String>();
                for (BridgeMacLink link: links) {
                    assertEquals(nodeAId, link.getNode().getId());
                    assertEquals(portA1, link.getBridgePort());
                    assertEquals(BridgeMacLinkType.BRIDGE_LINK, link.getLinkType());
                    assertTrue(!macs.contains(link.getMacAddress()));
                    macs.add(link.getMacAddress());
                }
               assertTrue(macs.contains(macA11));
               assertTrue(macs.contains(macA12));
               assertTrue(macs.contains(macA13));
               assertTrue(macs.contains(macA14));
              } else if (shared.getMacsOnSegment().contains(macA61)) {
                assertEquals(0, SharedSegment.getBridgeBridgeLinks(shared).size());
                assertEquals(1, nodeidsOnSegment.size());
                assertTrue(nodeidsOnSegment.contains(nodeAId));
                assertEquals(4, shared.getMacsOnSegment().size());
                assertEquals(4, links.size());
                assertTrue(shared.getMacsOnSegment().contains(macA62));
                assertTrue(shared.getMacsOnSegment().contains(macA63));
                assertTrue(shared.getMacsOnSegment().contains(macA64));
                Set<String> macs = new HashSet<String>();
                for (BridgeMacLink link: links) {
                    assertEquals(nodeAId, link.getNode().getId());
                    assertEquals(portA6, link.getBridgePort());
                    assertEquals(BridgeMacLinkType.BRIDGE_LINK, link.getLinkType());
                    assertTrue(!macs.contains(link.getMacAddress()));
                    macs.add(link.getMacAddress());
                }
               assertTrue(macs.contains(macA61));
               assertTrue(macs.contains(macA62));
               assertTrue(macs.contains(macA63));
               assertTrue(macs.contains(macA64));
            } else {
                assertTrue(false);
            }
        }
    }

