	/*
     * 
MUMBAI_10.205.56.5: 
===================
root@Mumbai> show ospf neighbor
Address          Interface              State     ID               Pri  Dead
192.168.5.14     ge-0/0/1.0             Full      192.168.9.1      128    31 ---->Bangalore
192.168.5.18     ge-0/0/2.0             Full      192.168.20.1     128    34 ---->Bagmane
192.168.5.22     ge-0/1/1.0             Full      192.168.22.1     128    38 ---->Mysore
192.168.5.10     ge-0/1/2.0             Full      192.168.7.1      128    35 ---->Delhi

DELHI_10.205.56.7:
==================
admin@Delhi> show ospf neighbor
Address          Interface              State     ID               Pri  Dead
192.168.1.6      ge-1/0/1.0             Full      192.168.9.1      128    31  ---->Bangalore
192.168.5.9      ge-1/0/2.0             Full      192.168.5.1      128    39  ---->Mumbai
172.16.7.2       ge-1/1/6.0             Full      10.205.56.1      128    33  ---->Space_ex_sw1

BANGALORE_10.205.56.9:
======================
root@Bangalore> show ospf neighbor
Address          Interface              State     ID               Pri  Dead
192.168.5.13     ge-0/0/0.0             Full      192.168.5.1      128    33  ---->Mumbai
192.168.1.5      ge-0/0/1.0             Full      192.168.7.1      128    32  ---->Delhi
172.16.9.2       ge-0/0/3.0             Full      10.205.56.2      128    34  ---->Space_ex_sw2
192.168.1.10     ge-0/1/0.0             Full      192.168.20.1     128    38  ---->Bagmane

Bagmane_10.205.56.20:
====================
admin@Bagmane> show ospf neighbor
Address          Interface              State     ID               Pri  Dead
192.168.5.17     ge-1/0/0.0             Full      192.168.5.1      128    30 ----> Mumbai
172.16.20.2      ge-1/0/2.0             Full      10.205.56.42     128    31 ----> J6350_42
192.168.1.9      ge-1/0/4.0             Full      192.168.9.1      128    32 ----> Bangalore
192.168.1.14     ge-1/0/5.0             Full      192.168.22.1     128    33 ----> Mysore

Mysore_10.205.56.22:
===================
admin@Mysore> show ospf neighbor
Address          Interface              State     ID               Pri  Dead
192.168.5.21     ge-0/0/1.0             Full      192.168.5.1      128    32 ----> Mumbai
192.168.1.13     ge-0/1/1.0             Full      192.168.20.1     128    38 ----> bagmane

Space-EX-SW1_10.205.56.1:
=========================
root@Space-EX-SW1> show ospf neighbor
Address          Interface              State     ID               Pri  Dead
172.16.10.2      ge-0/0/0.0             Full      10.205.56.2      128    34 ----> Space_ex_sw2
172.16.7.1       ge-0/0/6.0             Full      192.168.7.1      128    32 ----> Delhi

Space-EX-SW2_10.205.56.2: 
=========================
root@Space-EX-SW2> show ospf neighbor
Address          Interface              State     ID               Pri  Dead
172.16.10.1      ge-0/0/0.0             Full      10.205.56.1      128    35 ----> Space_ex_sw1
172.16.9.1       ge-0/0/3.0             Full      192.168.9.1      128    32 ----> Bangalore

*/
    @Test
    @JUnitSnmpAgents(value={
            @JUnitSnmpAgent(host=MUMBAI_IP, port=161, resource=MUMBAI_SNMP_RESOURCE_B),
            @JUnitSnmpAgent(host=DELHI_IP, port=161, resource=DELHI_SNMP_RESOURCE_B),
            @JUnitSnmpAgent(host=BANGALORE_IP, port=161, resource=BANGALORE_SNMP_RESOURCE_B),
            @JUnitSnmpAgent(host=BAGMANE_IP, port=161, resource=BAGMANE_SNMP_RESOURCE_B),
            @JUnitSnmpAgent(host=MYSORE_IP, port=161, resource=MYSORE_SNMP_RESOURCE_B),
            @JUnitSnmpAgent(host=SPACE_EX_SW1_IP, port=161, resource=SPACE_EX_SW1_SNMP_RESOURCE_B),
            @JUnitSnmpAgent(host=SPACE_EX_SW2_IP, port=161, resource=SPACE_EX_SW2_SNMP_RESOURCE_B),
            @JUnitSnmpAgent(host=J6350_42_IP, port=161, resource=J6350_42_SNMP_RESOURCE_B),
            @JUnitSnmpAgent(host=SRX_100_IP, port=161, resource=SRX_100_SNMP_RESOURCE_B)
    })
    public void testNetwork10205bOspfLinks() throws Exception {
        m_nodeDao.save(builder.getMumbai());
        m_nodeDao.save(builder.getDelhi());
        m_nodeDao.save(builder.getBangalore());
        m_nodeDao.save(builder.getBagmane());
        m_nodeDao.save(builder.getMysore());
        m_nodeDao.save(builder.getSpaceExSw1());
        m_nodeDao.save(builder.getSpaceExSw2());
        m_nodeDao.save(builder.getJ635042());
        m_nodeDao.save(builder.getSRX100());
        m_nodeDao.flush();

        final OnmsNode mumbai = m_nodeDao.findByForeignId("linkd", MUMBAI_NAME);
        final OnmsNode delhi = m_nodeDao.findByForeignId("linkd", DELHI_NAME);
        final OnmsNode bangalore = m_nodeDao.findByForeignId("linkd", BANGALORE_NAME);
        final OnmsNode bagmane = m_nodeDao.findByForeignId("linkd", BAGMANE_NAME);
        final OnmsNode mysore = m_nodeDao.findByForeignId("linkd", MYSORE_NAME);
        final OnmsNode spaceexsw1 = m_nodeDao.findByForeignId("linkd", SPACE_EX_SW1_NAME);
        final OnmsNode spaceexsw2 = m_nodeDao.findByForeignId("linkd", SPACE_EX_SW2_NAME);
        final OnmsNode j635042 = m_nodeDao.findByForeignId("linkd", J6350_42_NAME);
        final OnmsNode srx100 = m_nodeDao.findByForeignId("linkd", SRX_100_NAME);

        m_linkdConfig.getConfiguration().setUseBridgeDiscovery(false);
        m_linkdConfig.getConfiguration().setUseCdpDiscovery(false);
        m_linkdConfig.getConfiguration().setUseOspfDiscovery(true);
        m_linkdConfig.getConfiguration().setUseLldpDiscovery(false);
        m_linkdConfig.getConfiguration().setUseIsisDiscovery(false);

        assertTrue(!m_linkdConfig.useLldpDiscovery());
        assertTrue(!m_linkdConfig.useCdpDiscovery());
        assertTrue(m_linkdConfig.useOspfDiscovery());
        assertTrue(!m_linkdConfig.useBridgeDiscovery());
        assertTrue(!m_linkdConfig.useIsisDiscovery());

        assertTrue(m_linkd.scheduleNodeCollection(mumbai.getId()));
        assertTrue(m_linkd.scheduleNodeCollection(delhi.getId()));
        assertTrue(m_linkd.scheduleNodeCollection(bangalore.getId()));
        assertTrue(m_linkd.scheduleNodeCollection(bagmane.getId()));
        assertTrue(m_linkd.scheduleNodeCollection(mysore.getId()));
        assertTrue(m_linkd.scheduleNodeCollection(spaceexsw1.getId()));
        assertTrue(m_linkd.scheduleNodeCollection(spaceexsw2.getId()));
        assertTrue(m_linkd.scheduleNodeCollection(j635042.getId()));
        assertTrue(m_linkd.scheduleNodeCollection(srx100.getId()));

        assertEquals(0,m_ospfLinkDao.countAll());

        assertTrue(m_linkd.runSingleSnmpCollection(mumbai.getId()));
        final List<OspfLink> topologyA = m_ospfLinkDao.findAll();
        printOspfTopology(topologyA);
        assertEquals(4,topologyA.size());
        for (final OnmsNode node: m_nodeDao.findAll()) {
        	if (node.getOspfElement() != null)
        		printOspfElement(node.getOspfElement());
        }
        
        Thread.sleep(1000);
        
        assertTrue(m_linkd.runSingleSnmpCollection(delhi.getId()));
        final List<OspfLink> topologyB = m_ospfLinkDao.findAll();
        printOspfTopology(topologyB);
        assertEquals(7,topologyB.size());
        for (final OnmsNode node: m_nodeDao.findAll()) {
        	if (node.getOspfElement() != null)
        		printOspfElement(node.getOspfElement());
        }
        
        Thread.sleep(1000);

        assertTrue(m_linkd.runSingleSnmpCollection(bangalore.getId()));
        final List<OspfLink> topologyC = m_ospfLinkDao.findAll();
        printOspfTopology(topologyC);
        assertEquals(11,topologyC.size());
        for (final OnmsNode node: m_nodeDao.findAll()) {
        	if (node.getOspfElement() != null)
        		printOspfElement(node.getOspfElement());
        }
        
        Thread.sleep(1000);

        assertTrue(m_linkd.runSingleSnmpCollection(bagmane.getId()));
        final List<OspfLink> topologyD = m_ospfLinkDao.findAll();
        printOspfTopology(topologyD);
        assertEquals(15,topologyD.size());
        for (final OnmsNode node: m_nodeDao.findAll()) {
        	if (node.getOspfElement() != null)
        		printOspfElement(node.getOspfElement());
        }
        
        Thread.sleep(1000);

        assertTrue(m_linkd.runSingleSnmpCollection(mysore.getId()));
        final List<OspfLink> topologyE = m_ospfLinkDao.findAll();
        printOspfTopology(topologyE);
        assertEquals(17,topologyE.size());
        for (final OnmsNode node: m_nodeDao.findAll()) {
        	if (node.getOspfElement() != null)
        		printOspfElement(node.getOspfElement());
        }
        
        Thread.sleep(1000);

        assertTrue(m_linkd.runSingleSnmpCollection(spaceexsw1.getId()));
        final List<OspfLink> topologyF = m_ospfLinkDao.findAll();
        printOspfTopology(topologyF);
        assertEquals(19,topologyF.size());
        for (final OnmsNode node: m_nodeDao.findAll()) {
        	if (node.getOspfElement() != null)
        		printOspfElement(node.getOspfElement());
        }
        
        Thread.sleep(1000);

        assertTrue(m_linkd.runSingleSnmpCollection(spaceexsw2.getId()));
        final List<OspfLink> topologyG = m_ospfLinkDao.findAll();
        printOspfTopology(topologyG);
        assertEquals(21,topologyG.size());
        for (final OnmsNode node: m_nodeDao.findAll()) {
        	if (node.getOspfElement() != null)
        		printOspfElement(node.getOspfElement());
        }
        
        Thread.sleep(1000);

        assertTrue(m_linkd.runSingleSnmpCollection(j635042.getId()));
        final List<OspfLink> topologyH = m_ospfLinkDao.findAll();
        printOspfTopology(topologyH);
        assertEquals(22,topologyH.size());
        for (final OnmsNode node: m_nodeDao.findAll()) {
        	if (node.getOspfElement() != null)
        		printOspfElement(node.getOspfElement());
        }
        assertTrue(m_linkd.runSingleSnmpCollection(srx100.getId()));
        
        final List<OspfLink> topologyI = m_ospfLinkDao.findAll();
        printOspfTopology(topologyI);
        assertEquals(22,topologyI.size());
        for (final OnmsNode node: m_nodeDao.findAll()) {
        	if (node.getOspfElement() != null)
        		printOspfElement(node.getOspfElement());
        }

    }

