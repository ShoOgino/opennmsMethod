    @Test
    @JUnitSnmpAgents(value={
            @JUnitSnmpAgent(host = RPict001_IP, port = 161, resource = RPict001_SNMP_RESOURCE)
    })
    public void testCdpCacheTableCollection() throws Exception {
        SnmpAgentConfig  config = SnmpPeerFactory.getInstance().getAgentConfig(InetAddress.getByName(RPict001_IP));

        class CdpCacheTableTrackerTester extends CdpCacheTableTracker {
            int count = 0;
            public int count() {
                return count;
            }
        }
        final CdpCacheTableTrackerTester cdpCacheTableTracker = new CdpCacheTableTrackerTester() {

            public void processCdpCacheRow(final CdpCacheRow row) {
                count++;
            }
            
        };

        String trackerName = "cdpCacheTable";
        SnmpWalker walker =  SnmpUtils.createWalker(config, trackerName, cdpCacheTableTracker);

        walker.start();

        try {
            walker.waitFor();
            if (walker.timedOut()) {
                LOG.info("run:Aborting Cdp Linkd node scan : Agent timed out while scanning the {} table", trackerName);
            }  else if (walker.failed()) {
                LOG.info("run:Aborting Cdp Linkd node scan : Agent failed while scanning the {} table: {}", trackerName,walker.getErrorMessage());
            }
        } catch (final InterruptedException e) {
            LOG.error("run: Cdp Linkd collection interrupted, exiting",e);
            return;
        }
        
        assertEquals(14, cdpCacheTableTracker.count());
    }

