    @Test
    @JUnitSnmpAgents(value={
            @JUnitSnmpAgent(host=SWITCH02_IP, port=161, resource=SWITCH02_SNMP_RESOURCE)
    })
    public void testSwitch02Links() throws Exception {
        
        m_nodeDao.save(builder.getSwitch02());
        m_nodeDao.flush();

        m_linkdConfig.getConfiguration().setUseBridgeDiscovery(false);
        m_linkdConfig.getConfiguration().setUseOspfDiscovery(false);
        m_linkdConfig.getConfiguration().setUseIsisDiscovery(false);
        m_linkdConfig.getConfiguration().setUseLldpDiscovery(false);
        
        assertTrue(!m_linkdConfig.useIsisDiscovery());
        assertTrue(!m_linkdConfig.useBridgeDiscovery());
        assertTrue(!m_linkdConfig.useOspfDiscovery());
        assertTrue(!m_linkdConfig.useLldpDiscovery());
        assertTrue(m_linkdConfig.useCdpDiscovery());
        
        final OnmsNode switch02 = m_nodeDao.findByForeignId("linkd", SWITCH02_NAME);
        
        assertTrue(m_linkd.scheduleNodeCollection(switch02.getId()));

        assertTrue(m_linkd.runSingleSnmpCollection(switch02.getId()));

        for (final OnmsNode node: m_nodeDao.findAll()) {
            assertNotNull(node.getCdpElement());
            printCdpElement(node.getCdpElement());
            assertEquals(TruthValue.TRUE, node.getCdpElement().getCdpGlobalRun());
            assertEquals(SWITCH02_CDP_GLOBAL_DEVICE_ID,node.getCdpElement().getCdpGlobalDeviceId());
        }

        assertEquals(3, m_cdpLinkDao.countAll());
        for (CdpLink link: m_cdpLinkDao.findAll())
            printCdpLink(link);                
    }

