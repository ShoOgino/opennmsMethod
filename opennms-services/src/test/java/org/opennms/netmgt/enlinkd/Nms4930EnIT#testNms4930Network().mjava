    /*
     * The main fact is that this devices have only the Bridge MIb walk
     * dlink_DES has STP disabled
     * dlink_DGS has STP enabled but root is itself
     * 
     */
    @Test
    @JUnitSnmpAgents(value={
            @JUnitSnmpAgent(host=DLINK1_IP, port=161, resource=DLINK1_SNMP_RESOURCE),
            @JUnitSnmpAgent(host=DLINK2_IP, port=161, resource=DLINK2_SNMP_RESOURCE)
    })
    public void testNms4930Network() throws Exception {
        //   the topology is shown here...
        //   (10.100.2.6:000ffeb10e26) --> <port 6:dlink1:port 24> ---<cloud>----<port 10:dlink2>
        //                                                               |
        //                                                           10.100.1.7:001e58a6aed7:101

        // Adding a "node" with mac address 001e58a6aed7 found both on dlink1 port 24 and dlink2 port 10 
        builder.addMacNodeWithSnmpInterface("001e58a6aed7","10.100.1.7",101 );
        // Adding a "node" with mac address 000ffeb10e26 found on dlink1 port 6
        builder.addMacNode("000ffeb10e26","10.100.2.6" );
        assertEquals(4, m_nodeDao.countAll());
        assertEquals(2, m_ipNetToMediaDao.countAll());
        IpNetToMedia at0 = m_ipNetToMediaDao.findByPhysAddress("001e58a6aed7").get(0);
        assertNotNull(at0);
        assertEquals("10.100.1.7", at0.getNetAddress().getHostAddress());
        IpNetToMedia at1 = m_ipNetToMediaDao.findByPhysAddress("000ffeb10e26").get(0);
        assertNotNull(at1);
        assertEquals("10.100.2.6", at1.getNetAddress().getHostAddress());
        
    	final OnmsNode dlink1 = m_nodeDao.findByForeignId("linkd", DLINK1_NAME);
        final OnmsNode dlink2 = m_nodeDao.findByForeignId("linkd", DLINK2_NAME);
        final OnmsNode nodebetweendlink1dlink2 = m_nodeDao.findByForeignId("linkd", "10.100.1.7");
        final OnmsNode nodeonlink1dport6 = m_nodeDao.findByForeignId("linkd", "10.100.2.6");
        
        assertNotNull(nodebetweendlink1dlink2);
        assertNotNull(nodeonlink1dport6);
        
        m_linkdConfig.getConfiguration().setUseBridgeDiscovery(true);
        m_linkdConfig.getConfiguration().setUseCdpDiscovery(false);
        m_linkdConfig.getConfiguration().setUseOspfDiscovery(false);
        m_linkdConfig.getConfiguration().setUseLldpDiscovery(false);
        m_linkdConfig.getConfiguration().setUseIsisDiscovery(false);

        assertTrue(!m_linkdConfig.useLldpDiscovery());
        assertTrue(!m_linkdConfig.useCdpDiscovery());
        assertTrue(!m_linkdConfig.useOspfDiscovery());
        assertTrue(m_linkdConfig.useBridgeDiscovery());
        assertTrue(!m_linkdConfig.useIsisDiscovery());

        assertTrue(m_linkd.scheduleNodeCollection(dlink1.getId()));
        assertTrue(m_linkd.scheduleNodeCollection(dlink2.getId()));
        assertEquals(0,m_bridgeBridgeLinkDao.countAll());
        assertEquals(0,m_bridgeMacLinkDao.countAll());
        
        assertTrue(m_linkd.runSingleSnmpCollection(dlink1.getId()));
        assertTrue(m_linkd.runTopologyDiscovery(dlink1.getId()));

        assertEquals(0,m_bridgeBridgeLinkDao.countAll());
        assertEquals(58,m_bridgeMacLinkDao.countAll());
        assertEquals(2,m_bridgeMacLinkDao.getAllBridgeLinksToIpAddrToNodes().size());
        assertEquals(0,m_bridgeMacLinkDao.getAllBridgeLinksToBridgeNodes().size());

        assertTrue(m_linkd.runSingleSnmpCollection(dlink2.getId()));
        assertTrue(m_linkd.runTopologyDiscovery(dlink2.getId()));
        
        assertEquals(0,m_bridgeBridgeLinkDao.countAll());
        assertEquals(659,m_bridgeMacLinkDao.countAll());
        // we have 3 that links "real mac nodes" to bridge.
        // we have 8 macs on bridge cloud between dlink1 and dlink2
        assertEquals(3,m_bridgeMacLinkDao.getAllBridgeLinksToIpAddrToNodes().size());
        assertEquals(8,m_bridgeMacLinkDao.getAllBridgeLinksToBridgeNodes().size());

        for (BridgeMacLink link: m_bridgeMacLinkDao.findAll()) {
            assertNotNull(link.getNode());
            assertNotNull(link.getBridgePort());
            assertNotNull(link.getBridgePortIfIndex());
            assertNotNull(link.getMacAddress());
        }

        for (BridgeMacTopologyLink link: m_bridgeMacLinkDao.getAllBridgeLinksToIpAddrToNodes()) {
            assertNotNull(link.getSrcNodeId());
            assertNotNull(link.getBridgePort());
            assertNotNull(link.getBridgePortIfIndex());
            assertNotNull(link.getTargetNodeId());
            assertNotNull(link.getMacAddr());
            assertNotNull(link.getTargetPortIfName());
            if (link.getSrcNodeId().intValue() == dlink1.getId().intValue()) {
                if (link.getBridgePort().intValue() == 6) {
                    assertEquals(link.getBridgePortIfIndex().intValue(), 6);
                    assertEquals(link.getTargetNodeId().intValue(), nodeonlink1dport6.getId().intValue());
                    assertEquals(link.getMacAddr(), "000ffeb10e26");
                    assertEquals(link.getTargetPortIfName(), "10.100.2.6");
                    assertEquals(link.getTargetIfIndex(), null);
                } else if (link.getBridgePort().intValue() == 24) {
                    assertEquals(link.getBridgePortIfIndex().intValue(), 24);
                    assertEquals(link.getTargetNodeId().intValue(), nodebetweendlink1dlink2.getId().intValue());
                    assertEquals(link.getMacAddr(), "001e58a6aed7");
                    assertEquals(link.getTargetPortIfName(), "10.100.1.7");
                    assertEquals(link.getTargetIfIndex().intValue(), 101);
                } else {
                    assertTrue(false);
                }
            } else if (link.getSrcNodeId().intValue() == dlink2.getId().intValue()) {
                assertEquals(link.getBridgePortIfIndex().intValue(), 10);
                assertEquals(link.getTargetNodeId().intValue(), nodebetweendlink1dlink2.getId().intValue());
                assertEquals(link.getMacAddr(), "001e58a6aed7");
                assertEquals(link.getTargetPortIfName(), "10.100.1.7");
                assertEquals(link.getTargetIfIndex().intValue(), 101);
            } else {
                assertTrue(false);
            }
        }
        
        for (BridgeMacTopologyLink link: m_bridgeMacLinkDao.getAllBridgeLinksToBridgeNodes()) {
            assertNotNull(link.getSrcNodeId());
            assertNotNull(link.getBridgePort());
            assertNotNull(link.getBridgePortIfIndex());
            assertNotNull(link.getTargetNodeId());
            assertNotNull(link.getMacAddr());
            assertNotNull(link.getTargetBridgePort());
            assertNotNull(link.getTargetIfIndex());
            assertNotNull(link.getTargetId());
            assertEquals(dlink1.getId().intValue(), link.getSrcNodeId().intValue());
            assertEquals(dlink2.getId().intValue(), link.getTargetNodeId().intValue());
            assertEquals(24, link.getBridgePort().intValue());
            assertEquals(10, link.getTargetBridgePort().intValue());
        }
        

        // Matt here you find that the macs on backbone port have all the same
        // switch port
        // the array "macsonbbport" is the intersection between 
        // the mac address forwarding table of dlink1 port 24
        // and the mac address forwarding table f dlink2 port 10
        // The following code will print the links as they are discovered
        for (String mac: macsonbbport) {
        	List<BridgeMacLink> maclinks = m_bridgeMacLinkDao.findByMacAddress(mac);
        	assertEquals(2,maclinks.size());
    		printBackboneBridgeMacLink(maclinks.get(0),maclinks.get(1));
        }

    }

