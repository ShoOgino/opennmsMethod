    @Test
    @JUnitSnmpAgents(value = {
            @JUnitSnmpAgent(host = SWITCH1_IP, port = 161, resource = SWITCH1_SNMP_RESOURCE_003),
            @JUnitSnmpAgent(host = SWITCH2_IP, port = 161, resource = SWITCH2_SNMP_RESOURCE_003),
            @JUnitSnmpAgent(host = SWITCH3_IP, port = 161, resource = SWITCH3_SNMP_RESOURCE_003)
    })
    public void testNetwork003Links() throws Exception {
        m_nodeDao.save(builder.getSwitch1());
        m_nodeDao.save(builder.getSwitch2());
        m_nodeDao.save(builder.getSwitch3());

        m_nodeDao.flush();

        m_linkdConfig.getConfiguration().setUseLldpDiscovery(false);
        m_linkdConfig.getConfiguration().setUseBridgeDiscovery(true);
        m_linkdConfig.getConfiguration().setUseOspfDiscovery(false);
        m_linkdConfig.getConfiguration().setUseCdpDiscovery(false);
        m_linkdConfig.getConfiguration().setUseIsisDiscovery(false);

        final OnmsNode switch1 = m_nodeDao.findByForeignId("linkd", SWITCH1_NAME);
        final OnmsNode switch2 = m_nodeDao.findByForeignId("linkd", SWITCH2_NAME);
        final OnmsNode switch3 = m_nodeDao.findByForeignId("linkd", SWITCH3_NAME);

        assertTrue(m_linkd.scheduleNodeCollection(switch1.getId()));
        assertTrue(m_linkd.scheduleNodeCollection(switch2.getId()));
        assertTrue(m_linkd.scheduleNodeCollection(switch3.getId()));

        assertEquals(0, m_cdpLinkDao.countAll());
        assertEquals(0, m_lldpLinkDao.countAll());
        assertEquals(0, m_ospfLinkDao.countAll());
        assertEquals(0, m_isisLinkDao.countAll());
        assertEquals(0, m_bridgeBridgeLinkDao.countAll());
        assertEquals(0, m_bridgeMacLinkDao.countAll());

        assertTrue(m_linkd.runSingleSnmpCollection(switch1.getId()));
        assertEquals(4, m_bridgeMacLinkDao.countAll());

        assertTrue(m_linkd.runSingleSnmpCollection(switch2.getId()));
        assertEquals(10, m_bridgeMacLinkDao.countAll());

        assertTrue(m_linkd.runSingleSnmpCollection(switch3.getId()));
        assertEquals(12, m_bridgeMacLinkDao.countAll());

        for (String mac : macs) {
            List<BridgeMacLink> macLinks = m_bridgeMacLinkDao.findByMacAddress(mac);

            assertEquals(1, macLinks.size());

            for (BridgeMacLink maclink : macLinks) {
                printBridgeMacLink(maclink);
            }
        }
    }

