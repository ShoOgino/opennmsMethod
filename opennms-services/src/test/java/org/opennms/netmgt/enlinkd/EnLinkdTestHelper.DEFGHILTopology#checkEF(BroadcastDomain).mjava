        public void checkEF(BroadcastDomain domain) throws BridgeTopologyException {
            assertEquals(0, domain.getForwarders(nodeEId).size());
            assertEquals(0, domain.getForwarders(nodeFId).size());
            List<SharedSegment> shsegs = domain.getSharedSegments();
            assertEquals(3, shsegs.size());
            for (SharedSegment shared: shsegs) {
                if (shared.getMacsOnSegment().contains(mac3)) {
                    assertEquals(1, shared.getBridgeIdsOnSegment().size());
                    assertEquals(2, shared.getMacsOnSegment().size());
                    assertEquals(true,shared.getMacsOnSegment().contains(mac4));
                    assertEquals(2, SharedSegment.getBridgeMacLinks(shared).size());
                    assertEquals(0, SharedSegment.getBridgeBridgeLinks(shared).size());
                    assertEquals(nodeFId.intValue(), shared.getDesignatedBridge().intValue());
                    assertEquals(portF.intValue(), shared.getDesignatedPort().getBridgePort().intValue());
                    Set<String> macs = new HashSet<String>();
                    for (BridgeMacLink link: SharedSegment.getBridgeMacLinks(shared)) {
                        assertEquals(nodeFId.intValue(), link.getNode().getId().intValue());
                        assertEquals(portF,link.getBridgePort());
                        assertTrue(!macs.contains(link.getMacAddress()));
                        assertEquals(BridgeMacLinkType.BRIDGE_LINK, link.getLinkType());
                        macs.add(link.getMacAddress());
                    }
                    assertTrue(macs.contains(mac3));
                    assertTrue(macs.contains(mac4));
                } else if (shared.getMacsOnSegment().contains(mac5)) {
                        assertEquals(1, shared.getBridgeIdsOnSegment().size());
                        assertEquals(2, shared.getMacsOnSegment().size());
                        assertEquals(true,shared.getMacsOnSegment().contains(mac6));
                        assertEquals(2, SharedSegment.getBridgeMacLinks(shared).size());
                        assertEquals(0, SharedSegment.getBridgeBridgeLinks(shared).size());
                        assertEquals(nodeEId.intValue(), shared.getDesignatedBridge().intValue());
                        assertEquals(portE.intValue(), shared.getDesignatedPort().getBridgePort().intValue());
                        Set<String> macs = new HashSet<String>();
                        for (BridgeMacLink link: SharedSegment.getBridgeMacLinks(shared)) {
                            assertEquals(nodeEId.intValue(), link.getNode().getId().intValue());
                            assertEquals(portE,link.getBridgePort());
                            assertTrue(!macs.contains(link.getMacAddress()));
                            assertEquals(BridgeMacLinkType.BRIDGE_LINK, link.getLinkType());
                            macs.add(link.getMacAddress());
                         }
                        assertTrue(macs.contains(mac5));
                        assertTrue(macs.contains(mac6));
                 } else if (shared.getMacsOnSegment().contains(mac1)) {
                    assertEquals(2, shared.getBridgeIdsOnSegment().size());
                    assertEquals(true,shared.getBridgeIdsOnSegment().contains(nodeFId));
                    assertEquals(true,shared.getBridgeIdsOnSegment().contains(nodeEId));
                    assertEquals(4,shared.getMacsOnSegment().size());
                    assertEquals(true,shared.getMacsOnSegment().contains(mac2));
                    assertEquals(true,shared.getMacsOnSegment().contains(mac7));
                    assertEquals(true,shared.getMacsOnSegment().contains(mac8));
                    assertEquals(1, SharedSegment.getBridgeBridgeLinks(shared).size());
                    BridgeBridgeLink bblink = SharedSegment.getBridgeBridgeLinks(shared).iterator().next();
                    assertEquals(nodeEId.intValue(), bblink.getDesignatedNode().getId().intValue());
                    assertEquals(portEE, bblink.getDesignatedPort());
                    assertEquals(nodeFId.intValue(), bblink.getNode().getId().intValue());
                    assertEquals(portFF, bblink.getBridgePort());
                    assertEquals(4, SharedSegment.getBridgeMacLinks(shared).size());
                    Set<String> macs = new HashSet<String>();
                    for (BridgeMacLink link: SharedSegment.getBridgeMacLinks(shared)) {
                        assertEquals(nodeEId.intValue(), link.getNode().getId().intValue());
                        assertEquals(portEE,link.getBridgePort());
                        assertTrue(!macs.contains(link.getMacAddress()));
                        assertEquals(BridgeMacLinkType.BRIDGE_LINK, link.getLinkType());
                        macs.add(link.getMacAddress());
                    }
                    assertTrue(macs.contains(mac1));
                    assertTrue(macs.contains(mac2));
                    assertTrue(macs.contains(mac7));
                    assertTrue(macs.contains(mac8));

                } else {
                    assertEquals(false, true);
                }

            }
        }

