    @Test
    @JUnitSnmpAgents(value={
        @JUnitSnmpAgent(host=DLINK1_IP, port=161, resource=DLINK1_SNMP_RESOURCE),
    })
    public void testDot1dTpFdbTableWalk() throws Exception {

    	String trackerName = "dot1dTpFdbTable";
    	final List<BridgeMacLink> links = new ArrayList<BridgeMacLink>();
    	SnmpAgentConfig  config = SnmpPeerFactory.getInstance().getAgentConfig(InetAddress.getByName(DLINK1_IP));
        Dot1dTpFdbTableTracker tracker = new Dot1dTpFdbTableTracker() {
            @Override
        	public void processDot1dTpFdbRow(final Dot1dTpFdbRow row) {
            	links.add(row.getLink());
            }
        };

        SnmpWalker walker =  SnmpUtils.createWalker(config, trackerName, tracker);

        walker.start();

        try {
            walker.waitFor();
            if (walker.timedOut()) {
            	LOG.info(
                        "run:Aborting node scan : Agent timed out while scanning the {} table", trackerName);
            }  else if (walker.failed()) {
            	LOG.info(
                        "run:Aborting node scan : Agent failed while scanning the {} table: {}", trackerName,walker.getErrorMessage());
            }
        } catch (final InterruptedException e) {
            LOG.error("run: collection interrupted, exiting",e);
            return;
        }

        assertEquals(17, links.size());
        for (BridgeMacLink link: links) {
        	assertEquals(BridgeDot1qTpFdbStatus.DOT1D_TP_FDB_STATUS_LEARNED, link.getBridgeDot1qTpFdbStatus());
        	System.out.println(link.getMacAddress());
        	if (link.getMacAddress().equals("000c29dcc076")) {
        		assertEquals(24,link.getBridgePort().intValue());
        	} else if(link.getMacAddress().equals("000ffeb10d1e")) {
        		assertEquals(6,link.getBridgePort().intValue());
        	} else if(link.getMacAddress().equals("000ffeb10e26")) {
        		assertEquals(6,link.getBridgePort().intValue());
        	} else if(link.getMacAddress().equals("001a4b802790")) {
        		assertEquals(6,link.getBridgePort().intValue());
        	} else if(link.getMacAddress().equals("001d6004acbc")) {
        		assertEquals(6,link.getBridgePort().intValue());
        	} else if(link.getMacAddress().equals("001e58865d0f")) {
        		assertEquals(6,link.getBridgePort().intValue());
        	} else if(link.getMacAddress().equals("0021913b5108")) {
        		assertEquals(6,link.getBridgePort().intValue());
        	} else if(link.getMacAddress().equals("002401ad3416")) {
        		assertEquals(6,link.getBridgePort().intValue());
        	} else if(link.getMacAddress().equals("00248c4c8bd0")) {
        		assertEquals(6,link.getBridgePort().intValue());
        	} else if(link.getMacAddress().equals("0024d608693e")) {
        		assertEquals(6,link.getBridgePort().intValue());
        	} else if(link.getMacAddress().equals("000ffeb10d1e")) {
        		assertEquals(6,link.getBridgePort().intValue());
        	} else if(link.getMacAddress().equals("1caff737cc33")) {
        		assertEquals(6,link.getBridgePort().intValue());
        	} else if(link.getMacAddress().equals("1caff7443339")) {
        		assertEquals(6,link.getBridgePort().intValue());
        	} else if(link.getMacAddress().equals("1cbdb9b56160")) {
        		assertEquals(6,link.getBridgePort().intValue());
        	} else if(link.getMacAddress().equals("5cd998667abb")) {
        		assertEquals(6,link.getBridgePort().intValue());
        	} else if(link.getMacAddress().equals("e0cb4e3e7fc0")) {
        		assertEquals(6,link.getBridgePort().intValue());
        	} else if(link.getMacAddress().equals("f07d68711f89")) {
        		assertEquals(24,link.getBridgePort().intValue());
        	} else if(link.getMacAddress().equals("f07d6876c565")) {
        		assertEquals(24,link.getBridgePort().intValue());
           } else {
        		assertEquals(false, true);
        	}
        }
    }

