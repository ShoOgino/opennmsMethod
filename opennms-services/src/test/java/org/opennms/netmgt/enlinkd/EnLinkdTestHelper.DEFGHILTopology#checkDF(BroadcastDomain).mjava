        public void checkDF(BroadcastDomain domain) throws BridgeTopologyException {
            assertEquals(0, domain.getForwarders(nodeDId).size());
            assertEquals(0, domain.getForwarders(nodeFId).size());
             List<SharedSegment> shsegs = domain.getSharedSegments();
            assertEquals(3, shsegs.size());
            for (SharedSegment shared: shsegs) {
                if (shared.getMacsOnSegment().contains(mac1)) {
                    assertEquals(1, shared.getBridgeIdsOnSegment().size());
                    assertEquals(2, shared.getMacsOnSegment().size());
                    assertEquals(true,shared.getMacsOnSegment().contains(mac2));
                    assertEquals(2, SharedSegment.getBridgeMacLinks(shared).size());
                    assertEquals(0, SharedSegment.getBridgeBridgeLinks(shared).size());
                    assertEquals(nodeDId.intValue(), shared.getDesignatedBridge().intValue());
                    assertEquals(portD.intValue(), shared.getDesignatedPort().getBridgePort().intValue());
                    for (BridgeMacLink link: SharedSegment.getBridgeMacLinks(shared)) {
                       assertEquals(nodeDId.intValue(), link.getNode().getId().intValue());
                       assertEquals(portD,link.getBridgePort());
                       assertEquals(BridgeMacLinkType.BRIDGE_LINK, link.getLinkType());
                    }
                } else if (shared.getMacsOnSegment().contains(mac3)) {
                        assertEquals(1, shared.getBridgeIdsOnSegment().size());
                        assertEquals(2, shared.getMacsOnSegment().size());
                        assertEquals(true,shared.getMacsOnSegment().contains(mac4));
                        assertEquals(2, SharedSegment.getBridgeMacLinks(shared).size());
                        assertEquals(0, SharedSegment.getBridgeBridgeLinks(shared).size());
                        assertEquals(nodeFId.intValue(), shared.getDesignatedBridge().intValue());
                        assertEquals(portF.intValue(), shared.getDesignatedPort().getBridgePort().intValue());
                        for (BridgeMacLink link: SharedSegment.getBridgeMacLinks(shared)) {
                            assertEquals(nodeFId.intValue(), link.getNode().getId().intValue());
                            assertEquals(portF,link.getBridgePort());
                            assertEquals(BridgeMacLinkType.BRIDGE_LINK, link.getLinkType());
                         }
                 } else if (shared.getMacsOnSegment().contains(mac7)) {
                    assertEquals(2, shared.getBridgeIdsOnSegment().size());
                    assertEquals(true,shared.getBridgeIdsOnSegment().contains(nodeDId));
                    assertEquals(true,shared.getBridgeIdsOnSegment().contains(nodeFId));
                    assertEquals(4,shared.getMacsOnSegment().size());
                    assertEquals(true,shared.getMacsOnSegment().contains(mac5));
                    assertEquals(true,shared.getMacsOnSegment().contains(mac6));
                    assertEquals(true,shared.getMacsOnSegment().contains(mac8));
                    assertEquals(4, SharedSegment.getBridgeMacLinks(shared).size());
                    BridgeBridgeLink bblink = SharedSegment.getBridgeBridgeLinks(shared).iterator().next();
                    assertEquals(nodeDId.intValue(), bblink.getDesignatedNode().getId().intValue());
                    assertEquals(portDD.intValue(), bblink.getDesignatedPort().intValue());
                    assertEquals(nodeFId.intValue(), bblink.getNode().getId().intValue());
                    assertEquals(portFF.intValue(), bblink.getBridgePort().intValue());
                    assertEquals(1, SharedSegment.getBridgeBridgeLinks(shared).size());
                    Set<String> macs = new HashSet<String>();
                    for (BridgeMacLink link: SharedSegment.getBridgeMacLinks(shared)) {
                        assertEquals(nodeDId.intValue(),link.getNode().getId().intValue());
                        assertEquals(portDD,link.getBridgePort());
                        assertTrue(!macs.contains(link.getMacAddress()));
                        assertEquals(BridgeMacLinkType.BRIDGE_LINK, link.getLinkType());
                        macs.add(link.getMacAddress());
                    }
                    assertTrue(macs.contains(mac5));
                    assertTrue(macs.contains(mac6));
                    assertTrue(macs.contains(mac7));
                    assertTrue(macs.contains(mac8));
                } else {
                    assertEquals(false, true);
                }
            }

        }

