        public void check(BroadcastDomain domain) {
            assertEquals(5, domain.getBridgeNodesOnDomain().size());
            assertEquals(nodeBId, domain.getRootBridgeId().intValue());
            assertEquals(11, domain.getTopology().size());
            assertEquals(4, domain.getSharedSegmentOnTopologyForBridge(nodeAId).size());
            assertEquals(4, domain.getSharedSegmentOnTopologyForBridge(nodeBId).size());
            assertEquals(3, domain.getSharedSegmentOnTopologyForBridge(nodeCId).size());
            assertEquals(2, domain.getSharedSegmentOnTopologyForBridge(nodeDId).size());
            assertEquals(2, domain.getSharedSegmentOnTopologyForBridge(nodeEId).size());
            for (Bridge bridge: domain.getBridges()) {
                if (bridge.isRootBridge())
                    assertNull(bridge.getRootPort());
                else
                    assertNotNull(bridge.getRootPort());
            }
            for (SharedSegment segment: domain.getTopology()) {
                assertNotNull(segment.getDesignatedBridge());
                assertNotNull(segment.getDesignatedPort());
                for (BridgeMacLink bridgeMacLink :segment.getBridgeMacLinks()) {
                    assertNotNull(bridgeMacLink.getBridgePort());
                    assertNotNull(bridgeMacLink.getBridgePortIfIndex());
                    assertNotNull(bridgeMacLink.getMacAddress());
               }
            }
            for (SharedSegment segment: domain.getTopology()) {
                assertNotNull(segment.getDesignatedBridge());
                assertNotNull(segment.getDesignatedPort());
                switch (segment.getDesignatedBridge().intValue()) {
                case nodeAId:
                    checkA(segment);
                    break;
                case nodeBId:
                    checkB(segment);
                    break;
                case nodeCId:
                    checkC(segment);
                    break;
                case nodeDId:
                    checkD(segment);
                    break;
                case nodeEId:
                    checkE(segment);
                    break;

                default:
                    assertTrue(false);
                    break;
                }
                for (BridgeMacLink bridgeMacLink :segment.getBridgeMacLinks()) {
                    assertNotNull(bridgeMacLink.getBridgePort());
                    assertNotNull(bridgeMacLink.getBridgePortIfIndex());
                    assertNotNull(bridgeMacLink.getMacAddress());
               }
            }

        }

