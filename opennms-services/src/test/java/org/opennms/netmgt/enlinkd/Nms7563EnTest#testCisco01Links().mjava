    @Test
    @JUnitSnmpAgents(value={
            @JUnitSnmpAgent(host=CISCO01_IP, port=161, resource=CISCO01_SNMP_RESOURCE)
    })
    public void testCisco01Links() throws Exception {
        
        m_nodeDao.save(builder.getCisco01());
        m_nodeDao.flush();

        m_linkdConfig.getConfiguration().setUseBridgeDiscovery(false);
        m_linkdConfig.getConfiguration().setUseOspfDiscovery(false);
        m_linkdConfig.getConfiguration().setUseIsisDiscovery(false);
        
        assertTrue(!m_linkdConfig.useIsisDiscovery());
        assertTrue(!m_linkdConfig.useBridgeDiscovery());
        assertTrue(!m_linkdConfig.useOspfDiscovery());
        assertTrue(m_linkdConfig.useLldpDiscovery());
        assertTrue(m_linkdConfig.useCdpDiscovery());
        
        final OnmsNode cisco01 = m_nodeDao.findByForeignId("linkd", CISCO01_NAME);
        
        assertTrue(m_linkd.scheduleNodeCollection(cisco01.getId()));

        assertTrue(m_linkd.runSingleSnmpCollection(cisco01.getId()));

        for (final OnmsNode node: m_nodeDao.findAll()) {
            assertNotNull(node.getLldpElement());
            printLldpElement(node.getLldpElement());
            assertEquals(LldpChassisIdSubType.LLDP_CHASSISID_SUBTYPE_MACADDRESS, node.getLldpElement().getLldpChassisIdSubType());
            assertEquals(CISCO01_LLDP_CHASSID_ID,node.getLldpElement().getLldpChassisId());
            assertEquals(CISCO01_LLDP_SYSNAME, node.getLldpElement().getLldpSysname());
            
            assertNotNull(node.getCdpElement());
            printCdpElement(node.getCdpElement());
            assertEquals(TruthValue.TRUE, node.getCdpElement().getCdpGlobalRun());
            assertEquals(CISCO01_CDP_GLOBAL_DEVICE_ID,node.getCdpElement().getCdpGlobalDeviceId());
        }

        assertEquals(1, m_lldpLinkDao.countAll());
        for (LldpLink link: m_lldpLinkDao.findAll()) {
            assertNotNull(link);
            printLldpLink(link);
            assertEquals(8, link.getLldpLocalPortNum().intValue());
            assertNull(link.getLldpPortIfindex());
            assertEquals(LldpPortIdSubType.LLDP_PORTID_SUBTYPE_INTERFACENAME,link.getLldpPortIdSubType());
            assertEquals("Fa0/8",link.getLldpPortId());
            assertEquals("FastEthernet0/8",link.getLldpPortDescr());
            
            assertEquals(LldpChassisIdSubType.LLDP_CHASSISID_SUBTYPE_MACADDRESS, link.getLldpRemChassisIdSubType());
            assertEquals(SWITCH02_LLDP_CHASSID_ID,link.getLldpRemChassisId());
            assertEquals(SWITCH02_LLDP_SYSNAME,link.getLldpRemSysname());
            
            assertEquals(LldpPortIdSubType.LLDP_PORTID_SUBTYPE_LOCAL, link.getLldpRemPortIdSubType());
            assertEquals("24",link.getLldpRemPortId());
            assertEquals("24",link.getLldpRemPortDescr());
           
        }


        assertEquals(0, m_cdpLinkDao.countAll());

        
        
    }

