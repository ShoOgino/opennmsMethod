    public void FIXMEtestPersistManyAlarmsAtOnce() throws InterruptedException {
        
        int numberOfAlarmsToReduce = 10;
        //there should be no alarms in the alarms table
        assertEquals(0, m_db.countRows("select * from alarms"));
 
        final String reductionKey = "countThese";
        final MockNode node = m_network.getNode(1);
        
        final long millis = System.currentTimeMillis()+2500;
        
        final BarrierSignaler signal = new BarrierSignaler(numberOfAlarmsToReduce);
        
        for (int i=1; i<= numberOfAlarmsToReduce; i++) {
            MockUtil.println("Creating Runnable: "+i+" of "+numberOfAlarmsToReduce+" events to reduce.");

            class EventRunner implements Runnable {
                public void run() {
                	try {
                		while (System.currentTimeMillis() < millis) {
                			try {
                				Thread.sleep(10);
                			} catch (InterruptedException e) {
                				MockUtil.println(e.getMessage());
                			}
                		}
                		sendNodeDownEvent(reductionKey, node);
                	} finally {
                		signal.signal();
                	}
                }
            }
            
            Runnable r = new EventRunner();
            Thread p = new Thread(r);
            p.start();
        }
        
        signal.waitFor();
        sleep(20000);
        
        //this should be the first occurrence of this alarm
        //there should be 1 alarm now
        int rowCount = m_db.countRows("select * from alarms");
        Integer counterColumn = m_db.getAlarmCount(reductionKey);
        MockUtil.println("rowcCount is: "+rowCount+", expected 1.");
        MockUtil.println("counterColumn is: "+counterColumn+", expected "+numberOfAlarmsToReduce);
        assertEquals(1, rowCount);
        assertEquals(numberOfAlarmsToReduce, counterColumn.intValue());
        
        Integer alarmId = m_db.getAlarmId(reductionKey);
        rowCount = m_db.countRows("select * from events where alarmid = "+alarmId);
        MockUtil.println(String.valueOf(rowCount) + " of events with alarmid: "+alarmId);
//        assertEquals(numberOfAlarmsToReduce, rowCount);
        
        rowCount = m_db.countRows("select * from events where alarmid is null");
        MockUtil.println(String.valueOf(rowCount) + " of events with null alarmid");
        assertEquals(0, rowCount);

    }

