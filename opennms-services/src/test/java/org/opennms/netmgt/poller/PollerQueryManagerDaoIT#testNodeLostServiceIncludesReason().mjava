    @Test
    public void testNodeLostServiceIncludesReason() throws Exception {
        MockService element = m_network.getService(1, "192.168.1.1", "SMTP");
        String expectedReason = "Oh No!! An Outage!!";
        startDaemons();
        
        resetAnticipated();
        anticipateDown(element);
        
        MockUtil.println("Bringing down element: " + element);
        element.bringDown(expectedReason);
        MockUtil.println("Finished bringing down element: " + element);
        
        verifyAnticipated(8000);

        Collection<Event> receivedEvents = m_anticipator.getAnticipatedEventsRecieved();

        assertEquals(2, receivedEvents.size());
        
        Iterator<Event> receivedEventsIter= receivedEvents.iterator();
        Event event1 = receivedEventsIter.next();
        
        assertEquals(expectedReason, EventUtils.getParm(event1, EventConstants.PARM_LOSTSERVICE_REASON));
        
        Event event2 = receivedEventsIter.next();
        
        assertNotNull(event2);
        assertEquals(EventConstants.OUTAGE_CREATED_EVENT_UEI,event2.getUei());
        assertEquals("SMTP",event2.getService());
        assertEquals("192.168.1.1",event2.getInterface());
        
    }

