    private void executeThresholdTest(EventAnticipator anticipator) throws Exception {

        Map<String,Object> parameters = new HashMap<String,Object>();
        parameters.put("rrd-repository", "/tmp");
        parameters.put("ds-name", "icmp");
        parameters.put("rrd-base-name", "icmp");
        parameters.put("thresholding-enabled", "true");

        FilterDao filterDao = m_mocks.createMock(FilterDao.class);
        expect(filterDao.getActiveIPAddressList((String)EasyMock.anyObject())).andReturn(Collections.singletonList(addr("127.0.0.1"))).anyTimes();
        filterDao.flushActiveIpAddressListCache();
        EasyMock.expectLastCall().anyTimes();
        FilterDaoFactory.setInstance(filterDao);

        MonitoredService svc = m_mocks.createMock(MonitoredService.class);
        expect(svc.getNodeId()).andReturn(1);
        expect(svc.getIpAddr()).andReturn("127.0.0.1").atLeastOnce();
        expect(svc.getSvcName()).andReturn("ICMP").atLeastOnce();

        ServiceMonitor service = m_mocks.createMock(ServiceMonitor.class);
        PollStatus value = PollStatus.get(PollStatus.SERVICE_AVAILABLE, 100.0);
        expect(service.poll(svc, parameters)).andReturn(value);

        int step = 300;
        List<String> rras = Collections.singletonList("RRA:AVERAGE:0.5:1:2016");
        Package pkg = new Package();
        Rrd rrd = new Rrd();
        rrd.setStep(step);
        rrd.setRras(rras);
        pkg.setRrd(rrd);

        expect(m_pollerConfig.getRRAList(pkg)).andReturn(rras);
        expect(m_pollerConfig.getStep(pkg)).andReturn(step).anyTimes();

        m_eventIpcManager.setEventAnticipator(anticipator);

        MockNetwork network = new MockNetwork();
        network.setCriticalService("ICMP");
        network.addNode(1, "testNode");
        network.addInterface("127.0.0.1");
        network.setIfAlias("eth0");
        network.addService("ICMP");
        network.addService("SNMP");
        m_db.populate(network);
        
        m_mocks.replayAll();
        LatencyStoringServiceMonitorAdaptor adaptor = new LatencyStoringServiceMonitorAdaptor(service, m_pollerConfig, pkg, m_persisterFactory, m_resourceStorageDao);
        // Make sure that the ThresholdingSet initializes with test settings
        String previousOpennmsHome = System.setProperty("opennms.home", "src/test/resources");
        adaptor.poll(svc, parameters);
        System.setProperty("opennms.home", previousOpennmsHome);
        m_mocks.verifyAll();
    }

