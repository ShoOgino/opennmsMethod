    public void testNodeGainedServiceWhileNodeAndServiceDown() {
        
        // get node 2... bring it down
        // when the poller knows its down add down service and send nodeGainedService event
        // expect?
        
        startDaemons();
        
        MockNode node = m_network.getNode(4);
        
        anticipateDown(node);
        
        node.bringDown();
        
        verifyAnticipated(5000);
        
        resetAnticipated();
        
        MockService svc = m_network.addService(4, "192.168.1.6", "SMTP");
        
        svc.bringDown();
        
        m_db.writeService(svc);
        
        Event e = MockEventUtil.createNodeGainedServiceEvent("Test", svc);
        m_eventMgr.sendEventToListeners(e);
        
        
        sleep(5000);
        
        System.err.println(m_db.getOutages());
        verifyAnticipated(8000);

        
        
//        MockNode node = m_network.addNode(99, "TestNode");
//        m_db.writeNode(node);
//        MockInterface iface = m_network.addInterface(99, "10.1.1.1");
//        m_db.writeInterface(iface);
//        MockService element = m_network.addService(99, "10.1.1.1", svcName);
//        m_db.writeService(element);
//        m_pollerConfig.addService(element);
//        MockService smtp = m_network.addService(99, "10.1.1.1", "HTTP");
//        m_db.writeService(smtp);
//        m_pollerConfig.addService(smtp);
//
//        MockVisitor gainSvcSender = new MockVisitorAdapter() {
//            public void visitService(MockService svc) {
//                Event event = MockEventUtil
//                        .createNodeGainedServiceEvent("Test", svc);
//                m_eventMgr.sendEventToListeners(event);
//            }
//        };
//        node.visit(gainSvcSender);
//
//        PollAnticipator anticipator = new PollAnticipator();
//        element.addAnticipator(anticipator);
//
//        anticipator.anticipateAllServices(element);
//
//        assertEquals(0, anticipator.waitForAnticipated(10000).size());
//
//        anticipateDown(element);
//
//        element.bringDown();
//
//        verifyAnticipated(10000);

    }

