    @Test
    public void testAlternateDowntimeInterval() {
        // HERE ARE the calls to setup the downtime model
        // m_pollerConfig.addDowntime(500L, 0L, 1000L, false);
        // m_pollerConfig.addDowntime(500L, 1000L, -1L, true);
        // m_pollerConfig.setDefaultPollInterval(2000L);
        // m_pollerConfig.addService(m_mockNetwork.getService(2, "192.168.1.3", "HTTP"));

        // mDot3Http/pDot3Http
        final Package pkg = m_pollerConfig.getPackage("TestPkg2");
        final PollableServiceConfig pollConfig = new PollableServiceConfig(pDot3Http, m_pollerConfig, m_pollerConfig, pkg, m_timer);

        m_timer.setCurrentTime(1000L);
        pDot3Http.updateStatus(PollStatus.down());
        assertEquals(1000, pDot3Http.getStatusChangeTime());
        assertChanged(pDot3Http);
        assertDown(pDot3Http);
        assertEquals(500L, pollConfig.getInterval());

        m_timer.setCurrentTime(1234L);
        assertEquals(500L, pollConfig.getInterval());

        m_timer.setCurrentTime(1500L);
        assertEquals(500L, pollConfig.getInterval());

        m_timer.setCurrentTime(1700L);
        assertEquals(500L, pollConfig.getInterval());

        m_timer.setCurrentTime(2000L);
        assertEquals(-1L, pollConfig.getInterval());

        LOG.debug(".3 HTTP: {}: status={}, changetime={}", pDot3Http, pDot3Http.getStatus(), pDot3Http.getStatusChangeTime());
    }

