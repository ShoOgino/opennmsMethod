    @Test
    public void testThresholds() throws Exception {
        System.setProperty("opennms.home", "src/test/resources");
        
        Map<String,Object> parameters = new HashMap<String,Object>();
        parameters.put("rrd-repository", "/tmp");
        parameters.put("ds-name", "icmp");
        parameters.put("rrd-base-name", "icmp");
        parameters.put("thresholding-enabled", "true");
        
        FilterDao filterDao = m_mocks.createMock(FilterDao.class);
        expect(filterDao.getActiveIPAddressList((String)EasyMock.anyObject())).andReturn(Collections.singletonList(addr("127.0.0.1"))).anyTimes();
        FilterDaoFactory.setInstance(filterDao);
        
        MonitoredService svc = m_mocks.createMock(MonitoredService.class);
        expect(svc.getNodeId()).andReturn(1);
        expect(svc.getIpAddr()).andReturn("127.0.0.1");
        expect(svc.getAddress()).andReturn(InetAddressUtils.addr("127.0.0.1"));
        expect(svc.getSvcName()).andReturn("ICMP");

        ServiceMonitor service = m_mocks.createMock(ServiceMonitor.class);
        PollStatus value = PollStatus.get(PollStatus.SERVICE_AVAILABLE, 100.0);
        expect(service.poll(svc, parameters)).andReturn(value);
        
        int step = 300;
        List<String> rras = Collections.singletonList("RRA:AVERAGE:0.5:1:2016");
        Package pkg = new Package();
        Rrd rrd = new Rrd();
        rrd.setStep(step);
        rrd.setRra(rras);
        pkg.setRrd(rrd);
        
        expect(m_pollerConfig.getRRAList(pkg)).andReturn(rras);
        expect(m_pollerConfig.getStep(pkg)).andReturn(step).anyTimes();
        
        expect(m_rrdStrategy.getDefaultFileExtension()).andReturn(".rrd").anyTimes();
        expect(m_rrdStrategy.createDefinition(isA(String.class), isA(String.class), isA(String.class), anyInt(), isAList(RrdDataSource.class), isAList(String.class))).andReturn(new Object());
        m_rrdStrategy.createFile(isA(Object.class));
        expect(m_rrdStrategy.openFile(isA(String.class))).andReturn(new Object());
        m_rrdStrategy.updateFile(isA(Object.class), isA(String.class), endsWith(":100"));
        m_rrdStrategy.closeFile(isA(Object.class));

        EventAnticipator anticipator = new EventAnticipator();
        MockEventIpcManager eventMgr = new MockEventIpcManager();
        eventMgr.setEventAnticipator(anticipator);
        eventMgr.setSynchronous(true);
        EventIpcManager eventdIpcMgr = (EventIpcManager)eventMgr;
        EventIpcManagerFactory.setIpcManager(eventdIpcMgr);

        MockNetwork network = new MockNetwork();
        network.setCriticalService("ICMP");
        network.addNode(1, "testNode");
        network.addInterface("127.0.0.1");
        network.setIfAlias("eth0");
        network.addService("ICMP");
        network.addService("SNMP");
        MockDatabase db = new MockDatabase();
        db.populate(network);
        db.update("update snmpinterface set snmpifname=?, snmpifdescr=? where id=?", "eth0", "eth0", 1);
        DataSourceFactory.setInstance(db);
        Vault.setDataSource(db);

        EventBuilder bldr = new EventBuilder("uei.opennms.org/threshold/highThresholdExceeded", "LatencyStoringServiceMonitorAdaptorTest");
        bldr.setNodeid(1);
        bldr.setInterface(addr("127.0.0.1"));
        bldr.setService("ICMP");
        anticipator.anticipateEvent(bldr.getEvent());
        m_mocks.replayAll();
        LatencyStoringServiceMonitorAdaptor adaptor = new LatencyStoringServiceMonitorAdaptor(service, m_pollerConfig, pkg);
        adaptor.poll(svc, parameters);
        m_mocks.verifyAll();
        anticipator.verifyAnticipated();
    }

