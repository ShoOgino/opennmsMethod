	public void testGetPollerConfiguration() {
        
        expect(m_locMonDao.get(m_locationMonitor.getId())).andReturn(m_locationMonitor);
        expect(m_locMonDao.findMonitoringLocationDefinition(m_locationDefinition.getName())).andReturn(m_locationDefinition);
        
        expect(m_pollerConfig.getPackage(m_locationDefinition.getPollingPackageName())).andReturn(m_package);
        expect(m_pollerConfig.getServiceSelectorForPackage(m_package)).andReturn(m_serviceSelector);
        expect(m_pollerConfig.getServiceInPackage("HTTP", m_package)).andReturn(m_httpSvcConfig);
        expect(m_pollerConfig.getServiceInPackage("DNS", m_package)).andReturn(m_dnsSvcConfig);
        
        expect(m_monSvcDao.findMatchingServices(m_serviceSelector)).andReturn(Arrays.asList(m_monServices));
        
        replayMocks();
        
        PollerConfiguration config = m_backEnd.getPollerConfiguration(m_locationMonitor.getId());
        
        verifyMocks();
        
        assertNotNull(config);
        assertEquals(m_startTime, config.getConfigurationTimestamp());
        assertNotNull(config.getPolledServices());
        assertEquals(2, config.getPolledServices().length);
        assertEquals(m_httpService.getServiceName(), config.getPolledServices()[0].getSvcName());
        assertEquals(m_dnsService.getServiceName(), config.getPolledServices()[1].getSvcName());
        assertEquals(5678, config.getPolledServices()[1].getPollModel().getPollInterval());
        assertTrue(config.getPolledServices()[1].getMonitorConfiguration().containsKey("hostname"));
    }

