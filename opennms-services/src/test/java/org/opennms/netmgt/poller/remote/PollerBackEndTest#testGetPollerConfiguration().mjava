    public void testGetPollerConfiguration() {

        expect(m_locMonDao.get(m_locationMonitor.getId())).andReturn(m_locationMonitor);
        expect(m_locMonDao.findMonitoringLocationDefinition(m_locationDefinition.getName())).andReturn(m_locationDefinition);

        expect(m_pollerConfig.getPackage(m_locationDefinition.getPollingPackageName())).andReturn(m_package);
        expect(m_pollerConfig.getServiceSelectorForPackage(m_package)).andReturn(m_serviceSelector);
        expect(m_pollerConfig.getServiceInPackage("HTTP", m_package)).andReturn(m_httpSvcConfig);
        expect(m_pollerConfig.getServiceInPackage("DNS", m_package)).andReturn(m_dnsSvcConfig);

        expect(m_monSvcDao.findMatchingServices(m_serviceSelector)).andReturn(Arrays.asList(m_monServices));

        m_mocks.replayAll();

        PollerConfiguration config = m_backEnd.getPollerConfiguration(m_locationMonitor.getId());

        assertNotNull(config);
        assertEquals(m_startTime, config.getConfigurationTimestamp());
        assertNotNull(config.getPolledServices());
        assertEquals(2, config.getPolledServices().length);

        Map<String,PolledService> services = new TreeMap<String,PolledService>();
        for (final PolledService ps : config.getPolledServices()) {
        	services.put(ps.getSvcName(), ps);
        }

        //Because the config is sorted DNS will change from index 1 to index 0;
        assertTrue(services.keySet().contains(m_dnsService.getServiceName()));
        assertTrue(services.keySet().contains(m_httpService.getServiceName()));
        assertEquals(5678, services.get("DNS").getPollModel().getPollInterval());
        assertTrue(services.get("DNS").getMonitorConfiguration().containsKey("hostname"));
    }

