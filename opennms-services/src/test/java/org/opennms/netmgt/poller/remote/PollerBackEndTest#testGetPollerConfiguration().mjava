    public void testGetPollerConfiguration() {
        
        String pkgName = "OAKPackage";

        OnmsMonitoringLocationDefinition def = new OnmsMonitoringLocationDefinition();
        def.setArea("Oakland");
        def.setName("OAK");
        def.setPollingPackageName(pkgName);
        
        String filterRule = "ipaddr = '192.168.1.1'";
        Package pkg = createPackage(pkgName, filterRule);
        Service http = addService(pkg, "HTTP", 1234, "url", "http://www.opennms.org");
        Service dns = addService(pkg, "DNS", 5678, "hostname", "www.opennms.org");
        
        String[] svcNames = { "HTTP", "DNS" };
        
        ServiceSelector selector = new ServiceSelector(filterRule, Arrays.asList(svcNames));
        
        OnmsMonitoredService[] monServices = new OnmsMonitoredService[2];
        
        NetworkBuilder builder = new NetworkBuilder(new OnmsDistPoller("localhost", "127.0.0.1"));
        builder.addNode("testNode");
        builder.addInterface("192.168.1.1");
        monServices[0] = builder.addService(new OnmsServiceType("HTTP"));
        monServices[1] = builder.addService(new OnmsServiceType("DNS"));
        
        OnmsLocationMonitor mon = new OnmsLocationMonitor();
        mon.setId(1);
        mon.setLocationDefinition(def);
        
        expect(m_locMonDao.get(mon.getId())).andReturn(mon);
        
        expect(m_pollerConfig.getPackage(pkgName)).andReturn(pkg);
        expect(m_pollerConfig.getServiceSelectorForPackage(pkg)).andReturn(selector);
        expect(m_pollerConfig.getServiceInPackage("HTTP", pkg)).andReturn(http);
        expect(m_pollerConfig.getServiceInPackage("DNS", pkg)).andReturn(dns);
        
        expect(m_monSvcDao.findMatchingServices(selector)).andReturn(Arrays.asList(monServices));
        
        replay(m_locMonDao, m_monSvcDao, m_pollerConfig);
        
        PollerConfiguration config = m_backEnd.getPollerConfiguration(mon.getId());
        
        verify(m_locMonDao, m_monSvcDao, m_pollerConfig);
        
        assertNotNull(config);
        assertEquals(2, config.getConfigurationForPoller().length);
        assertEquals(monServices[0], config.getConfigurationForPoller()[0].getMonitoredService());
        assertEquals(monServices[1], config.getConfigurationForPoller()[1].getMonitoredService());
        assertEquals(5678, config.getConfigurationForPoller()[1].getPollModel().getPollInterval());
        assertTrue(config.getConfigurationForPoller()[1].getMonitorConfiguration().containsKey("hostname"));
    }

