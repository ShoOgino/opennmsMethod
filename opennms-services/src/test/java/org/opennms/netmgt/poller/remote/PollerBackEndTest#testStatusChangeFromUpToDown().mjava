    // reportResult test variations
    // what if we cant' find the locationMonitor with that ID
    // what if we can't find the service with that ID
    // what if we can't find a current status
    // what if the new status is the same as the current status
    // what if they are different
    // test for saving rrd data
    // do I send events for status changed
    public void testStatusChangeFromUpToDown() {
        
        expect(m_locMonDao.get(1)).andReturn(m_locationMonitor);
        expect(m_monSvcDao.get(1)).andReturn(m_httpService);
        
        expect(m_locMonDao.getMostRecentStatusChange(m_locationMonitor, m_httpService)).andReturn(m_httpCurrentStatus);
        
        final PollStatus newStatus = PollStatus.unavailable("Test Down");
        
        m_locMonDao.saveStatusChange(isA(OnmsLocationSpecificStatusChange.class));
        expectLastCall().andAnswer(new IAnswer<Object>() {

            public Object answer() throws Throwable {
                OnmsLocationSpecificStatusChange statusChange = (OnmsLocationSpecificStatusChange)getCurrentArguments()[0];
                assertEquals(m_locationMonitor, statusChange.getLocationMonitor());
                assertEquals(m_httpService, statusChange.getMonitoredService());
                assertEquals(newStatus.getStatusCode(), statusChange.getStatus().getStatusCode());
                assertEquals(newStatus.getResponseTime(), statusChange.getStatus().getResponseTime());
                assertEquals(newStatus.getReason(), statusChange.getStatus().getReason());
                
                return null;
            }
            
        });
        
        replay(m_locMonDao, m_monSvcDao, m_pollerConfig);
        
        m_backEnd.reportResult(1, 1, newStatus);
        
        verify(m_locMonDao, m_monSvcDao, m_pollerConfig);
    }

