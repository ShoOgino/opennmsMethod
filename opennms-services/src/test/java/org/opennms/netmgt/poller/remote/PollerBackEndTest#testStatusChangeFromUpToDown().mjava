    // reportResult test variations
    // what if we cant' find the locationMonitor with that ID
    // what if we can't find the service with that ID
    // what if we can't find a current status
    // do I send events for status changed
    public void testStatusChangeFromUpToDown() {
        
        expect(m_locMonDao.get(1)).andReturn(m_locationMonitor);
        expect(m_monSvcDao.get(1)).andReturn(m_httpService);
        
        expect(m_locMonDao.getMostRecentStatusChange(m_locationMonitor, m_httpService)).andReturn(m_httpCurrentStatus);
        
        // TODO: make anticipate method
        EventBuilder eventBuilder = new EventBuilder(EventConstants.REMOTE_NODE_LOST_SERVICE_UEI, "PollerBackEnd")
            .setMonitoredService(m_httpService)
            .addParam(EventConstants.PARM_LOCATION_MONITOR_ID, "1");
        
        
        m_eventIpcManager.sendNow(eq(eventBuilder.getEvent()));
        
        final PollStatus newStatus = PollStatus.unavailable("Test Down");
        
        OnmsLocationSpecificStatus expectedStatus = new OnmsLocationSpecificStatus(m_locationMonitor, m_httpService, newStatus);
        
        m_locMonDao.saveStatusChange(isA(OnmsLocationSpecificStatus.class));
        expectLastCall().andAnswer(new StatusChecker(expectedStatus));

        replayMocks();
        
        m_backEnd.reportResult(1, 1, newStatus);
        
        verifyMocks();

    }

