    private PollableNetwork createPollableNetwork(final DataSource db, final ScheduleTimer scheduler, final PollerConfig pollerConfig, final PollOutagesConfig pollOutageConfig, PollContext pollContext) throws UnknownHostException {
        
        final PollableNetwork pNetwork = new PollableNetwork(pollContext);
        
        String sql = "select ifServices.nodeId as nodeId, node.nodeLabel as nodeLabel, ifServices.ipAddr as ipAddr, ifServices.serviceId as serviceId, service.serviceName as serviceName, outages.svcLostEventId as svcLostEventId, events.eventUei as svcLostEventUei, outages.ifLostService as ifLostService, outages.ifRegainedService as ifRegainedService " +
                "from ifServices " +
                "join node on ifServices.nodeId = node.nodeId " +
                "join service on ifServices.serviceId = service.serviceId " +
                "left outer join outages on " +
                "ifServices.nodeId = outages.nodeId and " +
                "ifServices.ipAddr = outages.ipAddr and " +
                "ifServices.serviceId = outages.serviceId and " +
                "ifRegainedService is null " +
                "left outer join events on outages.svcLostEventId = events.eventid " +
                "where ifServices.status = 'A'";

        
        Querier querier = new Querier(db, sql) {
            @Override
            public void processRow(ResultSet rs) throws SQLException {
                int nodeId = rs.getInt("nodeId");
                String nodeLabel = rs.getString("nodeLabel");
                String ipAddr = rs.getString("ipAddr");
                String serviceName = rs.getString("serviceName");
                Date date = rs.getTimestamp("ifLostService");
                Number svcLostEventId = (Number)rs.getObject("svcLostEventId");
                String svcLostUei = rs.getString("svcLostEventUei");
                
                addServiceToNetwork(pNetwork, nodeId, nodeLabel, ipAddr,
                                    serviceName, svcLostEventId, svcLostUei,
                                    date, scheduler, pollerConfig,
                                    pollOutageConfig);
                    
                // schedule.schedule();
                //MockUtil.println("Created Pollable Service "+svc+" with package "+pkg.getName());

            }

        };
        querier.execute();


        pNetwork.recalculateStatus();
        pNetwork.propagateInitialCause();
        pNetwork.resetStatusChanged();
        return pNetwork;
    }

