    static private PollableNetwork createPollableNetwork(final DataSource db, final ScheduleTimer scheduler, final PollerConfig pollerConfig, final PollOutagesConfig pollOutageConfig, PollContext pollContext) throws UnknownHostException {
        
        final PollableNetwork pNetwork = new PollableNetwork(pollContext);
        
        String sql = "select ifServices.nodeId as nodeId, node.nodeLabel as nodeLabel, ifServices.ipAddr as ipAddr, ifServices.serviceId as serviceId, service.serviceName as serviceName, outages.svcLostEventId as svcLostEventId, events.eventUei as svcLostEventUei, outages.ifLostService as ifLostService, outages.ifRegainedService as ifRegainedService " +
                "from ifServices " +
                "join node on ifServices.nodeId = node.nodeId " +
                "join service on ifServices.serviceId = service.serviceId " +
                "left outer join outages on " +
                "ifServices.nodeId = outages.nodeId and " +
                "ifServices.ipAddr = outages.ipAddr and " +
                "ifServices.serviceId = outages.serviceId and " +
                "ifRegainedService is null " +
                "left outer join events on outages.svcLostEventId = events.eventid " +
                "where ifServices.status = 'A'";

        final InitCause causeSetter = new InitCause();
        
        Querier querier = new Querier(db, sql) {
            public void processRow(ResultSet rs) throws SQLException {
                int nodeId = rs.getInt("nodeId");
                String nodeLabel = rs.getString("nodeLabel");
                String ipAddr = rs.getString("ipAddr");
                String serviceName = rs.getString("serviceName");
                Package pkg = findPackageForService(ipAddr, serviceName);
                if (pkg == null) {
                    MockUtil.println("No package for service "+serviceName+" with ipAddr "+ipAddr);
                    return;
                }
                
                try {
                    
                    PollableService svc = pNetwork.createService(nodeId, nodeLabel, InetAddress.getByName(ipAddr), serviceName);
                    PollableServiceConfig pollConfig = new PollableServiceConfig(svc, pollerConfig, pollOutageConfig, pkg, scheduler);
                    svc.setPollConfig(pollConfig);
                    synchronized (svc) {
                        if (svc.getSchedule() == null) {
                            Schedule schedule = new Schedule(svc, pollConfig, scheduler);
                            svc.setSchedule(schedule);
                        }
                    }

                    Number svcLostEventId = (Number)rs.getObject("svcLostEventId");
                    //MockUtil.println("svcLostEventId for "+svc+" is "+svcLostEventId);
                    if (svcLostEventId == null) 
                        svc.updateStatus(PollStatus.up());
                    else {
                        svc.updateStatus(PollStatus.down());
                    
                        Date date = rs.getTimestamp("ifLostService");
                        PollEvent cause = new DbPollEvent(svcLostEventId.intValue(), date);
                        String svcLostUei = rs.getString("svcLostEventUei");
                        causeSetter.setCause(cause);

                        if (EventConstants.NODE_LOST_SERVICE_EVENT_UEI.equals(svcLostUei)) {
                            svc.visit(causeSetter);
                        } else if (EventConstants.INTERFACE_DOWN_EVENT_UEI.equals(svcLostUei)) {
                            svc.getInterface().visit(causeSetter);
                        } else if (EventConstants.NODE_DOWN_EVENT_UEI.equals(svcLostUei)) {
                            svc.getNode().visit(causeSetter);
                        }
                    }
                    
                    // schedule.schedule();
                    //MockUtil.println("Created Pollable Service "+svc+" with package "+pkg.getName());
                } catch (UnknownHostException e) {
                    // in 'real life' I would just log this and contine with the others
                    throw new RuntimeException("Error converting "+ipAddr+" to an InetAddress", e);
                }
            }
            private Package findPackageForService(String ipAddr, String serviceName) {
                Enumeration en = pollerConfig.enumeratePackage();
                Package lastPkg = null;
                while (en.hasMoreElements()) {
                    Package pkg = (Package)en.nextElement();
                    if (pollableServiceInPackage(ipAddr, serviceName, pkg))
                        lastPkg = pkg;
                }
                return lastPkg;
                
            }
            private boolean pollableServiceInPackage(String ipAddr, String serviceName, Package pkg) {
                return (pollerConfig.serviceInPackageAndEnabled(serviceName, pkg)
                        && pollerConfig.interfaceInPackage(ipAddr, pkg));
            }


        };
        querier.execute();

        pNetwork.recalculateStatus();
        pNetwork.resetStatusChanged();
        return pNetwork;
    }

