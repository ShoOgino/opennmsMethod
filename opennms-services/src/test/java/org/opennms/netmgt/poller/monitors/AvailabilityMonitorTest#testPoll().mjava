    /**
     * Test method for {@link org.opennms.netmgt.poller.monitors.AvailabilityMonitor#poll(org.opennms.netmgt.poller.MonitoredService, java.util.Map)}.
     */
    public final void testPoll() {
        ServiceMonitor sm = new AvailabilityMonitor();
        Map<String, String> parameters = new HashMap<String, String>();
        parameters.put("timeout", "3000");
        MonitoredService svc = new MonitoredService() {
            protected InetAddress getNetworkAddress() {
                return getAddress();
            }
            public InetAddress getAddress() {
                try {
                    return InetAddress.getLocalHost();
                } catch (UnknownHostException e) {
                    throw new IllegalStateException("Error getting localhost address", e);
                }
            }
            public String getIpAddr() {
                return getAddress().getHostAddress();
            }
            public NetworkInterface getNetInterface() {
                return new NetworkInterface() {
                    public Object getAddress() {
                        return getNetworkAddress();
                    }
                    public Object getAttribute(String property) {
                        return null;
                    }
                    public int getType() {
                        return 0;
                    }
                    public Object setAttribute(String property, Object value) {
                        return null;
                    }
                };
            }
            public int getNodeId() {
                return 0;
            }
            public String getNodeLabel() {
                return "localhost";
            }
            public String getSvcName() {
                return "ICMP";
            }
            
        };
        PollStatus status = sm.poll(svc, parameters);
        assertEquals(PollStatus.SERVICE_AVAILABLE, status.getStatusCode());
    }

