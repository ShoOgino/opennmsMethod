    public void testMatchingTextInResponse() throws UnknownHostException {
        
        if (m_runTests == false) return;
        
        Map<String, String> m = Collections.synchronizedMap(new TreeMap<String, String>());
        Parameter p = new Parameter();
        PollStatus status = null;
        
        ServiceMonitor monitor = new HttpMonitor();
        MonitoredService svc = getMonitoredService(3, "www.opennms.org", "HTTP");

        p.setKey("port");
        p.setValue("80");
        m.put(p.getKey(), p.getValue());
        
        p.setKey("retry");
        p.setValue("0");
        m.put(p.getKey(), p.getValue());
        
        p.setKey("timeout");
        p.setValue("2000");
        m.put(p.getKey(), p.getValue());
        
        p.setKey("response");
        p.setValue("100-499");
        m.put(p.getKey(), p.getValue());
                
        p.setKey("verbose");
        p.setValue("true");
        m.put(p.getKey(), p.getValue());
        
        p.setKey("host-name");
        p.setValue("www.opennms.org");
        m.put(p.getKey(), p.getValue());
        
        p.setKey("url");
        p.setValue("/index.php/Main_Page");
        m.put(p.getKey(), p.getValue());
        
        p.setKey("response-text");
        p.setValue("opennmsrulz");
        m.put(p.getKey(), p.getValue());

        status = monitor.poll(svc, m);        
        MockUtil.println("Reason: "+status.getReason());
        assertEquals(PollStatus.SERVICE_UNAVAILABLE, status.getStatusCode());
        assertNotNull(status.getReason());

        p.setKey("response-text");
        p.setValue("New and Noteworthy");
        m.put(p.getKey(), p.getValue());
        
        MockUtil.println("\nliteral text check: \"New and Noteworthy\"");
        monitor = new HttpMonitor();
        status = monitor.poll(svc, m);
        MockUtil.println("Reason: "+status.getReason());
        assertEquals(PollStatus.SERVICE_AVAILABLE, status.getStatusCode());
        assertNull(status.getReason());

        p.setKey("response-text");
        p.setValue("~.*[Tt]ry [Oo]ut [Oo]penNMS.*");
        m.put(p.getKey(), p.getValue());

        MockUtil.println("\nregex check: \".*[Tt]ry [Oo]ut [Oo]penNMS.*\"");
        monitor = new HttpMonitor();
        status = monitor.poll(svc, m);
        MockUtil.println("Reason: "+status.getReason());
        assertEquals(PollStatus.SERVICE_AVAILABLE, status.getStatusCode());
        assertNull(status.getReason());

    }

