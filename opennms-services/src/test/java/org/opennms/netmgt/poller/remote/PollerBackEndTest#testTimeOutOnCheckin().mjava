    public void testTimeOutOnCheckin() {
        final Date now = new Date();

        m_locationMonitor.setStatus(MonitorStatus.STARTED);
        m_locationMonitor.setLastCheckInTime(new Date(now.getTime() - UNRESPONSIVE_TIMEOUT - 100));
        
        expect(m_locMonDao.findAll()).andReturn(Collections.singleton(m_locationMonitor));
        
        expect(m_timeKeeper.getCurrentDate()).andReturn(now);
        
        EventBuilder eventBuilder = new EventBuilder(EventConstants.LOCATION_MONITOR_DISCONNECTED_UEI)
            .setSource("PollerBackEnd")
            .addParam(EventConstants.PARM_LOCATION_MONITOR_ID, 1);
    
        m_eventIpcManager.sendNow(eq(eventBuilder.getEvent()));


        m_locMonDao.update(m_locationMonitor);
        expectLastCall().andAnswer(new IAnswer<Object>() {
        
            public Object answer() throws Throwable {
                OnmsLocationMonitor mon = (OnmsLocationMonitor)getCurrentArguments()[0];
                assertEquals(MonitorStatus.UNRESPONSIVE, mon.getStatus());
                assertTrue(mon.getLastCheckInTime().before(new Date(now.getTime() - UNRESPONSIVE_TIMEOUT)));
                return null;
            }
            
        });
        
        replayMocks();

        m_backEnd.checkforUnresponsiveMonitors();
        
        verifyMocks();
    }

