    @Test
    public void testLock() throws Exception {
        final AtomicInteger m_lockCount = new AtomicInteger(0);

        final Runnable r = new Runnable() {
            @Override
            public void run() {
                assertEquals(1, m_lockCount.incrementAndGet());
                try { Thread.sleep(3000); } catch (InterruptedException e) {}
                assertEquals(0, m_lockCount.decrementAndGet());
            }
        };

        final Runnable locker = new Runnable() {
            @Override
            public void run() {
                pNode1.withTreeLock(r);
            }
        };

        Thread[] threads = new Thread[5];
        for(int i = 0; i < 5; i++) {
            threads[i] = new Thread(locker);
            threads[i].start();
        }

        for(int i = 0; i < 5; i++) {
            threads[i].join();
        }

    }

