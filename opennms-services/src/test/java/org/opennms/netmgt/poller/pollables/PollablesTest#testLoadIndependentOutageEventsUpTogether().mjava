    @Test
    public void testLoadIndependentOutageEventsUpTogether() throws Exception {
        anticipateDown(mDot1Smtp);

        mDot1Smtp.bringDown();

        pDot1Smtp.doPoll();

        m_network.processStatusChange(new Date());

        PollEvent svcCause = pDot1Smtp.getCause();

        verifyAnticipated();

        anticipateDown(mNode1);

        mNode1.bringDown();

        pDot1Icmp.doPoll();

        m_network.processStatusChange(new Date());

        PollEvent nodeCause = pNode1.getCause();

        assertElementHasCause(pDot1Smtp, svcCause);
        assertElementHasCause(pDot1Icmp, nodeCause);
        assertElementHasCause(pNode1, nodeCause);

        verifyAnticipated();

        // recreate the pollable network from the database
        m_network = createPollableNetwork(m_db, m_scheduler, m_pollerConfig, m_pollerConfig, m_pollContext);
        assignPollableMembers(m_network);

        assertElementHasCause(pDot1Smtp, svcCause);
        assertElementHasCause(pDot1Icmp, nodeCause);
        assertElementHasCause(pNode1, nodeCause);

        assertDown(pDot1Smtp);
        assertDown(pDot1Icmp);
        assertDown(pDot2Smtp);
        assertDown(pDot2Icmp);
        assertDown(pDot1);
        assertDown(pDot2);
        assertDown(pNode1);

        anticipateUp(mDot1Smtp);
        anticipateUp(mNode1);

        mNode1.bringUp();

        pDot1Icmp.doPoll();

        m_network.processStatusChange(new Date());

        verifyAnticipated();


    }

