    @Test
    public void testYesterdayEndingDST() {
        RelativeTime yesterday = RelativeTime.YESTERDAY;
        yesterday.setTimeKeeper(new TimeKeeper() {

            public Date getCurrentDate() {
                Calendar cal = new GregorianCalendar(m_timeZone, Locale.ENGLISH);
                cal.set(m_endYear, m_endMonth, m_endDay, 10, 0, 0);
                return cal.getTime();
            }

            public long getCurrentTime() {
                return getCurrentDate().getTime();
            }

            @Override
            public TimeZone getTimeZone() {
                return m_timeZone;
            }
            
        });
        
        Date start = yesterday.getStart();
        Date end = yesterday.getEnd();

        Calendar c = new GregorianCalendar(m_timeZone, Locale.ENGLISH);
        c.setTime(start);

        assertEquals(m_offset, c.get(Calendar.ZONE_OFFSET));
        assertEquals(m_endYear, c.get(Calendar.YEAR));
        assertEquals(0, c.get(Calendar.HOUR_OF_DAY));
        assertEquals(Calendar.SUNDAY, c.get(Calendar.DAY_OF_WEEK));
        assertEquals(m_endDay - 1, c.get(Calendar.DAY_OF_MONTH));

        c.setTime(end);

        assertEquals(m_offset, c.get(Calendar.ZONE_OFFSET));
        assertEquals(m_endYear, c.get(Calendar.YEAR));
        assertEquals(0, c.get(Calendar.HOUR_OF_DAY));
        assertEquals(Calendar.MONDAY, c.get(Calendar.DAY_OF_WEEK));
        assertEquals(m_endDay, c.get(Calendar.DAY_OF_MONTH));

        assertEquals("end date - start date", 90000000, end.getTime() - start.getTime());
    }

