    @Test
    public void testYesterdayEndingDST() {
        RelativeTime yesterday = RelativeTime.YESTERDAY;
        yesterday.setTimeKeeper(new TimeKeeper() {

            public Date getCurrentDate() {
                Calendar cal = new GregorianCalendar(m_timeZone, Locale.ENGLISH);
                cal.set(2006, Calendar.OCTOBER, 30, 10, 0, 0);
                return cal.getTime();
            }

            public long getCurrentTime() {
                return getCurrentDate().getTime();
            }
            
        });
        
        Date start = yesterday.getStart();
        Date end = yesterday.getEnd();

        Calendar c = new GregorianCalendar(m_timeZone, Locale.ENGLISH);
        c.setTime(start);

        assertEquals(-18000000, c.get(Calendar.ZONE_OFFSET));
        assertEquals(2006, c.get(Calendar.YEAR));
        assertEquals(23, c.get(Calendar.HOUR_OF_DAY));
        assertEquals(Calendar.SATURDAY, c.get(Calendar.DAY_OF_WEEK));
        assertEquals(28, c.get(Calendar.DAY_OF_MONTH));

        c.setTime(end);

        assertEquals(-18000000, c.get(Calendar.ZONE_OFFSET));
        assertEquals(2006, c.get(Calendar.YEAR));
        assertEquals(0, c.get(Calendar.HOUR_OF_DAY));
        assertEquals(Calendar.MONDAY, c.get(Calendar.DAY_OF_WEEK));
        assertEquals(30, c.get(Calendar.DAY_OF_MONTH));

        assertEquals("start date", "Sun, 29 Oct 2006 00:00:00 -0400 (EDT)", m_dateFormat.format(start));
        assertEquals("end date", "Mon, 30 Oct 2006 00:00:00 -0500 (EST)", m_dateFormat.format(end));
        assertEquals("end date - start date", 90000000, end.getTime() - start.getTime());
    }

