    // See NMS-10458
    @Test
    @Transactional
    public void verifyAvailabilityIfEverythingIsDown() {
        final MockNetwork mockNetwork = new MockNetwork();
        mockNetwork.createStandardNetwork();
        m_mockDatabase.populate(mockNetwork);

        final RTCCategory rtcCat = EasyMock.createNiceMock(RTCCategory.class);
        EasyMock.expect(rtcCat.getLabel()).andReturn("TEST").anyTimes();
        EasyMock.expect(rtcCat.getNodes()).andReturn(Lists.newArrayList(1, 2, 3)).anyTimes();
        EasyMock.replay(rtcCat);

        final long now = System.currentTimeMillis();
        final long oneDayAgo = now - (1000 * 60 * 60 * 24);

        // Create Outage for Node 1
        createOutage(mockNetwork.getService(1, "192.168.1.1", "ICMP"), oneDayAgo);

        // Create Outages for Node 2
        createOutage(mockNetwork.getService(2, "192.168.1.3", "ICMP"), oneDayAgo);
        createOutage(mockNetwork.getService(2, "192.168.1.3", "HTTP"), oneDayAgo);

        // Calculate Availability for category
        final EuiLevel euiLevel = m_availabilityService.getEuiLevel(rtcCat);
        assertEquals(1, euiLevel.getCategory().size());

        // Verify Category Availability
        final Category category = euiLevel.getCategory().get(0);
        assertEquals("TEST", category.getCatlabel());
        assertEquals(70.0f, category.getCatvalue(), 0.0001);

        // Verify Nodes
        final List<Node> nodes = category.getNode();
        assertEquals(3, nodes.size());
        verifyNode(nodes.get(0), 1, 75.0f);
        verifyNode(nodes.get(1), 2, 0.0f);
        verifyNode(nodes.get(2), 3, 100.0f);
    }

