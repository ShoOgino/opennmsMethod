    // These exist to provide testing for the new Textual Convention feature
    // See EventConfDataTest for the other part of this testing
    @Test
    @DirtiesContext
    public void testV1EnterpriseIdAndGenericAndSpecificAndMatchWithVarbindsAndTC()
    throws Exception {
        SnmpValueFactory valueFactory = SnmpUtils.getValueFactory();

        LinkedHashMap<String, SnmpValue> varbinds = new LinkedHashMap <String, SnmpValue>();
        varbinds.put(".1.3.6.1.4.1.14179.2.6.2.20.0", valueFactory.getOctetString(new byte[]{(byte)0x00,(byte)0x14,(byte)0xf1,(byte)0xad,(byte)0xa7,(byte)0x50}));
        Collection<Event> events = anticipateAndSend(false, true,
                "uei.opennms.org/vendor/cisco/bsnAPNoiseProfileUpdatedToPass",
                "v1", ".1.3.6.1.4.1.14179.2.6.3", 6, 38, varbinds);

        boolean foundMacAddress = false;
        // Assert that the MAC address varbind has been formatted into a colon-separated octet string
        for (Event event : events) {
            for (Parm parm : event.getParms().getParmCollection()) {
                if (".1.3.6.1.4.1.14179.2.6.2.20.0".equals(parm.getParmName())) {
                    assertEquals("MAC address does not match", "00:14:F1:AD:A7:50", parm.getValue().getContent());
                    foundMacAddress = true;
                }
            }
        }
        assertTrue("Did not find expected MAC address parm", foundMacAddress);
    }

