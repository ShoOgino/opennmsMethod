    /**
     * This tests the ability to move a specific from one definition into a range of another definition.  The
     * results should be that the 2 ranges in the first definition are recombined into a single range based on 
     * the single IP address that was in a different existing defintion that will now be removed and the definition
     * deleted.
     * 
     * @throws MarshalException
     * @throws ValidationException
     * @throws IOException 
     */
    public void testRecombineSpecificIntoRange() throws IOException {
        
        String snmpConfigXml = "<?xml version=\"1.0\"?>\n" + 
        "<snmp-config retry=\"3\" timeout=\"800\"\n" + 
        "   read-community=\"public\" write-community=\"private\">\n" + 
        "   <definition version=\"v2c\">\n" + 
        "       <range begin=\"192.168.1.10\" end=\"192.168.1.14\"/>" + 
        "       <range begin=\"192.168.1.16\" end=\"192.168.1.40\"/>" + 
        "   </definition>\n" + 
        "   <definition version=\"v1\">\n" + 
        "       <specific>192.168.1.15</specific>\n" + 
        "   </definition>\n" + 
        "\n" + 
        "</snmp-config>\n" + 
        "";

        SnmpPeerFactory.setInstance(new SnmpPeerFactory(new ByteArrayResource(snmpConfigXml.getBytes())));
        SnmpConfig config = SnmpPeerFactory.getSnmpConfig();

        SnmpEventInfo info = new SnmpEventInfo();
        info.setVersion("v2c");
        info.setFirstIPAddress("192.168.1.15");

        SnmpConfigManager.mergeIntoConfig(config, info.createDef());
        
//        String config = SnmpPeerFactory.marshallConfig();
//        System.err.println(config);
        
        assertEquals(1, config.getDefinitionCount());
        
        assertEquals(1, config.getDefinition(0).getRangeCount());
        assertEquals(0, config.getDefinition(0).getSpecificCount());
        
        assertEquals("192.168.1.10", config.getDefinition(0).getRange(0).getBegin());
        assertEquals("192.168.1.40", config.getDefinition(0).getRange(0).getEnd());
        
    }

