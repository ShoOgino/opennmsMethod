    /**
     * This tests the ability to create a new definition from an IP that was previously covered by
     * a range in an existing definition.  The result should be the previous range is converted into 2
     * new ranges and the new specific is added to a new definition in the config.
     * 
     * @throws MarshalException
     * @throws ValidationException
     * @throws IOException 
     */
    public void testRemoveSpecificFromRange() throws IOException {
        
        String snmpConfigXml = "<?xml version=\"1.0\"?>\n" + 
        "<snmp-config retry=\"3\" timeout=\"800\"\n" + 
        "   read-community=\"public\" write-community=\"private\">\n" + 
        "   <definition version=\"v2c\">\n" + 
        "       <range begin=\"192.168.1.100\" end=\"192.168.1.200\"/>" + 
        "   </definition>\n" + 
        "\n" + 
        "</snmp-config>\n" + 
        "";

        SnmpPeerFactory.setInstance(new SnmpPeerFactory(new ByteArrayResource(snmpConfigXml.getBytes())));
        SnmpConfig config = SnmpPeerFactory.getSnmpConfig();

        SnmpEventInfo info = new SnmpEventInfo();
        info.setVersion("v1");
        info.setFirstIPAddress("192.168.1.120");

        SnmpConfigManager.mergeIntoConfig(config, info.createDef());
        
//        String config = SnmpPeerFactory.marshallConfig();
//        System.err.println(config);
        
        assertEquals(2, config.getDefinitionCount());
        
        assertEquals(2, config.getDefinition(0).getRangeCount());
        assertEquals(0, config.getDefinition(0).getSpecificCount());
        
        assertEquals("192.168.1.100", config.getDefinition(0).getRange(0).getBegin());
        assertEquals("192.168.1.119", config.getDefinition(0).getRange(0).getEnd());
        
        assertEquals("192.168.1.121", config.getDefinition(0).getRange(1).getBegin());
        assertEquals("192.168.1.200", config.getDefinition(0).getRange(1).getEnd());
        
        assertEquals(0, config.getDefinition(1).getRangeCount());
        assertEquals(1, config.getDefinition(1).getSpecificCount());
        
        assertEquals("192.168.1.120", config.getDefinition(1).getSpecific(0));
        
    }

