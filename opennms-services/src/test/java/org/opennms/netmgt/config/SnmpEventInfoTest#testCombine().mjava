    @Test
    public void testCombine() {
        IPAddressRange rr = new IPAddressRange("192.168.1.10", "192.168.1.20");
        assertEquals(rr, rr.combine(new IPAddressRange("192.168.1.10", "192.168.1.20")));
        assertEquals(rr, rr.combine(new IPAddressRange("192.168.1.11", "192.168.1.20")));
        assertEquals(rr, rr.combine(new IPAddressRange("192.168.1.10", "192.168.1.19")));
        assertEquals(rr, rr.combine(new IPAddressRange("192.168.1.11", "192.168.1.19")));
        assertEquals(new IPAddressRange("192.168.1.9", "192.168.1.20"), rr.combine(new IPAddressRange("192.168.1.9", "192.168.1.12")));
        assertEquals(new IPAddressRange("192.168.1.10", "192.168.1.22"), rr.combine(new IPAddressRange("192.168.1.13", "192.168.1.22")));
        assertEquals(new IPAddressRange("192.168.1.9", "192.168.1.22"), rr.combine(new IPAddressRange("192.168.1.9", "192.168.1.22")));
        assertEquals(new IPAddressRange("192.168.1.7", "192.168.1.20"), rr.combine(new IPAddressRange("192.168.1.7", "192.168.1.9")));
        assertEquals(new IPAddressRange("192.168.1.10", "192.168.1.24"), rr.combine(new IPAddressRange("192.168.1.21", "192.168.1.24")));
    }

