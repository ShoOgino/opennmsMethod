	private void walkDot1qTpFdb(final Map<Integer,Integer> bridgeifindex) {

		String trackerName = "dot1qTbFdbPortTable";

		Dot1qTpFdbTableTracker dot1qTpFdbTableTracker = new Dot1qTpFdbTableTracker() {

			@Override
			public void processDot1qTpFdbRow(final Dot1qTpFdbRow row) {
				BridgeMacLink link = row.getLink();
                                Integer ifindex = bridgeifindex.get(link.getBridgePort());
                                LOG.debug("processDot1qTpFdbRow: found mac {}: on port {} ifindex {} status {} ", 
                                          row.getDot1qTpFdbAddress(), row.getDot1qTpFdbPort(),ifindex, link.getBridgeDot1qTpFdbStatus());
				link.setBridgePortIfIndex(ifindex);
				if (isValidBridgeAddress(link.getMacAddress()) && link.getBridgePort() != null)
					m_linkd.getQueryManager().store(getNodeId(), link);
				else
				    LOG.warn("processDot1qTpFdbRow: found mac {}: on port {} ifindex {} status {} ", 
	                                          row.getDot1qTpFdbAddress(), row.getDot1qTpFdbPort(),ifindex, link.getBridgeDot1qTpFdbStatus());
	                                
			}

		};
		SnmpWalker walker = SnmpUtils.createWalker(getPeer(), trackerName,
				dot1qTpFdbTableTracker);
		walker.start();

		try {
			walker.waitFor();
			if (walker.timedOut()) {
				LOG.info("run:Aborting Bridge Linkd node scan : Agent timed out while scanning the {} table",
						trackerName);
			} else if (walker.failed()) {
				LOG.info("run:Aborting Bridge Linkd node scan : Agent failed while scanning the {} table: {}",
						trackerName, walker.getErrorMessage());
			}
		} catch (final InterruptedException e) {
			LOG.error("run: Bridge Linkd node collection interrupted, exiting",e);
		}
	}

