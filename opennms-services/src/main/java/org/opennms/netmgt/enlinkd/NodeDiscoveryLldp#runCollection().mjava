    protected void runCollection() {

    	final Date now = new Date(); 

    	String trackerName = "lldpLocalGroup";
        final LldpLocalGroupTracker lldpLocalGroup = new LldpLocalGroupTracker();
		LOG.info( "run: node[{}]: collecting {} on: {}",
				getNodeId(),
				trackerName, 
				getPrimaryIpAddressString());
        SnmpWalker walker =  SnmpUtils.createWalker(getPeer(), trackerName, lldpLocalGroup);
        walker.start();

        try {
            walker.waitFor();
            if (walker.timedOut()) {
            	LOG.info(
                        "run:Aborting Lldp Linkd node scan : Agent timed out while scanning the {} table", trackerName);
            	return;
            }  else if (walker.failed()) {
            	LOG.info(
                        "run:Aborting Lldp Linkd node scan : Agent failed while scanning the {} table: {}", trackerName,walker.getErrorMessage());
            	return;
            }
        } catch (final InterruptedException e) {
            LOG.error("run: Lldp Linkd node collection interrupted, exiting", e);
            return;
        }
        
        if (lldpLocalGroup.getLldpLocChassisid() == null ) {
    		LOG.info( "run: node[{}]: address {}. LLDP_MIB not supported",
    				getNodeId(),
    				getPrimaryIpAddressString());
            return;
        } else {
    		LOG.info( "run: node[{}]: address {}. lldp identifier : {}",
    				getNodeId(),
    				getPrimaryIpAddressString(),
    				lldpLocalGroup.getLldpElement());
        }
        
        m_linkd.getQueryManager().store(getNodeId(), lldpLocalGroup.getLldpElement());

        if (getSysoid() == null || getSysoid().equals(DW_SYSOID) ) {
            if (lldpLocalGroup.getLldpLocChassisid().toHexString().equals(DW_NULL_CHASSIS_ID) &&
                    lldpLocalGroup.getLldpLocChassisidSubType() == LldpChassisIdSubType.LLDP_CHASSISID_SUBTYPE_CHASSISCOMPONENT.getValue()) {
        		LOG.info( "run: node[{}]: address {}. lldp identifier : {}. lldp not active for Dragon Wave Device.",
        				getNodeId(),
        				getPrimaryIpAddressString(),
        				lldpLocalGroup.getLldpElement());
                return;
            }
    
            if (lldpLocalGroup.getLldpLocSysname().equals(DW_NULL_SYSOID_ID) ) {
        		LOG.info( "run: node[{}]: address {}. lldp identifier : {}. lldp not active for Dragon Wave Device.",
        				getNodeId(),
        				getPrimaryIpAddressString(),
        				lldpLocalGroup.getLldpElement());
                return;
            }
        }

        final LldpLocPortGetter lldpLocPort = new LldpLocPortGetter(getPeer());
        trackerName = "lldpRemTable";
        LldpRemTableTracker lldpRemTable = new LldpRemTableTracker() {

        	public void processLldpRemRow(final LldpRemRow row) {
        	    m_linkd.getQueryManager().store(getNodeId(),row.getLldpLink(lldpLocPort));
        	}
        };

		LOG.info( "run: node[{}]: collecting {} on: {}",
				getNodeId(),
				trackerName, 
				getPrimaryIpAddressString());
        walker = SnmpUtils.createWalker(getPeer(), trackerName, lldpRemTable);
        walker.start();
        
        try {
            walker.waitFor();
            if (walker.timedOut()) {
            	LOG.info(
                        "run:Aborting node scan : Agent timed out while scanning the {} table", trackerName);
            }  else if (walker.failed()) {
            	LOG.info(
                        "run:Aborting node scan : Agent failed while scanning the {} table: {}", trackerName,walker.getErrorMessage());
            }
        } catch (final InterruptedException e) {
            LOG.error("run: collection interrupted, exiting",e);
            return;
        }
        m_linkd.getQueryManager().reconcileLldp(getNodeId(),now);
    }

