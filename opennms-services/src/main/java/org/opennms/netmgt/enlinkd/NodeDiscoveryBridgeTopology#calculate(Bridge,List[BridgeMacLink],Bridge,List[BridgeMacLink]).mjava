    private void calculate(Bridge root,  List<BridgeMacLink> rootbft, Bridge xBridge, List<BridgeMacLink> xbft) {
        //FIXME        checkStp(root, xBridge);
        BridgeTopologyHelper rx = new BridgeTopologyHelper(root, rootbft, xBridge,xbft);
        Integer rxDesignatedPort = rx.getFirstBridgeConnectionPort();
        if (rxDesignatedPort == null) {
            LOG.warn("calculate: node [{}]: cannot found simple connection for bridges: [{},{}]", 
            		getNodeId(),
            		root.getId(), 
            		xBridge.getId());
            m_domain.clearTopology();
            return;
        }
        Integer xrDesignatedPort = rx.getSecondBridgeConnectionPort();
        if (xrDesignatedPort == null) {
             LOG.warn("calculate: node [{}]: cannot found simple connectionfor bridges: [{},{}]",
             		getNodeId(),
             		xBridge.getId(), 
             		root.getId());
             m_domain.clearTopology();
             return;
        }
        LOG.debug("calculate: node [{}]: level 1: bridge: [{}]. setting root port {} ",
        		getNodeId(),
        		xBridge.getId(),
        		xrDesignatedPort);
        xBridge.setRootPort(xrDesignatedPort);
        xBridge.setRootBridge(false);
        //get the starting point shared segment of the top bridge
        // where the bridge is learned should not be null
        SharedSegment topSegment = m_domain.getSharedSegment(root.getId(),rxDesignatedPort);
        if (topSegment == null) {
            LOG.warn("calculate: node [{}]: nodeid [{}], port {}. top segment not found.",
            		getNodeId(),
            		m_domain.getRootBridgeId(),
            		rxDesignatedPort);
            m_domain.clearTopology();
            return;
        }
        if (!findBridgesTopo(rx,topSegment, xBridge, xbft,0))
            m_domain.clearTopology();
    }

