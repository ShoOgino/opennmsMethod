    private Map<Integer, Integer> walkDot1dBasePortTable(SnmpAgentConfig peer) {
        final Map<Integer, Integer> bridgetoifindex = new HashMap<Integer, Integer>();
        String trackerName = "dot1dBasePortTable";
        Dot1dBasePortTableTracker dot1dBasePortTableTracker = new Dot1dBasePortTableTracker() {
            @Override
            public void processDot1dBasePortRow(final Dot1dBasePortRow row) {
                bridgetoifindex.put(row.getBaseBridgePort(),
                                    row.getBaseBridgePortIfindex());
            }
        };

        SnmpWalker walker = SnmpUtils.createWalker(peer, trackerName,
                                                   dot1dBasePortTableTracker);
        walker.start();

        try {
            walker.waitFor();
            if (walker.timedOut()) {
                LOG.info("run:Aborting Bridge Linkd node scan : Agent timed out while scanning the {} table",
                         trackerName);
            } else if (walker.failed()) {
                LOG.info("run:Aborting Bridge Linkd node scan : Agent failed while scanning the {} table: {}",
                         trackerName, walker.getErrorMessage());
            }
        } catch (final InterruptedException e) {
            LOG.error("run: Bridge Linkd node collection interrupted, exiting",
                      e);
        }
        return bridgetoifindex;
    }

