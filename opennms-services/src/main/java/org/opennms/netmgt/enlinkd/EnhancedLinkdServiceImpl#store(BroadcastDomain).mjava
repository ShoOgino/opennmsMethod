        @Override
        public void  store(BroadcastDomain domain) {
            for (SharedSegment segment: domain.getTopology()) {
                LOG.info("store: shared segment designated root: {}, designated port: {}, macs size: {}, mac link size: {}, bridge link size: {}", 
                          segment.getDesignatedBridge(),segment.getDesignatedPort(), segment.getMacsOnSegment().size(),
                          segment.getBridgeMacLinks().size(), segment.getBridgeBridgeLinks().size());
                if (segment.noMacsOnSegment()) {
                    for (BridgeBridgeLink link: segment.getBridgeBridgeLinks()) {
                        link.setBridgeBridgeLinkLastPollTime(new Date());
                        saveBridgeBridgeLink(link);
                    }
                } else {
                    for (BridgeMacLink link: segment.getBridgeMacLinks()) {
                        link.setBridgeMacLinkLastPollTime(new Date());
                        saveBridgeMacLink(link);
                    }
                }
            }
            
            for (Integer curNodeId: domain.getUpdatedNodes()) {
                m_bridgeMacLinkDao.deleteByNodeIdOlderThen(curNodeId, domain.getLastUpdate(curNodeId));
                m_bridgeMacLinkDao.flush();
                m_bridgeBridgeLinkDao.deleteByNodeIdOlderThen(curNodeId, domain.getLastUpdate(curNodeId));
                m_bridgeBridgeLinkDao.deleteByDesignatedNodeIdOlderThen(curNodeId, domain.getLastUpdate(curNodeId));
                m_bridgeBridgeLinkDao.flush();
            }

        }

