	protected void runCollection() {

		final Date now = new Date();

		LOG.debug("run: collecting: {}", getPeer());
	
		final Map<Integer,String> vlanmap = new HashMap<Integer, String>();
		String trackerName = "vtpVersion";
		final CiscoVtpTracker vtpStatus = new CiscoVtpTracker();
		SnmpWalker walker = SnmpUtils.createWalker(getPeer(), trackerName,
				vtpStatus);
		walker.start();

		try {
			walker.waitFor();
			if (walker.timedOut()) {
				LOG.info("run:Aborting Bridge Linkd node scan : Agent timed out while scanning the {} table",
						trackerName);
				return;
			} else if (walker.failed()) {
				LOG.info("run:Aborting Bridge Linkd node scan : Agent failed while scanning the {} table: {}",
						trackerName, walker.getErrorMessage());
				return;
			}
		} catch (final InterruptedException e) {
			LOG.error("run: Bridge Linkd node collection interrupted, exiting", e);
			return;
		}

		if (vtpStatus.getVtpVersion() == null) {
			LOG.info("cisco vtp mib not supported, on: {}",
					str(getPeer().getAddress()));
			return;
		}
		LOG.info("cisco vtp mib supported, on: {}", str(getPeer()
				.getAddress()));
		LOG.info("walking cisco vtp, on: {}", str(getPeer()
				.getAddress()));

		trackerName = "ciscoVtpVlan";
		final CiscoVtpVlanTableTracker ciscoVtpVlanTableTracker = new CiscoVtpVlanTableTracker() {
			@Override
			public void processCiscoVtpVlanRow(final CiscoVtpVlanRow row) {
				if (row.isTypeEthernet() && row.isStatusOperational()) {
					vlanmap.put(row.getVlanIndex(), row.getVlanName());
				}
			}
		};
		walker = SnmpUtils.createWalker(getPeer(), trackerName,
				ciscoVtpVlanTableTracker);
		walker.start();

		try {
			walker.waitFor();
			if (walker.timedOut()) {
				LOG.info("run:Aborting Bridge Linkd node scan : Agent timed out while scanning the {} table",
						trackerName);
				return;
			} else if (walker.failed()) {
				LOG.info("run:Aborting Bridge Linkd node scan : Agent failed while scanning the {} table: {}",
						trackerName, walker.getErrorMessage());
				return;
			}
		} catch (final InterruptedException e) {
			LOG.error("run: Bridge Linkd node collection interrupted, exiting",e);
			return;
		}

		if (vlanmap.isEmpty())
			walkBridge(null,null);
		else {
			for (Entry<Integer, String> entry: vlanmap.entrySet()) {
				String community = getPeer().getReadCommunity();
				LOG.debug("run: cisco vlan collection setting peer community: {} with VLAN {}",
						community, entry.getKey());
				getPeer().setReadCommunity(community + "@" + entry.getKey());
				walkBridge(entry.getKey(), entry.getValue());
				getPeer().setReadCommunity(community);
			}
		}

		m_linkd.getQueryManager().reconcileBridge(getNodeId(), now);

	}

