    private Map<Integer, String> getVtpVlanMap(SnmpAgentConfig peer) {

        final Map<Integer, String> vlanmap = new HashMap<Integer, String>();
        try {
            final CiscoVtpTracker vtpStatus = new CiscoVtpTracker();
            
            try {
                m_linkd.getLocationAwareSnmpClient().walk(getPeer(), vtpStatus).
                withDescription("vtpVersion").
                atLocation(getLocation()).
                execute().
                get();
           } catch (ExecutionException e) {
                    // pass
           }                

            if (vtpStatus.getVtpVersion() == null) {
                LOG.info("run: cisco vtp mib not supported, on: {}", getNodeId());
                return vlanmap;
            }
        } catch (final InterruptedException e) {
            LOG.error("run: Bridge Linkd node collection interrupted, exiting",
                      e);
            return vlanmap;
        }

        LOG.info("run: cisco vtp mib supported, on: {}", getNodeId());
        LOG.info("run: walking cisco vtp, on: {}", getNodeId());

        try {
            final CiscoVtpVlanTableTracker ciscoVtpVlanTableTracker = new CiscoVtpVlanTableTracker() {
                @Override
                public void processCiscoVtpVlanRow(final CiscoVtpVlanRow row) {
                    if (row.isTypeEthernet() && row.isStatusOperational()) {
                        vlanmap.put(row.getVlanIndex(), row.getVlanName());
                    }
                }
            };
            try {
                m_linkd.getLocationAwareSnmpClient().walk(getPeer(), ciscoVtpVlanTableTracker).
                withDescription("ciscoVtpVlan").
                atLocation(getLocation()).
                execute().
                get();
            } catch (ExecutionException e) {
                    // pass
            }                
        } catch (final InterruptedException e) {
            LOG.error("run: Bridge Linkd node collection interrupted, exiting",
                      e);
        }
        return vlanmap;
    }

