    private Map<Integer, String> getVtpVlanMap(SnmpAgentConfig peer) {

        final Map<Integer, String> vlanmap = new HashMap<Integer, String>();
        String trackerName = "vtpVersion";
        final CiscoVtpTracker vtpStatus = new CiscoVtpTracker();
        SnmpWalker walker = SnmpUtils.createWalker(peer, trackerName,
                                                   vtpStatus);
        walker.start();

        try {
            walker.waitFor();
            if (walker.timedOut()) {
                LOG.info("run:Aborting Bridge Linkd node scan : Agent timed out while scanning the {} table",
                         trackerName);
                return vlanmap;
            } else if (walker.failed()) {
                LOG.info("run:Aborting Bridge Linkd node scan : Agent failed while scanning the {} table: {}",
                         trackerName, walker.getErrorMessage());
                return vlanmap;
            }
        } catch (final InterruptedException e) {
            LOG.error("run: Bridge Linkd node collection interrupted, exiting",
                      e);
            return vlanmap;
        }

        if (vtpStatus.getVtpVersion() == null) {
            LOG.info("run: cisco vtp mib not supported, on: {}", getNodeId());
            return vlanmap;
        }

        LOG.info("run: cisco vtp mib supported, on: {}", getNodeId());
        LOG.info("run: walking cisco vtp, on: {}", getNodeId());

        trackerName = "ciscoVtpVlan";
        final CiscoVtpVlanTableTracker ciscoVtpVlanTableTracker = new CiscoVtpVlanTableTracker() {
            @Override
            public void processCiscoVtpVlanRow(final CiscoVtpVlanRow row) {
                if (row.isTypeEthernet() && row.isStatusOperational()) {
                    vlanmap.put(row.getVlanIndex(), row.getVlanName());
                }
            }
        };
        walker = SnmpUtils.createWalker(peer, trackerName,
                                        ciscoVtpVlanTableTracker);
        walker.start();

        try {
            walker.waitFor();
            if (walker.timedOut()) {
                LOG.info("run:Aborting Bridge Linkd node scan : Agent timed out while scanning the {} table",
                         trackerName);
            } else if (walker.failed()) {
                LOG.info("run:Aborting Bridge Linkd node scan : Agent failed while scanning the {} table: {}",
                         trackerName, walker.getErrorMessage());
            }
        } catch (final InterruptedException e) {
            LOG.error("run: Bridge Linkd node collection interrupted, exiting",
                      e);
        }
        return vlanmap;
    }

