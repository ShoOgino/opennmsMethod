    @Override
    public void loadBridgeTopology() {
        Set<BroadcastDomain> domains = new HashSet<BroadcastDomain>();

        List<SharedSegment> segments = new ArrayList<SharedSegment>();
        for (BridgeMacLink link : m_bridgeMacLinkDao.findAll()) {
            for (SharedSegment segment : segments) {
                if (segment.containsMac(link.getMacAddress())) {
                    segment.add(link);
                    break;
                }
                if (segment.containsPort(link.getNode().getId(),
                                         link.getBridgePort())) {
                    segment.add(link);
                    break;
                }
            }
            SharedSegment segment = new SharedSegment();
            segment.add(link);
            segments.add(segment);
        }

        for (BridgeBridgeLink link : m_bridgeBridgeLinkDao.findAll()) {
            for (SharedSegment segment : segments) {
                if (segment.containsPort(link.getNode().getId(),
                                         link.getBridgePort())) {
                    segment.add(link);
                    break;
                }
                if (segment.containsPort(link.getDesignatedNode().getId(),
                                         link.getDesignatedPort())) {
                    segment.add(link);
                    break;
                }
            }
            SharedSegment segment = new SharedSegment();
            segment.add(link);
            segments.add(segment);
        }

        // Assign the segment to domain
        for (SharedSegment segment : segments) {
            BroadcastDomain domain = null;
            for (BroadcastDomain curdomain : domains) {
                if (curdomain.containsAtleastOne(segment.getBridgeIdsOnSegment())) {
                    domain = curdomain;
                    break;
                }
            }
            if (domain == null) {
                domain = new BroadcastDomain();
                domains.add(domain);
            }
            domain.loadTopologyEntry(segment);
        }

        m_bridgeTopologyDao.load(domains);
    }

