    protected void runCollection() {

    	final Date now = new Date(); 

    	String trackerName = "isisSysObjectCollection";
        final IsisSysObjectGroupTracker isisSysObject = new IsisSysObjectGroupTracker();
		LOG.info( "run: node[{}]: collecting {} on: {}",
				getNodeId(),
				trackerName, 
				getPrimaryIpAddressString());
        SnmpWalker walker =  SnmpUtils.createWalker(getPeer(), trackerName, isisSysObject);

        walker.start();

        try {
            walker.waitFor();
            if (walker.timedOut()) {
            	LOG.info(
                        "run:Aborting Is-Is Linkd node scan : Agent timed out while scanning the {} table", trackerName);
            	return;
            }  else if (walker.failed()) {
            	LOG.info(
                        "run:Aborting Is-Is Linkd node scan : Agent failed while scanning the {} table: {}", trackerName,walker.getErrorMessage());
            	return;
            }
        } catch (final InterruptedException e) {
            LOG.error("run: Is-Is Linkd node collection interrupted, exiting", e);
            return;
        }
        
        if (isisSysObject.getIsisSysId() == null ) {
            LOG.info( "run: node[{}]: address {}. Is-Is mib not supported ", 
            		getNodeId(),
            		getPrimaryIpAddressString());
            return;
        }
        
        m_linkd.getQueryManager().store(getNodeId(), isisSysObject.getIsisElement());
        
        final List<IsIsLink> links = new ArrayList<IsIsLink>();
        trackerName = "isisISAdjTable";
        final IsisISAdjTableTracker isisISAdjTableTracker = new IsisISAdjTableTracker() {
        	@Override
        	public void processIsisAdjRow(IsIsAdjRow row) {
        		links.add(row.getIsisLink());
        	}
        };
		LOG.info( "run: node[{}]: collecting {} on: {}",
				getNodeId(),
				trackerName, 
				getPrimaryIpAddressString());
        walker =  SnmpUtils.createWalker(getPeer(), trackerName, isisISAdjTableTracker);

        walker.start();

        try {
            walker.waitFor();
            if (walker.timedOut()) {
            	LOG.info(
                        "run:Aborting Is-Is Linkd node scan : Agent timed out while scanning the {} table", trackerName);
            	return;
            }  else if (walker.failed()) {
            	LOG.info(
                        "run:Aborting Is-Is Linkd node scan : Agent failed while scanning the {} table: {}", trackerName,walker.getErrorMessage());
            	return;
            }
        } catch (final InterruptedException e) {
            LOG.error("run: Is-Is Linkd node collection interrupted, exiting", e);
            return;
        }
        
        trackerName = "isisCircTable";
        final IsisCircTableTracker isisCircTableTracker = new IsisCircTableTracker() {
        	@Override
        	public void processIsisCircRow(IsIsCircRow row) {
        		IsIsLink link = row.getIsisLink();
        		for (IsIsLink adjlink:links) {
        			if (link.getIsisCircIndex().intValue() == adjlink.getIsisCircIndex().intValue()) {
        				adjlink.setIsisCircIfIndex(link.getIsisCircIfIndex());
        				adjlink.setIsisCircAdminState(link.getIsisCircAdminState());
        			}
        		}
        	}
        };
		
		LOG.info( "run: node[{}]: collecting {} on: {}",
				getNodeId(),
				trackerName, 
				getPrimaryIpAddressString());
        walker =  SnmpUtils.createWalker(getPeer(), trackerName, isisCircTableTracker);

        walker.start();

        try {
            walker.waitFor();
            if (walker.timedOut()) {
            	LOG.info(
                        "run:Aborting Is-Is Linkd node scan : Agent timed out while scanning the {} table", trackerName);
            	return;
            }  else if (walker.failed()) {
            	LOG.info(
                        "run:Aborting Is-Is Linkd node scan : Agent failed while scanning the {} table: {}", trackerName,walker.getErrorMessage());
            	return;
            }
        } catch (final InterruptedException e) {
            LOG.error("run: Is-Is Linkd node collection interrupted, exiting", e);
            return;
        }
        
        for (IsIsLink link:links) 
        	m_linkd.getQueryManager().store(getNodeId(), link);

        m_linkd.getQueryManager().reconcileIsis(getNodeId(), now);
    }

