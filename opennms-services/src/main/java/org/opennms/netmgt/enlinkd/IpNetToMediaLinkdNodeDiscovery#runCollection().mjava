    protected void runCollection() {

    	final Date now = new Date(); 

		LOG.debug( "run: collecting : {}", getPeer());


		IpNetToMediaTableTracker ipNetToMediaTableTracker = new IpNetToMediaTableTracker() {
		    public void processIpNetToMediaRow(final IpNetToMediaRow row) {
		    	IpNetToMedia macep = row.getIpNetToMedia();
		    	if (macep.getIpNetToMediaType() == IpNetToMediaType.IPNETTOMEDIA_TYPE_DYNAMIC || macep.getIpNetToMediaType() == IpNetToMediaType.IPNETTOMEDIA_TYPE_STATIC)
		    		m_linkd.getQueryManager().store(getNodeId(),macep);
		    }
		};
		
		String trackerName = "ipNetToMedia";
		SnmpWalker walker = SnmpUtils.createWalker(getPeer(), trackerName, ipNetToMediaTableTracker );
        walker.start();
        
        try {
            walker.waitFor();
            if (walker.timedOut()) {
            	LOG.info(
                        "run:Aborting IpNetToMedia Linkd node scan : Agent timed out while scanning the {} table", trackerName);
            	return;
            }  else if (walker.failed()) {
            	LOG.info(
                        "run:Aborting IpNetToMedia Linkd node scan : Agent failed while scanning the {} table: {}", trackerName,walker.getErrorMessage());
            	return;
            }
        } catch (final InterruptedException e) {
            LOG.error("run: collection interrupted, exiting",e);
            return;
        }

        m_linkd.getQueryManager().reconcileIpNetToMedia(getNodeId(), now);
    }

