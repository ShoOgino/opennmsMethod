    protected void runCollection() {

    	final Date now = new Date(); 
        LOG.debug("run: collecting : {}", getPeer());

        final OspfIpAddrTableGetter ipAddrTableGetter = new OspfIpAddrTableGetter(getPeer());
        try {
            final OspfGeneralGroupTracker ospfGeneralGroup = new OspfGeneralGroupTracker();
            
            try {
                m_linkd.getLocationAwareSnmpClient().walk(getPeer(), ospfGeneralGroup).
                withDescription("ospfGeneralGroup").
                atLocation(getLocation()).
                execute().
                get();
           } catch (ExecutionException e) {
                    // pass
           }                

            if (ospfGeneralGroup.getOspfRouterId() == null) {
                LOG.info("ospf mib not supported on: {}",
                         str(getPeer().getAddress()));
                return;
            }

            if (ospfGeneralGroup.getOspfRouterId().equals(InetAddressUtils.addr("0.0.0.0"))) {
                LOG.info("ospf not supported, ospf identifier 0.0.0.0 is not valid on: {}",
                         str(getPeer().getAddress()));
                return;
            }

            if (Status.get(ospfGeneralGroup.getOspfAdminStat()) == Status.disabled) {
                LOG.info("ospf status disabled on: {}",
                         str(getPeer().getAddress()));
                return;
            }

            m_linkd.getQueryManager().store(getNodeId(), ipAddrTableGetter.get(ospfGeneralGroup.getOspfElement()));

        } catch (final InterruptedException e) {
            LOG.error( "run: Ospf Linkd node collection interrupted, exiting",e);
            return;
        }
        
        

        final List<OspfLink> links = new ArrayList<OspfLink>();
        try {
            OspfNbrTableTracker ospfNbrTableTracker = new OspfNbrTableTracker() {
    
            	public void processOspfNbrRow(final OspfNbrRow row) {
            		links.add(row.getOspfLink());
            	}
            };

            try {
                m_linkd.getLocationAwareSnmpClient().walk(getPeer(), ospfNbrTableTracker).
                withDescription("ospfNbrTable").
                atLocation(getLocation()).
                execute().
                get();
           } catch (ExecutionException e) {
                    // pass
           }                

        } catch (final InterruptedException e) {
            LOG.error( "run: collection interrupted, exiting",e);
            return;
        }

        try {
            OspfIfTableTracker ospfIfTableTracker = new OspfIfTableTracker() {
    
            	public void processOspfIfRow(final OspfIfRow row) {
            		OspfLink link = row.getOspfLink(ipAddrTableGetter);
        			for (OspfLink nbrlink : links) {
        				if (InetAddressUtils.inSameNetwork(link.getOspfIpAddr(),nbrlink.getOspfRemIpAddr(),link.getOspfIpMask())) {
        					nbrlink.setOspfIpAddr(link.getOspfIpAddr());
        					nbrlink.setOspfAddressLessIndex(link.getOspfAddressLessIndex());
        					nbrlink.setOspfIpMask(link.getOspfIpMask());
        					nbrlink.setOspfIfIndex(link.getOspfIfIndex());
        				}
        			}
            	}
    
            };

            try {
                m_linkd.getLocationAwareSnmpClient().walk(getPeer(), ospfIfTableTracker).
                withDescription("ospfIfTable").
                atLocation(getLocation()).
                execute().
                get();
           } catch (ExecutionException e) {
                    // pass
           }                

        } catch (final InterruptedException e) {
            LOG.error("run: collection interrupted, exiting",e);
            return;
        }

        for (OspfLink link: links)
    		m_linkd.getQueryManager().store(getNodeId(),link);

        m_linkd.getQueryManager().reconcileOspf(getNodeId(),now);
    }

