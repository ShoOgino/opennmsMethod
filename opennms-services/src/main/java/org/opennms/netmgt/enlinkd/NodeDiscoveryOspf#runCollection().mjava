    protected void runCollection() {

    	final Date now = new Date(); 

    	String trackerName = "ospfGeneralGroup";
        final OspfGeneralGroupTracker ospfGeneralGroup = new OspfGeneralGroupTracker();
		LOG.info( "run: collecting {} on: {}",trackerName, str(getPrimaryIpAddress()));
        SnmpWalker walker =  SnmpUtils.createWalker(getPeer(), trackerName, ospfGeneralGroup);

        walker.start();

        try {
            walker.waitFor();
            if (walker.timedOut()) {
            	LOG.info(
                        "run:Aborting Ospf Linkd node scan : Agent timed out while scanning the {} table", trackerName);
            	return;
            }  else if (walker.failed()) {
            	LOG.info(
                        "run:Aborting Ospf Linkd node scan : Agent failed while scanning the {} table: {}", trackerName,walker.getErrorMessage());
            	return;
            }
        } catch (final InterruptedException e) {
            LOG.error( "run: Ospf Linkd node collection interrupted, exiting",e);
            return;
        }
        
        if (ospfGeneralGroup.getOspfRouterId() == null ) {
            LOG.info( "ospf mib not supported on: {}", str(getPeer().getAddress()));
            return;
        } 

        if (ospfGeneralGroup.getOspfRouterId().equals(InetAddressUtils.addr("0.0.0.0"))) {
            LOG.info( "ospf not supported, ospf identifier 0.0.0.0 is not valid on: {}", str(getPeer().getAddress()));
            return;
        } 

        if (Status.get(ospfGeneralGroup.getOspfAdminStat()) == Status.disabled) {
            LOG.info( "ospf status disabled on: {}", str(getPeer().getAddress()));
            return;
        }
        
        final OspfIpAddrTableGetter ipAddrTableGetter = new OspfIpAddrTableGetter(getPeer());

        m_linkd.getQueryManager().store(getNodeId(), ipAddrTableGetter.get(ospfGeneralGroup.getOspfElement()));

        trackerName = "ospfNbrTable";
        final List<OspfLink> links = new ArrayList<OspfLink>();
        OspfNbrTableTracker ospfNbrTableTracker = new OspfNbrTableTracker() {

        	public void processOspfNbrRow(final OspfNbrRow row) {
        		links.add(row.getOspfLink());
        	}
        };

		LOG.info( "run: collecting {} on: {}",trackerName, str(getPrimaryIpAddress()));
        walker = SnmpUtils.createWalker(getPeer(), trackerName, ospfNbrTableTracker);
        walker.start();
        
        try {
            walker.waitFor();
            if (walker.timedOut()) {
            	LOG.info(
                        "run:Aborting Ospf Linkd node scan : Agent timed out while scanning the {} table", trackerName);
            	return;
            }  else if (walker.failed()) {
            	LOG.info(
                        "run:Aborting Ospf Linkd node scan : Agent failed while scanning the {} table: {}", trackerName,walker.getErrorMessage());
            	return;
            }
        } catch (final InterruptedException e) {
            LOG.error( "run: collection interrupted, exiting",e);
            return;
        }

        trackerName = "ospfIfTable";
        OspfIfTableTracker ospfIfTableTracker = new OspfIfTableTracker() {

        	public void processOspfIfRow(final OspfIfRow row) {
        		OspfLink link = row.getOspfLink(ipAddrTableGetter);
    			for (OspfLink nbrlink : links) {
    				if (InetAddressUtils.inSameNetwork(link.getOspfIpAddr(),nbrlink.getOspfRemIpAddr(),link.getOspfIpMask())) {
    					nbrlink.setOspfIpAddr(link.getOspfIpAddr());
    					nbrlink.setOspfAddressLessIndex(link.getOspfAddressLessIndex());
    					nbrlink.setOspfIpMask(link.getOspfIpMask());
    					nbrlink.setOspfIfIndex(link.getOspfIfIndex());
    				}
    			}
        	}

        };

		LOG.info( "run: collecting {} on: {}",trackerName, str(getPrimaryIpAddress()));
        walker = SnmpUtils.createWalker(getPeer(), trackerName, ospfIfTableTracker);
        walker.start();
        
        try {
            walker.waitFor();
            if (walker.timedOut()) {
            	LOG.info(
                        "run:Aborting Ospf Linkd node scan : Agent timed out while scanning the {} table", trackerName);
            	return;
            }  else if (walker.failed()) {
            	LOG.info(
                        "run:Aborting Ospf Linkd node scan : Agent failed while scanning the {} table: {}", trackerName,walker.getErrorMessage());
            	return;
            }
        } catch (final InterruptedException e) {
            LOG.error("run: collection interrupted, exiting",e);
            return;
        }

        for (OspfLink link: links)
    		m_linkd.getQueryManager().store(getNodeId(),link);

        m_linkd.getQueryManager().reconcileOspf(getNodeId(),now);
    }

