    protected void runCollection() {

    	final Date now = new Date(); 
        LOG.debug("run: collecting : {}", getPeer());

        try {

            final CdpGlobalGroupTracker cdpGlobalGroup = new CdpGlobalGroupTracker();


            try {
                m_linkd.getLocationAwareSnmpClient().walk(getPeer(), cdpGlobalGroup).
                withDescription("cdpGlobalGroup").
                atLocation(getLocation()).
                execute().
                get();
           } catch (ExecutionException e) {
                    // pass
           }                
           if (cdpGlobalGroup.getCdpDeviceId() == null ) {
                LOG.info("run: cdp mib not supported on: {}", str(getPeer().getAddress()));
                return;
           } 
           CdpElement cdpElement = cdpGlobalGroup.getCdpElement();
           m_linkd.getQueryManager().store(getNodeId(), cdpElement);
           if (cdpElement.getCdpGlobalRun() == TruthValue.FALSE) {
               LOG.info("run: cdp disabled on: {}", str(getPeer().getAddress()));
               return;
           }

        } catch (final InterruptedException e) {
            LOG.info("run: Cdp Linkd collection interrupted, exiting",e);
            return;
        }
        

        try {
            final CdpInterfacePortNameGetter cdpInterfacePortNameGetter = new CdpInterfacePortNameGetter(getPeer(), 
                                                                              m_linkd.getLocationAwareSnmpClient(),
                                                                              getLocation());
            CdpCacheTableTracker cdpCacheTable = new CdpCacheTableTracker() {

        	public void processCdpCacheRow(final CdpCacheRow row) {
	    		m_linkd.getQueryManager().store(getNodeId(),row.getLink(cdpInterfacePortNameGetter));
        	}
            };

            try {
                m_linkd.getLocationAwareSnmpClient().walk(getPeer(), cdpCacheTable).
                withDescription("cdpCacheTable").
                atLocation(getLocation()).
                execute().
                get();
            } catch (ExecutionException e) {
                // pass
            }                
        
        } catch (final InterruptedException e) {
            LOG.info("run: Cdp Linkd collection interrupted, exiting",e);
            return;
        }
        m_linkd.getQueryManager().reconcileCdp(getNodeId(),now);
    }

