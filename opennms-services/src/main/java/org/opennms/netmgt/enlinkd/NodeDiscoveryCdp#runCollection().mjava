    protected void runCollection() {

    	final Date now = new Date(); 

    	String trackerName = "cdpGlobalGroup";

        final CdpGlobalGroupTracker cdpGlobalGroup = new CdpGlobalGroupTracker();

		LOG.debug("run: collecting : {}", getPeer());

        SnmpWalker walker =  SnmpUtils.createWalker(getPeer(), trackerName, cdpGlobalGroup);

        walker.start();

        try {
            walker.waitFor();
            if (walker.timedOut()) {
            	LOG.info("run:Aborting Cdp Linkd node scan : Agent timed out while scanning the {} table", trackerName);
            	return;
            }  else if (walker.failed()) {
            	LOG.info("run:Aborting Cdp Linkd node scan : Agent failed while scanning the {} table: {}", trackerName,walker.getErrorMessage());
            	return;
            }
        } catch (final InterruptedException e) {
            LOG.error("run: Cdp Linkd collection interrupted, exiting",e);
            return;
        }
        
        if (cdpGlobalGroup.getCdpDeviceId() == null ) {
            LOG.info("run: cdp mib not supported on: {}", str(getPeer().getAddress()));
            return;
        } 
        CdpElement cdpElement = cdpGlobalGroup.getCdpElement();
        m_linkd.getQueryManager().store(getNodeId(), cdpElement);
        if (cdpElement.getCdpGlobalRun() == TruthValue.FALSE) {
            LOG.info("run: cdp disabled on: {}", str(getPeer().getAddress()));
            return;
        }

        final CdpInterfacePortNameGetter cdpInterfacePortNameGetter = new CdpInterfacePortNameGetter(getPeer());
        trackerName = "cdpCacheTable";
        CdpCacheTableTracker cdpCacheTable = new CdpCacheTableTracker() {

        	public void processCdpCacheRow(final CdpCacheRow row) {
	    		m_linkd.getQueryManager().store(getNodeId(),row.getLink(cdpInterfacePortNameGetter));
        	}
        };

        walker = SnmpUtils.createWalker(getPeer(), trackerName, cdpCacheTable);
        walker.start();
        
        try {
            walker.waitFor();
            if (walker.timedOut()) {
            	LOG.info("run:Aborting Cdp Linkd node scan : Agent timed out while scanning the {} table", trackerName);
            	return;
            }  else if (walker.failed()) {
            	LOG.info("run:Aborting Cdp Linkd node scan : Agent failed while scanning the {} table: {}", trackerName,walker.getErrorMessage());
            	return;
            }
        } catch (final InterruptedException e) {
            LOG.error("run: Cdp Linkd collection interrupted, exiting",e);
            return;
        }
        m_linkd.getQueryManager().reconcileCdp(getNodeId(),now);
    }

