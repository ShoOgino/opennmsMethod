    /**
     * <p>
     * Performs the collection for the targeted IP address. The success or
     * failure of the collection should be tested via the <code>failed</code>
     * method.
     * </p>
     * <p>
     * No synchronization is performed, so if this is used in a separate
     * thread context synchronization must be added.
     * </p>
     */
    public void run() {
    	EventBuilder builder;
        if (m_suspendCollection) {
            builder = new EventBuilder(
                    "uei.opennms.org/internal/linkd/nodeLinkDiscoverySuspended",
                    "EnhancedLinkd");
            builder.setNodeid(getNodeId());
            builder.setInterface(getTarget());
            builder.addParam("runnable", getName());
            m_linkd.getEventForwarder().sendNow(builder.getEvent());
        } else {
            builder = new EventBuilder(
                    "uei.opennms.org/internal/linkd/nodeLinkDiscoveryStarted",
                    "EnhancedLinkd");
            builder.setNodeid(getNodeId());
            builder.setInterface(getTarget());
            builder.addParam("runnable", getName());
            m_linkd.getEventForwarder().sendNow(builder.getEvent());
            
            runCollection();
            
            builder = new EventBuilder(
                    "uei.opennms.org/internal/linkd/nodeLinkDiscoveryCompleted",
                    "EnhancedLinkd");
            builder.setNodeid(getNodeId());
            builder.setInterface(getTarget());
            builder.addParam("runnable", getName());
            m_linkd.getEventForwarder().sendNow(builder.getEvent());

        }
        m_runned = true;
        reschedule();
    }

