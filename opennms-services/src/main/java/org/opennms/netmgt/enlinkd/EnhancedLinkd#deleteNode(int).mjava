    void deleteNode(int nodeid) {
        LOG.info("deleteNode: deleting LinkableNode for node {}",
                        nodeid);

        BroadcastDomain domain = m_queryMgr.getBridgeTopologyBroadcastDomain(nodeid);

        // must be calculated the topology for nodeid...
        Node node = removeNode(nodeid);

        if (node == null) {
            LOG.warn("deleteNode: node not found: {}", nodeid);
        } else {
            Collection<NodeDiscovery> collections = getSnmpCollections(node);
            LOG.info("deleteNode: fetched SnmpCollections from scratch, iterating over {} objects to wake them up",
                            collections.size());
            for (NodeDiscovery collection : collections) {
                ReadyRunnable rr = getReadyRunnable(collection);

                if (rr == null) {
                    LOG.warn("deleteNode: found null ReadyRunnable");
                    continue;
                } else {
                    if (rr instanceof NodeDiscoveryBridgeTopology && domain.getBridgeNodesOnDomain().size() > 1) {
                        domain.getLock();
                        LOG.info("deleteNode: node: {}, start: calculating topology for braodcast domain",nodeid);
                        NodeDiscoveryBridgeTopology ndbt= (NodeDiscoveryBridgeTopology) rr;
                        ndbt.clearTopologyForBridge(domain.getBridge(nodeid));
                        LOG.info("deleteNode: node: {}, end: calculating topology for braodcast domain",nodeid);
                        LOG.info("deleteNode: node: {}, start: save topology for braodcast domain",nodeid);
                        m_queryMgr.store(domain, ndbt.getRootBridgeId(),ndbt.getRootBridgeBFT());
                        LOG.info("deleteNode: node: {}, end: save topology for braodcast domain",nodeid);
                        domain.releaseLock();
                    }
                    rr.unschedule();
                }

            }

        }
        m_queryMgr.delete(nodeid);

    }

