    void deleteNode(int nodeid) {
        LOG.info("deleteNode: deleting LinkableNode for node {}",
                        nodeid);

        Date now = new Date();
        BroadcastDomain domain = m_queryMgr.getBridgeTopologyBroadcastDomain(nodeid);
        LOG.debug("deleteNode: {}, found broadcast domain: nodes {}, macs {}", nodeid, domain.getBridgeNodesOnDomain(), domain.getMacsOnDomain());
        // must be calculated the topology for nodeid...
        NodeDiscoveryBridgeTopology ndbt= new NodeDiscoveryBridgeTopology(this,getNode(nodeid));
        ndbt.setDomain(domain);
        domain.getLock(this);
        LOG.info("deleteNode: node: {}, start: merging topology for domain",nodeid);
        domain.clearTopologyForBridge(domain.getBridge(nodeid));
        LOG.info("deleteNode: node: {}, end: merging topology for domain",nodeid);
        LOG.info("deleteNode: node: {}, start: save topology for domain",nodeid);
        m_queryMgr.store(domain,now);
        m_queryMgr.save(ndbt.getDomain().getRootBridgeId(),ndbt.getRootBridgeBFT());
        LOG.info("deleteNode: node: {}, end: save topology for domain",nodeid);
        domain.removeBridge(nodeid);
        domain.releaseLock(this);
        
        Node node = removeNode(nodeid);

        if (node == null) {
            LOG.warn("deleteNode: node not found: {}", nodeid);
        } else {
            Collection<NodeDiscovery> collections = getSnmpCollections(node);
            LOG.info("deleteNode: fetched SnmpCollections from scratch, iterating over {} objects to delete",
                            collections.size());
            for (NodeDiscovery collection : collections) {
                ReadyRunnable rr = getReadyRunnable(collection);

                if (rr == null) {
                    LOG.warn("deleteNode: found null ReadyRunnable");
                    continue;
                } else {
                    rr.unschedule();
                }

            }
            NodeDiscovery topology = getNodeBridgeDiscoveryTopology(node);
            ReadyRunnable rr = getReadyRunnable(topology);

            if (rr == null) {
                LOG.warn("deleteNode: found null ReadyRunnable");
            } else {
                rr.unschedule();
            }
        }
        m_queryMgr.delete(nodeid);
        m_queryMgr.cleanBroadcastDomains();

    }

