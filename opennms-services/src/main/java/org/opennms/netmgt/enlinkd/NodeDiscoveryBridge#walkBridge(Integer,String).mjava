	protected void walkBridge(Integer vlan, String vlanname) {
		String trackerName = "dot1dbase";
		final Dot1dBaseTracker dot1dbase = new Dot1dBaseTracker();
		SnmpWalker walker = SnmpUtils.createWalker(getPeer(), trackerName,
				dot1dbase);
		walker.start();

		try {
			walker.waitFor();
			if (walker.timedOut()) {
				LOG.info("run:Aborting Bridge Linkd node scan : Agent timed out while scanning the {} table",
						trackerName);
				return;
			} else if (walker.failed()) {
				LOG.info("run:Aborting Bridge Linkd node scan : Agent failed while scanning the {} table: {}",
						trackerName, walker.getErrorMessage());
				return;
			}
		} catch (final InterruptedException e) {
			LOG.error("run: Bridge Linkd node collection interrupted, exiting",e);
			return;
		}

		BridgeElement bridge = dot1dbase.getBridgeElement();
		bridge.setVlan(vlan);
		bridge.setVlanname(vlanname);
		if (bridge.getBaseBridgeAddress() == null) {
			LOG.info("bridge mib not supported on: {}",
					str(getPeer().getAddress()));
			return;
		}

		if (isValidBridgeAddress(bridge.getBaseBridgeAddress())) {
			LOG.info("bridge not supported, base address identifier {} is not valid on: {}",
					dot1dbase.getBridgeAddress(), str(getPeer().getAddress()));
			return;
		}

		if (bridge.getBaseNumPorts() == 0) {
			LOG.info("bridge {} has 0 port active, on: {}",
					dot1dbase.getBridgeAddress(), str(getPeer().getAddress()));
			return;
		}
		LOG.info("bridge {} has is if type {}, on: {}", dot1dbase
				.getBridgeAddress(), BridgeDot1dBaseType.getTypeString(dot1dbase.getBridgeType()));

		if (bridge.getBaseType() ==  BridgeDot1dBaseType.DOT1DBASETYPE_SOURCEROUTE_ONLY) {
			LOG.info("{}: source route only type bridge, on: {}",
					dot1dbase.getBridgeAddress(), str(getPeer().getAddress()));
			return;
		}
		m_linkd.getQueryManager().store(getNodeId(), bridge);
		
		Map<Integer,Integer> bridgetoifindex = walkDot1dBasePortTable();

		if (!isValidStpBridgeId(bridge.getStpDesignatedRoot())) {
			LOG.info("spanning tree not supported on: {}",
					str(getPeer().getAddress()));
		} else if (bridge.getStpProtocolSpecification() != 3) {
			LOG.info("ieee8021d spanning tree not supported on bridge {}, on: {}",
					bridge.getStpDesignatedRoot(),
					str(getPeer().getAddress()));
		} else if (bridge.getBaseBridgeAddress().equals(getBridgeAddressFromStpBridgeId(bridge.getStpDesignatedRoot()))) {
			LOG.info("designated root of spanning tree is itself on bridge {}, on: {}",
					bridge.getStpDesignatedRoot(),
					str(getPeer().getAddress()));
		} else {
			walkSpanningTree(bridge.getBaseBridgeAddress(),vlan, bridgetoifindex);
		}		
		walkDot1dTpFdp(vlan,bridgetoifindex);
		walkDot1qTpFdp(bridgetoifindex);
	}

