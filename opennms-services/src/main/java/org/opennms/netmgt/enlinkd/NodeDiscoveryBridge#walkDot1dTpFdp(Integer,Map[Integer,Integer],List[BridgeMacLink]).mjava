	private List<BridgeMacLink> walkDot1dTpFdp(final Integer vlan, final Map<Integer,Integer> bridgeifindex,List<BridgeMacLink> bft) {
		String trackerName = "dot1dTbFdbPortTable";

		Dot1dTpFdbTableTracker stpPortTableTracker = new Dot1dTpFdbTableTracker() {

			@Override
			public void processDot1dTpFdbRow(final Dot1dTpFdbRow row) {
				BridgeMacLink link = row.getLink();
                                if (link.getBridgeDot1qTpFdbStatus() == null) {
                                    LOG.warn("processDot1dTpFdbRow: row has null status. mac {}: vlan {}: on port {}",  
                                             row.getDot1dTpFdbAddress(), vlan, row.getDot1dTpFdbPort());
                                    return;
                                }
				if (link.getBridgePort() == null) {
                                    LOG.warn("processDot1dTpFdbRow: row has null bridge port.  mac {}: vlan {}: on port {} status {}",  
                                             row.getDot1dTpFdbAddress(), vlan, row.getDot1dTpFdbPort(),link.getBridgeDot1qTpFdbStatus());
                                    return;
				}
				if (link.getMacAddress() == null || !isValidBridgeAddress(link.getMacAddress())) {
	                            LOG.warn("processDot1dTpFdbRow: row has invalid mac. mac {}: vlan {}: on port {} ifindex {} status {}",  
                                         row.getDot1dTpFdbAddress(), vlan, row.getDot1dTpFdbPort(),link.getBridgePortIfIndex(),link.getBridgeDot1qTpFdbStatus());
	                            return;
				}
                                link.setVlan(vlan);
                                link.setBridgePortIfIndex(bridgeifindex.get(link.getBridgePort()));
                                LOG.info("processDot1dTpFdbRow: row processed: mac {}: vlan {}: on port {} ifindex {} status {}",  
                                         link.getMacAddress(), link.getVlan(), link.getBridgePort() ,link.getBridgePortIfIndex(),link.getBridgeDot1qTpFdbStatus());
                                bft.add(link);
			}
		};
		SnmpWalker walker = SnmpUtils.createWalker(getPeer(), trackerName,
				stpPortTableTracker);
		walker.start();

		try {
			walker.waitFor();
			if (walker.timedOut()) {
				LOG.info("run:Aborting Bridge Linkd node scan : Agent timed out while scanning the {} table",
						trackerName);
				return bft;
			} else if (walker.failed()) {
				LOG.info("run:Aborting Bridge Linkd node scan : Agent failed while scanning the {} table: {}",
						trackerName, walker.getErrorMessage());
				return bft;
			}
		} catch (final InterruptedException e) {
			LOG.error("run: Bridge Linkd node collection interrupted, exiting",e);
			return bft;
		}
		return bft;
	}

