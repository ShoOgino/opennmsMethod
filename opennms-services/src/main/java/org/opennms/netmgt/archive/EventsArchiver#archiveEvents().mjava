    /**
     * Select the events created before 'age', log them to the archive file if
     * required and delete these events.
     * 
     * NOTE: Postgres does not have the ResultSet.deleteRow() implemented! - so
     * use the eventID to delete!
     */
    private void archiveEvents() {
        // number of events sent to the archive file
        int archCount = 0;

        // number of events deleted from the events table
        int remCount = 0;

        ResultSet eventsRS = null;
        try {
            m_eventsGetStmt.setTimestamp(1, new Timestamp(m_archAge));
            eventsRS = m_eventsGetStmt.executeQuery();
            int colCount = eventsRS.getMetaData().getColumnCount();
            String eventID;
            String eventUEI;
            String eventLog;
            String eventDisplay;
            String eventAckUser;

            boolean ret;

            while (eventsRS.next()) {
                // get the eventID for the event
                eventID = eventsRS.getString(EVENT_ID);

                // get uei for event
                eventUEI = eventsRS.getString("eventUei");

                // get eventLog for this row
                eventLog = eventsRS.getString(EVENT_LOG);

                // get eventDisplay for this row
                eventDisplay = eventsRS.getString(EVENT_DISPLAY);

                // eventAckUser for this event
                eventAckUser = eventsRS.getString(EVENT_ACK_USER);

                m_logCat.debug("Event id: " + eventID + " uei: " + eventUEI
                               + " log: " + eventLog + " display: "
                               + eventDisplay + " eventAck: " + eventAckUser);

                if (eventLog.equals(MSG_NO) && eventDisplay.equals(MSG_NO)) {
                    // log = N, display = N, delete event
                    ret = removeEvent(eventID);
                    if (ret) {
                        remCount++;
                    }
                } else if (eventLog.equals(MSG_YES)
                           && eventDisplay.equals(MSG_NO)) {
                    // log = Y, display = N, archive event, then delete
                    ret = removeEvent(eventID);
                    if (ret) {
                        sendToArchive(eventsRS, colCount);
                        if (m_logCat.isDebugEnabled()) {
                            m_logCat.debug("eventID " + eventID + " archived");
                        }

                        archCount++;

                        remCount++;
                    }
                } else if (eventLog.equals(MSG_NO)
                           && eventDisplay.equals(MSG_YES)) {
                    /*
                     * log = N, display = Y, delete event only if event has been
                     * acknowledged.
                     */
                    if (eventAckUser != null) {
                        ret = removeEvent(eventID);
                        if (ret) {
                            remCount++;
                        }
                    }
                } else {
                    /*
                     * log = Y, display = Y, log and delete event only if event
                     * has been acknowledged.
                     */
                    if (eventAckUser != null) {
                        ret = removeEvent(eventID);
                        if (ret) {
                            sendToArchive(eventsRS, colCount);
                            if (m_logCat.isDebugEnabled()) {
                                m_logCat.debug("eventID " + eventID
                                               + " archived");
                            }
                            archCount++;

                            remCount++;
                        }
                    }
                }

            }

            m_logCat.info("Number of events removed from the event table: "
                          + remCount);
            m_logCat.info("Number of events sent to the archive: " + archCount);
        } catch (Exception oe) {
            m_logCat.error("EventsArchiver: Error reading events for archival: ");
            m_logCat.error(oe.getMessage());
        } finally {
            try {
                eventsRS.close();
            } catch (Exception e) {
                m_logCat.info("EventsArchiver: Exception while events result "
                              + "set: message -> " + e.getMessage());
            }
        }

    }

