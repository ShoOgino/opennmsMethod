    /**
     * Read the required properties and set up the logs, the archive etc.
     * 
     * @exception ArchiverException
     *                thrown if a required property is not specified or is
     *                incorrect
     */
    @SuppressWarnings("deprecation")
    private void init() throws ArchiverException {
        // The general logs from the events archiver go to this category
        ThreadCategory.setPrefix("OpenNMS.Archiver.Events");
        m_logCat = ThreadCategory.getInstance("OpenNMS.Archiver.Events");

        // The archive logs go to this category
        m_archCat = Category.getInstance("EventsArchiver");

        /*
         * Set additivity for this to false so that logs from here
         * do not go to the root category.
         */
        m_archCat.setAdditivity(false);

        EventsArchiverConfigFactory eaFactory;
        
        try {
            EventsArchiverConfigFactory.init();
             eaFactory =
                EventsArchiverConfigFactory.getInstance();
        } catch (MarshalException ex) {
            m_logCat.fatal("MarshalException", ex);
            throw new UndeclaredThrowableException(ex);
        } catch (ValidationException ex) {
            m_logCat.fatal("ValidationException", ex);
            throw new UndeclaredThrowableException(ex);
        } catch (IOException ex) {
            m_logCat.fatal("IOException", ex);
            throw new UndeclaredThrowableException(ex);
        }

        // get archive age
        String archAgeStr = eaFactory.getArchiveAge();
        long archAge;
        try {
            archAge = TimeConverter.convertToMillis(archAgeStr);
        } catch (NumberFormatException nfe) {
            throw new ArchiverException("Archive age: " + archAgeStr
                                        + "- Incorrect format "
                                        + nfe.getMessage());
        }

        /*
         * Set actual time that is to be used for the select from the
         * database.
         */
        m_archAge = System.currentTimeMillis() - archAge;

        // get the separator to be used between column names in the archive
        String separator = eaFactory.getSeparator();
        if (separator == null) {
            m_archSeparator = "#";
        } else {
            m_archSeparator = separator;
        }

        // info logs
        if (m_logCat.isInfoEnabled()) {
            // get this in readable format
            archAgeStr = (new java.util.Date(m_archAge)).toString();
            m_logCat.info("Events archive age specified = " + archAgeStr);
            m_logCat.info("Events archive age in millisconds = " + archAge);

            m_logCat.info("Events created before \'" + archAgeStr
                          + " \' will be deleted");

            m_logCat.info("Separator to be used in archive: "
                          + m_archSeparator);
        }

        // Make sure we can connect to the database
        try {
            DataSourceFactory.init();
            m_conn = DataSourceFactory.getInstance().getConnection();
        } catch (IOException e) {
            m_logCat.fatal("IOException while initializing database", e);
            throw new UndeclaredThrowableException(e);
        } catch (MarshalException e) {
            m_logCat.fatal("MarshalException while initializing database", e);
            throw new UndeclaredThrowableException(e);
        } catch (ValidationException e) {
            m_logCat.fatal("ValidationException while initializing database", e);
            throw new UndeclaredThrowableException(e);
        } catch (PropertyVetoException e) {
            m_logCat.fatal("PropertyVetoException while initializing database",
                           e);
            throw new UndeclaredThrowableException(e);
        } catch (SQLException e) {
            m_logCat.fatal("SQLException while initializing database", e);
            throw new UndeclaredThrowableException(e);
        } catch (ClassNotFoundException e) {
            m_logCat.fatal("ClassNotFoundException while initializing database",
                           e);
            throw new UndeclaredThrowableException(e);
        }
        // XXX should we be throwing ArchiverException instead?
    }

