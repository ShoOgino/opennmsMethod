	protected void onInit() {
		initialCapsdConfig();

        initializePollerConfig();

        initializeCollectdConfig();

        initializeDataSourceFactory();

        initializeSnmpPeerFactory();
        
        initializePluginManager();
        
        initializeSyncer();

        /*
         * Get connection to the database and use it to sync the
         * content of the database with the latest configuration
         * information.
         * 
         * First any new services are added to the services table
         * with a call to syncServices().
         *
         * Secondly the management state of interfaces and services
         * in the database is updated based on the latest configuration
         * information with a call to syncManagementState()
         *
         * Lastly the primary snmp interface state ('isSnmpPrimary')
         * of all interfaces which support SNMP is updated based on
         * the latest configuration information via a call to
         * syncSnmpPrimaryState()
         */
        java.sql.Connection conn = null;
        try {
            conn = DataSourceFactory.getInstance().getConnection();

            log().debug("init: Loading services into database...");
            getCapsdDbSyncer().syncServices(conn);

            log().debug("init: Syncing management state...");
            getCapsdDbSyncer().syncManagementState(conn);

            log().debug("init: Syncing primary SNMP interface state...");
            getCapsdDbSyncer().syncSnmpPrimaryState(conn);     
        } catch (SQLException sqlE) {
            log().fatal("SQL Exception while syncing database with latest configuration information.", sqlE);
            throw new UndeclaredThrowableException(sqlE);
        } catch (Throwable t) {
            log().fatal("Unknown error while syncing database with latest configuration information.", t);
            throw new UndeclaredThrowableException(t);
        } finally {
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (Exception e) {
            }
        }

        // Create the suspect event and rescan thread pools
        m_suspectRunner = new RunnableConsumerThreadPool("Capsd Suspect Pool", 0.0f, 0.0f, CapsdConfigFactory.getInstance().getMaxSuspectThreadPoolSize());

        /*
         * Only stop thread if nothing in queue.
         * Always start thread if queue is not
         * empty and max threads has not been reached.
         */
        m_rescanRunner = new RunnableConsumerThreadPool("Capsd Rescan Pool",
							0.0f, 0.0f,
                CapsdConfigFactory.getInstance().getMaxRescanThreadPoolSize());

        // Create the rescan scheduler
        if (log().isDebugEnabled()) {
            log().debug("init: Creating rescan scheduler");
        }
        try {
            /*
             * During instantiation, the scheduler will load the
             * list of known nodes from the database.
             */
            m_scheduler = new Scheduler(getCapsdDbSyncer(), m_rescanRunner.getRunQueue());
        } catch (SQLException sqlE) {
            log().error("Failed to initialize the rescan scheduler.", sqlE);
            throw new UndeclaredThrowableException(sqlE);
        } catch (Throwable t) {
            log().error("Failed to initialize the rescan scheduler.", t);
            throw new UndeclaredThrowableException(t);
        }

        // Create an event receiver.
        log().debug("init: Creating event broadcast event receiver");
        try {
            m_receiver = new BroadcastEventProcessor(getCapsdDbSyncer(), m_pluginManager, m_suspectRunner.getRunQueue(), m_scheduler);
        } catch (Throwable t) {
            log().error("Failed to initialized the broadcast event receiver", t);
            throw new UndeclaredThrowableException(t);
        }
	}

