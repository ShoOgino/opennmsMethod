    /**
     * This method is responsible for creating and sending a
     * 'nodeGainedService' event to Eventd
     * 
     * @param nodeEntry
     *            Interface's parent node identifier.
     * @param ipAddr
     *            Interface's IP address
     * @param svcName
     *            Service name
     * @param qualifier
     *            Service qualifier (typically the port on which the service
     *            was found)
     */
    private void createAndSendNodeGainedServiceEvent(DbNodeEntry nodeEntry,
            InetAddress ipAddr, String svcName, String qualifier) {
        
        EventBuilder bldr = createEventBuilder(EventConstants.NODE_GAINED_SERVICE_EVENT_UEI);
        bldr.setNodeid(nodeEntry.getNodeId());
        bldr.setInterface(ipAddr.getHostAddress());
        bldr.setService(svcName);
        bldr.addParam(EventConstants.PARM_IP_HOSTNAME, ipAddr.getHostName());
        bldr.addParam(EventConstants.PARM_NODE_LABEL, nodeEntry.getLabel());
        bldr.addParam(EventConstants.PARM_NODE_LABEL_SOURCE, nodeEntry.getLabelSource());

        // Add qualifier (if available)
        if (qualifier != null && qualifier.length() > 0) {
            bldr.addParam(EventConstants.PARM_QUALIFIER, qualifier);
        }
        
        // Add sysName (if available)
        if (nodeEntry.getSystemName() != null) {
            bldr.addParam(EventConstants.PARM_NODE_SYSNAME, nodeEntry.getSystemName());
        }

        // Add sysDescr (if available)
        if (nodeEntry.getSystemDescription() != null) {
            bldr.addParam(EventConstants.PARM_NODE_SYSDESCRIPTION, nodeEntry.getSystemDescription());
        }

        sendEvent(bldr.getEvent());

    }

