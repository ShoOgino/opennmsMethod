    /**
     * This method is responsible for creating all the necessary
     * interface-level events for the node and sending them to Eventd.
     * 
     * @param node
     *            DbNodeEntry object for the parent node.
     * @param useExistingNode
     *            TRUE if existing node was used, FALSE if new node was
     *            created.
     * @param ifaddr
     *            Target interface address
     * @param collector
     *            Interface collector containing SNMP and SMB info.
     */
    private void sendInterfaceEvents(DbNodeEntry node,
            boolean useExistingNode, InetAddress ifaddr, IfCollector collector) {
        // nodeGainedInterface
        //
        LOG.debug("sendInterfaceEvents: sending node gained interface event for " + str(ifaddr));

        createAndSendNodeGainedInterfaceEvent(node.getNodeId(), ifaddr);

        // nodeGainedService
        //
        LOG.debug("sendInterfaceEvents: processing supported services for " + str(ifaddr));
        for(SupportedProtocol p : collector.getSupportedProtocols()) {
            LOG.debug("sendInterfaceEvents: sending event for service: " + p.getProtocolName());
            createAndSendNodeGainedServiceEvent(node, ifaddr,
                                                p.getProtocolName(), null);
        }

        // If the useExistingNode flag is set to TRUE we're done, none of the
        // sub-targets should have been added.
        //
        if (useExistingNode)
            return;

        // If SNMP info available send events for sub-targets
        //
        if (collector.hasSnmpCollection()
                && !collector.getSnmpCollector().failed()) {
            Map<InetAddress, List<SupportedProtocol>> extraTargets = collector.getAdditionalTargets();
            for(InetAddress xifaddr : extraTargets.keySet()) {

                // nodeGainedInterface
                //
                createAndSendNodeGainedInterfaceEvent(node.getNodeId(),
                                                      xifaddr);

                // nodeGainedService
                //
                List<SupportedProtocol> supportedProtocols = extraTargets.get(xifaddr);
                LOG.debug("interface " + xifaddr + " supports " + supportedProtocols.size() + " protocols.");
                if (supportedProtocols != null) {
                    for(SupportedProtocol p : supportedProtocols) {
                        createAndSendNodeGainedServiceEvent(
                                                            node,
                                                            xifaddr,
                                                            p.getProtocolName(),
                                                            null);
                    }
                }
            }
        }
    }

