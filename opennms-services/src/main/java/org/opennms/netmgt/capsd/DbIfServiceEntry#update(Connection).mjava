    /**
     * Updates an existing record in the OpenNMS ifServices table.
     * 
     * @param c
     *            The connection used for the update.
     * 
     * @throws java.sql.SQLException
     *             Thrown if an error occurs with the connection
     */
    private void update(Connection c) throws SQLException {
        if (!m_fromDb)
            throw new IllegalStateException("The record does not exists in the database");

        Category log = ThreadCategory.getInstance(getClass());

        StringBuffer sqlText = new StringBuffer("UPDATE ifServices SET ");

        char comma = ' ';
        if ((m_changed & CHANGED_IFINDEX) == CHANGED_IFINDEX) {
            sqlText.append(comma).append("ifIndex = ?");
            comma = ',';
        }

        if ((m_changed & CHANGED_STATUS) == CHANGED_STATUS) {
            sqlText.append(comma).append("status = ?");
            comma = ',';
        }

        if ((m_changed & CHANGED_LASTGOOD) == CHANGED_LASTGOOD) {
            sqlText.append(comma).append("lastGood = ?");
            comma = ',';
        }

        if ((m_changed & CHANGED_LASTFAIL) == CHANGED_LASTFAIL) {
            sqlText.append(comma).append("lastFail = ?");
            comma = ',';
        }

        if ((m_changed & CHANGED_SOURCE) == CHANGED_SOURCE) {
            sqlText.append(comma).append("source = ?");
            comma = ',';
        }

        if ((m_changed & CHANGED_NOTIFY) == CHANGED_NOTIFY) {
            sqlText.append(comma).append("notify = ?");
            comma = ',';
        }

        if ((m_changed & CHANGED_QUALIFIER) == CHANGED_QUALIFIER) {
            sqlText.append(comma).append("qualifier = ?");
            comma = ',';
        }

        sqlText.append(" WHERE nodeID = ? AND ipAddr = ? AND serviceID = ? and status <> 'D'");

        log.debug("DbIfServiceEntry.update: SQL update statment = " + sqlText.toString());

        // create the Prepared statment and then
        // start setting the result values
        //
        PreparedStatement stmt = c.prepareStatement(sqlText.toString());
        sqlText = null;

        int ndx = 1;
        if ((m_changed & CHANGED_IFINDEX) == CHANGED_IFINDEX) {
            if (m_ifIndex == -1)
                stmt.setNull(ndx++, Types.INTEGER);
            else
                stmt.setInt(ndx++, m_ifIndex);
        }

        if ((m_changed & CHANGED_STATUS) == CHANGED_STATUS) {
            if (m_status != STATUS_UNKNOWN)
                stmt.setString(ndx++, new String(new char[] { m_status }));
            else
                stmt.setNull(ndx++, Types.CHAR);
        }

        if ((m_changed & CHANGED_LASTGOOD) == CHANGED_LASTGOOD) {
            if (m_lastGood != null) {
                stmt.setTimestamp(ndx++, m_lastGood);
            } else
                stmt.setNull(ndx++, Types.TIMESTAMP);
        }

        if ((m_changed & CHANGED_LASTFAIL) == CHANGED_LASTFAIL) {
            if (m_lastFail != null) {
                stmt.setTimestamp(ndx++, m_lastFail);
            } else
                stmt.setNull(ndx++, Types.TIMESTAMP);
        }

        if ((m_changed & CHANGED_SOURCE) == CHANGED_SOURCE) {
            if (m_source == SOURCE_UNKNOWN)
                stmt.setNull(ndx++, Types.CHAR);
            else
                stmt.setString(ndx++, new String(new char[] { m_source }));
        }

        if ((m_changed & CHANGED_NOTIFY) == CHANGED_NOTIFY) {
            if (m_notify == NOTIFY_UNKNOWN)
                stmt.setNull(ndx++, Types.CHAR);
            else
                stmt.setString(ndx++, new String(new char[] { m_notify }));
        }

        stmt.setInt(ndx++, m_nodeId);
        stmt.setString(ndx++, m_ipAddr.getHostAddress());
        stmt.setInt(ndx++, m_serviceId);

        // Run the insert
        //
        int rc = stmt.executeUpdate();
        log.debug("DbIfServiceEntry.update: update result = " + rc);
        stmt.close();

        // clear the mask and mark as backed
        // by the database
        //
        m_changed = 0;
    }

