    /**
     * <P>
     * Test to see if the passed host-port pair is the endpoint for an SMTP
     * server. If there is an SMTP server at that destination then a value of
     * true is returned from the method. Otherwise a false value is returned to
     * the caller.
     * </P>
     * 
     * @param host
     *            The remote host to connect to.
     * @param port
     *            The remote port on the host.
     * 
     * @return True if server supports SMTP on the specified port, false
     *         otherwise
     */
    private boolean isServer(InetAddress host, int port, int retries, int timeout) {
        // get a log to send errors
        //

        boolean isAServer = false;
        for (int attempts = 0; attempts <= retries && !isAServer; attempts++) {
            Socket socket = null;
            try {
                socket = new Socket();
                socket.connect(new InetSocketAddress(host, port), timeout);
                socket.setSoTimeout(timeout);
                LOG.debug("SmtpPlugin: connected to host: {} on port: {}", port, host);

                // Allocate a line reader
                //
                BufferedReader lineRdr = new BufferedReader(new InputStreamReader(socket.getInputStream()));

                // Read responses from the server. The initial line should just
                // be a banner, but go ahead and check for multiline response.
                //
                String result = null;
                do {
                    result = lineRdr.readLine();

                } while (result != null && result.length() > 0 && MULTILINE_RESULT.match(result));

                if (result == null || result.length() == 0) {
                    LOG.info("Received truncated response from SMTP server {}", InetAddressUtils.str(host));
                    continue;
                }

                // Tokenize the last line result
                //
                StringTokenizer t = new StringTokenizer(result);
                int rc = Integer.parseInt(t.nextToken());
                if (rc == 220) {
                    //
                    // Send the HELO command
                    //
                    String cmd = "HELO " + LOCALHOST_NAME + "\r\n";
                    socket.getOutputStream().write(cmd.getBytes());

                    // Response from HELO command may be a multi-line response
                    // (but
                    // most likely will be single-line)..
                    // We are expecting to get a response with an integer return
                    // code in the first token. We can't ge sure that the first
                    // response will give us what we want. Consider the
                    // following
                    // reponse for example:
                    //
                    // 250-First line
                    // 250-Second line
                    // 250 Requested mail action okay, completed
                    //
                    // In this case the final line of the response contains the
                    // return
                    // code we are looking for.
                    do {
                        result = lineRdr.readLine();

                    } while (result != null && result.length() > 0 && MULTILINE_RESULT.match(result));

                    if (result == null || result.length() == 0) {
                        LOG.info("Received truncated response from SMTP server {}", InetAddressUtils.str(host));
                        continue;
                    }

                    t = new StringTokenizer(result);
                    rc = Integer.parseInt(t.nextToken());
                    if (rc == 250) {
                        //
                        // Send the QUIT command
                        //
                        cmd = "QUIT\r\n";
                        socket.getOutputStream().write(cmd.getBytes());

                        // Response from QUIT command may be a multi-line
                        // response.
                        // We are expecting to get a response with an integer
                        // return
                        // code in the first token. We can't ge sure that the
                        // first
                        // response will give us what we want. Consider the
                        // following
                        // reponse for example:
                        //
                        // 221-First line
                        // 221-Second line
                        // 221 <domain> Service closing transmission channel.
                        //
                        // In this case the final line of the response contains
                        // the return
                        // code we are looking for.
                        do {
                            result = lineRdr.readLine();

                        } while (result != null && result.length() > 0 && MULTILINE_RESULT.match(result));

                        if (result == null || result.length() == 0) {
                            LOG.info("Received truncated response from SMTP server {}", InetAddressUtils.str(host));
                            continue;
                        }

                        t = new StringTokenizer(result);
                        rc = Integer.parseInt(t.nextToken());

                        if (rc == 221)
                            isAServer = true;
                    }
                }
            } catch (NumberFormatException e) {
                LOG.info("SmtpPlugin: received invalid result code from server " + InetAddressUtils.str(host), e);
                isAServer = false;
            } catch (ConnectException cE) {
                // Connection refused!! Continue to retry.
                //
                LOG.debug("SmtpPlugin: connection refused to {}: {}", port, InetAddressUtils.str(host));
                isAServer = false;
            } catch (NoRouteToHostException e) {
                // No route to host!! No need to perform retries.
                e.fillInStackTrace();
                LOG.info("SmtpPlugin: Unable to test host {}, no route available", e, InetAddressUtils.str(host));
                isAServer = false;
                throw new UndeclaredThrowableException(e);
            } catch (InterruptedIOException e) {
                LOG.debug("SmtpPlugin: did not connect to host within timeout: {} attempt: {}", attempts, timeout);
                isAServer = false;
            } catch (IOException e) {
                LOG.info("SmtpPlugin: Error communicating with host " + InetAddressUtils.str(host), e);
                isAServer = false;
            } catch (Throwable t) {
                LOG.warn("SmtpPlugin: Undeclared throwable exception caught contacting host " + InetAddressUtils.str(host), t);
                isAServer = false;
            } finally {
                try {
                    if (socket != null)
                        socket.close();
                } catch (IOException e) {
                }
            }
        }

        //
        // return the success/failure of this
        // attempt to contact an SMTP server.
        //
        return isAServer;
    }

