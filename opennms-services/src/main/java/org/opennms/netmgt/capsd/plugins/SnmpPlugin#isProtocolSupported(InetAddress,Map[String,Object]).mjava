    /**
     * Returns true if the protocol defined by this plugin is supported. If the
     * protocol is not supported then a false value is returned to the caller.
     * The qualifier map passed to the method is used by the plugin to return
     * additional information by key-name. These key-value pairs can be added to
     * service events if needed.
     * 
     * @param address
     *            The address to check for support.
     * @param qualifiers
     *            The map where qualification are set by the plugin.
     * 
     * @return True if the protocol is supported by the address.
     */
    public boolean isProtocolSupported(InetAddress address, Map<String, Object> qualifiers) {
        
        try {

            String oid = ParameterMap.getKeyedString(qualifiers, "vbname", DEFAULT_OID);
            SnmpAgentConfig agentConfig = SnmpPeerFactory.getInstance().getAgentConfig(address);
            String expectedValue = null;
            String isTable = null;
            
            if (qualifiers != null) {
                // "port" parm
                //
                if (qualifiers.get("port") != null) {
                    int port = ParameterMap.getKeyedInteger(qualifiers, "port", agentConfig.getPort());
                    agentConfig.setPort(port);
                }
                
                // "timeout" parm
                //
                if (qualifiers.get("timeout") != null) {
                    int timeout = ParameterMap.getKeyedInteger(qualifiers, "timeout", agentConfig.getTimeout());
                    agentConfig.setTimeout(timeout);
                }
                
                // "retry" parm
                //
                if (qualifiers.get("retry") != null) {
                    int retry = ParameterMap.getKeyedInteger(qualifiers, "retry", agentConfig.getRetries());
                    agentConfig.setRetries(retry);
                }
                
                // "force version" parm
                //
                if (qualifiers.get("force version") != null) {
                    String version = (String) qualifiers.get("force version");
                    if (version.equalsIgnoreCase("snmpv1"))
                        agentConfig.setVersion(SnmpAgentConfig.VERSION1);
                    else if (version.equalsIgnoreCase("snmpv2") || version.equalsIgnoreCase("snmpv2c"))
                        agentConfig.setVersion(SnmpAgentConfig.VERSION2C);
                    
                    //TODO: make sure JoeSnmpStrategy correctly handles this.
                    else if (version.equalsIgnoreCase("snmpv3"))
                        agentConfig.setVersion(SnmpAgentConfig.VERSION3);
                }
                
                // "vbvalue" parm
                //
                if (qualifiers.get("vbvalue") != null) {
                    expectedValue = (String) qualifiers.get("vbvalue");
                }
                
                if(qualifiers.get("table") != null) {
                	isTable = (String) qualifiers.get("table");
                }
            }
            
            if (isTable != null && isTable.equalsIgnoreCase("true")) {
            	
            	 SnmpObjId snmpObjId = SnmpObjId.get(oid);
            	
            	  Map<SnmpInstId, SnmpValue> table = SnmpUtils.getOidValues(agentConfig, "SnmpPlugin", snmpObjId);
            	  for (Map.Entry<SnmpInstId, SnmpValue> e : table.entrySet()) { 
                      if (e.getValue().toString().equals(expectedValue)) {	
                      	return true;
                      }    
                  }
            }
            
            else { 
            	String retrievedValue = getValue(agentConfig, oid);
            
            	if (retrievedValue != null && expectedValue != null) {
            		return (Pattern.compile(expectedValue).matcher(retrievedValue).find());
            	} else {
            		return (retrievedValue != null);
                
                //return (expectedValue == null ? true : retrievedValue.equals(expectedValue));
            	}
            
            }
            
        } catch (Throwable t) {
            throw new UndeclaredThrowableException(t);
        }
        
        // should never get here.
        return false;
        
    }

