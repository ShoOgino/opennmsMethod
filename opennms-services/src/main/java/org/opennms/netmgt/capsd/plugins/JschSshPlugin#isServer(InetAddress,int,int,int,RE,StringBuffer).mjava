    /**
     * <P>
     * Test to see if the passed host-port pair is the endpoint for a TCP
     * server. If there is a TCP server at that destination then a value of true
     * is returned from the method. Otherwise a false value is returned to the
     * caller. In order to return true the remote host must generate a banner
     * line which contains the text from the bannerMatch argument.
     * </P>
     * 
     * @param host
     *            The remote host to connect to.
     * @param port
     *            The remote port on the host.
     * @param bannerResult
     *            Banner line generated by the remote host must contain this
     *            text.
     * 
     * @return True if a connection is established with the host and the banner
     *         line contains the bannerMatch text.
     */
    private boolean isServer(InetAddress host, int port, int retries, int timeout, RE regex, StringBuffer bannerResult) {
        Category log = ThreadCategory.getInstance(getClass());
        SSH ssh = new SSH();

        boolean isAServer = false;
        for (int attempts = 0; attempts <= retries && !isAServer; attempts++) {
            isAServer = ssh.exists(host, port, timeout);
            
            // If banner matching string is null or wildcard ("*") then we
            // only need to test connectivity and we've got that!
            //
            if (regex == null) {
                isAServer = true;
            } else {
                String response = ssh.getServerVersion();
                
                if (regex.match(response)) {
                    if (log.isDebugEnabled()) {
                        log.debug("isServer: matching response=" + response);
                    }
                    isAServer = true;

                    if (bannerResult != null) {
                        bannerResult.append(response);
                    }
                } else {
                    // Got a response but it didn't match... no need to attempt retries
                    isAServer = false;
                    if (log.isDebugEnabled()) {
                        log.debug("isServer: NON-matching response=" + response);
                    }
                    break;
                }
            }
        }
            
        //
        // return the success/failure of this
        // attempt to contact an SSH server.
        //
        return isAServer;
    }

