    /**
     * Helper method used to create add an interface to a node.
     * 
     * @param dbConn
     * @param nodeLabel
     * @param ipaddr
     * @return a LinkedList of events to be sent
     * @throws SQLException
     * @throws FailedOperationException
     */
    private List<Event> createInterfaceOnNode(Connection dbConn, String nodeLabel, String ipaddr) throws SQLException, FailedOperationException {
        PreparedStatement stmt = null;
        ResultSet rs = null;
        final DBUtils d = new DBUtils(getClass());
        try {
            // There is no ipinterface associated with the specified nodeLabel
            // exist in the database. Verify if a node with the nodeLabel already
            // exist in the database. If not, create a node with the nodeLabel and add it
            // to the database, and also add the ipaddress associated with this node to
            // the database. If the node with the nodeLabel exists in the node
            // table, just add the ip address to the database.
            stmt = dbConn.prepareStatement(SQL_QUERY_NODE_EXIST);
            d.watch(stmt);

            stmt.setString(1, nodeLabel);

            rs = stmt.executeQuery();
            d.watch(rs);
            List<Event> eventsToSend = new LinkedList<Event>();
            while (rs.next()) {

                LOG.debug("addInterfaceHandler:  add interface: {} to the database.", ipaddr);

                // Node already exists. Add the ipaddess to the ipinterface
                // table
                InetAddress ifaddr;
				try {
					ifaddr = InetAddressUtils.addr(ipaddr);
				} catch (final IllegalArgumentException e) {
					throw new FailedOperationException("unable to resolve host " + ipaddr + ": " + e.getMessage(), e);
				}
                int nodeId = rs.getInt(1);
                String dpName = rs.getString(2);

                DbIpInterfaceEntry ipInterface = DbIpInterfaceEntry.create(nodeId, ifaddr);
                ipInterface.setHostname(ifaddr.getHostName());
                ipInterface.setManagedState(DbIpInterfaceEntry.STATE_MANAGED);
                ipInterface.setPrimaryState(DbIpInterfaceEntry.SNMP_NOT_ELIGIBLE);
                ipInterface.store(dbConn);

                // create a nodeEntry
                DbNodeEntry nodeEntry = DbNodeEntry.get(nodeId, dpName);
                Event newEvent = EventUtils.createNodeGainedInterfaceEvent(nodeEntry, ifaddr);
                eventsToSend.add(newEvent);

            }
            return eventsToSend;
        } finally {
            d.cleanUp();
        }        
    }

