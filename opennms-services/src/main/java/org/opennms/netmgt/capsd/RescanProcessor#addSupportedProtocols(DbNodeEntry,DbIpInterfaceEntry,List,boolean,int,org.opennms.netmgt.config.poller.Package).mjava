    /**
     * Responsible for iterating inserting an entry into the ifServices table
     * for each protocol supported by the interface.
     * 
     * @param node
     *            Node entry
     * @param ipIfEntry
     *            DbIpInterfaceEntry object
     * @param protocols
     *            List of supported protocols
     * @param addrUnmanaged
     *            Boolean flag indicating if interface is managed or unmanaged
     *            according to the Capsd configuration.
     * @param ifIndex
     *            Interface index or -1 if index is not known
     * @param ipPkg
     *            Poller package to which the interface belongs
     * 
     * @throws SQLException
     *             if an error occurs adding interfaces to the ipInterface
     *             table.
     */
    private void addSupportedProtocols(DbNodeEntry node, DbIpInterfaceEntry ipIfEntry, List protocols, boolean addrUnmanaged, int ifIndex, org.opennms.netmgt.config.poller.Package ipPkg) throws SQLException {
        Category log = ThreadCategory.getInstance(getClass());
        InetAddress ifaddr = ipIfEntry.getIfAddress();
        if (ifaddr.getHostAddress().equals("0.0.0.0")) {
            if (log.isDebugEnabled()) {
                log.debug("addSupportedProtocols: node " + node.getNodeId() + ": Cant add ip services for non-ip interface. Just return.");
            }
            return;
        } 

        // add the supported protocols
        Iterator iproto = protocols.iterator();
        while (iproto.hasNext()) {
            IfCollector.SupportedProtocol p = (IfCollector.SupportedProtocol) iproto.next();
            Number sid = (Number) CapsdConfigFactory.getInstance().getServiceIdentifier(p.getProtocolName());

            DbIfServiceEntry ifSvcEntry = DbIfServiceEntry.create(node.getNodeId(), ifaddr, sid.intValue());

            // now fill in the entry
            if (addrUnmanaged) {
                ifSvcEntry.setStatus(DbIfServiceEntry.STATUS_UNMANAGED);
            } else {
                boolean svcToBePolled = false;
                if (ipPkg != null) {
                    svcToBePolled = PollerConfigFactory.getInstance().isPolled(p.getProtocolName(), ipPkg);
                    if (!svcToBePolled) {
                        svcToBePolled = PollerConfigFactory.getInstance().isPolled(ifaddr.getHostAddress(), p.getProtocolName());
                    }
                }

                if (svcToBePolled) {
                    ifSvcEntry.setStatus(DbIfServiceEntry.STATUS_ACTIVE);
                } else {
                    ifSvcEntry.setStatus(DbIfServiceEntry.STATUS_NOT_POLLED);
                    log.debug("addSupportedProtocols: node " + node.getNodeId() + ": Setting status to NOT_POLLED");
		}  
            }

            /*
             * Set qualifier if available. Currently the qualifier field
             * is used to store the port at which the protocol was found.
             */
            if (p.getQualifiers() != null && p.getQualifiers().get("port") != null) {
                try {
                    Integer port = (Integer) p.getQualifiers().get("port");
                    ifSvcEntry.setQualifier(port.toString());
                } catch (ClassCastException ccE) {
                    // Do nothing
                }
            }

            ifSvcEntry.setSource(DbIfServiceEntry.SOURCE_PLUGIN);
            ifSvcEntry.setNotify(DbIfServiceEntry.NOTIFY_ON);
            if (ifIndex != -1) {
                ifSvcEntry.setIfIndex(ifIndex);
            }
            ifSvcEntry.store();
        }
    }

