    /** {@inheritDoc} */
    @Override
    public boolean isProtocolSupported(final InetAddress address, final Map<String, Object> map) {
        boolean retval=false;
        
        final HttpClientWrapper clientWrapper = HttpClientWrapper.create();

        try {
            final URIBuilder ub = new URIBuilder();
            ub.setScheme(ParameterMap.getKeyedString(map, "scheme", DEFAULT_SCHEME));
            ub.setHost(InetAddressUtils.str(address));
            ub.setPort(ParameterMap.getKeyedInteger(map, "port", DEFAULT_PORT));
            ub.setPath( ParameterMap.getKeyedString(map, "path", DEFAULT_PATH));
            final HttpGet getMethod = new HttpGet(ub.build());

            clientWrapper.setConnectionTimeout(ParameterMap.getKeyedInteger(map,"timeout", DEFAULT_TIMEOUT))
                    .setSocketTimeout(ParameterMap.getKeyedInteger(map,"timeout", DEFAULT_TIMEOUT))
                    .setUserAgent(ParameterMap.getKeyedString(map,"user-agent",DEFAULT_USER_AGENT))
                    .setVirtualHost(ParameterMap.getKeyedString(map,"virtual-host", InetAddressUtils.str(address)));

            if(ParameterMap.getKeyedBoolean(map, "http-1.0", false)) {
                getMethod.setProtocolVersion(HttpVersion.HTTP_1_0);
            }

            for(final Object okey : map.keySet()) {
                final String key = okey.toString();
                if(key.matches("header_[0-9]+$")){
                    String headerName  = ParameterMap.getKeyedString(map,key,null);
                    String headerValue = ParameterMap.getKeyedString(map,key + "_value",null);
                    getMethod.setHeader(headerName, headerValue);
                }
            }

            if(ParameterMap.getKeyedBoolean(map,"auth-enabled",false)){
                clientWrapper.addBasicCredentials(ParameterMap.getKeyedString(map, "auth-user", DEFAULT_USER), ParameterMap.getKeyedString(map, "auth-password", DEFAULT_PASSWORD));
                if (ParameterMap.getKeyedBoolean(map, "auth-preemptive", true)) {
                    clientWrapper.usePreemptiveAuth();
                }
            }

            final CloseableHttpResponse response = clientWrapper.execute(getMethod);
            final Integer statusCode = response.getStatusLine().getStatusCode();

            final String expectedText = ParameterMap.getKeyedString(map,"response-text",null);

            if(!inRange(ParameterMap.getKeyedString(map, "response-range", DEFAULT_HTTP_STATUS_RANGE),statusCode)){
                retval=false;
            }
            else {
                retval=true;
            }

            if (expectedText!=null) {
                String responseText = EntityUtils.toString(response.getEntity());
                if(expectedText.charAt(0)=='~'){
                    if(!responseText.matches(expectedText.substring(1)))
                        retval=false;
                    else 
                        retval=true;                
                }
                else {

                    if(responseText.equals(expectedText)){
                        retval=true;
                    }
                    else
                        retval=false;
                }


            }

        } catch (final IOException e) {
            LOG.info(e.getMessage(), e);
            retval = false;
        } catch (final URISyntaxException e) {
            LOG.info(e.getMessage(), e);
            retval = false;
        } finally {
            IOUtils.closeQuietly(clientWrapper);
        }

        return retval;
    }

