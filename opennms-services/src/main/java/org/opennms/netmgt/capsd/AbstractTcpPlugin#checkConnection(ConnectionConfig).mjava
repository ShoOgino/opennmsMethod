    /**
     * <P>
     * Test to see if the passed host-port pair is the endpoint for an Citrix
     * server. If there is an Citrix server at that destination then a value of
     * true is returned from the method. Otherwise a false value is returned to
     * the caller.
     * </P>
     *
     * @param config a {@link org.opennms.netmgt.capsd.ConnectionConfig} object.
     * @return True if server supports Citrix on the specified port, false
     *         otherwise
     */
    final protected boolean checkConnection(ConnectionConfig config) {
        // get a log to send errors
        //
        // don't let the user set the timeout to 0, an infinite loop will occur
        // if the server is down
        int timeout = (config.getTimeout() == 0 ? 10 : config.getTimeout());

        boolean isAServer = false;
        for (int attempts = 0; attempts <= config.getRetry() && !isAServer; attempts++) {

            if (!preconnectCheck(config)) {
                // No chance of supporting this protocol just bail
                break;
            }

            Socket socket = null;
            try {

                // create a connected socket
                //
                socket = new Socket();
                socket.connect(config.getSocketAddress(), timeout);
                socket.setSoTimeout(timeout);
                LOG.debug("{}: connected to host: {} on port: {}", getPluginName(), config.getInetAddress(), config.getPort());

                socket = getSocketWrapper().wrapSocket(socket);

                isAServer = checkProtocol(socket, config);

            } catch (ConnectException cE) {
                // Connection refused!! Continue to retry.
                //
                LOG.debug("{}: connection refused to {}:{}", getPluginName(), config.getInetAddress(), config.getPort());
                isAServer = false;
            } catch (NoRouteToHostException e) {
                // No route to host!! No need to perform retries.
                e.fillInStackTrace();
                LOG.info("{}: Unable to test host {}, no route available", getPluginName(), config.getInetAddress(), e);
                isAServer = false;
                throw new UndeclaredThrowableException(e);
            } catch (InterruptedIOException e) {
                LOG.debug("{}: did not connect to host within timeout: {} attempt: {}", getPluginName(), timeout, attempts);
                isAServer = false;
            } catch (IOException e) {
                LOG.info("{}: Error communicating with host {}", getPluginName(), config.getInetAddress(), e);
                isAServer = false;
            } catch (Throwable t) {
                LOG.warn("{}: Undeclared throwable exception caught contacting host {}", getPluginName(), config.getInetAddress(), t);
                isAServer = false;
            } finally {
                if (socket != null)
                    closeSocket(socket, config);
            }
        }

        //
        // return the success/failure of this
        // attempt to contact the server.
        //
        return isAServer;
    }

