    private boolean addIfTableSnmpInterfaces(Connection dbc, InetAddress ifaddr,
            int nodeId, IfCollector collector)
            throws SQLException {
        if (!collector.hasSnmpCollection()) {
            return false;
        }
        
        IfSnmpCollector snmpc = collector.getSnmpCollector();

        if (!snmpc.hasIfTable()) {
            return false;
        }

        boolean addedSnmpInterfaceEntry = false;

        for (IfTableEntry ifte : snmpc.getIfTable().getEntries()) {
            // index
            if (ifte.getIfIndex() == null) {
                continue;
            }
            final int xifIndex = ifte.getIfIndex().intValue();

            /*
             * address WARNING: IfSnmpCollector.getIfAddressAndMask() ONLY
             * returns the FIRST IP address and mask for a given interface as
             * specified in the ipAddrTable.
             */
            InetAddress[] aaddrs = null;
            if (snmpc.hasIpAddrTable()) {
                aaddrs = snmpc.getIfAddressAndMask(xifIndex);
            }

            // At some point back in the day this was done with ifType
            // Skip loopback interfaces
            if (aaddrs != null && aaddrs[0].getHostAddress().startsWith("127.")) {
                continue;
            }

            final DbSnmpInterfaceEntry snmpEntry =
                DbSnmpInterfaceEntry.create(nodeId, xifIndex);

            if (aaddrs == null) {
                // No IP associeated with the interface
                snmpEntry.setCollect("N");

            } else {
                // IP address
                snmpEntry.setIfAddress(aaddrs[0]);
                if (aaddrs[0].equals(ifaddr)) {
                    addedSnmpInterfaceEntry = true;
                }

                // netmask
                if (aaddrs[1] != null) {
                    snmpEntry.setNetmask(aaddrs[1]);
                }
                
                snmpEntry.setCollect("C");
            }

            // description
            final String str = ifte.getIfDescr();
            if (log().isDebugEnabled()) {
                log().debug("SuspectEventProcessor: "
                        + aaddrs[0].getHostAddress() + " has ifDescription: "
                        + str);
            }
            if (str != null && str.length() > 0) {
                snmpEntry.setDescription(str);
            }

            // physical address
            String physAddr = null;
            try {
                physAddr = ifte.getPhysAddr();
                if (log().isDebugEnabled()) {
                    log().debug("SuspectEventProcessor: "
                            + aaddrs[0].getHostAddress()
                            + " has physical address: -" + physAddr + "-");
                }
            } catch (IllegalArgumentException iae) {
                physAddr = null;
                if (log().isDebugEnabled()) {
                    log().debug("ifPhysAddress." + ifte.getIfIndex() + " on node "
                               + nodeId + " / " + aaddrs[0].getHostAddress()
                               + " could not be converted to a hex string (not a PhysAddr / OCTET STRING?), setting to null.");
                }
                StringBuffer errMsg = new StringBuffer("SNMP agent bug on node ");
                errMsg.append(nodeId).append(" / ").append(ifaddr.getHostAddress());
                errMsg.append(": wrong type for physical address (see bug 2740). ");
                errMsg.append("Working around, but expect trouble with this node.");
                log().warn(errMsg.toString());
            }
            if (physAddr != null && physAddr.length() == 12) {
                snmpEntry.setPhysicalAddress(physAddr);
            }

            if (ifte.getIfType() == null) {
                snmpEntry.setType(0);
            } else {
                snmpEntry.setType(ifte.getIfType().intValue());
            }

            // speed
            if (ifte.getIfSpeed() == null) {
                snmpEntry.setSpeed(0);
            } else {
                snmpEntry.setSpeed(ifte.getIfSpeed().longValue());
            }

            // admin status
            if (ifte.getIfAdminStatus() == null) {
                snmpEntry.setAdminStatus(0);
            } else {
                snmpEntry.setAdminStatus(ifte.getIfAdminStatus().intValue());
            }

            // oper status
            if (ifte.getIfOperStatus() == null) {
                snmpEntry.setOperationalStatus(0);
            } else {
                snmpEntry.setOperationalStatus(ifte.getIfOperStatus().intValue());
            }

            // name (from interface extensions table)
            String ifName = snmpc.getIfName(xifIndex);
            if (ifName != null && ifName.length() > 0) {
                snmpEntry.setName(ifName);
            }

            // alias (from interface extensions table)
            final String ifAlias = snmpc.getIfAlias(xifIndex);
            if (ifAlias != null && ifAlias.length() > 0) {
                snmpEntry.setAlias(ifAlias);
            }

            snmpEntry.store(dbc);
        }
        return addedSnmpInterfaceEntry;
    }

