    /**
     * Builds a list of InetAddress objects representing each of the
     * interfaces from the IfCollector object which support SNMP and have a
     * valid ifIndex and is a loopback interface. This is in order to allow a
     * non-127.*.*.* loopback address to be chosen as the primary SNMP
     * interface.
     * 
     * @param collector
     *            IfCollector object containing SNMP and SMB info.
     * @return List of InetAddress objects.
     */
    private List<InetAddress> buildLBSnmpAddressList(IfCollector collector) {
        List<InetAddress> addresses = new ArrayList<InetAddress>();

        // Verify that SNMP info is available
        if (collector.getSnmpCollector() == null) {
            if (LOG.isDebugEnabled())
                LOG.debug("buildLBSnmpAddressList: no SNMP info for " + collector.getTarget());
            return addresses;
        }

        // Verify that both the ifTable and ipAddrTable were
        // successfully collected.
        IfSnmpCollector snmpc = collector.getSnmpCollector();
        if (!snmpc.hasIfTable() || !snmpc.hasIpAddrTable()) {
            LOG.info("buildLBSnmpAddressList: missing SNMP info for " + collector.getTarget());
            return addresses;
        }

        // To be eligible to be the primary SNMP interface for a node:
        //
        // 1. The interface must support SNMP
        // 2. The interface must have a valid ifIndex
        //

        // Add eligible target.
        //
        InetAddress ipAddr = collector.getTarget();
        if (supportsSnmp(collector.getSupportedProtocols())
                && hasIfIndex(ipAddr, snmpc)
                && getIfType(ipAddr, snmpc) == 24) {
            if (LOG.isDebugEnabled())
                LOG.debug("buildLBSnmpAddressList: adding target interface " + str(ipAddr) + " temporarily marked as primary!");
            addresses.add(ipAddr);
        }

        // Add eligible subtargets.
        //
        if (collector.hasAdditionalTargets()) {
            Map<InetAddress, List<SupportedProtocol>> extraTargets = collector.getAdditionalTargets();
            for(InetAddress currIf : extraTargets.keySet()) {
                // Test current subtarget.
                // 
                if (supportsSnmp(extraTargets.get(currIf))
                        && getIfType(currIf, snmpc) == 24) {
                    if (LOG.isDebugEnabled())
                        LOG.debug("buildLBSnmpAddressList: adding subtarget interface " + str(currIf) + " temporarily marked as primary!");
                    addresses.add(currIf);
                }
            } // end while()
        } // end if()

        return addresses;
    }

