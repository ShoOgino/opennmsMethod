    /**
     * Returns the list of protocol plugins and the associated actions for the
     * named address. The currently loaded configuration is used to find, build,
     * and return the protocol information. The returns information has all the
     * necessary element to check the address for capabilities.
     *
     * @param address
     *            The address to get protocol information for.
     * @return The array of protocol information instances for the address.
     */
    public CapsdProtocolInfo[] getProtocolSpecification(InetAddress address) {
        /*
         * The list of protocols that will be turned into
         * and array and returned to the caller. These are
         * of type ProtocolInfo
         */
        List<CapsdProtocolInfo> lprotos = new ArrayList<CapsdProtocolInfo>(getCapsdConfig().getConfiguration().getProtocolPluginCount());
    
        // go through all the defined plugins
        List<ProtocolPlugin> plugins = getCapsdConfig().getProtocolPlugins();
        Iterator<ProtocolPlugin> pluginIter = plugins.iterator();
        PLUGINLOOP: while (pluginIter.hasNext()) {
            ProtocolPlugin plugin = pluginIter.next();
            boolean found = false;
    
            /*
             * Loop through the specific and ranges to find out
             * if there is a particular protocol specification
             */
            for (ProtocolConfiguration pluginConf : getCapsdConfig().getProtocolConfigurations(plugin)) {
                // Check specifics first
                List<String> saddrs = getCapsdConfig().getSpecifics(pluginConf);
                Iterator<String> saddrIter = saddrs.iterator();
                while (saddrIter.hasNext() && !found) {
                    String saddr = saddrIter.next();
                    try {
                        InetAddress taddr = InetAddress.getByName(saddr);
                        if (taddr.equals(address)) {
                            found = true;
                        }
                    } catch (UnknownHostException e) {
                        log().warn("CapsdConfigFactory: failed to convert address " + saddr + " to InetAddress: " + e, e);
                    }
                }
    
                // check the ranges
                List<Range> ranges = getCapsdConfig().getRanges(pluginConf);
                Iterator<Range> rangeIter = ranges.iterator();
                while (rangeIter.hasNext() && !found) {
                    Range rng = rangeIter.next();
    
                    InetAddress start = null;
                    try {
                        start = InetAddress.getByName(rng.getBegin());
                    } catch (UnknownHostException e) {
                        log().warn("CapsdConfigFactory: failed to convert address " + rng.getBegin() + " to InetAddress", e);
                        continue;
                    }
    
                    InetAddress stop = null;
                    try {
                        stop = InetAddress.getByName(rng.getEnd());
                    } catch (UnknownHostException e) {
                        log().warn("CapsdConfigFactory: failed to convert address " + rng.getEnd() + " to InetAddress", e);
                        continue;
                    }
    
                    if (InetAddressUtils.isInetAddressInRange(address.getAddress(), start.getAddress(), stop.getAddress())) {
                        found = true;
                    }
                }
    
                /*
                 * if it has not be found yet then it's not
                 * in this particular plugin conf, check the
                 * next
                 */
                if (!found) {
                    continue;
                }
    
                /* 
                 * if found then build protocol
                 * specification if on, else next protocol.
                 */
                String scan = null;
                if ((scan = pluginConf.getScan()) != null) {
                    if (scan.equals("enable")) {
                        lprotos.add(new CapsdProtocolInfo(plugin.getProtocol(), m_pluginsByProtocol.get(plugin.getProtocol()), null, Action.AUTO_SET));
                        continue PLUGINLOOP;
                    } else if (scan.equals("off")) {
                        continue PLUGINLOOP;
                    }
                } else if ((scan = plugin.getScan()) != null) {
                    if (scan.equals("off")) {
                        continue PLUGINLOOP;
                    }
                }
    
                // it's either on specifically, or by default
                // so map it parameters
                Map<String, Object> params = new TreeMap<String, Object>();
    
                // add the plugin defaults first, then specifics
                addProperties(getCapsdConfig().getPluginProperties(plugin), params);
                addProperties(getCapsdConfig().getProtocolConfigurationProperties(pluginConf), params);
    
                lprotos.add(new CapsdProtocolInfo(plugin.getProtocol(), m_pluginsByProtocol.get(plugin.getProtocol()), params, Action.SCAN));
            } // end ProtocolConfiguration loop
    
            // use default config if not found
            if (!found) {
                // if found then build protocol
                // specification if on, else next protocol.
                if ("off".equals(plugin.getScan())) {
                    continue PLUGINLOOP;
                }
    
                // it's either on specifically, or by default
                // so map it parameters
                Map<String, Object> params = new TreeMap<String, Object>();
                addProperties(getCapsdConfig().getPluginProperties(plugin), params);
    
                lprotos.add(new CapsdProtocolInfo(plugin.getProtocol(), m_pluginsByProtocol.get(plugin.getProtocol()), params, Action.SCAN));
            }
    
        } // end ProtocolPlugin
    
        /*
         * copy the protocol information to
         * the approriate array and return that
         * result
         */
        CapsdProtocolInfo[] result = new CapsdProtocolInfo[lprotos.size()];
    
        return lprotos.toArray(result);
    }

