    /**
     * <P>
     * Test to see if the passed host-port pair is the endpoint for a TCP
     * server. If there is a TCP server at that destination then a value of true
     * is returned from the method. Otherwise a false value is returned to the
     * caller. In order to return true the remote host must generate a banner
     * line which contains the text from the bannerMatch argument.
     * </P>
     *
     * @param host
     *            The remote host to connect to.
     * @param port
     *            The remote port on the host.
     * @param bannerResult
     *            Banner line generated by the remote host must contain this
     *            text.
     *
     * @return True if a connection is established with the host and the banner
     *         line contains the bannerMatch text.
     */
    private boolean isServer(InetAddress host, int port, String command, int padding, int retries, int timeout, Pattern regex, StringBuffer bannerResult) {
        boolean isAServer = false;
        for (int attempts = 0; attempts <= retries && !isAServer; attempts++) {
            Socket socket = null;
            try {
                // create a connected socket
                //
                socket = new Socket();
                socket.connect(new InetSocketAddress(host, port), timeout);
                socket = wrapSocket(socket, host.toString(), port);
                socket.setSoTimeout(timeout);
                LOG.debug("NrpePlugin: connected to host: {} on port: {}", host, port);

                NrpePacket p = new NrpePacket(NrpePacket.QUERY_PACKET, (short) 0, command);
                byte[] b = p.buildPacket(padding);
                OutputStream o = socket.getOutputStream();
                o.write(b);

                NrpePacket response = NrpePacket.receivePacket(socket.getInputStream(), padding);
                if (response.getResultCode() == 0) {
                    isAServer = true;
                } else if (response.getResultCode() <= 2) {
                    String response_msg = response.getBuffer();
                    Pattern r = Pattern.compile("OK|WARNING|CRITICAL");
                    if (r.matcher(response_msg).find()) {
                        isAServer = true;
                    } else {
                        LOG.info("received 1-2 return code, {}, with message: {}", response.getResultCode(), response.getBuffer());
                        isAServer = false;
                        break;
						}
                } else {
                    LOG.info("received 3+ return code, {}, with message: {}", response.getResultCode(), response.getBuffer());
                    isAServer = false;
                    break;
                }

                /*
                // If banner matching string is null or wildcard ("*") then we
                // only need to test connectivity and we've got that!
                //
                if (regex == null) {
                    isAServer = true;
                } else {
                    // get a line reader
                    //
                    BufferedReader lineRdr = new BufferedReader(new InputStreamReader(socket.getInputStream()));

                    // Read the server's banner line ouptput and validate it
                    // against
                    // the bannerMatch parameter to determine if this interface
                    // supports the
                    // service.
                    //
                    String response = lineRdr.readLine();
                    if (regex.match(response)) {
                        if (log.isDebugEnabled())
                            log.debug("isServer: matching response=" + response);
                        isAServer = true;
                        if (bannerResult != null)
                            bannerResult.append(response);
                    } else {
                        // Got a response but it didn't match...no need to
                        // attempt retries
                        isAServer = false;
                        if (log.isDebugEnabled())
                            log.debug("isServer: NON-matching response=" + response);
                        break;
                    }
                }
                */
            } catch (ConnectException e) {
                // Connection refused!! Continue to retry.
                //
                LOG.debug("NrpePlugin: Connection refused to {}:{}", InetAddressUtils.str(host), port);
                isAServer = false;
            } catch (NoRouteToHostException e) {
                // No Route to host!!!
                //
                e.fillInStackTrace();
                LOG.info("NrpePlugin: Could not connect to host {}, no route to host", InetAddressUtils.str(host), e);
                isAServer = false;
                throw new UndeclaredThrowableException(e);
            } catch (InterruptedIOException e) {
                // This is an expected exception
                //
                LOG.debug("NrpePlugin: did not connect to host within timeout: {} attempt: {}", timeout, attempts);
                isAServer = false;
            } catch (IOException e) {
                LOG.info("NrpePlugin: An expected I/O exception occured connecting to host {} on port {}", InetAddressUtils.str(host), port, e);
                isAServer = false;
            } catch (Throwable t) {
                isAServer = false;
                LOG.warn("NrpePlugin: An undeclared throwable exception was caught connecting to host {} on port {}", InetAddressUtils.str(host), port, t);
            } finally {
                try {
                    if (socket != null) {
                        socket.close();
                    }
                } catch (IOException e) {
                }
            }
        }

        //
        // return the success/failure of this
        // attempt to contact an ftp server.
        //
        return isAServer;
    }

