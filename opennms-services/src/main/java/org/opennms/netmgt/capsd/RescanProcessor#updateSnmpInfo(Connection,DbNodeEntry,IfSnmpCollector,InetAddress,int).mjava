    /**
     * This method is responsible for updating the snmpInterface table entry for
     * a specific interface.
     * 
     * @param dbc
     *            Database Connection
     * @param node
     *            Node entry for the node being rescanned
     * @param dbIpIfEntry
     *            interface entry of the updating interface
     * @param snmpc
     *            SNMP collector or null if SNMP not supported.
     * 
     * @throws SQLException
     *             if there is a problem updating the snmpInterface table.
     */
    private void updateSnmpInfo(Connection dbc, DbNodeEntry node,
            IfSnmpCollector snmpc, InetAddress ifaddr, int ifIndex)
    throws SQLException {
        /*
         * If SNMP info is available update the snmpInterface table entry with
         * anything that has changed.
         */		
        if (snmpc != null && !snmpc.failed() && ifIndex != -1) {
            if (log().isDebugEnabled()) {
                log().debug("updateSnmpInfo: updating snmp interface for "
                          + "nodeId/ifIndex="
                          + node.getNodeId() + "/" + ifIndex);
            }

            // Create and load SNMP Interface entry from the database
            boolean newSnmpIfTableEntry = false;
            DbSnmpInterfaceEntry dbSnmpIfEntry = 
                DbSnmpInterfaceEntry.get(dbc, node.getNodeId(), ifIndex);
            if (dbSnmpIfEntry == null) {
                /*
                 * SNMP Interface not found with this nodeId, create new
                 * interface
                 */
                if (log().isDebugEnabled()) {
                    log().debug("updateSnmpInfo: SNMP interface index " + ifIndex
                              + " not in database, creating new interface "
                              + "object.");
                }
                dbSnmpIfEntry = DbSnmpInterfaceEntry.create(node.getNodeId(),
                                                            ifIndex);
                newSnmpIfTableEntry = true;
            }

            /*
             * Create SNMP interface entry representing latest information
             * retrieved for the interface via the collector
             */
            DbSnmpInterfaceEntry currSnmpIfEntry =
                DbSnmpInterfaceEntry.create(node.getNodeId(), ifIndex);

            // Find the ifTable entry for this interface
            IfTable ift = snmpc.getIfTable();
            Iterator<IfTableEntry> ifiter = ift.getEntries().iterator();
            IfTableEntry ifte = null;
            while (ifiter.hasNext()) {
                ifte = ifiter.next();

                // index
                Integer sint = ifte.getIfIndex();
                if (sint != null) {
                    if (ifIndex == sint.intValue()) {
                        break;
                    } else {
                        ifte = null;
                    }
                }
            }

            // Make sure we have a valid IfTableEntry object
            if (ifte == null
                    && ifIndex == CapsdConfig.LAME_SNMP_HOST_IFINDEX) {
                 if (log().isDebugEnabled()) {
                    log().debug("updateSnmpInfo: interface "
                              + snmpc.getCollectorTargetAddress().getHostAddress()
                              + " appears to be a lame SNMP host");
                 }
            } else if (ifte != null) {
                /*
                 * IP address and netmask
                 *
                 * WARNING: IfSnmpCollector.getIfAddressAndMask() ONLY returns
                 * the FIRST IP address and mask for a given interface as
                 * specified in the ipAddrTable.
                 */
                InetAddress[] aaddrs = snmpc.getIfAddressAndMask(ifIndex);


                if (aaddrs == null) {
                    // disable collection on interface with no ip address by default
                    currSnmpIfEntry.setCollect("N");
                } else {
                    // mark the interface is collection enable
                    currSnmpIfEntry.setCollect("C");

                    // netmask
                    if (aaddrs[1] != null) {
                        if (log().isDebugEnabled()) {
                            log().debug("updateSnmpInfo: interface "
                                        + aaddrs[0].getHostAddress()
                                        + " has netmask: "
                                        + aaddrs[1].getHostAddress());
                        }
                        currSnmpIfEntry.setNetmask(aaddrs[1]);
                    }
                    
                } 

                // type
                Integer sint = ifte.getIfType();
                currSnmpIfEntry.setType(sint.intValue());

                // description
                String str = ifte.getIfDescr();
                if (log().isDebugEnabled()) {
                    log().debug("updateSnmpInfo: " + ifaddr
                              + " has ifDescription: " + str);
                }
                if (str != null && str.length() > 0) {
                    currSnmpIfEntry.setDescription(str);
                }

                String physAddr = ifte.getPhysAddr();

                if (log().isDebugEnabled()) {
                    log().debug("updateSnmpInfo: " + ifaddr
                              + " has phys address: -" + physAddr + "-");
                }

                if (physAddr != null && physAddr.length() == 12) {
                    currSnmpIfEntry.setPhysicalAddress(physAddr);
                }

                // speed
                Long speed = snmpc.getInterfaceSpeed(ifIndex);

                //set the default speed to 10MB if not retrievable.
                currSnmpIfEntry.setSpeed((speed == null
                        ? 10000000L : speed.longValue())); 

                // admin status
                sint = ifte.getIfAdminStatus();
                currSnmpIfEntry.setAdminStatus(sint == null ? 0 : sint.intValue());

                // oper status
                sint = ifte.getIfOperStatus();
                currSnmpIfEntry.setOperationalStatus(sint == null ? 0 : sint.intValue());

                // name (from interface extensions table)
                String ifName = snmpc.getIfName(ifIndex);
                if (ifName != null && ifName.length() > 0) {
                    currSnmpIfEntry.setName(ifName);
                }

                // alias (from interface extensions table)
                String ifAlias = snmpc.getIfAlias(ifIndex);
                if (ifAlias != null) {
                    currSnmpIfEntry.setAlias(ifAlias);
                } else {
                    currSnmpIfEntry.setAlias("");
                }		    

            } // end if valid ifTable entry

            // Update any fields which have changed
            // dbSnmpIfEntry.updateIfIndex(currSnmpIfEntry.getIfIndex());
            dbSnmpIfEntry.updateNetmask(currSnmpIfEntry.getNetmask());
            dbSnmpIfEntry.updatePhysicalAddress(currSnmpIfEntry.getPhysicalAddress());
            dbSnmpIfEntry.updateDescription(currSnmpIfEntry.getDescription());
            dbSnmpIfEntry.updateName(currSnmpIfEntry.getName());
            dbSnmpIfEntry.updateType(currSnmpIfEntry.getType());
            dbSnmpIfEntry.updateSpeed(currSnmpIfEntry.getSpeed());
            dbSnmpIfEntry.updateAdminStatus(currSnmpIfEntry.getAdminStatus());
            dbSnmpIfEntry.updateOperationalStatus(currSnmpIfEntry.getOperationalStatus());
            dbSnmpIfEntry.updateAlias(currSnmpIfEntry.getAlias());
            dbSnmpIfEntry.updateCollect(currSnmpIfEntry.getCollect());

            /*
             * If this is a new interface or if any of the following
             * key fields have changed set the m_snmpIfTableChangedFlag
             * variable to TRUE. This will potentially trigger an event
             * which will cause the poller to reinitialize the primary
             * SNMP interface for the node.
             */
            // dbSnmpIfEntry.hasIfIndexChanged() ||
            if (!m_snmpIfTableChangedFlag && newSnmpIfTableEntry
                    || dbSnmpIfEntry.hasTypeChanged()
                    || dbSnmpIfEntry.hasNameChanged()
                    || dbSnmpIfEntry.hasDescriptionChanged()
                    || dbSnmpIfEntry.hasPhysicalAddressChanged()
                    || dbSnmpIfEntry.hasAliasChanged()) {
                m_snmpIfTableChangedFlag = true;
            }

            // Update the database
            dbSnmpIfEntry.store(dbc);

            // end if complete snmp info available
        } else if (snmpc != null && snmpc.hasIpAddrTable() && ifIndex != -1) {
            if (log().isDebugEnabled()) {
                log().debug("updateSnmpInfo: updating snmp interface for "
                          + "nodeId/ifIndex/ipAddr="
                          + node.getNodeId() + "/" + ifIndex + "/" + ifaddr
                          + " based on ipAddrTable only - No ifTable "
                          + "available");
            }

            // Create and load SNMP Interface entry from the database
            DbSnmpInterfaceEntry dbSnmpIfEntry =
                DbSnmpInterfaceEntry.get(dbc, node.getNodeId(), ifIndex);
            if (dbSnmpIfEntry == null) {
                /*
                 * SNMP Interface not found with this nodeId, create new
                 * interface
                 */
                if (log().isDebugEnabled()) {
                    log().debug("updateSnmpInfo: SNMP interface index " + ifIndex
                              + " not in database, creating new interface "
                              + "object.");
                }
                dbSnmpIfEntry = DbSnmpInterfaceEntry.create(node.getNodeId(),
                                                            ifIndex);
            }

            /*
             * Create SNMP interface entry representing latest information
             * retrieved for the interface via the collector
             */
            DbSnmpInterfaceEntry.create(node.getNodeId(), ifIndex);

            // Update the database
            dbSnmpIfEntry.store(dbc);
            // end if partial snmp info available
        } else if (snmpc != null) {
            // allow for lame snmp hosts with no ipAddrTable
            ifIndex = CapsdConfig.LAME_SNMP_HOST_IFINDEX;
            if (log().isDebugEnabled()) {
                log().debug("updateSnmpInfo: updating snmp interface for "
                          + "nodeId/ipAddr=" + node.getNodeId() + "/" + ifaddr
                          + " based on ip address only - No ipAddrTable "
                          + "available");
            }

            // Create and load SNMP Interface entry from the database

            DbSnmpInterfaceEntry dbSnmpIfEntry =
                DbSnmpInterfaceEntry.get(dbc, node.getNodeId(), ifIndex);
            if (dbSnmpIfEntry == null) {
                /*
                 * SNMP Interface not found with this nodeId, create new
                 * interface
                 */
                if (log().isDebugEnabled()) {
                    log().debug("updateSnmpInfo: SNMP interface index " + ifIndex
                              + " not in database, creating new interface "
                              + "object.");
                }
                dbSnmpIfEntry = DbSnmpInterfaceEntry.create(node.getNodeId(),
                                                            ifIndex);

            }

            /*
             * Create SNMP interface entry representing latest information
             * retrieved for the interface via the collector
             */
            DbSnmpInterfaceEntry.create(node.getNodeId(), ifIndex);

            // Update the database
            dbSnmpIfEntry.store(dbc);
        }
    }

