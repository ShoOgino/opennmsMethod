    /**
     * Updates an existing record in the OpenNMS ipInterface table.
     * 
     * @param c
     *            The connection used for the update.
     * 
     * @throws java.sql.SQLException
     *             Thrown if an error occurs with the connection
     */
    private void update(Connection c) throws SQLException {
        if (!m_fromDb) {
            throw new IllegalStateException("The record does not exists in the database");
        }

        ThreadCategory log = ThreadCategory.getInstance(getClass());

        // first extract the next node identifier
        StringBuffer sqlText = new StringBuffer("UPDATE snmpInterface SET ");

        char comma = ' ';

        if ((m_changed & CHANGED_NETMASK) == CHANGED_NETMASK) {
            sqlText.append(comma).append("snmpIpAdEntNetMask = ?");
            comma = ',';
        }

        if ((m_changed & CHANGED_PHYSADDR) == CHANGED_PHYSADDR) {
            sqlText.append(comma).append("snmpPhysAddr = ?");
            comma = ',';
        }

        if ((m_changed & CHANGED_DESCRIPTION) == CHANGED_DESCRIPTION) {
            sqlText.append(comma).append("snmpIfDescr = ?");
            comma = ',';
        }

        if ((m_changed & CHANGED_IFTYPE) == CHANGED_IFTYPE) {
            sqlText.append(comma).append("snmpIfType = ?");
            comma = ',';
        }

        if ((m_changed & CHANGED_IFNAME) == CHANGED_IFNAME) {
            sqlText.append(comma).append("snmpIfName = ?");
            comma = ',';
        }

        if ((m_changed & CHANGED_IFSPEED) == CHANGED_IFSPEED) {
            sqlText.append(comma).append("snmpIfSpeed = ?");
            comma = ',';
        }

        if ((m_changed & CHANGED_IFADMINSTATUS) == CHANGED_IFADMINSTATUS) {
            sqlText.append(comma).append("snmpIfAdminStatus = ?");
            comma = ',';
        }

        if ((m_changed & CHANGED_IFOPERSTATUS) == CHANGED_IFOPERSTATUS) {
            sqlText.append(comma).append("snmpIfOperStatus = ?");
            comma = ',';
        }

        if ((m_changed & CHANGED_IFALIAS) == CHANGED_IFALIAS) {
            sqlText.append(comma).append("snmpIfAlias = ?");
            comma = ',';
        }

        if ((m_changed & CHANGED_COLLECT) == CHANGED_COLLECT) {
            sqlText.append(comma).append("snmpCollect = ?");
            comma = ',';
        }

        sqlText.append(" WHERE nodeID = ? AND snmpIfIndex = ? ");

        log.debug("DbSnmpInterfaceEntry.update: SQL update statment = "
                  + sqlText.toString());

        // create the Prepared statement and then start setting the result values
        PreparedStatement stmt = null;
        final DBUtils d = new DBUtils(getClass());

        try {
            stmt = c.prepareStatement(sqlText.toString());
            d.watch(stmt);
            sqlText = null;

            int ndx = 1;

            if ((m_changed & CHANGED_NETMASK) == CHANGED_NETMASK) {
                if (m_netmask == null) {
                    stmt.setNull(ndx++, Types.VARCHAR);
                } else {
                    stmt.setString(ndx++, m_netmask.getHostAddress());
                }
            }

            if ((m_changed & CHANGED_PHYSADDR) == CHANGED_PHYSADDR) {
                if (m_physAddr == null) {
                    stmt.setNull(ndx++, Types.CHAR);
                } else {
                    stmt.setString(ndx++, m_physAddr);
                }
            }

            if ((m_changed & CHANGED_DESCRIPTION) == CHANGED_DESCRIPTION) {
                if (m_ifDescription == null) {
                    stmt.setNull(ndx++, Types.VARCHAR);
                } else {
                    stmt.setString(ndx++, m_ifDescription);
                }
            }

            if ((m_changed & CHANGED_IFTYPE) == CHANGED_IFTYPE) {
                if (m_ifType == -1) {
                    stmt.setNull(ndx++, Types.INTEGER);
                } else {
                    stmt.setInt(ndx++, m_ifType);
                }
            }

            if ((m_changed & CHANGED_IFNAME) == CHANGED_IFNAME) {
                if (m_ifName == null) {
                    stmt.setNull(ndx++, Types.VARCHAR);
                } else {
                    stmt.setString(ndx++, m_ifName);
                }
            }

            if ((m_changed & CHANGED_IFSPEED) == CHANGED_IFSPEED) {
                if (m_ifSpeed == -1L) {
                    stmt.setNull(ndx++, Types.INTEGER);
                } else {
                    stmt.setLong(ndx++, m_ifSpeed);
                }
            }

            if ((m_changed & CHANGED_IFADMINSTATUS) == CHANGED_IFADMINSTATUS) {
                if (m_ifAdminStatus == -1) {
                    stmt.setNull(ndx++, Types.INTEGER);
                } else {
                    stmt.setInt(ndx++, m_ifAdminStatus);
                }
            }

            if ((m_changed & CHANGED_IFOPERSTATUS) == CHANGED_IFOPERSTATUS) {
                if (m_ifOperStatus == -1) {
                    stmt.setNull(ndx++, Types.INTEGER);
                } else {
                    stmt.setInt(ndx++, m_ifOperStatus);
                }
            }

            if ((m_changed & CHANGED_IFALIAS) == CHANGED_IFALIAS) {
                if (m_ifAlias == null) {
                    stmt.setNull(ndx++, Types.VARCHAR);
                } else {
                    stmt.setString(ndx++, m_ifAlias);
                }
            }

            if ((m_changed & CHANGED_COLLECT) == CHANGED_COLLECT) {
                if (m_collect == null) {
                    stmt.setNull(ndx++, Types.VARCHAR);
                } else {
                    stmt.setString(ndx++, m_collect);
                }
            }

            stmt.setLong(ndx++, m_nodeId);

            if (m_ifIndex == -1) {
                stmt.setNull(ndx++, Types.INTEGER);
            } else {
                stmt.setInt(ndx++, m_ifIndex);
            }

            // Run the update
            int rc = stmt.executeUpdate();
            log.debug("DbSnmpInterfaceEntry.update: update result = " + rc);
        } finally {
            d.cleanUp();
        }
        stmt.close();

        // clear the mask and mark as backed by the database
        m_changed = 0;
    }

