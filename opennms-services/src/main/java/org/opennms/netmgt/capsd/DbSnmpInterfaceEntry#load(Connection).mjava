    /**
     * Load the current interface from the database. If the interface was
     * modified, the modifications are lost. The nodeid and ip address must be
     * set prior to this call.
     * 
     * @param c
     *            The connection used to load the data.
     * 
     * @throws java.sql.SQLException
     *             Thrown if an error occurs with the connection
     */
    private boolean load(Connection c) throws SQLException {
        if (!m_fromDb) {
            throw new IllegalStateException("The record does not exists in the "
                                            + "database");
        }

        Category log = ThreadCategory.getInstance(getClass());

        // create the Prepared statment and then start setting the query values
        PreparedStatement stmt = null;
        stmt = c.prepareStatement(SQL_LOAD_REC);
        stmt.setInt(1, m_nodeId);
        stmt.setInt(2, m_ifIndex);

        // Run the query
        ResultSet rset = stmt.executeQuery();
        if (!rset.next()) {
            rset.close();
            stmt.close();
            return false;
        }

        // extract the values
        int ndx = 1;

        // get the IP address
        String str = rset.getString(ndx++);
        if (str != null && !rset.wasNull()) {
            try {
                m_ipAddr = InetAddress.getByName(str);
            } catch (UnknownHostException e) {
                log.warn("DbSnmpInterface.load: the ipAddr field was "
                         + "malformed: nodeid = " + m_nodeId + ", ifIndex = " 
                         + m_ifIndex, e);
            }
        }

        // get the netmask
        str = rset.getString(ndx++);
        if (str != null && !rset.wasNull()) {
            try {
                m_netmask = InetAddress.getByName(str);
            } catch (UnknownHostException e) {
                log.warn("DbSnmpInterface.load: the netmask field was "
                         + "malformed: nodeid = " + m_nodeId + ", ipAddr = "
                         + m_ipAddr.getHostAddress(), e);
            }
        }

        // get the physical address
        m_physAddr = rset.getString(ndx++);
        if (rset.wasNull()) {
            m_physAddr = null;
        }

        // get the description
        m_ifDescription = rset.getString(ndx++);
        if (rset.wasNull()) {
            m_ifDescription = null;
        }

        // get the type
        m_ifType = rset.getInt(ndx++);
        if (rset.wasNull()) {
            m_ifIndex = -1;
        }

        // get the name
        m_ifName = rset.getString(ndx++);
        if (rset.wasNull()) {
            m_ifName = null;
        }

        // get the speed
        m_ifSpeed = rset.getLong(ndx++);
        if (rset.wasNull()) { 
            m_ifSpeed = -1L;
        }

        // get the admin status
        m_ifAdminStatus = rset.getInt(ndx++);
        if (rset.wasNull()) {
            m_ifAdminStatus = -1;
        }

        // get the operational status
        m_ifOperStatus = rset.getInt(ndx++);
        if (rset.wasNull()) {
            m_ifOperStatus = -1;
        }
        
        // get the alias
        m_ifAlias = rset.getString(ndx++);
        if (rset.wasNull()) {
            m_ifAlias = null;
        }
        
        // get the collect flag
        m_collect = rset.getString(ndx++);
        if (rset.wasNull()) {
            m_collect = null;
        }
        
        rset.close();
        stmt.close();

        // clear the mask and mark as backed by the database
        m_changed = 0;
        return true;
    }

