    /**
     * Responsible for iterating inserting an entry into the ifServices table
     * for each protocol supported by the interface.
     * 
     * @param node
     *            Node entry
     * @param ifaddr
     *            Interface address
     * @param protocols
     *            List of supported protocols
     * @param addrUnmanaged
     *            Boolean flag indicating if interface is managed or unmanaged
     *            according to the Capsd configuration.
     * @param ifIndex
     *            Interface index or -1 if index is not known
     * @param ipPkg
     *            Poller package to which the interface belongs
     * @throws SQLException
     *             if an error occurs adding interfaces to the ipInterface
     *             table.
     */
    private void addSupportedProtocols(DbNodeEntry node, InetAddress ifaddr,
            List<SupportedProtocol> protocols, boolean addrUnmanaged, int ifIndex,
            org.opennms.netmgt.config.poller.Package ipPkg)
            throws SQLException {
        if (str(ifaddr).equals("0.0.0.0")) {
            log().debug("addSupportedProtocols: node "
                    + node.getNodeId()
                    + ": Cant add ip services for non-ip interface. Just return.");
            return;
        }

        // add the supported protocols
        //
        // NOTE!!!!!: (reference internal bug# 201)
        // If the ip is 'managed', the service can still be 'not polled'
        // based on the poller configuration - at this point the ip is already
        // in the database, so package filter evaluation should go through OK
        //
        for(SupportedProtocol p : protocols) {

            Number sid = m_capsdDbSyncer.getServiceId(p.getProtocolName());

            DbIfServiceEntry ifSvcEntry = DbIfServiceEntry.create(
                                                                  node.getNodeId(),
                                                                  ifaddr,
                                                                  sid.intValue());

            // now fill in the entry
            //
            if (addrUnmanaged)
                ifSvcEntry.setStatus(DbIfServiceEntry.STATUS_UNMANAGED);
            else {
                if (isServicePolledLocally(str(ifaddr), p.getProtocolName(), ipPkg)) {
                    ifSvcEntry.setStatus(DbIfServiceEntry.STATUS_ACTIVE);
                } else if (isServicePolled(str(ifaddr), p.getProtocolName(), ipPkg)) {
                    ifSvcEntry.setStatus(DbIpInterfaceEntry.STATE_REMOTE);
                } else {
                    ifSvcEntry.setStatus(DbIfServiceEntry.STATUS_NOT_POLLED);
                }
            }

            // Set qualifier if available. Currently the qualifier field
            // is used to store the port at which the protocol was found.
            //
            if (p.getQualifiers() != null
                    && p.getQualifiers().get("port") != null) {
                try {
                    Integer port = (Integer) p.getQualifiers().get("port");
                    ifSvcEntry.setQualifier(port.toString());
                } catch (ClassCastException ccE) {
                    // Do nothing
                }
            }

            ifSvcEntry.setSource(DbIfServiceEntry.SOURCE_PLUGIN);
            ifSvcEntry.setNotify(DbIfServiceEntry.NOTIFY_ON);
            if (ifIndex != -1)
                ifSvcEntry.setIfIndex(ifIndex);
            ifSvcEntry.store();
        }
    }

