    /**
     * This method is responsible for generating a nodeLabelChanged event and
     * adding it to the event list.
     * 
     * @param updatedEntry
     *            Updated node entry object
     * @param originalEntry
     *            Original node entry object
     */
    private static Event createNodeLabelChangedEvent(final DbNodeEntry updatedEntry, final DbNodeEntry originalEntry) {
        LOG.debug("createNodeLabelChangedEvent: nodeId: {} oldLabel: '{}' oldSource: '{}' newLabel: '{}' newLabelSource: '{}'", updatedEntry.getNodeId(), originalEntry.getLabel(), originalEntry.getLabelSource(), updatedEntry.getLabel(), updatedEntry.getLabelSource());

        final EventBuilder bldr = nodeEventBuilder(EventConstants.NODE_LABEL_CHANGED_EVENT_UEI, updatedEntry.getNodeId());

        if (originalEntry.getLabel() != null) {
            bldr.addParam(EventConstants.PARM_OLD_NODE_LABEL, originalEntry.getLabel());
            if (originalEntry.getLabelSource() != null) {
                bldr.addParam(EventConstants.PARM_OLD_NODE_LABEL_SOURCE, originalEntry.getLabelSource().toString());
            }
        }

        if (updatedEntry.getLabel() != null) {
            bldr.addParam(EventConstants.PARM_NEW_NODE_LABEL, updatedEntry.getLabel());
            if (updatedEntry.getLabelSource() != null) {
                bldr.addParam(EventConstants.PARM_NEW_NODE_LABEL_SOURCE, updatedEntry.getLabelSource().toString());
            }
        }

        LOG.debug("createNodeLabelChangedEvent: successfully created nodeLabelChanged event for nodeid: {}", updatedEntry.getNodeId());

        // Add event to the list of events to be sent out.
        return bldr.getEvent();
    }

