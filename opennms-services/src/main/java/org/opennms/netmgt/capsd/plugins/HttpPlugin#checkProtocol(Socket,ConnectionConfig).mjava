    /**
     * @param sChannel
     * @param isAServer
     * @return
     * @throws IOException
     */
    protected boolean checkProtocol(Socket socket, ConnectionConfig config) throws IOException {
        boolean isAServer = false;

	m_queryString = "GET " + config.getKeyedString("url", DEFAULT_URL) + " HTTP/1.0\r\n\r\n";

        Category log = ThreadCategory.getInstance(getClass());
        log.debug( "Query: " + m_queryString);

        try {
            BufferedReader lineRdr = new BufferedReader(new InputStreamReader(socket.getInputStream()));

            socket.getOutputStream().write(m_queryString.getBytes());
            char [] cbuf = new char[ 1024 ];
            int chars = 0;
            StringBuffer response = new StringBuffer();
            try
            {
                while ((chars = lineRdr.read( cbuf, 0, 1024)) != -1)
                {
                   String line = new String( cbuf, 0, chars );
                   log.debug( "Read: " + line.length() + " bytes: [" + line.toString() + "] from socket." );
                   response.append( line );
                }

            }
            catch( java.net.SocketTimeoutException timeoutEx )
            {
                if ( timeoutEx.bytesTransferred > 0 )
                {
                   String line = new String( cbuf, 0, timeoutEx.bytesTransferred );
                   log.debug( "Read: " + line.length() + " bytes: [" + line.toString() + "] from socket @ timeout!" );
                   response.append(line);
                }
            }
            if (response.toString() != null && response.toString().indexOf(m_responseString) > -1) 
            {
                if (m_checkReturnCode) {
		    int maxRetCode = config.getKeyedInteger("max-ret-code", 399);
		    if ( (DEFAULT_URL.equals(config.getKeyedString("url", DEFAULT_URL))) || (config.getKeyedBoolean("check-return-code", true) == false) )
		    {
		        maxRetCode = 600;
		    }	
                    StringTokenizer t = new StringTokenizer(response.toString());
                    t.nextToken();
                    int rVal = Integer.parseInt(t.nextToken());
            	    log.debug(getPluginName() + ": Request returned code: " + rVal);
                    if (rVal >= 99 && rVal <= maxRetCode )
                        isAServer = true;
                } else {
                    isAServer = true;
                }
            }
        } catch (SocketException e) {
            log.debug(getPluginName() + ": a protocol error occurred talking to host " + config.getInetAddress().getHostAddress(), e);
            isAServer = false;
        } catch (NumberFormatException e) {
            log.debug(getPluginName() + ": failed to parse response code from host " + config.getInetAddress().getHostAddress(), e);
            isAServer = false;
        }
        return isAServer;
    }

