    /**
     * Checks if a given server is listening o a given interface
     * @param hostname
     *            name of the RDBMS server
     * @param user
     *            Database user
     * @param password
     *            Database password
     * @param db_url
     *            Database connection url
     * @param timeout
     *            Default login timeout
     * @param retries
     *            Number of retrys before giving up a connection attempts
     * @param db_driver
     *            JDBC driver to use
     * 
     * @see DBTools#constructUrl
     */

    private boolean isServer(String hostname, Map<String, Object> qualifiers) {
    	
        String user = ParameterMap.getKeyedString(qualifiers, "user", DBTools.DEFAULT_DATABASE_USER);
        String password = ParameterMap.getKeyedString(qualifiers, "password", DBTools.DEFAULT_DATABASE_PASSWORD);
        String db_url = ParameterMap.getKeyedString(qualifiers, "url", DBTools.DEFAULT_URL);
        int timeout = ParameterMap.getKeyedInteger(qualifiers, "timeout", DEFAULT_TIMEOUT);
        int retries = ParameterMap.getKeyedInteger(qualifiers, "retry", DEFAULT_RETRY);
        String db_driver = ParameterMap.getKeyedString(qualifiers, "driver", DBTools.DEFAULT_JDBC_DRIVER);


        boolean status = false;
        Connection con = null;
        Statement statement = null;
        boolean connected = false;

        for (int attempts = 0; attempts <= retries && !connected;) {
            LogUtils.infof(this, "Trying to detect JDBC server on '%s', attempt #: %d", hostname, attempts);

            try {
                LogUtils.infof(this, "Loading JDBC driver: '%s'", db_driver);
                Driver driver = (Driver)Class.forName(db_driver).newInstance();
                LogUtils.debugf(this, "JDBC driver loaded: '%s'", db_driver);

                String url = DBTools.constructUrl(db_url, hostname);
                LogUtils.debugf(this, "Constructed JDBC url: '%s'", url);

                Properties props = new Properties();
                props.setProperty("user", user);
                props.setProperty("password", password);
                props.setProperty("timeout", String.valueOf(timeout/1000));
                con = driver.connect(url, props);
                connected = true;
                LogUtils.debugf(this, "Got database connection: '%s' (%s, %s, %s)", con, url, user, password);
                
                status = checkStatus(con, qualifiers);

                if (status) LogUtils.infof(this, "JDBC server detected on: '%s', attempt #: %d", hostname, attempts);
                
            } catch (final Exception e) {
                LogUtils.infof(this, e, "failed to make JDBC connection");
            } finally {
                attempts++;
                closeStmt(statement);
                closeConn(con);
            }
        }
        return status;
    }

