    /**
     * This method is responsible for determining the primary IP interface for
     * the node being rescanned.
     * 
     * @param collectorMap
     *            Map of IfCollector objects containing data collected from all
     *            of the node's interfaces.
     * 
     * @return InetAddress The primary IP interface for the node or null if a
     *         primary interface for the node could not be determined.
     */
    private InetAddress determinePrimaryIpInterface(Map<String, IfCollector> collectorMap) {
        Collection<IfCollector> values = collectorMap.values();
        Iterator<IfCollector> iter = values.iterator();
        InetAddress primaryIf = null;
        while (iter.hasNext()) {
            IfCollector ifc = iter.next();
            InetAddress currIf = ifc.getTarget();

            if (primaryIf == null) {
                primaryIf = currIf;
                continue;
            } else {
                // Test the target interface of the collector first.
                primaryIf = SuspectEventProcessor.compareAndSelectPrimary(currIf, primaryIf);

                // Now test each of the collected subtargets
                if (ifc.hasAdditionalTargets()) {
                    Map<InetAddress, List<SupportedProtocol>> subTargets = ifc.getAdditionalTargets();
                    Iterator<InetAddress> siter = subTargets.keySet().iterator();

                    while (siter.hasNext()) {
                        currIf = siter.next();
                        primaryIf = SuspectEventProcessor.compareAndSelectPrimary(currIf, primaryIf);
                    }
                }
            }
        }

        if (log().isDebugEnabled()) {
            if (primaryIf != null) {
                log().debug("determinePrimaryIpInterface: selected primary interface: " + str(primaryIf));
            } else {
                log().debug("determinePrimaryIpInterface: no primary interface found");
            }
        }
        return primaryIf;
    }

