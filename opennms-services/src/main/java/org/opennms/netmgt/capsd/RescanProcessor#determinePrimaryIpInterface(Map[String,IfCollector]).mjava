    /**
     * This method is responsible for determining the primary IP interface for
     * the node being rescanned.
     * 
     * @param collectorMap
     *            Map of IfCollector objects containing data collected from all
     *            of the node's interfaces.
     * 
     * @return InetAddress The primary IP interface for the node or null if a
     *         primary interface for the node could not be determined.
     */
    private static InetAddress determinePrimaryIpInterface(final Map<String, IfCollector> collectorMap) {
        InetAddress primaryIf = null;

        for (final IfCollector ifc : collectorMap.values()) {
            InetAddress currIf = ifc.getTarget();

            if (primaryIf == null) {
                primaryIf = currIf;
                continue;
            } else {
                // Test the target interface of the collector first.
                primaryIf = SuspectEventProcessor.compareAndSelectPrimary(currIf, primaryIf);

                // Now test each of the collected subtargets
                if (ifc.hasAdditionalTargets()) {
                    final Map<InetAddress, List<SupportedProtocol>> subTargets = ifc.getAdditionalTargets();
                    for (final InetAddress subIf : subTargets.keySet()) {
                        currIf = subIf;
                        primaryIf = SuspectEventProcessor.compareAndSelectPrimary(currIf, primaryIf);
                    }
                }
            }
        }

        if (LOG.isDebugEnabled()) {
            if (primaryIf != null) {
                LOG.debug("determinePrimaryIpInterface: selected primary interface: {}", str(primaryIf));
            } else {
                LOG.debug("determinePrimaryIpInterface: no primary interface found");
            }
        }
        return primaryIf;
    }

