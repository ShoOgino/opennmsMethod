    private boolean scanPrimarySnmpInterface(DbIpInterfaceEntry oldPrimarySnmpInterface, Map<String, IfCollector> collectorMap, Set<InetAddress> probedAddrs) {
        boolean gotSnmpCollection = false;

        /*
         * Run collector for DB primary snmp interface and add result
         * to a collector map.
         */
        final InetAddress ifaddr = oldPrimarySnmpInterface.getIfAddress();
        final String ifaddrString = str(ifaddr);

        if (ifaddrString == null) {
        	log().info("old primary snmp interface has an invalid address: " + ifaddr);
        	return false;
        }

		if (log().isDebugEnabled()) {
            log().debug("running collection for DB primary snmp interface " + ifaddrString);
        }
        IfCollector collector = new IfCollector(m_pluginManager, ifaddr, true, probedAddrs);
        collector.run();
        IfSnmpCollector snmpc = collector.getSnmpCollector();
        if (snmpc == null) {
            log().debug("SNMP Collector from DB primary snmp interface is null");
        } else {
            gotSnmpCollection = true;
            collectorMap.put(ifaddrString, collector);
            if (log().isDebugEnabled()) {
                log().debug("SNMP data collected from DB primary snmp interface" + ifaddrString);
            }
            if (!snmpc.hasIfTable()) {
                log().debug("SNMP Collector has no IfTable");
            }
            if (!snmpc.hasIpAddrTable() || snmpc.getIfIndex(snmpc.getCollectorTargetAddress()) == -1) {
                log().debug("SNMP Collector has no IpAddrTable. Assume its a lame SNMP host.");
            }
        }
        return gotSnmpCollection;
    }

