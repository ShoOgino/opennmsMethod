    /**
     * Constructs a deleteInterface event for the given nodeId, ipAddress (or ifIndex) pair.
     *
     * @param source
     *            the source for the event
     * @param nodeId
     *            the nodeId of the node that owns the interface
     * @param ipAddr
     *            the ipAddress of the interface being deleted
     * @param ifIndex
     *            the ifIndex of the interface being deleted
     * @param txNo
     *            the transaction number to use for processing this event
     * @return an Event representing a deleteInterface event for the given
     *         nodeId, ipaddr
     */
    public static Event createDeleteInterfaceEvent(String source, long nodeId, String ipAddr, int ifIndex, long txNo) {
        Event newEvent = new Event();
        newEvent.setUei(EventConstants.DELETE_INTERFACE_EVENT_UEI);
        newEvent.setSource(source);
        if (ipAddr != null && ipAddr.length() != 0) {
            newEvent.setInterface(ipAddr);
        }
        newEvent.setNodeid(nodeId);
        newEvent.setTime(EventConstants.formatToString(new java.util.Date()));
        if (ifIndex != -1) {
            newEvent.setIfIndex(ifIndex);
        }

        // Add appropriate parms
        Parms eventParms = new Parms();

        Parm eventParm = new Parm();
        eventParm.setParmName(EventConstants.PARM_TRANSACTION_NO);
        Value parmValue = new Value();
        parmValue.setContent(String.valueOf(txNo));
        eventParm.setValue(parmValue);
        eventParms.addParm(eventParm);

        // Add Parms to the event
        newEvent.setParms(eventParms);

        return newEvent;
    }

