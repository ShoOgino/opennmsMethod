    /**
     * Load the current node from the database. If the node was modified, the
     * modifications are lost. The nodeid and dpName must be set prior to this
     * call.
     * 
     * @param c
     *            The connection used to load the data.
     * 
     * @throws java.sql.SQLException
     *             Thrown if an error occurs with the connection
     */
    private boolean load(Connection c) throws SQLException {
        if (!m_fromDb)
            throw new IllegalStateException("The record does not exists in the database");

        // create the Prepared statement and then
        // start setting the result values
        //
        PreparedStatement stmt = null;
        ResultSet rset = null;
        final DBUtils d = new DBUtils(getClass());
        try {
            stmt = c.prepareStatement(SQL_LOAD_REC);
            d.watch(stmt);
            stmt.setInt(1, m_nodeId);
            stmt.setString(2, m_dpName);

            rset = stmt.executeQuery();
            d.watch(rset);
            if (!rset.next()) {
                return false;
            }

            // extract the values.
            //
            int ndx = 1;

            // get the time
            //
            m_createTime = rset.getTimestamp(ndx++);

            // the parent id
            //
            m_parentId = rset.getInt(ndx++);
            if (rset.wasNull())
                m_parentId = -1;

            // the node type
            //
            String str = rset.getString(ndx++);
            if (str != null && !rset.wasNull()) {
                if (NodeType.ACTIVE.toString().equals(str)) {
                    m_type = NodeType.ACTIVE;
                } else if (NodeType.DELETED.toString().equals(str)) {
                    m_type = NodeType.DELETED;
                } else {
                    m_type = NodeType.UNKNOWN;
                }
            } else {
                m_type = NodeType.UNKNOWN;
            }

            // the sysoid
            //
            m_sysoid = rset.getString(ndx++);
            if (rset.wasNull())
                m_sysoid = null;

            // the sysname
            //
            m_sysname = rset.getString(ndx++);
            if (rset.wasNull())
                m_sysname = null;

            // the sys description
            //
            m_sysdescr = rset.getString(ndx++);
            if (rset.wasNull())
                m_sysdescr = null;

            // the system location
            //
            m_syslocation = rset.getString(ndx++);
            if (rset.wasNull())
                m_syslocation = null;

            // the system contact
            //
            m_syscontact = rset.getString(ndx++);
            if (rset.wasNull())
                m_syscontact = null;

            // the node label
            //
            m_label = rset.getString(ndx++);
            if (rset.wasNull())
                m_label = null;

            // the label type
            //
            str = rset.getString(ndx++);
            if (rset.wasNull()) {
                m_labelSource = NodeLabelSource.UNKNOWN;
            } else if (NodeLabelSource.ADDRESS.toString().equals(str)) {
                m_labelSource = NodeLabelSource.ADDRESS;
            } else if (NodeLabelSource.HOSTNAME.toString().equals(str)) {
                m_labelSource = NodeLabelSource.HOSTNAME;
            } else if (NodeLabelSource.NETBIOS.toString().equals(str)) {
                m_labelSource = NodeLabelSource.NETBIOS;
            } else if (NodeLabelSource.SYSNAME.toString().equals(str)) {
                m_labelSource = NodeLabelSource.SYSNAME;
            } else if (NodeLabelSource.UNKNOWN.toString().equals(str)) {
                m_labelSource = NodeLabelSource.UNKNOWN;
            } else if (NodeLabelSource.USER.toString().equals(str)) {
                m_labelSource = NodeLabelSource.USER;
            } else {
                m_labelSource = NodeLabelSource.UNKNOWN;
            }

            // the netbios name
            //
            m_nbName = rset.getString(ndx++);
            if (rset.wasNull())
                m_nbName = null;

            // the domain name
            //
            m_nbDomainName = rset.getString(ndx++);
            if (rset.wasNull())
                m_nbDomainName = null;

            // the operating system
            //
            m_os = rset.getString(ndx++);
            if (rset.wasNull())
                m_os = null;

            // get the last poll time
            //
            m_lastPoll = rset.getTimestamp(ndx++);
            
            m_foreignSource = rset.getString(ndx++);
            
            m_foreignId = rset.getString(ndx++);
        } finally {
            d.cleanUp();
        }

        // clear the mask and mark as backed by the database
        m_changed = 0;
        return true;
    }

