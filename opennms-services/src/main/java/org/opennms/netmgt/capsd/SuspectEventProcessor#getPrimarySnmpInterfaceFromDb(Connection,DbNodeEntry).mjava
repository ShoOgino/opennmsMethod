    /**
     * Returns a list of InetAddress object(s) of the primary SNMP
     * interface(s) (if one or more exists).
     * 
     * @param dbc
     *            Database connection.
     * @param node
     *            DbNodeEntry object representing the interface's parent node
     *            table entry
     * @throws SQLException
     *             if an error occurs updating the ipInterface table
     * @return List of Old SNMP primary interface addresses (usually just
     *         one).
     */
    List<InetAddress> getPrimarySnmpInterfaceFromDb(Connection dbc, DbNodeEntry node)
            throws SQLException {
        List<InetAddress> priSnmpAddrs = new ArrayList<InetAddress>();

        LOG.debug("getPrimarySnmpInterfaceFromDb: retrieving primary SNMP interface(s) from DB for node " + node.getNodeId());
        InetAddress oldPrimarySnmpIf = null;

        final DBUtils d = new DBUtils(getClass());
        try {
            PreparedStatement stmt = dbc.prepareStatement("SELECT ipAddr FROM ipInterface WHERE nodeId=? AND isSnmpPrimary='P' AND isManaged!='D'");
            d.watch(stmt);
            stmt.setInt(1, node.getNodeId());

            ResultSet rs = stmt.executeQuery();
            d.watch(rs);
            while (rs.next()) {
                String oldPrimaryAddr = rs.getString(1);
                LOG.debug("getPrimarySnmpInterfaceFromDb: String oldPrimaryAddr = " + oldPrimaryAddr);
                if (oldPrimaryAddr != null) {
                    oldPrimarySnmpIf = addr(oldPrimaryAddr);
                    LOG.debug("getPrimarySnmpInterfaceFromDb: old primary SNMP interface is " + oldPrimaryAddr);
                    priSnmpAddrs.add(oldPrimarySnmpIf);
                }
            }
        } catch (SQLException sqlE) {
            LOG.warn("getPrimarySnmpInterfaceFromDb: Exception: " + sqlE);
            throw sqlE;
        } finally {
            d.cleanUp();
        }

        return priSnmpAddrs;
    }

