    /**
     * Returns a list of InetAddress object(s) of the primary SNMP
     * interface(s) (if one or more exists).
     * 
     * @param dbc
     *            Database connection.
     * @param node
     *            DbNodeEntry object representing the interface's parent node
     *            table entry
     * @throws SQLException
     *             if an error occurs updating the ipInterface table
     * @return List of Old SNMP primary interface addresses (usually just
     *         one).
     */
    static List getPrimarySnmpInterfaceFromDb(Connection dbc, DbNodeEntry node)
            throws SQLException {
        Category log = ThreadCategory.getInstance(SuspectEventProcessor.class);

        List priSnmpAddrs = new ArrayList();

        log.debug("getPrimarySnmpInterfaceFromDb: retrieving primary snmp interface(s) from DB for node "
                + node.getNodeId());
        InetAddress oldPrimarySnmpIf = null;

        // Prepare SQL statement
        PreparedStatement stmt = dbc.prepareStatement("SELECT ipAddr FROM ipInterface WHERE nodeId=? AND isSnmpPrimary='P' AND isManaged!='D'");
        stmt.setInt(1, node.getNodeId());

        // Execute statement
        ResultSet rs = null;
        try {
            rs = stmt.executeQuery();
            while (rs.next()) {
                String oldPrimaryAddr = rs.getString(1);
                log.debug("getPrimarySnmpInterfaceFromDb: String oldPrimaryAddr = "
                        + oldPrimaryAddr);
                if (oldPrimaryAddr != null) {
                    try {
                        oldPrimarySnmpIf = InetAddress.getByName(oldPrimaryAddr);
                        log.debug("getPrimarySnmpInterfaceFromDb: old primary Snmp interface is "
                                + oldPrimarySnmpIf.getHostAddress());
                    } catch (UnknownHostException e) {
                        log.warn("Failed converting IP address "
                                + oldPrimaryAddr);
                    }
                    priSnmpAddrs.add(oldPrimarySnmpIf);
                }
            }
        } catch (SQLException sqlE) {
            log.warn("getPrimarySnmpInterfaceFromDb: Exception: " + sqlE);
            throw sqlE;
        } finally {
            try {
                stmt.close(); // automatically closes the result set as well
            } catch (Exception e) {
                // Ignore
            }
        }

        return priSnmpAddrs;
    }

