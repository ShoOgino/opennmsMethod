    /**
     * Helper method that returns the node id for the @param ipaddr and @param serviceName.
     * FIXME: Notice how some of these methods return node id arrays as int(s) and some as long(s).
     * 
     * @param dbConn
     * @param ipaddr
     * @param serviceName
     * @return An int Array of node ids.
     * @throws SQLException
     */
    private int[] findNodeIdForServiceAndInterface(Connection dbConn, String ipaddr, String serviceName) throws SQLException {
        int[] nodeIds;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        final DBUtils d = new DBUtils(getClass());
        
        try {
            // Verify if the specified service already exist.
            stmt = dbConn.prepareStatement(SQL_QUERY_SERVICE_EXIST);
            d.watch(stmt);

            stmt.setString(1, ipaddr);
            stmt.setString(2, serviceName);

            rs = stmt.executeQuery();
            d.watch(rs);
            List<Integer> nodeIdList = new LinkedList<Integer>();
            while (rs.next()) {
                LOG.debug("changeService: service " + serviceName + " on IPAddress " + ipaddr + " already exists in the database.");
                int nodeId = rs.getInt(1);
                nodeIdList.add(nodeId);
            }
            nodeIds = new int[nodeIdList.size()];
            int i = 0;
            for(Integer n : nodeIdList) {
                nodeIds[i++] = n.intValue();
            }
            return nodeIds;
        } finally {
            d.cleanUp();
        }        
    }

