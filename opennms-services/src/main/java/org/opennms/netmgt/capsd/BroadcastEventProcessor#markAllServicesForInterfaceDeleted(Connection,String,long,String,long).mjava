    /**
     * Mark all the services associated with a given interface as deleted and
     * create service deleted events for each one that gets deleted
     * 
     * @param dbConn
     *            the database connection
     * @param nodeId
     *            the node that interface resides on
     * @param ipAddr
     *            the ipAddress of the interface
     * @param txNo
     *            a transaction number that can be associated with this deletion
     * @return a List of serviceDeleted events, one for each service marked
     * @throws SQLException
     *             if a database error occurs
     */
    private List<Event> markAllServicesForInterfaceDeleted(Connection dbConn, String source, long nodeId, String ipAddr, long txNo) throws SQLException {
        PreparedStatement stmt = null;
        ResultSet rs = null;
        final DBUtils d = new DBUtils(getClass());
        try {
            List<Event> eventsToSend = new LinkedList<Event>();

            final String DB_FIND_SERVICES_FOR_INTERFACE = "SELECT DISTINCT service.serviceName FROM ifservices as ifservices, service as service WHERE ifservices.nodeID = ? and ifservices.ipAddr = ? and ifservices.status != 'D' and ifservices.serviceID = service.serviceID";
            stmt = dbConn.prepareStatement(DB_FIND_SERVICES_FOR_INTERFACE);
            d.watch(stmt);
            stmt.setLong(1, nodeId);
            stmt.setString(2, ipAddr);
            rs = stmt.executeQuery();
            d.watch(rs);

            Set<String> services = new HashSet<String>();
            while (rs.next()) {
                String serviceName = rs.getString(1);
                LOG.debug("found service {} for ipAddr {} node {}", serviceName, ipAddr, nodeId);
                services.add(serviceName);
            }

            final String DB_MARK_SERVICES_FOR_INTERFACE = "UPDATE ifservices SET status = 'D' where ifservices.nodeID = ? and ifservices.ipAddr = ?";
            stmt = dbConn.prepareStatement(DB_MARK_SERVICES_FOR_INTERFACE);
            d.watch(stmt);
            stmt.setLong(1, nodeId);
            stmt.setString(2, ipAddr);

            stmt.executeUpdate();

            for(String serviceName : services) {
                LOG.debug("creating event for service {} for ipAddr {} node {}", serviceName, ipAddr, nodeId);
                eventsToSend.add(EventUtils.createServiceDeletedEvent(source, nodeId, ipAddr, serviceName, txNo));
            }

            LOG.debug("markServicesDeleted: marked service deleted: {}/{}", nodeId, ipAddr);

            return eventsToSend;
        } finally {
            d.cleanUp();
        }        
    }

