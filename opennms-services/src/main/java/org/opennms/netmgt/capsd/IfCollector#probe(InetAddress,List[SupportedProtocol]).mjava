    /**
     * This method is used to <em>probe</em> the target addresses using the
     * configured list of protocol specifications from the Configuration
     * Manager. The list of supported protocols are added to the supports list.
     * Any failures in the plugins are logged and discarded.
     * 
     * @param target
     *            The target to probe
     * @param supports
     *            The supported protocols (SupportedProtocol)
     * 
     */
    private void probe(final InetAddress target, final List<SupportedProtocol> supports) {
        final String logAddr = str(target);

        final CapsdProtocolInfo[] plugins = m_pluginManager.getProtocolSpecification(target);
        
        // First run the plugins to find out all the capabilities
        // for the interface
        //
        for (final CapsdProtocolInfo plugin : plugins) {
            LOG.debug("{} testing plugin {}", logAddr, plugin.getProtocol());
            if (plugin.isAutoEnabled()) {
                LOG.debug("{} protocol {} is auto enabled", logAddr, plugin.getProtocol());
                supports.add(new SupportedProtocol(plugin.getProtocol(), null));
                continue;
            }

            try {
                final Plugin p = plugin.getPlugin();
                final Map<String, Object> q = plugin.getParameters();
                boolean r = p.isProtocolSupported(target, q);

                LOG.debug("{} protocol {} supported? {}", logAddr, plugin.getProtocol(), (r ? "true" : "false"));

                if (r) {
                    supports.add(new SupportedProtocol(plugin.getProtocol(), q));
                }
            } catch (final UndeclaredThrowableException utE) {
                final Throwable t = utE.getUndeclaredThrowable();
                if (t instanceof NoRouteToHostException) {
                    if (CapsdConfigFactory.getInstance().getAbortProtocolScansFlag()) {
                        LOG.info("IfCollector: No route to host {}, aborting protocol scans.", logAddr);
                        break; // Break out of plugin loop
                    } else {
                        LOG.info("IfCollector: No route to host {}, continuing protocol scans.", logAddr);
                    }
                } else {
                    LOG.warn("IfCollector: Caught undeclared throwable exception when testing for protocol {} on host {}", plugin.getProtocol(), logAddr, utE);
                }
            } catch (final RuntimeException e) {
                LOG.warn("IfCollector: Caught an exception when testing for protocol {} on host {}", plugin.getProtocol(), logAddr, e);
            }
            LOG.debug("{} plugin {} completed!", logAddr, plugin.getProtocol());
        }
    }

