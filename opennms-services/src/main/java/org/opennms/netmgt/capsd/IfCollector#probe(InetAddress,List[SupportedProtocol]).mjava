    /**
     * This method is used to <em>probe</em> the target addresses using the
     * configured list of protocol specifications from the Configuration
     * Manager. The list of supported protocols are added to the supports list.
     * Any failures in the plugins are logged and discarded.
     * 
     * @param target
     *            The target to probe
     * @param supports
     *            The supported protocols (SupportedProtocol)
     * 
     */
    private void probe(InetAddress target, List<SupportedProtocol> supports) {
        String logAddr = InetAddressUtils.str(target);

        CapsdProtocolInfo[] plugins = m_pluginManager.getProtocolSpecification(target);
        
        // First run the plugins to find out all the capabilities
        // for the interface
        //
        for (int i = 0; i < plugins.length; i++) {
            LOG.debug(logAddr + " testing plugin " + plugins[i].getProtocol());
            if (plugins[i].isAutoEnabled()) {
                LOG.debug(logAddr + " protocol " + plugins[i].getProtocol() + " is auto enabled");
                supports.add(new SupportedProtocol(plugins[i].getProtocol(), null));
                continue;
            }

            try {
                Plugin p = plugins[i].getPlugin();
                Map<String, Object> q = plugins[i].getParameters();
                boolean r = p.isProtocolSupported(target, q);

                LOG.debug(logAddr + " protocol " + plugins[i].getProtocol() + " supported? " + (r ? "true" : "false"));

                if (r) {
                    supports.add(new SupportedProtocol(plugins[i].getProtocol(), q));
                }
            } catch (UndeclaredThrowableException utE) {
                Throwable t = utE.getUndeclaredThrowable();
                if (t instanceof NoRouteToHostException) {
                    if (CapsdConfigFactory.getInstance().getAbortProtocolScansFlag()) {
                        LOG.info("IfCollector: No route to host " + logAddr + ", aborting protocol scans.");
                        break; // Break out of plugin loop
                    } else {
                        LOG.info("IfCollector: No route to host " + logAddr + ", continuing protocol scans.");
                    }
                } else {
                    LOG.warn("IfCollector: Caught undeclared throwable exception when testing for protocol " + plugins[i].getProtocol() + " on host " + logAddr, utE);
                }
            } catch (Throwable t) {
                LOG.warn("IfCollector: Caught an exception when testing for protocol " + plugins[i].getProtocol() + " on host " + logAddr, t);
            }
            LOG.debug(logAddr + " plugin " + plugins[i].getProtocol() + " completed!");
        }
    }

