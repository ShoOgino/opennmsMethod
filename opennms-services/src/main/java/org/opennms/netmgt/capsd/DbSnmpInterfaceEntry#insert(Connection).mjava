    /**
     * Inserts the new interface into the ipInterface table of the OpenNMS
     * database.
     * 
     * @param c
     *            The connection to the database.
     * 
     * @throws java.sql.SQLException
     *             Thrown if an error occurs with the connection
     */
    private void insert(Connection c) throws SQLException {
        if (m_fromDb) {
            throw new IllegalStateException("The record already exists in the database");
        }

        ThreadCategory log = ThreadCategory.getInstance(getClass());

        // first extract the next node identifier
        StringBuffer names = new StringBuffer("INSERT INTO snmpInterface (nodeID,snmpIfIndex");
        StringBuffer values = new StringBuffer("?,?");

        if ((m_changed & CHANGED_NETMASK) == CHANGED_NETMASK) {
            values.append(",?");
            names.append(",snmpIpAdEntNetMask");
        }

        if ((m_changed & CHANGED_PHYSADDR) == CHANGED_PHYSADDR) {
            values.append(",?");
            names.append(",snmpPhysAddr");
        }

        if ((m_changed & CHANGED_DESCRIPTION) == CHANGED_DESCRIPTION) {
            values.append(",?");
            names.append(",snmpIfDescr");
        }

        if ((m_changed & CHANGED_IFTYPE) == CHANGED_IFTYPE) {
            values.append(",?");
            names.append(",snmpIfType");
        }

        if ((m_changed & CHANGED_IFNAME) == CHANGED_IFNAME) {
            values.append(",?");
            names.append(",snmpIfName");
        }

        if ((m_changed & CHANGED_IFSPEED) == CHANGED_IFSPEED) {
            values.append(",?");
            names.append(",snmpIfSpeed");
        }

        if ((m_changed & CHANGED_IFADMINSTATUS) == CHANGED_IFADMINSTATUS) {
            values.append(",?");
            names.append(",snmpIfAdminStatus");
        }

        if ((m_changed & CHANGED_IFOPERSTATUS) == CHANGED_IFOPERSTATUS) {
            values.append(",?");
            names.append(",snmpIfOperStatus");
        }
        
        if ((m_changed & CHANGED_IFALIAS) == CHANGED_IFALIAS) {
            values.append(",?");
            names.append(",snmpIfAlias");
        }

        if ((m_changed & CHANGED_COLLECT) == CHANGED_COLLECT) {
            values.append(",?");
            names.append(",snmpCollect");
        }

        names.append(") VALUES (").append(values).append(')');
        log.debug("DbSnmpInterfaceEntry.insert: SQL insert statment = "
                  + names.toString());

        // create the Prepared statement and then start setting the result values
        PreparedStatement stmt = null;
        final DBUtils d = new DBUtils(getClass());

        try {
            stmt = c.prepareStatement(names.toString());
            d.watch(stmt);
            names = null;

            int ndx = 1;
            stmt.setLong(ndx++, m_nodeId);
            stmt.setInt(ndx++, m_ifIndex);

            if ((m_changed & CHANGED_NETMASK) == CHANGED_NETMASK) {
                stmt.setString(ndx++, InetAddressUtils.str(m_netmask));
            }

            if ((m_changed & CHANGED_PHYSADDR) == CHANGED_PHYSADDR) {
                stmt.setString(ndx++, m_physAddr);
            }

            if ((m_changed & CHANGED_DESCRIPTION) == CHANGED_DESCRIPTION) {
                stmt.setString(ndx++, m_ifDescription);
            }

            if ((m_changed & CHANGED_IFTYPE) == CHANGED_IFTYPE) {
                stmt.setInt(ndx++, m_ifType);
            }

            if ((m_changed & CHANGED_IFNAME) == CHANGED_IFNAME) {
                stmt.setString(ndx++, m_ifName);
            }

            if ((m_changed & CHANGED_IFSPEED) == CHANGED_IFSPEED) {
                stmt.setLong(ndx++, m_ifSpeed);
            }

            if ((m_changed & CHANGED_IFADMINSTATUS) == CHANGED_IFADMINSTATUS) {
                stmt.setInt(ndx++, m_ifAdminStatus);
            }

            if ((m_changed & CHANGED_IFOPERSTATUS) == CHANGED_IFOPERSTATUS) {
                stmt.setInt(ndx++, m_ifOperStatus);
            }
            
            if ((m_changed & CHANGED_IFALIAS) == CHANGED_IFALIAS) {
                stmt.setString(ndx++, m_ifAlias);
            }
            if ((m_changed & CHANGED_COLLECT) == CHANGED_COLLECT) {
                stmt.setString(ndx++, m_collect);
            }

            // Run the insert
            int rc = stmt.executeUpdate();
            log.debug("DbSnmpInterfaceEntry.insert: SQL update result = " + rc);
        } finally {
            d.cleanUp();
        }

        // clear the mask and mark as backed by the database
        m_fromDb = true;
        m_changed = 0;
    }

