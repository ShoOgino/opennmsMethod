    /**
     * <P>
     * Test to see if the passed script-host-argument combination is the
     * endpoint for a GP server. If there is a GP server at that destination
     * then a value of true is returned from the method. Otherwise a false value
     * is returned to the caller. In order to return true the script must
     * generate a banner line which contains the text from the banner or match
     * argument.
     * </P>
     *
     * @param host
     *            The host to pass to the script
     * @param retry
     *            The number of retry attempts to make
     * @param timeout
     *            The timeout value for each retry
     * @param script
     *            The external script or program to call
     * @param args
     *            The arguments to pass to the script
     * @param regex
     *            The regular expression used to determine banner match
     * @param bannerResult
     * @param hoption
     *            The option string passed to the exec for the IP address (hostname)
     * @param toption
     *            The option string passed to the exec for the timeout
     *
     * @return True if a connection is established with the script and the
     *         banner line returned by the script matches the regular expression
     *         regex.
     */
    private boolean isServer(InetAddress host, int retry, int timeout, String script, String args, Pattern regex, StringBuffer bannerResult, String hoption, String toption) {

        boolean isAServer = false;

        LOG.debug("poll: address = {}, script = {}, arguments = {}, timeout(seconds) = {}, retry = {}", InetAddressUtils.str(host), script, args, timeout, retry);

        for (int attempts = 0; attempts <= retry && !isAServer; attempts++) {
            try {
                int exitStatus = 100;
                ExecRunner er = new ExecRunner();
                er.setMaxRunTimeSecs(timeout);
                if (args == null) {
                    exitStatus = er.exec(script + " " + hoption + " " + InetAddressUtils.str(host) + " " + toption + " " + timeout);
                } else {
                    exitStatus = er.exec(script + " " + hoption + " " + InetAddressUtils.str(host) + " " + toption + " " + timeout + " " + args);
                }
                if (exitStatus != 0) {
                    LOG.debug("{} failed with exit code {}", script, exitStatus);
                    isAServer = false;
                }
                if (er.isMaxRunTimeExceeded()) {
                    LOG.debug("{} failed. Timeout exceeded", script);
                    isAServer = false;
                } else {
                    if (exitStatus == 0) {
                        String response = "";
                        String error = "";
                        response = er.getOutString();
                        error = er.getErrString();
                        if (response.equals("")) {
                            LOG.debug("{} returned no output", script);
                        }
                        if (!error.equals("")) {
                            LOG.debug("{} error = {}", script, error);
                        }
                        if (regex == null || regex.matcher(response).find()) {

                            LOG.debug("isServer: matching response = {}", response);
                            isAServer = true;
                            if (bannerResult != null) {
                                bannerResult.append(response);
                            }
                        } else {
                            isAServer = false;

                            LOG.debug("isServer: NON-matching response = {}", response);
                        }
                    }
                }
            } catch (ArrayIndexOutOfBoundsException e) {
                isAServer = false;
                e.fillInStackTrace();
                LOG.debug("{} ArrayIndexOutOfBoundsException", script);
            } catch (InterruptedIOException e) {
                // This is an expected exception
                //
                isAServer = false;
            } catch (IOException e) {
                isAServer = false;
                e.fillInStackTrace();
                LOG.debug("IOException occurred. Check for proper operation of {}", script);
            } catch (Throwable e) {
                isAServer = false;
                e.fillInStackTrace();
                LOG.debug("{} Exception occurred", script);
            }
        }

        //
        // return the status of the server
        //
        LOG.debug("poll: GP - isAServer = {} {}", isAServer, InetAddressUtils.str(host));
        return isAServer;
    }

