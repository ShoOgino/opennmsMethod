    /**
     * This method is responsible for generating an ipHostNameChanged event and
     * adding it to the event list.
     * 
     * @param updatedEntry
     *            updated IP interface database entry
     * @param originalEntry
     *            original IP interface database entry
     */
    private void createIpHostNameChangedEvent(final DbIpInterfaceEntry updatedEntry, final DbIpInterfaceEntry originalEntry) {
        if (log().isDebugEnabled()) {
            log().debug("createIpHostNameChangedEvent: nodeId: " + updatedEntry.getNodeId() + " oldHostName: " + originalEntry.getHostname() + " newHostName: " + updatedEntry.getHostname());
        }

        EventBuilder bldr = interfaceEventBuilder(EventConstants.INTERFACE_IP_HOSTNAME_CHANGED_EVENT_UEI, updatedEntry.getNodeId(), str(updatedEntry.getIfAddress()));
        
        // Add old IP Hostname
        if (originalEntry.getHostname() != null) {
            bldr.addParam(EventConstants.PARM_OLD_IP_HOSTNAME, originalEntry.getHostname());
        }

        // Add new IP Hostname
        if (updatedEntry.getHostname() != null) {
            bldr.addParam(EventConstants.PARM_IP_HOSTNAME, updatedEntry.getHostname());
        }

        // Add event to the list of events to be sent out.
        m_eventList.add(bldr.getEvent());

        if (log().isDebugEnabled()) {
            log().debug("createIpHostNameChangedEvent: successfully created ipHostNameChanged event for nodeid: " + updatedEntry.getNodeId());
        }
    }

