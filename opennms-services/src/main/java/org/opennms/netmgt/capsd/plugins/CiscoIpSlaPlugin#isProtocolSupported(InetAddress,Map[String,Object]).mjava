    /**
     * {@inheritDoc}
     *
     * Returns true if the protocol defined by this plugin is supported. If
     * the protocol is not supported then a false value is returned to the
     * caller. The qualifier map passed to the method is used by the plugin to
     * return additional information by key-name. These key-value pairs can be
     * added to service events if needed.
     */
    public boolean isProtocolSupported(InetAddress ipaddr,
            Map<String, Object> parameters) {

        boolean status = false;

        try {
            String adminTag = ParameterMap.getKeyedString(parameters, "admin-tag", null);

            /*
             * Get configuration parameters This is the string that represents
             * the configured IP-SLA admin tag to be monitored.
             */
            if (adminTag == null) {
                log().warn("poll: No IP-SLA admin-tag defined!");
                return status;
            }

            SnmpAgentConfig agentConfig = SnmpPeerFactory.getInstance().getAgentConfig(
                                                                                       ipaddr);
            if (agentConfig == null)
                throw new RuntimeException(
                                           "SnmpAgentConfig object not available for interface "
                                                   + ipaddr);

            if (parameters != null) {
                // "port" parm
                //
                if (parameters.get("port") != null) {
                    int port = ParameterMap.getKeyedInteger(
                                                            parameters,
                                                            "port",
                                                            agentConfig.getPort());
                    agentConfig.setPort(port);
                }

                // "timeout" parm
                //
                if (parameters.get("timeout") != null) {
                    int timeout = ParameterMap.getKeyedInteger(
                                                               parameters,
                                                               "timeout",
                                                               agentConfig.getTimeout());
                    agentConfig.setTimeout(timeout);
                }

                // "retry" parm
                //
                if (parameters.get("retry") != null) {
                    int retry = ParameterMap.getKeyedInteger(
                                                             parameters,
                                                             "retry",
                                                             agentConfig.getRetries());
                    agentConfig.setRetries(retry);
                }

                // "force version" parm
                //
                if (parameters.get("force version") != null) {
                    String version = (String) parameters.get("force version");
                    if (version.equalsIgnoreCase("snmpv1"))
                        agentConfig.setVersion(SnmpAgentConfig.VERSION1);
                    else if (version.equalsIgnoreCase("snmpv2")
                            || version.equalsIgnoreCase("snmpv2c"))
                        agentConfig.setVersion(SnmpAgentConfig.VERSION2C);

                    // TODO: make sure JoeSnmpStrategy correctly handles this.
                    else if (version.equalsIgnoreCase("snmpv3"))
                        agentConfig.setVersion(SnmpAgentConfig.VERSION3);
                }

                // Establish SNMP session with interface
                if (log().isDebugEnabled()) {
                    log().debug(
                                "poll: SnmpAgentConfig address: "
                                        + agentConfig);
                }

                /*
                 * Get two maps one with all configured admin tags and one of
                 * oper state
                 */
                Map<SnmpInstId, SnmpValue> tagResults = SnmpUtils.getOidValues(
                                                                               agentConfig,
                                                                               "CiscoIpSlaMonitor",
                                                                               SnmpObjId.get(RTT_ADMIN_TAG_OID));
                if (tagResults == null) {
                    log().warn("poll: No admin tags received! ");
                    return status;
                }

                Map<SnmpInstId, SnmpValue> operStateResults = SnmpUtils.getOidValues(
                                                                                     agentConfig,
                                                                                     "CiscoIpSlaMonitor",
                                                                                     SnmpObjId.get(RTT_OPER_STATE_OID));
                if (operStateResults == null) {
                    log().warn("poll: No oper state received! ");
                    return status;
                }

                // Iterate over the list of configured IP SLAs
                for (SnmpInstId ipslaInstance : tagResults.keySet()) {

                    log().debug(
                                "poll: " + "admin tag=" + adminTag
                                        + " value="
                                        + tagResults.get(ipslaInstance)
                                        + " oper state="
                                        + operStateResults.get(ipslaInstance));
                    /*
                     *  Check if a configured ip sla with specific tag exist
                     *  and is the operational state active 
                     */
                    if (tagResults.get(ipslaInstance).toString().equals(
                                                                        adminTag)
                            && operStateResults.get(ipslaInstance).toInt() == RTT_MON_OPER_STATE.ACTIVE.value()) {
                        log().debug("poll: admin tag found");
                        status = true;
                    }
                }
            }
        } catch (NullPointerException e) {
            log().warn(
                       "SNMP not available or CISCO-RTT-MON-MIB not supported!");
        } catch (NumberFormatException e) {
            log().warn(
                       "Number operator used on a non-number "
                               + e.getMessage());
        } catch (IllegalArgumentException e) {
            log().warn("Invalid SNMP Criteria: " + e.getMessage());
        } catch (Throwable t) {
            log().warn(
                       "Unexpected exception during SNMP poll of interface "
                               + InetAddressUtils.str(ipaddr), t);
        }
        return status;
    }

