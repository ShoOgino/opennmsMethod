    /**
     * Returns an iterator that may be used to step through all the encapsualted
     * {@link IPPollAddress pollableaddresses} in the generator. Each call to
     * the <code>next</code> method on the returned iterator returns an
     * instance of a {@link IPPollAddress pollable address}.
     * 
     * @return An iterator to traverse the encapsualted addresses.
     * 
     */
    Iterator iterator() {
        IteratorChain chainedIter = new IteratorChain();

        // Add the specific IPPollAddress iterator
        //
        chainedIter.add(m_specificAddresses.iterator());

        // Add the iterators for the ranges
        //
        Iterator x = m_includeRanges.iterator();
        while (x.hasNext()) {
            IPPollRange range = (IPPollRange) x.next();
            chainedIter.add(range.iterator());
        }

        return chainedIter;
    }

