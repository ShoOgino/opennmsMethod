    /**
     * Constructs a new instance of a ping manager. Once the manager is
     * constructed it must be started with a call to the method
     * <code>start</code>.
     * 
     * @param addressQ
     *            The input address queue.
     * @param discoveredQ
     *            The output queue of responding addresses.
     * @param threads
     *            The number of pinging fibers to create.
     * @param pktsPerSecond
     *            The maximum packets per second that can be generated.
     * 
     * @throws java.io.IOException
     *             Thrown if the ICMP socket cannot be constructed.
     * 
     */
    protected PingManager(FifoQueue addressQ, FifoQueue discoveredQ,
			  short filterId, int threads, int pktsPerSecond)
	throws IOException {
        Category log = ThreadCategory.getInstance(getClass());

        if (threads < 1) {
	    log.error("The number of PingManager threads must be greater than zero");
            throw new IllegalArgumentException("The number of threads must be greater than zero");
	}

        if (pktsPerSecond < 1) {
	    log.error("The number of PingManager packets per second must be greater than zero");
            throw new IllegalArgumentException("The number of packets per second must be greater than zero");
	}

        // Save the filter id for thread nameing
        //
        m_filterId = filterId;

        // Open a new raw ICMP socket
        //
	try {
	    m_socket = new IcmpSocket();
	} catch (NoClassDefFoundError e) {
	    log.error("NoClassDefFoundError while creating an IcmpSocket.  " +
		      "Most likely failed to load libjicmp.so.", e);
	    throw e;
	} catch (Throwable t) {
	    log.error("Throwable received while creating an IcmpSocket", t);
	    throw new UndeclaredThrowableException(t, t.getMessage());
	}

        // Create the timed semaphore
        //
        m_semaphore = new QuantumSemaphore((long) pktsPerSecond, 1000L);

        // Allocate the queue for reading back requests
        //
        m_replyQ = new FifoQueueImpl();

        // Save the output queue
        //
        m_discoveredQ = discoveredQ;

        // Allocate the pingers
        //
        m_pingers = new Pinger[threads];
        for (int x = 0; x < m_pingers.length; x++) {
            m_pingers[x] = new Pinger(m_socket, m_semaphore, addressQ, filterId, TID_CONST_KEY | (long) x);
        }

        m_icmpReceiver = new ReplyReceiver(m_socket, m_replyQ, filterId);
    }

