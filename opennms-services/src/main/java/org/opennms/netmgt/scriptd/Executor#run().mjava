    /**
     * The main worker of the fiber. This method is executed by the encapsulated
     * thread to read events from the execution queue and to execute any
     * configured scripts, allowing these scripts to react to the received
     * event. If the thread is interrupted or the status changes to
     * <code>STOP_PENDING</code> then the method will return as quickly as
     * possible.
     */
    public void run() {
        ThreadCategory log = ThreadCategory.getInstance(Executor.class);

        synchronized (this) {
            m_status = RUNNING;
        }

        for (;;) {
            synchronized (this) {
                // if stopped or stop pending then break out

                if (m_status == STOP_PENDING || m_status == STOPPED) {
                    break;
                }

                // if paused or pause pending then block

                while (m_status == PAUSE_PENDING || m_status == PAUSED) {
                    m_status = PAUSED;
                    try {
                        wait();
                    } catch (InterruptedException ex) {
                        // exit
                        break;
                    }
                }

                // if resume pending then change to running

                if (m_status == RESUME_PENDING) {
                    m_status = RUNNING;
                }
            }

            // Extract the next event

            Event event = null;
            try {
                event = m_execQ.remove(1000);
                if (event == null) // status check time
                {
                    continue; // goto top of loop
                }
            } catch (InterruptedException ex) {
                break;
            } catch (FifoQueueException ex) {
                log.warn("The input event queue has errors, exiting...", ex);
                break;
            }

            // check for reload event
            if (isReloadConfigEvent(event)) {
                try {
                    ScriptdConfigFactory.reload();
                    m_config = ScriptdConfigFactory.getInstance();
                    loadConfig();

                    ReloadScript[] reloadScripts = m_config.getReloadScripts();

                    for (int i = 0; i < reloadScripts.length; i++) {
                        try {
                            m_mgr.exec(reloadScripts[i].getLanguage(), "", 0, 0, reloadScripts[i].getContent());
                        }

                        catch (BSFException ex) {
                            log.error("Reload script[" + i + "] failed.", ex);
                        }
                    }

                    log.debug("Script configuration reloaded");
                }

                catch (Throwable ex) {
                    log.error("Unable to reload ScriptD configuration: ", ex);
                }
            }

            Script[] attachedScripts = event.getScript();

            List<EventScript> mapScripts = null;

            try {
                mapScripts = m_eventScriptMap.get(event.getUei());
            }

            catch (Throwable ex) {
            }

            if (attachedScripts.length > 0 || mapScripts != null || m_eventScripts.size() > 0) {
                log.debug("Executing scripts for: " + event.getUei());

                m_mgr.registerBean("event", event);

                // And the events node
                OnmsNode node = null;

                if (event.hasNodeid()) {
                    Long nodeLong = event.getNodeid();
                    Integer nodeInt = Integer.valueOf(nodeLong.intValue());
                    node = m_nodeDao.get(nodeInt);
                    m_mgr.registerBean("node", node);
                }

                // execute the scripts attached to the event

                log.debug("Executing attached scripts");
                if (attachedScripts.length > 0) {
                    for (int i = 0; i < attachedScripts.length; i++) {
                        try {
                            Script script = attachedScripts[i];
                            m_mgr.exec(script.getLanguage(), "", 0, 0, script.getContent());
                        }

                        catch (BSFException ex) {
                            log.error("Attached script [" + i + "] execution failed", ex);
                        }
                    }
                }

                // execute the scripts mapped to the UEI

                log.debug("Executing mapped scripts");
                if (mapScripts != null) {
                    for (int i = 0; i < mapScripts.size(); i++) {
                        try {
                            EventScript script = (EventScript) mapScripts.get(i);
                            m_mgr.exec(script.getLanguage(), "", 0, 0, script.getContent());
                        }

                        catch (BSFException ex) {
                            log.error("UEI-specific event handler script execution failed: " + event.getUei(), ex);
                        }
                    }
                }

                // execute the scripts that are not mapped to any UEI

                log.debug("Executing global scripts");
                for (int i = 0; i < m_eventScripts.size(); i++) {
                    try {
                        EventScript script = (EventScript) m_eventScripts.get(i);
                        m_mgr.exec(script.getLanguage(), "", 0, 0, script.getContent());
                    }

                    catch (BSFException ex) {
                        log.error("Non-UEI-specific event handler script [" + i + "] execution failed", ex);
                    }
                }

		if (node != null)
		    m_mgr.unregisterBean("node");
		
                m_mgr.unregisterBean("event");

                log.debug("Finished executing scripts for: " + event.getUei());

            }
        } // end infinite loop

        synchronized (this) {
            m_status = STOPPED;
        }

    } // end run

