    /**
     * {@inheritDoc}
     *
     * This method is invoked by the EventIpcManager when a new event is
     * available for processing. Each event's autoactions and trouble tickets
     * are queued to be run
     */
    @Override
    public void onEvent(Event event) {

        if (event == null) {
            return;
        }

        // Handle autoactions
        //
        Enumeration<Autoaction> walker = event.enumerateAutoaction();
        while (walker.hasMoreElements()) {
            try {
                Autoaction aact = walker.nextElement();
                if ("on".equalsIgnoreCase(aact.getState())) {
                    m_execQ.add(aact.getContent()); // java.lang.String
                }

                LOG.debug("Added event \'{}\' to execute autoaction \'{}\'", event.getUei(), aact.getContent());
            } catch (FifoQueueException ex) {
                LOG.error("Failed to add event to execution queue", ex);
                break;
            } catch (InterruptedException ex) {
                LOG.error("Failed to add event to execution queue", ex);
                break;
            }
        }

        // Handle trouble tickets
        //
        if (event.getTticket() != null && event.getTticket().getState().equalsIgnoreCase("on")) {
            try {
                m_execQ.add(event.getTticket().getContent()); // java.lang.String


                LOG.debug("Added event \'{}\' to execute tticket \'{}\'", event.getUei(), event.getTticket().getContent());
            } catch (FifoQueueException ex) {
                LOG.error("Failed to add event to execution queue", ex);
            } catch (InterruptedException ex) {
                LOG.error("Failed to add event to execution queue", ex);
            }
        }

    } // end onMessage()

