    /**
     * This method is responsible for generating a pathOutage event and
     * sending it
     *
     * @param nodeEntry Entry of node which was rescanned
     */
    private void createPathOutageEvent(long nodeid, String nodeLabel, String intfc, String svc, boolean noticeSupressed) {
        Category log = log();
	log.debug("nodeid = " + nodeid + ", nodeLabel = " + nodeLabel + ", noticeSupressed = " + noticeSupressed);
        Event newEvent = new Event();
        newEvent.setUei(EventConstants.PATH_OUTAGE_EVENT_UEI);
        newEvent.setSource("OpenNMS.notifd");
        newEvent.setNodeid(nodeid);
        newEvent.setTime(EventConstants.formatToString(new java.util.Date()));

        // Add appropriate parms
        Parms eventParms = new Parms();
        Parm eventParm = null;
        Value parmValue = null;

        // Add node label
        eventParm = new Parm();
        eventParm.setParmName(EventConstants.PARM_NODE_LABEL);
        parmValue = new Value();
        if (nodeLabel == null) {
            parmValue.setContent("");
        }
        else {
            parmValue.setContent(nodeLabel);
        }
        eventParm.setValue(parmValue);
        eventParms.addParm(eventParm);

        // Add critical path IP
        eventParm = new Parm();
        eventParm.setParmName(EventConstants.PARM_CRITICAL_PATH_IP);
        parmValue = new Value();
        parmValue.setContent(intfc);
        eventParm.setValue(parmValue);
        eventParms.addParm(eventParm);

        // Add critical path Svc
        eventParm = new Parm();
        eventParm.setParmName(EventConstants.PARM_CRITICAL_PATH_SVC);
        parmValue = new Value();
        parmValue.setContent(svc);
        eventParm.setValue(parmValue);
        eventParms.addParm(eventParm);

        // Add noticeSupressed
        eventParm = new Parm();
        eventParm.setParmName(EventConstants.PARM_CRITICAL_PATH_NOTICE_SUPRESSED);
        parmValue = new Value();
	if(noticeSupressed) {
            parmValue.setContent("true");
        } else {
            parmValue.setContent("false");
        }
        eventParm.setValue(parmValue);
        eventParms.addParm(eventParm);

        // Add Parms to the event
        newEvent.setParms(eventParms);

        // Send the event
        if (log.isDebugEnabled()) {
            log.debug("Creating pathOutageEvent for nodeid: " + nodeid);
        }
	try {
            EventIpcManagerFactory.getIpcManager().sendNow((Event) newEvent);
        } catch (Throwable t) {
            log.warn("run: unexpected throwable exception caught during send to middleware", t);
        }
    }

