    /* (non-Javadoc)
     * @see org.opennms.netmgt.notifd.NotificationStrategy#send(java.util.List)
     */
    @Override
    public int send(List<Argument> arguments) {
        m_arguments = arguments;
        String fileName = getFileName();
        String lang = getLangClass();
        String engine = getBsfEngine();
        String runType = getBsfRunType();
        String[] extensions = getFileExtensions();

        LOG.info("Loading notification script from file '{}'", fileName);
        File scriptFile = new File(fileName);
        BSFManager bsfManager = new BSFManager();
        int returnCode = -1;

        try {

            if(lang==null) lang = BSFManager.getLangFromFilename(fileName);

            // Declare some beans that can be used inside the script                    
            HashMap<String,String> results = new HashMap<String,String>();
            bsfManager.declareBean("results", results, Map.class);
            declareBeans(bsfManager);

            if(engine != null && lang != null && extensions != null && extensions.length > 0 ){
                BSFManager.registerScriptingEngine(lang, engine, extensions);
            }

            if(scriptFile.exists() && scriptFile.canRead()){   
                String code = IOUtils.getStringFromReader(new InputStreamReader(new FileInputStream(scriptFile), "UTF-8"));

                // Check foot before firing
                checkAberrantScriptBehaviors(code);

                // Execute the script
                if("eval".equals(runType)){
                    results.put("status", bsfManager.eval(lang, "BSFNotificationStrategy", 0, 0, code).toString());  
                }else if("exec".equals(runType)){
                    bsfManager.exec(lang, "BSFNotificationStrategy", 0, 0, code);
                }else{
                    LOG.warn("Invalid run-type parameter value '{}' for BSF notification script '{}'. Only 'eval' and 'exec' are supported.", runType, scriptFile);
                }

                // Check whether the script finished successfully
                if ("OK".equals(results.get("status"))) {
                    LOG.info("Execution succeeded and successful status passed back for script '{}'", scriptFile);
                    returnCode = 0;
                } else {
                    LOG.warn("Execution succeeded for script '{}', but script did not indicate successful notification by putting an entry into the 'results' bean with key 'status' and value 'OK'", scriptFile);
                    returnCode = -1;
                }
            } else {
                LOG.warn("Cannot locate or read BSF script file '{}'. Returning failure indication.", fileName);
                returnCode = -1;
            }
        } catch (BSFException e) {
            LOG.warn("Execution of script '{}' failed with BSFException: {}", scriptFile, e.getMessage(), e);
            returnCode = -1;
        } catch (FileNotFoundException e){
            LOG.warn("Could not find BSF script file '{}'.", fileName);
            returnCode = -1;
        } catch (IOException e) {
            LOG.warn("Execution of script '{}' failed with IOException: {}", scriptFile, e.getMessage(), e);
            returnCode = -1;
        } catch (Throwable e) {
            // Catch any RuntimeException throws
            LOG.warn("Execution of script '{}' failed with unexpected throwable: {}", scriptFile, e.getMessage(), e);
            returnCode = -1;
        } finally { 
            bsfManager.terminate();
        }

        return returnCode;
    }

