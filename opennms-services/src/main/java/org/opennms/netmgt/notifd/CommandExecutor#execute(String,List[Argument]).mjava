    /**
     * {@inheritDoc}
     *
     * This method executes the command using a Process. The method will decide
     * if an input stream needs to be used.
     */
    public int execute(String commandLine, List<Argument> arguments) {
        int returnCode = 0;
        ThreadCategory log = ThreadCategory.getInstance(getClass());

        List<String> commandList = new ArrayList<String>();
        commandList.add(commandLine);

        StringBuffer streamBuffer = new StringBuffer();
        boolean streamed = false;

        // put the non streamed arguments into the argument array
        for (Argument curArg : arguments) {
            // only non streamed arguments go into this list
            if (!curArg.isStreamed()) {
                if (curArg.getSubstitution() != null && !curArg.getSubstitution().trim().equals("")) {
                    commandList.add(curArg.getSubstitution());
                }
                if (curArg.getValue() != null && !curArg.getValue().trim().equals("")) {
                    commandList.add(curArg.getValue());
                }
            } else {
                streamed = true;
                log.debug("streamed argument found");

                if (curArg.getSubstitution() != null && !curArg.getSubstitution().trim().equals("")) {
                    streamBuffer.append(curArg.getSubstitution());
                }
                if (!curArg.getValue().trim().equals("")) {
                    streamBuffer.append(curArg.getValue());
                    if (log.isDebugEnabled()) {
                        log.debug("Streamed argument value: " + curArg.getValue());
                    }
                }
            }
        }

        try {
            // set up the process
            String commandArray[] = new String[commandList.size()];
            commandArray = commandList.toArray(commandArray);
            if (log.isDebugEnabled()) {
                StringBuffer list = new StringBuffer();
                list.append("{ ");
                for (int i = 0; i < commandArray.length; i++) {
                    if (i != 0) {
                        list.append(", ");
                    }
                    list.append(commandArray[i]);
                }
                list.append(" }");
                log.debug(list.toString());
            }

            Process command = Runtime.getRuntime().exec(commandArray);

            // see if we have streamed arguments
            if (streamed) {
                // make sure the output we are writing is buffered
                BufferedWriter processInput = new BufferedWriter(new OutputStreamWriter(command.getOutputStream(), "UTF-8"));

                // put the streamed arguments into the stream
                if (log.isDebugEnabled()) {
                    log.debug("Streamed arguments: " + streamBuffer.toString());
                }

                processInput.write(streamBuffer.toString());

                processInput.flush();
                processInput.close();
            }

            // now wait for 30 seconds for the command to complete, if it times
            // out log a message
            long timeout = 30000; // wait for 60 seconds
            long start = System.currentTimeMillis();
            String commandResult = "Command timed out (30 seconds)";
            while ((System.currentTimeMillis() - start) < timeout) {
                try {
                    returnCode = command.exitValue();
                    commandResult = "Command-line binary completed with return code " + returnCode;
                    break;
                } catch (IllegalThreadStateException e) {
                }

                synchronized (this) {
                    wait(1000);
                }
            }

            log.debug(commandResult);
        } catch (IOException e) {
            log.error("Error executing command-line binary: " + commandLine, e);
        } catch (InterruptedException e) {
            log.error("Error executing command-line binary: " + commandLine, e);
        }

        return returnCode;
    }

