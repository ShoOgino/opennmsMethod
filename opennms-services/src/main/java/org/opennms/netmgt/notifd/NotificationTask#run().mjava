    /**
     */
    public void run() {
        boolean outstanding = false;
        try {
            outstanding = getNotificationManager().noticeOutstanding(m_notifyId);
        } catch (Exception e) {
            log().error("Unable to get response status on notice #" + m_notifyId, e);
        }

        // check to see if someone has responded, if so remove all the brothers
        if (outstanding) {
            try {
                if (getUserManager().isUserOnDuty(m_user.getUserId(), Calendar.getInstance())) {
                    // send the notice

                    ExecutorStrategy command = null;
                    String cntct = "";

                    for (int i = 0; i < m_commands.length; i++) {
                        
                        cntct = getContactInfo(m_commands[i].getName());
                        try {
                            getNotificationManager().updateNoticeWithUserInfo(m_user.getUserId(), m_notifyId, m_commands[i].getName(), cntct, m_autoNotify);
                        } catch (Exception e) {
                            log().error("Could not insert notice info into database, aborting send notice", e);
                            continue;
                        }
                        String binaryCommand = m_commands[i].getBinary();
                        if (binaryCommand == null) {
                            log().error("binary flag not set for command: " + m_commands[i].getExecute() + ".  Guessing false.");
                            binaryCommand = "false";
                        }
                        if (binaryCommand.equals("true")) {
                            command = new CommandExecutor();
                        } else {
                            command = new ClassExecutor();
                        }
                        if (log().isDebugEnabled()) {
                            log().debug("Class created is: " + command.getClass());
                        }

                        int returnCode = command.execute(m_commands[i].getExecute(), getArgumentList(m_commands[i]));
                        if (log().isDebugEnabled()) {
                            log().debug("command " + m_commands[i].getName() + " return code = " + returnCode);
                        }
                    }
                } else {
                    if (log().isDebugEnabled()) {
                        log().debug("User " + m_user.getUserId() + " is not on duty, skipping");
                    }
                }
            } catch (IOException e) {
                log().warn("Could not get user duty schedule information: ", e);
            } catch (MarshalException e) {
                log().warn("Could not get user duty schedule information: ", e);
            } catch (ValidationException e) {
                log().warn("Could not get user duty schedule information: ", e);
            }
        } else {
            // remove all the related notices that have yet to be sent
            //for (int i = 0; i < m_siblings.size(); i++) {
            //    NotificationTask task = (NotificationTask) m_siblings.get(i);

                // FIXME: Reported on discuss list and not found to ever
                // be initialized anywhere.
                // m_notifTree.remove(task);
            //}
        }
    }

