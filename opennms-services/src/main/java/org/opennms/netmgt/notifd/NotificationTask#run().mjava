    /**
     * <p>run</p>
     */
    @Override
    public void run() {
        Logging.putPrefix(Notifd.getLoggingCategory());

        boolean outstanding = false;
        try {
            outstanding = getNotificationManager().noticeOutstanding(m_notifyId);
        } catch (Throwable e) {
            LOG.error("Unable to get response status on notice #{}", m_notifyId, e);
        }

        // check to see if someone has responded, if so remove all the brothers
        if (outstanding) {
            try {
                if (getUserManager().isUserOnDuty(m_user.getUserId(), Calendar.getInstance())) {

                    // send the notice
                    ExecutorStrategy strategy = null;
                    String cntct = "";

                    for (Command command : m_commands) {
                        try {
                            cntct = getContactInfo(command.getName());
                            try {
                                getNotificationManager().updateNoticeWithUserInfo(m_user.getUserId(), m_notifyId, command.getName(), cntct, m_autoNotify);
                            } catch (Throwable e) {
                                LOG.error("Could not insert notice info into database, aborting send notice", e);
                                continue;
                            }
                            Boolean binaryCommand = command.getBinary();
                            if (binaryCommand) {
                                strategy = new CommandExecutor();
                            } else {
                                strategy = new ClassExecutor();
                            }
                            LOG.debug("Class created is: {}", command.getClass());

                            getNotificationManager().incrementAttempted(strategy instanceof CommandExecutor);
                            
                            int returnCode = strategy.execute(command.getExecute(), getArgumentList(command));
                            LOG.debug("command {} return code = {}", command.getName(), returnCode);
                            
                            if (returnCode == 0) {
                                getNotificationManager().incrementSucceeded(strategy instanceof CommandExecutor);
                            } else {
                                getNotificationManager().incrementFailed(strategy instanceof CommandExecutor);
                            }
                        } catch (Throwable e) {
                            LOG.warn("Notification command failed: {}", command.getName(), e);
                            if (strategy == null) {
                                getNotificationManager().incrementUnknownInterrupted();
                            } else {
                                getNotificationManager().incrementInterrupted(strategy instanceof CommandExecutor);
                            }
                        }
                    }
                } else {
                    LOG.debug("User {} is not on duty, skipping", m_user.getUserId());
                }
            } catch (IOException e) {
                LOG.warn("Could not get user duty schedule information: ", e);
            }
        } else {
            // remove all the related notices that have yet to be sent
            //for (int i = 0; i < m_siblings.size(); i++) {
            //    NotificationTask task = (NotificationTask) m_siblings.get(i);

            // FIXME: Reported on discuss list and not found to ever
            // be initialized anywhere.
            // m_notifTree.remove(task);
            //}
        }
    }

