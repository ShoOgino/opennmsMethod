    /**
     * {@inheritDoc}
     *
     * This method is invoked by the EventIpcManager when a new event is
     * available for processing.
     */
    @Override
    public void onEvent(Event event) {
        if (event == null) return;

        if (isReloadConfigEvent(event)) {
            LOG.info("onEvent: handling reload configuration event...");
            EventBuilder ebldr = null;
            try {
                m_userManager.update();
                m_groupManager.update();
                m_notificationManager.update();
                m_destinationPathManager.update();
                m_notificationCommandManager.update();
                ebldr = new EventBuilder(EventConstants.RELOAD_DAEMON_CONFIG_SUCCESSFUL_UEI, getName());
                ebldr.addParam(EventConstants.PARM_DAEMON_NAME, "Notifd");
            } catch (Throwable e) {
                LOG.debug("onEvent: could not reload notifd configuration", e);
                ebldr = new EventBuilder(EventConstants.RELOAD_DAEMON_CONFIG_FAILED_UEI, getName());
                ebldr.addParam(EventConstants.PARM_DAEMON_NAME, "Notifd");
                ebldr.addParam(EventConstants.PARM_REASON, e.getLocalizedMessage().substring(0, 128));
            }
            m_eventManager.sendNow(ebldr.getEvent());
            LOG.info("onEvent: reload configuration event handled.");
            return;
        }

        if (event.getLogmsg() != null && event.getLogmsg().getDest().equalsIgnoreCase("donotpersist")) {
            LOG.warn("discarding event {}, the event has been configured as 'doNotPersist'.", event.getUei());
            return;
        }
        if (event.getAlarmData() != null && event.getAlarmData().isAutoClean()) {
            LOG.warn("discarding event {}, the event has been configured with autoClean=true on its alarmData.", event.getUei());
            return;
        }

        boolean notifsOn = computeNullSafeStatus();

        if (notifsOn && (checkCriticalPath(event, notifsOn))) {
            scheduleNoticesForEvent(event);
        } else if (!notifsOn) {
            LOG.debug("discarding event {}, notifd status on = {}", event.getUei(), notifsOn);
        }
        automaticAcknowledge(event, notifsOn);
    }

