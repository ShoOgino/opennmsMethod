    /**
     * This method is invoked by the EventIpcManager when a new event is
     * available for processing.
     * 
     * @param event
     *            The event .
     */
    public void onEvent(Event event) {
        
        if (isReloadConfigEvent(event)) {
            log().info("onEvent: handling reload configuration event...");
            EventBuilder ebldr = null;
            try {
                m_userManager.update();
                m_groupManager.update();
                m_notificationManager.update();
                m_destinationPathManager.update();
                m_notificationCommandManager.update();
                ebldr = new EventBuilder(EventConstants.RELOAD_DAEMON_CONFIG_SUCCESSFUL_UEI, getName());
                ebldr.addParam(EventConstants.PARM_DAEMON_NAME, "Notifd");
            } catch (Exception e) {
                log().debug("onEvent: could not reload notifd configuration: "+e, e);
                ebldr = new EventBuilder(EventConstants.RELOAD_DAEMON_CONFIG_FAILED_UEI, getName());
                ebldr.addParam(EventConstants.PARM_DAEMON_NAME, "Notifd");
                ebldr.addParam(EventConstants.PARM_REASON, e.getLocalizedMessage().substring(0, 128));
            }
            m_eventManager.sendNow(ebldr.getEvent());
            log().info("onEvent: reload configuration event handled.");
            return;
        }
        
        if (event == null) return;

        boolean notifsOn = computeNullSafeStatus();

        if (notifsOn && (checkCriticalPath(event, notifsOn))) {
            scheduleNoticesForEvent(event);
        } else if (!notifsOn) {
            if (log().isDebugEnabled()) {
                log().debug("discarding event " + event.getUei() + ", notifd status on = " + notifsOn);
            }
        }
        automaticAcknowledge(event, notifsOn);
    }

