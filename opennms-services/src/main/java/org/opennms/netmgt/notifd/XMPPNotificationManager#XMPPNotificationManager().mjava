	/**
	 * <p>Constructor for XMPPNotificationManager.</p>
	 */
	protected XMPPNotificationManager() {
	    // mdc may be null when executing via unit tests
		Map<String,String> mdc = Logging.getCopyOfContextMap();
        try {
            if (mdc != null) {
                mdc.put(Logging.PREFIX_KEY, LOG4J_CATEGORY);
            }

			// Load up some properties
			File config = null;
			try {
				config = ConfigFileConstants.getFile(ConfigFileConstants.XMPP_CONFIG_FILE_NAME);
			} catch (IOException e) {
				LOG.warn("{} not readable", ConfigFileConstants.XMPP_CONFIG_FILE_NAME, e);
			}
			if (Boolean.getBoolean("useSystemXMPPConfig") || !config.canRead()) {
				this.props.putAll(System.getProperties());
			} else {
				FileInputStream fis = null;
				try {
					fis = new FileInputStream(config);
					this.props.load(fis);
				} catch (FileNotFoundException e) {
					LOG.warn("unable to load {}", config, e);
				} catch (IOException e) {
					LOG.warn("unable to load {}", config, e);
				} finally {
					IOUtils.closeQuietly(fis);
				}
			}

			xmppServer = this.props.getProperty("xmpp.server");
			String xmppServiceName = this.props.getProperty("xmpp.servicename", xmppServer);
			xmppUser = this.props.getProperty("xmpp.user");
			xmppPassword = this.props.getProperty("xmpp.pass");
			xmppPort = Integer.valueOf(this.props.getProperty("xmpp.port", XMPP_PORT));

			ConnectionConfiguration xmppConfig = new ConnectionConfiguration(xmppServer, xmppPort, xmppServiceName);

			boolean debuggerEnabled = Boolean.parseBoolean(props.getProperty("xmpp.debuggerEnabled"));
			xmppConfig.setDebuggerEnabled(debuggerEnabled);

			if (Boolean.parseBoolean(props.getProperty("xmpp.TLSEnabled"))) {
				xmppConfig.setSecurityMode(SecurityMode.enabled);
			} else {
				xmppConfig.setSecurityMode(SecurityMode.disabled);
			}

			if (Boolean.parseBoolean(props.getProperty("xmpp.selfSignedCertificateEnabled"))) {
	            try {
	                SSLContext ctx = SSLContext.getInstance("TLS");
	                ctx.init(null, new TrustManager[] { new LocalSSLTrustManager() }, null);
	                xmppConfig.setCustomSSLContext(ctx);
	            } catch (NoSuchAlgorithmException | KeyManagementException e) {
	                LOG.error("Failed to create a custom SSL context", e);
	            }
			}

			// Remove all SALS mechanisms when SASL is disabled
			// There is currently no option to do this on a per-connection basis
			// so we must do it globally.
			if (!Boolean.parseBoolean(props.getProperty("xmpp.SASLEnabled", "true"))) {
			    LOG.info("Removing all SALS mechanisms from Smack.");
			    SmackConfiguration.removeSaslMechs(SmackConfiguration.getSaslMechs());
			}

			LOG.debug("XMPP Manager connection config: {}", xmppConfig);

			xmpp = new XMPPTCPConnection(xmppConfig);

			// Connect to xmpp server
			connectToServer();
		} finally {
		    if (mdc != null) {
		        Logging.setContextMap(mdc);
		    }
		}
	}

