	protected XMPPNotificationManager() {

		// get the category logger
		
		ThreadCategory.setPrefix(LOG4J_CATEGORY);
		
		// Load up some properties

		try {
			this.props.load(new FileInputStream(ConfigFileConstants
					.getFile(ConfigFileConstants.XMPP_CONFIG_FILE_NAME)));
			xmppServer = this.props.getProperty("xmpp.server");
			xmppUser = this.props.getProperty("xmpp.user");
			xmppPassword = this.props.getProperty("xmpp.pass");
			if (this.props.containsKey("xmpp.port")) {
				xmppPort = Integer.valueOf(this.props.getProperty("xmpp.port"));
			} else {
				xmppPort = XMPP_PORT;
			}
			if (this.props.containsKey("xmpp.useSSL")
					& this.props.getProperty("xmpp.useSSL").equals("true"))
				useSSL = true;
			else
				useSSL = false;
		} catch (Exception e) {
			log().error(e.getMessage());
		}

		// Connect to xmpp server

		try {
			if (useSSL) {
				// This will only work with later versions of the smack library
				log().debug("Attempting Legacy SSL XMPP Connection to " + xmppServer + ":" + xmppPort);
				xmpp = new SSLXMPPConnection(xmppServer,xmppPort);
			}
			else {
				log().debug("Attempting vanilla XMPP Connection to " + xmppServer + ":" + xmppPort);
				xmpp = new XMPPConnection(xmppServer,xmppPort);
			}
			if (xmpp.isConnected()) {
				log().debug("XMPP Manager successfully connected");
				// Oh dear, this is all in a later version of the library
				/* if (xmpp.isSecureConnection()) 
					log().debug("XMPP Manager successfully nogotiated a secure connection");
				if (xmpp.isUsingTLS()) 
					log().debug("XMPP Manager successfully nogotiated a TLS connection");
				log().debug("XMPP Manager Connected"); */
				login();
				// Add connection listener
				xmpp.addConnectionListener(conlistener);
			} else {
				log().debug("XMPP Manager Not Connected");
			}
		} catch (Exception e) {
			log().fatal("XMPP Manager unable to connect : ", e);
		}

	}

