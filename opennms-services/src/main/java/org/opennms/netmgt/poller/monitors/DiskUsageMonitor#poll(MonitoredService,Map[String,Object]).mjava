    /**
     * {@inheritDoc}
     *
     * The poll() method is responsible for polling the specified address for
     * SNMP service availability.
     *
     * @param svc
     * @param parameters
     * @return PollStatus
     * <p>
     * @exception RuntimeException
     *                             Thrown for any unrecoverable errors.
     */
    @Override
    public PollStatus poll(final MonitoredService svc, final Map<String, Object> parameters) {
        MatchType matchType = MatchType.EXACT;
        RequireType reqType = RequireType.ALL;

        NetworkInterface<InetAddress> iface = svc.getNetInterface();

        PollStatus status = PollStatus.available();
        InetAddress ipaddr = (InetAddress) iface.getAddress();

        // Retrieve this interface's SNMP peer object
        //
        SnmpAgentConfig agentConfig = SnmpPeerFactory.getInstance().getAgentConfig(ipaddr);
        if (agentConfig == null) {
            throw new RuntimeException("SnmpAgentConfig object not available for interface " + ipaddr);
        }
        final String hostAddress = InetAddressUtils.str(ipaddr);
        LOG.debug("poll: setting SNMP peer attribute for interface {}", hostAddress);

        agentConfig.setTimeout(ParameterMap.getKeyedInteger(parameters, "timeout", agentConfig.getTimeout()));
        agentConfig.setRetries(ParameterMap.getKeyedInteger(parameters, "retry", ParameterMap.getKeyedInteger(parameters, "retries", agentConfig.getRetries())));
        agentConfig.setPort(ParameterMap.getKeyedInteger(parameters, "port", agentConfig.getPort()));

        String diskNamePattern = ParameterMap.getKeyedString(parameters, "disk", null);
        if (diskNamePattern == null) {
            throw new RuntimeException("Invalid null value for parameter 'disk'");
        }
        Integer percentFree = ParameterMap.getKeyedInteger(parameters, "free", 15);

        String matchTypeStr = ParameterMap.getKeyedString(parameters, "match-type", "exact");
        try {
            matchType = MatchType.valueOf(matchTypeStr.toUpperCase());
        } catch (IllegalArgumentException e) {
            throw new RuntimeException("Unknown value '" + matchTypeStr + "' for parameter 'match-type'");
        }

        String reqTypeStr = ParameterMap.getKeyedString(parameters, "require-type", "all");
        try {
            reqType = RequireType.valueOf(reqTypeStr.toUpperCase());
        } catch (IllegalArgumentException e) {
            throw new RuntimeException("Unknown value '" + reqTypeStr + "' for parameter 'require-type'");
        }

        LOG.debug("poll: diskNamePattern={}", diskNamePattern);
        LOG.debug("poll: percentfree={}", percentFree);
        LOG.debug("poll: matchType={}", matchTypeStr);
        LOG.debug("poll: reqType={}", reqTypeStr);

        LOG.debug("poll: service={} address={}", svc, agentConfig);

        try {
            LOG.debug("poll: SnmpAgentConfig address: {}", agentConfig);
            SnmpObjId hrStorageDescrSnmpObject = SnmpObjId.get(hrStorageDescr);

            Map<SnmpInstId, SnmpValue> results = SnmpUtils.getOidValues(agentConfig, "DiskUsagePoller", hrStorageDescrSnmpObject);

            if (results.isEmpty()) {
                LOG.debug("SNMP poll failed: no results, addr={} oid={}", hostAddress, hrStorageDescrSnmpObject);
                return PollStatus.unavailable("No entries found in hrStorageDescr");
            }

            boolean foundDisk = false;

            for (Map.Entry<SnmpInstId, SnmpValue> e : results.entrySet()) {
                LOG.debug("poll: SNMPwalk poll succeeded, addr={} oid={} instance={} value={}", hostAddress, hrStorageDescrSnmpObject, e.getKey(), e.getValue());
                final String snmpInstance = e.getKey().toString();
                final String diskName = e.getValue().toString();

                if (isMatch(diskName, diskNamePattern, matchType)) {
                    LOG.debug("poll: found disk={}", diskName);

                    final SnmpObjId hrStorageSizeSnmpObject = SnmpObjId.get(hrStorageSize, snmpInstance);
                    final SnmpObjId hrStorageUsedSnmpObject = SnmpObjId.get(hrStorageUsed, snmpInstance);

                    final SnmpValue snmpSize = SnmpUtils.get(agentConfig, hrStorageSizeSnmpObject);
                    final SnmpValue snmpUsed = SnmpUtils.get(agentConfig, hrStorageUsedSnmpObject);
                    float calculatedPercentage = ((((float) snmpSize.toLong() - (float) snmpUsed.toLong()) / (float) snmpSize.toLong())) * 100;

                    LOG.debug("poll: calculatedPercentage={} percentFree={}", calculatedPercentage, percentFree);

                    if (calculatedPercentage < percentFree) {

                        return PollStatus.unavailable(diskName + " usage high (" + (100 - (int) calculatedPercentage) + "%)");

                    } else {
                        if (matchType == MatchType.EXACT || reqType == RequireType.ANY) {
                            return status;
                        }
                        if (reqType == RequireType.ALL) {
                            foundDisk = true;
                        }
                    }
                }
            }

            if (foundDisk) {
                return status;
            }
            // if we get here.. it means we did not find the disk...  which means we should not be monitoring it.
            LOG.debug("poll: no disks found");
            return PollStatus.unavailable("Could not find " + diskNamePattern + " in hrStorageTable");

        } catch (NumberFormatException e) {
            String reason = "Number operator used on a non-number " + e.getMessage();
            LOG.debug(reason);
            status = PollStatus.unavailable(reason);
        } catch (IllegalArgumentException e) {
            String reason = "Invalid SNMP Criteria: " + e.getMessage();
            LOG.debug(reason);
            status = PollStatus.unavailable(reason);
        } catch (Throwable t) {
            String reason = "Unexpected exception during SNMP poll of interface " + hostAddress;
            LOG.debug(reason, t);
            status = PollStatus.unavailable(reason);
        }

        return status;
    }

