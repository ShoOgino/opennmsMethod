    /**
     * <P>
     * Poll the specified address for DNS service availability.
     * </P>
     * 
     * <P>
     * During the poll an DNS address request query packet is generated for
     * hostname 'localhost'. The query is sent via UDP socket to the interface
     * at the specified port (by default UDP port 53). If a response is
     * received, it is parsed and validated. If the DNS lookup was successful
     * the service status is set to SERVICE_AVAILABLE and the method returns.
     * </P>
     * @param parameters
     *            The package parameters (timeout, retry, etc...) to be used for
     *            this poll.
     * @param iface
     *            The network interface to test the service on.
     * @return The availibility of the interface and if a transition event
     *         should be supressed.
     * 
     */
    public PollStatus poll(MonitoredService svc, Map parameters) {
        NetworkInterface iface = svc.getNetInterface();

        //
        // Get interface address from NetworkInterface
        //
        if (iface.getType() != NetworkInterface.TYPE_IPV4)
            throw new NetworkInterfaceNotSupportedException("Unsupported interface type, only TYPE_IPV4 currently supported");

        // get the parameters
        //
        TimeoutTracker timeoutTracker = new TimeoutTracker(parameters, DEFAULT_RETRY, DEFAULT_TIMEOUT);
        int port = ParameterMap.getKeyedInteger(parameters, "port", DEFAULT_PORT);

        // Host to lookup?
        //
        String lookup = ParameterMap.getKeyedString(parameters, "lookup", null);
        if (lookup == null || lookup.length() == 0) {
            // Get hostname of local machine for future DNS lookups
            //
            try {
                lookup = InetAddress.getLocalHost().getHostName();
            } catch (UnknownHostException ukE) {
                // Recast the exception as a Service Monitor Exception
                //
                ukE.fillInStackTrace();
                throw new UndeclaredThrowableException(ukE);
            }
        }

        // get the address and DNS address request
        //
        InetAddress ipv4Addr = (InetAddress) iface.getAddress();
        DNSAddressRequest request = new DNSAddressRequest(lookup);

        PollStatus serviceStatus = PollStatus.unavailable();
        DatagramSocket socket = null;
        try {
            socket = new DatagramSocket();
            socket.setSoTimeout(timeoutTracker.getSoTimeout()); // will force the InterruptedIOException

            for (timeoutTracker.reset(); timeoutTracker.shouldRetry() && !serviceStatus.isAvailable(); timeoutTracker.nextAttempt()) {
                try {
                    // Send DNS request
                    //
                    byte[] data = request.buildRequest();
                    DatagramPacket outgoing = new DatagramPacket(data, data.length, ipv4Addr, port);
                    
                    byte[] buffer = new byte[512];
                    DatagramPacket incoming = new DatagramPacket(buffer, buffer.length);

                    timeoutTracker.startAttempt();

                    socket.send(outgoing);

                    // Get DNS Response
                    socket.receive(incoming);

                    double responseTime = timeoutTracker.elapsedTimeInMillis();

                    // Validate DNS Response
                    // IOException thrown if packet does not decode as expected.
                    request.verifyResponse(incoming.getData(), incoming.getLength());
                    
                    serviceStatus = logUp(Level.DEBUG, responseTime, "valid DNS request received, responseTime= " + responseTime + "ms");

                } catch (InterruptedIOException ex) {
                    // Ignore, no response received.
                } catch (NoRouteToHostException e) {
                    serviceStatus = logDown(Level.DEBUG, "No route to host exception for address: " + ipv4Addr, e);
                } catch (ConnectException e) {
                    serviceStatus = logDown(Level.DEBUG, "Connection exception for address: " + ipv4Addr, e);
                } catch (IOException ex) {
                    serviceStatus = logDown(Level.DEBUG, "IOException while polling address: " + ipv4Addr, ex);
                }
            }
        } catch (IOException ex) {
            serviceStatus = logDown(Level.DEBUG, "Failed to create Datagram Socket for : " + ipv4Addr, ex);
        } finally {
            if (socket != null)
                socket.close();
        }

        // 
        //
        // return the status of the service
        //
        return serviceStatus;
    }

