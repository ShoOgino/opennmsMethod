    /**
     * Update an RRD database file with multiple latency/response time data sources.
     * 
     * @param rrdJniInterface
     *            interface used to issue RRD commands.
     * @param repository
     *            path to the RRD file repository
     * @param addr
     *            interface address
     * @param entries
     *            the entries for the rrd, containing a Map of dsNames to values
     */
	
    public void updateRRD(String repository, InetAddress addr, String rrdBaseName, LinkedHashMap<String, Number> entries) {
        try {
            // Create RRD if it doesn't already exist
        	List<RrdDataSource> dsList = new ArrayList<RrdDataSource>();
        	for (String dsName : entries.keySet()) {
        		dsList.add(new RrdDataSource(dsName, "GAUGE", m_pollerConfig.getStep(m_pkg)*2, "U", "U"));
        	}
            createRRD(repository, addr, rrdBaseName, dsList);

            // add interface address to RRD repository path
            String path = repository + File.separator + addr.getHostAddress();

            StringBuffer value = new StringBuffer();
            Iterator<String> i = entries.keySet().iterator();
            while (i.hasNext()) {
            	Number num = entries.get(i.next());
            	if (num == null || Double.isNaN(num.doubleValue())) {
            		value.append("U");
            	} else {
                	NumberFormat nf = NumberFormat.getInstance();
                	nf.setGroupingUsed(false);
                	nf.setMinimumFractionDigits(0);
                	nf.setMaximumFractionDigits(Integer.MAX_VALUE);
                	nf.setMinimumIntegerDigits(0);
                	nf.setMaximumFractionDigits(Integer.MAX_VALUE);
                	value.append(nf.format(num.doubleValue()));
            	}
            	if (i.hasNext()) {
            		value.append(":");
            	}
            }
            RrdUtils.updateRRD(addr.getHostAddress(), path, rrdBaseName, value.toString());

        } catch (RrdException e) {
            if (log().isEnabledFor(Level.ERROR)) {
                String msg = e.getMessage();
                log().error(msg);
                throw new RuntimeException(msg, e);
            }
        }
    }

