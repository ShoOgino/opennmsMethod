    /**
     * <P>
     * The poll() method is responsible for polling the specified address for
     * SNMP service availability.
     * </P>
     * @param parameters
     *            The package parameters (timeout, retry, etc...) to be used for
     *            this poll.
     * @param iface
     *            The network interface to test the service on.
     * 
     * @return The availability of the interface and if a transition event
     *         should be supressed.
     * 
     * @exception RuntimeException
     *                Thrown for any uncrecoverable errors.
     */
    public int checkStatus(MonitoredService svc, Map parameters, org.opennms.netmgt.config.poller.Package pkg) {
        NetworkInterface iface = svc.getNetInterface();

        // Log4j category
        //
        Category log = ThreadCategory.getInstance(getClass());

        int status = ServiceMonitor.SERVICE_UNAVAILABLE;
        InetAddress ipaddr = (InetAddress) iface.getAddress();

        // Retrieve this interface's SNMP peer object
        //
        SnmpAgentConfig agentConfig = (SnmpAgentConfig) iface.getAttribute(SNMP_AGENTCONFIG_KEY);
        if (agentConfig == null)
            throw new RuntimeException("SnmpAgentConfig object not available for interface " + ipaddr);

        // Get configuration parameters
        //
        int timeout = ParameterMap.getKeyedInteger(parameters, "timeout", agentConfig.getTimeout());
        int retries = ParameterMap.getKeyedInteger(parameters, "retries", agentConfig.getRetries());
        int port = ParameterMap.getKeyedInteger(parameters, "port", DEFAULT_PORT);
        String oid = ParameterMap.getKeyedString(parameters, "oid", DEFAULT_OBJECT_IDENTIFIER);
        String operator = ParameterMap.getKeyedString(parameters, "operator", null);
        String operand = ParameterMap.getKeyedString(parameters, "operand", null);

        // set timeout and retries on SNMP peer object
        //
        agentConfig.setTimeout(timeout);
        agentConfig.setRetries(retries);
        agentConfig.setPort(port);

        if (log.isDebugEnabled())
            log.debug("poll: service= SNMP address= " + agentConfig);

        // Establish SNMP session with interface
        //
        try {
            if (log.isDebugEnabled()) {
                log.debug("SnmpMonitor.poll: SnmpAgentConfig address: " +agentConfig);
            }
            SnmpObjId snmpObjectId = new SnmpObjId(oid);
            
            SnmpValue result = SnmpUtils.get(agentConfig, snmpObjectId);

            if (result != null) {
                log.debug("poll: SNMP poll succeeded, addr=" + ipaddr.getHostAddress() + " oid=" + oid + " value=" + result);
                status = (meetsCriteria(result, operator, operand) ? ServiceMonitor.SERVICE_AVAILABLE : ServiceMonitor.SERVICE_UNAVAILABLE);
            } else {
                log.debug("poll: SNMP poll failed, addr=" + ipaddr.getHostAddress() + " oid=" + oid);
                status = ServiceMonitor.SERVICE_UNAVAILABLE;
            }
            
        } catch (NumberFormatException e) {
            log.error("Number operator used on a non-number " + e.getMessage());
            status = ServiceMonitor.SERVICE_UNAVAILABLE;
        } catch (IllegalArgumentException e) {
            log.error("Invalid Snmp Criteria: " + e.getMessage());
            status = ServiceMonitor.SERVICE_UNAVAILABLE;
        } catch (Throwable t) {
            log.warn("poll: Unexpected exception during SNMP poll of interface " + ipaddr.getHostAddress(), t);
            status = ServiceMonitor.SERVICE_UNAVAILABLE;
        }

        return status;
    }

