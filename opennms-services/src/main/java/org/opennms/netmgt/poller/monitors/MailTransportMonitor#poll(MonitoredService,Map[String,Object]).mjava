    /** {@inheritDoc} */
    @Override
    public PollStatus poll(MonitoredService svc, Map<String, Object> parameters) {
        PollStatus status = null;

        try {
            final MailTransportParameters mailParms = MailTransportParameters.get(parameters);

            try {
                if ("${ipaddr}".equals(mailParms.getReadTestHost())) {
                    mailParms.setReadTestHost(svc.getIpAddr());
                }
            } catch (final IllegalStateException ise) {
                //just ignore, don't have to have a both a read and send test configured
            }

            try {
                if ("${ipaddr}".equals(mailParms.getSendTestHost())) {
                    mailParms.setSendTestHost(svc.getIpAddr());
                }
            } catch (final IllegalStateException ise) {
                //just ignore, don't have to have a both a read and send test configured
            }

            parseJavaMailProperties(mailParms);
            status = doMailTest(mailParms);
        } catch (final IllegalStateException ise) {
            //ignore this because we don't have to have both a send and read

        } catch (final Throwable e) {
            LOG.error("An error occurred while polling.", e);
            status = PollStatus.down("Exception from mailer: " + e.getLocalizedMessage());
        }

        return status;
    }

