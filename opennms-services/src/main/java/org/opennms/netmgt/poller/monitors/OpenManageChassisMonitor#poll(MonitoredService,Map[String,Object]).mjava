    /**
     * {@inheritDoc}
     *
     * <P>
     * The poll() method is responsible for polling the specified address for
     * SNMP service availability.
     * </P>
     * @exception RuntimeException
     *                Thrown for any uncrecoverable errors.
     */
    @Override
    public PollStatus poll(MonitoredService svc, Map<String,Object> parameters) {
        NetworkInterface<InetAddress> iface = svc.getNetInterface();

        String returnValue = "";

        PollStatus status = PollStatus.unavailable();
        InetAddress ipaddr = (InetAddress) iface.getAddress();

        // Initialize the messages if the session is down
        String eventLogStatusTxt = "N/A";
        String manufacturerName = "N/A";
        String modelName = "N/A";
        String serviceTagTxt = "N/A";
        String chassisStatusTxt = "N/A";

        // Retrieve this interface's SNMP peer object
        //
        SnmpAgentConfig agentConfig = SnmpPeerFactory.getInstance().getAgentConfig(ipaddr);
        if (agentConfig == null)
            throw new RuntimeException("SnmpAgentConfig object not available for interface " + ipaddr);
        final String hostAddress = InetAddressUtils.str(ipaddr);
		LOG.debug("poll: setting SNMP peer attribute for interface " + hostAddress);

        // set timeout and retries on SNMP peer object
        //
        agentConfig.setTimeout(ParameterMap.getKeyedInteger(parameters, "timeout", agentConfig.getTimeout()));
        agentConfig.setRetries(ParameterMap.getKeyedInteger(parameters, "retry", ParameterMap.getKeyedInteger(parameters, "retries", agentConfig.getRetries())));
        agentConfig.setPort(ParameterMap.getKeyedInteger(parameters, "port", agentConfig.getPort()));

        // Establish SNMP session with interface
        //
        try {
            if (LOG.isDebugEnabled()) {
                LOG.debug("poll: SnmpAgentConfig address: " + agentConfig);
            }

            // Get the chassis status
            SnmpObjId chassisStatusSnmpObject = SnmpObjId.get(CHASSIS_STATUS_OID);
            SnmpValue chassisStatus = SnmpUtils.get(agentConfig, chassisStatusSnmpObject);

            // If no chassis status is received or SNMP is not possible,
            // service is down
            if (chassisStatus == null) {
                LOG.warn("No chassis status received!");
                return status;
            } else {
                if (LOG.isDebugEnabled()) {
                    LOG.debug("poll: chassis status: " + chassisStatus);
                }
            }

            /*
             * Do no unnecessary SNMP requests, if chassis status is OK,
             * return with service available and go away.
             */
            if (chassisStatus.toInt() == DELL_STATUS.OK.value()) {
                if (LOG.isDebugEnabled()) {
                    LOG.debug("poll: chassis status: " + chassisStatus.toInt());
                }
                return PollStatus.available();
            } else {
                if (LOG.isDebugEnabled()) {
                    LOG.debug("poll: chassis status: " + chassisStatus.toInt());
                }
                chassisStatusTxt = resolveDellStatus(chassisStatus.toInt());
            }

            // Chassis status is not OK gather some information
            SnmpObjId eventLogStatusSnmpObject = SnmpObjId.get(EVENT_LOG_STATUS_OID);
            SnmpValue eventLogStatus = SnmpUtils.get(agentConfig, eventLogStatusSnmpObject);
            // Check correct MIB-Support
            if (eventLogStatus == null) {
                LOG.warn("Cannot receive eventLogStatus.");
            } else {
                if (LOG.isDebugEnabled()) {
                    LOG.debug("poll: eventLogStatus: " + eventLogStatus);
                }
                eventLogStatusTxt = resolveDellStatus(eventLogStatus.toInt());
            }

            SnmpObjId manufacturerSnmpObject = SnmpObjId.get(MANUFACTURER_OID);
            SnmpValue manufacturer = SnmpUtils.get(agentConfig, manufacturerSnmpObject);
            // Check correct MIB-Support
            if (manufacturer == null) {
                LOG.warn("Cannot receive manufacturer.");
            } else {
                if (LOG.isDebugEnabled()) {
                    LOG.debug("poll: manufacturer: " + manufacturer);
                }
                manufacturerName = manufacturer.toString();
            }

            SnmpObjId modelSnmpObject = SnmpObjId.get(MODEL_NAME_OID);
            SnmpValue model = SnmpUtils.get(agentConfig, modelSnmpObject);
            // Check correct MIB-Support
            if (model == null) {
                LOG.warn("Cannot receive model name.");
            } else {
                if (LOG.isDebugEnabled()) {
                    LOG.debug("poll: model name: " + model);
                }
                modelName = model.toString();
            }

            SnmpObjId serviceTagSnmpObject = SnmpObjId.get(SERVICE_TAG_OID);
            SnmpValue serviceTag = SnmpUtils.get(agentConfig, serviceTagSnmpObject);
            // Check correct MIB-Support
            if (serviceTag == null) {
                LOG.warn("Cannot receive service tag");
            } else {
                if (LOG.isDebugEnabled()) {
                    LOG.debug("poll: service tag: " + serviceTag);
                }
                serviceTagTxt = serviceTag.toString();
            }

            returnValue = "Chassis status from " + manufacturerName + " " + modelName + " with service tag " + serviceTagTxt + " is " + chassisStatusTxt
                    + ". Last event log status is " + eventLogStatusTxt + ". For further information, check your OpenManage website!";
            // Set service down and return gathered information
            status = PollStatus.unavailable(returnValue);

        } catch (NullPointerException e) {
            String reason = "Unexpected error during SNMP poll of interface " + hostAddress;
            LOG.debug(reason, e);
            status = PollStatus.unavailable(reason);
        } catch (NumberFormatException e) {
            String reason = "Number operator used on a non-number " + e.getMessage();
            LOG.debug(reason);
            status = PollStatus.unavailable(reason);
        } catch (IllegalArgumentException e) {
            String reason = "Invalid SNMP Criteria: " + e.getMessage();
            LOG.debug(reason);
            status = PollStatus.unavailable(reason);
        } catch (Throwable t) {
            String reason = "Unexpected exception during SNMP poll of interface " + hostAddress;
            LOG.debug(reason, t);
            status = PollStatus.unavailable(reason);
        }

        // If matchAll is set to true, then the status is set to available
        // above with a single match.
        // Otherwise, the service will be unavailable.
        return status;
    }

