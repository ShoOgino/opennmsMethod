    private int scheduleServices() {
        final Criteria criteria = new Criteria(OnmsMonitoredService.class);
        criteria.addRestriction(new InRestriction("status", Arrays.asList("A", "N")));

        return m_transactionTemplate.execute(new TransactionCallback<Integer>() {
            @Override
            public Integer doInTransaction(TransactionStatus arg0) {
                final List<OnmsMonitoredService> services =  m_monitoredServiceDao.findMatching(criteria);
                for (OnmsMonitoredService service : services) {
                    final OnmsIpInterface iface = service.getIpInterface();
                    final Set<OnmsOutage> outages = service.getCurrentOutages();
                    final OnmsOutage outage = (outages == null || outages.size() < 1 ? null : outages.iterator().next());
                    final OnmsEvent event = (outage == null ? null : outage.getServiceLostEvent());
                    closeOutageIfSvcLostEventIsMissing(outage);

                    scheduleService(
                            service.getNodeId(),
                            iface.getNode().getLabel(),
                            iface.getNode().getLocation().getLocationName(),
                            InetAddressUtils.str(iface.getIpAddress()),
                            service.getServiceName(),
                            "A".equals(service.getStatus()),
                            event == null ? null : event.getId(),
                            outage == null ? null : outage.getIfLostService(),
                            event == null ? null : event.getEventUei()
                            );
                }
                return services.size();
            }
        });
    }

