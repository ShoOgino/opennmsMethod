    boolean testCriticalPath(String[] criticalPath) {
        LOG.debug("Test critical path IP {}/{}", criticalPath[0], criticalPath[1]);
        final InetAddress ipAddress = InetAddressUtils.addr(criticalPath[0]);
        final String svcName = criticalPath[1];
        if (ipAddress == null) {
            LOG.error("failed to convert string address to InetAddress {}", criticalPath[0]);
            return true;
        }
        final Map<String, Object> parameters = new HashMap<String,Object>();
        org.opennms.netmgt.config.poller.Package pkg = getPollerConfig().getFirstLocalPackageMatch(ipAddress.getHostAddress());
        if (pkg != null) {
            org.opennms.netmgt.config.poller.Service svc = getPollerConfig().getServiceInPackage(svcName, pkg);
            if (svc != null) {
                svc.getParameters().forEach(p -> {
                    String value = p.getValue();
                    if (value == null) {
                        try {
                            value = JaxbUtils.marshal(p.getAnyObject());
                        } catch (Exception e) {}
                    }
                    parameters.put(p.getKey(), value);
                });
            }
        }
        parameters.put("retry",  OpennmsServerConfigFactory.getInstance().getDefaultCriticalPathRetries());
        parameters.put("timeout",  OpennmsServerConfigFactory.getInstance().getDefaultCriticalPathTimeout());
        ServiceMonitor monitor = getPollerConfig().getServiceMonitor(svcName);
        if (monitor == null) {
            try {
                monitor = new IcmpMonitor();
            } catch (IOException e) {
                LOG.error("failed to instantiate the IcmpMonitor.");
                return true;
            }
        }
        final PollStatus status = monitor.poll(new SimpleMonitoredService(ipAddress, svcName), parameters);
        return status.isAvailable();
    }

