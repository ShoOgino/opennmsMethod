    /**
     * <p>withTreeLock</p>
     *
     * @param c a {@link java.util.concurrent.Callable} object.
     * @param timeout Lock timeout in milliseconds
     * @param <T> a T object.
     * @return a T object.
     * @throws LockUnavailable 
     */
    protected final <T> T withTreeLock(Callable<T> c, long timeout) throws LockUnavailable {
        boolean locked = false;
        try {
            obtainTreeLock(timeout);
            locked = true;
            return c.call();
        } catch (LockUnavailable e) {
            throw e;
        } catch (RuntimeException e) {
            throw e;
        } catch (Throwable e) {
            throw new RuntimeException(e);
        } finally {
            if (locked) {
                releaseTreeLock();
            }
        }
    }

