    /**
     * This method creates a new socket and attempts to connect to the remote
     * service. The input and output streams are created after the socket is
     * connected.
     * 
     * @throws NsclientException
     *             if the hostname is unknown if the connection is refused if
     *             there is no route to the host if the host did not respond
     *             if there was an unexpected IO error. The thrown exception
     *             contains the causing exception.
     */
    public void init() throws NsclientException {
        try {
            // set up socket
            m_Socket = new Socket();
            m_Socket.connect(new InetSocketAddress(m_HostName, m_PortNumber), m_Timeout);
            m_Socket.setSoTimeout(m_Timeout);

            // get buffer streams for read/write.
            m_BufInStream = new BufferedInputStream(m_Socket.getInputStream());
            m_ByteArrayOutStream = new ByteArrayOutputStream();

            // handle exceptions.
        } catch (UnknownHostException e) {
            closeSocketAndThrow(new NsclientException("Unknown host: " + m_HostName, e));
        } catch (ConnectException e) {
            closeSocketAndThrow(new NsclientException("Connection refused to " + m_HostName + ":" + m_PortNumber, e));
        } catch (NoRouteToHostException e) {
            closeSocketAndThrow(new NsclientException("Unable to connect to host: " + m_HostName + ", no route to host.", e));
        } catch (InterruptedIOException e) {
            closeSocketAndThrow(new NsclientException("Unable to connect to host: " + m_HostName + ":" + m_PortNumber + ", exceeded timeout of " + m_Timeout, e));
        } catch (IOException e) {
            closeSocketAndThrow(new NsclientException("An unexpected I/O exception occured connecting to host: " + m_HostName + ":" + m_PortNumber, e));
        }
    }

