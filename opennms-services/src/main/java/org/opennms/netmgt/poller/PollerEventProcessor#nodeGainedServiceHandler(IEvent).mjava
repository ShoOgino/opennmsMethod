    /**
     * Process the event, construct a new PollableService object representing
     * the node/interface/service/pkg combination, and schedule the service for
     * polling.
     * 
     * If any errors occur scheduling the interface no error is returned.
     * 
     * @param event
     *            The event to process.
     * 
     */
    private void nodeGainedServiceHandler(final IEvent event) {
        // First make sure the service gained is in active state before trying to schedule

        final String ipAddr = event.getInterface();
        final Long nodeId = event.getNodeid();
        final String svcName = event.getService();

        String nodeLabel = EventUtils.getParm(event, EventConstants.PARM_NODE_LABEL);
        try {
            nodeLabel = getPoller().getQueryManager().getNodeLabel(nodeId.intValue());
        } catch (final Exception e) {
            LOG.error("Unable to retrieve nodeLabel for node {}", nodeId, e);
        }

        String nodeLocation = null;
        try {
            nodeLocation = getPoller().getQueryManager().getNodeLocation(nodeId.intValue());
        } catch (final Exception e) {
            LOG.error("Unable to retrieve nodeLocation for node {}", nodeId, e);
        }

        final PollableNode pnode = getNetwork().getNode(nodeId.intValue());
        if (pnode != null) {
            final PollableService service = pnode.getService(addr(ipAddr), svcName);
            if (service != null) {
                LOG.debug("Node {} gained service {} on IP {}, but it is already being polled!", nodeId, svcName, ipAddr);
                return;
            }
        }
        getPoller().scheduleService(nodeId.intValue(), nodeLabel, nodeLocation, ipAddr, svcName);

    }

