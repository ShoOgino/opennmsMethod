    /**
     * Poll an {@link InetAddress} for SSH availability.
     * 
     * During the poll an attempt is made to connect on the specified port. If
     * the connection request is successful, the banner line generated by the
     * interface is parsed and if the banner text indicates that we are talking
     * to Provided that the interface's response is valid we mark the poll status
     * as available and return.
     * 
     * @param address the address to poll
     * @param parameters  the package parameters (timeout, retry, etc...) to be used for this poll
     * 
     * @return a {@link PollStatus} status object
     */
    public PollStatus poll(InetAddress address, Map parameters) {
        int retries = DEFAULT_RETRY;

        PollStatus ps = PollStatus.unavailable();
        Category log = ThreadCategory.getInstance(getClass());
        Poll ssh = new Poll(address);

        String banner = null;
        String match = null;
        int port = ssh.getPort();
        int timeout = ssh.getTimeout();

        if (parameters != null) {
            retries = ParameterMap.getKeyedInteger(parameters, "retry", DEFAULT_RETRY);
            timeout = ParameterMap.getKeyedInteger(parameters, "timeout", timeout);
            port = ParameterMap.getKeyedInteger(parameters, "port", port);
            banner = ParameterMap.getKeyedString(parameters, "banner", null);
            match = ParameterMap.getKeyedString(parameters, "match", null);
        }

        RE regex = null;
        if (match == null && (banner == null || banner.equals("*"))) {
            regex = null;
        } else if (match != null) {
            regex = new RE(match);
        } else if (banner != null) {
            regex = new RE(banner);
        }

        for (int attempts = 0; attempts <= retries && !ps.isAvailable(); attempts++) {
            try {
                ps = ssh.poll();
            } catch (InsufficientParametersException e) {
                log.error(e);
                break;
            }

            if (!ps.isAvailable()) {
                // not able to connect, retry
                continue;
            }

            // If banner matching string is null or wildcard ("*") then we
            // only need to test connectivity and we've got that!

            if (regex == null) {
                return ps;
            } else {
                String response = ssh.getServerVersion();

                if (regex.match(response)) {
                    if (log.isDebugEnabled()) {
                        log.debug("isServer: matching response=" + response);
                    }
                    return ps;
                } else {
                    // Got a response but it didn't match... no need to attempt
                    // retries
                    if (log.isDebugEnabled()) {
                        log.debug("isServer: NON-matching response=" + response);
                    }
                    return PollStatus.unavailable("server responded, but banner did not match '" + banner + "'");
                }
            }
        }
        return ps;        
    }

