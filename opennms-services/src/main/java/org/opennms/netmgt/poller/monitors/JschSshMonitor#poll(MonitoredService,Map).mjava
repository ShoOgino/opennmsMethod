    /**
     * Poll the specified address for service availability.
     * 
     * During the poll an attempt is made to connect on the specified port. If
     * the connection request is successful, the banner line generated by the
     * interface is parsed and if the banner text indicates that we are talking
     * to Provided that the interface's response is valid we set the service
     * status to SERVICE_AVAILABLE and return.
     * 
     * @param parameters
     *            The package parameters (timeout, retry, etc...) to be used for
     *            this poll.
     * @param iface
     *            The network interface to test the service on.
     * @return The availability of the interface and if a transition event
     *         should be suppressed.
     * 
     * @throws java.lang.RuntimeException
     *             Thrown if the interface experiences errors during the poll.
     */
    public PollStatus poll(MonitoredService svc, Map parameters) {
        NetworkInterface iface = svc.getNetInterface();

        //
        // Process parameters
        //
        Category log = ThreadCategory.getInstance(getClass());

        //
        // Get interface address from NetworkInterface
        //
        if (iface.getType() != NetworkInterface.TYPE_IPV4)
            throw new NetworkInterfaceNotSupportedException("Unsupported interface type, only TYPE_IPV4 currently supported");

        int retry = ParameterMap.getKeyedInteger(parameters, "retry", DEFAULT_RETRY);
        int timeout = ParameterMap.getKeyedInteger(parameters, "timeout", DEFAULT_TIMEOUT);

        // Port
        //
        int port = ParameterMap.getKeyedInteger(parameters, "port", DEFAULT_PORT);
        if (port == DEFAULT_PORT) {
            throw new RuntimeException("SshMonitor: required parameter 'port' is not present in supplied properties.");
        }

        // BannerMatch
        //
        String strBannerMatch = (String) parameters.get("banner");

        // Get the address instance.
        //
        InetAddress ipv4Addr = (InetAddress) iface.getAddress();

        if (log.isDebugEnabled())
            log.debug("poll: address = " + ipv4Addr.getHostAddress() + ", port = " + port + ", timeout = " + timeout + ", retry = " + retry);

        // Give it a whirl
        //
        PollStatus serviceStatus = PollStatus.unavailable();
        double responseTime = -1;
        SSH ssh = new SSH();

        for (int attempts = 0; attempts <= retry && !serviceStatus.isAvailable(); attempts++) {
            try {
                responseTime = ssh.check(ipv4Addr, port, timeout);
                serviceStatus = PollStatus.available(responseTime);
            } catch (FailedCheckException e) {
                serviceStatus = logDown(Level.DEBUG, "check failed for " + ipv4Addr.getHostAddress(), e);
            }

            if (strBannerMatch == null || strBannerMatch.equals("*")) {
                continue;
            }

            String response = ssh.getServerVersion();

            if (response == null) {
                continue;
            }
            
            if (log.isDebugEnabled()) {
                log.debug("poll: banner = " + response);
                log.debug("poll: responseTime= " + responseTime + "ms");
            }

            if (response.indexOf(strBannerMatch) <= -1) {
                serviceStatus = PollStatus.unavailable();
            }
        }

        //
        // return the status of the service
        //
        return serviceStatus;
    }

