    /**
     * <p>
     * Retrieve all the critical paths
     * from the database
     *
     * @return a {@link java.util.List} object.
     * @throws java.sql.SQLException if any.
     */
    @Override
    public List<String[]> getAllCriticalPaths() throws SQLException {
        final Connection conn = DataSourceFactory.getInstance().getConnection();
        final DBUtils d = new DBUtils(PathOutageManagerJdbcImpl.class, conn);

        final List<String[]> paths = new ArrayList<String[]>();

        try {
            final PreparedStatement stmt = conn.prepareStatement(GET_CRITICAL_PATHS);
            d.watch(stmt);

            final ResultSet rs = stmt.executeQuery();
            d.watch(rs);

            while (rs.next()) {
                String[] path = new String[3];
                path[0] = rs.getString(1);
                path[1] = rs.getString(2);
                path[2] = rs.getString(3);
                paths.add(path);
            }
            return paths;
        } finally {
            d.cleanUp();
        }
    }

