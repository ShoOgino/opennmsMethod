    /**
     * Radius Authentication Poller
     * 
     * Note that the poller will return SERVICE_AVAILABLE only if the
     * authentication Request actually succeeds. A failed authentication 
     * request will result in SERVICE_UNAVILABLE, although the radius 
     * server may actually be up. 
     * @param parameters
     *            Parameters to pass when polling the interface Currently
     *            recognized Map keys:
     *            <ul>
     *            <li>user - Radius user
     *            <li>password - Radius password
     *		  <li>secret - Radius shared secret
     *            <li>port - Radius auth port
     *            <li>timeout - Number of miliseconds to wait before sending a
     *            timeout
     *            <li>authtype - authentication type to use (pap or chap)
     *            <li>authport - port to poll for radius authentication
     *            <li>acctport - radius accounting port - used by
     *            </ul>
     * @param iface
     *            The interface to poll
     * @return int An status code that shows the status of the service
     *
     * @see org.opennms.netmgt.poller.ServiceMonitor#SERVICE_AVAILABLE
     * @see org.opennms.netmgt.poller.ServiceMonitor#SERVICE_UNAVAILABLE
     * @see org.opennms.netmgt.poller.ServiceMonitor#SERVICE_UNRESPONSIVE
     *
     */
    public PollStatus poll(MonitoredService svc, Map parameters) {
        NetworkInterface iface = svc.getNetInterface();

        Category log = ThreadCategory.getInstance(getClass());

        // Asume that the service is down
        PollStatus status = PollStatus.unavailable();

        if (iface.getType() != NetworkInterface.TYPE_IPV4) {
            log.error(getClass().getName() + ": Unsupported interface type, only TYPE_IPV4 currently supported");
            throw new NetworkInterfaceNotSupportedException(getClass().getName() + ": Unsupported interface type, only TYPE_IPV4 currently supported");
        }

        if (parameters == null) {
            throw new NullPointerException();
        }
        
        TimeoutTracker tracker = new TimeoutTracker(parameters, DEFAULT_RETRY, DEFAULT_TIMEOUT);

        int authport = ParameterMap.getKeyedInteger(parameters, "authport", DEFAULT_AUTH_PORT);
        int acctport = ParameterMap.getKeyedInteger(parameters, "acctport", DEFAULT_ACCT_PORT);
        String user = ParameterMap.getKeyedString(parameters, "user", DEFAULT_USER);
        String password = ParameterMap.getKeyedString(parameters, "password", DEFAULT_PASSWORD);
        String secret = ParameterMap.getKeyedString(parameters, "secret", DEFAULT_SECRET);
        String authType = ParameterMap.getKeyedString(parameters, "authtype", DEFAULT_AUTH_TYPE);

	InetAddress ipv4Addr = (InetAddress) iface.getAddress();


        RadiusClient rc = null;
        try {
            rc = new RadiusClient(ipv4Addr.getCanonicalHostName(), authport ,acctport, secret, tracker.getConnectionTimeout());
        } catch(RadiusException rex) {
        	return logDown(Level.ERROR, "Radius Exception: " + rex.getMessage());
        } catch(InvalidParameterException ivpex) {
        	return logDown(Level.ERROR, "Radius parameter exception: " + ivpex.getMessage());
        }


        for (tracker.reset(); tracker.shouldRetry(); tracker.nextAttempt()) {
            try {
                tracker.startAttempt();
                
                ChapUtil chapUtil = new ChapUtil();
                RadiusPacket accessRequest = new RadiusPacket(RadiusPacket.ACCESS_REQUEST);
                RadiusAttribute userNameAttribute;
                userNameAttribute = new RadiusAttribute(RadiusAttributeValues.USER_NAME,user.getBytes());
                log.debug(getClass().getName() + ": attempting Radius auth with authType: " + authType);
                accessRequest.setAttribute(userNameAttribute);
                if(authType.equalsIgnoreCase("chap")){
                    byte[] chapChallenge = chapUtil.getNextChapChallenge(16);
                    accessRequest.setAttribute(new RadiusAttribute(RadiusAttributeValues.CHAP_PASSWORD, chapEncrypt(password, chapChallenge, chapUtil)));
                    accessRequest.setAttribute(new RadiusAttribute(RadiusAttributeValues.CHAP_CHALLENGE, chapChallenge));
                }else{
                    accessRequest.setAttribute(new RadiusAttribute(RadiusAttributeValues.USER_PASSWORD,password.getBytes()));
                }
                RadiusPacket accessResponse = rc.authenticate(accessRequest);
                
                if ( accessResponse.getPacketType() == RadiusPacket.ACCESS_ACCEPT ){
                    double responseTime = tracker.elapsedTimeInMillis();
                    status = PollStatus.available(responseTime);
                    if (log.isDebugEnabled()) {
                        log.debug(getClass().getName() + ": Radius service is AVAILABLE on: " + ipv4Addr.getCanonicalHostName());
                        log.debug("poll: responseTime= " + responseTime + "ms");
                    }
                    break;
                }
            } catch (InvalidParameterException ivpex){
            	status = logDown(Level.ERROR, "Invalid Radius Parameter: " + ivpex);
            } catch (RadiusException radex){
            	status = logDown(Level.ERROR, "Radius Exception : " + radex);
	    }
        }
        return status;
    }

