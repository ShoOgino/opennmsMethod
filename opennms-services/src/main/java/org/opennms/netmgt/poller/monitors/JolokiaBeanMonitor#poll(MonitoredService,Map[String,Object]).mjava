    /**
     * {@inheritDoc}
     *
     * Poll the specified address for service availability.
     *
     * During the poll an attempt is made to execute the named method (with
     * optional input) connect on the specified port. If the exec on request is
     * successful, the banner line generated by the interface is parsed and if
     * the banner text indicates that we are talking to Provided that the
     * interface's response is valid we set the service status to
     * SERVICE_AVAILABLE and return.
     */
    public PollStatus poll(MonitoredService svc, Map<String, Object> parameters) {
        NetworkInterface<InetAddress> iface = svc.getNetInterface();

        //
        // Process parameters
        //
        //
        // Get interface address from NetworkInterface
        if (iface.getType() != NetworkInterface.TYPE_INET) {
            throw new NetworkInterfaceNotSupportedException("Unsupported interface type, only TYPE_INET currently supported");
        }

        TimeoutTracker tracker = new TimeoutTracker(parameters, DEFAULT_RETRY, DEFAULT_TIMEOUT);

        // Port
        int port = ParameterMap.getKeyedInteger(parameters, PARAMETER_PORT, DEFAULT_PORT);

        //URL
        String strURL = ParameterMap.getKeyedString(parameters, PARAMETER_URL, DEFAULT_URL);

        //Username
        String strUser = ParameterMap.getKeyedString(parameters, PARAMETER_USERNAME, null);

        //Password
        String strPasswd = ParameterMap.getKeyedString(parameters, PARAMETER_PASSWORD, null);

        //AttrName
        String strAttrName = ParameterMap.getKeyedString(parameters, PARAMETER_ATTRNAME, null);

        //AttrPath
        String strAttrPath = ParameterMap.getKeyedString(parameters, PARAMETER_ATTRPATH, null);

        //BeanName
        String strBeanName = ParameterMap.getKeyedString(parameters, PARAMETER_BEANNAME, null);

        //MethodName
        String strMethodName = ParameterMap.getKeyedString(parameters, PARAMETER_METHODNAME, null);

        //Optional Inputs
        String strInput1 = ParameterMap.getKeyedString(parameters, PARAMETER_METHODINPUT1, null);
        String strInput2 = ParameterMap.getKeyedString(parameters, PARAMETER_METHODINPUT2, null);

        // BannerMatch
        String strBannerMatch = ParameterMap.getKeyedString(parameters, PARAMETER_BANNER, null);

        // Get the address instance.
        InetAddress ipv4Addr = (InetAddress) iface.getAddress();

        final String hostAddress = InetAddressUtils.str(ipv4Addr);

        LOGGER.debug("poll: address = " + hostAddress + ", port = " + port + ", " + tracker);

        strURL = strURL.replace("${ipaddr}", hostAddress);
        strURL = strURL.replace("${port}", ((Integer) port).toString());

        LOGGER.debug("poll: final URL address = " + strURL);

        // Give it a whirl
        PollStatus serviceStatus = PollStatus.unknown("Initialized");

        for (tracker.reset(); tracker.shouldRetry() && !serviceStatus.isAvailable(); tracker.nextAttempt()) {
            try {
                tracker.startAttempt();
                J4pClientBuilder j4pClientBuilder = new J4pClientBuilder();
                j4pClientBuilder.url(strURL).connectionTimeout(tracker.getConnectionTimeout()).socketTimeout(tracker.getSoTimeout());

                if (strUser != null && strPasswd != null) {
                    j4pClientBuilder.user(strUser).password(strPasswd);
                }

                J4pClient j4pClient = j4pClientBuilder.build();

                LOGGER.debug("JolokiaBeanMonitor: connected to URLhost: " + strURL);

                // We're connected, so upgrade status to unresponsive
                serviceStatus = PollStatus.unresponsive();

                if (strBannerMatch == null || strBannerMatch.length() == 0 || strBannerMatch.equals("*")) {
                    serviceStatus = PollStatus.available(tracker.elapsedTimeInMillis());
                    break;
                }

                //Exec a method or poll an attribute?
                String response;

                if (strAttrName != null) {
                    J4pReadRequest readReq = new J4pReadRequest(strBeanName, strAttrName);
                    readReq.setPreferredHttpMethod("POST");
                    if (strAttrPath != null) {
                        readReq.setPath(strAttrPath);
                    }

                    J4pReadResponse resp = j4pClient.execute(readReq);
                    response = resp.getValue().toString();
                } else {
                    J4pExecRequest execReq;

                    //Default Inputs
                    if (strInput1 == null && strInput2 == null) {
                        LOGGER.debug("JolokiaBeanMonitor - execute bean: " + strBeanName + " method: " + strMethodName);
                        execReq = new J4pExecRequest(strBeanName, strMethodName);
                    } else if (strInput1 != null && strInput2 == null) {
                        //Single Input
                        LOGGER.debug("JolokiaBeanMonitor - execute bean: " + strBeanName + " method: " + strMethodName + " args: " + strInput1);
                        execReq = new J4pExecRequest(strBeanName, strMethodName, strInput1);
                    } else {
                        //Double Input
                        LOGGER.debug("JolokiaBeanMonitor - execute bean: " + strBeanName + " method: " + strMethodName + " args: " + strInput1 + " " + strInput2);
                        execReq = new J4pExecRequest(strBeanName, strMethodName, strInput1, strInput2);
                    }

                    execReq.setPreferredHttpMethod("POST");
                    J4pExecResponse resp = j4pClient.execute(execReq);
                    response = resp.getValue().toString();
                }

                double responseTime = tracker.elapsedTimeInMillis();

                if (response == null) {
                    continue;
                }

                LOGGER.debug("poll: banner = " + response);
                LOGGER.debug("poll: responseTime = " + responseTime + "ms");

                //Could it be a regex?
                if (strBannerMatch.charAt(0) == '~') {
                    if (!response.matches(strBannerMatch.substring(1))) {
                        serviceStatus = PollStatus.unavailable("Banner does not match Regex '" + strBannerMatch + "'");
                    } else {
                        serviceStatus = PollStatus.available(responseTime);
                    }
                } else {
                    if (response.contains(strBannerMatch)) {
                        serviceStatus = PollStatus.available(responseTime);
                    } else {
                        serviceStatus = PollStatus.unavailable("Did not find expected Text '" + strBannerMatch + "'");
                    }
                }

            } catch (J4pConnectException e) {
                String reason = "Connection exception for address: " + ipv4Addr + ":" + port + " " + e.getMessage();
                LOGGER.debug(reason, e);
                serviceStatus = PollStatus.unavailable(reason);
                break;
            } catch (J4pRemoteException e) {
                String reason = "Remote exception from J4pRemote: "+ e.getMessage();
                LOGGER.debug(reason, e);
                serviceStatus = PollStatus.unavailable(reason);
            } catch (MalformedObjectNameException e) {
                String reason = "Parameters for Jolokia are malformed: "+ e.getMessage();
                LOGGER.debug(reason, e);
                serviceStatus = PollStatus.unavailable(reason);
            } catch (J4pException e) {
                String reason = "J4pExecptin during Jolokia monitor call: "+ e.getMessage();
                LOGGER.debug(reason, e);
                serviceStatus = PollStatus.unavailable(reason);
            }
        }

        return serviceStatus;
    }

