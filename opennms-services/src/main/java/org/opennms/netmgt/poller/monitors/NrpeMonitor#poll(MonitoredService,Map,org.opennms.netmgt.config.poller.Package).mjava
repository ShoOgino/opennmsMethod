    /**
     * Poll the specified address for service availability.
     * 
     * During the poll an attempt is made to connect on the specified port. If
     * the connection request is successful, the banner line generated by the
     * interface is parsed and if the banner text indicates that we are talking
     * to Provided that the interface's response is valid we set the service
     * status to SERVICE_AVAILABLE and return.
     * @param parameters
     *            The package parameters (timeout, retry, etc...) to be used for
     *            this poll.
     * @param iface
     *            The network interface to test the service on.
     * 
     * @return The availibility of the interface and if a transition event
     *         should be supressed.
     * 
     * @throws java.lang.RuntimeException
     *             Thrown if the interface experiences errors during the poll.
     */
    public PollStatus poll(MonitoredService svc, Map parameters, org.opennms.netmgt.config.poller.Package pkg) {
        NetworkInterface iface = svc.getNetInterface();
		
		String reason = null;

        //
        // Process parameters
        //
        Category log = ThreadCategory.getInstance(getClass());

        //
        // Get interface address from NetworkInterface
        //
        if (iface.getType() != NetworkInterface.TYPE_IPV4) {
            throw new NetworkInterfaceNotSupportedException("Unsupported interface type, only TYPE_IPV4 currently supported");
        }

        String command = ParameterMap.getKeyedString(parameters, "command", NrpePacket.HELLO_COMMAND);
        int port = ParameterMap.getKeyedInteger(parameters, "port", CheckNrpe.DEFAULT_PORT);
        int padding = ParameterMap.getKeyedInteger(parameters, "padding", NrpePacket.DEFAULT_PADDING);
        int retry = ParameterMap.getKeyedInteger(parameters, "retry", DEFAULT_RETRY);
        int timeout = ParameterMap.getKeyedInteger(parameters, "timeout", DEFAULT_TIMEOUT);
        String rrdPath = ParameterMap.getKeyedString(parameters, "rrd-repository", null);
        String dsName = ParameterMap.getKeyedString(parameters, "ds-name", null);

        if (rrdPath == null) {
            log.info("poll: RRD repository not specified in parameters, latency data will not be stored.");
        }
        if (dsName == null) {
            dsName = DEFAULT_DSNAME;
        }

		/*
        // Port
        //
        int port = ParameterMap.getKeyedInteger(parameters, "port", DEFAULT_PORT);
        if (port == DEFAULT_PORT) {
            throw new RuntimeException("NrpeMonitor: required parameter 'port' is not present in supplied properties.");
        }
        */

        // BannerMatch
        //
        //Commented out because it is not currently referenced in this monitor
        //String strBannerMatch = (String) parameters.get("banner");

        // Get the address instance.
        //
        InetAddress ipv4Addr = (InetAddress) iface.getAddress();

        if (log.isDebugEnabled()) {
            log.debug("poll: address = " + ipv4Addr.getHostAddress() + ", port = " + port + ", timeout = " + timeout + ", retry = " + retry);
        }

        // Give it a whirl
        //
        int serviceStatus = PollStatus.SERVICE_UNAVAILABLE;
        long responseTime = -1;

        for (int attempts = 0; attempts <= retry && serviceStatus != PollStatus.SERVICE_AVAILABLE; attempts++) {
            Socket socket = null;
            try {
                //
                // create a connected socket
                //
                long sentTime = System.currentTimeMillis();

                socket = new Socket();
                socket.connect(new InetSocketAddress(ipv4Addr, port), timeout);
                socket.setSoTimeout(timeout);
                log.debug("NrpeMonitor: connected to host: " + ipv4Addr + " on port: " + port);

                // We're connected, so upgrade status to unresponsive
                serviceStatus = PollStatus.SERVICE_UNRESPONSIVE;
				reason = "Connected, but no response received";

				NrpePacket p = new NrpePacket(NrpePacket.QUERY_PACKET, (short) 0,
						command);
				byte[] b = p.buildPacket(padding);
				OutputStream o = socket.getOutputStream();
				o.write(b);

				/*
                if (strBannerMatch == null || strBannerMatch.length() == 0 || strBannerMatch.equals("*")) {

				if (true) {
                    serviceStatus = SERVICE_AVAILABLE;
                    // Store response time in RRD
                    if (responseTime >= 0 && rrdPath != null) {
                        try {
                            this.updateRRD(rrdPath, ipv4Addr, dsName, responseTime, pkg);
                        } catch (RuntimeException rex) {
                            log.debug("There was a problem writing the RRD:" + rex);
                        }
                    }
                    break;
                }

                BufferedReader rdr = new BufferedReader(new InputStreamReader(socket.getInputStream()));

                //
                // Tokenize the Banner Line, and check the first
                // line for a valid return.
                //
                String response = rdr.readLine();
                responseTime = System.currentTimeMillis() - sentTime;

                if (response == null)
                    continue;
                if (log.isDebugEnabled()) {
                    log.debug("poll: banner = " + response);
                    log.debug("poll: responseTime= " + responseTime + "ms");
                }

                if (response.indexOf(strBannerMatch) > -1) {
                */

				NrpePacket response = NrpePacket.receivePacket(socket.getInputStream(), padding);
                responseTime = System.currentTimeMillis() - sentTime;
				if (response.getResultCode() == 0) {
                    serviceStatus = PollStatus.SERVICE_AVAILABLE;
                    // Store response time in RRD
                    if (responseTime >= 0 && rrdPath != null) {
                        try {
                            this.updateRRD(rrdPath, ipv4Addr, dsName, responseTime, pkg);
                        } catch (RuntimeException rex) {
                            log.debug("There was a problem writing the RRD:" + rex);
                        }
                    }
                } else {
                    serviceStatus = PollStatus.SERVICE_UNAVAILABLE;
					reason = "NRPE command returned code " + response.getResultCode() +
						" and message: " + response.getBuffer();
                }
            } catch (NoRouteToHostException e) {
				reason = "No route to host exception for address " + ipv4Addr.getHostAddress();
                if (log.isEnabledFor(Level.WARN)) {
	                e.fillInStackTrace();
                    log.warn("poll: " + reason, e);
                }
                break; // Break out of for(;;)
            } catch (InterruptedIOException e) {
                reason = "did not connect to host within timeout: " + timeout + " attempt: " + attempts;
                log.debug("NrpeMonitor: did not connect to host within timeout: " + timeout + " attempt: " + attempts);
            } catch (ConnectException e) {
				reason = "Connection exception for address: " + ipv4Addr;
                // Connection refused. Continue to retry.
                //
                if (log.isDebugEnabled()) {
	                e.fillInStackTrace();
                    log.debug("poll: " + reason, e);
                }
            } catch (NrpeException e) {
				reason = "NrpeException while polling address: " + ipv4Addr;
                if (log.isDebugEnabled()) {
	                e.fillInStackTrace();
                    log.debug("poll: " + reason, e);
                }
            } catch (IOException e) {
                // Ignore
				reason = "IOException while polling address: " + ipv4Addr;
                if (log.isDebugEnabled()) {
	                e.fillInStackTrace();
                    log.debug("poll: " + reason, e);
                }
            } finally {
                try {
                    // Close the socket
                    if (socket != null) {
                        socket.close();
                    }
                } catch (IOException e) {
                    if (log.isDebugEnabled()) {
	                    e.fillInStackTrace();
                        log.debug("poll: Error closing socket.", e);
                    }
                }
            }
        }

        //
        // return the status of the service
        //
		return PollStatus.get(serviceStatus, reason, responseTime);
    }

