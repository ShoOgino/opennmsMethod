    private void serviceReschedule(Event event)   {       
       PollableNode pnode = getNetwork().getNode(event.getNodeid().intValue());
       Long nodeId = event.getNodeid();
       String nodeLabel = pnode.getNodeLabel();
       
       //pnode.delete();
       //nodeDeletedHandler(event);
       
       /*while(pnode.isDeleted()==false){
           
           LOG.debug("Waiting for node to delete...");
           
       }*/
       
       List<String[]> list = getPoller().getQueryManager().getNodeServices(nodeId.intValue());
       
       for(String[] row : list){
           LOG.debug(" Removing the following from the list: {}:{}", row[0],row[1]);
           
           InetAddress addr;
           addr = InetAddressUtils.addr(row[0]);
           if (addr == null) {
               LOG.warn("Rescheduler: Could not convert "+row[0]+" to an InetAddress");
               return;
           }
           
           Date closeDate;
           try {
               closeDate = EventConstants.parseToDate(event.getTime());
           } catch (ParseException e) {
               closeDate = new Date();
           }
           
           getPoller().closeOutagesForService(closeDate, event.getDbid(), nodeId.intValue(), row[0], row[1]);
           
           PollableService svc = getNetwork().getService(nodeId.intValue(),addr,row[1]);
           
           if (svc != null) {
           
               svc.delete();
           
               while(svc.isDeleted()==false){
                   LOG.debug("Waiting for the service to delete...");
               }
           
           }
           
           else {
               LOG.debug("Service Not Found");
           }
           
       }
       
       getPoller().getPollerConfig().rebuildPackageIpListMap();
       
       for(String[] row : list){
           LOG.debug(" Re-adding the following to the list: {}:{}", row[0],row[1]);
           getPoller().scheduleService(nodeId.intValue(),nodeLabel,row[0],row[1]);
       }
    }

