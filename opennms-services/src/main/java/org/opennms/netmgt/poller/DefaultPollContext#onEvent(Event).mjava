    /* (non-Javadoc)
     * @see org.opennms.netmgt.eventd.EventListener#onEvent(org.opennms.netmgt.xml.event.Event)
     */
    /** {@inheritDoc} */
    @Override
    public void onEvent(final Event e) {
        LOG.debug("onEvent: Waiting to process event: {} uei: {}, dbid: {}", e, e.getUei(), e.getDbid());
        synchronized (m_pendingPollEvents) {
            LOG.debug("onEvent: Received event: {} uei: {}, dbid: {}, pendingEventCount: {}", e, e.getUei(), e.getDbid(), m_pendingPollEvents.size());
            for (final Iterator<PendingPollEvent> it = m_pendingPollEvents.iterator(); it.hasNext();) {
                final PendingPollEvent pollEvent = it.next();
                LOG.trace("onEvent: comparing events to poll event: {}", pollEvent);
                if (e.equals(pollEvent.getEvent())) {
                    LOG.trace("onEvent: completing pollevent: {}", pollEvent);
                    pollEvent.complete(e);
                }
            }

            for (Iterator<PendingPollEvent> it = m_pendingPollEvents.iterator(); it.hasNext(); ) {
                PendingPollEvent pollEvent = it.next();
                LOG.trace("onEvent: determining if pollEvent is pending: {}", pollEvent);
                if (pollEvent.isPending()) continue;

                LOG.trace("onEvent: processing pending pollEvent...: {}", pollEvent);
                try {
                    pollEvent.processPending();
                    it.remove();
                } catch (DataRetrievalFailureException ex) {
                    LOG.error("onEvent: process pending failed on: {}", pollEvent, ex);
                    continue;
                }
                LOG.trace("onEvent: processing of pollEvent completed.: {}", pollEvent);
            }
        }
        LOG.debug("onEvent: Finished processing event: {} uei: {}, dbid: {}", e, e.getUei(), e.getDbid());
        
    }

