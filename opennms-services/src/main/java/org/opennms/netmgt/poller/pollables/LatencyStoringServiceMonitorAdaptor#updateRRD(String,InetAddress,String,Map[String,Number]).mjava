    /**
     * Update an RRD database file with multiple latency/response time data sources.
     *
     * @param repository
     *            path to the RRD file repository
     * @param addr
     *            interface address
     * @param entries
     *            the entries for the rrd, containing a Map of dsNames to values
     * @param rrdBaseName a {@link java.lang.String} object.
     */
    public void updateRRD(String repository, InetAddress addr, String rrdBaseName, Map<String, Number> entries) {
        try {
            // Create RRD if it doesn't already exist
            List<RrdDataSource> dsList = new ArrayList<RrdDataSource>(entries.size());
            for (String dsName : entries.keySet()) {
                dsList.add(new RrdDataSource(dsName, "GAUGE", m_pollerConfig.getStep(m_pkg)*2, "U", "U"));
            }
            createRRD(repository, addr, rrdBaseName, dsList);

            // add interface address to RRD repository path
            final String hostAddress = InetAddressUtils.str(addr);
			String path = repository + File.separator + hostAddress;

            StringBuffer value = new StringBuffer();
            Iterator<String> i = entries.keySet().iterator();
            while (i.hasNext()) {
                Number num = entries.get(i.next());
                if (num == null || Double.isNaN(num.doubleValue())) {
                    value.append("U");
                } else {
                    NumberFormat nf = NumberFormat.getInstance(Locale.US);
                    nf.setGroupingUsed(false);
                    nf.setMinimumFractionDigits(0);
                    nf.setMaximumFractionDigits(Integer.MAX_VALUE);
                    nf.setMinimumIntegerDigits(0);
                    nf.setMaximumIntegerDigits(Integer.MAX_VALUE);
                    value.append(nf.format(num.doubleValue()));
                }
                if (i.hasNext()) {
                    value.append(":");
                }
            }
            RrdUtils.updateRRD(hostAddress, path, rrdBaseName, value.toString());

        } catch (RrdException e) {
            String msg = e.getMessage();
            LOG.error(msg);
            throw new RuntimeException(msg, e);
        }
    }

