    /**
     * This method handles all the logic for testing mail.
     * 
     * @param mailParms
     */
    private PollStatus doMailTest(final MailTransportParameters mailParms) {
    	final long beginPoll = System.currentTimeMillis();
        PollStatus status = PollStatus.unknown("Beginning poll.");
        mailParms.setTestSubjectSuffix(Long.toString(beginPoll));

        /*
         * If both a send and receive test are configured, then were testing the
         * throughput (round trip delivery) of mail. This can be configured to
         * send and receive to the same of different hosts.
         */
        if (mailParms.getSendTest() != null && mailParms.getReadTest() != null) {

            /*
             * Doing round-trip mail test so create a unique subject for
             * matching.
             */
            mailParms.setEnd2EndTestInProgress(true);
            status = sendTestMessage(mailParms);

            if (status.isAvailable()) {
                LOG.debug("doMailTest: send test successful.");
                status = readTestMessage(mailParms);
            } else {
                LOG.info("doMailTest: send test unsuccessful... skipping read portion of test.");
            }

        } else if (mailParms.getReadTest() != null) {
            status = readTestMessage(mailParms);
        } else if (mailParms.getSendTest() != null) {
            status = sendTestMessage(mailParms);
        } else {
            throw new IllegalArgumentException("MailTransportMonitor requires either send-host or read-host parameters");
        }

        if (status.isAvailable()) {
            status.setResponseTime(Double.valueOf(String.valueOf(System.currentTimeMillis() - beginPoll)));
        }
        LOG.info("doMailTest: mailtest result: {}", status);
        return status;
    }

