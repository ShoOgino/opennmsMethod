    /**
     * Poll the specified address for service availability.
     * 
     * During the poll an attempt is made to connect the service.
     * 
     * Provided that the interface's response is valid we set the service status
     * to SERVICE_AVAILABLE and return.
     * @param parameters
     *            The package parameters (timeout, retry, etc...) to be used for
     *            this poll.
     * @param iface
     *            The network interface to test the service on.
     * @return The availibility of the interface and if a transition event
     *         should be supressed.
     * 
     * @throws java.lang.RuntimeException
     *             Thrown if the interface experiences errors during the poll.
     */
    public PollStatus poll(MonitoredService svc, Map parameters) {
        NetworkInterface iface = svc.getNetInterface();

        PollStatus serviceStatus = PollStatus.unavailable();

        // get the parameters
        //
        int ldapVersion = ParameterMap.getKeyedInteger(parameters, "version", LDAPConnection.LDAP_V3);
        int ldapPort = ParameterMap.getKeyedInteger(parameters, "port", LDAPConnection.DEFAULT_PORT);
        int retries = ParameterMap.getKeyedInteger(parameters, "retry", DEFAULT_RETRY);
        int timeout = ParameterMap.getKeyedInteger(parameters, "timeout", DEFAULT_TIMEOUT);
        String searchBase = ParameterMap.getKeyedString(parameters, "searchbase", DEFAULT_BASE);
        String searchFilter = ParameterMap.getKeyedString(parameters, "searchfilter", DEFAULT_FILTER);

        String password = (String) parameters.get("password");
        String ldapDn = (String) parameters.get("dn");

        Object addressObject = iface.getAddress();
        String address = null;
        if (addressObject instanceof InetAddress)
            address = ((InetAddress) addressObject).getHostAddress();
        else if (addressObject instanceof String)
            address = (String) addressObject;

        // first just try a connection to the box via socket. Just in case there
        // is
        // a no way to route to the address, don't iterate through the retries,
        // as a
        // NoRouteToHost exception will only be thrown after about 5 minutes,
        // thus tying
        // up the thread
        Socket socket = null;
        try {

            socket = new Socket();
            socket.connect(new InetSocketAddress((InetAddress) iface.getAddress(), ldapPort), timeout);
            socket.setSoTimeout(timeout);
            log().debug("LdapMonitor: connected to host: " + address + " on port: " + ldapPort);

            // We're connected, so upgrade status to unresponsive
            serviceStatus = PollStatus.unresponsive();

            if (socket != null)
                socket.close();

            // lets detect the service
            LDAPConnection lc = new LDAPConnection(new TimeoutLDAPSocket(timeout));

            long sentTime = System.currentTimeMillis();
            
            for (int attempts = 1; attempts <= retries && !serviceStatus.isAvailable(); attempts++) {
                log().debug("polling LDAP on " + address + ", attempt " + attempts + " of " + (retries == 0 ? "1" : retries + ""));

                // connect to the ldap server
                try {
                    lc.connect(address, ldapPort);
                    log().debug("connected to LDAP server " + address + " on port " + ldapPort);
                } catch (LDAPException e) {
                	serviceStatus = logDown(Level.DEBUG, "could not connect to LDAP server " + address + " on port " + ldapPort);
                    continue;
                }

                // bind if possible
                if (ldapDn != null && password != null) {
                    try {
                        lc.bind(ldapVersion, ldapDn, password.getBytes());
                        serviceStatus.setResponseTime(System.currentTimeMillis() - sentTime);
                        if (log().isDebugEnabled()) {
                            log().debug("bound to LDAP server version " + ldapVersion + " with distinguished name " + ldapDn);
                            log().debug("poll: responseTime= " + serviceStatus.getResponseTime() + "ms");
                        }
                    } catch (LDAPException e) {
                        try {
                            lc.disconnect();
                        } catch (LDAPException ex) {
                            log().debug(ex);
                        }

                        serviceStatus = logDown(Level.DEBUG, "could not bind to LDAP server version " + ldapVersion + " with distinguished name " + ldapDn);
                        continue;
                    }
                }

                // do a quick search and see if any results come back
                boolean attributeOnly = true;
                String attrs[] = { LDAPConnection.NO_ATTRS };
                int searchScope = LDAPConnection.SCOPE_ONE;

                log().debug("running search " + searchFilter + " from " + searchBase);
                LDAPSearchResults results = null;

                try {
                    results = lc.search(searchBase, searchScope, searchFilter, attrs, attributeOnly);

                    if (results != null && results.hasMore()) {
                        log().debug("search yielded results");
                        serviceStatus = PollStatus.available();
                    } else {
                        log().debug("no results found from search");
                        serviceStatus = PollStatus.unavailable();
                    }
                } catch (LDAPException e) {
                    try {
                        lc.disconnect();
                    } catch (LDAPException ex) {
                        log().debug(ex);
                    }

                    serviceStatus = logDown(Level.DEBUG, "could not perform search " + searchFilter + " from " + searchBase);
                    continue;
                }

                try {
                    lc.disconnect();
                    log().debug("disconected from LDAP server " + address + " on port ");
                } catch (LDAPException e) {
                    log().debug(e);
                }
            }
        } catch (ConnectException e) {
        	serviceStatus = logDown(Level.DEBUG, "connection refused to host " + address, e);
        } catch (NoRouteToHostException e) {
        	serviceStatus = logDown(Level.WARN, "No route to host " + address, e);
        } catch (InterruptedIOException e) {
        	serviceStatus = logDown(Level.DEBUG, "did not connect to host within timeout: " + timeout);
        } catch (Throwable t) {
        	serviceStatus = logDown(Level.WARN, "An undeclared throwable exception caught contacting host " + address, t);
        }

        return serviceStatus;
    }

