    /**
     * Poll the specified address for service availability.
     * 
     * During the poll an attempt is made to connect the service.
     * 
     * Provided that the interface's response is valid we set the service status
     * to SERVICE_AVAILABLE and return.
     * @param parameters
     *            The package parameters (timeout, retry, etc...) to be used for
     *            this poll.
     * @param iface
     *            The network interface to test the service on.
     * @return The availibility of the interface and if a transition event
     *         should be supressed.
     * 
     * @throws java.lang.RuntimeException
     *             Thrown if the interface experiences errors during the poll.
     */
    public PollStatus poll(MonitoredService svc, Map parameters) {
        NetworkInterface iface = svc.getNetInterface();

	int serviceStatus = PollStatus.SERVICE_UNAVAILABLE;
	String reason = null;

        // get the parameters
        //
	long responseTime = -1;
        int ldapVersion = ParameterMap.getKeyedInteger(parameters, "version", LDAPConnection.LDAP_V3);
        int ldapPort = ParameterMap.getKeyedInteger(parameters, "port", LDAPConnection.DEFAULT_PORT);
        int retries = ParameterMap.getKeyedInteger(parameters, "retry", DEFAULT_RETRY);
        int timeout = ParameterMap.getKeyedInteger(parameters, "timeout", DEFAULT_TIMEOUT);
        String searchBase = ParameterMap.getKeyedString(parameters, "searchbase", DEFAULT_BASE);
        String searchFilter = ParameterMap.getKeyedString(parameters, "searchfilter", DEFAULT_FILTER);

        String password = (String) parameters.get("password");
        String ldapDn = (String) parameters.get("dn");

        Object addressObject = iface.getAddress();
        String address = null;
        if (addressObject instanceof InetAddress)
            address = ((InetAddress) addressObject).getHostAddress();
        else if (addressObject instanceof String)
            address = (String) addressObject;

        // first just try a connection to the box via socket. Just in case there
        // is
        // a no way to route to the address, don't iterate through the retries,
        // as a
        // NoRouteToHost exception will only be thrown after about 5 minutes,
        // thus tying
        // up the thread
        Socket socket = null;
        try {

            socket = new Socket();
            socket.connect(new InetSocketAddress((InetAddress) iface.getAddress(), ldapPort), timeout);
            socket.setSoTimeout(timeout);
            log().debug("LdapMonitor: connected to host: " + address + " on port: " + ldapPort);

            // We're connected, so upgrade status to unresponsive
	    serviceStatus = PollStatus.SERVICE_UNRESPONSIVE;

            if (socket != null)
                socket.close();

            // lets detect the service
            LDAPConnection lc = new LDAPConnection(new TimeoutLDAPSocket(timeout));

            long sentTime = System.currentTimeMillis();
            
            for (int attempts = 1; attempts <= retries && !(serviceStatus == PollStatus.SERVICE_AVAILABLE); attempts++) {
                log().debug("polling LDAP on " + address + ", attempt " + attempts + " of " + (retries == 0 ? "1" : retries + ""));

                // connect to the ldap server
                try {
                    lc.connect(address, ldapPort);
                    log().debug("connected to LDAP server " + address + " on port " + ldapPort);
                } catch (LDAPException e) {
                	log().debug("could not connect to LDAP server " + address + " on port " + ldapPort);
                	reason = "could not connect to LDAP server " + address + " on port " + ldapPort;
                    continue;
                }

                // bind if possible
                if (ldapDn != null && password != null) {
                    try {
                        lc.bind(ldapVersion, ldapDn, password.getBytes());
                        if (log().isDebugEnabled()) {
                            log().debug("bound to LDAP server version " + ldapVersion + " with distinguished name " + ldapDn);
                            log().debug("poll: responseTime= " + responseTime + "ms");
                        }
                    } catch (LDAPException e) {
                        try {
                            lc.disconnect();
                        } catch (LDAPException ex) {
                            log().debug(ex);
                        }

                        log().debug("could not bind to LDAP server version " + ldapVersion + " with distinguished name " + ldapDn);
                        reason = "could not bind to LDAP server version " + ldapVersion + " with distinguished name " + ldapDn;
                        continue;
                    }
                }

                // do a quick search and see if any results come back
                boolean attributeOnly = true;
                String attrs[] = { LDAPConnection.NO_ATTRS };
                int searchScope = LDAPConnection.SCOPE_ONE;

                log().debug("running search " + searchFilter + " from " + searchBase);
                LDAPSearchResults results = null;

                try {
                    results = lc.search(searchBase, searchScope, searchFilter, attrs, attributeOnly);

                    if (results != null && results.hasMore()) {
			responseTime = System.currentTimeMillis() - sentTime;
                        log().debug("search yielded results");
                        serviceStatus = PollStatus.SERVICE_AVAILABLE;
                    } else {
                        log().debug("no results found from search");
			reason = "No results found from search";
                        serviceStatus = PollStatus.SERVICE_UNAVAILABLE;
                    }
                } catch (LDAPException e) {
                    try {
                        lc.disconnect();
                    } catch (LDAPException ex) {
                        log().debug(ex);
                    }

                    log().debug("could not perform search " + searchFilter + " from " + searchBase);
                    reason = "could not perform search " + searchFilter + " from " + searchBase;
                    continue;
                }

                try {
                    lc.disconnect();
                    log().debug("disconected from LDAP server " + address + " on port ");
                } catch (LDAPException e) {
                    log().debug(e);
                }
            }
        } catch (ConnectException e) {
        	log().debug("connection refused to host " + address, e);
        	reason = "connection refused to host " + address;
        } catch (NoRouteToHostException e) {
        	log().debug("No route to host " + address, e);
        	reason = "No route to host " + address;
        } catch (InterruptedIOException e) {
        	log().debug("did not connect to host within timeout: " + timeout);
        	reason = "did not connect to host within timeout: " + timeout;
        } catch (Throwable t) {
        	log().debug("An undeclared throwable exception caught contacting host " + address, t);
        	reason = "An undeclared throwable exception caught contacting host " + address;
        }

	return PollStatus.get(serviceStatus, reason, responseTime);
    }

