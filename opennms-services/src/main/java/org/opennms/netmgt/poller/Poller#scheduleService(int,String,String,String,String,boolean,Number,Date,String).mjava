    private boolean scheduleService(int nodeId, String nodeLabel, String nodeLocation, String ipAddr, String serviceName, boolean active, Number svcLostEventId, Date ifLostService, String svcLostUei) {
        // We don't want to adjust the management state of the service if we're
        // on a machine that uses multiple servers with access to the same database
        // so check the value of OpennmsServerConfigFactory.getInstance().verifyServer()
        // before doing any updates.
        final Package pkg = findPackageForService(ipAddr, serviceName);
        final boolean verifyServer = OpennmsServerConfigFactory.getInstance().verifyServer();
        if (pkg == null) {
            if(active && !verifyServer){
                LOG.warn("Active service {} on {} not configured for any package. Marking as Not Polled.", serviceName, ipAddr);
                m_queryManager.updateServiceStatus(nodeId, ipAddr, serviceName, "N");
            }
            return false;
        } else if (!active && !verifyServer) {
            LOG.info("Active service {} on {} is now configured for a package. Marking as active.", serviceName, ipAddr);
            m_queryManager.updateServiceStatus(nodeId, ipAddr, serviceName, "A");
        }

        ServiceMonitor monitor = m_pollerConfig.getServiceMonitor(serviceName);
        if (monitor == null) {
            LOG.info("Could not find service monitor associated with service {}", serviceName);
            return false;
        }

        InetAddress addr;
        addr = InetAddressUtils.addr(ipAddr);
        if (addr == null) {
            LOG.error("Could not convert {} as an InetAddress {}", ipAddr, ipAddr);
            return false;
        }

        PollableService svc = getNetwork().createService(nodeId, nodeLabel, nodeLocation, addr, serviceName);
        PollableServiceConfig pollConfig = new PollableServiceConfig(svc, m_pollerConfig, m_pollOutagesConfig, pkg,
                getScheduler(), m_persisterFactory, m_resourceStorageDao, m_locationAwarePollerClient);
        svc.setPollConfig(pollConfig);
        synchronized(svc) {
            if (svc.getSchedule() == null) {
                Schedule schedule = new Schedule(svc, pollConfig, getScheduler());
                svc.setSchedule(schedule);
            }
        }

        if (svcLostEventId == null) {
            if (svc.getParent().getStatus().isUnknown()) {
                svc.updateStatus(PollStatus.up());
            } else {
                svc.updateStatus(svc.getParent().getStatus());
            }
        } else {
            svc.updateStatus(PollStatus.down());

            PollEvent cause = new DbPollEvent(svcLostEventId.intValue(), svcLostUei, ifLostService);

            svc.setCause(cause);

        }

        svc.schedule();

        return true;

    }

