    /**
     * Synchronously processes all pending tasks attached to this event.
     * It is important that this call be thread-safe and idempotent because
     * it may be invoked by multiple {@link DefaultPollContext#onEvent(Event)}
     * threads.
     *
     * @param e a {@link org.opennms.netmgt.xml.event.Event} object.
     */
    public void processPending() {
        while (!m_pendingOutages.isEmpty()) {
            Runnable runnable = m_pendingOutages.poll();
            if (runnable != null) {
                runnable.run();
            } else {
                return;
            }
        }
    }

