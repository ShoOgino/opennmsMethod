    /**
     * Poll the specified address for Citrix service availability.
     * 
     * During the poll an attempt is made to connect on the specified port (by
     * default port 1494). If the connection request is successful, the banner
     * line generated by the interface is parsed and if the extracted return
     * code indicates that we are talking to an Citrix server ('ICA' appears in
     * the response) we set the service status to SERVICE_AVAILABLE and return.
     * @param parameters
     *            The package parameters (timeout, retry, etc...) to be used for
     *            this poll.
     * @param iface
     *            The network interface to test the service on.
     * @return The availibility of the interface and if a transition event
     *         should be supressed.
     * 
     */
    public PollStatus poll(MonitoredService svc, Map parameters) {

        // Get the category logger
        //
        // get the parameters
        //
        int retry = ParameterMap.getKeyedInteger(parameters, "retry", DEFAULT_RETRY);
        int port = ParameterMap.getKeyedInteger(parameters, "port", DEFAULT_PORT);
        int timeout = ParameterMap.getKeyedInteger(parameters, "timeout", DEFAULT_TIMEOUT);


        // don't let the user set the timeout to 0, an infinite loop will occur
        // if the server is down
        if (timeout == 0)
            timeout = 10;

        // Extract the address
        //
        InetAddress ipv4Addr = (InetAddress) svc.getAddress();
        String host = ipv4Addr.getHostAddress();

        if (log().isDebugEnabled())
            log().debug("CitrixMonitor.poll: Polling interface: " + host + " timeout: " + timeout + " retry: " + retry);

        PollStatus serviceStatus = PollStatus.unavailable();
        long responseTime = -1;

        for (int attempts = 0; attempts <= retry && !serviceStatus.isAvailable(); attempts++) {
            Socket socket = null;
            try {
                // create a connected socket
                //
                long sentTime = System.currentTimeMillis();

                socket = new Socket();
                socket.connect(new InetSocketAddress(ipv4Addr, port), timeout);
                socket.setSoTimeout(timeout);
                log().debug("CitrixMonitor: connected to host: " + host + " on port: " + port);

                // We're connected, so upgrade status to unresponsive

                // Allocate a line reader
                //
                BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));

                StringBuffer buffer = new StringBuffer();

                // Not an infinite loop...socket timeout will break this out
                // of the loop if "ICA" string is never read.
                //
                while (!serviceStatus.isAvailable()) {
                    buffer.append((char) reader.read());
                    if (buffer.toString().indexOf("ICA") > -1) {
                        responseTime = System.currentTimeMillis() - sentTime;
                        serviceStatus = PollStatus.available(responseTime);
                    } else {
                        serviceStatus = PollStatus.unavailable("magic cookie 'ICA' missing from service greeting.");
                    }
                }
            } catch (ConnectException e) {

                // Connection refused!! Continue to retry.
            	serviceStatus = logDown(Level.DEBUG, "Connection refused by host "+host, e);
            	
            } catch (NoRouteToHostException e) {

            	// No route to host!! No need to perform retries.
                return logDown(Level.INFO, "Unable to test host " + host + ", no route available", e);
            
            } catch (InterruptedIOException e) {
            	
            	serviceStatus = logDown(Level.DEBUG, "did not connect to host within timeout: " + timeout + " attempt: " + attempts);
                		
            } catch (IOException e) {
            	
            	serviceStatus = logDown(Level.INFO, "Error communicating with host " + host, e);
                
            } catch (Throwable t) {

                serviceStatus = logDown(Level.WARN, "Undeclared throwable exception caught contacting host " + host, t);
                
            } finally {
                try {
                    if (socket != null) {
                        socket.close();
                        socket = null;
                    }
                } catch (IOException e) {
                }
            }
        }

        //
        // return the status of the service
        //
        return serviceStatus;
    }

