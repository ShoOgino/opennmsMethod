    /**
     * <p>poll</p>
     *
     * @return a {@link org.opennms.netmgt.poller.PollStatus} object.
     */
    @Override
    public PollStatus poll() {
        try {
            final String packageName = getPackageName();
            // Use the service's configured interval as the TTL for this request
            final Long ttlInMs = m_configService.getInterval();
            LOG.debug("Polling {} with TTL {} using pkg {}",
                    m_service, ttlInMs, packageName);

            PollStatus result = m_locationAwarePollerClient.poll()
                .withService(m_service)
                .withMonitor(m_serviceMonitor)
                .withTimeToLive(ttlInMs)
                .withAttributes(getParameters())
                .withAdaptor(m_latencyStoringServiceMonitorAdaptor)
                .withAdaptor(m_invertedStatusServiceMonitorAdaptor)
                .execute()
                .get().getPollStatus();
            LOG.debug("Finish polling {} using pkg {} result = {}", m_service, packageName, result);
            return result;
        } catch (InterruptedException e) {
            LOG.warn("Interrupted while invoking the poll for {}."
                    + " Marking the service as UNKNOWN.", m_service);
            return PollStatus.unknown("Interrupted while invoking the poll for"+m_service+". "+e);
        } catch (Throwable e) {
            final Throwable cause = e.getCause();
            if (cause != null && cause instanceof RequestTimedOutException) {
                LOG.warn("No response was received when remotely invoking the poll for {}."
                        + " Marking the service as UNKNOWN.", m_service);
                return PollStatus.unknown("No response received for "+m_service+". "+cause);
            }
            LOG.error("Unexpected exception while polling {}. Marking service as DOWN", m_service, e);
            return PollStatus.down("Unexpected exception while polling "+m_service+". "+e);
        }
    }

