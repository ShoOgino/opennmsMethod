    /**
     * <p>poll</p>
     *
     * @return a {@link org.opennms.netmgt.poller.PollStatus} object.
     */
    @Override
    public PollStatus poll() {
        try {
            final String packageName = getPackageName();
            // Use the service's configured interval as the TTL for this request
            final Long ttlInMs = m_configService.getInterval();
            LOG.debug("Polling {} with TTL {} using pkg {}",
                    m_service, ttlInMs, packageName);

            PollStatus result = m_locationAwarePollerClient.poll()
                .withService(m_service)
                .withMonitor(m_serviceMonitor)
                .withTimeToLive(ttlInMs)
                .withAttributes(getParameters())
                .withAdaptor(m_latencyStoringServiceMonitorAdaptor)
                .withAdaptor(m_invertedStatusServiceMonitorAdaptor)
                .execute()
                .get().getPollStatus();
            LOG.debug("Finish polling {} using pkg {} result = {}", m_service, packageName, result);
            return result;
        } catch (Throwable e) {
            return RpcExceptionUtils.handleException(e, new RpcExceptionHandler<PollStatus>() {
                @Override
                public PollStatus onInterrupted(Throwable cause) {
                    LOG.warn("Interrupted while invoking the poll for {}."
                            + " Marking the service as UNKNOWN.", m_service);
                    return PollStatus.unknown("Interrupted while invoking the poll for"+m_service+". "+e);
                }

                @Override
                public PollStatus onTimedOut(Throwable cause) {
                    LOG.warn("No response was received when remotely invoking the poll for {}."
                            + " Marking the service as UNKNOWN.", m_service);
                    return PollStatus.unknown(String.format("No response received for %s. %s", m_service, cause));
                }

                @Override
                public PollStatus onRejected(Throwable cause) {
                    LOG.warn("The request to remotely invoke the poll for {} was rejected."
                            + " Marking the service as UNKNOWN.", m_service);
                    return PollStatus.unknown(String.format("Remote poll request rejected for %s. %s", m_service, cause));
                }

                @Override
                public PollStatus onUnknown(Throwable cause) {
                    LOG.error("Unexpected exception while polling {}. Marking service as DOWN", m_service, e);
                    return PollStatus.down("Unexpected exception while polling "+m_service+". "+e);
                }
            });
        }
    }

