    /** {@inheritDoc} */
    public PollStatus poll(final MonitoredService svc, final Map<String, Object> parameterMap) {
        DefaultHttpClient client = null;
        PollStatus serviceStatus = PollStatus.unavailable("Poll not completed yet");

        Map<String,Number> responseTimes = new LinkedHashMap<String,Number>();

        try {
            PageSequenceMonitorParameters parms = PageSequenceMonitorParameters.get(parameterMap);

            client = parms.createHttpClient();

            long startTime = System.nanoTime();
            responseTimes.put("response-time", Double.NaN);
            parms.getPageSequence().execute(client, svc, responseTimes);

            long endTime = System.nanoTime();
            double responseTime = (endTime - startTime) / 1000000.0;
            serviceStatus = PollStatus.available();
            responseTimes.put("response-time", responseTime);
            serviceStatus.setProperties(responseTimes);

            return serviceStatus;
        } catch (PageSequenceMonitorException e) {
            serviceStatus = PollStatus.unavailable(e.getMessage());
            serviceStatus.setProperties(responseTimes);
            return serviceStatus;
        } catch (IllegalArgumentException e) {
            log().error("Invalid parameters to monitor: " + e.getMessage(), e);
            serviceStatus = PollStatus.unavailable("Invalid parameter to monitor: " + e.getMessage() + ".  See log for details.");
            serviceStatus.setProperties(responseTimes);
            return serviceStatus;
        } finally {
            // Do we need to do any cleanup?
            //if (client != null) {
            //    client.getHttpConnectionManager().closeIdleConnections(0);
            //}
        }
    }

