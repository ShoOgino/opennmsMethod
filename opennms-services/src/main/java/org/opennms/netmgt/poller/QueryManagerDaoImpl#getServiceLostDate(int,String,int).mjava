    /** {@inheritDoc} */
    @Override
    public Date getServiceLostDate(int nodeId, String ipAddr, int serviceId) {
        LOG.debug("getting last known status for address: {} service: {}", ipAddr, serviceId);

        // Convert service name to service identifier
        //
        if (serviceId < 0) {
            LOG.warn("Failed to retrieve service identifier for interface {} and service '{}'", ipAddr, serviceId);
            return null;
        }

        Date regainedDate = null;
        Date lostDate = null;

        Criteria criteria = new Criteria(OnmsOutage.class);
        criteria.addRestriction(new EqRestriction("monitoredService.ipInterface.node.id", nodeId));
        criteria.addRestriction(new EqRestriction("monitoredService.ipInterface.ipAddress", ipAddr));
        criteria.addRestriction(new EqRestriction("monitoredService.serviceType.id", serviceId));
        criteria.setOrders(Arrays.asList(new Order[] { Order.desc("ifLostService") }));
        criteria.setLimit(1);
        List<OnmsOutage> outage = m_outageDao.findMatching(criteria);

        if (outage.size() == 1) {
            regainedDate = outage.get(0).getIfRegainedService();
            lostDate = outage.get(0).getIfLostService();
            LOG.debug("getServiceLostDate: lostDate: {}", lostDate);
        } else if (outage.size() == 0) {
            // the service has never been down, need to use current date for
            // both
            Date currentDate = new Date(System.currentTimeMillis());
            regainedDate = currentDate;
            lostDate = currentDate;
        } else {
            throw new IllegalStateException("getServiceLostDate: Unexpected number of outages found for query: " + outage.size());
        }

        // Now use retrieved outage times to determine current status
        // of the service. If there was an error and we were unable
        // to retrieve the outage times the default of AVAILABLE will
        // be returned.
        //
        if (lostDate != null) {
            // If the service was never regained then simply
            // assign the service lost date.
            if (regainedDate == null) {
                LOG.debug("getServiceLastKnownStatus: svcLostDate: {}", lostDate);
                return lostDate;
            }
        }

        return null;
    }

