    /**
     * Update an RRD database file with multiple latency/response time data sources.
     * 
     * @param rrdJniInterface
     *            interface used to issue RRD commands.
     * @param repository
     *            path to the RRD file repository
     * @param addr
     *            interface address
     * @param dsNames
     *            the dsName
     * @param values
     *            value to update the RRD file with
     */
	
    public void updateRRD(String repository, InetAddress addr, String rrdBaseName, List<String> dsNames, List<String> values) {
        Category log = ThreadCategory.getInstance(this.getClass());

        try {
            // Create RRD if it doesn't already exist
        	List<RrdDataSource> dsList = new ArrayList<RrdDataSource>();
        	for (int i = 0; i < dsNames.size(); i++) {
        		dsList.add(new RrdDataSource(dsNames.get(i), "GAUGE", m_pollerConfig.getStep(m_pkg)*2, "U", "U"));
        	}
            createRRD(repository, addr, rrdBaseName, dsList);

            // add interface address to RRD repository path
            String path = repository + File.separator + addr.getHostAddress();

            StringBuffer value = new StringBuffer();
            Iterator<String> i = values.iterator();
            while (i.hasNext()) {
            	value.append(i.next());
            	if (i.hasNext()) {
            		value.append(":");
            	}
            }
            RrdUtils.updateRRD(addr.getHostAddress(), path, rrdBaseName, value.toString());

        } catch (RrdException e) {
            if (log.isEnabledFor(Level.ERROR)) {
                String msg = e.getMessage();
                log.error(msg);
                throw new RuntimeException(msg, e);
            }
        }
    }

