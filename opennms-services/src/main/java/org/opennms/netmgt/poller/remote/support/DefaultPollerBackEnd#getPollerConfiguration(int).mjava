    /** {@inheritDoc} */
    @Transactional(readOnly=true)
    @Override
    public PollerConfiguration getPollerConfiguration(final int locationMonitorId) {
        try {
			final OnmsLocationMonitor mon = m_locMonDao.get(locationMonitorId);
			if (mon == null) {
			    // the monitor has been deleted we'll pick this in up on the next config check
			    return new EmptyPollerConfiguration();
			}
			
            String pollingPackageName = getPackageName(mon);
            
            ConcurrentHashMap<String, SimplePollerConfiguration> cache = m_configCache.get();
            SimplePollerConfiguration pollerConfiguration = cache.get(pollingPackageName);
            if (pollerConfiguration == null) {
                pollerConfiguration = createPollerConfiguration(mon, pollingPackageName);
                SimplePollerConfiguration configInCache = cache.putIfAbsent(pollingPackageName, pollerConfiguration);
                // Make sure that we get the up-to-date value out of the ConcurrentHashMap
                if (configInCache != null) {
                    pollerConfiguration = configInCache;
                }
            }
            
            // construct a copy so the serverTime gets updated (and avoid threading issues)
            return new SimplePollerConfiguration(pollerConfiguration);
		} catch (final Exception e) {
			LogUtils.warnf(this, e, "An error occurred retrieving the poller configuration for location monitor ID %d", locationMonitorId);
			return new EmptyPollerConfiguration();
		}
    }

