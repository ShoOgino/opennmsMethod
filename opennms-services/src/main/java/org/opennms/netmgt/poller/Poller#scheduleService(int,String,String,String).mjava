    /**
     * <p>scheduleService</p>
     *
     * @param nodeId a int.
     * @param nodeLabel a {@link java.lang.String} object.
     * @param ipAddr a {@link java.lang.String} object.
     * @param svcName a {@link java.lang.String} object.
     */
    public void scheduleService(final int nodeId, final String nodeLabel, final String ipAddr, final String svcName) {
        final String normalizedAddress = InetAddressUtils.normalize(ipAddr);
        try {
            /*
             * Do this here so that we can use the treeLock for this node as we
             * add its service and schedule it
             */
            PollableNode node;
            synchronized (getNetwork()) {
                node = getNetwork().getNode(nodeId);
                if (node == null) {
                    node = getNetwork().createNode(nodeId, nodeLabel);
                }
            }

            final PollableNode svcNode = node;
            final Runnable r = new Runnable() {
                @Override
                public void run() {
                    m_transactionTemplate.execute(new TransactionCallbackWithoutResult() {

                        @Override
                        protected void doInTransactionWithoutResult(TransactionStatus arg0) {
                            final OnmsMonitoredService service = m_monitoredServiceDao.get(nodeId, InetAddressUtils.addr(ipAddr), svcName);
                            final OnmsIpInterface iface = service.getIpInterface();
                            final Set<OnmsOutage> outages = service.getCurrentOutages();
                            final OnmsOutage outage = (outages == null || outages.size() < 1 ? null : outages.iterator().next());
                            final OnmsEvent event = (outage == null ? null : outage.getServiceLostEvent());
                            if (scheduleService(
                                                service.getNodeId(), 
                                                iface.getNode().getLabel(), 
                                                InetAddressUtils.str(iface.getIpAddress()), 
                                                service.getServiceName(), 
                                                "A".equals(service.getStatus()), 
                                                event == null ? null : event.getId(), 
                                                    outage == null ? null : outage.getIfLostService(), 
                                                        event == null ? null : event.getEventUei()
                                    )) {
                                svcNode.recalculateStatus();
                                svcNode.processStatusChange(new Date());
                            } else {
                                LOG.warn("Attempt to schedule service {}/{}/{} found no active service", nodeId, normalizedAddress, svcName);
                            }
                        }
                    });
                }
            };
            node.withTreeLock(r);

        } catch (final Throwable e) {
            LOG.error("Unable to schedule service {}/{}/{}", nodeId, normalizedAddress, svcName);
        }
    }

