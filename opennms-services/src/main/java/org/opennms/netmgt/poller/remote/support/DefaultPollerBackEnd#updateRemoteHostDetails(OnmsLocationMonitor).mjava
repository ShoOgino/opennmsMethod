    protected void updateRemoteHostDetails(OnmsLocationMonitor mon) {
        Map<String,String> allDetails = new HashMap<String,String>();
        allDetails.putAll(mon.getDetails());

        String oldRemoteHostAddress = allDetails.get("org.opennms.netmgt.poller.remote.remoteHostAddress");
        String newRemoteHostAddress = null;

        // This value can be either an IP address or a hostname
        String remoteHost = RemoteHostThreadLocal.INSTANCE.get();
        if (remoteHost != null) {
            remoteHost = remoteHost.trim();
            allDetails.put("org.opennms.netmgt.poller.remote.remoteHostName", remoteHost);
            try {
                InetAddress addr = InetAddressUtils.getInetAddress(remoteHost);
                newRemoteHostAddress = InetAddressUtils.str(addr);
                // Look up the IP address for the name
                allDetails.put("org.opennms.netmgt.poller.remote.remoteHostAddress", newRemoteHostAddress);
                // Reverse-lookup the name (in case the value was an IP address before)
                if (remoteHost.equals(newRemoteHostAddress)) {
                    allDetails.put("org.opennms.netmgt.poller.remote.remoteHostName", addr.getHostName());
                }
            } catch (Throwable e) {
                // In case there is an UnknownHostException
            }
        }
        mon.setDetails(allDetails);

        if (oldRemoteHostAddress == null) {
            if (newRemoteHostAddress != null) {
                sendMonitorRemoteAddressChangedEvent(mon, oldRemoteHostAddress, newRemoteHostAddress);
            }
        } else {
            if (!oldRemoteHostAddress.equals(newRemoteHostAddress)) {
                sendMonitorRemoteAddressChangedEvent(mon, oldRemoteHostAddress, newRemoteHostAddress);
            }
        }
    }

