    /**
     * {@inheritDoc}
     *
     * Poll the specified address for Citrix service availability.
     *
     * During the poll an attempt is made to connect on the specified port (by
     * default port 1494). If the connection request is successful, the banner
     * line generated by the interface is parsed and if the extracted return
     * code indicates that we are talking to an Citrix server ('ICA' appears in
     * the response) we set the service status to SERVICE_AVAILABLE and return.
     */
    @Override
    public PollStatus poll(MonitoredService svc, Map<String, Object> parameters) {

        // Get the category logger
        //
        // get the parameters
        //
        
        TimeoutTracker timeoutTracker = new TimeoutTracker(parameters, DEFAULT_RETRY, DEFAULT_TIMEOUT);
        
        int port = ParameterMap.getKeyedInteger(parameters, "port", DEFAULT_PORT);

        // Extract the address
        //
        InetAddress ipv4Addr = svc.getAddress();
        String host = InetAddressUtils.str(ipv4Addr);

        if (LOG.isDebugEnabled())
            LOG.debug("CitrixMonitor.poll: Polling interface: " + host + timeoutTracker);

        PollStatus serviceStatus = PollStatus.unavailable();

        for(timeoutTracker.reset(); timeoutTracker.shouldRetry() && !serviceStatus.isAvailable(); timeoutTracker.nextAttempt()) {
            Socket socket = null;
            try {
                
                timeoutTracker.startAttempt();
                
                socket = new Socket();
                socket.connect(new InetSocketAddress(ipv4Addr, port), timeoutTracker.getConnectionTimeout());
                socket.setSoTimeout(timeoutTracker.getSoTimeout());
                LOG.debug("CitrixMonitor: connected to host: " + host + " on port: " + port);

                // We're connected, so upgrade status to unresponsive

                // Allocate a line reader
                //
                BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));

                StringBuffer buffer = new StringBuffer();

                // Not an infinite loop...socket timeout will break this out
                // of the loop if "ICA" string is never read.
                //
                while (!serviceStatus.isAvailable()) {
                    buffer.append((char) reader.read());
                    if (buffer.toString().indexOf("ICA") > -1) {
                        serviceStatus = PollStatus.available(timeoutTracker.elapsedTimeInMillis());
                    } else {
                        serviceStatus = PollStatus.unavailable("magic cookie 'ICA' missing from service greeting.");
                    }
                }
            } catch (ConnectException e) {

                // Connection refused!! Continue to retry.
            	String reason = "Connection refused by host "+host;
                LOG.debug(reason, e);
                serviceStatus = PollStatus.unavailable(reason);
            	
            } catch (NoRouteToHostException e) {

            	// No route to host!! Try retries anyway in case strict timeouts are enabled
                String reason = "Unable to test host " + host + ", no route available";
                LOG.debug(reason, e);
                serviceStatus = PollStatus.unavailable(reason);
            
            } catch (InterruptedIOException e) {
            	
            	String reason = "did not connect to host " + host +" within timeout: " + timeoutTracker;
                LOG.debug(reason);
                serviceStatus = PollStatus.unavailable(reason);
                		
            } catch (IOException e) {
            	
            	String reason = "Error communicating with host " + host;
                LOG.debug(reason, e);
                serviceStatus = PollStatus.unavailable(reason);
                
            } catch (Throwable t) {

                String reason = "Undeclared throwable exception caught contacting host " + host;
                LOG.debug(reason, t);
                serviceStatus = PollStatus.unavailable(reason);
                
            } finally {
                try {
                    if (socket != null) {
                        socket.close();
                        socket = null;
                    }
                } catch (IOException e) {
                }
            }
            
        }

        //
        // return the status of the service
        //
        return serviceStatus;
    }

