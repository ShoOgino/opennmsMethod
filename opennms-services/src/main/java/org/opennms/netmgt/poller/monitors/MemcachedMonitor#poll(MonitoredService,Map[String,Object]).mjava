    /**
     * {@inheritDoc}
     *
     * Poll the specified address for Memcached service availability.
     */
    public PollStatus poll(MonitoredService svc, Map<String, Object> parameters) {

        TimeoutTracker timeoutTracker = new TimeoutTracker(parameters, DEFAULT_RETRY, DEFAULT_TIMEOUT);
        
        int port = ParameterMap.getKeyedInteger(parameters, "port", DEFAULT_PORT);

        // Extract the address
        InetAddress ipv4Addr = svc.getAddress();
        String host = InetAddressUtils.str(ipv4Addr);

        if (log().isDebugEnabled())
            log().debug("polling interface: " + host + timeoutTracker);

        PollStatus serviceStatus = PollStatus.unavailable();

        for(timeoutTracker.reset(); timeoutTracker.shouldRetry() && !serviceStatus.isAvailable(); timeoutTracker.nextAttempt()) {
            Socket socket = null;
            try {

                timeoutTracker.startAttempt();
                
                socket = new Socket();
                socket.connect(new InetSocketAddress(ipv4Addr, port), timeoutTracker.getConnectionTimeout());
                socket.setSoTimeout(timeoutTracker.getSoTimeout());
                log().debug("connected to host: " + host + " on port: " + port);

                // We're connected, so upgrade status to unresponsive
                serviceStatus = PollStatus.unresponsive();

                OutputStreamWriter osw = new OutputStreamWriter(socket.getOutputStream(), "UTF-8");
                osw.write("stats\n");
                osw.flush();

                // Allocate a line reader
                BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));

                Map<String, Number> statProps = new LinkedHashMap<String,Number>();
                for (String key : m_keys) {
                    statProps.put(key, null);
                }

                String line = null;
                if (reader != null) {
                    do {
                        line = reader.readLine();
                        if (line == null) break;
                        String[] statEntry = line.trim().split("\\s", 3);
                        if (statEntry[0].equals("STAT")) {
                            try {
                                Number value;
                                if (statEntry[2].contains(".")) {
                                    value = Double.parseDouble(statEntry[2]);
                                } else {
                                    value = Long.parseLong(statEntry[2]);
                                }
                                String key = statEntry[1].toLowerCase();
                                key = key.replaceAll("_", "");
                                if (key.length() > 19) {
                                    key = key.substring(0, 19);
                                }
                                if (statProps.containsKey(key)) {
                                    statProps.put(key, value);
                                }
                            } catch (Throwable e) {
                                // ignore errors parsing
                            }
                        } else if (statEntry[0].equals("END")) {
                            serviceStatus = PollStatus.available();
                            osw.write("quit\n");
                            osw.flush();
                            break;
                        }
                    } while (line != null);
                } else {
                    log().warn("unable to read after sending stats request");
                }

                serviceStatus.setProperties(statProps);
                serviceStatus.setResponseTime(timeoutTracker.elapsedTimeInMillis());
            } catch (ConnectException e) {
                // Connection refused!! Continue to retry.
            	serviceStatus = logDown(Level.DEBUG, "Connection refused by host "+host, e);
            } catch (NoRouteToHostException e) {
            	// No route to host!! Try retries anyway in case strict timeouts are enabled
                serviceStatus = logDown(Level.INFO, "Unable to test host " + host + ", no route available", e);
            } catch (InterruptedIOException e) {
            	serviceStatus = logDown(Level.DEBUG, "did not connect to host " + host +" within timeout: " + timeoutTracker);
            } catch (IOException e) {
            	serviceStatus = logDown(Level.INFO, "Error communicating with host " + host, e);
            } catch (Throwable t) {
                serviceStatus = logDown(Level.WARN, "Undeclared throwable exception caught contacting host " + host, t);
            } finally {
                try {
                    if (socket != null) {
                        socket.close();
                        socket = null;
                    }
                } catch (IOException e) {
                }
            }
            
        }

        //
        // return the status of the service
        //
        return serviceStatus;
    }

