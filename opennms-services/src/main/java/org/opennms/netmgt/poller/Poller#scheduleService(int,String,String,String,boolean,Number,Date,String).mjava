    private boolean scheduleService(int nodeId, String nodeLabel, String ipAddr, String serviceName, boolean active, Number svcLostEventId, Date date, String svcLostUei) {
        ThreadCategory log = ThreadCategory.getInstance(getClass());

        Package pkg = findPackageForService(ipAddr, serviceName);
        if (pkg == null) {
            if(active){
                log.warn("Active service "+serviceName+" on "+ipAddr+" not configured for any package. Marking as Not Polled.");
                updateServiceStatus(nodeId, ipAddr, serviceName, "N");
            }
            return false;
        } else if (!active) {
            log.info("Active service "+serviceName+" on "+ipAddr+" is now configured for any package. Marking as active.");
            updateServiceStatus(nodeId, ipAddr, serviceName, "A");
        }
        
        ServiceMonitor monitor = m_pollerConfig.getServiceMonitor(serviceName);
        if (monitor == null) {
            log.info("Could not find service monitor associated with service "+serviceName);
            return false;
        }
        
        InetAddress addr;
        addr = InetAddressUtils.addr(ipAddr);
        if (addr == null) {
            log.error("Could not convert "+ipAddr+" as an InetAddress "+ipAddr);
            return false;
        }
        
        PollableService svc = getNetwork().createService(nodeId, nodeLabel, addr, serviceName);
        PollableServiceConfig pollConfig = new PollableServiceConfig(svc, m_pollerConfig, m_pollOutagesConfig, pkg, getScheduler());
        svc.setPollConfig(pollConfig);
        synchronized(svc) {
            if (svc.getSchedule() == null) {
                Schedule schedule = new Schedule(svc, pollConfig, getScheduler());
                svc.setSchedule(schedule);
            }
        }
        
        
        if (svcLostEventId == null) 
            if (svc.getParent().getStatus().isUnknown()) {
                svc.updateStatus(PollStatus.up());
            } else {
                svc.updateStatus(svc.getParent().getStatus());
            }
        else {
            svc.updateStatus(PollStatus.down());
            
            PollEvent cause = new DbPollEvent(svcLostEventId.intValue(), svcLostUei, date);

            svc.setCause(cause);

        }
        
        svc.schedule();
        
        return true;

    }

