    public Event createEvent(String uei, int nodeId, InetAddress address, String svcName, java.util.Date date, String reason) {
        Category log = ThreadCategory.getInstance(getClass());
    
        if (log.isDebugEnabled())
            log.debug("createEvent: uei = " + uei + " nodeid = " + nodeId);
    
        // create the event to be sent
        Event newEvent = new Event();
        newEvent.setUei(uei);
        newEvent.setSource(getName());
        newEvent.setNodeid((long) nodeId);
        if (address != null)
            newEvent.setInterface(address.getHostAddress());
    
        if (svcName != null)
            newEvent.setService(svcName);
    
        try {
            newEvent.setHost(InetAddress.getLocalHost().getHostName());
        } catch (UnknownHostException uhE) {
            newEvent.setHost("unresolved.host");
            log.warn("Failed to resolve local hostname", uhE);
        }
    
        // Set event time
        newEvent.setTime(EventConstants.formatToString(date));
    
        // For service lost events (nodeLostService) retrieve the 
        // reason parameter
        Parms eventParms = new Parms();
        Parm eventParm = new Parm();
        Value parmValue = new Value();

        if (uei.equals(EventConstants.NODE_DOWN_EVENT_UEI) && getPollerConfig().pathOutageEnabled()) {
            String[] criticalPath = getCriticalPath(nodeId);
            if(criticalPath[0] != null && !criticalPath[0].equals("")) {
                if(!testCriticalPath(criticalPath)) {
                    log.debug("Critical path test failed for node " + nodeId);
                    // add eventReason, criticalPathIp, criticalPathService parms
                    eventParm = new Parm();
                    eventParm.setParmName(EventConstants.PARM_LOSTSERVICE_REASON);
                    parmValue = new Value();
                    parmValue.setContent(EventConstants.PARM_VALUE_PATHOUTAGE);
                    eventParm.setValue(parmValue);
                    eventParms.addParm(eventParm);

                    eventParm = new Parm();
                    eventParm.setParmName(EventConstants.PARM_CRITICAL_PATH_IP);
                    parmValue = new Value();
                    parmValue.setContent(criticalPath[0]);
                    eventParm.setValue(parmValue);
                    eventParms.addParm(eventParm);

                    eventParm = new Parm();
                    eventParm.setParmName(EventConstants.PARM_CRITICAL_PATH_SVC);
                    parmValue = new Value();
                    parmValue.setContent(criticalPath[1]);
                    eventParm.setValue(parmValue);
                    eventParms.addParm(eventParm);
                } else {
                    log.debug("Critical path test passed for node " + nodeId);
                }
            } else {
                log.debug("No Critical path to test for node " + nodeId);
            }
        }

        
        if (uei.equals(EventConstants.NODE_LOST_SERVICE_EVENT_UEI)) {
            eventParm = new Parm();
            eventParm.setParmName(EventConstants.PARM_LOSTSERVICE_REASON);
            parmValue = new Value();
            parmValue.setContent(reason == null ? "Unknown" : reason);
            eventParm.setValue(parmValue);
            eventParms.addParm(eventParm);
        }
        
        // For node level events (nodeUp/nodeDown) retrieve the
        // node's nodeLabel value and add it as a parm
        if (uei.equals(EventConstants.NODE_UP_EVENT_UEI) || uei.equals(EventConstants.NODE_DOWN_EVENT_UEI)) {
            String nodeLabel = null;
            try {
                nodeLabel = getQueryMgr().getNodeLabel(nodeId);
            } catch (SQLException sqlE) {
                // Log a warning
                log.warn("Failed to retrieve node label for nodeid " + nodeId, sqlE);
            }
    
            if (nodeLabel == null) {
                // This should never happen but if it does just
                // use nodeId for the nodeLabel so that the
                // event description has something to display.
                nodeLabel = String.valueOf(nodeId);
            }
    
            // Add nodelabel parm
            eventParm = new Parm();
            eventParm.setParmName(EventConstants.PARM_NODE_LABEL);
            parmValue = new Value();
            parmValue.setContent(nodeLabel);
            eventParm.setValue(parmValue);
            eventParms.addParm(eventParm);    
        }
        // Add Parms to the event
        if (eventParms.getParmCount() > 0)
            newEvent.setParms(eventParms);
    
        return newEvent;
    }

