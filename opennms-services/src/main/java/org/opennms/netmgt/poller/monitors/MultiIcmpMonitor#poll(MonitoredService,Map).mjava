    /**
     * <P>
     * Poll the specified address for ICMP service availability.
     * </P>
     * 
     * <P>
     * The ICMP service monitor relies on Discovery for the actual generation of
     * IMCP 'ping' requests. A JSDT session with two channels (send/receive) is
     * utilized for passing poll requests and receiving poll replies from
     * discovery. All exchanges are SOAP/XML compliant.
     * </P>
     * @param parameters
     *            The package parameters (timeout, retry, etc...) to be used for
     *            this poll.
     * @param iface
     *            The network interface to test the service on.
     * @return The availability of the interface and if a transition event
     *         should be suppressed.
     * 
     */
    public PollStatus poll(MonitoredService svc, Map parameters) {
        NetworkInterface iface = svc.getNetInterface();

        // Get interface address from NetworkInterface
        //
        if (iface.getType() != NetworkInterface.TYPE_IPV4)
            throw new NetworkInterfaceNotSupportedException("Unsupported interface type, only TYPE_IPV4 currently supported");

        Category log = ThreadCategory.getInstance(this.getClass());
        PollStatus serviceStatus = PollStatus.unavailable();
		InetAddress host = (InetAddress) iface.getAddress();
		Collection<Long> rtt = null;
		
		try {
			Pinger pinger = new Pinger();
			
			// get parameters
			//
			pinger.setRetries(ParameterMap.getKeyedInteger(parameters, "retry", pinger.getRetries()));
			pinger.setTimeout(ParameterMap.getKeyedLong(parameters, "timeout", pinger.getTimeout()));
			int count = ParameterMap.getKeyedInteger(parameters, "pings", DEFAULT_MULTI_PING_COUNT);
			
			rtt = pinger.parallelPing(host, count);
		} catch (IOException e) {
			log.debug("failed to ping " + host, e);
		}
        
        if (rtt != null) {
        	serviceStatus = PollStatus.available();
        	serviceStatus.setResponseTime(CollectionMath.average(rtt));
        	serviceStatus.setResponseTimes(rtt);
        }
        
        return serviceStatus;
    }

