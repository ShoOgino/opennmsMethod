    /**
     * <p>checkForDisconnectedMonitors</p>
     */
    @Override
    public void checkForDisconnectedMonitors() {

        LOG.debug("Checking for disconnected monitors: disconnectedTimeout = {}", m_disconnectedTimeout);

        try {
	        final Date now = m_timeKeeper.getCurrentDate();
	        final Date earliestAcceptable = new Date(now.getTime() - m_disconnectedTimeout);
	
	        final Collection<OnmsLocationMonitor> monitors = m_locMonDao.findAll();
	        LOG.debug("Found {} monitors", monitors.size());
	
	        for (final OnmsLocationMonitor monitor : monitors) {
	            if (monitor.getStatus() == MonitorStatus.STARTED 
	                    && monitor.getLastCheckInTime() != null 
	                    && monitor.getLastCheckInTime().before(earliestAcceptable))
	            {
	                LOG.debug("Monitor {} has stopped responding", monitor.getName());
	                monitor.setStatus(MonitorStatus.DISCONNECTED);
	                m_locMonDao.update(monitor);
	
	                sendDisconnectedEvent(monitor);
	            } else {
	                LOG.debug("Monitor {} ({}) last responded at {}", monitor.getName(), monitor.getStatus(), monitor.getLastCheckInTime());
	            }
	        }
        } catch (final Throwable e) {
		LOG.warn("An error occurred checking for disconnected monitors.", e);
        }
    }

