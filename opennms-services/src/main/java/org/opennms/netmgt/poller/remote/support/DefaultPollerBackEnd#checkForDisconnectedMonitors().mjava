    /**
     * <p>checkForDisconnectedMonitors</p>
     */
    public void checkForDisconnectedMonitors() {

        LogUtils.debugf(this, "Checking for disconnected monitors: disconnectedTimeout = %d", m_disconnectedTimeout);

        try {
	        final Date now = m_timeKeeper.getCurrentDate();
	        final Date earliestAcceptable = new Date(now.getTime() - m_disconnectedTimeout);
	
	        final Collection<OnmsLocationMonitor> monitors = m_locMonDao.findAll();
	        LogUtils.debugf(this, "Found %d monitors", monitors.size());
	
	        for (final OnmsLocationMonitor monitor : monitors) {
	            if (monitor.getStatus() == MonitorStatus.STARTED && monitor.getLastCheckInTime().before(earliestAcceptable)) {
	                LogUtils.debugf(this, "Monitor %s has stopped responding", monitor.getName());
	                monitor.setStatus(MonitorStatus.DISCONNECTED);
	                m_locMonDao.update(monitor);
	
	                sendDisconnectedEvent(monitor);
	            } else {
	                LogUtils.debugf(this, "Monitor %s (%s) last responded at %s", monitor.getName(), monitor.getStatus(), monitor.getLastCheckInTime());
	            }
	        }
        } catch (final Exception e) {
        	LogUtils.warnf(this, e, "An error occurred checking for disconnected monitors.");
        }
    }

