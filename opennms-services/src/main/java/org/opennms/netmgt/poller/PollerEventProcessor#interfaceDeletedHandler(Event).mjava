    /**
     * 
     */
    private void interfaceDeletedHandler(Event event) {
        Long nodeId = event.getNodeid();
        String sourceUei = event.getUei();
        InetAddress ipAddr = event.getInterfaceAddress();
        
        // Extract node label and transaction No. from the event parms
        long txNo = -1L;
        Parms parms = event.getParms();
        if (parms != null) {
            String parmName = null;
            Value parmValue = null;
            String parmContent = null;
            
            for (Parm parm : parms.getParmCollection()) {
                parmName = parm.getParmName();
                parmValue = parm.getValue();
                if (parmValue == null)
                    continue;
                else
                    parmContent = parmValue.getContent();

                // get the external transaction number
                if (parmName.equals(EventConstants.PARM_TRANSACTION_NO)) {
                    String temp = parmContent;
                    LogUtils.debugf(this, "interfaceDeletedHandlerHandler:  parmName: %s /parmContent: %s", parmName, parmContent);
                    try {
                        txNo = Long.valueOf(temp).longValue();
                    } catch (final NumberFormatException nfe) {
                        LogUtils.warnf(this, nfe, "interfaceDeletedHandlerHandler: Parameter %s cannot be non-numberic", EventConstants.PARM_TRANSACTION_NO);
                        txNo = -1;
                    }
                }
            }
        }
        
        Date closeDate;
        try {
            closeDate = EventConstants.parseToDate(event.getTime());
        } catch (ParseException e) {
            closeDate = new Date();
        }
        
        getPoller().closeOutagesForInterface(closeDate, event.getDbid(), nodeId.intValue(), InetAddressUtils.str(ipAddr));

        
        PollableInterface iface = getNetwork().getInterface(nodeId.intValue(), ipAddr);
        if (iface == null) {
          LogUtils.errorf(this, "Interface %d/%s does not exist in pollable node map, unable to delete node.", nodeId, event.getInterface());
          if (isXmlRPCEnabled()) {
              int status = EventConstants.XMLRPC_NOTIFY_FAILURE;
              XmlrpcUtil.createAndSendXmlrpcNotificationEvent(txNo, sourceUei, "Interface does not exist in pollable node map.", status, "OpenNMS.Poller");
          }
          return;
        }
        iface.delete();

    }

