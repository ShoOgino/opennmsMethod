    /* (non-Javadoc)
     * @see org.opennms.netmgt.poller.monitors.ServiceMonitor#poll(org.opennms.netmgt.poller.monitors.NetworkInterface, java.util.Map, org.opennms.netmgt.config.poller.Package)
     */
    /** {@inheritDoc} */
    @Override
    public PollStatus poll(MonitoredService svc, Map<String, Object> map) {

        NetworkInterface<InetAddress> iface = svc.getNetInterface();

        PollStatus     serviceStatus = PollStatus.unavailable();
        String         dsName        = null;
        InetAddress    ipv4Addr      = (InetAddress)iface.getAddress();
        
        ConnectionWrapper connection = null;


        try {
            
            int retry = ParameterMap.getKeyedInteger(map, "retry", 3);

            long t0 = 0;
            for (int attempts=0; attempts <= retry && !serviceStatus.isAvailable(); attempts++) {
                LOG.debug("connecting to {} on node ID {}, attempt number {}", InetAddressUtils.str(ipv4Addr), svc.getNodeId(), attempts + 1);
                try {
                    t0 = System.nanoTime();
                    connection = getMBeanServerConnection(map, ipv4Addr);
                    if (connection != null) {
                        connection.getMBeanServer().getMBeanCount();
                        long nanoResponseTime = System.nanoTime() - t0;
                        serviceStatus = PollStatus.available(nanoResponseTime / 1000000.0);
                        break;
                    }
                }
                catch(IOException e) {
                    String reason = dsName+": IOException while polling address: " + ipv4Addr;
                    LOG.debug(reason);
                    serviceStatus = PollStatus.unavailable(reason);
                    break;
                }
            }
        } catch (Throwable e) {
            String reason = dsName+" Monitor - failed! " + InetAddressUtils.str(ipv4Addr);
            LOG.debug(reason);
            serviceStatus = PollStatus.unavailable(reason);
        } finally {
            if (connection != null) {
                connection.close();
            }
        }
        
        return serviceStatus;
    }

