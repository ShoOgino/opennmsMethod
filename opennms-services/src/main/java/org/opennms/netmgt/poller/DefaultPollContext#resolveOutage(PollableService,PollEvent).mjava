    /* (non-Javadoc)
     * @see org.opennms.netmgt.poller.pollables.PollContext#resolveOutage(org.opennms.netmgt.poller.pollables.PollableService, org.opennms.netmgt.xml.event.Event)
     */
    /** {@inheritDoc} */
    @Override
    public void resolveOutage(final PollableService svc, final PollEvent svcRegainEvent) {
        // Resolve the outage immediately
        final Integer outageId = getQueryManager().resolveOutagePendingRegainEventId(svc.getNodeId(),
                svc.getIpAddr(), svc.getSvcName(), svcRegainEvent.getDate());

        // There may be no outage for this particular service. This can happen when interfaces
        // are reparented or when a node gains a new service while down.
        if (outageId == null) {
            LOG.info("resolveOutage: no outstanding outage for {} on {} with node id {}", svc.getSvcName(), svc.getIpAddr(), svc.getNodeId());
            return;
        }

        // Defer updating the outage with the event id until we receive back
        // from the event bus
        final Runnable r = new Runnable() {
            @Override
            public void run() {
                final int eventId = svcRegainEvent.getEventId();
                if (eventId > 0) {
                    getQueryManager().updateResolvedOutageWithEventId(outageId, eventId);
                } else {
                    LOG.warn("run: Failed to determine an eventId for service regained for: {} with event: {}", svc, svcRegainEvent);
                }
            }
        };
        if (svcRegainEvent instanceof PendingPollEvent) {
            ((PendingPollEvent)svcRegainEvent).addPending(r);
        }
        else {
            r.run();
        }
    }

