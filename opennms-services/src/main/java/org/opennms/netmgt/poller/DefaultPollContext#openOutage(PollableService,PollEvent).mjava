    /** {@inheritDoc} */
    @Override
    public void openOutage(final PollableService svc, final PollEvent svcLostEvent) {
        LOG.debug("openOutage: Opening outage for: {} with event:{}", svc, svcLostEvent);
        final int nodeId = svc.getNodeId();
        final String ipAddr = svc.getIpAddr();
        final String svcName = svc.getSvcName();
        final Runnable r = new Runnable() {
            @Override
            public void run() {
                LOG.debug("run: Opening outage with query manager: {} with event:{}", svc, svcLostEvent);

                final int eventId = svcLostEvent.getEventId();
                if (eventId > 0) {
                    try {
                        getQueryManager().openOutage(getPollerConfig().getNextOutageIdSql(), nodeId, ipAddr, svcName, eventId, svcLostEvent.getDate());
                    } catch (DataIntegrityViolationException e) {
                        // See NMS-7519 for details
                        LOG.error("openOutage: Failed to open outage with event: '{}'. Another outage for this service is already open.", svcLostEvent, e);
                    }
                } else {
                    LOG.warn("run: Failed to determine an eventId for service outage for: {} with event: {}", svc, svcLostEvent);
                }
            }
        };
        if (svcLostEvent instanceof PendingPollEvent) {
            ((PendingPollEvent)svcLostEvent).addPending(r);
        }
        else {
            r.run();
        }
        
    }

