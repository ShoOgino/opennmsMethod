    /**
     * This method is responsible for determining the
     * data related to the critical path:
     * node label, nodeId, the number of nodes
     * dependent on this path, and the managed state
     * of the path
     *
     * @param criticalPathIp a {@link java.lang.String} object.
     * @param criticalPathServiceName a {@link java.lang.String} object.
     * @return an array of {@link java.lang.String} objects.
     * @throws java.sql.SQLException if any.
     */
    public String[] getCriticalPathData(String criticalPathIp, String criticalPathServiceName) {
        String[] result = new String[4];
        int count = 0;
        OnmsNode node = new OnmsNode();

        //private static final String GET_NODELABEL_BY_IP = "SELECT nodelabel FROM node WHERE nodeid IN (SELECT nodeid FROM ipinterface WHERE ipaddr=? AND ismanaged!='D')";
        
        final org.opennms.core.criteria.Criteria criteria = new org.opennms.core.criteria.Criteria(OnmsNode.class)
        .setAliases(Arrays.asList(new Alias[] {
            new Alias("ipInterfaces","ipInterfaces", JoinType.LEFT_JOIN)
        }))
        .addRestriction(new EqRestriction("ipInterfaces.ipAddress", InetAddressUtils.addr(criticalPathIp)))
        //TODO: Replace D with a constant
        .addRestriction(new NeRestriction("ipInterfaces.isManaged", "D"));

        List<OnmsNode> nList = nodeDao.findMatching(criteria);
        if(nList.size() < 1) {
        	return result;
        }
        else if(nList.size() == 1) {
        	node = nList.get(0);
        	result[0] = node.getLabel();
        }
        else if(nList.size() > 1) {
        	result[0] = "(" + nList.size() + " nodes have this IP)";
        }
        
        result[1] = node.getNodeId();
        result[2] = Integer.toString(nList.size());
        
        //"SELECT count(*) FROM outages WHERE ipaddr=? AND ifregainedservice IS NULL AND serviceid=(SELECT serviceid FROM service WHERE servicename=?)";
                   
        final org.opennms.core.criteria.Criteria crit = new org.opennms.core.criteria.Criteria(OnmsOutage.class)
        .setAliases(Arrays.asList(new Alias[] {
            new Alias("monitoredService","monitoredService", JoinType.LEFT_JOIN),
            new Alias("monitoredService.serviceType","serviceType", JoinType.LEFT_JOIN),
            new Alias("monitoredService.ipInterface","ipInterface", JoinType.LEFT_JOIN)
        }))
        .addRestriction(new NullRestriction("ifRegainedService"))
        .addRestriction(new EqRestriction("serviceType.name", criticalPathServiceName))
        .addRestriction(new EqRestriction("ipInterface.ipAddress",InetAddressUtils.addr(criticalPathIp)));
        	
        List<OnmsOutage> oList = outageDao.findMatching(crit);
        
        count = oList.size();

        if(count > 0) {
        	final org.opennms.core.criteria.Criteria tres = new org.opennms.core.criteria.Criteria(OnmsMonitoredService.class)
        	.setAliases(Arrays.asList(new Alias[] {
        			new Alias("serviceType","monitoredService.serviceType", JoinType.LEFT_JOIN)
                	}))
                	.addRestriction(new EqRestriction("status", StatusType.ACTIVE))
                	.addRestriction(new EqRestriction("serviceType.name", criticalPathServiceName))
                	.addRestriction(new EqRestriction("ipAddress",InetAddressUtils.addr(criticalPathIp)));
            	
        	List<OnmsMonitoredService> oms = monitoredServiceDao.findMatching(tres);

        	count = oms.size();
        	if(count > 0) {
        		result[3] = "Critical";
        	} else {
        		result[3] = "Normal";
        	}
        	for (OnmsMonitoredService open: oms) {
        		result[3] = open.getStatus();
        	}
        } else {
        	result[3] = "Cleared";
        }
        
        return result;
    }

