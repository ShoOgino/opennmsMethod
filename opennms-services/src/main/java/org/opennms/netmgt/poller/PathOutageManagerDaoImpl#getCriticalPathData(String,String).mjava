    /**
     * This method is responsible for determining the
     * data related to the critical path:
     * node label, nodeId, the number of nodes
     * dependent on this path, and the managed state
     * of the path
     *
     * @param criticalPathIp a {@link java.lang.String} object.
     * @param criticalPathServiceName a {@link java.lang.String} object.
     * @return an array of {@link java.lang.String} objects.
     * @throws java.sql.SQLException if any.
     */
    @Override
    public String[] getCriticalPathData(String criticalPathIp, String criticalPathServiceName) {
        String[] result = new String[4];

        // Fetch all non-deleted nodes that have the critical path IP address

        List<OnmsNode> nList = nodeDao.findByIpAddressAndService(InetAddressUtils.addr(criticalPathIp), criticalPathServiceName);

        if(nList.size() < 1) {
            // Didn't find the critical node so just return an empty result
            return result;
        } else if(nList.size() == 1) {
            OnmsNode node = nList.get(0);
            result[0] = node.getLabel();
            result[1] = node.getNodeId();
        } else if(nList.size() > 1) {
            OnmsNode node = nList.get(0);
            result[0] = "(" + nList.size() + " nodes have this IP)";
            result[1] = node.getNodeId();
        }

        result[2] = String.valueOf(pathOutageDao.getNodesForPathOutage(InetAddressUtils.addr(criticalPathIp), criticalPathServiceName).size());

        OnmsMonitoredService service = monitoredServiceDao.get(Integer.valueOf(result[1]), InetAddressUtils.addr(criticalPathIp), criticalPathServiceName);

        if (service != null) {
            OnmsOutage outage = outageDao.currentOutageForService(service);

            if(outage == null) {
                result[3] = "Normal";
            } else {
                result[3] = "Critical";
            }
        } else {
            result[3] = "Cleared";
        }
        
        return result;
    }

