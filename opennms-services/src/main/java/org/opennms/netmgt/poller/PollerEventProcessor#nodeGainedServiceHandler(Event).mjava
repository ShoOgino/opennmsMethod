    /**
     * Process the event, construct a new PollableService object representing
     * the node/interface/service/pkg combination, and schedule the service for
     * polling.
     * 
     * If any errors occur scheduling the interface no error is returned.
     * 
     * @param event
     *            The event to process.
     * 
     */
    private void nodeGainedServiceHandler(final Event event) {
        // First make sure the service gained is in active state before trying to schedule

    	final String ipAddr = event.getInterface();
    	final Long nodeId = event.getNodeid();
    	final String svcName = event.getService();
        
    	String nodeLabel = EventUtils.getParm(event, EventConstants.PARM_NODE_LABEL);
        
        try {
            nodeLabel = getPoller().getQueryManager().getNodeLabel(nodeId.intValue());
        } catch (final Exception e) {
            LogUtils.errorf(this, e, "Unable to retrieve nodeLabel for node %d", nodeId);
        }

        getPoller().scheduleService(nodeId.intValue(), nodeLabel, ipAddr, svcName);
        
    }

