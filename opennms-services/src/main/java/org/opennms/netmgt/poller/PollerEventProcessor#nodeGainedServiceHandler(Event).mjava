    /**
     * Process the event, construct a new PollableService object representing
     * the node/interface/service/pkg combination, and schedule the service for
     * polling.
     * 
     * If any errors occur scheduling the interface no error is returned.
     * 
     * @param event
     *            The event to process.
     * 
     */
    private void nodeGainedServiceHandler(Event event) {
        ThreadCategory log = ThreadCategory.getInstance(getClass());

        // Is this the result of a resumePollingService event?
        @SuppressWarnings("unused")
        String whichEvent = "Unexpected Event: " + event.getUei() + ": ";
        if (event.getUei().equals(EventConstants.NODE_GAINED_SERVICE_EVENT_UEI)) {
            whichEvent = "nodeGainedService: ";
        } else if (event.getUei().equals(EventConstants.RESUME_POLLING_SERVICE_EVENT_UEI)) {
            whichEvent = "resumePollingService: ";
        }
        

        // First make sure the service gained is in active state before trying to schedule

        String ipAddr = event.getInterface();
        int nodeId = (int) event.getNodeid();
        String svcName = event.getService();
        
        String nodeLabel = EventUtils.getParm(event, EventConstants.PARM_NODE_LABEL);
        
        try {
            nodeLabel = getPoller().getQueryManager().getNodeLabel(nodeId);
        } catch (Exception e) {
            log.error("Unable to retrieve nodeLabel for node "+nodeId, e);
        }

        getPoller().scheduleService(nodeId, nodeLabel, ipAddr, svcName);
        
    }

