    /** {@inheritDoc} */
    @Override
    public void onEvent(Event e) {
        final String eventString = LOG.isDebugEnabled() ? EventUtils.toString(e) : e.getUuid();

        if (isReloadConfigEvent(e)) {
            handleReloadEvent(e);
            return;
        }

        if (getName().equals(e.getSource())) {
            LOG.debug("onEvent: ignoring event with EventTranslator as source");
            return;
        }

        List<Event> translated = m_config.translateEvent(e);
        if (translated != null) {
            if (translated.isEmpty() && LOG.isDebugEnabled()) {
                LOG.debug("onEvent: received event that matches no translations: {}", eventString);
                return;
            }
            if (LOG.isDebugEnabled())
            LOG.debug("onEvent: received valid registered translation event: {}", eventString);

            Log log = new Log();
            Events events = new Events();
            for (Iterator<Event> iter = translated.iterator(); iter.hasNext();) {
                Event event = iter.next();
                events.addEvent(event);
                LOG.debug("onEvent: sended translated event: {}", eventString);
            }
            log.setEvents(events);
            getEventManager().sendNow(log);
        }
    }

