	void deleteNode(int nodeid) {
	    LogUtils.debugf(this, "deleteNode: deleting LinkableNode for node %s", nodeid);

		try {
			m_queryMgr.update(nodeid, QueryManager.ACTION_DELETE);
		} catch (SQLException sqlE) {
		    LogUtils.errorf(this, sqlE, "scheduleNodeCollection: SQL Exception while syncing node object with database information.");
		} 
		

		LinkableNode node = removeNode(nodeid);

		if (node == null) {
		    LogUtils.warnf(this, "deleteNode: node not found: %d", nodeid);
		} else {
			Iterator<SnmpCollection> ite = getSnmpCollections(node.getSnmpPrimaryIpAddr(), node.getSysoid()).iterator();
			LogUtils.debugf(this, "deleteNode: get Snmp Collection from Scratch! Iterating on found.");

			while (ite.hasNext()) {
				ReadyRunnable rr = getReadyRunnable(ite.next());
				
				if (rr == null) {
				    LogUtils.warnf(this, "deleteNode: found null ReadyRunnable");
					return;
				} else {
					rr.unschedule();
				}	

			}
			
		}

		// database changed need reload packageiplist
		m_linkdConfig.updatePackageIpListMap();

	}

