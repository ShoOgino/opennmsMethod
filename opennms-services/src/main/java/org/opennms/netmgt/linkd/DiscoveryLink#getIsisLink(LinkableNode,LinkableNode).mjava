    private List<NodeToNodeLink> getIsisLink(LinkableNode linknode1,
                                             LinkableNode linknode2) {
        
        LOG.info("getIsisLink: finding IS-IS links between node with id {} and node with id {}.", linknode1.getNodeId(), linknode2.getNodeId());
        List<NodeToNodeLink> links = new ArrayList<NodeToNodeLink>();
        for (IsisISAdjInterface isis1: linknode1.getIsisInterfaces()) {
            for (IsisISAdjInterface isis2: linknode2.getIsisInterfaces()) {
                LOG.debug("getIsisLink: first IS-IS element: isisSysId {} isisISAdj {}.", linknode1.getIsisSysId(), isis1);
                LOG.debug("getIsisLink: second IS-IS element: isisSysId {} isisISAdj {}.", linknode2.getIsisSysId(), isis2);
                if (isis1.getIsisISAdjNeighSysId().equals(linknode2.getIsisSysId()) && isis2.getIsisISAdjNeighSysId().equals(linknode1.getIsisSysId())
                        && isis1.getIsisISAdjIndex().intValue() == isis2.getIsisISAdjIndex().intValue()) {
                    NodeToNodeLink link = new NodeToNodeLink(linknode1.getNodeId(), isis1.getIsisLocalIfIndex(),DiscoveryProtocol.isis);
                    link.setNodeparentid(linknode2.getNodeId());
                    link.setParentifindex(isis2.getIsisLocalIfIndex());
                    links.add(link);
                }
            }
        }
        return links;
    }

