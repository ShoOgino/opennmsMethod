    protected void processDot1DBasePortTable(final LinkableNode node, final SnmpCollection snmpcoll, final Connection dbConn, final Timestamp scanTime, final OnmsVlan vlan, final SnmpVlanCollection snmpVlanColl) throws SQLException {
        if (LogUtils.isDebugEnabled(this)) {
            if (snmpVlanColl.getDot1dBasePortTable().size() > 0) {
                LogUtils.debugf(this, "processDot1DBasePortTable: Starting dot1BasePort table processing for %d/%s", node.getNodeId(), str(node.getSnmpPrimaryIpAddr()));
            } else {
                LogUtils.debugf(this, "processDot1DBasePortTable: Zero dot1BasePort table entries for %d/%s", node.getNodeId(), str(node.getSnmpPrimaryIpAddr()));
            }
        }

        for (final Dot1dBasePortTableEntry dot1dbaseptentry : snmpVlanColl.getDot1dBasePortTable()) {
            int baseport = dot1dbaseptentry.getBaseBridgePort();
            int ifindex = dot1dbaseptentry.getBaseBridgePortIfindex();

            if (baseport == -1 || ifindex == -1) {
                LogUtils.warnf(this, "processDot1DBasePortTable: Invalid base port (%d) or ifIndex (%d). Skipping.", baseport, ifindex);
                continue;
            }

            node.setIfIndexBridgePort(ifindex, baseport);

            
            
            if (snmpcoll.getSaveStpInterfaceTable()) {
                final OnmsNode onmsNode = getNode(node.getNodeId());
                if (onmsNode == null) {
                    LogUtils.debugf(this, "no node found!");
                    continue;
                }
                final OnmsStpInterface stpInterface = new OnmsStpInterface(onmsNode, baseport, vlan.getVlanId());
                stpInterface.setBridgePort(baseport);
                stpInterface.setVlan(vlan.getVlanId());
                stpInterface.setIfIndex(ifindex);
                stpInterface.setStatus(DbStpNodeEntry.STATUS_ACTIVE);
                stpInterface.setLastPollTime(scanTime);

                saveStpInterface(dbConn, stpInterface);
            }
        }
    }

