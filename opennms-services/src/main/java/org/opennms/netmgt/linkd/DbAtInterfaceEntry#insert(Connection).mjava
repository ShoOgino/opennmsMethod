	/**
	 * Inserts the new row into the AtInterface table
	 * of the OpenNMS databasee.
	 *
	 * @param c	The connection to the database.
	 *
	 * @throws java.sql.SQLException Thrown if an error occurs
	 * 	with the connection
	 */
	private void insert(Connection c) throws SQLException {
		if (m_fromDb)
			throw new IllegalStateException(
					"The record already exists in the database");

		Category log = ThreadCategory.getInstance(getClass());

		// first extract the next node identifier
		//
		StringBuffer names = new StringBuffer(
				"INSERT INTO AtInterface (nodeid,ipaddr");
		StringBuffer values = new StringBuffer("?,?");

		if ((m_changed & CHANGED_PHYSADDR) == CHANGED_PHYSADDR) {
			values.append(",?");
			names.append(",atphysaddr");
		}

		if ((m_changed & CHANGED_SOURCE) == CHANGED_SOURCE) {
			values.append(",?");
			names.append(",sourceNodeid");
		}

		if ((m_changed & CHANGED_IFINDEX) == CHANGED_IFINDEX) {
			values.append(",?");
			names.append(",ifindex");
		}

		if ((m_changed & CHANGED_STATUS) == CHANGED_STATUS) {
			values.append(",?");
			names.append(",status");
		}

		if ((m_changed & CHANGED_POLLTIME) == CHANGED_POLLTIME) {
			values.append(",?");
			names.append(",lastpolltime");
		}

		names.append(") VALUES (").append(values).append(')');
		
		if (log.isDebugEnabled())
			log.debug("AtInterfaceEntry.insert: SQL insert statment = " + names.toString());

		// create the Prepared statment and then
		// start setting the result values
		//

		PreparedStatement stmt = c.prepareStatement(names.toString());

		int ndx = 1;
		stmt.setInt(ndx++, m_nodeId);
		stmt.setString(ndx++, m_ipaddr);

		if ((m_changed & CHANGED_PHYSADDR) == CHANGED_PHYSADDR)
			stmt.setString(ndx++, m_physaddr);

		if ((m_changed & CHANGED_SOURCE) == CHANGED_SOURCE)
			stmt.setInt(ndx++, m_sourcenodeid);

		if ((m_changed & CHANGED_IFINDEX) == CHANGED_IFINDEX)
			stmt.setInt(ndx++, m_ifindex);

		if ((m_changed & CHANGED_STATUS) == CHANGED_STATUS)
			stmt.setString(ndx++, new String(new char[] { m_status }));

		if ((m_changed & CHANGED_POLLTIME) == CHANGED_POLLTIME) {
			stmt.setTimestamp(ndx++, m_lastPollTime);
		}

		// Run the insert
		//
		int rc = stmt.executeUpdate();
		
		if (log.isDebugEnabled())
			log.debug("AtInterfaceEntry.insert: row " + rc);
		
		stmt.close();

		// clear the mask and mark as backed
		// by the database
		//
		m_fromDb = true;
		m_changed = 0;
	}

