        public void parseBFTEntry(Integer nodeid, Integer bridgePort, Set<String> macs) {
            // Then find the bridges whose MAC addresses are learned on
            // bridge port
//            final List<LinkableNode> bridgesOnPort = getBridgesFromMacs(bridgeNodes.values(),macs);

//            if (bridgesOnPort.isEmpty()) {
//                LOG.debug("getLinksFromBridge: no bridges macs found on port {}. Saving MACs.", curBridgePort);
//                macParsed = addLinks(macParsed,macs, curNodeId, curIfIndex,DiscoveryProtocol.bridge);
//                continue;
//            } 
            // a bridge MAC address was found on port so you should
            // analyze what happens
//            LOG.debug("getLinksFromBridge: bridges macs found on port {}. Searching nearest.", curBridgePort);

            // one among these bridges should be the node more close
            // to the curnode, curport
//            for (final LinkableNode endNode : bridgesOnPort) {
//                final int endNodeid = endNode.getNodeId();
//                if (curNodeId == endNodeid) {
//                    LOG.debug("getLinksFromBridge: curnode and target node are the same. Skipping.");
//                    continue;
//                }
//                final int endBridgePort = getBridgePortOnEndBridge(curNode,
//                                                                   endNode);
//                // The bridge port should be valid! This control is
//                // not properly done
//                if (endBridgePort == -1) {
//                    LOG.warn("getLinksFromBridge: no valid port found on bridge nodeid {} for node bridge identifiers nodeid {}. Skipping.", endNodeid, curNodeId);
//                    continue;
//                }

                // Try to found a new
//                final boolean isTargetNode = isNearestBridgeLink(bridgeNodes.values(),curNode,
//                                                                 curBridgePort,
//                                                                 endNode,
//                                                                 endBridgePort);
//                if (!isTargetNode)
//                    continue;

//                final int endIfindex = endNode.getIfindex(endBridgePort);
//                if (endIfindex == -1) {
//                    LOG.warn("getLinksFromBridge: got invalid ifindex on designated bridge port {}", endBridgePort);
//                    continue;
//                }

//                LOG.debug("getLinksFromBridge: backbone port found for node {}. Adding backbone bridge port {}", curNodeId, curBridgePort);

//                curNode.addBackBoneBridgePorts(curBridgePort);
//                bridgeNodes.put(curNodeId, curNode);

//                LOG.debug("getLinksFromBridge: backbone port found for node {}. Adding to backbone bridge port {}", endNodeid, endBridgePort);

//                endNode.addBackBoneBridgePorts(endBridgePort);
//                bridgeNodes.put(endNodeid, endNode);

                // finding links between two backbone ports
//            }
    
        }

