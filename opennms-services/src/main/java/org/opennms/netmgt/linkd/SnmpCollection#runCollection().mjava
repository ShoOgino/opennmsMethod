    private void runCollection() {

        EventBuilder builder = new EventBuilder(
                                                "uei.opennms.org/internal/linkd/nodeLinkDiscoveryStarted",
                                                "Linkd");
        builder.setNodeid(m_nodeid);
        builder.setInterface(m_address);
        builder.addParam("runnable", "snmpCollection");
        m_linkd.getEventForwarder().sendNow(builder.getEvent());

        final String hostAddress = str(m_address);

        m_ipNetToMedia = new IpNetToMediaTable(m_address);

        m_cdpGlobalGroup = new CdpGlobalGroup(m_address);

        m_cdpCache = new CdpCacheTable(m_address);

        m_cdpInterface = new CdpInterfaceTable(m_address);

        m_lldpLocalGroup = new LldpLocalGroup(m_address);

        m_lldpRemTable = new LldpRemTable(m_address);

        m_lldpLocTable = new LldpLocTable(m_address);
        
        m_ospfGeneralGroup = new OspfGeneralGroup(m_address);
        
        m_ospfNbrTable = new OspfNbrTable(m_address);
        
        m_isisSystemObjectGroup = new IsIsSystemObjectGroup(m_address);
        
        m_isisCircTable = new IsisCircTable(m_address);
        
        m_isisISAdjTable = new IsisISAdjTable(m_address);
        
        m_mtxrWlRtabTable = new MtxrWlRtabTable(m_address);

        if (m_collectIpRoute) {
        	m_ipRoute = createClass(m_ipRouteClass, m_address);
        }

	if (m_collectVlan) {
		m_vlanTable = createClass(m_vlanClass, m_address);
	}
		
	LOG.debug("run: address {} package {}: collecting on agent: {}", str(m_address), getPackageName(), m_agentConfig);

        LOG.info("run: address {} package {}: collectIpNetToMedia: {}",str(m_address), getPackageName(),m_collectIpNetToMedia);
        LOG.info("run: address {} package {}: collectOspf: {}",str(m_address), getPackageName(),m_collectOspf);
        LOG.info("run: address {} package {}: collectIsIs: {}",str(m_address), getPackageName(),m_collectIsIs);
        LOG.info("run: address {} package {}: collectLldp: {}",str(m_address), getPackageName(),m_collectLldp);
        LOG.info("run: address {} package {}: collectIpRoute: {}",str(m_address), getPackageName(),m_collectIpRoute);
        LOG.info("run: address {} package {}: collectCdp: {}",str(m_address), getPackageName(),m_collectCdp);
	LOG.info("run: address {} package {}: collectVlan: {}",str(m_address), getPackageName(),m_collectVlan);
        LOG.info("run: address {} package {}: collectWifi: {}",str(m_address), getPackageName(),m_collectWifi);

        SnmpWalker walker = null;

        TrackerBuilder bldr = new TrackerBuilder();
        if (m_collectIpNetToMedia) {
        	bldr.add("ipNetToMediaTable", m_ipNetToMedia);
        }
        if (m_collectOspf) {
        	bldr.add("ospfGeneralGroup/ospfNbrTable", m_ospfGeneralGroup, m_ospfNbrTable);
        }
        if (m_collectIsIs) {
            bldr.add("isisSystemObjectGroup/isisCircTable/isisISAdjTable", m_isisSystemObjectGroup, m_isisCircTable,m_isisISAdjTable);
        }
        if (m_collectLldp) {
        	bldr.add("lldpLocalGroup/lldpLocTable/lldpRemTable", m_lldpLocalGroup, m_lldpLocTable, m_lldpRemTable);
        }
        if (m_collectIpRoute && m_ipRoute != null) {
        	bldr.add("ipRouteTable", m_ipRoute);
        }
        if (m_collectCdp) {
        	bldr.add("cdpGlobalGroup/cdpInterface/cdpCacheTable",m_cdpGlobalGroup,m_cdpInterface,m_cdpCache);
        }
        if (m_collectVlan && m_vlanTable != null) {
        	bldr.add("vlanTable", m_vlanTable);
        }
        if (m_collectWifi && m_mtxrWlRtabTable != null) {
            bldr.add("mtxrWlRtabTable", m_mtxrWlRtabTable);
        }
        
        
        LOG.debug("run: package {}: Collecting {} from {}", getPackageName(),bldr.getMessage(), str(m_agentConfig.getEffectiveAddress()));

        if (!bldr.isEmpty()) {
            walker = SnmpUtils.createWalker(m_agentConfig, bldr.getMessage(), bldr.getTrackers());

            walker.start();

            try {
                walker.waitFor();
            } catch (final InterruptedException e) {
                LOG.error("run: collection interrupted, exiting", e);
                return;
            }
        }
        // Log any failures
        //
        if (m_collectOspf && !this.hasOspfGeneralGroup())
            LOG.info("run: failed to collect ospfGeneralGroup for {}", hostAddress);
        if (m_collectOspf && !this.hasOspfNbrTable())
            LOG.info("run: failed to collect ospfNbrTable for {}", hostAddress);
        if (m_collectIsIs && !this.hasIsIsSysObjectGroup())
            LOG.info("run: failed to collect IsIsSysObjectGroup for {}", hostAddress);
        if (m_collectIsIs && !this.hasIsisCircTable())
            LOG.info("run: failed to collect IsisCircTable for {}", hostAddress);
        if (m_collectIsIs && !this.hasIsisISAdjTable())
            LOG.info("run: failed to collect IsisIsAdjTable for {}", hostAddress);
        if (m_collectLldp && !this.hasLldpLocalGroup())
            LOG.info("run: failed to collect lldpLocalGroup for {}", hostAddress);
        if (m_collectLldp && !this.hasLldpLocTable())
            LOG.info("run: failed to collect lldpLocTable for {}", hostAddress);
        if (m_collectLldp && !this.hasLldpRemTable())
            LOG.info("run: failed to collect lldpRemTable for {}", hostAddress);
        if (m_collectIpNetToMedia && !this.hasIpNetToMediaTable())
            LOG.info("run: failed to collect ipNetToMediaTable for {}", hostAddress);
        if (m_collectIpRoute && m_ipRoute != null && !this.hasRouteTable())
            LOG.info("run: failed to collect ipRouteTable for {}", hostAddress);
        if (m_collectCdp && !this.hasCdpGlobalGroup())
            LOG.info("run: failed to collect cdpGlobalGroup for {}", hostAddress);
        if (m_collectCdp && !this.hasCdpInterfaceTable())
            LOG.info("run: failed to collect cdpInterfaceTable for []", hostAddress);
        if (m_collectCdp && !this.hasCdpCacheTable())
            LOG.info("run: failed to collect cdpCacheTable for []", hostAddress);
        if (m_collectVlan && m_vlanTable != null && !this.hasVlanTable())
            LOG.info("run: failed to collect VLAN for {}", hostAddress);
        if (m_collectWifi && m_mtxrWlRtabTable != null && !this.hasMtxrWlRtabTable())
            LOG.info("run: failed to collect Wifi for {}", hostAddress);
        
        

        if (this.hasVlanTable()) {
        	VlanTableBasic basicvlans = (VlanTableBasic) m_vlanTable;
                LOG.debug("run: start snmp collection for {} VLAN entries", basicvlans.size());
        	for (OnmsVlan vlan: basicvlans.getVlansForSnmpCollection()) {
                String community = m_agentConfig.getReadCommunity();
                Integer vlanindex = vlan.getVlanId();
                LOG.debug("run: peer community: {} with VLAN {}", community, vlanindex);
                if (vlanindex != 1)
                    m_agentConfig.setReadCommunity(community + "@"
                            + vlanindex);
                runAndSaveSnmpVlanCollection(vlan);
                m_agentConfig.setReadCommunity(community);
            }
        } else {
            runAndSaveSnmpVlanCollection(new OnmsVlan(VlanTable.DEFAULT_VLAN_INDEX, VlanTable.DEFAULT_VLAN_NAME, VlanTable.DEFAULT_VLAN_STATUS));
        }
        // update info in linkd used correctly by {@link DiscoveryLink}
        LOG.debug("run: saving collection into database for {}", str(m_agentConfig.getEffectiveAddress()));

        m_linkd.updateNodeSnmpCollection(this);
        // clean memory
        // first make everything clean
        m_ipNetToMedia = null;
        m_ipRoute = null;
        m_cdpGlobalGroup = null;
        m_cdpCache = null;
        m_cdpInterface = null;
        m_vlanTable = null;
        m_lldpLocalGroup = null;
        m_lldpLocTable = null;
        m_lldpRemTable = null;
        m_ospfGeneralGroup = null;
        m_ospfNbrTable = null;
        m_isisSystemObjectGroup = null;
        m_isisCircTable = null;
        m_isisISAdjTable = null;
        m_mtxrWlRtabTable = null;

        m_snmpVlanCollection.clear();

        builder = new EventBuilder(
                                   "uei.opennms.org/internal/linkd/nodeLinkDiscoveryCompleted",
                                   "Linkd");
        builder.setNodeid(m_nodeid);
        builder.setInterface(m_address);
        builder.addParam("runnable", "snmpCollection");
        m_linkd.getEventForwarder().sendNow(builder.getEvent());

    }

