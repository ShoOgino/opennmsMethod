		/**
		 * Inserts the new row into the StpNode table
		 * of the OpenNMS database.
		 *
		 * @param c	The connection to the database.
		 *
		 * @throws java.sql.SQLException Thrown if an error occurs
		 * 	with the connection
		 */
		private void insert(Connection c) throws SQLException {
			if (m_fromDb)
				throw new IllegalStateException(
						"The record already exists in the database");

			Category log = ThreadCategory.getInstance(getClass());

			// first extract the next node identifier
			//
			StringBuffer names = new StringBuffer(
					"INSERT INTO vlan (nodeid,vlanid");
			StringBuffer values = new StringBuffer("?,?");

			if ((m_changed & CHANGED_VLANNAME) == CHANGED_VLANNAME) {
				values.append(",?");
				names.append(",vlanname");
			}

			if ((m_changed & CHANGED_VLANTYPE) == CHANGED_VLANTYPE) {
				values.append(",?");
				names.append(",vlantype");
			}
			
			if ((m_changed & CHANGED_VLANSTATUS) == CHANGED_VLANSTATUS) {
				values.append(",?");
				names.append(",vlanstatus");
			}

			if ((m_changed & CHANGED_STATUS) == CHANGED_STATUS) {
				values.append(",?");
				names.append(",status");
			}

			if ((m_changed & CHANGED_POLLTIME) == CHANGED_POLLTIME) {
				values.append(",?");
				names.append(",lastpolltime");
			}

			names.append(") VALUES (").append(values).append(')');

			if (log.isDebugEnabled())
			log.debug("DbVlanEntry.insert: SQL insert statment = " + names.toString());

			// create the Prepared statment and then
			// start setting the result values
			//
			PreparedStatement stmt = c.prepareStatement(names.toString());

			int ndx = 1;
			stmt.setInt(ndx++, m_nodeId);
			stmt.setInt(ndx++, m_vlanId);

			if ((m_changed & CHANGED_VLANNAME) == CHANGED_VLANNAME)
				stmt.setString(ndx++, m_vlanname);

			if ((m_changed & CHANGED_VLANTYPE) == CHANGED_VLANTYPE)
				stmt.setInt(ndx++, m_vlantype);

			if ((m_changed & CHANGED_VLANSTATUS) == CHANGED_VLANSTATUS)
				stmt.setInt(ndx++, m_vlanstatus);
			
			if ((m_changed & CHANGED_STATUS) == CHANGED_STATUS)
				stmt.setString(ndx++, new String(new char[] { m_status }));

			if ((m_changed & CHANGED_POLLTIME) == CHANGED_POLLTIME) {
				stmt.setTimestamp(ndx++, m_lastPollTime);
			}

			// Run the insert
			//
			int rc = stmt.executeUpdate();
			if (log.isDebugEnabled())
				log.debug("DbVlanEntry.insert: row " + rc);
			stmt.close();

			// clear the mask and mark as backed
			// by the database
			//
			m_fromDb = true;
			m_changed = 0;
		}

