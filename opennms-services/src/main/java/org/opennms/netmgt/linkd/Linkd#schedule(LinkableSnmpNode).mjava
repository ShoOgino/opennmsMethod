    /**
     * This method schedules a {@link SnmpCollection} for node for each
     * package. Also schedule discovery link on package when not still
     * activated.
     * 
     * @param node
     */
    private void schedule(final LinkableSnmpNode node) {

        for (final SnmpCollection snmpcoll : getSnmpCollections(node.getNodeId(),
                                                                node.getSnmpPrimaryIpAddr(),
                                                                node.getSysoid())) {
            if (getActivePackages().contains(snmpcoll.getPackageName())) {
                LOG.debug("schedule: package active: {}", snmpcoll.getPackageName());
            } else {
                // schedule discovery link
                m_nodes.put(snmpcoll.getPackageName(), new ArrayList<LinkableNode>());
                final DiscoveryLink discovery = getDiscoveryLink(snmpcoll.getPackageName());
                if (discovery.getScheduler() == null) {
                    discovery.setScheduler(m_scheduler);
                }
                LOG.debug("schedule: Package: {}. Scheduling {}", discovery.getPackageName(), discovery.getInfo());
                discovery.schedule();
                addPackage(snmpcoll.getPackageName());

            }
            
            if (snmpcoll.getScheduler() == null) {
                snmpcoll.setScheduler(m_scheduler);
            }
            
            m_nodes.get(snmpcoll.getPackageName()).add(new LinkableNode(node));
            LOG.debug("schedule: Package/NodeId: {}/{}. Scheduling {}", snmpcoll.getPackageName(), node.getNodeId(), snmpcoll.getInfo());
            snmpcoll.schedule();
        }
    }

