    protected void processCdp(final LinkableNode node, final SnmpCollection snmpcoll, final Date scanTime) {
    	String cdpDeviceid = snmpcoll.getCdpGlobalGroup().getCdpDeviceId(); 
        LOG.debug("processCdp: Setting CDP device id {} for node {} with ip primary {}", cdpDeviceid,node.getNodeId(), str(node.getSnmpPrimaryIpAddr()));
    	node.setCdpDeviceId(cdpDeviceid);
        if (LOG.isDebugEnabled()) {
            if (snmpcoll.getCdpCacheTable().size() > 0) {
                LOG.debug("processCdp: Starting CDP cache table processing for {}/{}", node.getNodeId(), str(node.getSnmpPrimaryIpAddr()));
            } else {
                LOG.debug("processCdp: Zero CDP cache table entries for {}/{}", node.getNodeId(), str(node.getSnmpPrimaryIpAddr()));
            }
        }

        List<CdpInterface> cdpInterfaces = new ArrayList<CdpInterface>();

        for (final CdpCacheTableEntry cdpEntry : snmpcoll.getCdpCacheTable()) {

            final int cdpIfIndex = cdpEntry.getCdpCacheIfIndex();
            if (cdpIfIndex < 0) {
                LOG.debug("processCdp: ifIndex not valid: {}", cdpIfIndex);
                continue;
            }
            LOG.debug("processCdp: ifIndex found: {}", cdpIfIndex);

            final String targetSysName = cdpEntry.getCdpCacheDeviceId();
            LOG.debug("processCdp: targetSysName found: {}", targetSysName);

            InetAddress cdpTargetIpAddr = cdpEntry.getCdpCacheIpv4Address();
            LOG.debug("processCdp: cdp cache ipa address found: {}", str(cdpTargetIpAddr));

            final int cdpAddrType = cdpEntry.getCdpCacheAddressType();

            Collection<Integer> targetCdpNodeIds = new ArrayList<Integer>();
            if (cdpAddrType != CdpInterface.CDP_ADDRESS_TYPE_IP_ADDRESS) {
                LOG.warn("processCdp: CDP address type not ip: {}", cdpAddrType);
            } else {
                if (cdpTargetIpAddr == null || cdpTargetIpAddr.isLoopbackAddress() || m_zeroAddress.equals(cdpTargetIpAddr)) {
                    LOG.debug("processCdp: IP address is not valid: {}", str(cdpTargetIpAddr));
                } else {
                    targetCdpNodeIds = getNodeidFromIp(cdpTargetIpAddr);
                    if (targetCdpNodeIds.isEmpty()) {
                        LOG.info("processCdp: No Target node IDs found: interface {} not added to linkable SNMP node. Skipping.", str(cdpTargetIpAddr));
                        sendNewSuspectEvent(cdpTargetIpAddr, snmpcoll.getTarget(), snmpcoll.getPackageName());
                        continue;
                    }
                }
            }

            if (targetCdpNodeIds.isEmpty()) {
                LOG.debug("processCdp: finding nodeids using CDP deviceid(sysname): {}", targetSysName);
                targetCdpNodeIds = getNodeIdsFromSysName(targetSysName);
            }

            for (final Integer targetCdpNodeId: targetCdpNodeIds) {
	            LOG.info("processCdp: Target node ID found: {}.", targetCdpNodeId);
	
	            final String cdpTargetDevicePort = cdpEntry.getCdpCacheDevicePort();
	
	            if (cdpTargetDevicePort == null) {
	                LOG.warn("processCdp: Target device port not found. Skipping.");
	                continue;
	            }
	
	            LOG.debug("processCdp: Target device port name found: {}", cdpTargetDevicePort);
	
	            final int cdpTargetIfindex = getIfIndexByName(targetCdpNodeId, cdpTargetDevicePort);
	
	            if (cdpTargetIfindex == -1) {
	                LOG.info("processCdp: No valid target ifIndex found but interface added to linkable SNMP node using ifindex  = -1.");
	            }
	            
	            if (cdpTargetIpAddr == null || cdpAddrType != CdpInterface.CDP_ADDRESS_TYPE_IP_ADDRESS) {
	                cdpTargetIpAddr = getIpInterfaceDao().findPrimaryInterfaceByNodeId(targetCdpNodeId).getIpAddress();
	            }
	            if (cdpTargetIpAddr != null && !m_linkd.isInterfaceInPackage(cdpTargetIpAddr, snmpcoll.getPackageName())) {
	                LOG.debug("processCdp: target IP address {} Not in package: {}.  Skipping.",
	                                str(cdpTargetIpAddr), snmpcoll.getPackageName());
	                continue;
	            }
	            
	            final CdpInterface cdpIface = new CdpInterface(cdpIfIndex);
	            cdpIface.setCdpTargetNodeId(targetCdpNodeId);
	            cdpIface.setCdpTargetIfIndex(cdpTargetIfindex);
	            cdpIface.setCdpTargetDeviceId(cdpEntry.getCdpCacheDeviceId());

	            LOG.debug("processCdp: Adding cdp interface {} to linkable node {}.", cdpIface, node.getNodeId());
	            cdpInterfaces.add(cdpIface);
            }
        }
        node.setCdpInterfaces(cdpInterfaces);
    }

