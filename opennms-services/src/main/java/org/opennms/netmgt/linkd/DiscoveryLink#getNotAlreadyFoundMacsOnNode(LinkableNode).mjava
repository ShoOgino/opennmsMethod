	private List<String> getNotAlreadyFoundMacsOnNode(LinkableNode node){
		if (log().isDebugEnabled())
			log().debug("Searching Not Yet Found Bridge Identifier Occurrence on Node: " + node.getNodeId());
		List<String> macs = new ArrayList<String>();
		Iterator<LinkableNode> ite = bridgeNodes.values().iterator();
		while (ite.hasNext()) {
			LinkableNode curNode = ite.next();
			if (node.getNodeId() == curNode.getNodeId()) continue;
			Iterator<String> mac_ite =curNode.getBridgeIdentifiers().iterator();
			while (mac_ite.hasNext()) {
				String curMac = mac_ite.next();
				if (node.hasMacAddress(curMac)) continue;
				if (macs.contains(curMac)) continue;
				if (log().isDebugEnabled())
					log().debug("Found a node/Bridge Identifier " + curNode.getNodeId() + "/"+ curMac +" that was not found in bridge forwarding table for bridge node: " + node.getNodeId());
				macs.add(curMac);
			}
		}

		if (log().isDebugEnabled())
			log().debug("Searching Not Yet Found Mac Address Occurrence on Node: " + node.getNodeId());

		Iterator<String> mac_ite = macToAtinterface.keySet().iterator();
		while (mac_ite.hasNext()) {
			String curMac = mac_ite.next();
			if (node.hasMacAddress(curMac)) continue;
			if (macs.contains(curMac)) continue;
			if (log().isDebugEnabled())
				log().debug("Found a Mac Address " + curMac +" that was not found in bridge forwarding table for bridge node: " + node.getNodeId());
			macs.add(curMac);
		}
		
		return macs;
	}

