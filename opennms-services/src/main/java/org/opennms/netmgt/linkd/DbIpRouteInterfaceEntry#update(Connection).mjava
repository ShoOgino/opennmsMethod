	/** 
	 * Updates an existing record in the OpenNMS AtInterface table.
	 * 
	 * @param c	The connection used for the update.
	 *
	 * @throws java.sql.SQLException Thrown if an error occurs
	 * 	with the connection
	 */
	private void update(Connection c) throws SQLException {
		if (!m_fromDb)
			throw new IllegalStateException(
					"The record does not exists in the database");

		Category log = ThreadCategory.getInstance(getClass());

		// first extract the next node identifier
		//
		StringBuffer sqlText = new StringBuffer("UPDATE IpRouteInterface SET ");

		char comma = ' ';

		if ((m_changed & CHANGED_MASK) == CHANGED_MASK) {
			sqlText.append(comma).append("routeMask = ?");
			comma = ',';
		}

		if ((m_changed & CHANGED_NXT_HOP) == CHANGED_NXT_HOP) {
			sqlText.append(comma).append("routeNextHop = ?");
			comma = ',';
		}

		if ((m_changed & CHANGED_IFINDEX) == CHANGED_IFINDEX) {
			sqlText.append(comma).append("routeifindex = ?");
			comma = ',';
		}

		if ((m_changed & CHANGED_METRIC1) == CHANGED_METRIC1) {
			sqlText.append(comma).append("routemetric1 = ?");
			comma = ',';
		}

		if ((m_changed & CHANGED_METRIC2) == CHANGED_METRIC2) {
			sqlText.append(comma).append("routemetric2 = ?");
			comma = ',';
		}

		if ((m_changed & CHANGED_METRIC3) == CHANGED_METRIC3) {
			sqlText.append(comma).append("routemetric3 = ?");
			comma = ',';
		}

		if ((m_changed & CHANGED_METRIC4) == CHANGED_METRIC4) {
			sqlText.append(comma).append("routemetric4 = ?");
			comma = ',';
		}

		if ((m_changed & CHANGED_METRIC5) == CHANGED_METRIC5) {
			sqlText.append(comma).append("routemetric5 = ?");
			comma = ',';
		}

		if ((m_changed & CHANGED_TYPE) == CHANGED_TYPE) {
			sqlText.append(comma).append("routetype = ?");
			comma = ',';
		}

		if ((m_changed & CHANGED_PROTO) == CHANGED_PROTO) {
			sqlText.append(comma).append("routeproto = ?");
			comma = ',';
		}

		if ((m_changed & CHANGED_STATUS) == CHANGED_STATUS) {
			sqlText.append(comma).append("status = ?");
			comma = ',';
		}

		if ((m_changed & CHANGED_POLLTIME) == CHANGED_POLLTIME) {
			sqlText.append(comma).append("lastpolltime = ?");
			comma = ',';
		}

		sqlText.append(" WHERE nodeid = ? AND routeDest = ? ");

		// create the Prepared statment and then
		// start setting the result values
		//
		PreparedStatement stmt = c.prepareStatement(sqlText.toString());
		sqlText = null;

		int ndx = 1;

		if ((m_changed & CHANGED_MASK) == CHANGED_MASK)
			stmt.setString(ndx++, m_routemask);

		if ((m_changed & CHANGED_NXT_HOP) == CHANGED_NXT_HOP)
			stmt.setString(ndx++, m_routenexthop);

		if ((m_changed & CHANGED_IFINDEX) == CHANGED_IFINDEX)
			stmt.setInt(ndx++, m_routeifindex);

		if ((m_changed & CHANGED_METRIC1) == CHANGED_METRIC1)
			stmt.setInt(ndx++, m_routemetric1);

		if ((m_changed & CHANGED_METRIC2) == CHANGED_METRIC2)
			stmt.setInt(ndx++, m_routemetric2);

		if ((m_changed & CHANGED_METRIC3) == CHANGED_METRIC3)
			stmt.setInt(ndx++, m_routemetric3);

		if ((m_changed & CHANGED_METRIC4) == CHANGED_METRIC4)
			stmt.setInt(ndx++, m_routemetric4);

		if ((m_changed & CHANGED_METRIC5) == CHANGED_METRIC5)
			stmt.setInt(ndx++, m_routemetric5);

		if ((m_changed & CHANGED_TYPE) == CHANGED_TYPE)
			stmt.setInt(ndx++, m_routetype);

		if ((m_changed & CHANGED_PROTO) == CHANGED_PROTO)
			stmt.setInt(ndx++, m_routeproto);

		if ((m_changed & CHANGED_STATUS) == CHANGED_STATUS)
			stmt.setString(ndx++, new String(new char[] { m_status }));

		if ((m_changed & CHANGED_POLLTIME) == CHANGED_POLLTIME) {
			stmt.setTimestamp(ndx++, m_lastPollTime);
		}

		stmt.setInt(ndx++, m_nodeId);
		stmt.setString(ndx++, m_routedest);

		if (log.isDebugEnabled())
			log.debug("IpRouteInterfaceEntry.update: SQL statement "
				+ stmt.toString());

		// Run the insert
		//
		int rc = stmt.executeUpdate();
		if (log.isDebugEnabled())
			log.debug("IpRouteInterfaceEntry.update: row " + rc);
		stmt.close();

		// clear the mask and mark as backed
		// by the database
		//
		m_changed = 0;
	}

