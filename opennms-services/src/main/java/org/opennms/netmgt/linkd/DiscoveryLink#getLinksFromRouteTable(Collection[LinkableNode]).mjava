    private void getLinksFromRouteTable(Collection<LinkableNode> linkableNodes) {
        List<LinkableNode> routerNodes = new ArrayList<LinkableNode>();
        for (LinkableNode linkableNode : linkableNodes) {
            if (linkableNode.hasRouteInterfaces()) {
                LOG.debug("getLinksFromRouteTable: adding to router node list: node with nodeid/#iprouteinterface {}/#{}", linkableNode.getNodeId(),linkableNode.getRouteInterfaces().size());
                routerNodes.add(linkableNode);
            }
        }
        LOG.info("getLinksFromRouteTable: found {} Router nodes", routerNodes.size());

        for (final LinkableNode curNode : routerNodes) {
            final int curNodeId = curNode.getNodeId();
            InetAddress curIpAddr = curNode.getSnmpPrimaryIpAddr();
            LOG.info("getLinksFromRouteTable: parsing router node with ID {} IP address {} and {} router interfaces", curNodeId, str(curIpAddr), curNode.getRouteInterfaces().size());

            for (final RouterInterface routeIface : curNode.getRouteInterfaces()) {
                LOG.debug("getLinksFromRouteTable: parsing RouterInterface: {}", routeIface.toString());

                final NodeToNodeLink lk = new NodeToNodeLink(curNodeId,routeIface.getIfindex(),DiscoveryProtocol.iproute);
                lk.setNodeparentid(routeIface.getNextHopNodeid());
                lk.setParentifindex(routeIface.getNextHopIfindex());
                LOG.info("getLinksFromRouteTable: saving route link: {}", lk.toString());
                addNodetoNodeLink(lk);
            }
            LOG.info("getLinksFromRouteTable: done parsing router node with ID {} IP address {} and {} router interfaces", curNodeId, str(curIpAddr), curNode.getRouteInterfaces().size());
        }

        if (routerNodes.size() > 0) {
            LOG.info("getLinksFromRouteTable: done finding non-ethernet links on Router nodes");
        }

    }

