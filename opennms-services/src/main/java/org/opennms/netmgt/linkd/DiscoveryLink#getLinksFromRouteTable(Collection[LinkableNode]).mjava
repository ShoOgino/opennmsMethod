    private void getLinksFromRouteTable(Collection<LinkableNode> linkableNodes) {
        LOG.info("getLinksFromRouteTable: adding links using Ipv4 Routing Table");
        int i = 0;
        for (LinkableNode linkableNode : linkableNodes) {
            if (!linkableNode.hasRouteInterfaces())
                continue;
            final int curNodeId = linkableNode.getNodeId();
            InetAddress curIpAddr = linkableNode.getSnmpPrimaryIpAddr();
            LOG.info("getLinksFromRouteTable: parsing router node with ID {} IP address {} and {} router interfaces",
                     curNodeId, str(curIpAddr),
                     linkableNode.getRouteInterfaces().size());

            for (final RouterInterface routeIface : linkableNode.getRouteInterfaces()) {
                LOG.debug("getLinksFromRouteTable: parsing RouterInterface: {}",
                          routeIface.toString());

                final NodeToNodeLink lk = new NodeToNodeLink(
                                                             curNodeId,
                                                             routeIface.getIfindex(),
                                                             DiscoveryProtocol.iproute);
                lk.setNodeparentid(routeIface.getNextHopNodeid());
                lk.setParentifindex(routeIface.getNextHopIfindex());
                LOG.info("getLinksFromRouteTable: saving route link: {}",
                         lk.toString());
                addNodetoNodeLink(lk);
                i++;
            }
            LOG.info("getLinksFromRouteTable: done parsing router node with ID {} IP address {} and {} router interfaces",
                     curNodeId, str(curIpAddr),
                     linkableNode.getRouteInterfaces().size());
        }
        LOG.info("getLinksFromRouteTable: done finding links using Ipv4 Routing Table.Found links # {}.",
                 i);
    }

