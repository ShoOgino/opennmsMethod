	/**
	 * This method is used to schedule a ready runnable in the system. The
	 * interval is used as the key for determining which queue to add the
	 * runnable.
	 * 
	 * @param interval
	 *            The queue to add the runnable to.
	 * @param runnable
	 *            The element to run when interval expires.
	 * 
	 * @throws java.lang.RuntimeException
	 *             Thrown if an error occurs adding the element to the queue.
	 */

	public synchronized void schedule(long interval,
			final ReadyRunnable runnable) {

		final long timeToRun = getCurrentTime() + interval;
		ReadyRunnable timeKeeper = new ReadyRunnable() {
			public boolean isReady() {
				return getCurrentTime() >= timeToRun && runnable.isReady();
			}
			
			public String getInfo() {
				return runnable.getInfo();
			}

			public void run() {
				runnable.run();
			}

			public void schedule() {
				runnable.schedule();
			}
			
			public void suspend() {
				runnable.suspend();
			}

			public void wakeUp() {
				runnable.wakeUp();
			}

			public boolean isSuspended() {
				return runnable.isSuspended();
			}
			
			public boolean equals(ReadyRunnable r) {
				return runnable.equals(r);
			}
			
			public void unschedule() {
				runnable.unschedule();
			}

			public String toString() {
				return runnable.toString() + " (ready in "
						+ Math.max(0, timeToRun - getCurrentTime()) + "ms)";
			}
		};
		schedule(timeKeeper, interval);
	}

