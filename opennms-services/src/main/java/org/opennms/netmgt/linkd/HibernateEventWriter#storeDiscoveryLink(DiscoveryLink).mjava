    @Override
    @Transactional
    public void storeDiscoveryLink(final DiscoveryLink discoveryLink)
    {
        final Date now = new Date();

        for (final NodeToNodeLink lk : discoveryLink.getLinks()) {
            DataLinkInterface iface = m_dataLinkInterfaceDao.findByNodeIdAndIfIndex(Integer.valueOf(lk.getNodeId()),
                                                                                    Integer.valueOf(lk.getIfindex()));
            if (iface == null) {
                final OnmsNode onmsNode = m_nodeDao.get(lk.getNodeId());
                iface = new DataLinkInterface(
                                              onmsNode,
                                              lk.getIfindex(),
                                              lk.getNodeparentid(),
                                              lk.getParentifindex(),
                                              StatusType.ACTIVE,
                                              now);
            }
            iface.setNodeParentId(lk.getNodeparentid());
            iface.setParentIfIndex(lk.getParentifindex());
            iface.setStatus(StatusType.ACTIVE);
            iface.setLastPollTime(now);
            m_dataLinkInterfaceDao.saveOrUpdate(iface);
            //m_dataLinkInterfaceDao.flush();
        }

        for (final MacToNodeLink lkm : discoveryLink.getMacLinks()) {
            final Collection<OnmsAtInterface> atInterfaces = m_atInterfaceDao.findByMacAddress(lkm.getMacAddress());
            if (atInterfaces.size() == 0) {
                LOG.debug("storeDiscoveryLink: No nodeid found on DB for mac address {} on link. Skipping.", lkm.getMacAddress());
                continue;
            }
            if (atInterfaces.size() > 1) {
                LOG.debug("storeDiscoveryLink: More than one atInterface returned for the mac address {}. Duplicated ip/mac address. Skipping ", lkm.getMacAddress());
                continue;
            }
            final OnmsAtInterface atInterface = atInterfaces.iterator().next();
            if (!m_linkd.isInterfaceInPackage(atInterface.getIpAddress(),
                                              discoveryLink.getPackageName())) {
                LOG.debug("storeDiscoveryLink: IP address {} not found on package {}.  Skipping.", atInterface.getIpAddress(),discoveryLink.getPackageName());
                continue;
            }

            final OnmsNode atInterfaceNode = atInterface.getNode();
            
            DataLinkInterface dli = m_dataLinkInterfaceDao.findByNodeIdAndIfIndex(atInterfaceNode.getId(),
                                                                                  atInterface.getIfIndex());
            if (dli == null) {
                dli = new DataLinkInterface(
                                            atInterfaceNode,
                                            atInterface.getIfIndex(),
                                            lkm.getNodeparentid(),
                                            lkm.getParentifindex(),
                                            StatusType.ACTIVE,
                                            now);
            }
            dli.setNodeParentId(lkm.getNodeparentid());
            dli.setParentIfIndex(lkm.getParentifindex());
            dli.setStatus(StatusType.ACTIVE);
            dli.setLastPollTime(now);
            m_dataLinkInterfaceDao.saveOrUpdate(dli);
            LOG.debug("storeDiscoveryLink: Storing {}", dli);
            //m_dataLinkInterfaceDao.flush();
        }
        m_dataLinkInterfaceDao.deactivateIfOlderThan(now,getLinkd().getSource());
        m_dataLinkInterfaceDao.deleteIfOlderThan(new Date(now.getTime()-3*discoveryLink.getSnmpPollInterval()),getLinkd().getSource());
        m_dataLinkInterfaceDao.flush();
    }

