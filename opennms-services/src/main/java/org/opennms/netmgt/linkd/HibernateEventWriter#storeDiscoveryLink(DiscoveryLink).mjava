    @Override
    @Transactional
    public void storeDiscoveryLink(final DiscoveryLink discoveryLink)
    {
        final Date now = new Date();
        String source = getLinkd().getName()+"/"+discoveryLink.getPackageName();

        for (final NodeToNodeLink lk : discoveryLink.getLinks()) {
            
            LOG.debug("storeDiscoveryLink: parsing link {}.",lk);
            DataLinkInterface link = getDatabaseLink(m_dataLinkInterfaceDao.findByNodeIdAndIfIndex(Integer.valueOf(lk.getNodeId()),
                                                                                       Integer.valueOf(lk.getIfindex())),lk.getNodeparentid(),lk.getParentifindex());

            if (link == null) {
                LOG.info("storeDiscoveryLink: no found interface on database for link {}. Creating a new one",lk);
                final OnmsNode onmsNode = m_nodeDao.get(lk.getNodeId());
                link = new DataLinkInterface(
                                          onmsNode,
                                          lk.getIfindex(),
                                          lk.getNodeparentid(),
                                          lk.getParentifindex(),
                                          StatusType.ACTIVE,
                                          now);
            } else {
                link.setStatus(StatusType.ACTIVE);
                link.setLastPollTime(now);
            }
            link.setSource(source);
            link.setProtocol(lk.getProtocol());

            DataLinkInterface reverselink = getDatabaseLink(m_dataLinkInterfaceDao.findByNodeIdAndIfIndex(Integer.valueOf(lk.getNodeparentid()),
                                                                                                          Integer.valueOf(lk.getParentifindex())), lk.getNodeId(), lk.getIfindex());
            if (reverselink != null ) {
                LOG.info("storeDiscoveryLink: Deleting found reverse link {}.", reverselink);
                m_dataLinkInterfaceDao.delete(reverselink);
            }
            LOG.debug("storeDiscoveryLink: Storing {}", link);
            m_dataLinkInterfaceDao.saveOrUpdate(link);
        }

        // FIXME remove this is you use mac address in DiscoveryLink memory
        LOG.debug("storeDiscoveryLink: Parsing mac address links");
        for (final MacToNodeLink lkm : discoveryLink.getMacLinks()) {
            final Collection<OnmsAtInterface> atInterfaces = m_atInterfaceDao.findByMacAddress(lkm.getMacAddress());
            if (atInterfaces.size() == 0) {
                LOG.debug("storeDiscoveryLink: No nodeid found on DB for mac address {} on link. Skipping.", lkm.getMacAddress());
                continue;
            }
            if (atInterfaces.size() > 1) {
                LOG.debug("storeDiscoveryLink: More than one atInterface returned for the mac address {}. Duplicated ip/mac address. Skipping ", lkm.getMacAddress());
                continue;
            }
            final OnmsAtInterface atInterface = atInterfaces.iterator().next();
            if (!m_linkd.isInterfaceInPackage(atInterface.getIpAddress(),
                                              discoveryLink.getPackageName())) {
                LOG.debug("storeDiscoveryLink: IP address {} not found on package {}.  Skipping.", atInterface.getIpAddress(),discoveryLink.getPackageName());
                continue;
            }

            DataLinkInterface link = getDatabaseLink(m_dataLinkInterfaceDao.findByNodeIdAndIfIndex(atInterface.getNode().getId(),
                                                                                                  atInterface.getIfIndex()), lkm.getNodeparentid(), lkm.getParentifindex());
            if (link == null) {
                link = new DataLinkInterface(
                                            atInterface.getNode(),
                                            atInterface.getIfIndex(),
                                            lkm.getNodeparentid(),
                                            lkm.getParentifindex(),
                                            StatusType.ACTIVE,
                                            now);
            } else {
                link.setStatus(StatusType.ACTIVE);
                link.setLastPollTime(now);
            }
            link.setSource(source);
            link.setProtocol(DiscoveryProtocol.bridge);
            LOG.debug("storeDiscoveryLink: Storing {}", link);
            m_dataLinkInterfaceDao.saveOrUpdate(link);
        }
        m_dataLinkInterfaceDao.deactivateIfOlderThan(now,source);
        m_dataLinkInterfaceDao.deleteIfOlderThan(new Date(now.getTime()-3*discoveryLink.getSnmpPollInterval()),source);
        m_dataLinkInterfaceDao.flush();
    }

