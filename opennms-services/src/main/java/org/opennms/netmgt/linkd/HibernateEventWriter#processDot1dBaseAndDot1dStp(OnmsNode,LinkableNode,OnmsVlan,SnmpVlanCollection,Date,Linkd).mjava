    private void processDot1dBaseAndDot1dStp(final OnmsNode onmsNode,
            final LinkableNode node, final OnmsVlan vlan,
            final SnmpVlanCollection snmpVlanColl, final Date scanTime, final Linkd linkd) {

        final String baseBridgeAddress = snmpVlanColl.getDot1dBase().getBridgeAddress();
        if (baseBridgeAddress == null) {
            LOG.info("processDot1dBaseAndDot1dStp: Invalid base bridge address ({}) on node/vlan {}/{}",
                     baseBridgeAddress, node.getNodeId(), vlan.getId());
            return;
        }

        LOG.debug("processDot1dBaseAndDot1dStp: Found Bridge Identifier {} for Vlan {}.",
                  baseBridgeAddress, vlan.getVlanId());
        node.addBridgeIdentifier(baseBridgeAddress, vlan.getVlanId());

        if (snmpVlanColl.hasDot1dStp()) {
            LOG.debug("processDot1dBaseAndDot1dStp: processing Dot1dStpGroup in stpnode");
            final String stpDesignatedRoot = snmpVlanColl.getDot1dStp().getStpDesignatedRoot();

            if (stpDesignatedRoot != null) {
                LOG.debug("processDot1dBaseAndDot1dStp: Dot1dStpGroup found valid stpDesignatedRoot {}, adding to Linkable node",
                          stpDesignatedRoot);
                node.setVlanStpRoot(vlan.getVlanId(), stpDesignatedRoot);
            }
        }

        if (linkd.saveStpNodeTable(snmpVlanColl.getPackageName())) {
            saveStpNode(getOnmsStpNode(onmsNode, node, scanTime, vlan,
                                       snmpVlanColl));
        }
    }

