	/**
	 * This method schedule snmpcollection for node
	 * for each package
	 * Also schedule discovery link on package 
	 * when not still activated
	 * @param node
	 */
	private void scheduleCollectionForNode(LinkableNode node) {

		List<SnmpCollection> snmpcollOnNode = m_linkdConfig.getSnmpCollections(node.getSnmpPrimaryIpAddr(), node.getSysoid());
		Iterator<SnmpCollection>  coll_ite = snmpcollOnNode.iterator();
		while (coll_ite.hasNext()) {
			SnmpCollection snmpcoll = coll_ite.next();
			if (activepackages.contains(snmpcoll.getPackageName())) {
				if (log().isDebugEnabled())
					log().debug("ScheduleCollectionForNode: package active: " +snmpcoll.getPackageName());
			} else {
				// schedule discoverylink
				if (log().isDebugEnabled())
					log().debug("ScheduleCollectionForNode: Schedulink Discovery Link for Active Package: " + snmpcoll.getPackageName());
				DiscoveryLink discovery = m_linkdConfig.getDiscoveryLink(snmpcoll.getPackageName());
	   			if (discovery.getScheduler() == null) {
	   				discovery.setScheduler(m_scheduler);
	    		}
	    		discovery.schedule();
	    		activepackages.add(snmpcoll.getPackageName());

			}
			if (snmpcoll.getScheduler() == null) {
					snmpcoll.setScheduler(m_scheduler);
			}
			if (log().isDebugEnabled())
				log().debug("ScheduleCollectionForNode: Schedulink Snmp Collection for Package/Nodeid: "
						+ snmpcoll.getPackageName() +"/"+node.getNodeId() + "/" +snmpcoll.getInfo());
			snmpcoll.schedule();
		}
	}

