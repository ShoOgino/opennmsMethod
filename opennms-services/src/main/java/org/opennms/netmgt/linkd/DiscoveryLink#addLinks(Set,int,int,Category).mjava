	private void addLinks(Set macs,int nodeid,int ifindex,Category log) { 
		if (macs == null || macs.isEmpty()) {
			if (log.isDebugEnabled())
				log
						.debug("addLinks: mac's list on link is empty.");
		} else {
			Iterator mac_ite = macs.iterator();

			while (mac_ite.hasNext()) {
				String curMacAddress = (String) mac_ite
						.next();
				if (macsParsed.contains(curMacAddress)) {
					log
							.warn("addLinks: mac address "
									+ curMacAddress
									+ " just found on other bridge port! Skipping...");
					continue;
				}
				
				if (isMacIdentifierOfBridgeNode(curMacAddress)) {
					log
							.warn("addLinks: mac address "
									+ curMacAddress
									+ " is bridge identifier! Skipping...");
					continue;
				}
				
				if (macToAtinterface.containsKey(curMacAddress)) {
					List<AtInterface> ats = macToAtinterface.get(curMacAddress);
					Iterator<AtInterface> ite = ats.iterator();
					while (ite.hasNext()) {
						AtInterface at = ite.next();
						NodeToNodeLink lNode = new NodeToNodeLink(at.getNodeId(),at.getIfindex());
						lNode.setNodeparentid(nodeid);
						lNode.setParentifindex(ifindex);
						addNodetoNodeLink(lNode, log);
					}
				} else {
					if (log.isDebugEnabled())
						log.debug("addLinks: not find nodeid for ethernet mac address "
										+ curMacAddress
										+ " found on node/ifindex" + nodeid+ "/" +ifindex);
					MacToNodeLink lMac = new MacToNodeLink(curMacAddress);
					lMac.setNodeparentid(nodeid);
					lMac.setParentifindex(ifindex);
					maclinks.add(lMac);
				}
				macsParsed.add(curMacAddress);
			}
		}
	}

