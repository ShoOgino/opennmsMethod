	/**
	 * 
	 * @param dbConn
	 * @param now
	 * @throws SQLException
	 */
	private void storeSnmpCollection(Connection dbConn, Timestamp now) throws SQLException,
			UnknownHostException {

		Category log = ThreadCategory.getInstance(getClass());
		Iterator ite = null;

		int nodeid = m_node.getNodeId();

		if (m_snmpcoll.hasIpNetToMediaTable()) {
			ite = m_snmpcoll.getIpNetToMediaTable()
					.getEntries().iterator();
			if (log.isDebugEnabled())
				log
						.debug("store: saving IpNetToMediaTable to atinterface table in DB");
			// the AtInterfaces used by LinkableNode where to save info
			java.util.List<AtInterface> atInterfaces = new java.util.ArrayList<AtInterface>();
			while (ite.hasNext()) {

				IpNetToMediaTableEntry ent = (IpNetToMediaTableEntry) ite
						.next();
				
				int ifindex = ent
						.getInt32(IpNetToMediaTableEntry.INTM_INDEX);
				
				InetAddress ipaddress = ent
						.getIPAddress(IpNetToMediaTableEntry.INTM_NETADDR);

				if (ipaddress.isLoopbackAddress() || ipaddress.getHostAddress().equals("0.0.0.0")) {
					log.warn("store: invalid ip " + ipaddress.getHostAddress());
					continue;
				}

				String physAddr = ent
						.getHexString(IpNetToMediaTableEntry.INTM_PHYSADDR);
				
				if (physAddr.equals("000000000000") || physAddr.equalsIgnoreCase("ffffffffffff")) {
					log.warn("store: invalid mac address " + physAddr
							+ " for ip " + ipaddress.getHostAddress());
					continue;
				}


				if (log.isDebugEnabled())
					log.debug("store: trying save info for ipaddr " + ipaddress.getHostName()
							+ " mac address " + physAddr + " found on ifindex "
							+ ifindex);

				// get an At interface but without setting mac address
				AtInterface at = getNodeidIfindexFromIp(dbConn, ipaddress);
				if (at == null) {
						log.warn("getNodeidIfindexFromIp: no nodeid found for ipaddress "
								+ ipaddress + ".");
					continue;
					//TODO here is a good place for autodiscovery
				}
				//set the mac address
				at.setMacAddress(physAddr);
				// add At Inteface to list of valid interfaces
				atInterfaces.add(at);

				// Save in DB
				DbAtInterfaceEntry atInterfaceEntry = DbAtInterfaceEntry.get(
						dbConn, at.getNodeId(), ipaddress.getHostAddress());
				if (atInterfaceEntry == null) {
					atInterfaceEntry = DbAtInterfaceEntry.create(at.getNodeId(),
							ipaddress.getHostAddress());
				}
				// update object

				atInterfaceEntry.updateAtPhysAddr(physAddr);

				atInterfaceEntry.updateSourceNodeId(nodeid);
				atInterfaceEntry.updateIfIndex(ifindex);
				atInterfaceEntry.updateStatus(DbAtInterfaceEntry.STATUS_ACTIVE);
				atInterfaceEntry.set_lastpolltime(now);

				// store object in database
				atInterfaceEntry.store(dbConn);
			}
			// set AtInterfaces in LinkableNode
			m_node.setAtInterfaces(atInterfaces);
		}

		if (m_snmpcoll.hasCdpCacheTable()) {
			if (log.isDebugEnabled())
				log
						.debug("store: saving CdpCacheTable into SnmpLinkableNode");
			java.util.List<CdpInterface> cdpInterfaces = new java.util.ArrayList<CdpInterface>();
			ite = m_snmpcoll.getCdpCacheTable()
					.getEntries().iterator();
			while (ite.hasNext()) {
				CdpCacheTableEntry cdpEntry = (CdpCacheTableEntry) ite.next();
				int cdpAddrType = cdpEntry.getInt32(CdpCacheTableEntry.CDP_ADDRESS_TYPE);

				if (cdpAddrType != 1)
					continue;
				String cdptargetipaddress = cdpEntry.getHexString(CdpCacheTableEntry.CDP_ADDRESS);
				if (log.isDebugEnabled())	log.debug(" cdp ip address octet string is " + cdptargetipaddress);

				long ipAddr = Long.parseLong(cdptargetipaddress, 16);
				byte[] bytes = new byte[4];
				bytes[3] = (byte) (ipAddr & 0xff);
				bytes[2] = (byte) ((ipAddr >> 8) & 0xff);
				bytes[1] = (byte) ((ipAddr >> 16) & 0xff);
				bytes[0] = (byte) ((ipAddr >> 24) & 0xff);
				                         
				InetAddress cdpTargetIpAddr = InetAddress.getByAddress(bytes);
				if (log.isDebugEnabled())	log.debug(" cdp ip address after parsing is " + cdpTargetIpAddr.getHostAddress());
				
				int cdpIfIndex = cdpEntry.getInt32(CdpCacheTableEntry.CDP_IFINDEX);
				if (log.isDebugEnabled())	log.debug(" cdp ifindex is " + cdpIfIndex);

				String cdpTargetDevicePort = cdpEntry.getDisplayString(CdpCacheTableEntry.CDP_DEVICEPORT);
				if (log.isDebugEnabled())	log.debug(" cdp Target device port name is " + cdpTargetDevicePort);


				CdpInterface cdpIface = new CdpInterface(cdpIfIndex);

				int targetCdpNodeId = getNodeidFromIp(dbConn, cdpTargetIpAddr);

				cdpIface.setCdpTargetNodeId(targetCdpNodeId);
				cdpIface.setCdpTargetIpAddr(cdpTargetIpAddr);
				
				int cdpTargetIfindex = getIfIndexByName(
						dbConn, targetCdpNodeId, cdpTargetDevicePort);

				if (targetCdpNodeId == -1 || cdpTargetIfindex == -1) {
					log.warn("No nodeid found: cdp interface not added to Linkable Snmp Node");
					//TODO Good place for autodiscovery
				} else  {

					cdpIface.setCdpTargetIfIndex(cdpTargetIfindex);
					cdpInterfaces.add(cdpIface);
				}

			}
			m_node.setCdpInterfaces(cdpInterfaces);
		}

		if (m_snmpcoll.hasRouteTable()) {
			java.util.List<RouterInterface> routeInterfaces = new java.util.ArrayList<RouterInterface>();
			ite = m_snmpcoll.getIpRouteTable().getEntries()
					.iterator();
			if (log.isDebugEnabled())
				log
						.debug("store: saving ipRouteTable to iprouteinterface table in DB");
			while (ite.hasNext()) {
				IpRouteTableEntry ent = (IpRouteTableEntry) ite.next();

				InetAddress routedest = ent.getIPAddress(IpRouteTableEntry.IP_ROUTE_DEST);
				InetAddress routemask = ent.getIPAddress(IpRouteTableEntry.IP_ROUTE_MASK);
				InetAddress nexthop = ent.getIPAddress(IpRouteTableEntry.IP_ROUTE_NXTHOP);
				int ifindex = ent.getInt32(IpRouteTableEntry.IP_ROUTE_IFINDEX);
				int routemetric1 = ent.getInt32(IpRouteTableEntry.IP_ROUTE_METRIC1);
				int routemetric2 = ent.getInt32(IpRouteTableEntry.IP_ROUTE_METRIC2);
				int routemetric3  =ent.getInt32(IpRouteTableEntry.IP_ROUTE_METRIC3);
				int routemetric4 = ent.getInt32(IpRouteTableEntry.IP_ROUTE_METRIC4);
				int routemetric5 = ent.getInt32(IpRouteTableEntry.IP_ROUTE_METRIC5);
				int routetype = ent.getInt32(IpRouteTableEntry.IP_ROUTE_TYPE);
				int routeproto = ent.getInt32(IpRouteTableEntry.IP_ROUTE_PROTO);

				// info used for Discovery Link
				RouterInterface routeIface = new RouterInterface(ifindex);
				routeIface.setMetric(routemetric1);
				routeIface.setNextHop(nexthop);
				
				
				int nodeParentId = getNodeidFromIp(dbConn,nexthop);
				
				if (nodeParentId == -1) {
					//TODO here is a good point for autodiscovery
					log.warn("store: No nodeid found for next hop " + nexthop 
							+ " Skipping ip route interface add to Linkable Snmp Node");
				} else {
					
					routeIface.setNodeparentid(nodeParentId);
					routeIface.setSnmpiftype(getSnmpIfType(dbConn, nodeid, ifindex));
					
					routeInterfaces.add(routeIface);
				}

				// save info to DB
				DbIpRouteInterfaceEntry iprouteInterfaceEntry = DbIpRouteInterfaceEntry
						.get(dbConn, nodeid, routedest.getHostAddress());
				if (iprouteInterfaceEntry == null) {
					// Create a new entry
					iprouteInterfaceEntry = DbIpRouteInterfaceEntry.create(
							m_node.getNodeId(), routedest.getHostAddress());
				}
				// update object
				iprouteInterfaceEntry.updateRouteMask(routemask.getHostAddress());
				iprouteInterfaceEntry.updateRouteNextHop(nexthop.getHostAddress());
				iprouteInterfaceEntry.updateIfIndex(ifindex);
				if (routemetric1 != -1)
					iprouteInterfaceEntry.updateRouteMetric1(routemetric1);
				if (routemetric2 != -1)
					iprouteInterfaceEntry.updateRouteMetric2(routemetric2);
				if (routemetric3 != -1)
					iprouteInterfaceEntry.updateRouteMetric3(routemetric3);
				if (routemetric4 != -1)
					iprouteInterfaceEntry.updateRouteMetric4(routemetric4);
				if (routemetric5 != -1)
					iprouteInterfaceEntry.updateRouteMetric5(routemetric5);
				if (routetype != -1)
					iprouteInterfaceEntry.updateRouteType(routetype);
				if (routeproto != -1)
					iprouteInterfaceEntry.updateRouteProto(routeproto);
				iprouteInterfaceEntry
						.updateStatus(DbAtInterfaceEntry.STATUS_ACTIVE);
				iprouteInterfaceEntry.set_lastpolltime(now);

				// store object in database
				iprouteInterfaceEntry.store(dbConn);
			}
			m_node.setRouteInterfaces(routeInterfaces);
		}
		// STARTS loop on vlans

		if (m_snmpcoll.hasVlanTable()) {
			
			if (log.isDebugEnabled())
				log
						.debug("store: saving SnmpVlanCollection in DB");
			ite = m_snmpcoll.getSnmpVlanCollections()
					.iterator();
			while (ite.hasNext()) {
				SnmpVlanCollection snmpVlanColl = (SnmpVlanCollection) ite
						.next();

				String vlanindex = snmpVlanColl.getVlanIndex();
				int vlan = Integer.parseInt(vlanindex);
				String vlanname = snmpVlanColl.getVlanName();
				if (log.isDebugEnabled())
					log
							.debug("store: parsing VLAN "
									+ vlanindex + " VLAN_NAME " + vlanname);

				if (snmpVlanColl.hasDot1dBase()) {
					if (log.isDebugEnabled())
						log
								.debug("store: saving Dot1dBaseGroup in stpnode table");

					Dot1dBaseGroup dod1db = (Dot1dBaseGroup) snmpVlanColl.getDot1dBase();
					String baseBridgeAddress = dod1db.getBridgeAddress();
					int basenumports = dod1db.getNumberOfPorts();
					int bridgetype = dod1db.getBridgeType();
					

					if (baseBridgeAddress == "000000000000") {
						log.warn("store: base bridge address " + baseBridgeAddress
								+ " is invalid for ipaddress " );
					} else {
						m_node.addBridgeIdentifier(baseBridgeAddress,vlanindex);
						DbStpNodeEntry dbStpNodeEntry = DbStpNodeEntry.get(dbConn,
							m_node.getNodeId(), vlan);
						if (dbStpNodeEntry == null) {
							// Create a new entry
							dbStpNodeEntry = DbStpNodeEntry.create(m_node
								.getNodeId(), vlan);
						}
						// update object

						dbStpNodeEntry.updateBaseBridgeAddress(baseBridgeAddress);
						dbStpNodeEntry.updateBaseNumPorts(basenumports);
						dbStpNodeEntry.updateBaseType(bridgetype);
						dbStpNodeEntry.updateBaseVlanName(vlanname);
					
						if (snmpVlanColl.hasDot1dStp()) {
							if (log.isDebugEnabled())
								log
									.debug("store: adding Dot1dStpGroup in stpnode table");

							Dot1dStpGroup dod1stp = (Dot1dStpGroup) snmpVlanColl
								.getDot1dStp();
							int protospec = dod1stp.getStpProtocolSpecification();
							int stppriority = dod1stp.getStpPriority();
							String stpDesignatedRoot = dod1stp.getStpDesignatedRoot();
							int stprootcost = dod1stp.getStpRootCost();
							int stprootport = dod1stp.getStpRootPort();

							if (stpDesignatedRoot != "0000000000000000") {
								m_node.setVlanStpRoot(vlanindex,stpDesignatedRoot);
							}
							
							dbStpNodeEntry.updateStpProtocolSpecification(protospec);
							dbStpNodeEntry.updateStpPriority(stppriority);
							dbStpNodeEntry.updateStpDesignatedRoot(stpDesignatedRoot);
							dbStpNodeEntry.updateStpRootCost(stprootcost);
							dbStpNodeEntry.updateStpRootPort(stprootport);
						}
					// store object in database
						dbStpNodeEntry.updateStatus(DbStpNodeEntry.STATUS_ACTIVE);
						dbStpNodeEntry.set_lastpolltime(now);

						dbStpNodeEntry.store(dbConn);
					
						if (snmpVlanColl.hasDot1dBasePortTable()) {
							Iterator sub_ite = snmpVlanColl.getDot1dBasePortTable()
								.getEntries().iterator();
							if (log.isDebugEnabled())
								log
									.debug("store: saving Dot1dBasePortTable in stpinterface table");
							while (sub_ite.hasNext()) {
								Dot1dBasePortTableEntry dot1dbaseptentry = (Dot1dBasePortTableEntry) sub_ite
									.next();
								int baseport = dot1dbaseptentry.getInt32(Dot1dBasePortTableEntry.BASE_PORT);
								int ifindex = dot1dbaseptentry.getInt32(Dot1dBasePortTableEntry.BASE_IFINDEX);
							
								m_node.setIfIndexBridgePort(ifindex,baseport);
							
								DbStpInterfaceEntry dbStpIntEntry = DbStpInterfaceEntry
									.get(dbConn, m_node.getNodeId(),
											baseport, vlan);
								if (dbStpIntEntry == null) {
								// Create a new entry
									dbStpIntEntry = DbStpInterfaceEntry.create(
										m_node.getNodeId(), baseport, vlan);
								}
								dbStpIntEntry.updateIfIndex(ifindex);

								dbStpIntEntry
									.updateStatus(DbStpNodeEntry.STATUS_ACTIVE);
								dbStpIntEntry.set_lastpolltime(now);

								dbStpIntEntry.store(dbConn);

							}
						}

						if (snmpVlanColl.hasDot1dStpPortTable()) {
							if (log.isDebugEnabled())
								log
									.debug(" store: adding Dot1dStpPortTable in stpinterface table");
							Iterator sub_ite = snmpVlanColl.getDot1dStpPortTable()
								.getEntries().iterator();
							while (sub_ite.hasNext()) {
								Dot1dStpPortTableEntry dot1dstpptentry = (Dot1dStpPortTableEntry) sub_ite
									.next();
								int stpport = dot1dstpptentry.getInt32(Dot1dStpPortTableEntry.STP_PORT);
								DbStpInterfaceEntry dbStpIntEntry = DbStpInterfaceEntry
									.get(dbConn, m_node.getNodeId(),
											stpport, vlan);
								if (dbStpIntEntry == null) {
								// Cannot create the object becouse must exists the dot1dbase
								// object!!!!!
									log
											.warn("store StpInterface: when storing STP info"
													+ " for bridge node with nodeid "
													+ m_node.getNodeId()
													+ " bridgeport number "
													+ stpport
													+ " and vlan index "
													+ vlanindex
													+ " info not found in database, ERROR skipping.....");
								} else {

									int stpportstate = dot1dstpptentry
										.getInt32(Dot1dStpPortTableEntry.STP_PORT_STATE);
									int stpportpathcost = dot1dstpptentry
										.getInt32(Dot1dStpPortTableEntry.STP_PORT_PATH_COST);
									String stpPortDesignatedBridge = dot1dstpptentry
										.getHexString(Dot1dStpPortTableEntry.STP_PORT_DESIGNATED_BRIDGE);
									String stpPortDesignatedRoot = dot1dstpptentry
										.getHexString(Dot1dStpPortTableEntry.STP_PORT_DESIGNATED_ROOT);
									int stpportdesignatedcost = dot1dstpptentry
										.getInt32(Dot1dStpPortTableEntry.STP_PORT_DESIGNATED_COST);
									String stpPortDesignatedPort = dot1dstpptentry
										.getHexString(Dot1dStpPortTableEntry.STP_PORT_DESIGNATED_PORT);
								

									if (stpPortDesignatedBridge.equals("0000000000000000")) {
										log.warn("storeSnmpCollection: designated bridge is invalid not adding to discoveryLink");
									} else if (stpPortDesignatedPort.equals("0000")) {
										log.warn("storeSnmpCollection: designated port is invalid not adding to discoveryLink");
									} else {
										BridgeStpInterface stpIface = new BridgeStpInterface(stpport,vlanindex);
										stpIface.setStpPortDesignatedBridge(stpPortDesignatedBridge);
										stpIface.setStpPortDesignatedPort(stpPortDesignatedPort);
										m_node.addStpInterface(stpIface);
									}
								
									dbStpIntEntry.updateStpPortState(stpportstate);
									dbStpIntEntry.updateStpPortPathCost(stpportpathcost);
									dbStpIntEntry.updateStpportDesignatedBridge(stpPortDesignatedBridge);
									dbStpIntEntry.updateStpportDesignatedRoot(stpPortDesignatedRoot);
									dbStpIntEntry.updateStpPortDesignatedCost(stpportdesignatedcost);
									dbStpIntEntry.updateStpportDesignatedPort(stpPortDesignatedPort);
									dbStpIntEntry.updateStatus(DbStpNodeEntry.STATUS_ACTIVE);
									dbStpIntEntry.set_lastpolltime(now);

									dbStpIntEntry.store(dbConn);

								}
							}
						}
					
						if (snmpVlanColl.hasDot1dTpFdbTable()) {
							if (log.isDebugEnabled())
								log
										.debug("store: parsing Dot1dTpFdbTable");

							Iterator subite = snmpVlanColl.getDot1dFdbTable()
								.getEntries().iterator();
							while (subite.hasNext()) {
								Dot1dTpFdbTableEntry dot1dfdbentry = (Dot1dTpFdbTableEntry) subite
									.next();
								String curMacAddress = dot1dfdbentry
									.getHexString(Dot1dTpFdbTableEntry.FDB_ADDRESS);

								int fdbport = dot1dfdbentry.getInt32(Dot1dTpFdbTableEntry.FDB_PORT);

								if (fdbport == 0) {
									if (log.isDebugEnabled())
										log.debug("populateBridge: macaddress "
											+ curMacAddress
											+ " learned on invalid port "
											+ fdbport + " . Skipping");
									continue;
								}

								int curfdbstatus = dot1dfdbentry.getInt32(Dot1dTpFdbTableEntry.FDB_STATUS);

								if (curfdbstatus == SNMP_DOT1D_FDB_STATUS_LEARNED) {
									m_node.addMacAddress(fdbport,
										curMacAddress, vlanindex);
									if (log.isDebugEnabled())
										log
											.debug("storeSnmpCollection: found learned mac address "
													+ curMacAddress
													+ " on bridge port "
													+ fdbport
													+ " for VLAN "
													+ snmpVlanColl.getVlanIndex());
								}

								if (curfdbstatus == SNMP_DOT1D_FDB_STATUS_SELF) {
									m_node.addBridgeIdentifier(curMacAddress);
									if (log.isDebugEnabled())
									log
											.debug("storeSnmpCollection: found bridge identifier "
													+ curMacAddress
													+ " for VLAN "
													+ snmpVlanColl.getVlanIndex()
													+ " and bridge port "
													+ fdbport);
								}

								if (curfdbstatus == SNMP_DOT1D_FDB_STATUS_INVALID) {
									if (log.isDebugEnabled())
										log.debug("storeSnmpCollection: macaddress "
											+ curMacAddress
											+ " has INVALID status on port "
											+ fdbport + " . Skipping");
									continue;
								}

								if (curfdbstatus == SNMP_DOT1D_FDB_STATUS_MGMT) {
									if (log.isDebugEnabled())
										log.debug("storeSnmpCollection: macaddress "
											+ curMacAddress
											+ " has MGMT status on port "
											+ fdbport + " . Skipping");
									continue;
								}

								if (curfdbstatus == SNMP_DOT1D_FDB_STATUS_OTHER) {
									if (log.isDebugEnabled())
										log.debug("storeSnmpCollection: macaddress "
											+ curMacAddress
											+ " has OTHER status on port "
											+ fdbport + " . Skipping");
									continue;
								}

							}
						}
						
						//now adding bridge identifier mac addresses of switch from snmpinterface
						setBridgeIdentifierFromSnmpInterface(dbConn);
					}
				}
			}
		}
		update(dbConn, now);
		
	}	

