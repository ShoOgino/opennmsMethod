	/**
	 * 
	 * @param dbConn
	 * @param now
	 * @throws SQLException
	 */
	private void storeSnmpCollection(Connection dbConn, Timestamp now) throws SQLException,
			UnknownHostException {

		Category log = ThreadCategory.getInstance(getClass());
//		Iterator ite = null;

		int nodeid = m_node.getNodeId();

		if (m_snmpcoll.hasIpNetToMediaTable()) {
			Iterator ite1 = m_snmpcoll.getIpNetToMediaTable().getEntries().iterator();
			if (log.isDebugEnabled())
				log
						.debug("store: saving IpNetToMediaTable to atinterface table in DB");
			// the AtInterfaces used by LinkableNode where to save info
			java.util.List<AtInterface> atInterfaces = new java.util.ArrayList<AtInterface>();
			while (ite1.hasNext()) {

				IpNetToMediaTableEntry ent = (IpNetToMediaTableEntry) ite1
						.next();
				
				int ifindex = ent.getIpNetToMediaIfIndex();
				
				if ( ifindex < 0 ) {
					log.warn("store: invalid ifindex " + ifindex);
					continue;
				}
				
				InetAddress ipaddress = ent.getIpNetToMediaNetAddress();

				if (ipaddress == null || ipaddress.isLoopbackAddress() || ipaddress.getHostAddress().equals("0.0.0.0")) {
					log.warn("store: ipNetToMedia invalid ip " + ipaddress.getHostAddress());
					continue;
				}

				String physAddr = ent.getIpNetToMediaPhysAddress();
				
				if ( physAddr == null || physAddr.equals("000000000000") || physAddr.equalsIgnoreCase("ffffffffffff")) {
					log.warn("store: ipNetToMedia invalid mac address " + physAddr
							+ " for ip " + ipaddress.getHostAddress());
					continue;
				}


				if (log.isDebugEnabled())
					log.debug("store: trying save ipNetToMedia info: ipaddr " + ipaddress.getHostName()
							+ " mac address " + physAddr + " ifindex "
							+ ifindex);

				// get an At interface but without setting mac address
				AtInterface at = getNodeidIfindexFromIp(dbConn, ipaddress);
				if (at == null) {
						log.warn("getNodeidIfindexFromIp: no nodeid found for ipaddress "
								+ ipaddress + ".");
					sendNewSuspectEvent(ipaddress);
					continue;
				}
				//set the mac address
				at.setMacAddress(physAddr);
				// add At Inteface to list of valid interfaces
				atInterfaces.add(at);

				// Save in DB
				DbAtInterfaceEntry atInterfaceEntry = DbAtInterfaceEntry.get(
						dbConn, at.getNodeId(), ipaddress.getHostAddress());
				
				if (atInterfaceEntry == null) {
					atInterfaceEntry = DbAtInterfaceEntry.create(at.getNodeId(),
							ipaddress.getHostAddress());
				}

				// update object
				atInterfaceEntry.updateAtPhysAddr(physAddr);
				atInterfaceEntry.updateSourceNodeId(nodeid);
				atInterfaceEntry.updateIfIndex(ifindex);
				atInterfaceEntry.updateStatus(DbAtInterfaceEntry.STATUS_ACTIVE);
				atInterfaceEntry.set_lastpolltime(now);

				// store object in database
				atInterfaceEntry.store(dbConn);
			}
			// set AtInterfaces in LinkableNode
			m_node.setAtInterfaces(atInterfaces);
		}

		if (m_snmpcoll.hasCdpCacheTable()) {
			if (log.isDebugEnabled())
				log
						.debug("store: saving CdpCacheTable into SnmpLinkableNode");
			java.util.List<CdpInterface> cdpInterfaces = new java.util.ArrayList<CdpInterface>();
			Iterator ite2 = m_snmpcoll.getCdpCacheTable()
					.getEntries().iterator();
			while (ite2.hasNext()) {
				CdpCacheTableEntry cdpEntry = (CdpCacheTableEntry) ite2.next();
				int cdpAddrType = cdpEntry.getCdpCacheAddressType();

				if (cdpAddrType != CDP_ADDRESS_TYPE_IP_ADDRESS) {
					log.warn(" cdp Address Type not valid " + cdpAddrType);
					continue;
				}

				InetAddress cdpTargetIpAddr = cdpEntry.getCdpCacheAddress();
				
				if (cdpTargetIpAddr == null || cdpTargetIpAddr.isLoopbackAddress() || cdpTargetIpAddr.getHostAddress().equals("0.0.0.0")) {
					log.warn(" cdp Ip Address is not valid " + cdpTargetIpAddr);
					continue;
				}
				
				if (log.isDebugEnabled())	log.debug(" cdp ip address found " + cdpTargetIpAddr.getHostAddress());
				
				int cdpIfIndex = cdpEntry.getCdpCacheIfIndex();
				
				if (cdpIfIndex < 0 ) {
					log.warn(" cdpIfIndex not valid " + cdpIfIndex);
					continue;
				}

				if (log.isDebugEnabled())	log.debug(" cdp ifindex found " + cdpIfIndex);

				String cdpTargetDevicePort = cdpEntry.getCdpCacheDevicePort();
				
				if (cdpTargetDevicePort == null ) {
					log.warn(" cdpTargetDevicePort null. Skipping. " );
					continue;
				}

				if (log.isDebugEnabled())	log.debug(" cdp Target device port name found " + cdpTargetDevicePort);

				int targetCdpNodeId = getNodeidFromIp(dbConn, cdpTargetIpAddr);

				if (targetCdpNodeId == -1 ) {
					log.warn("No nodeid found: cdp interface not added to Linkable Snmp Node. Skipping");
					sendNewSuspectEvent(cdpTargetIpAddr);
					continue;
				}

				int cdpTargetIfindex = getIfIndexByName(
						dbConn, targetCdpNodeId, cdpTargetDevicePort);

				if (log.isDebugEnabled()) log.debug("No valid if target index found: " + cdpTargetIfindex + "cdp interface not added to Linkable Snmp Node. Skipping");
				
				CdpInterface cdpIface = new CdpInterface(cdpIfIndex);
				cdpIface.setCdpTargetNodeId(targetCdpNodeId);
				cdpIface.setCdpTargetIpAddr(cdpTargetIpAddr);
				cdpIface.setCdpTargetIfIndex(cdpTargetIfindex);
				
				cdpInterfaces.add(cdpIface);
			}
			m_node.setCdpInterfaces(cdpInterfaces);
		}

		if (m_snmpcoll.hasRouteTable()) {
			java.util.List<RouterInterface> routeInterfaces = new java.util.ArrayList<RouterInterface>();
			
			Iterator ite3 = m_snmpcoll.getIpRouteTable().getEntries()
					.iterator();
			if (log.isDebugEnabled())
				log
						.debug("store: saving ipRouteTable to iprouteinterface table in DB");
			while (ite3.hasNext()) {
				IpRouteTableEntry ent = (IpRouteTableEntry) ite3.next();

				int ifindex = ent.getIpRouteIfIndex();

				if (ifindex < 0) {
					log.warn("store: Not valid ifindex" + ifindex 
							+ " Skipping...");
					continue;
				}

				InetAddress nexthop = ent.getIpRouteNextHop();

				if (nexthop == null) {
					log.warn("storeSnmpCollection: next hop null found skipping.");
					continue;
				}
				
				InetAddress routedest = ent.getIpRouteDest();
				if (routedest == null) {
					log.warn("storeSnmpCollection: route dest null found skipping.");
					continue;
				}
				InetAddress routemask = ent.getIpRouteMask();
				
				if (routemask == null) {
					log.warn("storeSnmpCollection: route dest null found skipping.");
					continue;
				}

				if (log.isDebugEnabled()) {
					log.debug("storeSnmpCollection: parsing routedest/routemask/nexthop: " 
							+ routedest + "/" 
							+ routemask + "/"
							+ nexthop + " ifindex " + (ifindex < 1 ? "less than 1" : ifindex));
					
				}
				

				int routemetric1 = ent.getIpRouteMetric1();

				/**
				 *  FIXME: send routedest 0.0.0.0 to discoverylink  
				 *  remeber that now nexthop 0.0.0.0 is not 
				 *  parsed, anyway we should analize this case in link discovery
				 *  so here is the place where you can have this info saved for
				 *  now is discarded. See DiscoveryLink for more details......
				 * 
				**/
				
				// the routerinterface constructor set nodeid, ifindex, netmask for nexthop address
				// try to find on snmpinterface table
				RouterInterface routeIface = getNodeidMaskFromIp(dbConn,nexthop);

				// if target node is not snmp node always try to find info
				// on ipinterface table
				if (routeIface == null) {
					routeIface = getNodeFromIp(dbConn, nexthop);
				}
					
				if (routeIface == null) {
					log.warn("store: No nodeid found for next hop ip" + nexthop 
							+ " Skipping ip route interface add to Linkable Snmp Node");
					// try to find it in ipinterface
					sendNewSuspectEvent(nexthop);
				} else {
					int snmpiftype = -2;
                    
					if (ifindex > 0) snmpiftype = getSnmpIfType(dbConn, nodeid, ifindex);

					if (snmpiftype == -1) {
						log.warn("store: interface has wrong or null snmpiftype "
								+ snmpiftype + " . Skipping saving to discoverylink. ");
					} else if (nexthop.isLoopbackAddress()) {
						if (log.isInfoEnabled()) 
							log.info("storeSnmpCollection: next hop loopbackaddress found. Skipping saving to discoverylink.");
					} else if (nexthop.getHostAddress().equals("0.0.0.0")) {
						if (log.isInfoEnabled()) 
							log.info("storeSnmpCollection: next hop broadcast address found. Skipping saving to discoverylink.");
					} else if (nexthop.isMulticastAddress()) {
						if (log.isInfoEnabled()) 
							log.info("storeSnmpCollection: next hop multicast address found. Skipping saving to discoverylink.");
					} else if (routemetric1 < 0) {
						if (log.isInfoEnabled()) 
							log.info("storeSnmpCollection: route metric is invalid. Skipping saving to discoverylink.");
					} else {
						if (log.isDebugEnabled())
							log.debug("store: interface has snmpiftype "
										+ snmpiftype + " . Adding to DiscoverLink ");

						routeIface.setRouteDest(routedest);
						routeIface.setRoutemask(routemask);
						routeIface.setSnmpiftype(snmpiftype);
						routeIface.setIfindex(ifindex);
						routeIface.setMetric(routemetric1);
						routeIface.setNextHop(nexthop);
						routeInterfaces.add(routeIface);
						
					}
				}

				int routemetric2 = ent.getIpRouteMetric2();
				int routemetric3  =ent.getIpRouteMetric3();
				int routemetric4 = ent.getIpRouteMetric4();
				int routemetric5 = ent.getIpRouteMetric5();
				int routetype = ent.getIpRouteType();
				int routeproto = ent.getIpRouteProto();

				// always save info to DB
				DbIpRouteInterfaceEntry iprouteInterfaceEntry = DbIpRouteInterfaceEntry
						.get(dbConn, nodeid, routedest.getHostAddress());
				if (iprouteInterfaceEntry == null) {
					// Create a new entry
					iprouteInterfaceEntry = DbIpRouteInterfaceEntry.create(
							m_node.getNodeId(), routedest.getHostAddress());
				}
				// update object
				iprouteInterfaceEntry.updateRouteMask(routemask.getHostAddress());
				iprouteInterfaceEntry.updateRouteNextHop(nexthop.getHostAddress());
				iprouteInterfaceEntry.updateIfIndex(ifindex);
                
                //okay to autobox these since were checking for null
				iprouteInterfaceEntry.updateRouteMetric1(routemetric1);
				iprouteInterfaceEntry.updateRouteMetric2(routemetric2);
				iprouteInterfaceEntry.updateRouteMetric3(routemetric3);
				iprouteInterfaceEntry.updateRouteMetric4(routemetric4);
				iprouteInterfaceEntry.updateRouteMetric5(routemetric5);
				iprouteInterfaceEntry.updateRouteType(routetype);
				iprouteInterfaceEntry.updateRouteProto(routeproto);
				iprouteInterfaceEntry
						.updateStatus(DbAtInterfaceEntry.STATUS_ACTIVE);
				iprouteInterfaceEntry.set_lastpolltime(now);

				// store object in database
				iprouteInterfaceEntry.store(dbConn);
			}
			m_node.setRouteInterfaces(routeInterfaces);
		}

		if (log.isDebugEnabled())
			log.debug("store: saving VlanTable in DB");

		if (m_snmpcoll.hasVlanTable()) {
						
			Iterator ite3 = m_snmpcoll.getVlanTable().getEntries()
					.iterator();
			if (log.isDebugEnabled())
				log
						.debug("store: saving Snmp Vlan Table to vlan table in DB");
			while (ite3.hasNext()) {
				SnmpTableEntry ent = (SnmpTableEntry) ite3.next();

				Integer vlanindex = ent.getInt32(VlanCollectorEntry.VLAN_INDEX);

				if (vlanindex == null || vlanindex < 0) {
					log.warn("store: Not valid vlan ifindex" + vlanindex 
							+ " Skipping...");
					continue;
				}
				
				String vlanName = ent.getDisplayString(VlanCollectorEntry.VLAN_NAME);
				if (vlanName == null ) {
					log.warn("store: Null vlan name. forcing to default...");
					vlanName = "default";
				}

				Integer vlantype = ent.getInt32(VlanCollectorEntry.VLAN_TYPE);
				Integer vlanstatus = ent.getInt32(VlanCollectorEntry.VLAN_STATUS);
				
				// always save info to DB
				DbVlanEntry vlanEntry = DbVlanEntry
						.get(dbConn, nodeid, vlanindex);
				if (vlanEntry == null) {
					// Create a new entry
					vlanEntry = DbVlanEntry.create(
							m_node.getNodeId(), vlanindex);
				}
				
				vlanEntry.updateVlanName(vlanName);
                //okay to autobox these since were checking for null
				if (vlantype != null)
					vlanEntry.updateVlanType(vlantype);
				if (vlanstatus != null)
					vlanEntry.updateVlanStatus(vlanstatus);
				vlanEntry
						.updateStatus(DbAtInterfaceEntry.STATUS_ACTIVE);
				vlanEntry.set_lastpolltime(now);

				// store object in database
				vlanEntry.store(dbConn);
			}
		}

		if (log.isDebugEnabled())
			log.debug("store: saving SnmpVlanCollection's in DB");
		
		Iterator<Entry<Vlan,SnmpVlanCollection>> ite4 = m_snmpcoll.getSnmpVlanCollections().entrySet().iterator();
		
		SnmpVlanCollection snmpVlanColl = null;
		Vlan vlan = null;
		while (ite4.hasNext()) {
			
			Entry<Vlan,SnmpVlanCollection> entry = ite4.next();

			vlan = entry.getKey();

			
			int vlanid = vlan.getVlanindex();
			String vlanname = vlan.getVlanname();
			String vlanindex = Integer.toString(vlanid);
			if (log.isDebugEnabled())
				log
						.debug("store: parsing VLAN "
								+ vlanindex + " VLAN_NAME " + vlanname);

			snmpVlanColl = entry.getValue();

			if (snmpVlanColl.hasDot1dBase()) {
				if (log.isDebugEnabled())
					log
							.debug("store: saving Dot1dBaseGroup in stpnode table");

				Dot1dBaseGroup dod1db = (Dot1dBaseGroup) snmpVlanColl.getDot1dBase();
				
				String baseBridgeAddress = dod1db.getBridgeAddress();
				if (baseBridgeAddress == null || baseBridgeAddress == "000000000000") {
					log.warn("store: invalid base bridge address " + baseBridgeAddress);
				} else {
					m_node.addBridgeIdentifier(baseBridgeAddress,vlanindex);
					int basenumports = dod1db.getNumberOfPorts();

					
					int bridgetype = dod1db.getBridgeType();
					
					DbStpNodeEntry dbStpNodeEntry = DbStpNodeEntry.get(dbConn,
						m_node.getNodeId(), vlanid);
					if (dbStpNodeEntry == null) {
						// Create a new entry
						dbStpNodeEntry = DbStpNodeEntry.create(m_node
							.getNodeId(), vlanid);
					}
					// update object

					dbStpNodeEntry.updateBaseBridgeAddress(baseBridgeAddress);
					dbStpNodeEntry.updateBaseNumPorts(basenumports);
					dbStpNodeEntry.updateBaseType(bridgetype);
					dbStpNodeEntry.updateBaseVlanName(vlanname);
				
					if (snmpVlanColl.hasDot1dStp()) {
						if (log.isDebugEnabled())
							log
								.debug("store: adding Dot1dStpGroup in stpnode table");

						Dot1dStpGroup dod1stp = (Dot1dStpGroup) snmpVlanColl
							.getDot1dStp();
						int protospec = dod1stp.getStpProtocolSpecification();
						int stppriority = dod1stp.getStpPriority();
						int stprootcost = dod1stp.getStpRootCost();
						int stprootport = dod1stp.getStpRootPort();
						String stpDesignatedRoot = dod1stp.getStpDesignatedRoot();

						if (stpDesignatedRoot == null || stpDesignatedRoot == "0000000000000000") {
							if (log.isDebugEnabled()) log.debug("store: Dot1dStpGroup found stpDesignatedRoot " + stpDesignatedRoot + " not adding to Linkable node");
							stpDesignatedRoot = "0000000000000000";
						} else {
							m_node.setVlanStpRoot(vlanindex,stpDesignatedRoot);
						}
						
						dbStpNodeEntry.updateStpProtocolSpecification(protospec);
						dbStpNodeEntry.updateStpPriority(stppriority);
						dbStpNodeEntry.updateStpDesignatedRoot(stpDesignatedRoot);
						dbStpNodeEntry.updateStpRootCost(stprootcost);
						dbStpNodeEntry.updateStpRootPort(stprootport);
					}
					// store object in database
					dbStpNodeEntry.updateStatus(DbStpNodeEntry.STATUS_ACTIVE);
					dbStpNodeEntry.set_lastpolltime(now);
					dbStpNodeEntry.store(dbConn);
				
					// FIXME implement vlan table.....
					// so you can store vlan tables properly
					// depending on vlan collection entry set
					
					if (snmpVlanColl.hasDot1dBasePortTable()) {
						Iterator sub_ite = snmpVlanColl.getDot1dBasePortTable()
							.getEntries().iterator();
						if (log.isDebugEnabled())
							log
								.debug("store: saving Dot1dBasePortTable in stpinterface table");
						while (sub_ite.hasNext()) {
							Dot1dBasePortTableEntry dot1dbaseptentry = (Dot1dBasePortTableEntry) sub_ite
								.next();
							
							int baseport = dot1dbaseptentry.getBaseBridgePort();
							int ifindex = dot1dbaseptentry.getBaseBridgePortIfindex();
							
							if (baseport == -1 || ifindex == -1 ) {
								log.warn("store: Dot1dBasePortTable invalid baseport or ifindex " + baseport + " / " + ifindex);
								continue;
							}
						
							m_node.setIfIndexBridgePort(ifindex,baseport);
						
							DbStpInterfaceEntry dbStpIntEntry = DbStpInterfaceEntry
								.get(dbConn, m_node.getNodeId(),
										baseport, vlanid);
							if (dbStpIntEntry == null) {
							// Create a new entry
								dbStpIntEntry = DbStpInterfaceEntry.create(
									m_node.getNodeId(), baseport, vlanid);
							}
							
							dbStpIntEntry.updateIfIndex(ifindex);
							dbStpIntEntry.updateStatus(DbStpNodeEntry.STATUS_ACTIVE);
							dbStpIntEntry.set_lastpolltime(now);
							dbStpIntEntry.store(dbConn);
						}
					}

					if (snmpVlanColl.hasDot1dStpPortTable()) {
						if (log.isDebugEnabled())
							log
								.debug(" store: adding Dot1dStpPortTable in stpinterface table");
						Iterator sub_ite = snmpVlanColl.getDot1dStpPortTable()
							.getEntries().iterator();
						while (sub_ite.hasNext()) {
							Dot1dStpPortTableEntry dot1dstpptentry = (Dot1dStpPortTableEntry) sub_ite
								.next();
							int stpport = dot1dstpptentry.getDot1dStpPort();
							
							if (stpport == -1 ) {
								log.warn("store: Dot1dStpPortTable found invalid stp port. Skipping");
								continue;
							}
							
							DbStpInterfaceEntry dbStpIntEntry = DbStpInterfaceEntry
								.get(dbConn, m_node.getNodeId(),
										stpport, vlanid);
							if (dbStpIntEntry == null) {
							// Cannot create the object becouse must exists the dot1dbase
							// object!!!!!
								log
										.warn("store: StpInterface not found in database when storing STP info"
												+ " for bridge node with nodeid "
												+ m_node.getNodeId()
												+ " bridgeport number "
												+ stpport
												+ " and vlan index "
												+ vlanindex
												+ " skipping.");
							} else {
								
								String stpPortDesignatedBridge = dot1dstpptentry.getDot1dStpPortDesignatedBridge();
								String stpPortDesignatedPort = dot1dstpptentry.getDot1dStpPortDesignatedPort();

								if (stpPortDesignatedBridge == null || stpPortDesignatedBridge.equals("0000000000000000")) {
									log.warn("store: "+ stpPortDesignatedBridge + " designated bridge is invalid not adding to discoveryLink");
									stpPortDesignatedBridge = "0000000000000000";
								} else if (stpPortDesignatedPort == null || stpPortDesignatedPort.equals("0000")) {
									log.warn("store: " + stpPortDesignatedPort + " designated port is invalid not adding to discoveryLink");
									stpPortDesignatedPort = "0000";
								} else {
									BridgeStpInterface stpIface = new BridgeStpInterface(stpport,vlanindex);
									stpIface.setStpPortDesignatedBridge(stpPortDesignatedBridge);
									stpIface.setStpPortDesignatedPort(stpPortDesignatedPort);
									m_node.addStpInterface(stpIface);
								}

								dbStpIntEntry.updateStpPortState(dot1dstpptentry.getDot1dStpPortState());
								dbStpIntEntry.updateStpPortPathCost(dot1dstpptentry.getDot1dStpPortPathCost());
								dbStpIntEntry.updateStpportDesignatedBridge(stpPortDesignatedBridge);
								dbStpIntEntry.updateStpportDesignatedRoot(dot1dstpptentry.getDot1dStpPortDesignatedRoot());
								dbStpIntEntry.updateStpPortDesignatedCost(dot1dstpptentry.getDot1dStpPortDesignatedCost());
								dbStpIntEntry.updateStpportDesignatedPort(stpPortDesignatedPort);
								dbStpIntEntry.updateStatus(DbStpNodeEntry.STATUS_ACTIVE);
								dbStpIntEntry.set_lastpolltime(now);

								dbStpIntEntry.store(dbConn);

							}
						}
					}
				
					if (snmpVlanColl.hasDot1dTpFdbTable()) {
						if (log.isDebugEnabled())
							log
									.debug("store: parsing Dot1dTpFdbTable");

						Iterator subite = snmpVlanColl.getDot1dFdbTable()
							.getEntries().iterator();
						while (subite.hasNext()) {
							Dot1dTpFdbTableEntry dot1dfdbentry = (Dot1dTpFdbTableEntry) subite
								.next();
							String curMacAddress = dot1dfdbentry.getDot1dTpFdbAddress();
							
							if (curMacAddress == null || curMacAddress.equals("000000000000")) {
									log.warn("store: Dot1dTpFdbTable invalid macaddress "
										+ curMacAddress + " Skipping.");
								continue;
							}

							if (log.isDebugEnabled())
								log.debug("store: Dot1dTpFdbTable found macaddress "
									+ curMacAddress);

							int fdbport = dot1dfdbentry.getDot1dTpFdbPort();

							if (fdbport == 0 || fdbport == -1 ) {
								if (log.isDebugEnabled())
									log.debug("store: Dot1dTpFdbTable mac learned on invalid port "
										+ fdbport + " . Skipping");
								continue;
							}

							if (log.isDebugEnabled())
								log
									.debug("store: Dot1dTpFdbTable mac address found "
											+ " on bridge port "
											+ fdbport);

							int curfdbstatus = dot1dfdbentry.getDot1dTpFdbStatus();

							if (curfdbstatus == SNMP_DOT1D_FDB_STATUS_LEARNED) {
								m_node.addMacAddress(fdbport,
									curMacAddress, vlanindex);
								if (log.isDebugEnabled())
									log.debug("store: Dot1dTpFdbTable found learned status"
												+ " on bridge port ");
							} else if (curfdbstatus == SNMP_DOT1D_FDB_STATUS_SELF) {
								m_node.addBridgeIdentifier(curMacAddress);
								if (log.isDebugEnabled())
									log.debug("store: Dot1dTpFdbTable mac is bridge identifier");
							} else if (curfdbstatus == SNMP_DOT1D_FDB_STATUS_INVALID) {
								if (log.isDebugEnabled())
									log.debug("store: Dot1dTpFdbTable found INVALID status. Skipping");
							} else	if (curfdbstatus == SNMP_DOT1D_FDB_STATUS_MGMT) {
								if (log.isDebugEnabled())
									log.debug("store: Dot1dTpFdbTable found MGMT status. Skipping");
							} else if (curfdbstatus == SNMP_DOT1D_FDB_STATUS_OTHER) {
								if (log.isDebugEnabled())
									log.debug("store: Dot1dTpFdbTable found OTHER status. Skipping");
							} else if (curfdbstatus == -1) {
								log.warn("store: Dot1dTpFdbTable null status found. Skipping");
							}
						}
					}

					if (snmpVlanColl.hasQBridgeDot1dTpFdbTable()) {
						if (log.isDebugEnabled())
							log
									.debug("store: parsing QBridgeDot1dTpFdbTable");

						Iterator subite = snmpVlanColl.getQBridgeDot1dFdbTable()
							.getEntries().iterator();
						while (subite.hasNext()) {
							QBridgeDot1dTpFdbTableEntry dot1dfdbentry = (QBridgeDot1dTpFdbTableEntry) subite
								.next();

							String curMacAddress = dot1dfdbentry.getQBridgeDot1dTpFdbAddress();

							if (curMacAddress == null || curMacAddress.equals("000000000000")) {
								log.warn("store: QBridgeDot1dTpFdbTable invalid macaddress "
									+ curMacAddress + " Skipping.");
								continue;
							}

							if (log.isDebugEnabled())
								log.debug("store: Dot1dTpFdbTable found macaddress "
									+ curMacAddress);

							int fdbport = dot1dfdbentry.getQBridgeDot1dTpFdbPort();

							if (fdbport == 0 || fdbport == -1 ) {
								if (log.isDebugEnabled())
									log.debug("store: QBridgeDot1dTpFdbTable mac learned on invalid port "
										+ fdbport + " . Skipping");
								continue;
							}

							if (log.isDebugEnabled())
								log
									.debug("store: QBridgeDot1dTpFdbTable mac address found "
											+ " on bridge port "
											+ fdbport);

							int curfdbstatus = dot1dfdbentry.getQBridgeDot1dTpFdbStatus();

							if (curfdbstatus == SNMP_DOT1D_FDB_STATUS_LEARNED) {
								m_node.addMacAddress(fdbport,
									curMacAddress, vlanindex);
								if (log.isDebugEnabled())
									log.debug("store: QBridgeDot1dTpFdbTable found learned status"
												+ " on bridge port ");
							} else if (curfdbstatus == SNMP_DOT1D_FDB_STATUS_SELF) {
								m_node.addBridgeIdentifier(curMacAddress);
								if (log.isDebugEnabled())
									log.debug("store: QBridgeDot1dTpFdbTable mac is bridge identifier");
							} else if (curfdbstatus == SNMP_DOT1D_FDB_STATUS_INVALID) {
								if (log.isDebugEnabled())
									log.debug("store: QBridgeDot1dTpFdbTable found INVALID status. Skipping");
							} else	if (curfdbstatus == SNMP_DOT1D_FDB_STATUS_MGMT) {
								if (log.isDebugEnabled())
									log.debug("store: QBridgeDot1dTpFdbTable found MGMT status. Skipping");
							} else if (curfdbstatus == SNMP_DOT1D_FDB_STATUS_OTHER) {
								if (log.isDebugEnabled())
									log.debug("store: QBridgeDot1dTpFdbTable found OTHER status. Skipping");
							} else if (curfdbstatus == -1) {
								log.warn("store: QBridgeDot1dTpFdbTable null status found. Skipping");
							}
						}
					}

					//now adding bridge identifier mac addresses of switch from snmpinterface
					setBridgeIdentifierFromSnmpInterface(dbConn);
				}
			}
		}
		update(dbConn, now);
		
	}	

