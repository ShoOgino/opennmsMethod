		/** 
		 * Updates an existing record in the OpenNMS StpNode table.
		 * 
		 * @param c	The connection used for the update.
		 *
		 * @throws java.sql.SQLException Thrown if an error occurs
		 * 	with the connection
		 */
		private void update(Connection c) throws SQLException {
			if (!m_fromDb)
				throw new IllegalStateException(
						"The record does not exists in the database");

			ThreadCategory log = ThreadCategory.getInstance(getClass());

			// first extract the next node identifier
			//
			StringBuffer sqlText = new StringBuffer("UPDATE vlan SET ");

			char comma = ' ';


			if ((m_changed & CHANGED_VLANNAME) == CHANGED_VLANNAME) {
				sqlText.append(comma).append("vlanname = ?");
				comma = ',';
			}

			if ((m_changed & CHANGED_VLANTYPE) == CHANGED_VLANTYPE) {
				sqlText.append(comma).append("vlantype = ?");
				comma = ',';
			}
			
			if ((m_changed & CHANGED_VLANSTATUS) == CHANGED_VLANSTATUS) {
				sqlText.append(comma).append("vlanstatus = ?");
				comma = ',';
			}

			if ((m_changed & CHANGED_STATUS) == CHANGED_STATUS) {
				sqlText.append(comma).append("status = ?");
				comma = ',';
			}

			if ((m_changed & CHANGED_POLLTIME) == CHANGED_POLLTIME) {
				sqlText.append(comma).append("lastpolltime = ?");
				comma = ',';
			}

			sqlText.append(" WHERE nodeid = ? AND vlanid = ? ");

			if (log.isDebugEnabled())
				log.debug("DbVlanEntry.update: SQL insert statment = " + sqlText.toString());

			final DBUtils d = new DBUtils(getClass());
			try {
                PreparedStatement stmt = c.prepareStatement(sqlText.toString());
                d.watch(stmt);

                int ndx = 1;

                if ((m_changed & CHANGED_VLANNAME) == CHANGED_VLANNAME)
                	stmt.setString(ndx++, m_vlanname);

                if ((m_changed & CHANGED_VLANTYPE) == CHANGED_VLANTYPE)
                	stmt.setInt(ndx++, m_vlantype);
                
                if ((m_changed & CHANGED_VLANSTATUS) == CHANGED_VLANSTATUS) 
                	stmt.setInt(ndx++, m_vlanstatus);

                if ((m_changed & CHANGED_STATUS) == CHANGED_STATUS)
                	stmt.setString(ndx++, new String(new char[] { m_status }));

                if ((m_changed & CHANGED_POLLTIME) == CHANGED_POLLTIME) {
                	stmt.setTimestamp(ndx++, m_lastPollTime);
                }

                stmt.setInt(ndx++, m_nodeId);
                stmt.setInt(ndx++, m_vlanId);

                // Run the insert
                //
                int rc = stmt.executeUpdate();
                if (log.isDebugEnabled())
                	log.debug("DbVlanEntry.update: row " + rc);
                stmt.close();
			} finally {
			    d.cleanUp();
            }

			// clear the mask and mark as backed
			// by the database
			//
			m_changed = 0;
		}

