		/** 
		 * Updates an existing record in the OpenNMS StpNode table.
		 * 
		 * @param c	The connection used for the update.
		 *
		 * @throws java.sql.SQLException Thrown if an error occurs
		 * 	with the connection
		 */
		private void update(Connection c) throws SQLException {
			if (!m_fromDb)
				throw new IllegalStateException(
						"The record does not exists in the database");

			Category log = ThreadCategory.getInstance(getClass());

			// first extract the next node identifier
			//
			StringBuffer sqlText = new StringBuffer("UPDATE StpNode SET ");

			char comma = ' ';


			if ((m_changed & CHANGED_BRIDGEADDR) == CHANGED_BRIDGEADDR) {
				sqlText.append(comma).append("baseBridgeAddress = ?");
				comma = ',';
			}

			if ((m_changed & CHANGED_NUMPORTS) == CHANGED_NUMPORTS) {
				sqlText.append(comma).append("baseNumPorts = ?");
				comma = ',';
			}

			if ((m_changed & CHANGED_BASETYPE) == CHANGED_BASETYPE) {
				sqlText.append(comma).append("basetype = ?");
				comma = ',';
			}
			
			if ((m_changed & CHANGED_STPPROTSPEC) == CHANGED_STPPROTSPEC) {
				sqlText.append(comma).append("stpProtocolSpecification = ?");
				comma = ',';
			}

			if ((m_changed & CHANGED_STPPRIORITY) == CHANGED_STPPRIORITY) {
				sqlText.append(comma).append("stpPriority = ?");
				comma = ',';
			}

			if ((m_changed & CHANGED_STPDESROOT) == CHANGED_STPDESROOT) {
				sqlText.append(comma).append("stpdesignatedroot = ?");
				comma = ',';
			}

			if ((m_changed & CHANGED_STPROOTCOST) == CHANGED_STPROOTCOST) {
				sqlText.append(comma).append("stprootcost = ?");
				comma = ',';
			}

			if ((m_changed & CHANGED_STPROOTPORT) == CHANGED_STPROOTPORT) {
				sqlText.append(comma).append("stprootport = ?");
				comma = ',';
			}

			if ((m_changed & CHANGED_VLANNAME) == CHANGED_VLANNAME) {
				sqlText.append(comma).append("basevlanname = ?");
				comma = ',';
			}

			if ((m_changed & CHANGED_STATUS) == CHANGED_STATUS) {
				sqlText.append(comma).append("status = ?");
				comma = ',';
			}

			if ((m_changed & CHANGED_POLLTIME) == CHANGED_POLLTIME) {
				sqlText.append(comma).append("lastpolltime = ?");
				comma = ',';
			}

			sqlText.append(" WHERE nodeid = ? AND basevlan = ? ");

			if (log.isDebugEnabled())
				log.debug("DbStpNodeEntry.update: SQL insert statment = " + sqlText.toString());

			// create the Prepared statment and then
			// start setting the result values
			//
			PreparedStatement stmt = c.prepareStatement(sqlText.toString());
			sqlText = null;

			int ndx = 1;

			if ((m_changed & CHANGED_BRIDGEADDR) == CHANGED_BRIDGEADDR)
				stmt.setString(ndx++, m_basebridgeaddress);

			if ((m_changed & CHANGED_NUMPORTS) == CHANGED_NUMPORTS)
				stmt.setInt(ndx++, m_basenumports);

			if ((m_changed & CHANGED_BASETYPE) == CHANGED_BASETYPE)
				stmt.setInt(ndx++, m_basetype);
			
			if ((m_changed & CHANGED_STPPROTSPEC) == CHANGED_STPPROTSPEC) 
				stmt.setInt(ndx++, m_stpprotocolspecification);

			if ((m_changed & CHANGED_STPPRIORITY) == CHANGED_STPPRIORITY) 
				stmt.setInt(ndx++, m_stppriority);

			if ((m_changed & CHANGED_STPDESROOT) == CHANGED_STPDESROOT)
				stmt.setString(ndx++, m_stpdesignatedroot);

			if ((m_changed & CHANGED_STPROOTCOST) == CHANGED_STPROOTCOST)
				stmt.setInt(ndx++, m_stprootcost);

			if ((m_changed & CHANGED_STPROOTPORT) == CHANGED_STPROOTPORT) 
				stmt.setInt(ndx++, m_stprootport);
			
			if ((m_changed & CHANGED_VLANNAME) == CHANGED_VLANNAME) 
				stmt.setString(ndx++, m_basevlanname);

			if ((m_changed & CHANGED_STATUS) == CHANGED_STATUS)
				stmt.setString(ndx++, new String(new char[] { m_status }));

			if ((m_changed & CHANGED_POLLTIME) == CHANGED_POLLTIME) {
				stmt.setTimestamp(ndx++, m_lastPollTime);
			}

			stmt.setInt(ndx++, m_nodeId);
			stmt.setInt(ndx++, m_basevlan);

			// Run the insert
			//
			int rc = stmt.executeUpdate();
			if (log.isDebugEnabled())
				log.debug("StpNodeEntry.update: row " + rc);
			stmt.close();

			// clear the mask and mark as backed
			// by the database
			//
			m_changed = 0;
		}

