	@Override
	@Transactional
	public LinkableNode storeSnmpCollection(final LinkableNode node, final SnmpCollection snmpColl) throws SQLException {
		final Timestamp scanTime = new Timestamp(System.currentTimeMillis());
	
	LogUtils.debugf(this, "storeSnmpCollection: ospf hasOspfGeneralGroup/hasOspfIfTable/hasOspfNbrTable: %b/%b/%b", snmpColl.hasOspfGeneralGroup() ,snmpColl.hasOspfIfTable() ,snmpColl.hasOspfNbrTable());
	if (snmpColl.hasOspfGeneralGroup() && snmpColl.hasOspfIfTable() && snmpColl.hasOspfNbrTable()) {
	    processOspf(node,snmpColl,null,scanTime);
	}
        
	LogUtils.debugf(this, "storeSnmpCollection: lldp hasLldpLocalGroup/hasLldpLocTable/haLldpRemTable: %b/%b/%b", snmpColl.hasLldpLocalGroup() ,snmpColl.hasLldpLocTable() ,snmpColl.hasLldpRemTable());
        if (snmpColl.hasLldpLocalGroup() && snmpColl.hasLldpLocTable() && snmpColl.hasLldpRemTable()) {
	        processLldp(node,snmpColl,null,scanTime);
	}
        
        LogUtils.debugf(this, "storeSnmpCollection: hasIpNetToMediaTable: %b", snmpColl.hasIpNetToMediaTable());
        if (snmpColl.hasIpNetToMediaTable()) {
            processIpNetToMediaTable(node, snmpColl, null, scanTime);
        }

        LogUtils.debugf(this, "storeSnmpCollection: hasCdpCacheTable: %b", snmpColl.hasCdpCacheTable());
        if (snmpColl.hasCdpCacheTable()) {
            processCdpCacheTable(node, snmpColl, null, scanTime);
        }

        LogUtils.debugf(this, "storeSnmpCollection: hasRouteTable: %b", snmpColl.hasRouteTable());
        if (snmpColl.hasRouteTable()) {
            processRouteTable(node, snmpColl, null, scanTime);
        }

        LogUtils.debugf(this, "storeSnmpCollection: hasVlanTable: %b", snmpColl.hasVlanTable());
        if (snmpColl.hasVlanTable()) {
            processVlanTable(node, snmpColl, null, scanTime);
        }

        for (final OnmsVlan vlan : snmpColl.getSnmpVlanCollections().keySet()) {
            LogUtils.debugf(this, "storeSnmpCollection: parsing VLAN %s/%s", vlan.getVlanId(), vlan.getVlanName());

            final SnmpVlanCollection snmpVlanColl = snmpColl.getSnmpVlanCollections().get(vlan);

            if (snmpVlanColl.hasDot1dBase()) {
                processDot1DBase(node, snmpColl, null, null, scanTime, vlan, snmpVlanColl);
            }
        }

        markOldDataInactive(null, scanTime, node.getNodeId());
        
        return node;
	}

