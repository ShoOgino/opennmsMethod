	/**
	 * Inserts the new row into the IpRouteInterface table
	 * of the OpenNMS databasee.
	 *
	 * @param c	The connection to the database.
	 *
	 * @throws java.sql.SQLException Thrown if an error occurs
	 * 	with the connection
	 */
	private void insert(Connection c) throws SQLException {
		if (m_fromDb)
			throw new IllegalStateException(
					"The record already exists in the database");

		// first extract the next node identifier
		//
		StringBuffer names = new StringBuffer("INSERT INTO IpRouteInterface (nodeid,routeDest");
		StringBuffer values = new StringBuffer("?,?");

		values.append(",?");
		names.append(",routeMask");

		values.append(",?");
		names.append(",routeNextHop");

		values.append(",?");
		names.append(",routeifindex");

		values.append(",?");
		names.append(",routemetric1");

		values.append(",?");
		names.append(",routemetric2");

		values.append(",?");
		names.append(",routemetric3");

		values.append(",?");
		names.append(",routemetric4");

		values.append(",?");
		names.append(",routemetric5");

		values.append(",?");
		names.append(",routetype");

		values.append(",?");
		names.append(",routeproto");

		values.append(",?");
		names.append(",status");

		values.append(",?");
		names.append(",lastpolltime");

		names.append(") VALUES (").append(values).append(')');

		LogUtils.debugf(this, "IpRouteInterfaceEntry.insert: SQL insert statment = %s", names.toString());

		// create the Prepared statment and then
		// start setting the result values
		DBUtils d = new DBUtils(getClass());
		
		try {
            PreparedStatement stmt = c.prepareStatement(names.toString());
            d.watch(stmt);

            int ndx = 1;
            stmt.setInt(ndx++, m_nodeId);
            stmt.setString(ndx++, m_routedest);
        	stmt.setString(ndx++, m_routemask);
        	stmt.setString(ndx++, m_routenexthop);
        	stmt.setInt(ndx++, m_routeifindex);
        	stmt.setInt(ndx++, m_routemetric1);
        	stmt.setInt(ndx++, m_routemetric2);
        	stmt.setInt(ndx++, m_routemetric3);
        	stmt.setInt(ndx++, m_routemetric4);
        	stmt.setInt(ndx++, m_routemetric5);
        	stmt.setInt(ndx++, m_routetype);
        	stmt.setInt(ndx++, m_routeproto);
        	stmt.setString(ndx++, new String(new char[] { m_status }));
        	stmt.setTimestamp(ndx++, m_lastPollTime);
            
            // Run the insert
            //
            int rc = stmt.executeUpdate();
            LogUtils.debugf(this, "IpRouteInterfaceEntry.insert: row %d", rc);
		} finally {
		    d.cleanUp();
        }

		// clear the mask and mark as backed
		// by the database
		//
		m_fromDb = true;
		m_changed = 0;
	}

