	/**
	 * Inserts the new row into the IpRouteInterface table
	 * of the OpenNMS databasee.
	 *
	 * @param c	The connection to the database.
	 *
	 * @throws java.sql.SQLException Thrown if an error occurs
	 * 	with the connection
	 */
	private void insert(Connection c) throws SQLException {
		if (m_fromDb)
			throw new IllegalStateException(
					"The record already exists in the database");

		Category log = ThreadCategory.getInstance(getClass());

		// first extract the next node identifier
		//
		StringBuffer names = new StringBuffer(
				"INSERT INTO IpRouteInterface (nodeid,routeDest");
		StringBuffer values = new StringBuffer("?,?");

		if ((m_changed & CHANGED_MASK) == CHANGED_MASK) {
			values.append(",?");
			names.append(",routeMask");
		}

		if ((m_changed & CHANGED_NXT_HOP) == CHANGED_NXT_HOP) {
			values.append(",?");
			names.append(",routeNextHop");
		}

		if ((m_changed & CHANGED_IFINDEX) == CHANGED_IFINDEX) {
			values.append(",?");
			names.append(",routeifindex");
		}

		if ((m_changed & CHANGED_METRIC1) == CHANGED_METRIC1) {
			values.append(",?");
			names.append(",routemetric1");
		}

		if ((m_changed & CHANGED_METRIC2) == CHANGED_METRIC2) {
			values.append(",?");
			names.append(",routemetric2");
		}

		if ((m_changed & CHANGED_METRIC3) == CHANGED_METRIC3) {
			values.append(",?");
			names.append(",routemetric3");
		}

		if ((m_changed & CHANGED_METRIC4) == CHANGED_METRIC4) {
			values.append(",?");
			names.append(",routemetric4");
		}

		if ((m_changed & CHANGED_METRIC5) == CHANGED_METRIC5) {
			values.append(",?");
			names.append(",routemetric5");
		}

		if ((m_changed & CHANGED_TYPE) == CHANGED_TYPE) {
			values.append(",?");
			names.append(",routetype");
		}

		if ((m_changed & CHANGED_PROTO) == CHANGED_PROTO) {
			values.append(",?");
			names.append(",routeproto");
		}

		if ((m_changed & CHANGED_STATUS) == CHANGED_STATUS) {
			values.append(",?");
			names.append(",status");
		}

		if ((m_changed & CHANGED_POLLTIME) == CHANGED_POLLTIME) {
			values.append(",?");
			names.append(",lastpolltime");
		}

		names.append(") VALUES (").append(values).append(')');

		if (log.isDebugEnabled())
			log.debug("IpRouteInterfaceEntry.insert: SQL insert statment = " + names.toString());

		// create the Prepared statment and then
		// start setting the result values
		DBUtils d = new DBUtils(getClass());
		
		try {
            PreparedStatement stmt = c.prepareStatement(names.toString());
            d.watch(stmt);

            int ndx = 1;
            stmt.setInt(ndx++, m_nodeId);
            stmt.setString(ndx++, m_routedest);

            
            if ((m_changed & CHANGED_MASK) == CHANGED_MASK)
            	stmt.setString(ndx++, m_routemask);

            if ((m_changed & CHANGED_NXT_HOP) == CHANGED_NXT_HOP)
            	stmt.setString(ndx++, m_routenexthop);

            if ((m_changed & CHANGED_IFINDEX) == CHANGED_IFINDEX)
            	stmt.setInt(ndx++, m_routeifindex);

            if ((m_changed & CHANGED_METRIC1) == CHANGED_METRIC1)
            	stmt.setInt(ndx++, m_routemetric1);

            if ((m_changed & CHANGED_METRIC2) == CHANGED_METRIC2)
            	stmt.setInt(ndx++, m_routemetric2);

            if ((m_changed & CHANGED_METRIC3) == CHANGED_METRIC3)
            	stmt.setInt(ndx++, m_routemetric3);

            if ((m_changed & CHANGED_METRIC4) == CHANGED_METRIC4)
            	stmt.setInt(ndx++, m_routemetric4);

            if ((m_changed & CHANGED_METRIC5) == CHANGED_METRIC5)
            	stmt.setInt(ndx++, m_routemetric5);

            if ((m_changed & CHANGED_TYPE) == CHANGED_TYPE)
            	stmt.setInt(ndx++, m_routetype);

            if ((m_changed & CHANGED_PROTO) == CHANGED_PROTO)
            	stmt.setInt(ndx++, m_routeproto);

            if ((m_changed & CHANGED_STATUS) == CHANGED_STATUS)
            	stmt.setString(ndx++, new String(new char[] { m_status }));

            if ((m_changed & CHANGED_POLLTIME) == CHANGED_POLLTIME) {
            	stmt.setTimestamp(ndx++, m_lastPollTime);
            }
            
            // Run the insert
            //
            int rc = stmt.executeUpdate();
            if (log.isDebugEnabled())
            	log.debug("IpRouteInterfaceEntry.insert: row " + rc);
		} finally {
		    d.cleanUp();
        }

		// clear the mask and mark as backed
		// by the database
		//
		m_fromDb = true;
		m_changed = 0;
	}

