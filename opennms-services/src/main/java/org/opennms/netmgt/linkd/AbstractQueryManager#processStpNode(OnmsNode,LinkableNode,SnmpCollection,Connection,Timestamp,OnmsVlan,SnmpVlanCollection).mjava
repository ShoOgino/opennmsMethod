    protected void processStpNode(final OnmsNode onmsNode,final LinkableNode node, final SnmpCollection snmpcoll, final Connection dbConn, final Timestamp scanTime, final OnmsVlan vlan, final SnmpVlanCollection snmpVlanColl) throws SQLException {
        LogUtils.debugf(this, "processStpNode: Starting stpnode processing for Vlan: %s", vlan.getVlanName());

        final Dot1dBaseGroup dod1db = snmpVlanColl.getDot1dBase();
        final String baseBridgeAddress = dod1db.getBridgeAddress();

        LogUtils.debugf(this, "processStpNode: processing Dot1dBaseGroup in stpnode");
        final OnmsStpNode stpNode = new OnmsStpNode(onmsNode, vlan.getVlanId());
        stpNode.setLastPollTime(scanTime);
        stpNode.setStatus(STATUS_ACTIVE);
        stpNode.setBaseBridgeAddress(baseBridgeAddress);
        LogUtils.debugf(this, "processStpNode: baseBridgeAddress = %s", baseBridgeAddress);
        stpNode.setBaseNumPorts(dod1db.getNumberOfPorts());
        stpNode.setBaseType(dod1db.getBridgeType());
        stpNode.setBaseVlanName(vlan.getVlanName());

        if (snmpVlanColl.hasDot1dStp()) {
            LogUtils.debugf(this, "processStpNode: processing Dot1dStpGroup in stpnode");

            final Dot1dStpGroup dod1stp = snmpVlanColl.getDot1dStp();

            stpNode.setStpProtocolSpecification(dod1stp.getStpProtocolSpecification());
            stpNode.setStpPriority(dod1stp.getStpPriority());
            stpNode.setStpRootCost(dod1stp.getStpRootCost());
            stpNode.setStpRootPort(dod1stp.getStpRootPort());

            String stpDesignatedRoot = dod1stp.getStpDesignatedRoot();

            if (stpDesignatedRoot == null || stpDesignatedRoot == "0000000000000000") {
                LogUtils.debugf(this, "store: Dot1dStpGroup found stpDesignatedRoot " + stpDesignatedRoot + ", not adding to Linkable node");
                stpDesignatedRoot = "0000000000000000";
            } else {
                if (stpNode.getBaseVlan() != null) {
                    node.setVlanStpRoot(vlan.getVlanId().toString(), stpDesignatedRoot);
                }
            }
            stpNode.setStpDesignatedRoot(stpDesignatedRoot);
            LogUtils.debugf(this, "processStpNode: stpDesignatedRoot = %s", stpDesignatedRoot);

        }
        // store object in database
        if (snmpcoll.getSaveStpNodeTable()) {
            LogUtils.debugf(this, "processStpNode: saving %s in stpnode table", stpNode.toString());
            saveStpNode(dbConn, stpNode);
        }
        if (vlan.getVlanId() != null) {
            LogUtils.debugf(this, "processStpNode: Found Bridge Identifier %s for Vlan %d.", baseBridgeAddress, vlan.getVlanId());
            node.addBridgeIdentifier(baseBridgeAddress, Integer.toString(vlan.getVlanId()));
        }


    }

