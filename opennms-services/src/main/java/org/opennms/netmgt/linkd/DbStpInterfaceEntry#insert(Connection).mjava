	/**
	 * Inserts the new row into the StpInterface table of the OpenNMS database.
	 * 
	 * @param c
	 *            The connection to the database.
	 * 
	 * @throws java.sql.SQLException
	 *             Thrown if an error occurs with the connection
	 */
	private void insert(Connection c) throws SQLException {
		if (m_fromDb)
			throw new IllegalStateException("The STP interface record already exists in the database");

		// first extract the next node identifier
		//
		StringBuffer names = new StringBuffer("INSERT INTO StpInterface (nodeid,bridgeport,stpvlan");
		StringBuffer values = new StringBuffer("?,?,?");

		values.append(",?");
		names.append(",ifindex");

		values.append(",?");
		names.append(",stpportstate");

		values.append(",?");
		names.append(",stpportpathcost");

		values.append(",?");
		names.append(",stpportdesignatedroot");

		values.append(",?");
		names.append(",stpportdesignatedcost");

		values.append(",?");
		names.append(",stpportdesignatedbridge");

		values.append(",?");
		names.append(",stpportdesignatedport");

		values.append(",?");
		names.append(",status");

		values.append(",?");
		names.append(",lastpolltime");

		names.append(") VALUES (").append(values).append(')');

		LogUtils.debugf(this, "StpInterfaceEntry.insert: SQL insert statment = %s", names.toString());


		DBUtils d = new DBUtils(getClass());

		try {
            PreparedStatement stmt = c.prepareStatement(names.toString());
            d.watch(stmt);

            int ndx = 1;
            stmt.setInt(ndx++, m_nodeId);
            stmt.setInt(ndx++, m_bridgeport);
            stmt.setInt(ndx++, m_stpportvlan);
        	stmt.setInt(ndx++, m_ifindex);
        	stmt.setInt(ndx++, m_stpportstate);
        	stmt.setInt(ndx++, m_stpportpathcost);
        	stmt.setString(ndx++, m_stpportdesignatedroot);
        	stmt.setInt(ndx++, m_stpportdesignatedcost);
        	stmt.setString(ndx++, m_stpportdesignatedbridge);
        	stmt.setString(ndx++, m_stpportdesignatedport);
        	stmt.setString(ndx++, new String(new char[] { m_status }));
        	stmt.setTimestamp(ndx++, m_lastPollTime);

            // Run the insert
            //
            int rc = stmt.executeUpdate();
            LogUtils.debugf(this, "StpInterfaceEntry.insert: row %d", rc);
		} finally {
		    d.cleanUp();
        }

		// clear the mask and mark as backed
		// by the database
		//
		m_fromDb = true;
		m_changed = 0;
	}

