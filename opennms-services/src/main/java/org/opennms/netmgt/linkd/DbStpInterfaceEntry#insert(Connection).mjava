	/**
	 * Inserts the new row into the StpInterface table of the OpenNMS database.
	 * 
	 * @param c
	 *            The connection to the database.
	 * 
	 * @throws java.sql.SQLException
	 *             Thrown if an error occurs with the connection
	 */
	private void insert(Connection c) throws SQLException {
		if (m_fromDb)
			throw new IllegalStateException("The record already exists in the database");

		Category log = ThreadCategory.getInstance(getClass());

		// first extract the next node identifier
		//
		StringBuffer names = new StringBuffer(
				"INSERT INTO StpInterface (nodeid,bridgeport,stpvlan");
		StringBuffer values = new StringBuffer("?,?,?");

		if ((m_changed & CHANGED_IFINDEX) == CHANGED_IFINDEX) {
			values.append(",?");
			names.append(",ifindex");
		}

		if ((m_changed & CHANGED_STP_PORT_STATE) == CHANGED_STP_PORT_STATE) {
			values.append(",?");
			names.append(",stpportstate");
		}

		if ((m_changed & CHANGED_STP_PORT_PATH_COST) == CHANGED_STP_PORT_PATH_COST) {
			values.append(",?");
			names.append(",stpportpathcost");
		}

		if ((m_changed & CHANGED_STP_PORT_DES_ROOT) == CHANGED_STP_PORT_DES_ROOT) {
			values.append(",?");
			names.append(",stpportdesignatedroot");
		}

		if ((m_changed & CHANGED_STP_PORT_DES_COST) == CHANGED_STP_PORT_DES_COST) {
			values.append(",?");
			names.append(",stpportdesignatedcost");
		}

		if ((m_changed & CHANGED_STP_PORT_DES_BRIDGE) == CHANGED_STP_PORT_DES_BRIDGE) {
			values.append(",?");
			names.append(",stpportdesignatedbridge");
		}

		if ((m_changed & CHANGED_STP_PORT_DES_PORT) == CHANGED_STP_PORT_DES_PORT) {
			values.append(",?");
			names.append(",stpportdesignatedport");
		}

		if ((m_changed & CHANGED_STATUS) == CHANGED_STATUS) {
			values.append(",?");
			names.append(",status");
		}

		if ((m_changed & CHANGED_POLLTIME) == CHANGED_POLLTIME) {
			values.append(",?");
			names.append(",lastpolltime");
		}

		names.append(") VALUES (").append(values).append(')');

		if (log.isDebugEnabled())
			log.debug("StpInterfaceEntry.insert: SQL insert statment = " + names.toString());


		DBUtils d = new DBUtils(getClass());

		try {
            PreparedStatement stmt = c.prepareStatement(names.toString());
            d.watch(stmt);

            int ndx = 1;
            stmt.setInt(ndx++, m_nodeId);
            stmt.setInt(ndx++, m_bridgeport);
            stmt.setInt(ndx++, m_stpportvlan);

            if ((m_changed & CHANGED_IFINDEX) == CHANGED_IFINDEX)
            	stmt.setInt(ndx++, m_ifindex);

            if ((m_changed & CHANGED_STP_PORT_STATE) == CHANGED_STP_PORT_STATE)
            	stmt.setInt(ndx++, m_stpportstate);

            if ((m_changed & CHANGED_STP_PORT_PATH_COST) == CHANGED_STP_PORT_PATH_COST)
            	stmt.setInt(ndx++, m_stpportpathcost);

            if ((m_changed & CHANGED_STP_PORT_DES_ROOT) == CHANGED_STP_PORT_DES_ROOT)
            	stmt.setString(ndx++, m_stpportdesignatedroot);

            if ((m_changed & CHANGED_STP_PORT_DES_COST) == CHANGED_STP_PORT_DES_COST)
            	stmt.setInt(ndx++, m_stpportdesignatedcost);

            if ((m_changed & CHANGED_STP_PORT_DES_BRIDGE) == CHANGED_STP_PORT_DES_BRIDGE)
            	stmt.setString(ndx++, m_stpportdesignatedbridge);

            if ((m_changed & CHANGED_STP_PORT_DES_PORT) == CHANGED_STP_PORT_DES_PORT)
            	stmt.setString(ndx++, m_stpportdesignatedport);

            if ((m_changed & CHANGED_STATUS) == CHANGED_STATUS)
            	stmt.setString(ndx++, new String(new char[] { m_status }));

            if ((m_changed & CHANGED_POLLTIME) == CHANGED_POLLTIME) {
            	stmt.setTimestamp(ndx++, m_lastPollTime);
            }

            // Run the insert
            //
            int rc = stmt.executeUpdate();
            if (log.isDebugEnabled())
            	log.debug("StpInterfaceEntry.insert: row " + rc);
		} finally {
		    d.cleanUp();
        }

		// clear the mask and mark as backed
		// by the database
		//
		m_fromDb = true;
		m_changed = 0;
	}

