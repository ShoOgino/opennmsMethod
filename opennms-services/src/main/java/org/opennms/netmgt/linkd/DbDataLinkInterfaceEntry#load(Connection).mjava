		/**
		 * Load the current interface from the database. If the interface
		 * was modified, the modifications are lost. The nodeid
		 * and ifindex must be set prior to this call.
		 *
		 * @param c	The connection used to load the data.
		 *
		 * @throws java.sql.SQLException Thrown if an error occurs
		 * 	with the connection
		 */
		private boolean load(Connection c) throws SQLException {
			if (!m_fromDb)
				throw new IllegalStateException(
						"The record does not exists in the database");

			Category log = ThreadCategory.getInstance(getClass());

			// create the Prepared statment and then
			// start setting the result values
			//
			PreparedStatement stmt = null;
			stmt = c.prepareStatement(SQL_LOAD_DATALINKINTERFACE);
			stmt.setInt(1, m_nodeId);
			stmt.setInt(2, m_ifindex);

			if (log.isDebugEnabled())
				log.debug("DataLinkInterfaceEntry.load: SQL statement "
					+ stmt.toString());

			// Run the select
			//
			ResultSet rset = stmt.executeQuery();
			if (!rset.next()) {
				rset.close();
				stmt.close();
				if (log.isDebugEnabled())
					log.debug("DataLinkInterfaceEntry.load: no result found");
				return false;
			}

			// extract the values.
			//
			int ndx = 1;

			// get the mac address
			//
			m_nodeparentid = rset.getInt(ndx++);
			if (rset.wasNull())
				m_nodeparentid = -1;

			// get the source node ifindex
			//
			m_parentifindex = rset.getInt(ndx++);
			if (rset.wasNull())
				m_ifindex = -1;

			// the entry status
			//
			String str = rset.getString(ndx++);
			if (str != null && !rset.wasNull())
				m_status = str.charAt(0);
			else
				m_status = STATUS_UNKNOWN;

			m_lastPollTime = rset.getTimestamp(ndx++);

			rset.close();
			stmt.close();

			// clear the mask and mark as backed
			// by the database
			//
			if (log.isDebugEnabled())
				log.debug("DataInterfaceEntry.load: result found");
			m_changed = 0;
			return true;
		}

