    protected void processCdpCacheTable(final LinkableNode node, final SnmpCollection snmpcoll, final Date scanTime) {
        if (LogUtils.isDebugEnabled(this)) {
            if (snmpcoll.getCdpCacheTable().size() > 0) {
                LogUtils.debugf(this, "processCdpCacheTable: Starting CDP cache table processing for %d/%s", node.getNodeId(), str(node.getSnmpPrimaryIpAddr()));
            } else {
                LogUtils.debugf(this, "processCdpCacheTable: Zero CDP cache table entries for %d/%s", node.getNodeId(), str(node.getSnmpPrimaryIpAddr()));
            }
        }

        List<CdpInterface> cdpInterfaces = new ArrayList<CdpInterface>();

        for (final CdpCacheTableEntry cdpEntry : snmpcoll.getCdpCacheTable()) {

            final int cdpIfIndex = cdpEntry.getCdpCacheIfIndex();
            if (cdpIfIndex < 0) {
                LogUtils.debugf(this, "processCdpCacheTable: ifIndex not valid: %d", cdpIfIndex);
                continue;
            }
            LogUtils.debugf(this, "processCdpCacheTable: ifIndex found: %d", cdpIfIndex);

            final String targetSysName = cdpEntry.getCdpCacheDeviceId();
            LogUtils.debugf(this, "processCdpCacheTable: targetSysName found: %s", targetSysName);

            final InetAddress cdpTargetIpAddr = cdpEntry.getCdpCacheIpv4Address();
            LogUtils.debugf(this, "processCdpCacheTable: cdp cache ipa address found: %s", str(cdpTargetIpAddr));

            final int cdpAddrType = cdpEntry.getCdpCacheAddressType();

            Collection<Integer> targetCdpNodeIds = new ArrayList<Integer>();
            if (cdpAddrType != CdpInterface.CDP_ADDRESS_TYPE_IP_ADDRESS) {
                LogUtils.warnf(this, "processCdpCacheTable: CDP address type not ip: %d", cdpAddrType);
            } else {
                if (cdpTargetIpAddr == null || cdpTargetIpAddr.isLoopbackAddress() || str(cdpTargetIpAddr).equals("0.0.0.0")) {
                    LogUtils.debugf(this, "processCdpCacheTable: IP address is not valid: %s", str(cdpTargetIpAddr));
                } else {
                    targetCdpNodeIds = getNodeidFromIpAndSysName(cdpTargetIpAddr,targetSysName);
                    if (targetCdpNodeIds.isEmpty()) {
                		for (Integer matchingtargetnodeid : getNodeidFromIp(cdpTargetIpAddr)) {
                			String targetNodeSysName = getNodeDao().get(matchingtargetnodeid).getSysName();
                			if (targetNodeSysName == null || targetNodeSysName.equals(""))
                				 targetCdpNodeIds.add(matchingtargetnodeid);
                		}
                    }
                    if (targetCdpNodeIds.isEmpty()) {
                        LogUtils.infof(this, "processCdpCacheTable: No Target node IDs found: interface %s not added to linkable SNMP node. Skipping.", str(cdpTargetIpAddr));
                        sendNewSuspectEvent(cdpTargetIpAddr, snmpcoll.getTarget(), snmpcoll.getPackageName());
                        continue;
                    }
                }
            }

            if (targetCdpNodeIds.isEmpty()) {
                LogUtils.debugf(this, "processCdpCacheTable: finding nodeids using CDP deviceid(sysname): %d", targetSysName);
                targetCdpNodeIds = getNodeIdsFromSysName(targetSysName);
            }

            for (final Integer targetCdpNodeId: targetCdpNodeIds) {
	            LogUtils.infof(this, "processCdpCacheTable: Target node ID found: %d.", targetCdpNodeId);
	
	            final String cdpTargetDevicePort = cdpEntry.getCdpCacheDevicePort();
	
	            if (cdpTargetDevicePort == null) {
	                LogUtils.warnf(this, "processCdpCacheTable: Target device port not found. Skipping.");
	                continue;
	            }
	
	            LogUtils.debugf(this, "processCdpCacheTable: Target device port name found: %s", cdpTargetDevicePort);
	
	            final int cdpTargetIfindex = getIfIndexByName(targetCdpNodeId, cdpTargetDevicePort);
	
	            if (cdpTargetIfindex == -1) {
	                LogUtils.infof(this, "processCdpCacheTable: No valid target ifIndex found but interface added to linkable SNMP node using ifindex  = -1.");
	            }
	            
	            final CdpInterface cdpIface = new CdpInterface(cdpIfIndex);
	            cdpIface.setCdpTargetNodeId(targetCdpNodeId);
	            cdpIface.setCdpTargetIfIndex(cdpTargetIfindex);
	            
	            if (cdpTargetIpAddr == null || cdpAddrType != CdpInterface.CDP_ADDRESS_TYPE_IP_ADDRESS) {
	                cdpIface.setCdpTargetIpAddr(getIpInterfaceDao().findPrimaryInterfaceByNodeId(targetCdpNodeId).getIpAddress());
	            } else {
	                cdpIface.setCdpTargetIpAddr(cdpTargetIpAddr);               
	            }
	            
	            cdpIface.setCdpTargetDeviceId(cdpEntry.getCdpCacheDeviceId());

	            LogUtils.debugf(this, "processCdpCacheTable: Adding interface to linkable SNMP node: %s", cdpIface);

	            cdpInterfaces.add(cdpIface);
            }
        }
        node.setCdpInterfaces(cdpInterfaces);
    }

