	/**
	 * <p>onInit</p>
	 */
	protected void onInit() {

        Assert.state(m_queryMgr != null, "must set the queryManager property");
        Assert.state(m_linkdConfig != null, "must set the linkdConfig property");
        Assert.state(m_scheduler != null, "must set the scheduler property");
        Assert.state(m_eventForwarder != null, "must set the eventForwarder property");

        // FIXME: circular dependency
        m_queryMgr.setLinkd(this);

		m_activepackages = new ArrayList<String>();
		
		// initialize the ipaddrsentevents
		m_newSuspectEventsIpAddr = new TreeSet<InetAddress>(new InetAddressComparator());
		m_newSuspectEventsIpAddr.add(addr("127.0.0.1"));
		m_newSuspectEventsIpAddr.add(addr("0.0.0.0"));

		try {
			m_nodes = m_queryMgr.getSnmpNodeList();
			m_queryMgr.updateDeletedNodes();
		} catch (SQLException e) {
		    LogUtils.errorf(this, e, "SQL exception executing on database");
	        throw new UndeclaredThrowableException(e);
		}

		Assert.notNull(m_nodes);
		scheduleCollection();
		
		LogUtils.infof(this, "init: LINKD CONFIGURATION INITIALIZED");
	}

