	/**
	 * Load the current interface from the database. If the interface
	 * was modified, the modifications are lost. The nodeid
	 * and ip address must be set prior to this call.
	 *
	 * @param c	The connection used to load the data.
	 *
	 * @throws java.sql.SQLException Thrown if an error occurs
	 * 	with the connection
	 */
	private boolean load(Connection c) throws SQLException {
		if (!m_fromDb)
			throw new IllegalStateException(
					"The record does not exists in the database");

		Category log = ThreadCategory.getInstance(getClass());

		// create the Prepared statment and then
		// start setting the result values
		//
		PreparedStatement stmt = null;
		stmt = c.prepareStatement(SQL_LOAD_ATINTERFACE);
		stmt.setInt(1, m_nodeId);
		stmt.setString(2, m_ipaddr);

		// Run the select
		//
		ResultSet rset = stmt.executeQuery();
		if (!rset.next()) {
			rset.close();
			stmt.close();
			if (log.isDebugEnabled())
				log.debug("AtInterfaceEntry.load: no result found");
			return false;
		}

		// extract the values.
		//
		int ndx = 1;

		// get the mac address
		//
		m_physaddr = rset.getString(ndx++);
		if (rset.wasNull())
			m_physaddr = null;

		// get the source node id
		//
		m_sourcenodeid = rset.getInt(ndx++);
		if (rset.wasNull())
			m_sourcenodeid = -1;

		// get the source node ifindex
		//
		m_ifindex = rset.getInt(ndx++);
		if (rset.wasNull())
			m_ifindex = -1;

		// the entry status
		//
		String str = rset.getString(ndx++);
		if (str != null && !rset.wasNull())
			m_status = str.charAt(0);
		else
			m_status = STATUS_UNKNOWN;

		m_lastPollTime = rset.getTimestamp(ndx++);

		rset.close();
		stmt.close();

		// clear the mask and mark as backed
		// by the database
		//
		m_changed = 0;
		if (log.isDebugEnabled())
			log.debug("AtInterfaceEntry.load: result found");
		return true;
	}

