	public synchronized ReadyRunnable getReadyRunnable(ReadyRunnable runnable,
			long interval) {

		if (log().isDebugEnabled()) {
			log().debug("getReadyRunnable: Retriving "
					+ runnable.getInfo() + " at interval " + interval);
		}

		if (!m_queues.containsKey(interval)) {
				log().warn("getReadyRunnable: interval queue did not exist, exit");
			return null;
		}

		ReadyRunnable rr = null;
		synchronized (m_queues) {
			PeekableFifoQueue<ReadyRunnable> in = m_queues.get(interval);
			if (in.isEmpty()) {
					log()
							.warn("getReadyRunnable: queue is Empty");
				return null;
			}
			
			int maxLoops = in.size();
			ReadyRunnable readyRun = null;
			boolean first = true;
			do {
				try {
					readyRun = in.remove();
					if (in.size() == maxLoops && first) {
						maxLoops++;
					}
					first = false;
					if (readyRun != null
							&& readyRun.equals(runnable)) {
						if (log().isDebugEnabled()) {
							log()
									.debug("getReadyRunnable: found ready runnable "
											+ readyRun);
						}
						rr = readyRun;
					}
					in.add(readyRun);
				} catch (InterruptedException ie) {
					if (log().isInfoEnabled())
						log().info(
								"getReadyRunnable: failed to get instance "
										+ readyRun.getInfo()
										+ " from scheduler", ie);
					Thread.currentThread().interrupt();
				} catch (FifoQueueException ex) {
					if (log().isInfoEnabled())
						log().info(
								"getReadyRunnable: failed to get instance "
										+ readyRun.getInfo()
										+ " from scheduler", ex);
					throw new UndeclaredThrowableException(ex);
				} 

			} while (--maxLoops > 0) ;
		}

		if (rr == null) {
		if (log().isInfoEnabled())
			log().info("getReadyRunnable: instance "
					+ runnable.getInfo() + " not found on scheduler");
		}
		return rr;
	}

