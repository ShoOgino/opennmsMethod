	/** 
	 * Updates an existing record in the OpenNMS AtInterface table.
	 * 
	 * @param c	The connection used for the update.
	 *
	 * @throws java.sql.SQLException Thrown if an error occurs
	 * 	with the connection
	 */
	private void update(Connection c) throws SQLException {
		if (!m_fromDb)
			throw new IllegalStateException(
					"The record does not exists in the database");

		Category log = ThreadCategory.getInstance(getClass());

		// first extract the next node identifier
		//
		StringBuffer sqlText = new StringBuffer("UPDATE AtInterface SET ");

		char comma = ' ';

		if ((m_changed & CHANGED_PHYSADDR) == CHANGED_PHYSADDR) {
			sqlText.append(comma).append("atphysaddr = ?");
			comma = ',';
		}

		if ((m_changed & CHANGED_SOURCE) == CHANGED_SOURCE) {
			sqlText.append(comma).append("sourcenodeid = ?");
			comma = ',';
		}

		if ((m_changed & CHANGED_IFINDEX) == CHANGED_IFINDEX) {
			sqlText.append(comma).append("ifindex = ?");
			comma = ',';
		}

		if ((m_changed & CHANGED_STATUS) == CHANGED_STATUS) {
			sqlText.append(comma).append("status = ?");
			comma = ',';
		}

		if ((m_changed & CHANGED_POLLTIME) == CHANGED_POLLTIME) {
			sqlText.append(comma).append("lastpolltime = ?");
			comma = ',';
		}

		sqlText.append(" WHERE nodeid = ? AND ipaddr = ? ");

		// create the Prepared statment and then
		// start setting the result values
		//
		PreparedStatement stmt = c.prepareStatement(sqlText.toString());
		sqlText = null;

		int ndx = 1;

		if ((m_changed & CHANGED_PHYSADDR) == CHANGED_PHYSADDR)
			stmt.setString(ndx++, m_physaddr);

		if ((m_changed & CHANGED_SOURCE) == CHANGED_SOURCE)
			stmt.setInt(ndx++, m_sourcenodeid);

		if ((m_changed & CHANGED_IFINDEX) == CHANGED_IFINDEX)
			stmt.setInt(ndx++, m_ifindex);

		if ((m_changed & CHANGED_STATUS) == CHANGED_STATUS)
			stmt.setString(ndx++, new String(new char[] { m_status }));

		if ((m_changed & CHANGED_POLLTIME) == CHANGED_POLLTIME) {
			stmt.setTimestamp(ndx++, m_lastPollTime);
		}

		stmt.setInt(ndx++, m_nodeId);
		stmt.setString(ndx++, m_ipaddr);
		if (log.isDebugEnabled())
			log.debug("AtInterfaceEntry.update: SQL statement "
				+ stmt.toString());

		// Run the insert
		//
		int rc = stmt.executeUpdate();
		if (log.isDebugEnabled())
			log.debug("AtInterfaceEntry.update: row " + rc);
		stmt.close();

		// clear the mask and mark as backed
		// by the database
		//
		m_changed = 0;
	}

