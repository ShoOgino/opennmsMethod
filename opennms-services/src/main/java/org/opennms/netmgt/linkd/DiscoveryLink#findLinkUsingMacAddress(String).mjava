	private void findLinkUsingMacAddress(String mac) {

		if(log().isDebugEnabled())
			log().debug("findLinkUsingMacAddress: searching bridge port on bridge for not already found mac: " + mac);
		Iterator<LinkableNode> ite = bridgeNodes.values().iterator();
		int count = 0;
		int parentifindex = -1;
		int nodeparentid = -1;

		while (ite.hasNext() && count <=1) {
			LinkableNode node = ite.next();
			if(log().isDebugEnabled())
				log().debug("findLinkUsingMacAddress: searching mac on bridge: " + node.getNodeId() + "/" + node.getSnmpPrimaryIpAddr());
			String className = null;
			boolean useVlan = Linkd.getInstance().getLinkdConfig().enableVlanDiscovery();
			if (Linkd.getInstance().getLinkdConfig().getPackage(getPackageName()).hasEnableVlanDiscovery()) 
				useVlan = Linkd.getInstance().getLinkdConfig().getPackage(getPackageName()).getEnableVlanDiscovery();
			if (useVlan && Linkd.getInstance().getLinkdConfig().hasClassName(node.getSysoid())) {
				className = Linkd.getInstance().getLinkdConfig().getClassName(node.getSysoid());
			}
			
			SnmpAgentConfig agentConfig = null;

			try {
				agentConfig = SnmpPeerFactory.getInstance().getAgentConfig(InetAddress.getByName(node.getSnmpPrimaryIpAddr()));
			} catch (UnknownHostException e) {
				log().error(
						"findLinkUsingMacAddress: Failed to load snmp parameter from snmp configuration file " +
				e);
				return;
			}

			String community = agentConfig.getReadCommunity();

			if (className != null && useVlan && (className.equals("org.opennms.netmgt.linkd.snmp.CiscoVlanTable") 
					|| className.equals("org.opennms.netmgt.linkd.snmp.IntelVlanTable"))){
				Iterator<Vlan> vlan_ite = node.getVlans().iterator();
				while (vlan_ite.hasNext()) {
					Vlan vlan = vlan_ite.next();
					if (vlan.getVlanStatus() != VlanCollectorEntry.VLAN_STATUS_OPERATIONAL || vlan.getVlanType() != VlanCollectorEntry.VLAN_TYPE_ETHERNET) {
						if (log().isDebugEnabled()) log().debug("findLinkUsingMacAddress: skipping vlan: " + vlan.getVlanName());
						continue;
					}
					agentConfig.setReadCommunity(community+"@"+vlan.getVlanIndex());
					if(log().isDebugEnabled())
						log().debug("findLinkUsingMacAddress: searching iterating on found vlan: " + node.getSnmpPrimaryIpAddr() + "@" + vlan.getVlanName());
					int bridgeport = getMacAddressBridgePort(agentConfig, node, mac);
					if (bridgeport > 0) {
						parentifindex = node.getIfindex(bridgeport);
						nodeparentid = node.getNodeId();
						count++;
					}
					agentConfig.setReadCommunity(community);
				}
			} else {
				int bridgeport = getMacAddressBridgePort(agentConfig, node, mac);
				if (bridgeport > 0) {
					parentifindex = node.getIfindex(bridgeport);
					nodeparentid = node.getNodeId();
					count++;
				}
			}
		} //end while loop
		
		if (count == 1) {
			if(log().isInfoEnabled())
				log().info("findLinkUsingMacAddress: mac found on node/ifindex: " + nodeparentid + "/" + parentifindex);
			AtInterface at = macToAtinterface.get(mac).get(0);
			if (at == null) return;
			NodeToNodeLink n2nlink = new NodeToNodeLink(at.getNodeId(),at.getIfindex());
			n2nlink.setNodeparentid(nodeparentid);
			n2nlink.setParentifindex(parentifindex);
			addNodetoNodeLink(n2nlink);
		} else {
			if(log().isInfoEnabled())
				log().info("findLinkUsingMacAddress: no sufficient information to guess a link: found item(s)/mac : " + count + "/" + mac);
			
		}
	} //end subroutine

