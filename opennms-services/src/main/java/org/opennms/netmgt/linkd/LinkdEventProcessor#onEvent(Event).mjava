    /**
     * This method is invoked by the EventIpcManager when a new event is
     * available for processing. Currently only text based messages are
     * processed by this callback. Each message is examined for its Universal
     * Event Identifier and the appropriate action is taking based on each UEI.
     * 
     * @param event
     *            The event.
     * 
     */
    public void onEvent(Event event) {
        Category log = ThreadCategory.getInstance(getClass());

        try {

            String eventUei = event.getUei();
            String eventService = event.getService();
            String eventHost = event.getHost();
            if (eventUei == null) {
                return;
            }

            if (log.isDebugEnabled()) {
                log.debug("onEvent: Received event " + eventUei + "; from host: " + eventHost + "; service id " + eventService);
            }

            notifyEventReceived(event);

            if (eventUei.equals(EventConstants.NODE_GAINED_SERVICE_EVENT_UEI) && eventService.equals("SNMP")) {
                handleNodeGainedService(event);
            } else if (event.getUei().equals(EventConstants.NODE_LOST_SERVICE_EVENT_UEI)&& eventService.equals("SNMP")) {
                handleNodeLostService(event);
            } else if (event.getUei().equals(EventConstants.NODE_REGAINED_SERVICE_EVENT_UEI)&& eventService.equals("SNMP")) {
                handleRegainedService(event);
            } else if (eventUei.equals(EventConstants.NODE_DELETED_EVENT_UEI)) {
                handleNodeDeleted(event);
            } 
            notifyEventSuccess(event);
        } catch (InsufficientInformationException ex) {
            log.info("onEvent: insufficient information in event, discarding it: " + ex.getMessage());
            notifyEventError(event, "Invalid parameters: ", ex);
        } catch (UnknownHostException ex) {
            log.error("onEvent: operation failed for event: " + event.getUei() + ", exception: " + ex.getMessage());
            notifyEventError(event, "processing failed: ", ex);
        } catch (Throwable t) {
            log.error("onEvent: operation failed for event: " + event.getUei() + ", exception: " + t.getMessage());
        }
    } // end onEvent()

