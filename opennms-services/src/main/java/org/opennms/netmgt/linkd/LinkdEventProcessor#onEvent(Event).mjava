    /**
     * This method is invoked by the EventIpcManager when a new event is
     * available for processing. Currently only text based messages are
     * processed by this callback. Each message is examined for its Universal
     * Event Identifier and the appropriate action is taking based on each UEI.
     * 
     * @param event
     *            The event.
     * 
     */
    public void onEvent(Event event) {
        ThreadCategory log = ThreadCategory.getInstance(getClass());

        try {
        	int eventid = event.getDbid();
            String eventUei = event.getUei();
            if (eventUei == null) {
                return;
            }

            if (log.isInfoEnabled()) {
                log.info("onEvent: Received event " + eventid + " UEI "+ eventUei);
            }

            if (eventUei.equals(EventConstants.NODE_DELETED_EVENT_UEI)) {
            	if (log.isInfoEnabled()) {
                    log.info("onEvent: calling handleNodeDeleted for event " + eventid);
                }
                handleNodeDeleted(event);
            } else if (eventUei.equals(EventConstants.INTERFACE_DELETED_EVENT_UEI)) {
                if (log.isInfoEnabled()) {
                    log.info("onEvent: calling handleInterfaceDeleted for event " + eventid);
                }
                handleInterfaceDeleted(event);
            } else if (event.getUei().equals(EventConstants.NODE_LOST_SERVICE_EVENT_UEI)&& event.getService().equals("SNMP")) {
                if (log.isInfoEnabled()) {
                    log.info("onEvent: calling handleNodeLostService for event " + eventid);
                }
                handleNodeLostService(event);
            } else if (event.getUei().equals(EventConstants.NODE_REGAINED_SERVICE_EVENT_UEI)&& event.getService().equals("SNMP")) {
            	if (log.isInfoEnabled()) {
                    log.info("onEvent: calling handleRegainedService for event " + eventid);
                }
            	handleRegainedService(event);
            } else if (eventUei.equals(EventConstants.NODE_GAINED_SERVICE_EVENT_UEI) && event.getService().equals("SNMP")) {
                if (log.isInfoEnabled()) {
                    log.info("onEvent: calling handleNodeGainedService for event " + eventid);
                }
                handleNodeGainedService(event);
            } 
        } catch (InsufficientInformationException ex) {
            log.info("onEvent: insufficient information in event, discarding it: " + ex.getMessage());
        } catch (Throwable t) {
            log.error("onEvent: operation failed for event: " + event.getUei() + ", exception: " + t.getMessage(),t);
        }
    } // end onEvent()

