    /**
     * {@inheritDoc}
     *
     * This method is invoked by the EventIpcManager when a new event is
     * available for processing. Currently only text based messages are
     * processed by this callback. Each message is examined for its Universal
     * Event Identifier and the appropriate action is taking based on each UEI.
     */
    public void onEvent(Event event) {
        try {
        	int eventid = event.getDbid();
            String eventUei = event.getUei();
            if (eventUei == null) {
                return;
            }

            LogUtils.infof(this, "onEvent: Received event %s UEI %s", eventid, eventUei);

            if (eventUei.equals(EventConstants.NODE_DELETED_EVENT_UEI)) {
                LogUtils.infof(this, "onEvent: calling handleNodeDeleted for event %s", eventid);
                handleNodeDeleted(event);
            } else if (eventUei.equals(EventConstants.INTERFACE_DELETED_EVENT_UEI)) {
                LogUtils.infof(this, "onEvent: calling handleInterfaceDeleted for event %s", eventid);
                handleInterfaceDeleted(event);
            } else if (event.getUei().equals(EventConstants.NODE_LOST_SERVICE_EVENT_UEI)&& event.getService().equals("SNMP")) {
                LogUtils.infof(this, "onEvent: calling handleNodeLostService for event %s", eventid);
                handleNodeLostService(event);
            } else if (event.getUei().equals(EventConstants.NODE_REGAINED_SERVICE_EVENT_UEI)&& event.getService().equals("SNMP")) {
                LogUtils.infof(this, "onEvent: calling handleRegainedService for event %s", eventid);
            	handleRegainedService(event);
            } else if (eventUei.equals(EventConstants.NODE_GAINED_SERVICE_EVENT_UEI) && event.getService().equals("SNMP")) {
                LogUtils.infof(this, "onEvent: calling handleNodeGainedService for event %s", eventid);
                handleNodeGainedService(event);
            } 
        } catch (InsufficientInformationException ex) {
            LogUtils.infof(this, ex, "onEvent: insufficient information in event, discarding it.");
        } catch (Throwable t) {
            LogUtils.warnf(this, t, "onEvent: operation failed for event: %s, discarding it.", event.getUei());
        }
    } // end onEvent()

