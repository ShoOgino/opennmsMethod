	/**
	 * <p>
	 * Performs the collection for the targeted internet address. The success or
	 * failure of the collection should be tested via the <code>failed</code>
	 * method.
	 * </p>
	 *
	 * <p>
	 * No synchronization is performed, so if this is used in a separate thread
	 * context synchornization must be added.
	 * </p>
	 */
        @Override
	public void run() {
			m_dot1dBase = new Dot1dBaseGroup(m_address);
			m_dot1dBaseTable = new Dot1dBasePortTable(m_address);
			m_dot1dStp = new Dot1dStpGroup(m_address);
			m_dot1dStpTable = new Dot1dStpPortTable(m_address);
			m_dot1dTpFdbTable = new Dot1dTpFdbTable(m_address);
			
			SnmpWalker walker = null;
			
			if (m_collectBridge && m_collectStp) {
		        walker = SnmpUtils.createWalker(m_agentConfig, "dot1dBase/dot1dBaseTable/dot1dStp/dot1dStpTable/dot1dTpFdbTable ", 
		        			new CollectionTracker[] { m_dot1dBase, m_dot1dBaseTable, m_dot1dStp, m_dot1dStpTable, m_dot1dTpFdbTable});
			} else if(m_collectBridge) {
		        walker = 
		        	SnmpUtils.createWalker(m_agentConfig, "dot1dTpFdbTable ", 
		        			new CollectionTracker[] {m_dot1dTpFdbTable});
			} else if(m_collectStp) {
		        walker = 
		        	SnmpUtils.createWalker(m_agentConfig, "dot1dBase/dot1dStp/dot1dBaseTable/dot1dStpTable ", 
		        			new CollectionTracker[] { m_dot1dBase, m_dot1dStp, m_dot1dBaseTable, m_dot1dStpTable});
			} else {
			    LogUtils.infof(this, "run: no info to collect return");
				return;
			}

			
	        walker.start();

	        try {
	            walker.waitFor();
	        } catch (final InterruptedException e) {
				m_dot1dBase = null;
				m_dot1dBaseTable = null;
				m_dot1dStp = null;
				m_dot1dStpTable = null;
				m_dot1dTpFdbTable = null;

				LogUtils.warnf(this, e, "SnmpVlanCollection.run: collection interrupted, exiting");
	            return;
	        }
	        


			// Log any failures
			//
			final String hostAddress = InetAddressUtils.str(m_address);
			if (!hasDot1dBase())
			    LogUtils.infof(this, "run: failed to collect Dot1dBase for %s Community: %s", hostAddress, m_agentConfig.getReadCommunity());
			if (!hasDot1dBasePortTable())
                LogUtils.infof(this, "run: failed to collect Dot1dBasePortTable for %s Community: %s", hostAddress, m_agentConfig.getReadCommunity());
			if (!hasDot1dStp())
                LogUtils.infof(this, "run: failed to collect Dot1dStp for %s Community: %s", hostAddress, m_agentConfig.getReadCommunity());
			if (!hasDot1dStpPortTable())
                LogUtils.infof(this, "run: failed to collect Dot1dStpPortTable for %s Community: %s", hostAddress, m_agentConfig.getReadCommunity());
			if (!hasDot1dTpFdbTable())
                LogUtils.infof(this, "run: failed to collect Dot1dTpFdbTable for %s Community: %s", hostAddress, m_agentConfig.getReadCommunity());
			
			//if not found macaddresses forwarding table find it in Qbridge
			//ExtremeNetwork works.....
			
			if (m_dot1dTpFdbTable.isEmpty() && m_collectBridge) {
			    LogUtils.infof(this, "run: Trying to collect QbridgeDot1dTpFdbTable for %s Community: %s", hostAddress, m_agentConfig.getReadCommunity());
				m_dot1qTpFdbTable = new QBridgeDot1dTpFdbTable(m_address);
		        walker =  SnmpUtils.createWalker(m_agentConfig, "qBridgedot1dTpFdbTable ", new CollectionTracker[] { m_dot1qTpFdbTable });
		        walker.start();

		        try {
		            walker.waitFor();
		        } catch (final InterruptedException e) {
					m_dot1qTpFdbTable = null;
					LogUtils.warnf(this, e, "SnmpVlanCollection.run: collection interrupted");
		            
		        }

		        if (!hasQBridgeDot1dTpFdbTable()) {
		            LogUtils.infof(this, "run: failed to collect QBridgeDot1dTpFdbTable for %s Community: %s", hostAddress, m_agentConfig.getReadCommunity());
		        }
			}
	}

