    /**
     * <p>
     * Performs the collection for the targeted internet address. The success
     * or failure of the collection should be tested via the
     * <code>failed</code> method.
     * </p>
     * <p>
     * No synchronization is performed, so if this is used in a separate
     * thread context synchornization must be added.
     * </p>
     */
    @Override
    public void run() {
        m_dot1dBase = new Dot1dBaseGroup(m_address);
        m_dot1dBaseTable = new Dot1dBasePortTable(m_address);
        m_dot1dStp = new Dot1dStpGroup(m_address);
        m_dot1dStpTable = new Dot1dStpPortTable(m_address);
        m_dot1dTpFdbTable = new Dot1dTpFdbTable(m_address);

        SnmpWalker walker = null;
        String walks = "";
        if (m_collectBridge && m_collectStp) {
            walks = "dot1dBase/dot1dBaseTable/dot1dStp/dot1dStpTable/dot1dTpFdbTable";
            walker = SnmpUtils.createWalker(m_agentConfig,
                                            walks,
                                            new CollectionTracker[] {
                                                    m_dot1dBase,
                                                    m_dot1dBaseTable,
                                                    m_dot1dStp,
                                                    m_dot1dStpTable,
                                                    m_dot1dTpFdbTable });
        } else if (m_collectBridge) {
            walks = "dot1dTpFdbTable";
            walker = SnmpUtils.createWalker(m_agentConfig,
                                            walks,
                                            new CollectionTracker[] { m_dot1dTpFdbTable });
        } else if (m_collectStp) {
            walks = "dot1dBase/dot1dStp/dot1dBaseTable/dot1dStpTable";
            walker = SnmpUtils.createWalker(m_agentConfig,
                                            walks,
                                            new CollectionTracker[] {
                                                    m_dot1dBase, m_dot1dStp,
                                                    m_dot1dBaseTable,
                                                    m_dot1dStpTable });
        } else {
            LOG.info("run: no info to collect return");
            return;
        }

        LOG.debug("run: package {}: Collecting {} from {}",
                  getPackageName(), walks,
                  str(m_agentConfig.getEffectiveAddress()));

        walker.start();

        try {
            walker.waitFor();
        } catch (final InterruptedException e) {
            m_dot1dBase = null;
            m_dot1dBaseTable = null;
            m_dot1dStp = null;
            m_dot1dStpTable = null;
            m_dot1dTpFdbTable = null;

            LOG.warn("SnmpVlanCollection.run: collection interrupted, exiting",
                     e);
            return;
        }

        // Log any failures
        //
        final String hostAddress = InetAddressUtils.str(m_address);
        if (!hasDot1dBase())
            LOG.info("run: failed to collect Dot1dBase for {} Community: {}",
                     hostAddress, m_agentConfig.getReadCommunity());
        if (!hasDot1dBasePortTable())
            LOG.info("run: failed to collect Dot1dBasePortTable for {} Community: {}",
                     hostAddress, m_agentConfig.getReadCommunity());
        if (!hasDot1dStp())
            LOG.info("run: failed to collect Dot1dStp for {} Community: {}",
                     hostAddress, m_agentConfig.getReadCommunity());
        if (!hasDot1dStpPortTable())
            LOG.info("run: failed to collect Dot1dStpPortTable for {} Community: {}",
                     hostAddress, m_agentConfig.getReadCommunity());
        if (!hasDot1dTpFdbTable())
            LOG.info("run: failed to collect Dot1dTpFdbTable for {} Community: {}",
                     hostAddress, m_agentConfig.getReadCommunity());

        // if not found macaddresses forwarding table find it in Qbridge
        // ExtremeNetwork works.....
        //Check in any case qbridge too!
        LOG.info("run: Trying to collect QbridgeDot1dTpFdbTable for {} Community: {}",
                 hostAddress, m_agentConfig.getReadCommunity());
        m_dot1qTpFdbTable = new QBridgeDot1dTpFdbTable(m_address);
        walker = SnmpUtils.createWalker(m_agentConfig,
                                        "qBridgedot1dTpFdbTable ",
                                        new CollectionTracker[] { m_dot1qTpFdbTable });
        walker.start();

        try {
            walker.waitFor();
        } catch (final InterruptedException e) {
            m_dot1qTpFdbTable = null;
            LOG.warn("SnmpVlanCollection.run: collection interrupted", e);

        }

        if (!hasQBridgeDot1dTpFdbTable()) {
            LOG.info("run: failed to collect QBridgeDot1dTpFdbTable for {} Community: {}",
                     hostAddress, m_agentConfig.getReadCommunity());
        }
    }

