	private void addLinks(Set<String> macs,int nodeid,int ifindex) { 
		if (macs == null || macs.isEmpty()) {
		    LogUtils.debugf(this, "addLinks: mac's list on link is empty.");
		} else {
			Iterator<String> mac_ite = macs.iterator();

			while (mac_ite.hasNext()) {
				String curMacAddress = mac_ite
						.next();
				if (m_macsParsed.contains(curMacAddress)) {
				    LogUtils.warnf(this, "addLinks: mac address "
									+ curMacAddress
									+ " just found on other bridge port! Skipping...");
					continue;
				}
				
				if (macsExcluded.contains(curMacAddress)) {
				    LogUtils.warnf(this, "addLinks: mac address "
									+ curMacAddress
									+ " is excluded from discovery package! Skipping...");
					continue;
				}
				
				if (m_macToAtinterface.containsKey(curMacAddress)) {
					List<OnmsAtInterface> ats = m_macToAtinterface.get(curMacAddress);
					Iterator<OnmsAtInterface> ite = ats.iterator();
					while (ite.hasNext()) {
						OnmsAtInterface at = ite.next();
						NodeToNodeLink lNode = new NodeToNodeLink(at.getNode().getId(),at.getIfIndex());
						lNode.setNodeparentid(nodeid);
						lNode.setParentifindex(ifindex);
						addNodetoNodeLink(lNode);
					}
				} else {
				    LogUtils.debugf(this, "addLinks: not find nodeid for ethernet mac address %s found on node/ifindex %d/%d", curMacAddress, nodeid, ifindex);
					MacToNodeLink lMac = new MacToNodeLink(curMacAddress);
					lMac.setNodeparentid(nodeid);
					lMac.setParentifindex(ifindex);
					m_maclinks.add(lMac);
				}
				m_macsParsed.add(curMacAddress);
			}
		}
	}

