    private void addLinks(Set<String> macs, int nodeid, int ifindex) {
        if (macs == null || macs.isEmpty()) {
            LogUtils.debugf(this,
                    "addLinks: MAC address list on link is empty.");
        } else {
            for (String curMacAddress : macs) {
                if (m_macsParsed.contains(curMacAddress)) {
                    LogUtils.warnf(this, "addLinks: MAC address "
                            + curMacAddress
                            + " just found on other bridge port! Skipping...");
                    continue;
                }

                if (macsExcluded.contains(curMacAddress)) {
                    LogUtils.warnf(this,
                                   "addLinks: MAC address "
                                           + curMacAddress
                                           + " is excluded from discovery package! Skipping...");
                    continue;
                }
                final List<AtInterface> ats = m_linkd.getAtInterfaces(getPackageName(), curMacAddress);
                if (!ats.isEmpty()) {
                    for (final AtInterface at : ats) {
                        final NodeToNodeLink lNode = new NodeToNodeLink(at.getNodeid(), at.getIfIndex());
                        lNode.setNodeparentid(nodeid);
                        lNode.setParentifindex(ifindex);
                        addNodetoNodeLink(lNode);
                    }
                } else {
                    LogUtils.debugf(this, "addLinks: not find nodeid for ethernet MAC address %s found on node/ifindex %d/%d", curMacAddress, nodeid, ifindex);
                    final MacToNodeLink lMac = new MacToNodeLink(curMacAddress);
                    lMac.setNodeparentid(nodeid);
                    lMac.setParentifindex(ifindex);
                    m_maclinks.add(lMac);
                }
                m_macsParsed.add(curMacAddress);
            }
        }
    }

