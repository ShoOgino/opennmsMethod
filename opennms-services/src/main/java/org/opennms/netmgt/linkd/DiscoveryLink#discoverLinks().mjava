    private void discoverLinks() {   
        Collection<LinkableNode> linkableNodes = m_linkd.getLinkableNodesOnPackage(getPackageName());

        LOG.info("run: Found {} LinkableNodes  on package \"{}\"", linkableNodes.size(), getPackageName());
        LOG.info("run: discoveryUsingBridge={} on package \"{}\"",discoveryUsingBridge,getPackageName());
        LOG.info("run: discoveryUsingCdp={} on package \"{}\"",discoveryUsingCdp,getPackageName());
        LOG.info("run: discoveryUsingRoutes={} on package \"{}\"",discoveryUsingRoutes,getPackageName());
        LOG.info("run: discoveryUsingLldp={} on package \"{}\"",discoveryUsingLldp,getPackageName());
        LOG.info("run: discoveryUsingOspf={} on package \"{}\"",discoveryUsingOspf,getPackageName());
        LOG.info("run: discoveryUsingIsis={} on package \"{}\"",discoveryUsingIsis,getPackageName());
        LOG.info("run: discoveryUsingWifi={} on package \"{}\"",discoveryUsingWifi,getPackageName());
        
        for (final LinkableNode linkableNode : linkableNodes) {
            LOG.debug("run: Iterating on LinkableNode's found node with nodeid/sysoid/ipaddress {}/{}/{}", linkableNode.getNodeId(),linkableNode.getSysoid(),str(linkableNode.getSnmpPrimaryIpAddr()));
            if (discoveryUsingOspf && linkableNode.getOspfRouterId() != null
                    && linkableNode.getOspfinterfaces() != null ) {
                LOG.debug("run: adding to ospf node list: node with nodeid/ospfrouterid/#ospfinterface {}/{}/#{}", linkableNode.getNodeId(),str(linkableNode.getOspfRouterId()),linkableNode.getOspfinterfaces().size());
                m_ospfNodes.add(linkableNode);
            }   
            if (discoveryUsingIsis && linkableNode.getIsisSysId() != null) {
                LOG.debug("run: adding to isis node list: node with nodeid/isisSysId/#isisinterface {}/{}/#{}", linkableNode.getNodeId(),linkableNode.getIsisSysId(),linkableNode.getIsisInterfaces().size());
                m_isisNodes.add(linkableNode);
            }
            if (discoveryUsingLldp && linkableNode.getLldpChassisId() != null
                    && linkableNode.getLldpChassisIdSubtype() != null) {
                LOG.debug("run: adding to lldp node list: node with nodeid/sysname/chassisid {}/{}/{}", linkableNode.getNodeId(),linkableNode.getLldpSysname(),linkableNode.getLldpChassisId());
                m_lldpNodes.add(linkableNode);
            }
            if (discoveryUsingBridge && linkableNode.isBridgeNode()) {
                LOG.debug("run: adding to bridge node list: node with nodeid/bridgeidentifier {}/{}", linkableNode.getNodeId(),linkableNode.getBridgeIdentifiers().get(0));
                m_bridgeNodes.put(Integer.valueOf(linkableNode.getNodeId()),
                                  linkableNode);
            }
            if (discoveryUsingCdp && linkableNode.hasCdpInterfaces()) {
                LOG.debug("run: adding to CDP node list: node with nodeid/#cdpinterfaces {}/#{}", linkableNode.getNodeId(),linkableNode.getCdpInterfaces().size());
                m_cdpNodes.put(linkableNode.getCdpDeviceId(),linkableNode);
            }
            if (discoveryUsingRoutes && linkableNode.hasRouteInterfaces()) {
                LOG.debug("run: adding to router node list: node with nodeid/#iprouteinterface {}/#{}", linkableNode.getNodeId(),linkableNode.getRouteInterfaces().size());
                m_routerNodes.add(linkableNode);
            }
            if (discoveryUsingWifi && !linkableNode.getWifiMacIfIndexMap().isEmpty()) {
                LOG.debug("run: adding to wifi node list: node with nodeid/#wificonnection {}/#{}", linkableNode.getNodeId(),linkableNode.getWifiMacIfIndexMap().size());
                m_wifiNodes.add(linkableNode);
            }
        }

        // This will found all mac address on
        // current package and their association
        // with ip addresses.
        if (discoveryUsingBridge || discoveryUsingWifi)
            populateMacToAtInterface();

        // this part could have several special function to get inter-router
        // links, but at the moment we worked much on switches.
        // In future we can try to extend this part.
        getLinksFromRouteTable();

        getLinksFromOspf();
        getLinksFromIsis();

        getLinksFromWifi();
        // Try Link Layer Discovery Protocol to found link among all nodes
        getLinksFromLldp();
        // try get backbone links between switches using STP info
        // and store information in Bridge class
        // finding links using MAC address on ports
        getBackBoneLinksFromBridges();

        // getting links on remaining bridge ports
        getLinksFromBridges();

        // Try Cisco Discovery Protocol to found link among all nodes
        getLinksFromCdp();

        m_bridgeNodes.clear();
        m_routerNodes.clear();
        m_cdpNodes.clear();
        m_macsParsed.clear();
        macsExcluded.clear();
        m_lldpNodes.clear();
        m_ospfNodes.clear();
        m_isisNodes.clear();
        m_wifiNodes.clear();

        getLinkd().clearPackageSavedData(getPackageName());

        m_linkd.updateDiscoveryLinkCollection(this);

        m_links.clear();
        runned = true;
    }

