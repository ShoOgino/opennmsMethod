	private void processDot1dBasePortAndStpPortTables(final OnmsNode onmsNode,
			final LinkableNode node, final OnmsVlan vlan,
			final SnmpVlanCollection snmpVlanColl, final Date scanTime) {
		Map<Integer, OnmsStpInterface> stpinterfaces = new HashMap<Integer, OnmsStpInterface>(snmpVlanColl.getDot1dBasePortTable().size());        
		stpinterfaces = processDot1DBasePortTable(onmsNode,node, scanTime, vlan, snmpVlanColl,stpinterfaces);
		    
		if (snmpVlanColl.hasDot1dStpPortTable()) {
		    stpinterfaces = processDot1StpPortTable(node, scanTime, vlan, snmpVlanColl, stpinterfaces);
		}

	    if (getLinkd().saveStpInterfaceTable(snmpVlanColl.getPackageName())) {
	    	for (OnmsStpInterface stpInterface: stpinterfaces.values()) {
		        LOG.debug("processDot1dBasePortAndStpPortTables: saving {} in stpinterface table", stpInterface);
		        saveStpInterface(stpInterface);
		    }
		}
	    
	    
    	for (OnmsStpInterface stpInterface: stpinterfaces.values()) {
    		if (stpInterface.getStpPortDesignatedBridge() == null ) continue;
    		if (stpInterface.getStpPortDesignatedBridge().substring(5, 16).equals(snmpVlanColl.getDot1dBase().getBridgeAddress())) {
		        LOG.debug("processDot1dBasePortAndStpPortTables: portdesignatedBridge is bridge itself {}. Nothing to add to linkable node ", snmpVlanColl.getDot1dBase().getBridgeAddress());
    			continue;
    		}
		LOG.debug("processDot1dBasePortAndStpPortTables: portdesignatedBridge/port {}/{} added to linkable node skipped", stpInterface.getStpPortDesignatedBridge(),stpInterface.getBridgePort());
    		node.addStpInterface(stpInterface);
    	}
	}

