	/**
	 * <p>
	 * Performs link discovery for the Nodes and save info in
	 * DatalinkInterface table on DataBase
	 * <p>
	 * No synchronization is performed, so if this is used in a separate thread
	 * context synchronization must be added.
	 * </p>
	 */
    public void run() {

        if (suspendCollection) {
            LogUtils.warnf(this, "run: linkd collections are suspended!");
            return;
        }
		    
        Collection<LinkableNode> linkableNodes = m_linkd.getLinkableNodesOnPackage(getPackageName());

        LogUtils.debugf(this, "run: LinkableNodes/package found: %d/%s",
                        linkableNodes.size(), getPackageName());
        LogUtils.debugf(this,
                        "run: discoveryUsingBridge/discoveryUsingCdp/discoveryUsingRoutes/discoveryUsingLldp: %b/%b/%b/%b",
                        discoveryUsingBridge, discoveryUsingCdp,
                        discoveryUsingRoutes,discoveryUsingLldp);
        LogUtils.debugf(this, "run: enableDownloadDiscovery: %b",
                        enableDownloadDiscovery);

        for (final LinkableNode linkableNode : linkableNodes) {
            LogUtils.debugf(this,
                            "run: Iterating on LinkableNode's found node with ID %d",
                            linkableNode.getNodeId());
            if (discoveryUsingLldp && linkableNode.getLldpChassisId() != null && linkableNode.getLldpChassisIdSubtype() != null && linkableNode.getLldpRemInterfaces() != null ) {
                LogUtils.debugf(this,
                                "run: adding to lldp node list: node with ID %d",
                                linkableNode.getNodeId());
                m_lldpNodes.add(linkableNode);
            }
            if (discoveryUsingBridge && linkableNode.isBridgeNode()) {
                LogUtils.debugf(this,
                                "run: adding to bridge node list: node with ID %d",
                                linkableNode.getNodeId());
                m_bridgeNodes.put(new Integer(linkableNode.getNodeId()),
                                  linkableNode);
            }
            if (discoveryUsingCdp && linkableNode.hasCdpInterfaces()) {
                addCdpLinks(linkableNode);
                LogUtils.debugf(this,
                                "run: adding to CDP node list: node with ID %d",
                                linkableNode.getNodeId());

            }
            if (discoveryUsingRoutes && linkableNode.hasRouteInterfaces()) {
                LogUtils.debugf(this,
                                "run: adding to router node list: node with ID %d",
                                linkableNode.getNodeId());
                m_routerNodes.add(linkableNode);
            }

        }

        // This will found all mac address on
        // current package and their association
        // with ip addresses.
        populateMacToAtInterface();

        // now perform operation to complete
        if (enableDownloadDiscovery) {
            LogUtils.infof(this,
                           "run: fetching further unknown MAC address SNMP bridge table info");
            parseBridgeNodes();
        } 

        // Try Link Layer Discovery Protocol to found link among all nodes
        getLinkdFromLldp();
        // try get backbone links between switches using STP info
        // and store information in Bridge class
        // finding links using MAC address on ports
        getBackBoneLinksFromBridges();
        
        // getting links on remaining bridge ports
        getLinksFromBridges();

        // Try Cisco Discovery Protocol to found link among all nodes
        getLinksFromCdp();

        // fourth find inter-router links,
        // this part could have several special function to get inter-router
        // links, but at the moment we worked much on switches.
        // In future we can try to extend this part.
        getLinksFromRouteTable();

        m_bridgeNodes.clear();
        m_routerNodes.clear();
        m_cdpLinks.clear();
        m_macsParsed.clear();
        macsExcluded.clear();
        m_lldpNodes.clear();
        
        getLinkd().getAtInterfaces(getPackageName()).clear();

        m_linkd.updateDiscoveryLinkCollection(this);

        m_links.clear();
        m_maclinks.clear();

        // rescheduling activities
        isRunned = true;
        reschedule();
    }

