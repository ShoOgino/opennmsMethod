		/**
		 * Inserts the new row into the StpNode table
		 * of the OpenNMS database.
		 *
		 * @param c	The connection to the database.
		 *
		 * @throws java.sql.SQLException Thrown if an error occurs
		 * 	with the connection
		 */
		private void insert(Connection c) throws SQLException {
			if (m_fromDb)
				throw new IllegalStateException(
						"The record already exists in the database");

			// first extract the next node identifier
			//
			StringBuffer names = new StringBuffer("INSERT INTO StpNode (nodeid,basevlan");
			StringBuffer values = new StringBuffer("?,?");

			values.append(",?");
			names.append(",baseBridgeAddress");

			values.append(",?");
			names.append(",baseNumPorts");

			values.append(",?");
			names.append(",basetype");
		
			values.append(",?");
			names.append(",stpProtocolSpecification");

			values.append(",?");
			names.append(",stpPriority");

			values.append(",?");
			names.append(",stpdesignatedroot");

			values.append(",?");
			names.append(",stprootcost");

			values.append(",?");
			names.append(",stprootport");

			values.append(",?");
			names.append(",basevlanname");

			values.append(",?");
			names.append(",status");

			values.append(",?");
			names.append(",lastpolltime");

			names.append(") VALUES (").append(values).append(')');

			LogUtils.debugf(this, "DbStpNodeEntry.insert: SQL insert statment = %s", names.toString());

			final DBUtils d = new DBUtils(getClass());
			
			try {
                PreparedStatement stmt = c.prepareStatement(names.toString());
                d.watch(stmt);

                int ndx = 1;
                stmt.setInt(ndx++, m_nodeId);
                stmt.setInt(ndx++, m_basevlan);
            	stmt.setString(ndx++, m_basebridgeaddress);
            	stmt.setInt(ndx++, m_basenumports);
            	stmt.setInt(ndx++, m_basetype);
            	stmt.setInt(ndx++, m_stpprotocolspecification);
            	stmt.setInt(ndx++, m_stppriority);
            	stmt.setString(ndx++, m_stpdesignatedroot);
            	stmt.setInt(ndx++, m_stprootcost);
            	stmt.setInt(ndx++, m_stprootport);
            	stmt.setString(ndx++, m_basevlanname);
            	stmt.setString(ndx++, new String(new char[] { m_status }));
            	stmt.setTimestamp(ndx++, m_lastPollTime);

                // Run the insert
                //
                int rc = stmt.executeUpdate();
                LogUtils.debugf(this, "StpNodeEntry.insert: row %d", rc);
			} finally {
			    d.cleanUp();
            }

			// clear the mask and mark as backed
			// by the database
			//
			m_fromDb = true;
			m_changed = 0;
		}

