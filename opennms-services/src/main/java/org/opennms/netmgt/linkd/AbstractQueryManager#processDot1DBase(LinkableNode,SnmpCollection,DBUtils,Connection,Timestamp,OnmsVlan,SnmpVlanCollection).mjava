    protected void processDot1DBase(final LinkableNode node, final SnmpCollection snmpcoll, final DBUtils d, final Connection dbConn, final Timestamp scanTime, final OnmsVlan vlan, final SnmpVlanCollection snmpVlanColl) throws SQLException {

        LogUtils.debugf(this, "processDot1DBase: Starting dot1dBase processing.");

        final Dot1dBaseGroup dod1db = snmpVlanColl.getDot1dBase();

        final String baseBridgeAddress = dod1db.getBridgeAddress();
        if (baseBridgeAddress == null || baseBridgeAddress == "000000000000") {
            LogUtils.infof(this, "processDot1DBase: Invalid base bridge address (%s) on node %d", baseBridgeAddress, node.getNodeId());
            return;
        }

        processStpNode(node, snmpcoll, dbConn, scanTime, vlan, snmpVlanColl);

        if (snmpVlanColl.hasDot1dBasePortTable()) {
            processDot1DBasePortTable(node, snmpcoll, dbConn, scanTime, vlan, snmpVlanColl);
        }

        if (snmpVlanColl.hasDot1dStpPortTable()) {
            processDot1StpPortTable(node, snmpcoll, dbConn, scanTime, vlan, snmpVlanColl);
        }

        if (snmpVlanColl.hasDot1dTpFdbTable()) {
            processDot1DTpFdbTable(node, vlan, snmpVlanColl, scanTime);
        }

        if (snmpVlanColl.hasQBridgeDot1dTpFdbTable()) {
            processQBridgeDot1dTpFdbTable(node, vlan, snmpVlanColl);
        }

        for (final String physaddr : getPhysAddrs(node.getNodeId(), d, dbConn)) {
            node.addBridgeIdentifier(physaddr);
        }

    }

