    protected void populateMacToAtInterface() {
        LOG.debug(
                        "populateMacToAtInterface: using atNodes to populate macToAtinterface");
        final Map<String, List<AtInterface>> macs = getLinkd().getAtInterfaces(getPackageName());
        if (macs == null || macs.keySet() == null)
            return;
        for (final String macAddress : macs.keySet()) {
            LOG.debug(
                            "populateMacToAtInterface: MAC {} now has atinterface reference: {}",
                            macAddress,
                            getLinkd().getAtInterfaces(getPackageName()).get(macAddress).size());
            for (final AtInterface at : getLinkd().getAtInterfaces(getPackageName()).get(macAddress)) {
                int nodeid = at.getNodeid();
                LOG.debug(
                                "populateMacToAtInterface: Parsing AtInterface nodeid/ipaddr/macaddr: {}/{}/{}",
                                nodeid, at.getIpAddress(), macAddress);
                if (isMacIdentifierOfBridgeNode(macAddress)) {
                    LOG.debug(
                                    "populateMacToAtInterface: AtInterface {} belongs to bridge node! Not adding to discoverable atinterface.",
                                    macAddress);
                    macsExcluded.add(macAddress);
                    continue;
                }
                if ((macAddress.indexOf("00000c07ac") == 0)
                        || (macAddress.indexOf("00000c9ff") == 0)) {
                    LOG.debug(
                                    "populateMacToAtInterface: AtInterface {} is Cisco HSRP address! Not adding to discoverable atinterface.",
                                    macAddress);
                    macsExcluded.add(macAddress);
                    continue;
                }
            }
        }
        LOG.debug(
                        "populateMacToAtInterface: end populateMacToAtinterface");
    }

