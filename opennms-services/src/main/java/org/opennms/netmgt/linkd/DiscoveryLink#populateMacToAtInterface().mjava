    protected void populateMacToAtInterface() {
        LogUtils.debugf(this, "populateMacToAtInterface: using atNodes to populate macToAtinterface");
        final Map<String,List<AtInterface>> macs=getLinkd().getAtInterfaces(getPackageName());
        if (macs== null || macs.keySet() == null ) 
        	return;
        for (final String macAddress : macs.keySet()) {
            LogUtils.debugf(this, "populateMacToAtInterface: MAC %s now has atinterface reference: %d", macAddress, getLinkd().getAtInterfaces(getPackageName()).get(macAddress).size());
            for (final AtInterface at : getLinkd().getAtInterfaces(getPackageName()).get(macAddress)) {
        		int nodeid = at.getNodeid();
        		LogUtils.debugf(this, "populateMacToAtInterface: Parsing AtInterface nodeid/ipaddr/macaddr: %d/%s/%s", nodeid, at.getIpAddress(), macAddress);
        		if (!m_linkd.isInterfaceInPackage(at.getIpAddress(), getPackageName())) {
        		LogUtils.debugf(this, "populateMacToAtInterface: at interface: %s does not belong to package: %s! Not adding to discoverable atinterface.", at.getIpAddress(), getPackageName());
        			macsExcluded.add(macAddress);
        			continue;
        		}
        		if (isMacIdentifierOfBridgeNode(macAddress)) {
        		    LogUtils.debugf(this, "populateMacToAtInterface: AtInterface %s belongs to bridge node! Not adding to discoverable atinterface.", macAddress);
        			macsExcluded.add(macAddress);
        			continue;
        		}
                if ((macAddress.indexOf("00000c07ac") == 0) || (macAddress.indexOf("00000c9ff") == 0)) {
                    LogUtils.debugf(this, "populateMacToAtInterface: AtInterface %s is Cisco HSRP address! Not adding to discoverable atinterface.", macAddress);
                   macsExcluded.add(macAddress); 
                   continue; 
                }
            }
        }
        LogUtils.debugf(this, "populateMacToAtInterface: end populateMacToAtinterface");
    }

