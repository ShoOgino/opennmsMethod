    protected void populateMacToAtInterface() {
        LogUtils.debugf(this, "DiscoveryLink.run: using atNodes to populate macToAtinterface");
        for (final LinkableNode curNode : m_atNodes) {
            for (final OnmsAtInterface at : curNode.getAtInterfaces()) {
        		int nodeid = at.getNode().getId();
        		final String ipaddr = at.getIpAddress();
        		final String macAddress = at.getMacAddress();
        		LogUtils.debugf(this, "Parsing AtInterface nodeid/ipaddr/macaddr: %d/%s/%s", nodeid, ipaddr, macAddress);
        		if (!m_linkd.isInterfaceInPackage(InetAddressUtils.addr(at.getIpAddress()), getPackageName())) {
                    LogUtils.infof(this, "DiscoveryLink.run: at interface: %s does not belong to package: %s! Not adding to discoverable atinterface.", ipaddr, getPackageName());
        			macsExcluded.add(macAddress);
        			continue;
        		}
        		if (isMacIdentifierOfBridgeNode(macAddress)) {
        		    LogUtils.infof(this, "DiscoveryLink.run: at interface %s belongs to bridge node! Not adding to discoverable atinterface.", macAddress);
        			macsExcluded.add(macAddress);
        			continue;
        		}
                if (macAddress.indexOf("00000c07ac") == 0) {
                    LogUtils.infof(this, "DiscoveryLink.run: at interface %s is cisco hsrp address! Not adding to discoverable atinterface.", macAddress);
                   macsExcluded.add(macAddress); 
                   continue; 
                }
                List<OnmsAtInterface> ats = m_macToAtinterface.get(macAddress);
        		if (ats == null) ats = new ArrayList<OnmsAtInterface>();
        		LogUtils.infof(this, "parseAtNodes: Adding to discoverable atinterface.");
        		ats.add(at);
        		m_macToAtinterface.put(macAddress, ats);
        		LogUtils.debugf(this, "parseAtNodes: mac: %s now has atinterface reference: %d", macAddress, ats.size());
        	}		
        }
        LogUtils.debugf(this, "DiscoveryLink.run: end populate macToAtinterface");
    }

