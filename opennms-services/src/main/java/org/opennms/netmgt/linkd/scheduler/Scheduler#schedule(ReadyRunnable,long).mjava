	/**
	 * This method is used to schedule a ready runnable in the system. The
	 * interval is used as the key for determining which queue to add the
	 * runnable.
	 * 
	 * @param runnable
	 *            The element to run when interval expires.
	 * @param interval
	 *            The queue to add the runnable to.
	 * 
	 * @throws java.lang.RuntimeException
	 *             Thrown if an error occurs adding the element to the queue.
	 */
	public synchronized void schedule(ReadyRunnable runnable, long interval) {

		if (log().isDebugEnabled()) {
			log().debug("schedule: Adding ready runnable at interval " + interval);
		}

		if (!m_queues.containsKey(interval)) {
			if (log().isDebugEnabled())
				log()
						.debug("schedule: interval queue did not exist, a new one has been created");
			m_queues.put(interval, new PeekableFifoQueue<ReadyRunnable>());
		}

		try {
			(m_queues.get(interval)).add(runnable);
			if (m_scheduled++ == 0) {
				if (log().isDebugEnabled())
					log()
							.debug("schedule: queue element added, calling notify all since none were scheduled");
				notifyAll();
			} else if (log().isDebugEnabled()) {
				log()
						.debug("schedule: queue element added, notification not performed");
			}
		} catch (InterruptedException ie) {
			if (log().isInfoEnabled())
				log().info("schedule: failed to add new ready runnable instance "
						+ runnable + " to scheduler", ie);
			Thread.currentThread().interrupt();
		} catch (FifoQueueException ex) {
			if (log().isInfoEnabled())
				log().info("schedule: failed to add new ready runnable instance "
						+ runnable + " to scheduler", ex);
			throw new UndeclaredThrowableException(ex);
		}
	}

