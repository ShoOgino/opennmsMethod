    /**
     * <p>
     * Initialize the service collector.
     * </p>
     * <p>
     * During initialization the JMX collector: - Initializes various
     * configuration factories. - Verifies access to the database - Verifies
     * access to RRD file repository - Verifies access to JNI RRD shared
     * library - Determines if JMX to be stored for only the node'sprimary
     * interface or for all interfaces.
     * </p>
     * 
     * @param parameters
     *            Not currently used.
     * @exception RuntimeException
     *                Thrown if an unrecoverable error occurs that prevents
     *                the plug-in from functioning.
     */

    public void initialize(Map<String, String> parameters) {
        // Log4j category
        Category log = ThreadCategory.getInstance(getClass());

        // Initialize the JMXDataCollectionConfigFactory
        try {
        	// XXX was reload(), which isn't test-friendly
            JMXDataCollectionConfigFactory.init();
        } catch (MarshalException e) {
            log.fatal("initialize: Failed to load data collection configuration",
                      e);
            throw new UndeclaredThrowableException(e);
        } catch (ValidationException e) {
            log.fatal("initialize: Failed to load data collection configuration",
                      e);
            throw new UndeclaredThrowableException(e);
        } catch (IOException e) {
            log.fatal("initialize: Failed to load data collection configuration",
                      e);
            throw new UndeclaredThrowableException(e);
        }

        // Make sure we can connect to the database
        java.sql.Connection ctest = null;
        try {
            DataSourceFactory.init();
            ctest = DataSourceFactory.getInstance().getConnection();
        } catch (IOException e) {
            log.fatal("initialize: IOException getting database connection",
                      e);
            throw new UndeclaredThrowableException(e);
        } catch (MarshalException e) {
            log.fatal("initialize: Marshall Exception getting database "
                      + "connection", e);
            throw new UndeclaredThrowableException(e);
        } catch (ValidationException e) {
            log.fatal("initialize: Validation Exception getting database "
                      + "connection", e);
            throw new UndeclaredThrowableException(e);
        } catch (SQLException e) {
            log.fatal("initialize: Failed getting connection to the database.",
                      e);
            throw new UndeclaredThrowableException(e);
        } catch (PropertyVetoException e) {
            log.fatal("initialize: Failed getting connection to the database.",
                      e);
            throw new UndeclaredThrowableException(e);
        } catch (ClassNotFoundException e) {
            log.fatal("initialize: Failed loading database driver.", e);
            throw new UndeclaredThrowableException(e);
        } finally {
            if (ctest != null) {
                try {
                    ctest.close();
                } catch (Throwable t) {
                    log.warn("initialize: an exception occured while closing the "
                             + "JDBC connection", t);
                }
            }
        }

        // Save local reference to singleton instance

        log.debug("initialize: successfully instantiated JNI interface to RRD.");
    }

