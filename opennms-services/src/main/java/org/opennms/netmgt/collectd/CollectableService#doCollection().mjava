        /**
         * Perform data collection.
         */
	private void doCollection() throws CollectionException {
		log().info("run: starting new collection for " + getHostAddress() + "/" + m_spec.getServiceName());
		CollectionSet result = null;
		try {
		    result = m_spec.collect(m_agent);
		    if (result != null) {
                        Collectd.instrumentation().beginPersistingServiceData(m_nodeId, getHostAddress(), m_spec.getServiceName());
                        try {
                            BasePersister persister = createPersister(m_params, m_repository);
                            persister.setIgnorePersist(result.ignorePersist());
                            result.visit(persister);
                        } finally {
                            Collectd.instrumentation().endPersistingServiceData(m_nodeId, getHostAddress(), m_spec.getServiceName());
                        }
                        
                        /*
                         * Do the thresholding; this could be made more generic (listeners being passed the collectionset), but frankly, why bother?
                         * The first person who actually needs to configure that sort of thing on the fly can code it up.
                         */
                        if (m_thresholdVisitor != null) {
                            result.visit(m_thresholdVisitor);
                        }
                       
                        if (result.getStatus() == ServiceCollector.COLLECTION_SUCCEEDED) {
                            return;
                        } else {
                            throw new CollectionFailed(result.getStatus());
                        }
                    }
                } catch (CollectionException e) {
                    throw e;
		} catch (Throwable t) {
                    throw new CollectionException("An undeclared throwable was caught during data collection for interface " + getHostAddress() +"/"+ m_spec.getServiceName(), t);
		}
	}

