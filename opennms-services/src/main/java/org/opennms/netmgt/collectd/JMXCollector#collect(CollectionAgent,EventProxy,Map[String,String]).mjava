    /**
     * Perform data collection.
     * 
     * @param agent
     *            Network interface to be data collected
     * @param eproxy
     *            Eventy proxy for sending events.
     * @param parameters
     *            Key/value pairs from the package to which the interface
     *            belongs.
     */

    public CollectionSet collect(CollectionAgent agent, EventProxy eproxy, Map<String, String> map) {
        Category log = ThreadCategory.getInstance(getClass());
        InetAddress ipaddr = (InetAddress) agent.getAddress();
        JMXNodeInfo nodeInfo = (JMXNodeInfo) agent.getAttribute(NODE_INFO_KEY);
        HashMap mbeans = nodeInfo.getMBeans();
        String collDir = serviceName;
        

        String port = ParameterMap.getKeyedString(map, "port", null);
        String friendlyName = ParameterMap.getKeyedString(map,
                                                          "friendly-name",
                                                          port);
        if (useFriendlyName) {
            collDir = friendlyName;
        }
        
        JMXCollectionSet collectionSet=new JMXCollectionSet(agent,collDir);
        JMXCollectionResource collectionResource=collectionSet.getResource();
        
        ConnectionWrapper connection = null;

        log.debug("collect " + ipaddr.getHostAddress() + " "
                + nodeInfo.getNodeId());

        try {
            connection = getMBeanServerConnection(map, ipaddr);

            if (connection == null) {
                return collectionSet;
            }

            MBeanServerConnection mbeanServer = connection.getMBeanServer();

            int retry = ParameterMap.getKeyedInteger(map, "retry", 3);
            for (int attempts = 0; attempts <= retry; attempts++) {
                try {
                    /*
                     * Iterate over the mbeans, for each object name perform a
                     * getAttributes, the update the RRD.
                     */

                    for (Iterator iter = mbeans.values().iterator(); iter.hasNext();) {
                        BeanInfo beanInfo = (BeanInfo) iter.next();
                        String objectName = beanInfo.getObjectName();
                        String excludeList = beanInfo.getExcludes();
                        //All JMX collected values are per node
                        AttributeGroupType attribGroupType=new AttributeGroupType(objectName,"all");

                        String[] attrNames = beanInfo.getAttributeNames();

                        if (objectName.indexOf("*") == -1) {
                            log.debug(serviceName
                                    + " Collector - getAttributes: "
                                    + objectName + " #attributes: "
                                    + attrNames.length);

                            try {
                                ObjectName oName = new ObjectName(objectName);
                                if (mbeanServer.isRegistered(oName)) {
                                    AttributeList attrList = mbeanServer.getAttributes(oName, attrNames);
                                    HashMap dsMap = nodeInfo.getDsMap();
                                    for(Object attribute : attrList) {
                                        Attribute attrib=(Attribute)attribute;
                                        JMXDataSource ds = (JMXDataSource) dsMap.get(objectName + "|"
                                                     + attrib.getName());
                                        JMXCollectionAttributeType attribType=new JMXCollectionAttributeType(ds, null, null, attribGroupType);
                                        collectionResource.setAttributeValue(attribType, attrib.getValue().toString());
                                    }  
                                }
                            } catch (InstanceNotFoundException e) {
                                log.error("Unable to retrieve attributes from "
                                        + objectName, e);
                            }
                        } else {
                            /*
                             * This section is for ObjectNames that use the
                             * '*' wildcard
                             */
                            Set mbeanSet =
                                mbeanServer.queryNames(new ObjectName(objectName),
                                                       null);
                            for (Iterator objectNameIter = mbeanSet.iterator();
                                 objectNameIter.hasNext(); ) {
                                ObjectName oName =
                                    (ObjectName) objectNameIter.next();
                                if (log.isDebugEnabled()) {
                                    log.debug(serviceName
                                              + " Collector - getAttributesWC: "
                                              + oName + " #attributes: "
                                              + attrNames.length + " "
                                              + beanInfo.getKeyAlias());
                                }

                                try {
                                    if (excludeList == null) {
                                        // the exclude list doesn't apply
                                        if (mbeanServer.isRegistered(oName)) {
                                            AttributeList attrList = mbeanServer.getAttributes(oName,
                                                                          attrNames);
                                            HashMap dsMap = nodeInfo.getDsMap();

                                            for(Object attribute : attrList) {
                                                Attribute attrib=(Attribute)attribute;
                                                JMXDataSource ds = (JMXDataSource) dsMap.get(objectName + "|"
                                                             + attrib.getName());
                                                JMXCollectionAttributeType attribType=
                                                    new JMXCollectionAttributeType(ds, 
                                                                                   oName.getKeyProperty(beanInfo.getKeyField()),  
                                                                                   beanInfo.getKeyAlias(), 
                                                                                   attribGroupType);
                                                
                                                collectionResource.setAttributeValue(attribType, attrib.getValue().toString());
                                            }

                                        }
                                    } else {
                                        /*
                                         * filter out calls if the key field
                                         * matches an entry in the exclude
                                         * list
                                         */
                                        String keyName = oName.getKeyProperty(beanInfo.getKeyField());
                                        boolean found = false;
                                        StringTokenizer st = new StringTokenizer(
                                                                                 excludeList,
                                                                                 ",");
                                        while (st.hasMoreTokens()) {
                                            if (keyName.equals(st.nextToken())) {
                                                found = true;
                                                break;
                                            }
                                        }
                                        if (!found) {
                                            if (mbeanServer.isRegistered(oName)) {
                                                AttributeList attrList =
                                                    (AttributeList)
                                                    mbeanServer.getAttributes(oName,
                                                                              attrNames);
                                                HashMap dsMap = nodeInfo.getDsMap();

                                                for(Object attribute : attrList) {
                                                    Attribute attrib=(Attribute)attribute;
                                                    JMXDataSource ds = (JMXDataSource) dsMap.get(objectName + "|"
                                                                 + attrib.getName());
                                                    JMXCollectionAttributeType attribType=
                                                        new JMXCollectionAttributeType(ds, 
                                                                                       oName.getKeyProperty(beanInfo.getKeyField()),  
                                                                                       beanInfo.getKeyAlias(), 
                                                                                       attribGroupType);
                                                    
                                                    collectionResource.setAttributeValue(attribType, attrib.getValue().toString());
                                                }
                                            }
                                        }
                                    }
                                } catch (InstanceNotFoundException e) {
                                    log.error("Error retrieving attributes for "
                                              + oName, e);
                                }
                            }
                        }
                        // serviceStatus = COLLECTION_SUCCEEDED;
                    }
                    break;
                } catch (Exception e) {
                    e.fillInStackTrace();
                    log.debug(serviceName
                              + " Collector.collect: IOException while collect "
                              + "address: " + agent.getAddress(), e);
                }
            } // of for
        } catch (Exception e) {
            log.error("Error getting MBeanServer", e);
        } finally {
            if (connection != null) {
                connection.close();
            }
        }
        
        collectionSet.setStatus(ServiceCollector.COLLECTION_SUCCEEDED);
        return collectionSet;
    }

