    private List<HttpCollectionAttribute> processResponse(final Locale responseLocale, final String responseBodyAsString, final HttpCollectionSet collectionSet, HttpCollectionResource collectionResource) {
        log().debug("processResponse:");
        log().debug("responseBody = " + responseBodyAsString);
        log().debug("getmatches = " + collectionSet.getUriDef().getUrl().getMatches());
        List<HttpCollectionAttribute> butes = new LinkedList<HttpCollectionAttribute>();
        int flags = 0;
        if (collectionSet.getUriDef().getUrl().getCanonicalEquivalence()) {
            flags |= Pattern.CANON_EQ;
        }
        if (collectionSet.getUriDef().getUrl().getCaseInsensitive()) {
            flags |= Pattern.CASE_INSENSITIVE;
        }
        if (collectionSet.getUriDef().getUrl().getComments()) {
            flags |= Pattern.COMMENTS;
        }
        if (collectionSet.getUriDef().getUrl().getDotall()) {
            flags |= Pattern.DOTALL;
        }
        if (collectionSet.getUriDef().getUrl().getLiteral()) {
            flags |= Pattern.LITERAL;
        }
        if (collectionSet.getUriDef().getUrl().getMultiline()) {
            flags |= Pattern.MULTILINE;
        }
        if (collectionSet.getUriDef().getUrl().getUnicodeCase()) {
            flags |= Pattern.UNICODE_CASE;
        }
        if (collectionSet.getUriDef().getUrl().getUnixLines()) {
            flags |= Pattern.UNIX_LINES;
        }
        log().debug("flags = " + flags);
        Pattern p = Pattern.compile(collectionSet.getUriDef().getUrl().getMatches(), flags);
        Matcher m = p.matcher(responseBodyAsString);

        final boolean matches = m.matches();
        if (matches) {
            log().debug("processResponse: found matching attributes: "+matches);
            final List<Attrib> attribDefs = collectionSet.getUriDef().getAttributes().getAttribCollection();
            final AttributeGroupType groupType = new AttributeGroupType(collectionSet.getUriDef().getName(),"all");

            final List<Locale> locales = new ArrayList<Locale>();
            locales.add(responseLocale);
            locales.add(Locale.getDefault());
            if (Locale.getDefault() != Locale.ENGLISH) {
                locales.add(Locale.ENGLISH);
            }

            for (final Attrib attribDef : attribDefs) {
                final String type = attribDef.getType();
                String value = null;
                try {
                    value = m.group(attribDef.getMatchGroup());
                } catch (final IndexOutOfBoundsException e) {
                    log().error("IndexOutOfBoundsException thrown while trying to find regex group, your regex does not contain the following group index: " + attribDef.getMatchGroup());
                    log().error("Regex statement: " + collectionSet.getUriDef().getUrl().getMatches());
                    continue;
                }

                if (! type.matches("^([Oo](ctet|CTET)[Ss](tring|TRING))|([Ss](tring|TRING))$")) {
                    Number num = null;
                    for (final Locale locale : locales) {
                        try {
                            num = NumberFormat.getNumberInstance(locale).parse(value);
                            break;
                        } catch (final ParseException e) {
                            log().error("attribute "+attribDef.getAlias()+" failed to match a parsable number with locale \"" + locale + "\"! Matched \""+value+"\" instead.");
                        }
                    }

                    if (num == null) {
                        log().error("processResponse: gave up attempting to parse numeric value, skipping group " + attribDef.getMatchGroup());
                        continue;
                    }
                    
                    final HttpCollectionAttribute bute = new HttpCollectionAttribute(
                         collectionResource,
                         new HttpCollectionAttributeType(attribDef, groupType), 
                         attribDef.getAlias(),
                         type, 
                         num
                     );
                     log().debug("processResponse: adding found numeric attribute: "+bute);
                     butes.add(bute);
                } else {
                    HttpCollectionAttribute bute =
                        new HttpCollectionAttribute(
                                                    collectionResource,
                                                    new HttpCollectionAttributeType(attribDef, groupType),
                                                    attribDef.getAlias(),
                                                    type,
                                                    value);
                    log().debug("processResponse: adding found string attribute: " + bute);
                    butes.add(bute);
                }
            }
        } else {
            log().debug("processResponse: found matching attributes: "+matches);
        }
        return butes;
    }

