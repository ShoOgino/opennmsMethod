    @SuppressWarnings("unchecked")
    public int collect(CollectionAgent agent, EventProxy eproxy, Map<String, String> parameters) {
        String collectionName=parameters.get("nsclient-collection");
        final CollectionAgent theAgent=agent; //For ResourceIdentifier anonymous class to access the var
        
        //Find out what attribs to collect for this node, then collect and store them
        
        //Find attribs to collect - check groups in configuration.  For each, check scheduled nodes to see if that group should be collected
        NsclientCollection collection=NSClientDataCollectionConfigFactory.getInstance().getNSClientCollection(collectionName);
        NSClientAgentState agentState=m_scheduledNodes.get(agent.getNodeId());
 
        for(Wpm wpm : collection.getWpms().getWpm()) {
            //A wpm consists of a list of attributes, identified by name
            if(agentState.shouldCheckAvailability(wpm.getName(), wpm.getRecheckInterval())) {
                log().debug("Checking availability of group "+wpm.getName());
                try {
                    NsclientManager manager = agentState.getManager();
                    manager.init();
                    NsclientCheckParams params = new NsclientCheckParams(wpm.getKeyvalue());
                    NsclientPacket result = manager.processCheckCommand(
                                                                        NsclientManager.CHECK_COUNTER,
                                                                        params);
                    manager.close();
                    boolean isAvailable=(result.getResultCode()==NsclientPacket.RES_STATE_OK);
                    agentState.setGroupIsAvailable(wpm.getName(), isAvailable);
                } catch (NsclientException e) {
                    throw new NSClientCollectorException(
                    "Error checking group ("+wpm.getName()+") availability", e);
                }
          }
            
            if(agentState.groupIsAvailable(wpm.getName())) {
                //Collect the data
                RrdRepository rrdRepository = NSClientDataCollectionConfigFactory.getInstance().getRrdRepository(collectionName);
                ResourceIdentifier resource = new ResourceIdentifier() {
                    public String getOwnerName() {
                        return theAgent.getHostAddress();
                    }
                    public File getResourceDir(RrdRepository repository) {
                        return new File(repository.getRrdBaseDir(), Integer.toString(theAgent.getNodeId()));
                    }
                };
                try {
                    NsclientManager manager = agentState.getManager();
                    manager.init(); //Open the connection, then do each attribute

                    for (Attrib attrib : wpm.getAttrib()) {
                        NsclientCheckParams params = new NsclientCheckParams(
                                                                             attrib.getName());
                        NsclientPacket result = manager.processCheckCommand(
                                                             NsclientManager.CHECK_COUNTER,
                                                             params);

                        NSClientCollectionAttribute attribute = new NSClientCollectionAttribute(
                                                                                                attrib.getAlias(),
                                                                                                attrib.getType(),
                                                                                                result.getResponse());
                        PersistOperationBuilder builder = new PersistOperationBuilder(
                                                                                      rrdRepository,
                                                                                      resource,
                                                                                      attribute.getName());
                        builder.declareAttribute(attribute);
                        log().debug(
                                    "doCollection: setting attribute: "
                                            + attribute);
                        builder.setAttributeValue(attribute,
                                                  attribute.getValue());
                        try {
                            builder.commit();
                        } catch (RrdException e) {
                            throw new NSClientCollectorException(
                                                                 "Error writing RRD", e);
                        }
                    }
                    manager.close(); //Only close once all the attribs have been done (optimizing as much as possible with NSClient)
                } catch (NsclientException e) {
                    throw new NSClientCollectorException(
                                                         "Error collecting data", e);
                }
            }
        }
         

        
        return ServiceCollector.COLLECTION_SUCCEEDED;
    }

