    @SuppressWarnings("unchecked")
    public int collect(CollectionAgent agent, EventProxy eproxy, Map<String, String> parameters) {
        String collectionName = parameters.get("nsclient-collection");
        final CollectionAgent theAgent = agent; // For ResourceIdentifier

        // Find attributes to collect - check groups in configuration. For each,
        // check scheduled nodes to see if that group should be collected
        NsclientCollection collection = NSClientDataCollectionConfigFactory.getInstance().getNSClientCollection(collectionName);
        NSClientAgentState agentState = m_scheduledNodes.get(agent.getNodeId());

        for (Wpm wpm : collection.getWpms().getWpm()) {
            // A wpm consists of a list of attributes, identified by name
            if (agentState.shouldCheckAvailability(wpm.getName(), wpm.getRecheckInterval())) {
                log().debug("Checking availability of group " + wpm.getName());
                NsclientManager manager = null;
                try {
                    manager = agentState.getManager();
                    manager.init();
                    NsclientCheckParams params = new NsclientCheckParams(wpm.getKeyvalue());
                    NsclientPacket result = manager.processCheckCommand(NsclientManager.CHECK_COUNTER, params);
                    manager.close();
                    boolean isAvailable = (result.getResultCode() == NsclientPacket.RES_STATE_OK);
                    agentState.setGroupIsAvailable(wpm.getName(), isAvailable);
                } catch (NsclientException e) {
                    throw new NSClientCollectorException("Error checking group (" + wpm.getName() + ") availability", e);
                } finally {
                    if (manager != null) {
                        manager.close();
                    }
                }
            }

            if (agentState.groupIsAvailable(wpm.getName())) {
                // Collect the data
                RrdRepository rrdRepository = NSClientDataCollectionConfigFactory.getInstance().getRrdRepository(collectionName);
                ResourceIdentifier resource = new ResourceIdentifier() {
                    public String getOwnerName() {
                        return theAgent.getHostAddress();
                    }

                    public File getResourceDir(RrdRepository repository) {
                        return new File(repository.getRrdBaseDir(), Integer.toString(theAgent.getNodeId()));
                    }
                };
                try {
                    NsclientManager manager = agentState.getManager();
                    manager.init(); // Open the connection, then do each
                                    // attribute

                    for (Attrib attrib : wpm.getAttrib()) {
                        NsclientPacket result = null;
                        NSClientCollectionAttribute attribute;
                        PersistOperationBuilder builder;
                        
                        try {
                            NsclientCheckParams params = new NsclientCheckParams(attrib.getName());
                            result = manager.processCheckCommand(NsclientManager.CHECK_COUNTER, params);
                        } catch (NsclientException e) {
                            log().info("unable to collect params for attribute '" + attrib.getName() + "'", e);
                        }

                        if (result != null) {
                            if (result.getResultCode() != NsclientPacket.RES_STATE_OK) {
                                log().info("not writing parameters for attribute '" + attrib.getName() + "', state is not 'OK'");
                            } else {
                                attribute = new NSClientCollectionAttribute(attrib.getAlias(), attrib.getType(), result.getResponse());
                                builder = new PersistOperationBuilder(rrdRepository, resource, attribute.getName());
                                builder.declareAttribute(attribute);
                                log().debug("doCollection: setting attribute: " + attribute);
                                builder.setAttributeValue(attribute, attribute.getValue());

                                try {
                                    builder.commit();
                                } catch (RrdException e) {
                                    throw new NSClientCollectorException("Error writing RRD", e);
                                }
                            }
                        }
                    }
                    manager.close(); // Only close once all the attribs have
                                        // been done (optimizing as much as
                                        // possible with NSClient)
                } catch (NsclientException e) {
                    throw new NSClientCollectorException("Error collecting data", e);
                }
            }
        }

        return ServiceCollector.COLLECTION_SUCCEEDED;
    }

