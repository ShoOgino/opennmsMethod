    /**
     * {@inheritDoc}
     * <p/>
     * Perform data collection.
     */
    @Override
    public CollectionSet collect(CollectionAgent agent, EventProxy eproxy, Map<String, Object> map) {
        final InetAddress ipaddr = agent.getAddress();
        final JMXNodeInfo nodeInfo = agent.getAttribute(NODE_INFO_KEY);
        final String collectionName = agent.getAttribute("collectionName");
        final boolean useMbeanForRrds = ParameterMap.getKeyedBoolean(map, ParameterName.USE_MBEAN_NAME_FOR_RRDS.toString(), false);
        final String port = ParameterMap.getKeyedString(map, ParameterName.PORT.toString(), null);
        final String friendlyName = ParameterMap.getKeyedString(map, ParameterName.FRIENDLY_NAME.toString(), port);
        final String collDir = useFriendlyName ? friendlyName : serviceName;
        final int retries = ParameterMap.getKeyedInteger(map, ParameterName.RETRY.toString(), 3);

        // result objects
        final JMXCollectionResource collectionResource = new JMXCollectionResource(agent, collDir);
        final SingleResourceCollectionSet collectionSet = new SingleResourceCollectionSet(collectionResource, new Date());

        LOG.debug("collecting {} on node ID {}", InetAddressUtils.str(ipaddr), nodeInfo.getNodeId());
        try {
            // create config for JmxCollector
            final WiuJmxConfig config = new WiuJmxConfig();
            config.setAgentAddress(InetAddressUtils.str(ipaddr));
            config.setConnectionName(getConnectionName());
            config.setRetries(retries);
            config.setServiceProperties(JmxUtils.convertToStringMap(map));
            config.setJmxCollection(JMXDataCollectionConfigFactory.getInstance().getJmxCollection(collectionName));

            final WiuJmxCollector jmxCollector = new WiuDefaultJmxCollector();
            jmxCollector.collect(config, new JmxSampleProcessor() {

                private final Map<String, AttributeGroupType> groupNameAttributeGroupTypeMap = new HashMap<>();

                @Override
                public void process(AttributeSample attributeSample) {
                    final String objectName = attributeSample.getMbean().getObjectname();
                    final String attributeName = attributeSample.getAttribute().getName();
                    final AttributeGroupType attribGroupType = getAttributeGroupType(attributeSample.getMbean());

                    JMXDataSource ds = nodeInfo.getDsMap().get(objectName + "|" + attributeName);
                    JMXCollectionAttributeType attribType = new JMXCollectionAttributeType(ds, attribGroupType);
                    collectionResource.setAttributeValue(attribType, attributeSample.getValueAsString());
                }

                @Override
                public void process(CompositeSample compositeSample) {
                    final String objectName = compositeSample.getMbean().getObjectname();
                    final String attributeName = compositeSample.getAttribute().getName();
                    final AttributeGroupType attribGroupType = getAttributeGroupType(compositeSample.getMbean());

                    JMXDataSource ds = nodeInfo.getDsMap().get(objectName + "|" + attributeName + "|" + compositeSample.getCompositeKey());
                    JMXCollectionAttributeType attribType = new JMXCollectionAttributeType(ds, attribGroupType);
                    collectionResource.setAttributeValue(attribType, compositeSample.getValueAsString());
                }

                private AttributeGroupType getAttributeGroupType(Mbean mbean) {
                    //All JMX collected values are per node
                    final String groupName = useMbeanForRrds ? mbean.getName() : mbean.getObjectname();
                    if (!groupNameAttributeGroupTypeMap.containsKey(groupName)) {
                        final AttributeGroupType attribGroupType = new AttributeGroupType(fixGroupName(groupName), AttributeGroupType.IF_TYPE_ALL);
                        groupNameAttributeGroupTypeMap.put(groupName, attribGroupType);
                    }
                    return groupNameAttributeGroupTypeMap.get(groupName);
                }
            });
        } catch (final Exception e) {
            LOG.debug("{} Collector.collect: IOException while collecting address: {}", serviceName, agent.getAddress(), e);
        }

        collectionSet.setStatus(ServiceCollector.COLLECTION_SUCCEEDED);
        return collectionSet;
    }

