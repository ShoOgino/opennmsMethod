    /**
     * {@inheritDoc}
     * <p/>
     * Perform data collection.
     */
    @Override
    public CollectionSet collect(CollectionAgent agent, EventProxy eproxy, Map<String, Object> map) {
        final Map<String, String> stringMap = JmxUtils.convertToUnmodifiableStringMap(map);
        final InetAddress ipaddr = agent.getAddress();
        final JMXNodeInfo nodeInfo = agent.getAttribute(NODE_INFO_KEY);
        final String collectionName = agent.getAttribute("collectionName");
        final String port = ParameterMap.getKeyedString(map, ParameterName.PORT.toString(), null);
        final String friendlyName = ParameterMap.getKeyedString(map, ParameterName.FRIENDLY_NAME.toString(), port);
        final String collDir = JmxUtils.getCollectionDirectory(stringMap, friendlyName, serviceName);
        final int retries = ParameterMap.getKeyedInteger(map, ParameterName.RETRY.toString(), 3);

        // result objects
        final JMXCollectionResource collectionResource = new JMXCollectionResource(agent, collDir);
        final SingleResourceCollectionSet collectionSet = new SingleResourceCollectionSet(collectionResource, new Date());

        LOG.debug("connecting to {} on node ID {}", InetAddressUtils.str(ipaddr), nodeInfo.getNodeId());

        try {
            // create config for JmxCollector
            final JmxCollectorConfig config = new JmxCollectorConfig();
            config.setAgentAddress(InetAddressUtils.str(ipaddr));
            config.setConnectionName(getConnectionName());
            config.setRetries(retries);
            config.setServiceProperties(stringMap);
            config.setJmxCollection(m_jmxDataCollectionConfigDao.getJmxCollection(collectionName));

            final JmxCollector jmxCollector = new DefaultJmxCollector();
            ((DefaultJmxCollector) jmxCollector).setJmxConfigDao(m_jmxConfigDao);
            jmxCollector.collect(config, new JmxSampleProcessor() {

                private final Map<String, AttributeGroupType> groupNameAttributeGroupTypeMap = new HashMap<>();

                @Override
                public void process(JmxAttributeSample attributeSample) {
                    final String objectName = attributeSample.getMbean().getObjectname();
                    final String attributeName = attributeSample.getCollectedAttribute().getName();
                    final AttributeGroupType attribGroupType = getAttributeGroupType(attributeSample.getMbean());

                    String dsKey = objectName + "|" + attributeName;
                    JMXDataSource ds = nodeInfo.getDsMap().get(dsKey);
                    if (ds == null) {
                        LOG.info("Could not find datasource for {}. Skipping.", dsKey);
                        return;
                    }
                    JMXCollectionAttributeType attribType = new JMXCollectionAttributeType(ds, attribGroupType);
                    collectionResource.setAttributeValue(attribType, attributeSample.getCollectedValueAsString());
                }

                @Override
                public void process(JmxCompositeSample compositeSample) {
                    final String objectName = compositeSample.getMbean().getObjectname();
                    final String attributeName = compositeSample.getCollectedAttribute().getName();
                    final AttributeGroupType attribGroupType = getAttributeGroupType(compositeSample.getMbean());

                    String dsKey = objectName + "|" + attributeName + "|" + compositeSample.getCompositeKey();
                    JMXDataSource ds = nodeInfo.getDsMap().get(dsKey);
                    if (ds == null) {
                        LOG.info("Could not find datasource for {}. Skipping.", dsKey);
                        return;
                    }
                    JMXCollectionAttributeType attribType = new JMXCollectionAttributeType(ds, attribGroupType);
                    collectionResource.setAttributeValue(attribType, compositeSample.getCollectedValueAsString());
                }

                private AttributeGroupType getAttributeGroupType(Mbean mbean) {
                    //All JMX collected values are per node
                    final String groupName = JmxUtils.getGroupName(stringMap, mbean);
                    if (!groupNameAttributeGroupTypeMap.containsKey(groupName)) {
                        final AttributeGroupType attribGroupType = new AttributeGroupType(fixGroupName(groupName), AttributeGroupType.IF_TYPE_ALL);
                        groupNameAttributeGroupTypeMap.put(groupName, attribGroupType);
                    }
                    return groupNameAttributeGroupTypeMap.get(groupName);
                }
            });
        } catch (final Exception e) {
            LOG.debug("{} Collector.collect: IOException while collecting address: {}", serviceName, agent.getAddress(), e);
        }

        collectionSet.setStatus(ServiceCollector.COLLECTION_SUCCEEDED);
        return collectionSet;
    }

