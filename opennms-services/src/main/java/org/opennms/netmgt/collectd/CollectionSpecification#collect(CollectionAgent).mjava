    /**
     * <p>collect</p>
     *
     * @param agent a {@link org.opennms.netmgt.collection.api.CollectionAgent} object.
     * @return a {@link org.opennms.netmgt.collection.api.CollectionSet} object.
     * @throws org.opennms.netmgt.collection.api.CollectionException if any.
     */
    public CollectionSet collect(CollectionAgent agent) throws CollectionException {
        m_instrumentation.beginCollectorCollect(m_package.getName(), agent.getNodeId(), agent.getHostAddress(), m_svcName);
        try {
            final CollectionSet set = m_locationAwareCollectorClient.collect()
                .withAgent(agent)
                .withAttributes(getPropertyMap())
                .withCollector(getCollector())
                // Use the service interval as the TTL
                .withTimeToLive(getService().getInterval())
                .execute()
                .get();

            // There are collector implementations that never throw an exception just return a collection failed
            if (CollectionStatus.FAILED.equals(set.getStatus())) {
                m_instrumentation.reportCollectionException(m_package.getName(), agent.getNodeId(), agent.getHostAddress(), m_svcName, new CollectionFailed(CollectionStatus.FAILED));
            }
            return set;
        } catch (InterruptedException|ExecutionException e) {
            final CollectionException ce = RpcExceptionUtils.handleException(e, new RpcExceptionHandler<CollectionException>() {
                @Override
                public CollectionException onInterrupted(Throwable t) {
                    return new CollectionUnknown("Interrupted.", t);
                }

                @Override
                public CollectionException onTimedOut(Throwable t) {
                    return new CollectionUnknown("Request timed out.", t);
                }

                @Override
                public CollectionException onRejected(Throwable t) {
                    return new CollectionUnknown("Request rejected.", e);
                }

                @Override
                public CollectionException onUnknown(Throwable t) {
                    if (t instanceof CollectionException) {
                        return (CollectionException)t;
                    } else if (t.getCause() != null && t.getCause() instanceof CollectionException) {
                        return (CollectionException)t.getCause();
                    }
                    return new CollectionException("Collection failed.", t);
                }
            });
            m_instrumentation.reportCollectionException(m_package.getName(), agent.getNodeId(), agent.getHostAddress(), m_svcName, ce);
            throw ce;
        } finally {
            m_instrumentation.endCollectorCollect(m_package.getName(), agent.getNodeId(), agent.getHostAddress(), m_svcName);
        }
    }

