    /**
     * Perform data collection.
     * 
     * @param agent
     *            Network interface to be data collected.
     * @param eventProxy
     *            Eventy proxy for sending events.
     * @param parameters
     *            Key/value pairs from the package to which the interface
     *            belongs.
     */
    public int collect(CollectionAgent agent, EventProxy eventProxy, Map<String, String> parameters) {
        try {


            final ForceRescanState forceRescanState = new ForceRescanState(agent, eventProxy);
            final ServiceParameters params = new ServiceParameters(parameters);
            params.logIfAliasConfig();

            OnmsSnmpCollection snmpCollection = new OnmsSnmpCollection(agent, params);


            CollectionSet collectionSet = snmpCollection.createCollectionSet(agent);
            if (!collectionSet.hasDataToCollect()) {
                logNoDataToCollect(agent);
            }

            collectionSet.collect();

            if (collectionSet.rescanNeeded()) {
                forceRescanState.rescanIndicated();
            }

            collectionSet.saveAttributes(params);

            // return the status of the collection
            return ServiceCollector.COLLECTION_SUCCEEDED;
        } catch (CollectionError e) {
            return e.reportError();
        } catch (Throwable t) {
            return this.unexpected(agent, t);
        }
    }

