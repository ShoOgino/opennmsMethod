    /**
     * Perform data collection.
     * 
     * @param agent
     *            Network interface to be data collected.
     * @param eventProxy
     *            Eventy proxy for sending events.
     * @param parameters
     *            Key/value pairs from the package to which the interface
     *            belongs.
     */
    public CollectionSet collect(CollectionAgent agent, EventProxy eventProxy, Map<String, String> parameters) {
        try {
            

            // XXX: Experimental code that reuses the OnmsSnmpCollection
//            OnmsSnmpCollection snmpCollection = (OnmsSnmpCollection)agent.getAttribute("SNMP_COLLECTION");
//            ServiceParameters params = snmpCollection.getServiceParameters();
            
            // XXX: This code is commented out in light of the expermintal code above
            final ServiceParameters params = new ServiceParameters(parameters);
            params.logIfAliasConfig();
            OnmsSnmpCollection snmpCollection = new OnmsSnmpCollection(agent, params);

            final ForceRescanState forceRescanState = new ForceRescanState(agent, eventProxy);

            SnmpCollectionSet collectionSet = snmpCollection.createCollectionSet(agent);
            if (!collectionSet.hasDataToCollect()) {
                logNoDataToCollect(agent);
            }
            
            Collectd.instrumentation().beginCollectingServiceData(collectionSet.getCollectionAgent().getNodeId(), collectionSet.getCollectionAgent().getHostAddress(), serviceName());
            try {
                collectionSet.collect();
                if (collectionSet.rescanNeeded()) {
                    forceRescanState.rescanIndicated();
                }
//              Not done here anymore - see CollectableService
                //persistData(params, collectionSet);
                return collectionSet;
            } catch (CollectionWarning e) {
                Collectd.instrumentation().reportCollectionError(agent.getNodeId(), agent.getHostAddress(), serviceName(), e);
                e.reportError();
            } finally {
                Collectd.instrumentation().endCollectingServiceData(collectionSet.getCollectionAgent().getNodeId(), collectionSet.getCollectionAgent().getHostAddress(), serviceName());
            }
        } catch (Throwable t) {
            t.printStackTrace();
            log().error("Unexpected error during node SNMP collection for : " + agent.getHostAddress(), t);
        }
        return null;
    }

