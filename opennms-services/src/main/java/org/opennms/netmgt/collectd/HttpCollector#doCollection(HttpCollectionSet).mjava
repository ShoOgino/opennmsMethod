    /**
     * Performs HTTP collection.
     * 
     * Couple of notes to make the implementation of this client library
     * less obtuse:
     * 
     *   - HostConfiguration class is not created here because the library
     *     builds it when a URI is defined.
     *     
     * @param collectionSet
     * @throws HttpCollectorException
     */
    private void doCollection(final HttpCollectionSet collectionSet) throws HttpCollectorException {

        HttpClient client = null;
        HttpMethod method = null;
        
        try {
            client = new HttpClient(buildParams(collectionSet));
            method = buildHttpMethod(collectionSet);
            log().info("doCollection: collecting for client: "+client+" using method: "+method);
            client.executeMethod(method);
            List<HttpCollectionAttribute> butes = processResponse(method.getResponseBodyAsString(), collectionSet);
            
            if (butes.isEmpty()) {
                log().warn("doCollection: no attributes defined for collection where found in response text.");
                throw new HttpCollectorException("No attributes specified were found: ",client);
            }
            String collectionName = collectionSet.getParameters().get("http-collection");
            RrdRepository rrdRepository = HttpCollectionConfigFactory.getInstance().getRrdRepository(collectionName);
            ResourceIdentifier resource = new ResourceIdentifier() {

                public String getOwnerName() {
                    return collectionSet.getAgent().getHostAddress();
                }

                public File getResourceDir(RrdRepository repository) {
                    return new File(repository.getRrdBaseDir(), Integer.toString(collectionSet.getAgent().getNodeId()));
                }
                
            };
            
            log().info("doCollection: persisting "+butes.size()+" attributes");
            
            for (HttpCollectionAttribute attribute : butes) {
                PersistOperationBuilder builder = new PersistOperationBuilder(rrdRepository, resource, attribute.getName());
                builder.declareAttribute(attribute);
                log().debug("doCollection: setting attribute: "+attribute);
                builder.setAttributeValue(attribute, attribute.getValue());
                builder.commit();
            }
        } catch (URIException e) {
            throw new HttpCollectorException("Error building HttpClient URI", client);
        } catch (HttpException e) {
            throw new HttpCollectorException("Error building HttpMethod", client);
        } catch (IOException e) {
            throw new HttpCollectorException("IO Error retrieving page", client);
        } catch (RrdException e) {
            throw new HttpCollectorException("Error writing RRD", client);
        } finally {
            method.releaseConnection();
        }
    }

