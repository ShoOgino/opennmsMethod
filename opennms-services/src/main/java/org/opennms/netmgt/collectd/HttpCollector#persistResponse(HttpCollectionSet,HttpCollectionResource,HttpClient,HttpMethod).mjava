    private void persistResponse(final HttpCollectionSet collectionSet, HttpCollectionResource collectionResource, final HttpClient client, final HttpMethod method) throws IOException {
        List<HttpCollectionAttribute> butes = processResponse(method.getResponseBodyAsString(), collectionSet, collectionResource);
        if (butes.isEmpty()) {
            log().warn("doCollection: no attributes defined for collection were found in response text matching regular expression '" + collectionSet.getUriDef().getUrl().getMatches() + "'");
            throw new HttpCollectorException("No attributes specified were found: ", client);
        }
        
        //put the results into the collectionset for later
        collectionSet.storeResults(butes, collectionResource);
        //String collectionName = collectionSet.getParameters().get("http-collection");
        //RrdRepository rrdRepository = HttpCollectionConfigFactory.getInstance().getRrdRepository(collectionName);

        /*ResourceIdentifier resource = new ResourceIdentifier() {

            public String getOwnerName() {
                return collectionSet.getAgent().getHostAddress();
            }

            public File getResourceDir(RrdRepository repository) {
                return new File(repository.getRrdBaseDir(), Integer.toString(collectionSet.getAgent().getNodeId()));
            }
            
        }; */
        log().info("doCollection: persisting "+butes.size()+" attributes");
        
        // We don't persist here anymore - see CollectableService
        /*for (HttpCollectionAttribute attribute : butes) {
            PersistOperationBuilder builder = new PersistOperationBuilder(rrdRepository, resource, attribute.getName());
            builder.declareAttribute(attribute);
            log().debug("doCollection: setting attribute: "+attribute);
            builder.setAttributeValue(attribute, attribute.getValueAsString());
            builder.commit();
        }*/
    }

