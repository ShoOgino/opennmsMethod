    /**
     * {@inheritDoc}
     *
     * Responsible for performing all necessary initialization for the
     * specified interface in preparation for data collection.
     */
    public void initialize(CollectionAgent agent, Map<String, String> parameters) {
        InetAddress ipAddr = (InetAddress) agent.getAddress();

        // Retrieve the name of the JMX data collector
        String collectionName = ParameterMap.getKeyedString(parameters, "collection", serviceName);

        final String hostAddress = ipAddr.getHostAddress();
        LogUtils.debugf(this, "initialize: InetAddress=%s, collectionName=%s", hostAddress, collectionName);

        java.sql.Connection dbConn = null;
        final DBUtils d = new DBUtils(getClass());
        try {
            dbConn = DataSourceFactory.getInstance().getConnection();
            d.watch(dbConn);
        } catch (final SQLException e) {
            LogUtils.errorf(this, e, "initialize: Failed getting connection to the database.");
            throw new UndeclaredThrowableException(e);
        }

        int nodeID = -1;

        /*
         * Prepare & execute the SQL statement to get the 'nodeid' from the
         * ipInterface table 'nodeid' will be used to retrieve the node's
         * system object id from the node table.
         * In addition to nodeid, the interface's ifIndex
         * fields are also retrieved.
         */
        PreparedStatement stmt = null;

        try {
            stmt = dbConn.prepareStatement(SQL_GET_NODEID);
            d.watch(stmt);
            stmt.setString(1, hostAddress); // interface address
            ResultSet rs = stmt.executeQuery();
            d.watch(rs);

            if (rs.next()) {
                nodeID = rs.getInt(1);
                if (rs.wasNull()) {
                    nodeID = -1;
                }
            } else {
                nodeID = -1;
            }
        } catch (final SQLException e) {
            final String message = "initialize: exception while attempting to retrieve node id for interface " + hostAddress;
            LogUtils.errorf(this, e, message);
            throw new RuntimeException(message);
        } finally {
            d.cleanUp();
        }

        JMXNodeInfo nodeInfo = new JMXNodeInfo(nodeID);
        LogUtils.debugf(this, "nodeInfo: %s %d %s", hostAddress, nodeID, agent);

        /*
         * Retrieve list of MBean objects to be collected from the
         * remote agent which are to be stored in the node-level RRD file.
         * These objects pertain to the node itself not any individual
         * interfaces.
         */
        Map<String, List<Attrib>> attrMap = JMXDataCollectionConfigFactory.getInstance().getAttributeMap(collectionName, serviceName, hostAddress);
        nodeInfo.setAttributeMap(attrMap);

        Map<String, JMXDataSource> dsList = buildDataSourceList(collectionName, attrMap);
        nodeInfo.setDsMap(dsList);
        nodeInfo.setMBeans(JMXDataCollectionConfigFactory.getInstance().getMBeanInfo(collectionName));

        // Add the JMXNodeInfo object as an attribute of the interface
        agent.setAttribute(NODE_INFO_KEY, nodeInfo);
        agent.setAttribute("collectionName", collectionName);

    }

