    public synchronized void onInit() {
        Assert.state(m_trapdIpMgr != null, "trapdIpMgr must be set");
        Assert.state(m_eventReader != null, "eventReader must be set");
        Assert.state(m_backlogQ != null, "backlogQ must be set");
        Assert.state(m_snmpTrapPort != null, "snmpTrapPort must be set");
        Assert.state(m_processor != null, "processor must be set");

        try {
            m_trapdIpMgr.dataSourceSync();
        } catch (SQLException e) {
            log().error("Failed to load known IP address list: " + e, e);
            throw new UndeclaredThrowableException(e);
        }

        try {
            SnmpUtils.registerForTraps(this, this, getSnmpTrapPort());
            m_registeredForTraps = true;

            log().debug("start: Creating the trap session");
        } catch (IOException e) {
            if (e instanceof java.net.BindException) {
                managerLog().error("Failed to listen on SNMP trap port, perhaps something else is already listening?", e);
                log().error("Failed to listen on SNMP trap port, perhaps something else is already listening?", e);
            } else {
                log().error("Failed to initialize SNMP trap socket", e);
            }
            throw new UndeclaredThrowableException(e);
        }

        try {
            m_eventReader.open();
        } catch (Exception e) {
            log().error("Failed to open event reader: " + e, e);
            throw new UndeclaredThrowableException(e);
        }
    }

