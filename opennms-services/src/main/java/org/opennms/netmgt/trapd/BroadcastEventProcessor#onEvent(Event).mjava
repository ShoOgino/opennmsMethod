    /**
     * {@inheritDoc}
     *
     * This method is invoked by the EventIpcManager when a new event is
     * available for processing. Each message is examined for its Universal
     * Event Identifier and the appropriate action is taking based on each UEI.
     */
    @Override
    public void onEvent(Event event) {

        String eventUei = event.getUei();
        if (eventUei == null) {
            LOG.warn("Received an unexpected event with a null UEI");
            return;
        }

        LOG.debug("Received event: " + eventUei);

        if (eventUei.equals(EventConstants.NODE_GAINED_INTERFACE_EVENT_UEI)
            || eventUei.equals(EventConstants.INTERFACE_REPARENTED_EVENT_UEI)) {
            String action = eventUei.equals(EventConstants.INTERFACE_REPARENTED_EVENT_UEI) ?
                "reparent" : "add";
            if (Long.toString(event.getNodeid()) == null) {
                LOG.warn("Not {}ing interface to known node list: nodeId is null", action);
            } else if (event.getInterface() == null) {
                LOG.warn("Not {}ing interface to known node list: interface is null", action);
            } else {
                m_trapdIpMgr.setNodeId(event.getInterface(), event.getNodeid());
                LOG.debug("Successfully {}ed {} to known node list", action, event.getInterface());
            }
        } else if (eventUei.equals(EventConstants.INTERFACE_DELETED_EVENT_UEI)) {
            if (event.getInterface() != null) {
                m_trapdIpMgr.removeNodeId(event.getInterface());
                LOG.debug("Removed {} from known node list", event.getInterface());
            }
        } else {
            LOG.warn("Received an unexpected event with UEI of \"{}\"" , eventUei);
        }
    }

