    /**
     * <p>onInit</p>
     */
    @Override
    protected synchronized void onInit() {

        // load the rtc configuration
        RTCConfigFactory rFactory = null;
        try {
            RTCConfigFactory.reload();
            rFactory = RTCConfigFactory.getInstance();

        } catch (IOException ex) {
            log().error("Failed to load rtc configuration", ex);
            throw new UndeclaredThrowableException(ex);
        } catch (MarshalException ex) {
            log().error("Failed to load rtc configuration", ex);
            throw new UndeclaredThrowableException(ex);
        } catch (ValidationException ex) {
            log().error("Failed to load rtc configuration", ex);
            throw new UndeclaredThrowableException(ex);
        }

        //
        // Get the required attributes
        //

        // parse the rolling window info
        m_rollingWindow = rFactory.getRollingWindow();

        // get maxEventsBeforeResend
        MAX_EVENTS_BEFORE_RESEND = rFactory.getMaxEventsBeforeResend();

        // parse the low threshold interval
        m_lowThresholdInterval = rFactory.getLowThresholdInterval();

        // parse the high threshold interval
        m_highThresholdInterval = rFactory.getHighThresholdInterval();

        // parse the user threshold interval
        String ur = rFactory.getUserRefreshIntervalStr();
        if (ur != null) {
            try {
                m_userRefreshInterval = rFactory.getUserRefreshInterval();
            } catch (Throwable nfE) {
                log().warn("User refresh time has an incorrect format - using 1 minute instead");
                m_userRefreshInterval = 60 * 1000;
            }
        } else {
            log().warn("User refresh time not specified - using 1 minute instead");
            m_userRefreshInterval = 60 * 1000;
        }

        // high and low thresholds cannot be the same
        if (m_highThresholdInterval == m_lowThresholdInterval) {
            throw new RuntimeException("The values for the high and low threshold intervals CANNOT BE EQUAL");
        }

        // if high threshold is smaller than the low threshold, swap 'em
        if (m_highThresholdInterval < m_lowThresholdInterval) {
            log().warn("Swapping high and low threshold intervals..");
            long tmp = m_highThresholdInterval;
            m_highThresholdInterval = m_lowThresholdInterval;
            m_lowThresholdInterval = tmp;
        }

        log().info("Rolling Window: " + m_rollingWindow + "(milliseconds)");
        log().info("Low Threshold Refresh Interval: " + m_lowThresholdInterval + "(milliseconds)");
        log().info("High Threshold Refresh Interval: " + m_highThresholdInterval + "(milliseconds)");
        log().info("User Refresh Interval: " + m_userRefreshInterval + "(milliseconds)");

        // Intialize the data from the database
        try {
            m_dataMgr = new DataManager();
        } catch (Throwable ex) {
            throw new UndeclaredThrowableException(ex);
        }

        m_updaterPool = Executors.newFixedThreadPool(
            rFactory.getUpdaters(),
            new LogPreservingThreadFactory(getClass().getSimpleName(), rFactory.getUpdaters())
        );

        if (log().isDebugEnabled())
            log().debug("Created updater pool");

        m_eventReceiver = new BroadcastEventProcessor(m_updaterPool);
        if (log().isDebugEnabled())
            log().debug("Created event receiver");

        // create the data sender
        m_dataSender = new DataSender(getCategories(), rFactory.getSenders());
        log().debug("Created DataSender");

        // create the timer
        m_timer = new Timer();

        if (log().isDebugEnabled()) {
            log().debug("RTC ready to receive events");
        }
    }

