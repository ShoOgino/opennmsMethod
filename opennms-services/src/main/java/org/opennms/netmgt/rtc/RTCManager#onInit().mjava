    /**
     * <p>onInit</p>
     */
    @Override
    protected synchronized void onInit() {

        //
        // Get the required attributes
        //

        // parse the rolling window info
        m_rollingWindow = m_configFactory.getRollingWindow();

        // get maxEventsBeforeResend
        MAX_EVENTS_BEFORE_RESEND = m_configFactory.getMaxEventsBeforeResend();

        // parse the low threshold interval
        m_lowThresholdInterval = m_configFactory.getLowThresholdInterval();

        // parse the high threshold interval
        m_highThresholdInterval = m_configFactory.getHighThresholdInterval();

        // parse the user threshold interval
        String ur = m_configFactory.getUserRefreshIntervalStr();
        if (ur != null) {
            try {
                m_userRefreshInterval = m_configFactory.getUserRefreshInterval();
            } catch (Throwable nfE) {
                log().warn("User refresh time has an incorrect format - using 1 minute instead");
                m_userRefreshInterval = 60 * 1000;
            }
        } else {
            log().warn("User refresh time not specified - using 1 minute instead");
            m_userRefreshInterval = 60 * 1000;
        }

        // high and low thresholds cannot be the same
        if (m_highThresholdInterval == m_lowThresholdInterval) {
            throw new RuntimeException("The values for the high and low threshold intervals CANNOT BE EQUAL");
        }

        // if high threshold is smaller than the low threshold, swap 'em
        if (m_highThresholdInterval < m_lowThresholdInterval) {
            log().warn("Swapping high and low threshold intervals..");
            long tmp = m_highThresholdInterval;
            m_highThresholdInterval = m_lowThresholdInterval;
            m_lowThresholdInterval = tmp;
        }

        log().info("Rolling Window: " + m_rollingWindow + "(milliseconds)");
        log().info("Low Threshold Refresh Interval: " + m_lowThresholdInterval + "(milliseconds)");
        log().info("High Threshold Refresh Interval: " + m_highThresholdInterval + "(milliseconds)");
        log().info("User Refresh Interval: " + m_userRefreshInterval + "(milliseconds)");

        // create the data sender
        m_dataSender = new DataSender(m_dataMgr, m_configFactory);
        log().debug("Created DataSender");

        // create the timer
        m_timer = new Timer();

        if (log().isDebugEnabled()) {
            log().debug("RTC ready to receive events");
        }
    }

