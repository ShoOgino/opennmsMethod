    /**
     * Remove node from the map and the categories on a 'serviceDeleted' event.
     *
     * @param nodeid
     *            the nodeid on which service was deleted
     * @param ip
     *            the ip on which service was deleted
     * @param svcName
     *            the service that was deleted
     */
    public synchronized void serviceDeleted(int nodeid, InetAddress ip, String svcName) {
        // create lookup key
        RTCNodeKey key = new RTCNodeKey(nodeid, ip, svcName);

        // lookup the node
        RTCNode rtcN = m_map.getRTCNode(key);
        if (rtcN == null) {
            LOG.warn("Received a {} event for an unknown node: {}", EventConstants.SERVICE_DELETED_EVENT_UEI, key.toString());

            return;
        }

        //
        // Go through from all the categories this node belongs to
        // and delete the service
        //
        List<String> categories = rtcN.getCategories();
        ListIterator<String> catIter = categories.listIterator();
        while (catIter.hasNext()) {
            String catlabel = (String) catIter.next();

            RTCCategory cat = (RTCCategory) m_categories.get(catlabel);

            // get nodes in this category
            List<Integer> catNodes = cat.getNodes();

            // check if the category contains this node
            Long tmpNodeid = Long.valueOf(rtcN.getNodeID());
            int nIndex = catNodes.indexOf(tmpNodeid);
            if (nIndex != -1) {
                // remove from the category if it is the only service left.
                if (m_map.getServiceCount(nodeid, catlabel) == 1) {
                    catNodes.remove(nIndex);
                    LOG.info("Removing node from category: {}", catlabel);
                }

                // let the node know that this category is out
                catIter.remove();
            }
        }

        // finally remove from map
        
        m_map.delete(rtcN);

    }

