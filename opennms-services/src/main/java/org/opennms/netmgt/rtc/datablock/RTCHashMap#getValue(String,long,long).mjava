    /**
     * Get the value (uptime) for a category in the last 'rollingWindow'
     * starting at current time
     *
     * @param catLabel
     *            the category to which the node should belong to
     * @param curTime
     *            the current time
     * @param rollingWindow
     *            the window for which value is to be calculated
     * @return the value(uptime) for the node
     */
    public double getValue(String catLabel, long curTime, long rollingWindow) {
        // total outage time
        double outageTime = 0.0;

        // number of entries for this node
        int count = 0;

        // get all nodes in the hashtable
        for (Long key : getNodeIDs()) {
            List<RTCNode> valList = getRTCNodes(key.longValue());
            if (valList == null || valList.size() == 0) {
                continue;
            }

            for (RTCNode node : valList) {
                try {
                    long downTime = node.getDownTime(catLabel, curTime, rollingWindow);
                    count++;
                    outageTime += downTime;
                } catch (NodeNotInCategoryException e) {
                    continue;
                }
            }
        }

        return getOutagePercentage(outageTime, rollingWindow, count);
    }

