    /**
     * Loop through the categories and send out data for all categories that
     * have changed
     */
    public synchronized void sendData() {
        LOG.debug("In DataSender sendData()");

        // loop through and send info
        for (final RTCCategory cat : m_categories.values()) {
            // get label
            final String catlabel = cat.getLabel();
            LOG.debug("DataSender:sendData(): Category '{}'", catlabel);

            // get the post info for this category
            final Set<HttpPostInfo> urlList = m_catUrlMap.get(catlabel);
            if (urlList == null || urlList.size() <= 0) {
                // a category that no one is listening for?
                LOG.debug("DataSender: category '{}' has no listeners", catlabel);
                continue;
            }

            LOG.debug("DataSender: category '{}' has listeners - converting to xml...", catlabel);

            // Run at a higher than normal priority since we do have to send
            // the update on time
            final int oldPriority = setCurrentThreadPriority(Thread.MAX_PRIORITY);

            final EuiLevel euidata;
            try {
                euidata = m_euiMapper.convertToEuiLevelXML(cat);
            } catch (final Throwable t) {
                LOG.warn("DataSender: unable to convert data to xml for category: '{}'", catlabel, t);
                setCurrentThreadPriority(Thread.NORM_PRIORITY);
                continue;
            }

            // do a HTTP POST if subscribed
            if (urlList != null && urlList.size() > 0) {
                final Iterator<HttpPostInfo> urlIter = urlList.iterator();
                while (urlIter.hasNext()) {
                    final HttpPostInfo postInfo = urlIter.next();

                    Reader inr = null;
                    InputStream inp = null;
                    try {
                        inr = new PipedMarshaller(euidata).getReader();
                        LOG.debug("DataSender: posting data to: {}", postInfo.getURLString());
                        inp = HttpUtils.post(postInfo.getURL(), inr, postInfo.getUser(), postInfo.getPassword(), 8 * HttpUtils.DEFAULT_POST_BUFFER_SIZE);
                        LOG.debug("DataSender: posted data for category: {}", catlabel);


                        final byte[] tmp = new byte[1024];
                        int bytesRead;
                        while ((bytesRead = inp.read(tmp)) != -1) {
                            if (LOG.isDebugEnabled()) {
                                if (bytesRead > 0) {
                                    LOG.debug("DataSender: post response: {}", new String(tmp, 0, bytesRead));
                                }
                            }
                        }

                        postInfo.clearErrors();

                    } catch (final Throwable t) {
                        LOG.warn("DataSender: unable to send data for category: {} due to {}: {}", catlabel, t.getClass().getName(), t.getMessage(), t);
                        postInfo.incrementErrors();
                        setCurrentThreadPriority(Thread.NORM_PRIORITY);
                    } finally {
                        IOUtils.closeQuietly(inp);
                        IOUtils.closeQuietly(inr);
                    }

                    // check to see if URL had too many errors
                    if (POST_ERROR_LIMIT > 0 && postInfo.getErrors() >= POST_ERROR_LIMIT) {
                        // unsubscribe the URL
                        urlIter.remove();

                        LOG.warn("URL {} UNSUBSCRIBED due to reaching error limit {}", postInfo.getURLString(), postInfo.getErrors());
                    }
                }
            }

            // return current thread to its previous priority
            setCurrentThreadPriority(oldPriority);
        }
    }

