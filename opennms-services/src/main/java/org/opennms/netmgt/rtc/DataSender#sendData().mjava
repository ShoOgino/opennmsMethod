    /**
     * Loop through the categories and send out data for all categories that
     * have changed
     */
    public synchronized void sendData() {
        Category log = ThreadCategory.getInstance(this.getClass());

        log.debug("In DataSender sendData()");

        // loop through and send info
        Iterator catsIter = m_categories.values().iterator();
        while (catsIter.hasNext()) {
            RTCCategory cat = (RTCCategory) catsIter.next();

            // get label
            String catlabel = cat.getLabel();

            if (log.isDebugEnabled())
                log.debug("DataSender:sendData(): Category \'" + catlabel);

            // get the post info for this category
            List urlList = (List) m_catUrlMap.get(catlabel);
            if (urlList == null || urlList.size() <= 0) {
                // a category that no one is listening for?
                if (log.isDebugEnabled())
                    log.debug("DataSender: category \'" + catlabel + "\' has no listeners");

                continue;
            }

            if (log.isDebugEnabled())
                log.debug("DataSender: category \'" + catlabel + "\' has listeners - converting to xml...");

            // Run at a higher than normal priority since we do have to send
            // the update on time
            int oldPriority = setCurrentThreadPriority(Thread.MAX_PRIORITY);

            EuiLevel euidata = null;
            try {
                euidata = m_euiMapper.convertToEuiLevelXML(cat);
            } catch (java.lang.OutOfMemoryError oe) {
                log.warn("DataSender: unable to convert data to xml for category: " + catlabel, oe);
                setCurrentThreadPriority(Thread.NORM_PRIORITY);
                continue;
            } catch (Throwable t) {
                log.warn("DataSender: unable to convert data to xml for category: " + catlabel, t);
                setCurrentThreadPriority(Thread.NORM_PRIORITY);
            }

            // do a HTTP POST if subscribed
            if (urlList != null && urlList.size() > 0) {
                Iterator urlIter = urlList.listIterator();
                while (urlIter.hasNext()) {
                    HttpPostInfo postInfo = (HttpPostInfo) urlIter.next();

                    try {
                        Reader inr = new PipedMarshaller(euidata).getReader();

                        if (log.isDebugEnabled())
                            log.debug("DataSender: posting data to: " + postInfo.getURLString());

                        InputStream inp = HttpUtils.post(postInfo.getURL(), inr, postInfo.getUser(), postInfo.getPassword(), 8 * HttpUtils.DEFAULT_POST_BUFFER_SIZE);

                        if (log.isDebugEnabled())
                            log.debug("DataSender: posted data for category: " + catlabel);

                        byte[] tmp = new byte[1024];
                        int bytesRead;
                        while ((bytesRead = inp.read(tmp)) != -1) {
                            if (log.isDebugEnabled()) {
                                if (bytesRead > 0)
                                    log.debug("DataSender: post response: " + new String(tmp, 0, bytesRead));
                            }
                        }

                        inp.close();
                        inr.close();

                        postInfo.clearErrors();

                    } catch (IOException e) {
                        log.warn("DataSender: unable to send data for category: " + catlabel + " due to " + e.getClass().getName() + ": " + e.getMessage(), e);
                        postInfo.incrementErrors();
                        setCurrentThreadPriority(Thread.NORM_PRIORITY);
                    } catch (java.lang.OutOfMemoryError e) {
                        log.warn("DataSender: unable to send data for category: " + catlabel + " due to " + e.getClass().getName() + ": " + e.getMessage(), e);
                        setCurrentThreadPriority(Thread.NORM_PRIORITY);
                    } catch (RuntimeException e) {
                        log.warn("DataSender: unable to send data for category: " + catlabel + " due to " + e.getClass().getName() + ": " + e.getMessage(), e);
                        setCurrentThreadPriority(Thread.NORM_PRIORITY);
                    } catch (Throwable t) {
                        log.warn("DataSender: unable to send data for category: " + catlabel + " due to " + t.getClass().getName() + ": " + t.getMessage(), t);
                        setCurrentThreadPriority(Thread.NORM_PRIORITY);
                    }

                    // check to see if URL had too many errors
                    if (POST_ERROR_LIMIT > 0 && postInfo.getErrors() >= POST_ERROR_LIMIT) {
                        // unsubscribe the URL
                        urlIter.remove();

                        log.warn("URL " + postInfo.getURLString() + " UNSUBSCRIBED due to reaching error limit " + postInfo.getErrors());
                    }
                }
            }

            // return current thread to its previous priority
            oldPriority = setCurrentThreadPriority(oldPriority);
        }
    }

