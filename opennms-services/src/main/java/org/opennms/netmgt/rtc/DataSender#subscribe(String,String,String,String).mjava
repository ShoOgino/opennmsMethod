    /**
     * Subscribe - Add the received URL and related info to the category->URLs map
     * so the sendData() can send out to appropriate URLs for each category.
     * Also send the latest info for the category
     *
     * @param url a {@link java.lang.String} object.
     * @param catlabel a {@link java.lang.String} object.
     * @param user a {@link java.lang.String} object.
     * @param passwd a {@link java.lang.String} object.
     */
    public synchronized void subscribe(final String url, final String catlabel, final String user, final String passwd) {
        // send category data to the newly subscribed URL
        // look up info for this category
        final RTCCategory cat = m_categories.get(catlabel);
        if (cat == null) {
            // oops! category for which we have no info!
            LOG.warn("RTC: No information available for category: {}", catlabel);
            return;
        }

        // create new HttpPostInfo
        final HttpPostInfo postInfo;
        try {
            postInfo = new HttpPostInfo(url, catlabel, user, passwd);
        } catch (final MalformedURLException mue) {
            LOG.warn("ERROR subscribing: Invalid URL '{}' - Data WILL NOT be SENT to the specified url", url);
            return;
        }

        // Add the URL to the list for the specified category
        Set<HttpPostInfo> urlList = m_catUrlMap.get(catlabel);
        if (urlList == null) {
            urlList = new HashSet<HttpPostInfo>();
            m_catUrlMap.put(catlabel, urlList);
        }

        if (!urlList.add(postInfo)) {
            LOG.debug("Already subscribed to URL: {}\tcatlabel: {}\tuser: {} - IGNORING LATEST subscribe event", url, catlabel, user);
        } else {
            LOG.debug("Subscribed to URL: {}\tcatlabel: {}\tuser:{}", url, catlabel, user);
        }

        // send data
        InputStream inp = null;
        try {
            LOG.debug("DataSender: posting data to: {}", url);

            // Run at a higher than normal priority since we do have to send
            // the update on time
            final int oldPriority = setCurrentThreadPriority(Thread.MAX_PRIORITY);

            final EuiLevel euidata = m_euiMapper.convertToEuiLevelXML(cat);
            final String marshaledUeiData = JaxbUtils.marshal(euidata);
            try(final StringReader inr = new StringReader(marshaledUeiData)) {
                inp = HttpUtils.post(postInfo.getURL(), inr, user, passwd, 8 * HttpUtils.DEFAULT_POST_BUFFER_SIZE);
            }

            final byte[] tmp = new byte[1024];
            int bytesRead;
            while ((bytesRead = inp.read(tmp)) != -1) {
                if (LOG.isDebugEnabled()) {
                    if (bytesRead > 0) {
                        LOG.debug("DataSender: post response: {}", new String(tmp, 0, bytesRead));
                    }
                }
            }

            // return current thread to its previous priority
            setCurrentThreadPriority(oldPriority);

            LOG.debug("DataSender: posted data for category: {}", catlabel);
        } catch (final Throwable t) {
            LOG.warn("DataSender:  Unable to send category '{}' to URL '{}'", catlabel, url, t);
            setCurrentThreadPriority(Thread.NORM_PRIORITY);
        } finally {
            IOUtils.closeQuietly(inp);
        }
    }

