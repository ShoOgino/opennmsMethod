    /**
     * Subscribe - Add the received URL and related info to the category->URLs map
     * so the sendData() can send out to appropriate URLs for each category.
     * Also send the latest info for the category
     *
     * @param url a {@link java.lang.String} object.
     * @param catlabel a {@link java.lang.String} object.
     * @param user a {@link java.lang.String} object.
     * @param passwd a {@link java.lang.String} object.
     */
    public synchronized void subscribe(String url, String catlabel, String user, String passwd) {
        // send category data to the newly subscribed URL
        // look up info for this category
        RTCCategory cat = m_categories.get(catlabel);
        if (cat == null) {
            // oops! category for which we have no info!
            LOG.warn("RTC: No information available for category: " + catlabel);
            return;
        }

        // create new HttpPostInfo
        HttpPostInfo postInfo = null;
        try {
            postInfo = new HttpPostInfo(url, catlabel, user, passwd);
        } catch (MalformedURLException mue) {
            LOG.warn("ERROR subscribing: Invalid URL \'" + url + "\' - Data WILL NOT be SENT to the specified url");
            return;
        }

        // Add the URL to the list for the specified category
        Set<HttpPostInfo> urlList = m_catUrlMap.get(catlabel);
        if (urlList == null) {
            urlList = new HashSet<HttpPostInfo>();
            m_catUrlMap.put(catlabel, urlList);
        }
        
        if (!urlList.add(postInfo) && LOG.isDebugEnabled()) {
            LOG.debug("Already subscribed to URL: " + url + "\tcatlabel: " + catlabel + "\tuser:" + user + " - IGNORING LATEST subscribe event");
        } else {
            if (LOG.isDebugEnabled()) {
                LOG.debug("Subscribed to URL: " + url + "\tcatlabel: " + catlabel + "\tuser:" + user);
            }
        }

        // send data
        Reader inr = null;
        InputStream inp = null;
        try {
            // Run at a higher than normal priority since we do have to send
            // the update on time
            int oldPriority = setCurrentThreadPriority(Thread.MAX_PRIORITY);

            EuiLevel euidata = m_euiMapper.convertToEuiLevelXML(cat);

            inr = new PipedMarshaller(euidata).getReader();

            if (LOG.isDebugEnabled())
                LOG.debug("DataSender: posting data to: " + url);

            inp = HttpUtils.post(postInfo.getURL(), inr, user, passwd, 8 * HttpUtils.DEFAULT_POST_BUFFER_SIZE);

            byte[] tmp = new byte[1024];
            int bytesRead;
            while ((bytesRead = inp.read(tmp)) != -1) {
                if (LOG.isDebugEnabled()) {
                    if (bytesRead > 0)
                        LOG.debug("DataSender: post response: " + new String(tmp, 0, bytesRead));
                }
            }

            // return current thread to its previous priority
            oldPriority = setCurrentThreadPriority(oldPriority);

            if (LOG.isDebugEnabled())
                LOG.debug("DataSender: posted data for category: " + catlabel);
        } catch (IOException ioE) {
            LOG.warn("DataSender:  Unable to send category \'" + catlabel + "\' to URL \'" + url + "\': ", ioE);
            setCurrentThreadPriority(Thread.NORM_PRIORITY);
        } catch (java.lang.OutOfMemoryError oe) {
            LOG.warn("DataSender:  Unable to send category \'" + catlabel + "\' to URL \'" + url + "\': ", oe);
            setCurrentThreadPriority(Thread.NORM_PRIORITY);
        } catch (RuntimeException e) {
            LOG.warn("DataSender:  Unable to send category \'" + catlabel + "\' to URL \'" + url + "\': ", e);
            setCurrentThreadPriority(Thread.NORM_PRIORITY);
        } catch (Throwable t) {
            LOG.warn("DataSender:  Unable to send category \'" + catlabel + "\' to URL \'" + url + "\': ", t);
            setCurrentThreadPriority(Thread.NORM_PRIORITY);
        } finally {
            IOUtils.closeQuietly(inp);
            IOUtils.closeQuietly(inr);
        }
    }

