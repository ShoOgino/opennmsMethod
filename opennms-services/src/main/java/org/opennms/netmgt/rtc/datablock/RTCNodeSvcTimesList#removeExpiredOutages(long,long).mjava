    /**
     * Remove expired outages. Remove closed outages that are not in the the
     * last 'rollingWindow' starting from curTime.
     * 
     * @param curTime
     *            the current time to start from.
     * @param rollingWindow
     *            the rolling window to use.
     */
    private void removeExpiredOutages(long curTime, long rollingWindow) {
        // the start of the rolling window
        long startTime = curTime - rollingWindow;

        for (ListIterator<RTCNodeSvcTime> iter = listIterator(); iter.hasNext();) {
            RTCNodeSvcTime svcTime = (RTCNodeSvcTime) iter.next();

            // since new outages are added at the end, if this outage
            // has not expired we can safely break from the loop
            if (svcTime.getLostTime() >= startTime) {
                break;
            }

            if (svcTime.hasExpired(startTime)) {
                iter.remove();
            }
        }
    }

