    /**
     * Unsubscribe - remove the received URL and related info from the
     * category->URLs map so the sendData() will know when it sends data out
     *
     * @param urlStr a {@link java.lang.String} object.
     */
    public synchronized void unsubscribe(final String urlStr) {
        URL url = null;

        try {
            url = new URL(urlStr);
        } catch (MalformedURLException mue) {
            LOG.warn("ERROR unsubscribing: Invalid URL: " + url);
            return;
        }

        // go through the hashtable entries and remove entries with
        // the specified URL
        Set<HttpPostInfo> value;
        for (String key : m_catUrlMap.keySet()) {
            value = m_catUrlMap.get(key);

            if (value == null)
                continue;

            Iterator<HttpPostInfo> postSet = value.iterator();
            while (postSet.hasNext()) {
                HttpPostInfo postInfo = postSet.next();
                if (url.equals(postInfo.getURL())) {
                    postSet.remove();
                }
            }
        }

        if (LOG.isDebugEnabled())
            LOG.debug("Unsubscribed URL: " + url);
    }

