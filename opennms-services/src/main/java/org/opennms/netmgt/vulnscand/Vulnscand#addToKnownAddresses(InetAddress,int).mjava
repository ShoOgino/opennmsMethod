	/**
	 * Creates a NessusScanConfiguration object representing the specified node
	 * and adds it to the known node list for scheduling.
	 * 
	 * @param address
	 *            the internet address.
	 * @param scanLevel
	 *            the scan level.
	 * @param scheduler TODO
	 * @throws SQLException
	 *             if there is any problem accessing the database
	 */
	void addToKnownAddresses(InetAddress address, int scanLevel) throws SQLException {
	    // Retrieve last poll time for the node from the ipInterface
	    // table.
		
	    Connection db = null;
        final DBUtils d = new DBUtils(getClass());
	    try {
	        db = DataSourceFactory.getInstance().getConnection();
	        d.watch(db);
	        PreparedStatement ifStmt = db.prepareStatement(Vulnscand.SQL_GET_LAST_POLL_TIME);
	        d.watch(ifStmt);
	        ifStmt.setString(1, address.getHostAddress());
	        ResultSet rset = ifStmt.executeQuery();
	        d.watch(rset);
	        Category log = log();
			if (rset.next()) {
	            Timestamp lastPolled = rset.getTimestamp(1);
	            if (lastPolled != null && rset.wasNull() == false) {
	                if (log.isDebugEnabled())
	                    log.debug("scheduleAddress: adding node " + address + " with last poll time " + lastPolled);
						//try {
	                    m_scheduler.schedule(address, new NessusScanConfiguration(address, scanLevel, lastPolled, getInterval()));
	                //} catch (UnknownHostException ex) {
	                  //  log.error("Could not add invalid address to schedule: " + address, ex);
	                //}
	            }
	        } else {
	            if (log.isDebugEnabled())
	                log.debug("scheduleAddress: adding ipAddr " + address + " with no previous poll");
				m_scheduler.schedule(address, new NessusScanConfiguration(address, scanLevel, new Timestamp(0), getInterval()));
	        }
	    } finally {
	        d.cleanUp();
	    }
	}

