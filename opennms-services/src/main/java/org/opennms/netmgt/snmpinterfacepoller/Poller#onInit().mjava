    @Override
    protected void onInit() {
        
        // reset the alarm table
        //
        try {
            log().debug("start: Deleting snmppoll alarms from alarm table");

            deleteExistingSnmpPollAlarms();
        } catch (Exception sqlE) {
            log().error("start: Failed to delete existing snmppoll alarms", sqlE);
        }
        createScheduler();
        
        // Schedule the interfaces currently in the database
        //
        try {
            log().debug("start: Scheduling existing snmp interfaces polling");

            scheduleExistingSnmpInterface();
        } catch (Exception sqlE) {
            log().error("start: Failed to schedule existing interfaces", sqlE);
        }

        // Create an event receiver. The receiver will
        // receive events, process them, creates network
        // interfaces, and schedulers them.
        //
        try {
            log().debug("start: Creating event broadcast event processor");

            setEventProcessor(new SnmpInterfacePollerEventProcessor(this));
        } catch (Throwable t) {
            log().fatal("start: Failed to initialized the broadcast event receiver", t);

            throw new UndeclaredThrowableException(t);
        }

        m_initialized = true;
        
    }

