    private void scheduleSnmpCollection(PollableSnmpInterface node, String criteria, long interval) {
        criteria = criteria + " and nodeid = " + node.getParent().getNodeid();
        List<OnmsSnmpInterface> snmpinterfacelist = getQueryManager().getSnmpInterfaces(criteria);
        if (snmpinterfacelist !=  null && snmpinterfacelist.size() > 0) {
            node.setSnmpinterfaces(snmpinterfacelist);
            if (m_nodeAlarmStatusMap.containsKey(node.getParent().getNodeid()))
                node.setAlarmStatus(m_nodeAlarmStatusMap.get(node.getParent().getNodeid()));
            else 
                node.setAlarmStatus(new HashMap<Integer,AlarmStatus>());
            
            PollableSnmpInterfaceConfig nodeconfig = new PollableSnmpInterfaceConfig(getScheduler(),interval);

            node.setSnmppollableconfig(nodeconfig);

            synchronized(node) {
                if (node.getSchedule() == null) {
                    log().debug("Scheduling node: " + node.getParent().getIpaddress());
                    Schedule schedule = new Schedule(node, nodeconfig, getScheduler());
                    node.setSchedule(schedule);
                }
            }
        
            node.schedule();
        } else {
            log().info("no interface found for node/criteria:" + node.getParent().getNodeid() + "/" + criteria);
        }
    }

