    /**
     * <p>reloadSnmpConfig</p>
     *
     * @param event a {@link org.opennms.netmgt.xml.event.Event} object.
     */
    @EventHandler(uei = EventConstants.CONFIGURE_SNMP_EVENT_UEI)
    public void reloadSnmpConfig(Event event) {
        log().debug("reloadSnmpConfig: managing event: " + event.getUei());
        try {
            Thread.sleep(5000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        
        SnmpEventInfo info = null;
        try {
            info = new SnmpEventInfo(event);
            
            if (info == null) {
                log().error("reloadSnmpConfig: event contained invalid parameters.  "+event);
                return;
            }

            if (StringUtils.isBlank(info.getFirstIPAddress())) {                
                log().error("configureSNMPHandler: event contained invalid firstIpAddress.  "+event);
                return;
            }
        } catch (Exception e) {
            log().error("reloadSnmpConfig: ",e);
        }
        
        for (long ipLong=info.getFirst(); ipLong <= info.getLast();ipLong++) {
            String ipaddr = InetAddressUtils.getInetAddress(ipLong).getHostAddress();
            log().debug("reloadSnmpConfig: found ipaddr: " + ipaddr);
            if (getNetwork().hasPollableInterface(ipaddr)) {
                log().debug("reloadSnmpConfig: recreating the Interface to poll: " + ipaddr);
                getNetwork().delete(ipaddr);
                scheduleNewSnmpInterface(ipaddr);
            } else {
                log().debug("reloadSnmpConfig: no Interface found for ipaddr: " + ipaddr);               
            }
                
        }

    }

