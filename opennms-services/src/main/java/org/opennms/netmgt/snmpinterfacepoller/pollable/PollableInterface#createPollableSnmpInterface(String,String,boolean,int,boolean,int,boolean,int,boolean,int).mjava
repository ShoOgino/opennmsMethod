  /**
   * <p>createPollableSnmpInterface</p>
   *
   * @param name a {@link java.lang.String} object.
   * @param criteria a {@link java.lang.String} object.
   * @param hasPort a boolean.
   * @param port a int.
   * @param hasTimeout a boolean.
   * @param timeout a int.
   * @param hasRetries a boolean.
   * @param retries a int.
   * @param hasMaxVarsPerPdu a boolean.
   * @param maxVarsPerPdu a int.
   * @return a {@link org.opennms.netmgt.snmpinterfacepoller.pollable.PollableSnmpInterface} object.
   */
  public PollableSnmpInterface createPollableSnmpInterface(String name, String criteria, boolean hasPort, 
          int port, boolean hasTimeout, int timeout, boolean hasRetries, int retries, 
          boolean hasMaxVarsPerPdu,int maxVarsPerPdu) {

        PollableSnmpInterface iface = new PollableSnmpInterface(this);
        iface.setName(name);
        iface.setCriteria(criteria);
        InetAddress ipAddr = null;
		try {
			ipAddr = InetAddress.getByName(getIpaddress());
		} catch (final UnknownHostException e) {
		    LogUtils.debugf(this, e, "unable to get host for IP address %s", getIpaddress());
		}
        SnmpAgentConfig agentConfig = SnmpPeerFactory.getInstance().getAgentConfig(ipAddr);
        if (hasPort) agentConfig.setPort(port);
        if (hasTimeout) agentConfig.setTimeout(timeout);
        if (hasRetries) agentConfig.setRetries(retries);
        if (hasMaxVarsPerPdu) agentConfig.setMaxVarsPerPdu(maxVarsPerPdu);

        iface.setAgentConfig(agentConfig);
               
        m_pollablesnmpinterface.put(name,iface);
        return iface;
    }

