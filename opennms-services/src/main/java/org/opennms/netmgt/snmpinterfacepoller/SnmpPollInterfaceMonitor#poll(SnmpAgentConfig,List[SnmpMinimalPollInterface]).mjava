    public List<SnmpMinimalPollInterface> poll(SnmpAgentConfig agentConfig, List<SnmpMinimalPollInterface> mifaces) {

        if (mifaces == null ) {
            log().error("Null Interfaces passed to Monitor, exiting");
            return null;
        }
        
        log().debug("Got " + mifaces.size() + " interfaces to poll");
        
        // Retrieve this interface's SNMP peer object
        //
        if (agentConfig == null) throw new RuntimeException("SnmpAgentConfig object not available");

        SnmpObjId[] oids = new SnmpObjId[2 * mifaces.size()];
        //int maxVarsPerPdu = agentConfig.getMaxVarsPerPdu();
       
        for (int i=0;i < mifaces.size(); i++) {
            SnmpMinimalPollInterface miface = mifaces.get(i);
            miface.setStatus(PollStatus.unavailable());
            mifaces.set(i, miface);
            oids[i] = SnmpObjId.get(IF_ADMIN_STATUS_OID + miface.getIfindex());
            log().debug("Adding oid: " + oids[i] + " at position " + i);
            oids[i+mifaces.size()] = SnmpObjId.get(IF_OPER_STATUS_OID + miface.getIfindex());
            log().debug("Adding oid: " + oids[i+mifaces.size()] + " at position " + (i+mifaces.size()));
        }

        try {
        	SnmpValue[] results = SnmpUtils.get(agentConfig, oids);
    		log().debug("got " + results.length +" SnmpValues");
            int i=0;
            for(SnmpValue result : results) {
                if (result != null) {
                    log().debug("Snmp Value is "+ result.toInt() + " for oid: " + oids[i]);
                    if (i< mifaces.size()) {
                        SnmpMinimalPollInterface miface = mifaces.get(i);
                        miface.setStatus(PollStatus.up());
                        miface.setAdminstatus(result.toInt());
                    } else {
                        SnmpMinimalPollInterface miface = mifaces.get(i-mifaces.size());
                        miface.setStatus(PollStatus.up());
                        miface.setOperstatus(result.toInt());
                    }
                } else {
                    log().error("Snmp Value is null for oid: " + oids[i]);
                }
                i++;
            }
        } catch (NumberFormatException e) {
            log().error("Number operator used on a non-number " + e.getMessage());
        } catch (IllegalArgumentException e) {
            log().error("Invalid Snmp Criteria: " + e.getMessage());
        } catch (Throwable t) {
            log().error("Unexpected exception during SNMP poll of interface " + agentConfig, t);
        }
        

        // Establish SNMP session with interface
        //
        /*
    	SnmpValue[] totalresults = new SnmpValue[2 * mifaces.size()];

    	try {

        	if (maxVarsPerPdu > oids.length) {
        		
        		totalresults = SnmpUtils.get(agentConfig, oids);
        		log().debug("got " + totalresults.length +" SnmpValues");
            } else {
            	int remaining = 2 * mifaces.size();
            	while (remaining > maxVarsPerPdu) {
            		SnmpObjId[] curoids = new SnmpObjId[maxVarsPerPdu];
            		log().debug("max-var=per-pdu: " +  maxVarsPerPdu);
            		for (int j=0; j< maxVarsPerPdu; j++) {
            			curoids[j]= oids[2*mifaces.size() - remaining + j];
            		}
        			SnmpValue[] results = SnmpUtils.get(agentConfig, curoids);
            		log().debug("got " + results.length +" SnmpValues");
            		for (int j=0; j< maxVarsPerPdu; j++) {
            			totalresults[2* mifaces.size() - remaining + j]= results[j];
            		}
        			remaining = remaining - maxVarsPerPdu;
            	}
            	if (remaining > 0 ) {
            		SnmpObjId[] curoids = new SnmpObjId[remaining];
            		for (int j=0; j< maxVarsPerPdu; j++) {
            			curoids[j]= oids[2*mifaces.size() - remaining + j];
            		}
        			SnmpValue[] results = SnmpUtils.get(agentConfig, curoids);
            		log().debug("got " + results.length +" SnmpValues");
            		for (int j=0; j< remaining; j++) {
            			totalresults[2*mifaces.size() - remaining + j]= results[j];
            		}
            	}
            }

        } catch (NumberFormatException e) {
            log().error("Number operator used on a non-number " + e.getMessage());
        } catch (IllegalArgumentException e) {
            log().error("Invalid Snmp Criteria: " + e.getMessage());
        } catch (Throwable t) {
            log().error("Unexpected exception during SNMP poll of interface " + agentConfig, t);
        }
        
        int i=0;
        for(SnmpValue result : totalresults) {
            if (result != null) {
                log().debug("Snmp Value is "+ result.toInt() + " for oid: " + oids[i]);
                if (i< mifaces.size()) {
                    SnmpMinimalPollInterface miface = mifaces.get(i);
                    miface.setStatus(PollStatus.up());
                    miface.setAdminstatus(result.toInt());
                } else {
                    SnmpMinimalPollInterface miface = mifaces.get(i-mifaces.size());
                    miface.setStatus(PollStatus.up());
                    miface.setOperstatus(result.toInt());
                }
            } else {
                log().error("Snmp Value is null for oid: " + oids[i]);
            }
            i++;
        } */
        return mifaces;
    }

