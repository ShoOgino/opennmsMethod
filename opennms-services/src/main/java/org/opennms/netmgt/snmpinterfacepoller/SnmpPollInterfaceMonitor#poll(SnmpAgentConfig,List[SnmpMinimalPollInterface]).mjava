    /**
     * <p>poll</p>
     *
     * @param agentConfig a {@link org.opennms.netmgt.snmp.SnmpAgentConfig} object.
     * @param mifaces a {@link java.util.List} object.
     * @return a {@link java.util.List} object.
     */
    public List<SnmpMinimalPollInterface> poll(SnmpAgentConfig agentConfig, List<SnmpMinimalPollInterface> mifaces) {

        if (mifaces == null ) {
            log().error("Null Interfaces passed to Monitor, exiting");
            return null;
        }
        
        log().debug("Got " + mifaces.size() + " interfaces to poll");
        
        // Retrieve this interface's SNMP peer object
        //
        if (agentConfig == null) throw new RuntimeException("SnmpAgentConfig object not available");

        SnmpObjId[] adminoids = new SnmpObjId[mifaces.size()];
        SnmpObjId[] operooids = new SnmpObjId[mifaces.size()];
       
        for (int i=0;i < mifaces.size(); i++) {
            SnmpMinimalPollInterface miface = mifaces.get(i);
            adminoids[i] = SnmpObjId.get(IF_ADMIN_STATUS_OID + miface.getIfindex());
            operooids[i] = SnmpObjId.get(IF_OPER_STATUS_OID + miface.getIfindex());
            log().debug("Adding Admin/Oper oids: " + adminoids[i] + "/" +operooids[i]);
        }

		log().debug("try to get admin statuses");

		SnmpValue[] adminresults = new SnmpValue[mifaces.size()];
		SnmpValue[] operoresults = new SnmpValue[mifaces.size()];
		
        try {
        	adminresults = SnmpUtils.get(agentConfig, adminoids);
    		log().debug("got admin status " + adminresults.length +" SnmpValues");
        
    		operoresults = SnmpUtils.get(agentConfig, operooids);
    		log().debug("got operational status " + operoresults.length +" SnmpValues");
        } catch (NumberFormatException e) {
            log().error("Number operator used on a non-number " + e.getMessage());
        } catch (IllegalArgumentException e) {
            log().error("Invalid SNMP Criteria: " + e.getMessage());
        } catch (Throwable t) {
            log().error("Unexpected exception during SNMP poll of interface " + agentConfig, t);
        }
        
        for (int i=0; i< mifaces.size(); i++) {
            SnmpMinimalPollInterface miface = mifaces.get(i);
        	
            if (adminresults[i] != null && operoresults[i] != null ) {
                log().debug("SNMP Value is "+ adminresults[i].toInt() + " for oid: " + adminoids[i]);
                log().debug("SNMP Value is "+ operoresults[i].toInt() + " for oid: " + operooids[i]);
                miface.setStatus(PollStatus.up());
                miface.setAdminstatus(adminresults[i].toInt());
                miface.setOperstatus(operoresults[i].toInt());
            } else {
                miface.setStatus(PollStatus.unavailable());
                log().info("SNMP Value is null for oid: " + adminoids[i]+"/"+operooids[i]);
            }
        }

        return mifaces;
    }

