    /**
     * <p>poll</p>
     *
     * @param agentConfig a {@link org.opennms.netmgt.snmp.SnmpAgentConfig} object.
     * @param mifaces a {@link java.util.List} object.
     * @return a {@link java.util.List} object.
     */
	public List<SnmpMinimalPollInterface> poll(SnmpAgentConfig agentConfig,
			List<SnmpMinimalPollInterface> mifaces) {

		if (mifaces == null) {
			LOG.error("Null Interfaces passed to Monitor, exiting");
			return null;
		}

		LOG.debug("Got {} interfaces to poll", mifaces.size());

		// Retrieve this interface's SNMP peer object
		if (agentConfig == null)
			throw new RuntimeException("SnmpAgentConfig object not available");

		SnmpObjId[] adminoids = new SnmpObjId[mifaces.size()];
		SnmpObjId[] operooids = new SnmpObjId[mifaces.size()];

		for (int i = 0; i < mifaces.size(); i++) {
			SnmpMinimalPollInterface miface = mifaces.get(i);
			miface.setStatus(PollStatus.unavailable());
			adminoids[i] = SnmpObjId.get(IF_ADMIN_STATUS_OID
					+ miface.getIfindex());
			operooids[i] = SnmpObjId.get(IF_OPER_STATUS_OID
					+ miface.getIfindex());
			LOG.debug("Adding Admin/Oper oids: {}/{}", adminoids[i], operooids[i]);
		}

        String ipAddress = agentConfig.getAddress().getCanonicalHostName();
        CompletableFuture<List<SnmpValue>> adminValuesFuture = m_client.get(agentConfig, adminoids)
                .withLocation(m_location).withDescription("SnmpInterfacePoller Admin Status for " + ipAddress)
                .withTimeToLive(m_interval).execute();
        CompletableFuture<List<SnmpValue>> operationalValesFuture = m_client.get(agentConfig, operooids)
                .withLocation(m_location).withDescription("SnmpInterfacePoller Operational Status for " + ipAddress)
                .withTimeToLive(m_interval).execute();
        List<SnmpValue> adminSnmpValues = new ArrayList<>();
        List<SnmpValue> operationalSnmpValues = new ArrayList<>();
        try {
            adminSnmpValues = adminValuesFuture.get();
            operationalSnmpValues = operationalValesFuture.get();
            if (adminSnmpValues.size() != mifaces.size()) {
                LOG.warn("Snmp Interface Admin statuses collection failed for interfaces in '{}' at location ", ipAddress, m_location);
                return mifaces;
            }
            if (operationalSnmpValues.size() != mifaces.size()) {
                LOG.warn("Snmp Interface Operational statuses collection failed for interfaces in '{}' at location {}", ipAddress, m_location);
                return mifaces;
            }
            LOG.debug("Received admin/operational statuses for interfaces in '{}' at location {}", ipAddress, m_location);
        } catch (InterruptedException | ExecutionException e) {
            LOG.error("Exception while retrieving admin/operational statuses for interfaces in '{}' at location {}", ipAddress, m_location, e);
            return null;
        }

        for (int i = 0; i < mifaces.size(); i++) {
            SnmpMinimalPollInterface miface = mifaces.get(i);
            SnmpValue adminSnmpValue = adminSnmpValues.get(i);
            SnmpValue operationalSnmpValue = operationalSnmpValues.get(i);

            if (adminSnmpValue != null && operationalSnmpValue != null) {
                try {
                    miface.setAdminstatus(SnmpInterfaceStatus.statusFromMibValue(adminSnmpValue.toInt()));
                    miface.setOperstatus(SnmpInterfaceStatus.statusFromMibValue(operationalSnmpValue.toInt()));
                    miface.setStatus(PollStatus.up());
                    LOG.debug("SNMP Value is {} for oid: {}", adminSnmpValue.toInt(), adminoids[i]);
                    LOG.debug("SNMP Value is {} for oid: {}", operationalSnmpValue.toInt(), operooids[i]);
                } catch (Exception e) {
                    LOG.warn("SNMP Value is {} for oid: {}", adminSnmpValue.toDisplayString(), adminoids[i]);
                    LOG.warn("SNMP Value is {} for oid: {}", operationalSnmpValue.toDisplayString(), operooids[i]);
                }
            } else {
                LOG.info("SNMP Value is null for oid: {}/{}", adminoids[i], operooids[i]);
            }
        }

        return mifaces;
	}

