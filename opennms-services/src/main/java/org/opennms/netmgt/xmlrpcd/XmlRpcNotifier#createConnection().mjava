    /**
     * <p>
     * This method try to find an external xmlrpc server which is alive and and
     * can communicate with.
     * </p>
     * 
     * <p>
     * <b>Note: </b> If an xmlrpc server is found alive and could communicate
     * with, an xmlrpc client is created to communicate with this server. The
     * created xmlrpc client is kept for all the xmlrpc communications until the
     * server is no longer available.
     * </p>
     */
    public void createConnection() {
        // Create the request parameters list for the test command
        Vector<Object> params = new Vector<Object>();
        params.addElement(Long.toString(0));
        params.addElement(EventConstants.XMLRPC_NOTIFICATION_EVENT_UEI);
        params.addElement("test connection");

        boolean success = false;

        for (int i = 0; i < m_rpcServers.length; i++) {
            XmlrpcServer xServer = m_rpcServers[i];

            String url = xServer.getUrl();
            int timeout = xServer.getTimeout();

            if (log().isDebugEnabled()) {
                log().debug("Start to set up communication to XMLRPC server: " + url);
                log().debug("Setting timeout value to: " + timeout);
            }

            try {
                m_xmlrpcClient = new TimeoutSecureXmlRpcClient(url, timeout);
            } catch (MalformedURLException e) {
                log().error("Failed to send message to XMLRPC server: " + url, e);
                continue;
            }

            for (int k = 0; k < m_retries; k++) {
                try {
                    Object reply = m_xmlrpcClient.execute(XMLRPC_SERVER_RECEIVE_EVENT_COMMAND, params);

                    if (log().isDebugEnabled()) {
                        log().debug("Response from XMLRPC server: " + url + "\n\t" + reply.toString());
                    }
                    success = true;
                } catch (XmlRpcException e) {
                    log().warn("Failed to send message to XMLRPC server: " + url, e);
                } catch (ConnectException e) {
                    log().warn("Failed to send message to XMLRPC server due to connect exception " + url + ": " + e);
                } catch (IOException e) {
                    log().warn("Failed to send message to XMLRPC server: " + url, e);
                }

                // break inner loop, no more retries
                if (success) {
                    break;
                }

                try {
                    Thread.sleep(m_elapseTime);
                } catch (InterruptedException ie) {
                }
            }

            // break outer loop -- a working xmlrpc client created.
            if (success) {
                break;
            }

        }

        if (!success) {
            log().error("Can not set up communication with any XMLRPC server");
            m_xmlrpcClient = null;
        }
    }

