    /**
     * <p>
     * Notify the external xmlrpc server the occurance of failure during
     * processing an event.
     *
     * @param txNo
     *            the external transaction number for an event.
     * @param uei
     *            the event uei.
     * @param reason
     *            the text message to explain the reason of the failure to the
     *            external xmlrpc server.
     * @return a boolean.
     */
    public boolean notifyFailure(long txNo, String uei, String reason) {
        Assert.notNull(uei, "uei must not be null");
        Assert.notNull(reason, "reason must not be null");

        // FIXME: This is unused and is intended for Spring xmlrpc integration
        //Object o = m_recipient.notifyFailure(txNo, uei, reason);
        
        // Create the request parameters list
        Vector<Object> params = new Vector<Object>();
        params.addElement(String.valueOf(txNo));
        params.addElement(uei);
        params.addElement(reason);
        
        return sendXmlrpcRequest(XMLRPC_SERVER_FAILURE_COMMAND, params);
    }

