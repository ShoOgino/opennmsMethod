    /**
     * Returns true if the status is ok and the thread should continue running.
     * If the status returend is false then the thread should exit.
     * 
     */
    private synchronized boolean statusOK() {
        boolean exitThread = false;
        boolean exitCheck = false;
        
        // Loop until there is a new client or we are shutdown
        while (!exitCheck) {
            // check the child thread!
            if (m_worker.isAlive() == false && m_status.get() != STOP_PENDING) {
            	LogUtils.warnf(this, "%s terminated abnormally", getName());
            	m_status.set(STOP_PENDING);
            }

            switch (m_status.get()) {
                case STOP_PENDING:
                    exitCheck = true;
                    exitThread = true;
                    m_status.set(STOPPED);
                    break;

                case PAUSE_PENDING:
                    pause();
                    break;

                case RESUME_PENDING:
                    resume();
                    break;

                case PAUSED:
                    try {
                        wait();
                    } catch (final InterruptedException e) {
                        m_status.set(STOP_PENDING);
                    }
                    break;

                case RUNNING:
                    exitCheck = true;
                    break;

                default:
                    break;
            }

        } // end !exit check

        return !exitThread;

    } // statusOK

