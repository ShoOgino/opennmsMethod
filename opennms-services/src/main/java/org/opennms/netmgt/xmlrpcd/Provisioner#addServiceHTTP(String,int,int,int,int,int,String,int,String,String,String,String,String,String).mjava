    /**
     * This method defines a new package and HTTP service using the <code>serviceId</code> as the name of the
     * polling package and service name within that package.  If the same <code>serviceId</code> is used again,
     * it redefines the service.
     *
     * To add an interface to this newly defined HTTP service,
     * send an <code>EventConstants.UPDATE_SERVICE_EVENT_UEI</code> <code>Event</code>.
     *
     * @param serviceId <code>String</code> is used to define a polling package and a service name in that polling package.
     * @param retries <code>int</code> number of retries for this service
     * @param timeout <code>int</code> time in milliseconds to wait during each <code>retries</code>
     * @param interval <code>int</code> the standard polling interval in milliseconds
     * @param downTimeInterval <code>int</code> the downtime polling interval in milliseconds(downtime model)
     * @param downTimeDuration <code>int</> the amount of time in milliseconds the downtime polling interval is in effect
     * @param hostName <code>String</code> the virtual host (requires a url other than just "/")
     * @param port <code>int</code> the port to attempt to connect to determine if the service is accepting connections
     * @param responseCode <code>String</code> a set of responseCodes that are considered valid.
     *        This string should consist of one or more ranges ( [range],[range],...) where a range is either a single number or
     *        a pair of number separated by a - ( 200,202-300 ).  If the default range check is desire this can be ""
     *        The default range check is defined by the HttpMonitor plugin and is currently 100-499 for / or 100-399 for other URLs
     * @param contentCheck <code>String</code> a string to check for in the returned web page.  This string is either an exact string
     *        to search for in the page or a regular expression.  To indicate a regular expression prefix the string with a '~' character
     * @param url <code>String</code> the path portion of the URL to check on the server
     * @param user <code>String</code> the user to use with basic authentication or "" if no authentication required
     * @param passwd <code>String</code> the password to use with the user parameter with doing authentication
     * @param agent <code>String</code> the String to use for the User agent field when communicating with the server
     * @return Always returns true.
     * @throws java.lang.IllegalArgumentException when arguments are outside of ranges
     * @throws java.net.MalformedURLException if any.
     */
    boolean addServiceHTTP(String serviceId, int retries, int timeout, int interval, int downTimeInterval, int downTimeDuration, String hostName, int port, String responseCode, String contentCheck, String url, String user, String passwd, String agent) throws MalformedURLException;

