    /**
     * Reads off of the event queue and depends on the uei of the event of read,
     * process the event to send a notification to the external XMLRPC server
     * via XMLRPC protocol.
     */
    public void run() {
        m_status.set(RUNNING);

        while (statusOK()) {
            Event event = null;
            try {
                event = m_eventQ.remove(1000);
            } catch (final InterruptedException iE) {
            	LogUtils.debugf(this, iE, "Caught interrupted exception, transitioning to STOP_PENDING status");

                event = null;

                m_status.set(STOP_PENDING);
            } catch (final FifoQueueException qE) {
            	LogUtils.debugf(this, qE, "Caught FIFO queue exception.");

                event = null;

                m_status.set(STOP_PENDING);
            }

            if (event != null && statusOK()) {
                try {
                    processEvent(event);
                } catch (Throwable t) {
                    LogUtils.errorf(this, t, "Unexpected error processing event.");
                }
            }
            if (event != null && !statusOK()) {
            	LogUtils.errorf(this, "EventQueueProcessor not OK, exiting with status: %d", m_status.get());
            }
        }
    }

