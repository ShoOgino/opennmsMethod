    /**
     * Reads off of the event queue and depends on the uei of the event of read,
     * process the event to send a notification to the external XMLRPC server
     * via XMLRPC protocol.
     * 
     */
    public void run() {
        synchronized (this) {
            m_status = RUNNING;
        }

        while (statusOK()) {
            Event event = null;
            try {
                event = m_eventQ.remove(1000);
            } catch (InterruptedException iE) {
                log().debug("Caught interrupted exception, transitioning to STOP_PENDING status");
                
                event = null;

                m_status = STOP_PENDING;
            } catch (FifoQueueException qE) {
                if (log().isDebugEnabled()) {
                    log().debug("Caught fifo queue exception: " + qE.getLocalizedMessage(), qE);
                }

                event = null;

                m_status = STOP_PENDING;
            }

            if (event != null && statusOK()) {
                try {
                    processEvent(event);
                } catch (Throwable t) {
                    log().error("Unexpected error processing event: " + t, t);
                }
            }
            if (event != null && !statusOK()) {
            	log().error("EventQueueProcessor not OK, exiting with status:" + m_status);
            }
        }
    }

