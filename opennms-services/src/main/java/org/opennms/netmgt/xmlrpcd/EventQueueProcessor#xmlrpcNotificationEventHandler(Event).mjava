	/**
     * Process xmlrpcNotificationEvent according the status flag to determine to
     * send a notifyReceivedEvent, or a notifySuccess, or a notifyFailure
     * notification to XMLRPC Server.
     */
    private void xmlrpcNotificationEventHandler(final Event event) {
        long txNo = -1L;
        String sourceUei = null;
        String notification = null;
        int status = -1;

        final Parms parms = event.getParms();
        if (parms != null) {
            String parmName = null;
            Value parmValue = null;
            String parmContent = null;

            @SuppressWarnings("deprecation")
			final Enumeration<Parm> parmEnum = parms.enumerateParm();
            while (parmEnum.hasMoreElements()) {
            	final Parm parm = (Parm) parmEnum.nextElement();
                parmName = parm.getParmName();
                parmValue = parm.getValue();
                if (parmValue == null) {
                    continue;
                } else {
                    parmContent = parmValue.getContent();
                }

                LogUtils.debugf(this, "ParmName: %s /parmContent: ", parmName, parmContent);

                // get txNo
                if (parmName.equals(EventConstants.PARM_TRANSACTION_NO)) {
                    final String temp = parmContent;

                    try {
                        txNo = Long.valueOf(temp).longValue();
                    } catch (final NumberFormatException nfe) {
                    	LogUtils.warnf(this, nfe, "Parameter %s cannot be non-numeric", EventConstants.PARM_TRANSACTION_NO);
                        txNo = -1L;
                    }
                } else if (parmName.equals(EventConstants.PARM_SOURCE_EVENT_UEI)) {
                    sourceUei = parmContent;
                } else if (parmName.equals(EventConstants.PARM_SOURCE_EVENT_MESSAGE)) {
                    notification = parmContent;
                } else if (parmName.equals(EventConstants.PARM_SOURCE_EVENT_STATUS)) {
                    String temp = parmContent;
                    try {
                        status = Integer.valueOf(temp).intValue();
                    } catch (final NumberFormatException nfe) {
                    	LogUtils.warnf(this, nfe, "Parameter %s cannot be non-numeric", EventConstants.PARM_SOURCE_EVENT_STATUS);
                        status = -1;
                    }
                }

            }
        }

        final boolean validParameters = (txNo != -1L) && (sourceUei != null) && (notification != null) && (status != -1);
        if (!validParameters) {
            LogUtils.errorf(this, "Invalid parameters.");
            return;
        }

        switch (status) {
	        case EventConstants.XMLRPC_NOTIFY_RECEIVED:
	            if (!m_notifier.notifyReceivedEvent(txNo, sourceUei, notification)) {
	                pushBackEvent(event);
	            }
	            break;
	        case EventConstants.XMLRPC_NOTIFY_SUCCESS:
	            if (!m_notifier.notifySuccess(txNo, sourceUei, notification)) {
	                pushBackEvent(event);
	            }
	            break;
	        case EventConstants.XMLRPC_NOTIFY_FAILURE:
	            if (!m_notifier.notifyFailure(txNo, sourceUei, notification)) {
	                pushBackEvent(event);
	            }
        }
    }

