    /**
     * <p>onInit</p>
     */
    protected void onInit() {


        LogUtils.debugf(this, "start: Creating the xmlrpc event queue processor");

        // set up the event queue processor
        try {
            LogUtils.debugf(this, "start: Initializing the xmlrpcd config factory");

            final boolean verifyServer = getServerConfig().verifyServer();
            String localServer = null;

            if (verifyServer) {
                localServer = getServerConfig().getServerName();
            }

            // create a BroadcastEventProcessor per server 
            final Enumeration<ExternalServers> servers = getConfig().getExternalServerEnumeration();
            int i = 0;
            while (servers.hasMoreElements()) {
            	final ExternalServers server = servers.nextElement();
                final XmlrpcServer[] xServers = server.getXmlrpcServer();
                final FifoQueue<Event> q = new FifoQueueImpl<Event>();
                m_eventlogQs.add(q);
                m_eventReceivers.add(new BroadcastEventProcessor(Integer.toString(i), q, getConfig().getMaxQueueSize(), getConfig().getEventList(server)));

                // create an EventQueueProcessor per server 
                m_processors.add( new EventQueueProcessor(q, xServers, server.getRetries(), server.getElapseTime(), verifyServer, localServer, getConfig().getMaxQueueSize()) );
                i++;
            }

        } catch (final MarshalException e) {
            LogUtils.errorf(this, e, "Failed to load configuration");
            throw new UndeclaredThrowableException(e);
        } catch (final ValidationException e) {
            LogUtils.errorf(this, e, "Failed to load configuration");
            throw new UndeclaredThrowableException(e);
        } catch (final IOException e) {
            LogUtils.errorf(this, e, "Failed to load configuration");
            throw new UndeclaredThrowableException(e);
        } catch (final Throwable t) {
            LogUtils.errorf(this, t, "Failed to load configuration");
            throw new UndeclaredThrowableException(t);
        }
    }

