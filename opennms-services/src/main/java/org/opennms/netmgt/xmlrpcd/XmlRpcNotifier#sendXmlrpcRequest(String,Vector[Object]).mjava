    /**
     * <p>
     * This method sends an xmlrpc request to an external xmlrpc server and gets
     * the response from the xmlrpc server as a String.
     * </p>
     * 
     * @param command
     *            The server command to process the request.
     * @param params
     *            a list of parameters need for the external server command to
     *            process the request.
     */
    private boolean sendXmlrpcRequest(final String command, final Vector<Object> params) {
        if (m_xmlrpcClient == null) {
            return false;
        }

        boolean success = false;

        for (int i = 0; i < m_retries; i++) {
            try {
            	final Object reply = m_xmlrpcClient.execute(command, params);
            	LogUtils.debugf(this, "Response from XMLRPC server: %s\n\t%s", m_xmlrpcClient.getURL(), reply);
                success = true;
            } catch (final XmlRpcException e) {
                LogUtils.warnf(this, e, "Failed to send message to XMLRPC server %s", m_xmlrpcClient.getURL());
            } catch (final ConnectException e) {
                LogUtils.warnf(this, e, "Failed to send message to XMLRPC server %s due to connect exception", m_xmlrpcClient.getURL());
            } catch (final IOException e) {
                LogUtils.warnf(this, e, "Failed to send message to XMLRPC server %s", m_xmlrpcClient.getURL());
            } catch (final Throwable t) {
            	LogUtils.errorf(this, t, "Received unknown error.");
            }
            
            if (success) {
                break;
            }
        }

        if (!success) {
            LogUtils.errorf(this, "Could not successfully communicate with XMLRPC server '%s' after %d tries", m_xmlrpcClient.getURL(), m_retries);
        }

        return success;
    }

