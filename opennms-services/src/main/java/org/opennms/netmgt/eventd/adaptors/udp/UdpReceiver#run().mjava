    /**
     * The execution context.
     */
    public void run() {
        // get the context
        m_context = Thread.currentThread();

        // Get a log instance
        ThreadCategory.setPrefix(m_logPrefix);
        
        if (m_stop) {
            log().debug("Stop flag set before thread started, exiting");
            return;
        } else {
            log().debug("Thread context started");
        }

        // allocate a buffer
        final int length = 0xffff;
        final byte[] buffer = new byte[length];
        DatagramPacket pkt = new DatagramPacket(buffer, length);

        // Set an SO timout to make sure we don't block forever if a socket is closed.
        try {
            log().debug("Setting socket timeout to 500ms");

            m_dgSock.setSoTimeout(500);
        } catch (SocketException e) {
            log().warn("An I/O error occured while trying to set the socket timeout: " + e, e);
        }

        // Increase the receive buffer for the socket
        try {
            if (log().isDebugEnabled()) {
                log().debug("Setting receive buffer size to " + length);
            }

            m_dgSock.setReceiveBufferSize(length);
        } catch (SocketException e) {
            log().info("Failed to set the receive buffer to " + length + ": " + e, e);
        }

        // set to avoid numerious tracing message
        boolean ioInterrupted = false;

        // now start processing incoming request
        while (!m_stop) {
            if (m_context.isInterrupted()) {
                log().debug("Thread context interrupted");

                break;
            }

            try {
                if (log().isDebugEnabled() && !ioInterrupted) {
                    log().debug("Wating on a datagram to arrive");
                }

                m_dgSock.receive(pkt);
                ioInterrupted = false; // reset the flag
            } catch (InterruptedIOException e) {
                ioInterrupted = true;
                continue;
            } catch (IOException e) {
                log().error("An I/O exception occured on the datagram receipt port, exiting: " + e, e);
                break;
            }

            try {
                log().debug("Sending received packet to processor");

                UdpReceivedEvent re = UdpReceivedEvent.make(pkt);
                synchronized (m_eventsIn) {
                    m_eventsIn.add(re);
                    m_eventsIn.notify();
                }
            } catch (UnsupportedEncodingException e) {
                log().warn("Failed to convert received XML event, discarding: " + e, e);
            }

            pkt = new DatagramPacket(buffer, length);

        }

        log().debug("Thread context exiting");

    }

