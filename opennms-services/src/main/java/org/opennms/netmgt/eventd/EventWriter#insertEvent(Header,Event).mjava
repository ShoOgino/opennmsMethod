    /**
     * Insert values into the EVENTS table
     * 
     * @exception java.sql.SQLException
     *                Thrown if there is an error adding the event to the
     *                database.
     * @exception java.lang.NullPointerException
     *                Thrown if a required resource cannot be found in the
     *                properties file.
     */
    protected void insertEvent(Header eventHeader, Event event) throws SQLException {
        // Execute the statement to get the next event id
        int eventID = getNextId();

        if (log().isDebugEnabled()) {
            log().debug("EventWriter: DBID: " + eventID);
        }

        synchronized (event) {
            event.setDbid(eventID);
        }

        // Set up the sql information now

        // eventID
        m_insStmt.setInt(1, eventID);

        // eventUEI
        m_insStmt.setString(2, Constants.format(event.getUei(), EVENT_UEI_FIELD_SIZE));

        // nodeID
        int nodeid = (int) event.getNodeid();
        set(m_insStmt, 3, event.hasNodeid() ? nodeid : -1);

        // eventTime
        m_insStmt.setTimestamp(4, getEventTime(event));
        
        // Resolve the event host to a hostname using the ipInterface table
        String hostname = getEventHost(event);

        // eventHost
        set(m_insStmt, 5, Constants.format(hostname, EVENT_HOST_FIELD_SIZE));

        // ipAddr
        set(m_insStmt, 6, Constants.format(event.getInterface(), EVENT_INTERFACE_FIELD_SIZE));

        // eventDpName
        m_insStmt.setString(7, (eventHeader != null) ? Constants.format(eventHeader.getDpName(), EVENT_DPNAME_FIELD_SIZE) : "undefined");

        // eventSnmpHost
        set(m_insStmt, 8, Constants.format(event.getSnmphost(), EVENT_SNMPHOST_FIELD_SIZE));

        // service identifier - convert the service name to a service id
        set(m_insStmt, 9, getEventServiceId(event));

        // eventSnmp
        if (event.getSnmp() != null) {
            m_insStmt.setString(10, SnmpInfo.format(event.getSnmp(), EVENT_SNMP_FIELD_SIZE));
        } else {
            m_insStmt.setNull(10, Types.VARCHAR);
        }

        // eventParms

        // Replace any null bytes with a space, otherwise postgres will complain about encoding in UNICODE 
        String parametersString=(event.getParms() != null) ? Parameter.format(event.getParms()) : null;
        if (parametersString != null) {
            parametersString=parametersString.replace((char)0, ' ');
        }
        
        set(m_insStmt, 11, parametersString);

        // grab the ifIndex out of the parms if it is defined   
        if (event.getIfIndex() != null) {
            if (event.getParms() != null) {
                Parameter.format(event.getParms());
            }
        }

        // eventCreateTime
        Timestamp eventCreateTime = new Timestamp(System.currentTimeMillis());
        m_insStmt.setTimestamp(12, eventCreateTime);

        // eventDescr
        set(m_insStmt, 13, Constants.format(event.getDescr(), EVENT_DESCR_FIELD_SIZE));

        // eventLoggroup
        set(m_insStmt, 14, (event.getLoggroupCount() > 0) ? Constants.format(event.getLoggroup(), EVENT_LOGGRP_FIELD_SIZE) : null);

        // eventLogMsg
        // eventLog
        // eventDisplay
        if (event.getLogmsg() != null) {
            // set log message
            set(m_insStmt, 15, Constants.format(event.getLogmsg().getContent(), EVENT_LOGMSG_FIELD_SIZE));
            String logdest = event.getLogmsg().getDest();
            if (logdest.equals("logndisplay")) {
                // if 'logndisplay' set both log and display column to yes
                set(m_insStmt, 16, MSG_YES);
                set(m_insStmt, 17, MSG_YES);
            } else if (logdest.equals("logonly")) {
                // if 'logonly' set log column to true
                set(m_insStmt, 16, MSG_YES);
                set(m_insStmt, 17, MSG_NO);
            } else if (logdest.equals("displayonly")) {
                // if 'displayonly' set display column to true
                set(m_insStmt, 16, MSG_NO);
                set(m_insStmt, 17, MSG_YES);
            } else if (logdest.equals("suppress")) {
                // if 'suppress' set both log and display to false
                set(m_insStmt, 16, MSG_NO);
                set(m_insStmt, 17, MSG_NO);
            }
        } else {
            m_insStmt.setNull(15, Types.VARCHAR);

            /*
             * If this is an event that had no match in the event conf
             * mark it as to be logged and displayed so that there
             * are no events that slip through the system
             * without the user knowing about them
             */
            set(m_insStmt, 17, MSG_YES);
        }

        // eventSeverity
        set(m_insStmt, 18, Constants.getSeverity(event.getSeverity()));

        // eventPathOutage
        set(m_insStmt, 19, (event.getPathoutage() != null) ? Constants.format(event.getPathoutage(), EVENT_PATHOUTAGE_FIELD_SIZE) : null);

        // eventCorrelation
        set(m_insStmt, 20, (event.getCorrelation() != null) ? org.opennms.netmgt.eventd.db.Correlation.format(event.getCorrelation(), EVENT_CORRELATION_FIELD_SIZE) : null);

        // eventSuppressedCount
        m_insStmt.setNull(21, Types.INTEGER);

        // eventOperInstruct
        set(m_insStmt, 22, Constants.format(event.getOperinstruct(), EVENT_OPERINSTRUCT_FIELD_SIZE));

        // eventAutoAction
        set(m_insStmt, 23, (event.getAutoactionCount() > 0) ? AutoAction.format(event.getAutoaction(), EVENT_AUTOACTION_FIELD_SIZE) : null);

        // eventOperAction / eventOperActionMenuText
        if (event.getOperactionCount() > 0) {
            List<Operaction> a = new ArrayList<Operaction>();
            List<String> b = new ArrayList<String>();

            for (Operaction eoa : event.getOperactionCollection()) {
                a.add(eoa);
                b.add(eoa.getMenutext());
            }

            set(m_insStmt, 24, OperatorAction.format(a, EVENT_OPERACTION_FIELD_SIZE));
            set(m_insStmt, 25, Constants.format(b, EVENT_OPERACTION_MENU_FIELD_SIZE));
        } else {
            m_insStmt.setNull(24, Types.VARCHAR);
            m_insStmt.setNull(25, Types.VARCHAR);
        }

        // eventNotification, this column no longer needed
        m_insStmt.setNull(26, Types.VARCHAR);

        // eventTroubleTicket / eventTroubleTicket state
        if (event.getTticket() != null) {
            set(m_insStmt, 27, Constants.format(event.getTticket().getContent(), EVENT_TTICKET_FIELD_SIZE));
            int ttstate = 0;
            if (event.getTticket().getState().equals("on")) {
                ttstate = 1;
            }

            set(m_insStmt, 28, ttstate);
        } else {
            m_insStmt.setNull(27, Types.VARCHAR);
            m_insStmt.setNull(28, Types.INTEGER);
        }

        // eventForward
        set(m_insStmt, 29, (event.getForwardCount() > 0) ? org.opennms.netmgt.eventd.db.Forward.format(event.getForward(), EVENT_FORWARD_FIELD_SIZE) : null);

        // event mouseOverText
        set(m_insStmt, 30, Constants.format(event.getMouseovertext(), EVENT_MOUSEOVERTEXT_FIELD_SIZE));

        // eventAckUser
        if (event.getAutoacknowledge() != null && event.getAutoacknowledge().getState().equals("on")) {
            set(m_insStmt, 31, Constants.format(event.getAutoacknowledge().getContent(), EVENT_ACKUSER_FIELD_SIZE));

            // eventAckTime - if autoacknowledge is present,
            // set time to event create time
            set(m_insStmt, 32, eventCreateTime);
        } else {
            m_insStmt.setNull(31, Types.INTEGER);
            m_insStmt.setNull(32, Types.TIMESTAMP);
        }

        // eventSource
        set(m_insStmt, 33, Constants.format(event.getSource(), EVENT_SOURCE_FIELD_SIZE));

        // execute
        m_insStmt.executeUpdate();

        if (log().isDebugEnabled()) {
            log().debug("SUCCESSFULLY added " + event.getUei() + " related  data into the EVENTS table");
        }
    }

