    /**
     * The method that inserts the event into the database
     * 
     * @param eventHeader
     *            the event header
     * @param event
     *            the actual event to be inserted
     */
    public void process(Header eventHeader, Event event) throws SQLException {
        if (!checkEventSanityAndDoWeProcess(event, "JdbcAlarmWriter")) {
            return;
        }
        
        if (event.getAlarmData() == null) {
            if (log().isDebugEnabled()) {
                log().debug("JdbcAlarmWriter: uei '" + event.getUei() + "' does not have alarm data; not processing into an alarm.");
            }
            return;
        }

        Assert.isTrue(event.getDbid() > 0, "event does not have a dbid");
        
        if (log().isDebugEnabled()) {
            log().debug("JdbcAlarmWriter dbRun for : " + event.getUei() + " nodeid: " + event.getNodeid() + " ipaddr: " + event.getInterface() + " serviceid: " + event.getService());
        }

        /*
         * Try twice incase the transaction fails.  This could happen if 2 or more threads query the db
         * at the same time and determine that insert needs to happen.  One insert will complete the other
         * will fail.  The next time through the loop, the alarm will be reduced with an update. 
         */
        boolean updated = false;
        for (int attempt = 1; attempt <= 2 && !updated; attempt++) {
            Connection connection = getDataSource().getConnection();

            try {
                connection.setAutoCommit(false);

                int alarmId = isReductionNeeded(eventHeader, event, connection);
                if (alarmId != -1) {
                    if (log().isDebugEnabled()) {
                        log().debug("JdbcAlarmWriter: Reducing event for " + event.getDbid() + " with UEI " + event.getUei());
                    }

                    updateAlarm(eventHeader, event, alarmId, connection);

                    if (event.getAlarmData().getAutoClean() == true) {
                        log().debug("JdbcAlarmWriter: deleting previous events for alarm " + alarmId);
                        cleanPreviousEvents(alarmId, event.getDbid(), connection);
                    }

                    updated = true;
                } else {
                    if (log().isDebugEnabled()) {
                        log().debug("JdbcAlarmWriter: Inserting new alarm (not reducing) for event " + event.getDbid() + " with UEI " + event.getUei());
                    }

                    try {
                        insertAlarm(eventHeader, event, connection);
                        updated = true;
                    } catch (DataIntegrityViolationException e) {
                        if (attempt > 1) {
                            log().error("JdbcAlarmWriter: Error in attempt: "+attempt+" inserting alarm for event " + event.getDbid() + " into the datastore: " + e, e);
                            throw e;
                        } else {
                            log().info("JdbcAlarmWriter: Retrying processing of alarm for event " + event.getDbid() + " after first attempt: " + e.getClass() + ": " + e.getMessage());
                        }
                    } 
                }
            } finally {
                if (updated) {
                    try {
                        connection.commit();
                    } catch (SQLException e) {
                        log().error("JdbcAlarmWriter: Commit of transaction failed: " + e, e);
                    }
                } else {
                    try {
                        connection.rollback();
                    } catch (SQLException e) {
                        log().error("JdbcAlarmWriter: Rollback of transaction failed: " + e, e);
                    }
                }

                connection.close();
            }
        }

        if (log().isDebugEnabled()) {
            log().debug("AlarmWriter finished for event " + event.getDbid() + " with UEI " + event.getUei());
        }
    }

