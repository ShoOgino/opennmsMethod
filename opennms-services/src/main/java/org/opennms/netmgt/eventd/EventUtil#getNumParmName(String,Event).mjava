    /**
     * Helper method.
     * 
     * @param parm
     * @param event
     * @return The name of a parameter based on its ordinal position in the event's list of parameters
     */
    private static String getNumParmName(String parm, Event event) {
        String retParmVal = null;
        Parms eventParms = event.getParms();
        int end = parm.lastIndexOf(PARM_END_SUFFIX);
        if (end != -1 && eventParms != null) {
        	// Get the string between the '#' and ']'
        	String parmSpec = parm.substring(PARM_NAME_NUMBERED_PREFIX_LENGTH, end);
            String eparmnum = null;
            String eparmsep = null;
            String eparmoffset = null;
            if (parmSpec.matches("^\\d+$")) {
                eparmnum = parmSpec;
            } else {
                Matcher m = Pattern.compile("^(\\d+)([^0-9+-]+)([+-]?\\d+)$").matcher(parmSpec);
                if (m.matches()) {
                    eparmnum = m.group(1);
                    eparmsep = m.group(2);
                    eparmoffset = m.group(3);
                }
            }
        	int parmNum = -1;
        	try {
        		parmNum = Integer.parseInt(eparmnum);
        	} catch (NumberFormatException nfe) {
        		parmNum = -1;
        		retParmVal = null;
        	}
    
        	if (parmNum > 0 && parmNum <= eventParms.getParmCount()) {
        		Parm evParm = eventParms.getParm(parmNum - 1);
    
        		// get parm name
        		String eparmname = evParm.getParmName();
        		
        		// If separator and offset specified, split and extract accordingly
        		if ((eparmsep != null) && (eparmoffset != null)) {
        		    int parmOffset = Integer.parseInt(eparmoffset);
        		    retParmVal = splitAndExtract(eparmname, eparmsep, parmOffset);
        		} else {
        			retParmVal = eparmname;
        		}
        	} else {
        		retParmVal = null;
        	}
        }
        return retParmVal;
    }

