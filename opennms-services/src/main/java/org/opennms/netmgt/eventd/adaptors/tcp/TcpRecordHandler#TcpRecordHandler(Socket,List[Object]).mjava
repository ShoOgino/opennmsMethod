    /**
     * Constructs a new record handler.
     * 
     * @param s
     *            The socket to read from
     * @param xchange
     *            The io exchange
     */
    TcpRecordHandler(Socket s, List<Object> xchange) {
        m_stop = false;
        m_context = null;
        m_xchange = xchange;
        m_connection = s;

        // looks for '</([a-zA-Z0-9]+:)?log>'
        m_tokenizer = new StateManager[] { new StateManager(0, this) {
            int next(char ch) throws IOException {
                onTransition(ch);
                if (ch == '<') {
                    return 1;
                }
                return m_level;
            }
        }, new StateManager(1, this) {
            int next(char ch) throws IOException {
                onTransition(ch);
                if (ch == '/') {
                    return 2;
                }
                return 0;
            }
        }, new StateManager(2, this) {
            int next(char ch) throws IOException {
                onTransition(ch);
                if (ch == 'l') {
                    return 5;
                } else if (Character.isLetterOrDigit(ch)){
                    return 3;
                }
                return 0;
            }
        }, new StateManager(3, this) {
            int next(char ch) throws IOException {
                onTransition(ch);
                if (ch == ':') {
                    return 4;
                } else if (Character.isLetterOrDigit(ch)) {
                    return m_level;
                }
                return 0;
            }
        }, new StateManager(4, this) {
            int next(char ch) throws IOException {
                onTransition(ch);
                if (ch == 'l') {
                    return 5;
                }
                return 0;
            }
        }, new StateManager(5, this) {
            int next(char ch) throws IOException {
                onTransition(ch);
                if (ch == 'o') {
                    return 6;
                }
                return 0;
            }
        }, new StateManager(6, this) {
            int next(char ch) throws IOException {
                onTransition(ch);
                if (ch == 'g') {
                    return 7;
                }
                return 0;
            }
        }, new StateManager(7, this) {
            int next(char ch) throws IOException {
                onTransition(ch);
                if (ch == '>') {
                    m_handler.closeStream();
                    return 8;
                }
                return 0;
            }
        },
        
        // The state tree starts here!
        new StateManager(8, this) { // gobbles up white space after
            // record
            int next(char ch) throws IOException {
                if (ch == '<') {
                    onTransition(ch);
                    return 1;
                } // else discard
                return m_level;
            }

            void onTransition(char ch) throws IOException {
                m_handler.newStream();
                super.onTransition(ch);
            }
        } };
    }

