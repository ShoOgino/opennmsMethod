    public void init() {
        ThreadCategory.setPrefix(LOG4J_CATEGORY);
        org.opennms.netmgt.eventd.Eventd e = org.opennms.netmgt.eventd.Eventd.getInstance();

        try {
            EventdConfigFactory.reload();
            DataSourceFactory.init();
        } catch (FileNotFoundException ex) {
            log().error("Failed to load eventd configuration. File Not Found:", ex);
            throw new UndeclaredThrowableException(ex);
        } catch (MarshalException ex) {
            log().error("Failed to load eventd configuration", ex);
            throw new UndeclaredThrowableException(ex);
        } catch (ValidationException ex) {
            log().error("Failed to load eventd configuration", ex);
            throw new UndeclaredThrowableException(ex);
        } catch (IOException ex) {
            log().error("Failed to load eventd configuration", ex);
            throw new UndeclaredThrowableException(ex);
        } catch (ClassNotFoundException ex) {
            log().error("Failed to init database connection factory", ex);
            throw new UndeclaredThrowableException(ex);
        } catch (SQLException ex) {
            log().error("Failed to init database connection factory", ex);
            throw new UndeclaredThrowableException(ex);
        } catch (PropertyVetoException ex) {
            log().error("Failed to init database connection factory", ex);
            throw new UndeclaredThrowableException(ex);
        }

        // load configuration(eventconf)
        try {
            EventconfFactory.init();
        } catch (DataAccessException ex) {
            log().error("Failed to load event configuration: " + ex, ex);
            throw new UndeclaredThrowableException(ex);
        }
        e.setEventConfDao(EventconfFactory.getInstance());
        
        e.setConfigManager(EventdConfigFactory.getInstance());
        
        EventExpander eventExpander = new EventExpander();
        eventExpander.setEventConfDao(EventconfFactory.getInstance());
        eventExpander.afterPropertiesSet();

        EventIpcManagerDefaultImpl ipcMgr = new EventIpcManagerDefaultImpl();
        ipcMgr.setEventdConfigMgr(EventdConfigFactory.getInstance());
        ipcMgr.setEventExpander(eventExpander);
        ipcMgr.afterPropertiesSet();
        
        EventIpcManagerFactory.setIpcManager(ipcMgr);
        EventIpcManagerFactory.init();
        
        e.setDataSource(DataSourceFactory.getDataSource());
        e.setEventIpcManager(ipcMgr);
        e.init();
        
    }

