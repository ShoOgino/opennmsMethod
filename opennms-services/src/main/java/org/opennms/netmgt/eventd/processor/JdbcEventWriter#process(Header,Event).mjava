    /**
     * The method that inserts the event into the database
     * 
     * @param eventHeader
     *            the event header
     * @param event
     *            the actual event to be inserted
     */
    public void process(Header eventHeader, Event event) throws SQLException, DataAccessException {
        if (event != null) {
            /*
             * Check value of <logmsg> attribute 'dest', if set to
             * "donotpersist" then simply return, the uei is not to be
             *  persisted to the database
             */
            String logdest = event.getLogmsg().getDest();
            if (logdest.equals("donotpersist")) {
                log().debug("EventWriter: uei '" + event.getUei() + "' marked as 'doNotPersist'.");
                return;
            }
            
            if (log().isDebugEnabled()) {
                log().debug("EventWriter dbRun for : " + event.getUei() + " nodeid: " + event.getNodeid() + " ipaddr: " + event.getInterface() + " serviceid: " + event.getService());
            }

            Connection connection = getDataSource().getConnection();

            try {
                // set the database for rollback support
                try {
                    connection.setAutoCommit(false);
                } catch (SQLException e) {
                    log().warn("Unable to turn off auto commit mode: " + e, e);
                    throw e;
                }

                try {
                    insertEvent(eventHeader, event, connection);

                    connection.commit();
                } catch (SQLException e) {
                    log().warn("Error inserting event into the datastore: " + e, e);
                    try {
                        connection.rollback();
                    } catch (Exception e2) {
                        log().warn("Rollback of transaction failed: " + e2, e2);
                    }

                    throw e;
                } catch (DataAccessException e) {
                    log().warn("Error inserting event into the datastore: " + e, e);
                    try {
                        connection.rollback();
                    } catch (Exception e2) {
                        log().warn("Rollback of transaction failed: " + e2, e2);
                    }

                    throw e;
                }
            } finally {
                try {
                    connection.close();
                } catch (SQLException e) {
                    log().warn("SQLException while closing database connection: " + e, e);
                }
            }

            if (log().isDebugEnabled()) {
                log().debug("EventWriter finished for : " + event.getUei());
            }
        }
    }

