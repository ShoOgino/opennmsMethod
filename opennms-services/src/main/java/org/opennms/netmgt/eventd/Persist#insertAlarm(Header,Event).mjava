    /**
     * Insert values into the ALARMS table
     * 
     * @exception java.sql.SQLException
     *                Thrown if there is an error adding the event to the
     *                database.
     * @exception java.lang.NullPointerException
     *                Thrown if a required resource cannot be found in the
     *                properties file.
     */
    private void insertAlarm(Header eventHeader, Event event) throws SQLException {
        int alarmID = -1;
        Category log = ThreadCategory.getInstance(AlarmWriter.class);
        
        alarmID = getNextId();
        if (log.isDebugEnabled()) log.debug("AlarmWriter: DBID: "+ alarmID);

        //Column 1, alarmId
        m_insStmt.setInt(1, alarmID);
        
        //Column 2, eventUie
        m_insStmt.setString(2, Constants.format(event.getUei(), EVENT_UEI_FIELD_SIZE));
        
        //Column 3, dpName
        m_insStmt.setString(3, (eventHeader != null) ? Constants.format(eventHeader.getDpName(), EVENT_DPNAME_FIELD_SIZE) : "undefined");
        
        // Column 4, nodeID
        int nodeid = (int) event.getNodeid();
        m_insStmt.setObject(4, event.hasNodeid() ? new Integer(nodeid) : null);
        
        // Column 5, ipaddr
        m_insStmt.setString(5, event.getInterface());
        
        //Column 6, serviceId
        //
        // convert the service name to a service id
        //
        int svcId = -1;
        if (event.getService() != null) {
            try {
                svcId = getServiceID(event.getService());
            } catch (SQLException sqlE) {
                log.warn("AlarmWriter.insertAlarm: Error converting service name \"" + event.getService() + "\" to an integer identifier, storing -1", sqlE);
            }
        }
        m_insStmt.setObject(6, (svcId == -1 ? null : new Integer(svcId)));

        //Column 7, reductionKey
        m_insStmt.setString(7, event.getAlarmData().getReductionKey());
        
        //Column 8, alarmType
        m_insStmt.setInt(8, event.getAlarmData().getAlarmType());
        
        //Column 9, counter
        m_insStmt.setInt(9, 1);
        
        //Column 10, serverity
        set(m_insStmt, 10, Constants.getSeverity(event.getSeverity()));

        //Column 11, lastEventId
        m_insStmt.setInt(11, event.getDbid());
        
        //Column 12, firstEventTime
        java.sql.Timestamp eventTime = getEventTime(event, log);
        m_insStmt.setTimestamp(12, eventTime);
        
        //Column 13, lastEventTime
        m_insStmt.setTimestamp(13, eventTime);
        
        //Column 14, description
        set(m_insStmt, 14, Constants.format(event.getDescr(), EVENT_DESCR_FIELD_SIZE));

        //Column 15, logMsg
        if (event.getLogmsg() != null) {
            // set log message
            set(m_insStmt, 15, Constants.format(event.getLogmsg().getContent(), EVENT_LOGMSG_FIELD_SIZE));
        } else {
            m_insStmt.setNull(15, Types.VARCHAR);
        }

        //Column 16, operInstruct
        set(m_insStmt, 16, Constants.format(event.getOperinstruct(), EVENT_OPERINSTRUCT_FIELD_SIZE));
        
        //Column 17, tticketId
        //Column 18, tticketState
        if (event.getTticket() != null) {
            set(m_insStmt, 17, Constants.format(event.getTticket().getContent(), EVENT_TTICKET_FIELD_SIZE));
            int ttstate = 0;
            if (event.getTticket().getState().equals("on"))
                ttstate = 1;
            set(m_insStmt, 18, ttstate);
        } else {
            m_insStmt.setNull(17, Types.VARCHAR);
            m_insStmt.setNull(18, Types.INTEGER);
        }

        //Column 19, mouseOverText
        set(m_insStmt, 19, Constants.format(event.getMouseovertext(), EVENT_MOUSEOVERTEXT_FIELD_SIZE));

        //Column 20, suppressedUntil
        set(m_insStmt, 20, eventTime);
        
        //Column 21, suppressedUser
        m_insStmt.setString(21, null);
        
        //Column 22, suppressedTime
        set(m_insStmt, 22, eventTime);
        
        //Column 23, alarmAckUser
        m_insStmt.setString(23, null);
        
        //Column 24, alarmAckTime
        m_insStmt.setTimestamp(24, null);
        
        //Column 25, clearUie
        //Column 26, x733AlarmType
        //Column 27, x733ProbableCause
        //Column 28, clearKey
        if (event.getAlarmData() == null) {
            m_insStmt.setString(25, null);
            m_insStmt.setString(26, null);
            m_insStmt.setInt(27, -1);
            m_insStmt.setString(28, null);
        } else {
            m_insStmt.setString(25, Constants.format(event.getAlarmData().getClearUei(), EVENT_UEI_FIELD_SIZE));
            m_insStmt.setString(26, Constants.format(event.getAlarmData().getX733AlarmType(), EVENT_X733_ALARMTYPE_SIZE));
            set(m_insStmt, 27, event.getAlarmData().getX733ProbableCause());
            set(m_insStmt, 28, event.getAlarmData().getClearKey());
        }
        
        if (log.isDebugEnabled())
            log.debug("m_insStmt is: "+m_insStmt.toString());
        
        m_insStmt.executeUpdate();
        
        m_updateEventStmt.setInt(1, alarmID);
        m_updateEventStmt.setInt(2, event.getDbid());
        m_updateEventStmt.executeUpdate();

        if (log.isDebugEnabled())
            log.debug("SUCCESSFULLY added " + event.getUei() + " related  data into the ALARMS table");
   
    }

