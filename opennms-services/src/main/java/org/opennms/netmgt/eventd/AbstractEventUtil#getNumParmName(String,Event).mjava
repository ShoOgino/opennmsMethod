	/**
	 * Helper method.
	 * 
	 * @param parm
	 * @param event
	 * @return The name of a parameter based on its ordinal position in the event's list of parameters
	 */
	protected static String getNumParmName(String parm, Event event) {
		String retParmVal = null;
		final List<Parm> parms = event.getParmCollection();
		int end = parm.lastIndexOf(PARM_END_SUFFIX);
		if (end != -1 && parms != null && parms.size() > 0) {
			// Get the string between the '#' and ']'
			String parmSpec = parm.substring(PARM_NAME_NUMBERED_PREFIX_LENGTH, end);
			String eparmnum = null;
			String eparmsep = null;
			String eparmoffset = null;
			String eparmrangesep = null;
			String eparmrangelen = null;
			if (parmSpec.matches("^\\d+$")) {
				eparmnum = parmSpec;
			} else {
				Matcher m = Pattern.compile("^(\\d+)([^0-9+-]+)([+-]?\\d+)((:)([+-]?\\d+)?)?$").matcher(parmSpec);
				if (m.matches()) {
					eparmnum = m.group(1);
					eparmsep = m.group(2);
					eparmoffset = m.group(3);
					eparmrangesep = m.group(5);
					eparmrangelen = m.group(6);
				}
			}
			int parmNum = -1;
			try {
				parmNum = Integer.parseInt(eparmnum);
			} catch (NumberFormatException nfe) {
				parmNum = -1;
				retParmVal = null;
			}

			if (parmNum > 0 && parmNum <= parms.size()) {
				final Parm evParm = parms.get(parmNum - 1);

				// get parm name
				String eparmname = evParm.getParmName();
				
				// If separator and offset specified, split and extract accordingly
				if ((eparmsep != null) && (eparmoffset != null)) {
					int parmOffset = Integer.parseInt(eparmoffset);
					boolean doRange = ":".equals(eparmrangesep);
					int parmRangeLen = (eparmrangelen == null) ? 0 : Integer.parseInt(eparmrangelen);
					retParmVal = splitAndExtract(eparmname, eparmsep, parmOffset, doRange, parmRangeLen);
				} else {
					retParmVal = eparmname;
				}
			} else {
				retParmVal = null;
			}
		}
		return retParmVal;
	}

