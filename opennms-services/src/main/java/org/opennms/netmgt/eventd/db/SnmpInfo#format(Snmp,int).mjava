    /**
     * <P>
     * Converts the SNMP information from the event into a string that can be
     * stored into the database. The information is formatted in by separating
     * the of the textual fields with a delimiter character (a comma ',').
     * </P>
     * 
     * <P>
     * If the enterprise id text information is not present then the string will
     * have only two commas. An extra comma is not added to signify the missing
     * field.
     * </P>
     * 
     * @see Constants#DB_ATTRIB_DELIM
     * @see Constants#escape
     * 
     * @return The smnpblock as a string
     */
    public static String format(Snmp info, int maxlen) {
        if (info == null) {
            return null;
        }

        // id
        StringBuffer snmpStr = new StringBuffer(info.getId());

        // id text
        if (info.getIdtext() != null) {
            snmpStr.append(Constants.DB_ATTRIB_DELIM + Constants.escape(info.getIdtext(), Constants.DB_ATTRIB_DELIM));
        } else {
            snmpStr.append(Constants.DB_ATTRIB_DELIM + "undefined");
        }

        // version
        snmpStr.append(Constants.DB_ATTRIB_DELIM + info.getVersion());

        // specific
        if (info.hasSpecific()) {
            snmpStr.append(Constants.DB_ATTRIB_DELIM + Integer.toString(info.getSpecific()));
        } else {
            snmpStr.append(Constants.DB_ATTRIB_DELIM + "undefined");
        }

        // generic
        if (info.hasGeneric()) {
            snmpStr.append(Constants.DB_ATTRIB_DELIM + Integer.toString(info.getGeneric()));
        } else {
            snmpStr.append(Constants.DB_ATTRIB_DELIM + "undefined");
        }

        // community
        if (info.getCommunity() != null) {
            snmpStr.append(Constants.DB_ATTRIB_DELIM + info.getCommunity());
        } else {
            snmpStr.append(Constants.DB_ATTRIB_DELIM + "undefined");
        }

        return Constants.format(snmpStr.toString(), maxlen);
    }

