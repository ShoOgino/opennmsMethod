    /**
     * Process the received events. For each event, use the EventExpander to
     * look up matching eventconf entry and load info from that match, expand
     * event parms, add event to database and send event to appropriate
     * listeners.
     */
    public void run() {
        // check to see if the event log is hooked up
        if (m_eventLog == null) {
            return;
        }

        Events events = m_eventLog.getEvents();
        if (events == null || events.getEventCount() <= 0) {
            // no events to process
            return;
        }

        // create an EventWriters
        EventWriter eventWriter = null;
        try {
            AlarmWriter alarmWriter = null;
            try {
                try {
                    eventWriter = new EventWriter();
                    eventWriter.setDataSource(m_dataSource);
                    eventWriter.setEventdServiceManager(m_eventdServiceManager);
                    eventWriter.setGetNextEventIdStr(m_getNextEventIdStr);
                    eventWriter.afterPropertiesSet();
                    
                    alarmWriter = new AlarmWriter();
                    alarmWriter.setDataSource(m_dataSource);
                    alarmWriter.setEventdServiceManager(m_eventdServiceManager);
                    alarmWriter.setGetNextAlarmIdStr(m_getNextAlarmIdStr);
                    alarmWriter.afterPropertiesSet();
                } catch (Throwable t) {
                    log().warn("Exception creating EventWriter", t);
                    log().warn("Event(s) CANNOT be inserted into the database");

                    return;
                }

                Enumeration<Event> en = events.enumerateEvent();
                while (en.hasMoreElements()) {
                    Event event = en.nextElement();

                    if (log().isDebugEnabled()) {
                        // print out the eui, source, and other
                        // important aspects
                        //
                        String uuid = event.getUuid();
                        log().debug("Event {");
                        log().debug("  uuid  = " + (uuid != null && uuid.length() > 0 ? uuid : "<not-set>"));
                        log().debug("  uei   = " + event.getUei());
                        log().debug("  src   = " + event.getSource());
                        log().debug("  iface = " + event.getInterface());
                        log().debug("  time  = " + event.getTime());
                        Parm[] parms = (event.getParms() == null ? null : event.getParms().getParm());
                        if (parms != null) {
                            log().debug("  parms {");
                            for (int x = 0; x < parms.length; x++) {
                                if ((parms[x].getParmName() != null) && (parms[x].getValue().getContent() != null)) {
                                    log().debug("    (" + parms[x].getParmName().trim() + ", " + parms[x].getValue().getContent().trim() + ")");
                                }
                            }
                            log().debug("  }");
                        }
                        log().debug("}");
                    }

                    // look up eventconf match and expand event
                    m_eventExpander.expandEvent(event);
                    try {
                        // add to database
                        eventWriter.persistEvent(m_eventLog.getHeader(), event);
                        // send event to interested listeners
                        EventIpcManagerFactory.getIpcManager().broadcastNow(event);

                        alarmWriter.persistAlarm(m_eventLog.getHeader(), event);
                    } catch (SQLException sqle) {
                        log().warn("Unable to add event to database", sqle);
                    } catch (Throwable t) {
                        log().warn("Unknown exception processing event", t);
                    }
                }
            } finally {
                if (alarmWriter != null) alarmWriter.close();
            }
        } finally {
            
            // close database related stuff in the eventwriter
            if (eventWriter != null) eventWriter.close();
        }
    }

