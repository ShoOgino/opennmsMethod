    /**
     * This method is used to load the passed configuration into the currently
     * managed configuration instance. Any events that previously existed are
     * cleared. After the contents of the reader stream is loaded the stream is
     * closed.
     * 
     * @param rdr
     *            The reader used to load the configuration.
     * 
     * @exception org.exolab.castor.xml.MarshalException
     *                Thrown if the file does not conform to the schema.
     * @exception org.exolab.castor.xml.ValidationException
     *                Thrown if the contents do not match the required schema.
     */
    public static void loadConfiguration(Reader rdr) throws IOException, MarshalException, ValidationException {
        synchronized (m_eventConf) {
            Events toplevel = CastorUtils.unmarshal(Events.class, rdr);

            m_eventConf.clear();

            for (Event event : toplevel.getEventCollection()) {
                m_eventConf.put(event);
            }

            m_secureTags = toplevel.getGlobal().getSecurity().getDoNotOverride();

            for (String eventFilePath : toplevel.getEventFileCollection()) {
                File eventFile = new File(eventFilePath);
                InputStream fileIn = new FileInputStream(eventFile);
                if (fileIn == null) {
                    throw new IOException("Eventconf: Failed to load/locate events file: " + eventFile);
                }

                if (log().isDebugEnabled()) {
                    log().debug("Eventconf: Loading event file: " + eventFile);
                }

                Reader filerdr = new InputStreamReader(fileIn);
                Events filelevel = CastorUtils.unmarshal(Events.class, filerdr);
                
                if (filelevel.getGlobal() != null) {
                    throw new ValidationException("The event file " + eventFile + " included from the top-level event configuration file cannot have a 'global' element");
                }
                if (filelevel.getEventFileCollection().size() > 0) {
                    throw new ValidationException("The event file " + eventFile + " included from the top-level event configuration file cannot include other configuration files: " + StringUtils.collectionToCommaDelimitedString(filelevel.getEventFileCollection()));
                }
                
                for (Event event : filelevel.getEventCollection()) {
                    m_eventConf.put(event);
                }
            }

            try {
                rdr.close();
            } catch (Throwable t) {
            }
        }
        m_loaded = true;
    }

