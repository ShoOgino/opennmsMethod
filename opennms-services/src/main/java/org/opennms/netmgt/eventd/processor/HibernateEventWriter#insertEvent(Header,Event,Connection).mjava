    /**
     * Insert values into the EVENTS table
     * 
     * @exception java.sql.SQLException
     *                Thrown if there is an error adding the event to the
     *                database.
     * @exception java.lang.NullPointerException
     *                Thrown if a required resource cannot be found in the
     *                properties file.
     */
    private void insertEvent(final Header eventHeader, final Event event, final Connection connection) {
        OnmsDistPoller poll = distPollerDao.get(event.getDistPoller());
        OnmsServiceType serve = new OnmsServiceType(event.getService());
        
        
        OnmsEvent ovent = new OnmsEvent();
        ovent.setId(event.getDbid());
        ovent.setEventUei(event.getUei());
        ovent.setEventTime(Date.valueOf(event.getTime()));
        ovent.setEventHost(event.getHost());
        ovent.setEventSource(event.getSource());
        ovent.setIpAddr(event.getInterfaceAddress());
        ovent.setDistPoller(poll);
        ovent.setEventSnmpHost(event.getSnmphost());
        ovent.setServiceType(serve);
        ovent.setEventSnmp(SnmpInfo.format(event.getSnmp(), EVENT_SNMP_FIELD_SIZE));
        final String parms = Parameter.format(event);
        ovent.setEventParms(parms);
        ovent.setEventCreateTime(Date.valueOf(event.getCreationTime()));
        ovent.setEventDescr(event.getDescr());
        ovent.setEventLogGroup(Integer.toString(event.getLoggroupCount()));
        
        ovent.setEventSeverity(Integer.valueOf(event.getSeverity()));
        ovent.setEventPathOutage(event.getPathoutage());
        ovent.setEventCorrelation((event.getCorrelation() != null) ? org.opennms.netmgt.dao.util.Correlation.format(event.getCorrelation(), EVENT_CORRELATION_FIELD_SIZE) : null);
        ovent.setEventSuppressedCount(null);
        ovent.setEventOperInstruct(event.getOperinstruct());
        ovent.setEventAutoAction((event.getAutoactionCount() > 0) ? AutoAction.format(event.getAutoaction(), EVENT_AUTOACTION_FIELD_SIZE) : null);
  
        if (event.getOperactionCount() > 0) {
        	final List<Operaction> a = new ArrayList<Operaction>();
        	final List<String> b = new ArrayList<String>();
        	
        	for (final Operaction eoa : event.getOperactionCollection()) {
        		a.add(eoa);
        		b.add(eoa.getMenutext());
        	}
        	ovent.setEventOperAction(OperatorAction.format(a, EVENT_OPERACTION_FIELD_SIZE));
        	ovent.setEventOperActionMenuText(Constants.format(b, EVENT_OPERACTION_FIELD_SIZE));
        } else {
        	ovent.setEventOperAction(null);
        	ovent.setEventOperActionMenuText(null);
        }
        ovent.setEventNotification(null);
        if (event.getTticket() != null) {
        	ovent.setEventTTicket(event.getTticket().getContent());
        	ovent.setEventTTicketState(Integer.valueOf(event.getTticket().getState()));
        } else {
        	ovent.setEventTTicket(null);
        	ovent.setEventTTicketState(null);
        }
        ovent.setEventForward(org.opennms.netmgt.dao.util.Forward.format(event.getForward(), EVENT_FORWARD_FIELD_SIZE));
        ovent.setEventMouseOverText(event.getMouseovertext());
        
        if (event.getLogmsg() != null) {
            // set log message
        	ovent.setEventLogMsg(event.getLogmsg().getContent());
            String logdest = event.getLogmsg().getDest();
            if (logdest.equals("logndisplay")) {
                // if 'logndisplay' set both log and display column to yes
                ovent.setEventLog("" + MSG_YES + "");
                ovent.setEventDisplay("" + MSG_YES + "");
            } else if (logdest.equals("logonly")) {
                // if 'logonly' set log column to true
            	ovent.setEventLog("" + MSG_YES + "");
                ovent.setEventDisplay("" + MSG_NO + "");
            } else if (logdest.equals("displayonly")) {
                // if 'displayonly' set display column to true
            	ovent.setEventLog("" + MSG_NO + "");
                ovent.setEventDisplay("" + MSG_YES + "");
            } else if (logdest.equals("suppress")) {
                // if 'suppress' set both log and display to false
            	ovent.setEventLog("" + MSG_NO + "");
                ovent.setEventDisplay("" + MSG_NO + "");
            }
        } else {
            ovent.setEventLogMsg(null);
            ovent.setEventLog("" + MSG_YES + "");
            ovent.setEventDisplay("" + MSG_YES + "");
        }
        
        if (event.getAutoacknowledge() != null && event.getAutoacknowledge().getState().equals("on")) {
            ovent.setEventAckUser(event.getAutoacknowledge().getContent());
            // eventAckTime - if autoacknowledge is present,
            // set time to event create time
            ovent.setEventAckTime(Date.valueOf(event.getCreationTime()));
        } else {
            ovent.setEventAckUser(null);
            ovent.setEventAckTime(null);
        }
        
        eventDao.update(ovent);
    }

