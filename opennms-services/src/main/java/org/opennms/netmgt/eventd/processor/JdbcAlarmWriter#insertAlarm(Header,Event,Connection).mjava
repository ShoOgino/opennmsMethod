    /**
     * Insert values into the ALARMS table
     * 
     * @exception java.sql.SQLException
     *                Thrown if there is an error adding the event to the
     *                database.
     * @exception java.lang.NullPointerException
     *                Thrown if a required resource cannot be found in the
     *                properties file.
     */
    private void insertAlarm(Header eventHeader, Event event, Connection connection) throws SQLException {
        int alarmID = -1;
        alarmID = getNextId();
        if (log().isDebugEnabled()) {
            log().debug("AlarmWriter: DBID: " + alarmID);
        }
    
        PreparedStatement insStmt = connection.prepareStatement(EventdConstants.SQL_DB_ALARM_INS_EVENT);

        try {
            //Column 1, alarmId
            insStmt.setInt(1, alarmID);

            //Column 2, eventUie
            insStmt.setString(2, Constants.format(event.getUei(), EVENT_UEI_FIELD_SIZE));

            //Column 3, dpName
            insStmt.setString(3, (eventHeader != null) ? Constants.format(eventHeader.getDpName(), EVENT_DPNAME_FIELD_SIZE) : "undefined");

            // Column 4, nodeID
            int nodeid = (int) event.getNodeid();
            insStmt.setObject(4, event.hasNodeid() ? new Integer(nodeid) : null);

            // Column 5, ipaddr
            insStmt.setString(5, event.getInterface());

            //Column 6, serviceId
            //
            // convert the service name to a service id
            //
            int svcId = -1;
            if (event.getService() != null) {
                try {
                    svcId = getServiceID(event.getService());
                } catch (SQLException e) {
                    log().warn("insertAlarm: Error converting service name \"" + event.getService() + "\" to an integer identifier, storing -1: " + e, e);
                }
            }
            insStmt.setObject(6, (svcId == -1 ? null : new Integer(svcId)));

            //Column 7, reductionKey
            insStmt.setString(7, event.getAlarmData().getReductionKey());

            //Column 8, alarmType
            insStmt.setInt(8, event.getAlarmData().getAlarmType());

            //Column 9, counter
            insStmt.setInt(9, 1);

            //Column 10, serverity
            set(insStmt, 10, Constants.getSeverity(event.getSeverity()));

            //Column 11, lastEventId
            insStmt.setInt(11, event.getDbid());

            //Column 12, firstEventTime
            //Column 13, lastEventTime
            Timestamp eventTime = getEventTime(event);
            insStmt.setTimestamp(12, eventTime);
            insStmt.setTimestamp(13, eventTime);

            //Column 14, description
            set(insStmt, 14, Constants.format(event.getDescr(), EVENT_DESCR_FIELD_SIZE));

            //Column 15, logMsg
            if (event.getLogmsg() != null) {
                // set log message
                set(insStmt, 15, Constants.format(event.getLogmsg().getContent(), EVENT_LOGMSG_FIELD_SIZE));
            } else {
                insStmt.setNull(15, Types.VARCHAR);
            }

            //Column 16, operInstruct
            set(insStmt, 16, Constants.format(event.getOperinstruct(), EVENT_OPERINSTRUCT_FIELD_SIZE));

            //Column 17, tticketId
            //Column 18, tticketState
            if (event.getTticket() != null) {
                set(insStmt, 17, Constants.format(event.getTticket().getContent(), EVENT_TTICKET_FIELD_SIZE));
                int ttstate = 0;
                if (event.getTticket().getState().equals("on")) {
                    ttstate = 1;
                }
                set(insStmt, 18, ttstate);
            } else {
                insStmt.setNull(17, Types.VARCHAR);
                insStmt.setNull(18, Types.INTEGER);
            }

            //Column 19, mouseOverText
            set(insStmt, 19, Constants.format(event.getMouseovertext(), EVENT_MOUSEOVERTEXT_FIELD_SIZE));

            //Column 20, suppressedUntil
            set(insStmt, 20, eventTime);

            //Column 21, suppressedUser
            insStmt.setString(21, null);

            //Column 22, suppressedTime
            set(insStmt, 22, eventTime);

            //Column 23, alarmAckUser
            insStmt.setString(23, null);

            //Column 24, alarmAckTime
            insStmt.setTimestamp(24, null);

            //Column 25, clearUie
            //Column 26, x733AlarmType
            //Column 27, x733ProbableCause
            //Column 28, clearKey
            if (event.getAlarmData() == null) {
                insStmt.setString(25, null);
                insStmt.setString(26, null);
                insStmt.setInt(27, -1);
                insStmt.setString(28, null);
            } else {
                insStmt.setString(25, Constants.format(event.getAlarmData().getClearUei(), EVENT_UEI_FIELD_SIZE));
                insStmt.setString(26, Constants.format(event.getAlarmData().getX733AlarmType(), EVENT_X733_ALARMTYPE_SIZE));
                set(insStmt, 27, event.getAlarmData().getX733ProbableCause());
                set(insStmt, 28, event.getAlarmData().getClearKey());
            }

            if (log().isDebugEnabled()) {
                log().debug("m_insStmt is: " + insStmt.toString());
            }

            insStmt.executeUpdate();
        } catch (SQLException e) {
            throw new SQLErrorCodeSQLExceptionTranslator().translate("foo", "bar", e);
        } finally {
            try {
                insStmt.close();
            } catch (SQLException e) {
                log().warn("SQLException while closing prepared statement: " + e, e);
            }
        }
        
        updateEventForAlarm(event, alarmID, connection);
    
        if (log().isDebugEnabled()) {
            log().debug("SUCCESSFULLY added " + event.getUei() + " related  data into the ALARMS table");
        }
    
    }

