    /**
     * Called by the run method to execute the sql statements
     * of triggers and actions defined for an automation.  An
     * automation may have 0 or 1 trigger and must have 1 action.
     * If the automation doesn't have a trigger than the action
     * must not contain any tokens.
     *
     * @throws java.sql.SQLException if any.
     * @return a boolean.
     */
    public boolean runAutomation() throws SQLException {
        LOG.debug("runAutomation: "+m_automation.getName()+" running...");

        if (hasTrigger()) {
            LOG.debug("runAutomation: "+m_automation.getName()+" trigger statement is: "+ m_trigger.getTriggerSQL());
        }
            
        LOG.debug("runAutomation: "+m_automation.getName()+" action statement is: "+m_action.getActionSQL());

        LOG.debug("runAutomation: Executing trigger: {}", m_automation.getTriggerName());
        
        
        Transaction.begin();
        try {
            LOG.debug("runAutomation: Processing automation: {}", m_automation.getName());

            TriggerResults results = processTrigger();
            
            boolean success = false;
            if (results.isSuccessful()) {
                success = processAction(results);
            }
            
			return success;

        } catch (Throwable e) {
        	Transaction.rollbackOnly();
            LOG.warn("runAutomation: Could not execute automation: "+m_automation.getName(), e);
            return false;
        } finally {

            LOG.debug("runAutomation: Ending processing of automation: {}", m_automation.getName());
            
            Transaction.end();         
        }

    }

