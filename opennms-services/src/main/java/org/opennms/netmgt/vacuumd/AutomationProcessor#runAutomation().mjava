    /**
     * Called by the run method to execute the sql statements
     * of triggers and actions defined for an automation.  An
     * automation may have 0 or 1 trigger and must have 1 action.
     * If the automation doesn't have a trigger than the action
     * must not contain any tokens.
     *
     * @throws java.sql.SQLException if any.
     * @return a boolean.
     */
    public boolean runAutomation() throws SQLException {
        LOG.debug("runAutomation: {} running...", m_automation.getName());

        if (hasTrigger()) {
            LOG.debug("runAutomation: {} trigger statement is: {}", m_automation.getName(), m_trigger.getTriggerSQL());
        }

        if(hasAction()){
            LOG.debug("runAutomation: {} action statement is: {}", m_automation.getName(), m_action.getActionSQL());
        }

        LOG.debug("runAutomation: Executing trigger: {}", m_automation.getTriggerName().orElse(null));

        final List<Event> eventsToSend = new LinkedList<>();
        Transaction.begin();
        try {
            LOG.debug("runAutomation: Processing automation: {}", m_automation.getName());

            TriggerResults results = processTrigger();
            
            boolean success = false;
            if (results.isSuccessful() && hasAction()) {
                success = processAction(results, eventsToSend);
            }
            
			return success;

        } catch (Throwable e) {
        	Transaction.rollbackOnly();
            LOG.warn("runAutomation: Could not execute automation: {}", m_automation.getName(), e);
            return false;
        } finally {
            LOG.debug("runAutomation: Closing transaction for automation: {}", m_automation.getName());
            Transaction.end();

            // Always send the events out after the transaction is closed in order to ensure
            // that any event handlers can access the updated records
            LOG.debug("runAutomation: Sending {} events for automation: {}", eventsToSend.size(), m_automation.getName());
            for (Event event : eventsToSend) {
                Vacuumd.getSingleton().getEventManager().sendNow(event);
            }

            LOG.debug("runAutomation: Done processing automation: {}", m_automation.getName());
        }

    }

