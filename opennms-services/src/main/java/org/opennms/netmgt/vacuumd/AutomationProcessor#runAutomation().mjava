    /**
     * Called by the run method to execute the sql statements
     * of triggers and actions defined for an automation.  An
     * automation may have 0 or 1 trigger and must have 1 action.
     * If the automation doesn't have a trigger than the action
     * must not contain any tokens. 
     * @param auto
     * 
     * @return
     * @throws SQLException
     */
    public boolean runAutomation() throws SQLException {
        Automation auto = m_automation;

        log().debug("runAutomation: "+auto.getName()+" running...");

        setTriggerInAutomation(hasTrigger(auto));

        if (isTriggerInAutomation()) {
            log().debug("runAutomation: "+auto.getName()+" trigger statement is: "+ getTriggerSQL(auto));
        }
            
        log().debug("runAutomation: "+auto.getName()+" action statement is: "+getActionSQL(auto));

        setFields(auto);

        log().debug("runAutomation: Executing trigger: "+auto.getTriggerName());

        try {
            setConn(DataSourceFactory.getInstance().getConnection());

            processTrigger(auto);
            
            if (!isTriggerSuccessful()) {
                return false;
            }


            processAction(auto);

        } catch (SQLException e) {
            log().warn("runAutomation: Could not execute trigger: "+auto.getTriggerName(), e);
        } finally {
            log().debug("runAutomation: Closing trigger resultset.");
            if (isTriggerInAutomation()) {
                log().debug("runAutomation: Closing trigger statement.");
                //Just in case, check for null
                if (getTriggerResultSet() != null)
                    getTriggerResultSet().close();
            }
            log().debug("runAutomation: Closing database connection.");
            getConn().close();
        }

        return isActionSuccessful();
    }

