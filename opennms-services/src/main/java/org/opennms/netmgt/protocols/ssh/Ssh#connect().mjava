    /**
     * Attempt to connect, based on the parameters which have been set in
     * the object.
     * 
     * @return true if it is able to connect
     * @throws InsufficientParametersException
     */
    protected boolean connect() throws InsufficientParametersException {
        if (getAddress() == null) {
            throw new InsufficientParametersException("you must specify an address");
        }

        try {
            m_client = new SshClient();
            m_client.setSocketTimeout(getTimeout());
            SshConnectionProperties props = new SshConnectionProperties();
            props.setHost(getAddress().getHostAddress());
            props.setPort(getPort());
            m_client.connect(props, new IgnoreHostKeyVerification());
            if (getUsername() != null) {
                PasswordAuthenticationClient pac = new PasswordAuthenticationClient();
                pac.setUsername(getUsername());
                pac.setPassword(getPassword());
                int result = m_client.authenticate(pac);
                switch (result) {
                case AuthenticationProtocolState.READY:
                    m_client.disconnect();
                    return true;
                    case AuthenticationProtocolState.COMPLETE:
                        m_client.disconnect();
                        return true;
                    case AuthenticationProtocolState.CANCELLED:
                        log().error("the user cancelled authentication (this error should not occur)");
                        break;
                    case AuthenticationProtocolState.FAILED:
                        log().error("the authentication failed");
                        break;
                    case AuthenticationProtocolState.PARTIAL:
                        log().error("the authentication was rejected");
                        break;
                    default:
                        log().error("unknown AuthenticationProtocolState: " + result);
                        break;
                }
            } else {
                if (m_client.isConnected()) {
                    m_serverVersion = m_client.getServerId();
                    m_client.disconnect();
                    return true;
                } else {
                    log().error("client did not connect");
                }
            }
        } catch (IOException e) {
            log().debug("connection failed", e);
        } finally {
            if (m_client != null && m_client.isConnected()) {
                log().debug("client is still connected, disconnecting");
                m_client.disconnect();
            }
        }
        return false;
    }

