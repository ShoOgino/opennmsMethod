    /**
     * Attempt to connect, based on the parameters which have been set in
     * the object.
     * 
     * @return true if it is able to connect
     * @throws InsufficientParametersException
     */
    protected boolean tryConnect() throws InsufficientParametersException {
        if (getAddress() == null) {
            throw new InsufficientParametersException("you must specify an address");
        }

        try {
            m_socket = new Socket();
            m_socket.setTcpNoDelay(true);
            m_socket.connect(new InetSocketAddress(getAddress(), getPort()), getTimeout());
            
            m_reader = new BufferedReader(new InputStreamReader(m_socket.getInputStream()));
            m_writer = m_socket.getOutputStream();

            // read the banner
            m_serverBanner = m_reader.readLine();

            // write our own
            m_writer.write((m_banner + "\r\n").getBytes());

            // then, disconnect
            disconnect();

            String[] bannerBits = m_serverBanner.split("-");
            Double protocolVersion = Double.parseDouble(bannerBits[1]);
            if (protocolVersion >= 2.0) {
                throw new SshException("SSH server does not support version 1.x!");
            }

            return true;
        } catch (NumberFormatException e) {
            log().debug("unable to parse server version", e);
            setError(e);
            disconnect();
        } catch (Exception e) {
            log().debug("connection failed", e);
            setError(e);
            disconnect();
        }
        return false;
    }

