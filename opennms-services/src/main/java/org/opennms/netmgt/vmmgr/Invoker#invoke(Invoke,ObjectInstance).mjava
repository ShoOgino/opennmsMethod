    private Object invoke(Invoke invoke, ObjectInstance mbean) throws Throwable {
        Argument[] args = invoke.getArgument();
        Object[] parms = new Object[0];
        String[] sig = new String[0];
        if (args != null && args.length > 0) {
            parms = new Object[args.length];
            sig = new String[args.length];
            for (int k = 0; k < parms.length; k++) {
                try {
                    parms[k] = getArgument(args[k]);
                } catch (Throwable t) {
                    log().error("An error occurred building argument "
                            + k + " for operation "+ invoke.getMethod()
                            + " on MBean " + mbean.getObjectName() + ": " + t,
                            t);
                  throw t;
                }
                sig[k] = parms[k].getClass().getName();
            }
        }

        if (log().isDebugEnabled()) {
            log().debug("Invoking " + invoke.getMethod()
                      + " on object " + mbean.getObjectName());
        }

        Object object;
        try {
            String log4jPrefix = ThreadCategory.getPrefix(); 
            try {
                object = getServer().invoke(mbean.getObjectName(), invoke.getMethod(), parms, sig);
            } finally {
                ThreadCategory.setPrefix(log4jPrefix);
            }
        } catch (Throwable t) {
            log().error("An error occurred invoking operation "
                      + invoke.getMethod() + " on MBean "
                      + mbean.getObjectName() + ": " + t, t);
            throw t;
        }

        log().debug("Invocation successful.");

        return object;
    }

