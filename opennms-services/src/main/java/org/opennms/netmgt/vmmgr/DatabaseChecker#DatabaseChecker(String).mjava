    /**
     * Protected constructor
     * 
     * @exception java.io.IOException
     *                Thrown if the specified config file cannot be read
     * @exception org.exolab.castor.xml.MarshalException
     *                Thrown if the file does not conform to the schema.
     * @exception org.exolab.castor.xml.ValidationException
     *                Thrown if the contents do not match the required schema.
     */
    protected DatabaseChecker(String configFile) throws IOException,
						      MarshalException,
						      ValidationException,
						      ClassNotFoundException {
        /*
         * Set the system identifier for the source of the input stream.
         * This is necessary so that any location information can
         * positively identify the source of the error.
         */
        InputSource dbIn = new InputSource(new FileInputStream(configFile));
        dbIn.setSystemId(configFile);

        // Attempt to load the database reference.
        DataSourceConfiguration m_database = (DataSourceConfiguration) Unmarshaller.unmarshal(DataSourceConfiguration.class, dbIn);

        /*
        Param[] parms = m_database.getDatabaseChoice().getDriver().getParam();
        for (int i = 0; i < parms.length; i++) {
        	if (parms[i].getName().equals("user")) {
        		m_driverUser = parms[i].getValue();
        	} else if (parms[i].getName().equals("password")) {
        		m_driverPass = parms[i].getValue();
        	} else {
        		throw new ValidationException("Unsupported JDO parameter: " +
        				parms[i].getName());
        	}
        }
        */
        
        for (JdbcDataSource jdbcDataSource : getJdbcDataSources(m_database)) {
            m_driverUrl = jdbcDataSource.getUrl();
            m_driverUser = jdbcDataSource.getUserName();
            m_driverPass = jdbcDataSource.getPassword();
            String driverCN = jdbcDataSource.getClassName();
            Class.forName(driverCN);
        }
    }

