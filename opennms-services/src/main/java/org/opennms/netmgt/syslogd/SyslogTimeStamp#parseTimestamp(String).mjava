    public Date parseTimestamp(String source) throws ParseException {
        String monName = null;
        String dateStr = null;
        String hmsStr = null;
        String hourStr = null;
        String minStr = null;
        String secStr = null;

        StringTokenizer toker = new StringTokenizer(source, " ");

        int tokeCount = toker.countTokens();

        if (tokeCount != 3) {
            throw new ParseException("a valid timestamp has 3 fields, not "
                    + tokeCount, 0);
        }

        try {
            monName = toker.nextToken();
        } catch (NoSuchElementException ex) {
            throw new ParseException("could not parse month name (field 1)",
                    0);
        }

        try {
            dateStr = toker.nextToken();
        } catch (NoSuchElementException ex) {
            throw new ParseException(
                    "could not parse day of month (field 2)",
                    0);
        }

        try {
            hmsStr = toker.nextToken();
        } catch (NoSuchElementException ex) {
            throw new ParseException(
                    "could not parse time hh:mm:ss (field 3)",
                    0);
        }

        toker = new StringTokenizer(hmsStr, ":");

        tokeCount = toker.countTokens();

        if (tokeCount != 3) {
            throw new ParseException("'" + hmsStr
                    + "' is not a valid timestamp time string", 0);
        }

        try {
            hourStr = toker.nextToken();
        } catch (NoSuchElementException ex) {
            throw new ParseException("could not parse time hour (field 3.1)",
                    0);
        }
        try {
            minStr = toker.nextToken();
        } catch (NoSuchElementException ex) {
            throw new ParseException(
                    "could not parse time minute (field 3.2)",
                    0);
        }
        try {
            secStr = toker.nextToken();
        } catch (NoSuchElementException ex) {
            throw new ParseException(
                    "could not parse time second (field 3.3)",
                    0);
        }

        int month = 0;
        int date = 0;
        int hour = 0;
        int minute = 0;
        int second = 0;

        try {
            month = this.monthNameToInt(monName);
        } catch (ParseException ex) {
            throw new ParseException(
                    "could not convert month name (field 1)",
                    0);
        }

        try {
            date = Integer.parseInt(dateStr);
        } catch (NumberFormatException ex) {
            throw new ParseException("could not convert month day (field 2)",
                    0);
        }
        if (date < 1 || date > 31) {
            throw new ParseException("month day '" + date
                    + "' is out of range", 0);
        }

        try {
            hour = Integer.parseInt(hourStr);
        } catch (NumberFormatException ex) {
            throw new ParseException(("could not convert hour (field 3.1) '"
                    + hourStr + "' - " + ex.getMessage()), 0);
        }
        if (hour < 0 || hour > 24) {
            throw new ParseException("hour '" + hour + "' is out of range", 0);
        }

        try {
            minute = Integer.parseInt(minStr);
        } catch (NumberFormatException ex) {
            throw new ParseException(
                    ("could not convert minute (field 3.2) '"
                            + minStr + "' - " + ex.getMessage()),
                    0);
        }
        if (minute < 0 || minute > 59) {
            throw new ParseException("minute '" + minute
                    + "' is out of range", 0);
        }

        try {
            second = Integer.parseInt(secStr);
        } catch (NumberFormatException ex) {
            throw new ParseException(
                    ("could not convert second (field 3.3) '"
                            + secStr + "' - " + ex.getMessage()),
                    0);
        }
        if (second < 0 || second > 59) {
            throw new ParseException("second '" + second
                    + "' is out of range", 0);
        }

        Locale loc = Locale.US; // UNDONE

        TimeZone tz = TimeZone.getTimeZone(SyslogTimeStamp.DEFAULT_GMT_TZID);

        Calendar cal = Calendar.getInstance(tz, loc);

        cal.setTime(new Date());

        cal.set(cal.get(Calendar.YEAR), month, date, hour, minute, second);

        Date result = new Date(cal.getTime().getTime());

        return result;
    }

