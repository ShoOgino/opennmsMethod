    @Override
    protected Date parseDate(final String dateString) {
        if (dateString.endsWith("Z")) {
            try {
                final DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'");
                df.setTimeZone(TimeZone.getTimeZone("GMT"));
                return df.parse(dateString);
            } catch (final Exception e) {
                // try again with optional decimals
                try {
                    final DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'");
                    df.setLenient(true);
                    df.setTimeZone(TimeZone.getTimeZone("GMT"));
                    return df.parse(dateString);
                } catch (final Exception pe) {
                    LogUtils.debugf(this, pe, "Unable to parse date string '%s'.", dateString);
                }
            }
        } else {
            final String first = dateString.substring(0, dateString.lastIndexOf('-'));
            final String last = dateString.substring(dateString.lastIndexOf('-'));
            final String newString = first + last.replace(":", "");
            try {
                final DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ");
                return df.parse(newString);
            } catch (final Exception e) {
                // try again with optional decimals
                try {
                    final DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSSSSZ");
                    df.setLenient(true);
                    return df.parse(newString);
                } catch (final Exception pe) {
                    LogUtils.debugf(this, pe, "Unable to parse date string '%s'.", newString);
                }
            }
        }
        return null;
    }

