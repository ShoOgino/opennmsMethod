    /**
     * The execution context.
     */
    @Override
    public void run() {
        // get the context
        m_context = Thread.currentThread();

        // Get a log instance
        ThreadCategory.setPrefix(m_logPrefix);
        ThreadCategory log = ThreadCategory.getInstance(getClass());

        if (m_stop) {
            log.debug("Stop flag set before thread started, exiting");
            return;
        } else
            log.debug("Thread context started");

        // allocate a buffer
        final int length = 0xffff;
        final byte[] buffer = new byte[length];

        // set an SO timeout to make sure we don't block forever
        // if a socket is closed.
        try {
            log.debug("Setting socket timeout to " + SOCKET_TIMEOUT + "ms");
            m_dgSock.setSoTimeout(SOCKET_TIMEOUT);
        } catch (SocketException e) {
            log.warn("An I/O error occured while trying to set the socket timeout", e);
        }

        // Increase the receive buffer for the socket
        try {
            log.debug("Setting receive buffer size to " + length);
            m_dgSock.setReceiveBufferSize(length);
        } catch (SocketException e) {
            log.info("Failed to set the receive buffer to " + length, e);
        }
        // set to avoid numerous tracing message
        boolean ioInterrupted = false;
        // now start processing incoming requests
        while (!m_stop) {
            if (m_context.isInterrupted()) {
                log.debug("Thread context interrupted");
                break;
            }

            try {
                if (!ioInterrupted) {
                    log.debug("Waiting on a datagram to arrive");
                }

                DatagramPacket pkt = new DatagramPacket(buffer, length);
                m_dgSock.receive(pkt);

                //SyslogConnection *Must* copy packet data and InetAddress as DatagramPacket is a mutable type
                WaterfallExecutor.waterfall(m_executors, new SyslogConnection(pkt, m_matchPattern, m_hostGroup, m_messageGroup, m_UeiList, m_HideMessages, m_discardUei));
                ioInterrupted = false; // reset the flag
            } catch (SocketTimeoutException e) {
                ioInterrupted = true;
                continue;
            } catch (InterruptedIOException e) {
                ioInterrupted = true;
                continue;
            } catch (ExecutionException e) {
                log.error("Task execution failed in " + this.getClass().getSimpleName(), e);
                break;
            } catch (InterruptedException e) {
                log.error("Task interrupted in " + this.getClass().getSimpleName(), e);
                break;
            } catch (IOException e) {
                log.error("An I/O exception occured on the datagram receipt port, exiting", e);
                break;
            }

        } // end while status OK

        log.debug("Thread context exiting");

    }

