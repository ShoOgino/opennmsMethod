	/**
	 * Creates a new threshold event from the specified parms.
	 * @param dsValue
	 *            Data source value which triggered the threshold event
	 * @param threshold
	 *            Configured threshold
	 * @param uei
	 *            Event identifier
	 * @param date
	 *            source of event's timestamp
	 * @param m_nodeId
	 *            Node identifier of the affected interface
	 * @param ipAddr
	 *            IP address of the affected interface
	 * @param thresholder TODO
	 * @return new threshold event to be sent to Eventd
	 * @throws ThresholdingException 
	 */
	Event createEvent(double dsValue, Threshold threshold, String uei, Date date) throws ThresholdingException {
		int nodeId = getNodeId();
		InetAddress ipAddr = getInetAddress();
		
		ThreadCategory log = ThreadCategory.getInstance(LatencyInterface.class);
	
	    if (threshold == null)
	        throw new IllegalArgumentException("threshold cannot be null.");
	
	    if (log.isDebugEnabled()) {
	        log.debug("createEvent: ds=" + threshold.getDsName() + " uei=" + uei);
	    }
	
	    // create the event to be sent
	    Event newEvent = new Event();
	    newEvent.setUei(uei);
	    newEvent.setNodeid((long) nodeId);
	    newEvent.setInterface(ipAddr.getHostAddress());
	    newEvent.setService(getServiceName());
	
	    // set the source of the event to the datasource name
	    newEvent.setSource("OpenNMS.Threshd:" + threshold.getDsName());
	
	    // Set event host
	    //
	    try {
	        newEvent.setHost(InetAddress.getLocalHost().getHostName());
	    } catch (UnknownHostException uhE) {
	        newEvent.setHost("unresolved.host");
	        log.warn("Failed to resolve local hostname", uhE);
	    }
	
	    // Set event time
	    newEvent.setTime(EventConstants.formatToString(date));
	
	    // Add appropriate parms
	    //
	    Parms eventParms = new Parms();
	    Parm eventParm = null;
	    Value parmValue = null;
	
	    // Add datasource name
	    eventParm = new Parm();
	    eventParm.setParmName("ds");
	    parmValue = new Value();
	    parmValue.setContent(threshold.getDsName());
	    eventParm.setValue(parmValue);
	    eventParms.addParm(eventParm);
	
	    // Add last known value of the datasource
	    // fetched from its RRD file
	    //
	    eventParm = new Parm();
	    eventParm.setParmName("value");
	    parmValue = new Value();
	    parmValue.setContent(Double.toString(dsValue));
	    eventParm.setValue(parmValue);
	    eventParms.addParm(eventParm);
	
	    // Add configured threshold value
	    eventParm = new Parm();
	    eventParm.setParmName("threshold");
	    parmValue = new Value();
	    parmValue.setContent(Double.toString(threshold.getValue()));
	    eventParm.setValue(parmValue);
	    eventParms.addParm(eventParm);
	
	    // Add configured trigger value
	    eventParm = new Parm();
	    eventParm.setParmName("trigger");
	    parmValue = new Value();
	    parmValue.setContent(Integer.toString(threshold.getTrigger()));
	    eventParm.setValue(parmValue);
	    eventParms.addParm(eventParm);
	
	    // Add configured rearm value
	    eventParm = new Parm();
	    eventParm.setParmName("rearm");
	    parmValue = new Value();
	    parmValue.setContent(Double.toString(threshold.getRearm()));
	    eventParm.setValue(parmValue);
	    eventParms.addParm(eventParm);
	
	    // Add Parms to the event
	    newEvent.setParms(eventParms);
	
	    return newEvent;
	}

