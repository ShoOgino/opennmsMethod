    /**
     * Performs threshold checking on an SNMP RRD node directory.
     * 
     * @param directory
     *            RRD repository directory
     * @param nodeId
     *            Node identifier
     * @param primary
     *            Primary SNMP interface address
     * @param interval
     *            Configured thresholding interval
     * @param range
     *            Age before which PDP is considered out of date
     * @param date
     *            Source for timestamp to be used for all generated events
     * @param thresholdMap
     *            Map of node level ThresholdEntity objects keyed by datasource
     *            name.
     * @param events
     *            Castor events object containing any events to be generated as
     *            a result of threshold checking.
     * 
     * @throws IllegalArgumentException
     *             if path parameter is not a directory.
     */
    private void checkNodeDir(File directory, Integer nodeId, InetAddress primary, int interval, int range,  Date date, Map thresholdMap, Events events) throws IllegalArgumentException {
        Category log = log();

        // Sanity Check
        if (directory == null || nodeId == null || primary == null || date == null || thresholdMap == null || events == null) {
            throw new IllegalArgumentException("Null parameters not permitted.");
        }

        if (log.isDebugEnabled()) {
            log.debug("checkNodeDir: threshold checking node dir: " + directory.getAbsolutePath());
        }

        // Iterate over directory contents and threshold
        // check any RRD files which represent datasources
        // in the threshold maps.
        File[] files = directory.listFiles(RrdFileConstants.RRD_FILENAME_FILTER);

        if (files == null) {
            return;
        }

        for (int i = 0; i < files.length; i++) {
            // File name has format: <datsource><extension>
            // Must strip off extension portion.
            String filename = files[i].getName();
            String datasource = filename.substring(0, filename.indexOf(RrdUtils.getExtension()));

            // Lookup the ThresholdEntity object corresponding
            // to this datasource.
            ThresholdEntity threshold = (ThresholdEntity) thresholdMap.get(datasource);
            if (threshold != null) {
                // Use RRD strategy to "fetch" value of the
                // datasource from the RRD file
                Double dsValue = null;
                try {
                	if (range != 0) {
                		if (log.isDebugEnabled()) {
                            log.debug("checking values within " + range + " mS of last possible PDP");
                        }
                		dsValue = RrdUtils.fetchLastValueInRange(files[i].getAbsolutePath(), interval, range);
                	} else {
                		if (log.isDebugEnabled()) {
                            log.debug("checking value of last possible PDP only");
                        }
                		dsValue = RrdUtils.fetchLastValue(files[i].getAbsolutePath(), interval);
                	}
                } catch (NumberFormatException e) {
                    log.warn("Unable to convert retrieved value for datasource '" + datasource + "' to a double, skipping evaluation.");
                } catch (RrdException e) {
                    log.info("An error occurred retriving the last value for datasource '" + datasource + "': " + e, e);
                }
                
                if (dsValue == null || dsValue.isNaN()) {
                    continue;
                }
                
                List<Event> eventList = threshold.evaluateAndCreateEvents(dsValue, date);
                if (eventList.size() == 0) {
                    // Nothing to do, so continue
                    continue;
                }
                
                completeEventListAndAddToEvents(events, eventList, nodeId, primary, null);
            }
        }
    }

