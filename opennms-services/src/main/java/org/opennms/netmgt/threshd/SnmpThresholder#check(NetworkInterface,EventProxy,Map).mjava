    /**
     * Perform threshold checking.
     * 
     * @param iface
     *            Network interface to be data collected.
     * @param eproxy
     *            Eventy proxy for sending events.
     * @param parameters
     *            Key/value pairs from the package to which the interface
     *            belongs.
     */
    public int check(NetworkInterface netIface, EventProxy eproxy, Map parms) {
        
        SnmpThresholdInterface snmpIface = SnmpThresholdInterface.get(netIface);
        SnmpThresholdConfiguration thresholdConfiguration = SnmpThresholdConfiguration.get(netIface, parms);
        SnmpThresholderState thresholderState = SnmpThresholderState.get(netIface, parms);

        // Get configuration parameters
        //
        if (log().isDebugEnabled())
        	log().debug("check: service= " + SERVICE_NAME + " address= " + snmpIface.getIpAddress() + " thresholding-group=" + thresholdConfiguration.getGroupName() + " interval=" + thresholdConfiguration.getInterval() + "ms range=" + thresholdConfiguration.getRange() + " mS");

        // RRD Repository attribute
        //
        if (log().isDebugEnabled())
            log().debug("check: rrd repository=" + thresholdConfiguration.getRrdRepository());


        // -----------------------------------------------------------
        // 
        // Perform node-level threshold checking
        //
        // -----------------------------------------------------------

        // Get File object representing the node directory
        File nodeDirectory = new File(thresholdConfiguration.getRrdRepository(), snmpIface.getNodeId().toString());
        if (!RrdFileConstants.isValidRRDNodeDir(nodeDirectory)) {
            log().info("Node directory for " + snmpIface.getNodeId() + "/" + snmpIface.getIpAddress() + " does not exist or is not a valid RRD node directory.");
            log().info("Threshold checking failed for primary SNMP interface " + snmpIface.getIpAddress());
            return THRESHOLDING_FAILED;
        }

        // Create empty Events object to hold any threshold
        // events generated during the thresholding check...
        Events events = new Events();

        // Date stamp for all outgoing events
        Date dateStamp = new Date();

        try {
        	checkNodeDir(nodeDirectory, snmpIface, thresholdConfiguration, dateStamp, events);
        } catch (IllegalArgumentException e) {
            log().info("check: Threshold checking failed for primary SNMP interface " + snmpIface.getIpAddress(), e);
            return THRESHOLDING_FAILED;
        }

        // -----------------------------------------------------------
        // 
        // Perform interface-level threshold checking
        //
        // -----------------------------------------------------------

        // Iterate over node directory contents and call
        // checkInterfaceDirectory() for any/all RRD interface
        // directories.
        //
        File[] files = nodeDirectory.listFiles(RrdFileConstants.INTERFACE_DIRECTORY_FILTER);
        if (files != null) {
            for (int i = 0; i < files.length; i++) {
                try {
                    // Found interface directory...
                    checkIfDir(files[i], snmpIface.getNodeId(), snmpIface.getInetAddress(), thresholdConfiguration.getInterval(), thresholdConfiguration.getRange(), dateStamp, thresholdConfiguration.getBaseInterfaceMap(), thresholderState.getAllInterfaceMap(), events);
                } catch (IllegalArgumentException e) {
                    log().info("check: Threshold checking failed for primary SNMP interface " + snmpIface.getIpAddress(), e);
                    return THRESHOLDING_FAILED;
                }
            }
        }

        // Send created events
        //
        if (events.getEventCount() > 0) {
            try {
                Log eventLog = new Log();
                eventLog.setEvents(events);
                eproxy.send(eventLog);
            } catch (EventProxyException e) {
                log().info("check: Failed sending threshold events via event proxy...", e);
                return THRESHOLDING_FAILED;
            }
        }

        // return the status of the threshold check
        //
        return THRESHOLDING_SUCCEEDED;
    }

