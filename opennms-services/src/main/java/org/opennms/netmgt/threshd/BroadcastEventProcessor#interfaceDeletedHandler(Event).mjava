    /**
     * This method is responsible for handling interfaceDeleted events.
     * 
     * @param event
     *            The event to process.
     * 
     */
    private void interfaceDeletedHandler(Event event) {
        ThreadCategory log = ThreadCategory.getInstance(getClass());

        long nodeId = event.getNodeid();
        InetAddress ipAddr = event.getInterfaceAddress();

        // Iterate over the collectable services list and mark any entries
        // which match the deleted nodeId/IP address pair for deletion
        synchronized (m_thresholdableServices) {
            ThresholdableService tSvc = null;
            ListIterator<ThresholdableService> liter = m_thresholdableServices.listIterator();
            while (liter.hasNext()) {
                tSvc = liter.next();

                // Only interested in entries with matching nodeId and IP
                // address
                InetAddress addr = (InetAddress) tSvc.getAddress();
                if (!(tSvc.getNodeId() == nodeId && addr.equals(ipAddr)))
                    continue;

                synchronized (tSvc) {
                    // Retrieve the ThresholderUpdates object associated with
                    // this ThresholdableService if one exists.
                    ThresholderUpdates updates = tSvc.getThresholderUpdates();

                    // Now set the update's deletion flag so the next
                    // time it is selected for execution by the scheduler
                    // the thresholding will be skipped and the service will not
                    // be rescheduled.
                    updates.markForDeletion();
                }

                // Now safe to remove the collectable service from
                // the collectable services list
                liter.remove();
            }
        }

        if (log.isDebugEnabled())
            log.debug("interfaceDeletedHandler: processing of interfaceDeleted event for " + nodeId + "/" + ipAddr + " completed.");
    }

