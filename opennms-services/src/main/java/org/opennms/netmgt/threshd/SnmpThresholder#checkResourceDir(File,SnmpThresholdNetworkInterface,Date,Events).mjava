    /**
     * <p>checkResourceDir</p>
     *
     * @param directory a {@link java.io.File} object.
     * @param snmpIface a {@link org.opennms.netmgt.threshd.SnmpThresholdNetworkInterface} object.
     * @param date a {@link java.util.Date} object.
     * @param events a {@link org.opennms.netmgt.xml.event.Events} object.
     * @throws java.lang.IllegalArgumentException if any.
     */
    protected void checkResourceDir(File directory, SnmpThresholdNetworkInterface snmpIface, Date date, Events events) throws IllegalArgumentException {
        // TODO: do more specific and thorough assertions on arguments

        // Sanity Check
        if (directory == null || snmpIface.getNodeId() == null || snmpIface.getInetAddress() == null || date == null || events == null) {
            throw new IllegalArgumentException("Null parameters not permitted.");
        }

        LOG.debug("checkResourceDir: threshold checking generic resource dir: {}", directory.getAbsolutePath());
        
        String resourceType = directory.getName();
        
        if (!directory.exists()) {
		LOG.debug("Aborting check because this node does not support Resource Type {}", resourceType);
        	return;
        }

        SnmpThresholdConfiguration config = snmpIface.getThresholdConfiguration(); 
        LOG.debug("checkResourceDir: group={}, resourceType={}", config.getGroupName(), resourceType);
        
        ThresholdResourceType thresholdResourceType = config.getGenericResourceTypeMap().get(resourceType);
        if (thresholdResourceType == null) {
            LOG.info("No generic resources for group {}", config.getGroupName());
            return;
        }
        Map<String, Set<ThresholdEntity>> thresholdMap = thresholdResourceType.getThresholdMap();
        
        File[] files = directory.listFiles();
        for (File file : files) {
            String resource = file.getName();
            for(Set<ThresholdEntity> threshEntities : thresholdMap.values()) {
                LOG.debug("checkResourceDir: resource=", resource);
                for (ThresholdEntity thresholdEntity : threshEntities) {
	                String dsLabelValue = getDataSourceLabel(file, snmpIface, thresholdEntity);
	                processThresholdForResource(file, snmpIface, date, events, thresholdEntity, dsLabelValue);
                }
            }
        }
    }

