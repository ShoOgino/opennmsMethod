    protected void onInit() {

    	// get the category logger
        if (log().isDebugEnabled())
            log().debug("start: Initializing thresholding daemon");

        if (log().isDebugEnabled())
            log().debug("start: Loading thresholders");

        // Threshd configuration
        //
        ThreshdConfiguration config = m_threshdConfig.getConfiguration();

        // Load up an instance of each thresholder from the config
        // so that the event processor will have them for
        // new incomming events to create collectable service objects.
        //
        Enumeration eiter = config.enumerateThresholder();
        while (eiter.hasMoreElements()) {
            Thresholder thresholder = (Thresholder) eiter.nextElement();
            try {
                if (log().isDebugEnabled()) {
                    log().debug("start: Loading thresholder " + thresholder.getService() + ", classname " + thresholder.getClassName());
                }
                Class tc = Class.forName(thresholder.getClassName());
                ServiceThresholder st = (ServiceThresholder) tc.newInstance();

                // Attempt to initialize the service thresholder
                //

                // Store service name in map keyed by "svcName"
                Map properties = new HashMap();
                properties.put("svcName", thresholder.getService());

                st.initialize(properties);

                m_svcThresholders.put(thresholder.getService(), st);
            } catch (Throwable t) {
                if (log().isEnabledFor(Priority.WARN)) {
                    log().warn("start: Failed to load thresholder " + thresholder.getClassName() + " for service " + thresholder.getService(), t);
                }
            }
        }

        // Create a scheduler
        //
        try {
            if (log().isDebugEnabled())
                log().debug("start: Creating threshd scheduler");

            m_scheduler = new LegacyScheduler("Threshd", config.getThreads());
        } catch (RuntimeException e) {
            if (log().isEnabledFor(Priority.FATAL))
                log().fatal("start: Failed to create threshd scheduler", e);
            throw e;
        }

        if (log().isDebugEnabled())
            log().debug("start: Scheduling existing interfaces");

        // Schedule existing interfaces for thresholding
        //

        ReadyRunnable interfaceScheduler = new ReadyRunnable() {

            public boolean isReady() {
                return true;
            }

            public void run() {
                //
                try {
                    scheduleExistingInterfaces();
                } catch (SQLException sqlE) {
                    if (log().isEnabledFor(Priority.ERROR))
                        log().error("start: Failed to schedule existing interfaces", sqlE);
                } finally {
                    setSchedulingCompleted(true);
                }

            }
        };

        m_scheduler.schedule(interfaceScheduler, 0);

        // Create an event receiver. The receiver will
        // receive events, process them, creates network
        // interfaces, and schedulers them.
        //
        try {
            if (log().isDebugEnabled())
                log().debug("start: Creating event broadcast event processor");

            m_receiver = new BroadcastEventProcessor(this, m_thresholdableServices);
        } catch (Throwable t) {
            if (log().isEnabledFor(Priority.FATAL))
                log().fatal("start: Failed to initialized the broadcast event receiver", t);

            throw new UndeclaredThrowableException(t);
        }

        // Set the status of the service as running.
        //
        setStatus(RUNNING);

        if (log().isDebugEnabled())
            log().debug("start: Threshd running");
    }

