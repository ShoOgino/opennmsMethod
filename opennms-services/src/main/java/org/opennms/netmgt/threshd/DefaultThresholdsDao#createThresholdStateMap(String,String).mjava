    private Map<String, Set<ThresholdEntity>> createThresholdStateMap(String type, String groupName) {
        Map<String, Set<ThresholdEntity>> thresholdMap = new HashMap<String, Set<ThresholdEntity>>();
        
        for (Basethresholddef thresh : getThresholdingConfigFactory().getThresholds(groupName)) {
            // See if map entry already exists for this datasource
            // If not, create a new one.
            if (thresh.getDsType().equals(type)) {
                try {
                    BaseThresholdDefConfigWrapper wrapper=BaseThresholdDefConfigWrapper.getConfigWrapper(thresh);
                    //ThresholdEntity thresholdEntity = thresholdMap.get(wrapper.getDatasourceExpression());
                    Set<ThresholdEntity> thresholdEntitySet = thresholdMap.get(wrapper.getDatasourceExpression());
            
                    // Found set for this DS type?
                    if (thresholdEntitySet == null) {
                        // Nope, create a new set
                        thresholdEntitySet = new LinkedHashSet<ThresholdEntity>();
                        thresholdMap.put(wrapper.getDatasourceExpression(), thresholdEntitySet);
                    }
            
                    try {
                    	ThresholdEntity thresholdEntity = new ThresholdEntity();
                    	thresholdEntity.addThreshold(wrapper);
                    	thresholdMap.get(wrapper.getDatasourceExpression()).add(thresholdEntity);
                    } catch (IllegalStateException e) {
                        log().warn("Encountered duplicate " + thresh.getType() + " for datasource " + wrapper.getDatasourceExpression() + ": " + e, e);
                    } 
                }
                catch (ThresholdExpressionException e) {
                    log().warn("Could not parse threshold expression: "+e.getMessage(), e);
                }

            }
        }
        
        return thresholdMap;
    }

