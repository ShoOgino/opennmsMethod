    /**
     * Responsible for performing all necessary initialization for the specified
     * interface in preparation for thresholding.
     * 
     * @param iface
     *            Network interface to be prepped for thresholding.
     * @param parameters
     *            Key/value pairs associated with the package to which the
     *            interface belongs..
     * 
     */
    public void initialize(NetworkInterface netIface, Map parms) {
        
        
        SnmpThresholdInterface snmpIface = SnmpThresholdInterface.get(netIface);
        SnmpThresholdConfiguration thresholdConfiguration = SnmpThresholdConfiguration.get(netIface, parms);
        
        if (!snmpIface.isIPV4())
            throw new RuntimeException("Unsupported interface type, only TYPE_IPV4 currently supported");

        // Debug
        //
        if (log().isDebugEnabled()) {
            log().debug("initialize: dumping node thresholds defined for " + snmpIface.getIpAddress() + "/" + thresholdConfiguration.getGroupName() + ":");
            Iterator iter = thresholdConfiguration.getNodeResourceType().getThresholdMap().values().iterator();
            while (iter.hasNext()) {
                log().debug((ThresholdEntity) iter.next());
            }

            log().debug("initialize: dumping interface thresholds defined for " + snmpIface.getIpAddress() + "/" + thresholdConfiguration.getGroupName() + ":");
            iter = thresholdConfiguration.getIfResourceType().getThresholdMap().values().iterator();
            while (iter.hasNext()) {
                log().debug((ThresholdEntity) iter.next());
            }
        }

        if (log().isDebugEnabled())
            log().debug("initialize: initialization completed for " + snmpIface.getIpAddress());
        return;
    }

