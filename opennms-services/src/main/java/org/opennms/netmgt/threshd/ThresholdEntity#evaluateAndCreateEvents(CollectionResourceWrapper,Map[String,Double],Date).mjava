    /**
     * Evaluates the threshold in light of the provided datasource value, for
     * the named instance (or the generic instance if instance is null) and
     * create any events for thresholds.
     *
     * @param values
     *          map of values (by datasource name) to evaluate against the threshold (might be an expression)
     * @param date
     *          Date to use in created events
     * @return List of events
     * @param resource a {@link org.opennms.netmgt.threshd.CollectionResourceWrapper} object.
     */
    public List<Event> evaluateAndCreateEvents(CollectionResourceWrapper resource, Map<String, Double> values, Date date) {
        List<Event> events = new LinkedList<Event>();
        double dsValue=0.0;
        String instance = resource != null ? resource.getInstance() : null;
        try {
            if (getThresholdEvaluatorStates(instance).size() > 0) {
                dsValue=getThresholdConfig().evaluate(values);
            } else {
                throw new IllegalStateException("No thresholds have been added.");
            }
        } catch (ThresholdExpressionException e) {
            LOG.warn("Failed to evaluate: ", e);
            return events; //No events to report
        }
        
        LOG.debug("evaluate: value= " + dsValue + " against threshold: " + this);

        for (ThresholdEvaluatorState item : getThresholdEvaluatorStates(instance)) {
            Status status = item.evaluate(dsValue);
            Event event = item.getEventForState(status, date, dsValue, resource);
            if (event != null) {
                events.add(event);
            }
        }

        return events;
    }

