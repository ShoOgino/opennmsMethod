    /**
     * Evaluates the threshold in light of the provided datasource value and
     * create any events for thresholds.
     * 
     * @param dsValue
     *            Current value of datasource

     * @return List of events
     */
    public List<Event> evaluateAndCreateEvents(Map<String, Double> values, Date date) {
        List<Event> events = new LinkedList<Event>();
        double dsValue=0.0;
        
        try {
            if (getThresholdEvaluatorStates().size() > 0) {
                dsValue=getThresholdEvaluatorStates().get(0).getThresholdConfig().evaluate(values);
            } else {
                throw new IllegalStateException("No thresholds have been added.");
            }
        } catch (ThresholdExpressionException e) {
            log().warn("Failed to evaluate: ", e);
            return events; //No events to report
        }
        
        if (log().isDebugEnabled()) {
            log().debug("evaluate: value= " + dsValue + " against threshold: " + this);
        }        

        for (ThresholdEvaluatorState item : getThresholdEvaluatorStates()) {
            Status status = item.evaluate(dsValue);
            Event event = item.getEventForState(status, date, dsValue);
            if (event != null) {
                events.add(event);
            }
        }

        return events;
    }

