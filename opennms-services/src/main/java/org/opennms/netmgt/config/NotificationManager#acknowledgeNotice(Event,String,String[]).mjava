    /**
     * 
     */
    public Collection<Integer> acknowledgeNotice(final Event event, final String uei, final String[] matchList) throws SQLException, IOException, MarshalException, ValidationException {
        Connection connection = null;
        List<Integer> notifIDs = new LinkedList<Integer>();
        final DBUtils d = new DBUtils(getClass());

        try {
            // First get most recent event ID from notifications 
            // that match the matchList, then get all notifications
            // with this event ID
            connection = getConnection();
            d.watch(connection);
            int eventID = 0;
            boolean wasAcked = false;
            StringBuffer sql = new StringBuffer("SELECT eventid FROM notifications WHERE eventuei=? ");
            for (int i = 0; i < matchList.length; i++) {
                sql.append("AND ").append(matchList[i]).append("=? ");
            }
            sql.append("ORDER BY eventid desc limit 1");
            PreparedStatement statement = connection.prepareStatement(sql.toString());
            d.watch(statement);
            statement.setString(1, uei);
    
            for (int i = 0; i < matchList.length; i++) {
                if (matchList[i].equals("nodeid")) {
                    statement.setLong(i + 2, event.getNodeid());
                }
    
                if (matchList[i].equals("interfaceid")) {
                    statement.setString(i + 2, event.getInterface());
                }
    
                if (matchList[i].equals("serviceid")) {
                    statement.setInt(i + 2, getServiceId(event.getService()));
                }
            }
    
            ResultSet results = statement.executeQuery();
            d.watch(results);
            if (results != null && results.next()) {
                eventID = results.getInt(1);
                log().debug("EventID for notice(s) to be acked: " + eventID);


                sql = new StringBuffer("SELECT notifyid, answeredby, respondtime FROM notifications WHERE eventID=?");
    
                statement = connection.prepareStatement(sql.toString());
                statement.setInt(1, eventID);
    
                results = statement.executeQuery();
    
                if (results != null) {
                    while (results.next()) {
                        int notifID = results.getInt(1);
                        String ansBy = results.getString(2);
                        Timestamp ts = results.getTimestamp(3);
                        if(ansBy == null) {
                            ansBy = "auto-acknowledged";
                            ts = new Timestamp((new Date()).getTime());
                        } else if(ansBy.indexOf("auto-acknowledged") > -1) {
                            log().debug("Notice has previously been auto-acknowledged. Skipping...");
                            continue;
                        } else {
                            wasAcked = true;
                            ansBy = ansBy + "/auto-acknowledged";
                        }
                        log().debug("Matching DOWN notifyID = " + notifID + ", was acked by user = " + wasAcked + ", ansBy = " +ansBy);
                        final PreparedStatement update = connection.prepareStatement(getConfigManager().getConfiguration().getAcknowledgeUpdateSql());
                        d.watch(update);
    
                        update.setString(1, ansBy);
                        update.setTimestamp(2, ts);
                        update.setInt(3, notifID);
    
                        update.executeUpdate();
                        update.close();
                        if(wasAcked) {
                            notifIDs.add(new Integer(-1 * notifID));
                        } else {
                            notifIDs.add(new Integer(notifID));
                        }
                    }
                }
            } else {
                log().debug("No matching DOWN eventID found");
            }
        } finally {
            d.cleanUp();
        }
        return notifIDs;
    }

