    /* (non-Javadoc)
     * @see org.opennms.netmgt.config.EventConfDao#saveCurrent()
     */
    /**
     * <p>saveCurrent</p>
     */
    public synchronized void saveCurrent() {
        for (final Entry<Resource, Events> entry : getEventConfiguration().getEventFiles().entrySet()) {
            final Resource resource = entry.getKey();
            final Events fileEvents = entry.getValue();
            
            final StringWriter stringWriter = new StringWriter();
            JaxbUtils.marshal(fileEvents, stringWriter);
            
            if (stringWriter.toString() != null) {
                File file;
                try {
                    file = resource.getFile();
                } catch (final IOException e) {
                    throw new DataAccessResourceFailureException("Event resource '" + resource + "' is not a file resource and cannot be saved.  Nested exception: " + e, e);
                }
                
                final Writer fileWriter;
                try {
                    fileWriter = new OutputStreamWriter(new FileOutputStream(file), "UTF-8");
                } catch (final IOException e) {
                    throw new DataAccessResourceFailureException("Event file '" + file + "' could not be opened.  Nested exception: " + e, e);
                }
                
                try {
                    fileWriter.write(stringWriter.toString());
                } catch (final IOException e) {
                    throw new DataAccessResourceFailureException("Event file '" + file + "' could not be written to.  Nested exception: " + e, e);
                }
                
                try {
                    fileWriter.close();
                } catch (final IOException e) {
                    throw new DataAccessResourceFailureException("Event file '" + file + "' could not be closed.  Nested exception: " + e, e);
                }
            }
        }
        
        final File programmaticStoreFile;
        try {
            programmaticStoreFile = getProgrammaticStoreConfigResource().getFile();
        
            // Delete the programmatic store if it exists on disk, but isn't in the main store.  This is for cleanliness
            if (programmaticStoreFile.exists() && (!getEventConfiguration().getEventFiles().containsKey(getProgrammaticStoreConfigResource()))) {
                LogUtils.infof(this, "Deleting programmatic store configuration file because it is no longer referenced in the root config file %s", getConfigResource());
                if (!programmaticStoreFile.delete()) {
                    LogUtils.warnf(this, "Attempted to delete %s, but failed.", programmaticStoreFile);
                }
            }

        } catch (final IOException e) {
            LogUtils.infof(this, "Programmatic store resource '%s'; not attempting to delete an unused programmatic store file if it exists (since we can't test for it).", getProgrammaticStoreConfigResource());
        }
        
        /*
         * XXX Should we call reload so that the EventConfData object is updated
         * without the caller having to call reload() themselves? 
         */
        //reload();
    }

