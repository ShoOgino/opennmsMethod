    /**
     * <p>getAllExcludes</p>
     *
     * @return a {@link java.util.Set} object.
     */
    public Set<Serializable> getAllExcludes() {
	ThreadCategory log = ThreadCategory.getInstance(VulnscandConfigFactory.class);
        if (m_excludes == null) {
            m_excludes = new TreeSet<Serializable>();

            Excludes excludes = m_config.getExcludes();

            if (excludes != null) {
                if (excludes.getRangeCount() > 0) {
                    Enumeration<?> e = excludes.enumerateRange();
                    while (e.hasMoreElements()) {
                        Range ir = (Range) e.nextElement();

                        try {
                            for (long i = Long.parseLong(ir.getBegin()); i <= Long.parseLong(ir.getEnd()); i++) {
                                m_excludes.add(toInetAddress(i));
                            }
                        } catch (UnknownHostException uhE) {
                            ThreadCategory.getInstance(getClass()).warn("Failed to convert address range (" + ir.getBegin() + ", " + ir.getEnd() + ")", uhE);
                        }
                    }
                }

		/*
		new Integer(new IPv4Address(specific).getAddress()),
                                 specific);
		*/

                if (excludes.getSpecificCount() > 0) {
                    Enumeration<?> e = excludes.enumerateSpecific();
                    while (e.hasMoreElements()) {
                        String current = (String) e.nextElement();
        		log.debug("excludes: Specific  " + current + " Converted:" + new IPv4Address(current).getAddress());
              		//          try {
			//m_excludes.add(InetAddress.getByName(current));
			//JOHAN - The Scheduler expects a String
			m_excludes.add(current);

			    
                        //} catch (UnknownHostException uhE) {
                         //   ThreadCategory.getInstance().warn("Failed to convert address: " + current, uhE);
                        //}
                    }
                }
            }
        }
        return m_excludes;
    }

