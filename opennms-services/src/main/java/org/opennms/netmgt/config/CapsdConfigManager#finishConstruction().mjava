    /**
     * 
     */
    private void finishConstruction() throws ValidationException {
        // now load the plugins!
        // Map by protocol name and also by class name!
        //
        Enumeration eprotos = m_config.enumerateProtocolPlugin();
        while (eprotos.hasMoreElements()) {
            ProtocolPlugin plugin = (ProtocolPlugin) eprotos.nextElement();
            try {
                if (m_plugins.containsKey(plugin.getClassName())) {
                    Object oplugin = m_plugins.get(plugin.getClassName());
                    m_plugins.put(plugin.getProtocol(), oplugin);
                } else {
                    Class cplugin = Class.forName(plugin.getClassName());
                    Object oplugin = cplugin.newInstance();
    
                    // map them
                    //
                    m_plugins.put(plugin.getClassName(), oplugin);
                    m_plugins.put(plugin.getProtocol(), oplugin);
                }
            } catch (Throwable t) {
                String message = "CapsdConfigFactory: failed to load plugin for protocol " + plugin.getProtocol() + ", class-name = " + plugin.getClassName() + ", exception = " + t; 
                log().error(message, t);
                throw new ValidationException(message, t);
            }
        }
        // Load addresses from any urls which have been specified
        //
        m_urlMap = new HashMap();
        Enumeration e = m_config.enumerateIpManagement();
        while (e.hasMoreElements()) {
            IpManagement mgt = (IpManagement) e.nextElement();
    
            Enumeration f = mgt.enumerateIncludeUrl();
            while (f.hasMoreElements()) {
                String url = f.nextElement().toString();
                if (!m_urlMap.containsKey(url))
                    m_urlMap.put(url, getAddressesFromURL(url));
            }
        }
        if (getNextSvcIdSql() == null) {
            setNextSvcIdSql(NEXT_SVC_ID_SQL);
        }
    }

