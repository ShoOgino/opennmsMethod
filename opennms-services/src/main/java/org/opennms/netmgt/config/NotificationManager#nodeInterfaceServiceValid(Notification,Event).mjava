    /**
     * <p>nodeInterfaceServiceValid</p>
     *
     * @param notif a {@link org.opennms.netmgt.config.notifications.Notification} object.
     * @param event a {@link org.opennms.netmgt.xml.event.Event} object.
     * @return a boolean.
     */
    protected boolean nodeInterfaceServiceValid(final Notification notif, final Event event) {
        Assert.notNull(notif, "notif argument must not be null");
        Assert.notNull(event, "event argument must not be null");
        Assert.notNull(notif.getRule(), "getRule() on notif argument must not return null");
        
        /*
         *  If the event doesn't have a nodeId, interface, or service,
         *  return true since there is nothing on which to filter.
         */
        if (event.getNodeid() == 0 && event.getInterface() == null &&
                event.getService() == null) {
            if ("MATCH-ANY-UEI".equals(notif.getUei())) {
               if ("ipaddr != '0.0.0.0'".equals(notif.getRule().toLowerCase()) || "ipaddr iplike *.*.*.*".equals(notif.getRule().toLowerCase())) {
                   return true;
               } else {
                   return false;
               }
            }
            return true;
        }

        StringBuffer constraints = new StringBuffer();
        if (event.getNodeid() != 0) {
            constraints.append(" & (nodeId == " + event.getNodeid() + ")");
        }
        
        if (event.getInterface() != null
                && !"0.0.0.0".equals(event.getInterface())) {
            constraints.append(" & (ipAddr == '" + event.getInterface() + "')");
            if (event.getService() != null) {
                constraints.append(" & (serviceName == '" + event.getService() + "')");
            }
        }
        
        String rule = "((" + notif.getRule() + ")" + constraints + ")";

        return isRuleMatchingFilter(notif, rule);
    }

