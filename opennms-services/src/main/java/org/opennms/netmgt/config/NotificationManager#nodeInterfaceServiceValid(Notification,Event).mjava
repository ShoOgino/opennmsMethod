    protected boolean nodeInterfaceServiceValid(Notification notif, Event event) {
        Assert.notNull(notif, "notif argument must not be null");
        Assert.notNull(event, "event argument must not be null");
        Assert.notNull(notif.getRule(), "getRule() on notif argument must not return null");
        
        /*
         *  If the event doesn't have a nodeId, interface, or service,
         *  return true since there is nothing on which to filter.
         */
        if (event.getNodeid() == 0 && event.getInterface() == null &&
                event.getService() == null) {
            return true;
        }

        StringBuffer constraints = new StringBuffer();
        if (event.getNodeid() != 0) {
            constraints.append(" & (nodeId == " + event.getNodeid() + ")");
        }
        
        if (event.getInterface() != null
                && !"0.0.0.0".equals(event.getInterface())) {
            constraints.append(" & (ipAddr == '" + event.getInterface() + "')");
            if (event.getService() != null) {
                constraints.append(" & (serviceName == '" + event.getService() + "')");
            }
        }
        
        String rule = "(" + notif.getRule() + constraints + ")";

        Connection connection = null;
        Statement stmt = null;
        ResultSet rows = null;
        
        try {
            String sql = getInterfaceFilter(rule) + " LIMIT 1";
    
            if (log().isDebugEnabled()) {
                log().debug("getInterfaceFilter returned SQL for notification " + notif.getName() + " with computed rule \"" + rule + "\": " + sql);
            }
    
            connection = getConnection();
            stmt = connection.createStatement();
            rows = stmt.executeQuery(sql);
            
            /**
             * We only want to check if zero or one rows were fetched, so just
             * return the output from rows.next(); 
             */
            return rows.next();
        } catch (SQLException e) {
            log().error("Filter query threw exception: " + notif.getName() + ": " + notif.getRule(), e);
            return true;
        } catch (FilterParseException e) {
            log().error("Invalid filter rule for notification " + notif.getName() + ": " + notif.getRule(), e);
            return true;
        } finally {
            if (rows != null) {
                try {
                    rows.close();
                } catch (SQLException e) {
                }
            }

            if (stmt != null) {
                try {
                    stmt.close();
                } catch (SQLException e) {
                }
            }
            
            if (connection != null) {
                try {
                    connection.close();
                } catch (SQLException e) {
                }
            }
        }
    }

