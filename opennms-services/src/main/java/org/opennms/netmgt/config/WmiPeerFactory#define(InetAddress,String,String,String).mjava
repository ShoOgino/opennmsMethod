    /**
     * Puts a specific IP address with associated password into
     * the currently loaded WMI-config.xml.
     *  Perhaps with a bit of jiggery pokery this could be pulled up into PeerFactory
     *
     * @param ip the IP address of a definition
     * @param password the password for a definition
     * @throws java.net.UnknownHostException if any.
     * @param username a {@link java.lang.String} object.
     * @param domain a {@link java.lang.String} object.
     */
    public void define(InetAddress ip, String username, String password, String domain) throws UnknownHostException {
        ThreadCategory log = log();

        // Convert IP to long so that it easily compared in range elements
        int address = new IPv4Address(ip).getAddress();

        // Copy the current definitions so that elements can be added and
        // removed
        Collection<Definition> definitions = m_config.getDefinitionCollection();

        // First step: Find the first definition matching the read-community or
        // create a new definition, then add the specific IP
        Definition definition = null;
        for (Iterator<Definition> definitionsIterator = definitions.iterator(); definitionsIterator.hasNext();) {
            Definition currentDefinition = definitionsIterator.next();

            if ((currentDefinition.getPassword() != null && currentDefinition.getPassword().equals(password))
                || (currentDefinition.getPassword() == null && m_config.getPassword() != null && m_config.getPassword().equals(password))) {
                if (log.isDebugEnabled())
                    log.debug("define: Found existing definition with read-community " + password);
                definition = currentDefinition;
                break;
            }
        }
        if (definition == null) {
            if (log.isDebugEnabled())
                log.debug("define: Creating new definition");

            definition = new Definition();
            definition.setPassword(password);
            definition.setDomain(domain);
            definition.setUsername(username);
            definitions.add(definition);
        }
        definition.addSpecific(ip.getHostAddress());

        // Second step: Find and remove any existing specific and range
        // elements with matching IP among all definitions except for the
        // definition identified in the first step
        for (Iterator<Definition> definitionsIterator = definitions.iterator(); definitionsIterator.hasNext();) {
            Definition currentDefinition = definitionsIterator.next();

            // Ignore this definition if it was the one identified by the first step
            if (currentDefinition == definition)
                continue;

            // Remove any specific elements that match IP
            while (currentDefinition.removeSpecific(ip.getHostAddress())) {
                if (log.isDebugEnabled())
                    log.debug("define: Removed an existing specific element with IP " + ip);
            }

            // Split and replace any range elements that contain IP
            Collection<Range> ranges = currentDefinition.getRangeCollection();
            for (Iterator<Range> rangeIterator = ranges.iterator(); rangeIterator.hasNext();) {
                Range range = rangeIterator.next();
                int begin = new IPv4Address(range.getBegin()).getAddress();
                int end = new IPv4Address(range.getEnd()).getAddress();
                if (address >= begin && address <= end) {
                    if (log.isDebugEnabled())
                        log.debug("define: Splitting range element with begin " + range.getBegin() + " and end " + range.getEnd());

                    if (begin == end) {
                        rangeIterator.remove();
                        continue;
                    }

                    if (address == begin) {
                        range.setBegin(IPv4Address.addressToString(address + 1));
                        continue;
                    }

                    if (address == end) {
                        range.setEnd(IPv4Address.addressToString(address - 1));
                        continue;
                    }

                    Range head = new Range();
                    head.setBegin(range.getBegin());
                    head.setEnd(IPv4Address.addressToString(address - 1));

                    Range tail = new Range();
                    tail.setBegin(IPv4Address.addressToString(address + 1));
                    tail.setEnd(range.getEnd());

                    rangeIterator.remove();
                    ranges.add(head);
                    ranges.add(tail);
                }
            }
            currentDefinition.setRange(ranges.toArray(new Range[0]));
        }

        // Store the altered list of definitions
        m_config.setDefinition(definitions.toArray(new Definition[0]));
    }

