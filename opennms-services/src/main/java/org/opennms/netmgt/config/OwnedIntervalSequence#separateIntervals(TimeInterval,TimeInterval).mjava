    /** {@inheritDoc} */
    protected Collection<OwnedInterval> separateIntervals(TimeInterval origInt, TimeInterval removedInt) {
        OwnedInterval origInterval = (OwnedInterval) origInt;
        OwnedInterval removedInterval = (OwnedInterval) removedInt;
        
        // if the original is owned and no owners will be removed keep in intact
        List<Owner> reducedOwners = new ArrayList<Owner>(origInterval.getOwners());
        reducedOwners.removeAll(removedInterval.getOwners());
        if (origInterval.isOwned() && removedInterval.isOwned() && reducedOwners.equals(origInterval.getOwners())) {
            // the removedInterval did not have any owners in common with the original interval 
            // so leave the interval intact
            return Collections.singletonList(origInterval);
        }
        
        // if we got here then there is some ownership change in the original interval
        
        // there are potentially three new intervals
        OwnedInterval firstSeg = null;
        OwnedInterval midSeg = null;
        OwnedInterval lastSeg = null;
        
        Date midSegStart = null;
        Date midSegEnd = null;
        
        // first the first Segment
        if (origInterval.getStart().before(removedInterval.getStart())) {
            // then we have a firstSeg that has the original ownership
            // this causes the midSeg to start at the start of the removed interval
            midSegStart = removedInterval.getStart();
            firstSeg = new OwnedInterval(origInterval.getOwners(), origInterval.getStart(), midSegStart);
        } else {
            // there is no first seg so set mid seg to start at top of original interval
            midSegStart = origInterval.getStart();
        }

        
        // now the last segment
        if (removedInterval.getEnd().before(origInterval.getEnd())) {
            midSegEnd = removedInterval.getEnd();
            lastSeg = new OwnedInterval(origInterval.getOwners(), midSegEnd, origInterval.getEnd());
        } else {
            midSegEnd = origInterval.getEnd();
        }
        
        // we only add the midSegment if there are remaining owners
        if (removedInterval.isOwned() && !reducedOwners.isEmpty()) {
            midSeg = new OwnedInterval(reducedOwners, midSegStart, midSegEnd);
        }
        
        List<OwnedInterval> newIntervals = new ArrayList<OwnedInterval>(3);
        if (firstSeg != null) {
            newIntervals.add(firstSeg);
        }
        if (midSeg != null) {
            newIntervals.add(midSeg);
        }
        if (lastSeg != null) {
            newIntervals.add(lastSeg);
        }
        
        return newIntervals;
    }

