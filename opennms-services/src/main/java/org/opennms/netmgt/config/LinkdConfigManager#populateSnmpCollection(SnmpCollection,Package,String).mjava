    private SnmpCollection populateSnmpCollection(SnmpCollection coll, Package pkg,String sysoid) {
   		
    	coll.setPackageName(pkg.getName());
		
   		coll.setInitialSleepTime(getInitialSleepTime());
    		
   		if (pkg.hasSnmp_poll_interval()) coll.setPollInterval(pkg.getSnmp_poll_interval());
   		else coll.setPollInterval(getSnmpPollInterval());

   		
       if (hasIpRouteClassName(sysoid)) {
                coll.setIpRouteClass(getIpRouteClassName(sysoid));
                if (log().isDebugEnabled())
                        log().debug(
                                     "populateSnmpCollection: found class to get ipRoute: "
                                                                               + coll.getIpRouteClass());
       } else {
                coll.setIpRouteClass("org.opennms.netmgt.linkd.snmp.IpRouteTable");
                if (log().isDebugEnabled())
                        log().debug(
                                     "populateSnmpCollection: Using default class to get ipRoute: "
                                                                                + coll.getIpRouteClass());
       }
   		
   		if ( pkg.hasEnableVlanDiscovery() && pkg.getEnableVlanDiscovery() && hasClassName(sysoid)) {
			coll.setVlanClass(getVlanClassName(sysoid));
			if (log().isDebugEnabled())
				log().debug(
							"populateSnmpCollection: found class to get Vlans: "
									+ coll.getVlanClass());
		} else if (!pkg.hasEnableVlanDiscovery() && enableVlanDiscovery() && hasClassName(sysoid)) {
   				coll.setVlanClass(getVlanClassName(sysoid));
				if (log().isDebugEnabled())
					log().debug(
							"populateSnmpCollection: found class to get Vlans: "
									+ coll.getVlanClass());
		} else {
				if (log().isDebugEnabled())
					log()
							.debug(
									"populateSnmpCollection: no class found to get Vlans or VlanDiscoveryDisabled for Package: " + pkg.getName());
		}
			
		if (pkg.hasUseCdpDiscovery()) coll.collectCdpTable(pkg.getUseCdpDiscovery());
		else coll.collectCdpTable(useCdpDiscovery());
		
		boolean condition1 = false;
		boolean condition2 = false;

		if (pkg.hasUseIpRouteDiscovery()) condition1 = pkg.getUseIpRouteDiscovery();
		else condition1 = useIpRouteDiscovery();
		
		if (pkg.hasSaveRouteTable()) condition2 = pkg.getSaveRouteTable();
		else condition2 = saveRouteTable();

		coll.SaveIpRouteTable(condition2);
		coll.collectIpRouteTable(condition1 || condition2);

		if (pkg.hasUseBridgeDiscovery()) condition1 = pkg.getUseBridgeDiscovery();
		else condition1 = useBridgeDiscovery();

		coll.collectBridgeForwardingTable(condition1);

		if (pkg.hasSaveStpNodeTable()) condition2 = pkg.getSaveStpNodeTable();
		else condition2 = saveStpNodeTable();

		coll.saveStpNodeTable(condition2);
		coll.collectStpNode(condition1 || condition2);
		
		if (pkg.hasSaveStpInterfaceTable()) condition2 = pkg.getSaveStpInterfaceTable();
		else condition2 = saveStpInterfaceTable();
		
		coll.saveStpInterfaceTable(condition2);
		coll.collectStpTable(condition1 || condition2);

		return coll;
    }

