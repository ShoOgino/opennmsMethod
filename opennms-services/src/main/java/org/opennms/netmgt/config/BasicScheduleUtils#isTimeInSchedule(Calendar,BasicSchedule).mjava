    /**
     * <p>isTimeInSchedule</p>
     *
     * @param cal a {@link java.util.Calendar} object.
     * @param sched a {@link org.opennms.netmgt.config.common.BasicSchedule} object.
     * @return a boolean.
     */
    public static boolean isTimeInSchedule(Calendar cal, BasicSchedule sched) {
        ThreadCategory log = ThreadCategory.getInstance(BasicScheduleUtils.class);
        
        if (log.isDebugEnabled())
            log.debug("isTimeInOutage: checking for time '" + cal.getTime() + "' in schedule '" + sched.getName() + "'");
        if (sched == null)
            return false;
        long curCalTime = cal.getTimeInMillis();
        Calendar outCalBegin = new GregorianCalendar();
        Calendar outCalEnd = new GregorianCalendar();
        
        // check if day is part of outage
        boolean inOutage = false;
        Enumeration<Time> e = sched.enumerateTime();
        while (e.hasMoreElements() && !inOutage) {
            outCalBegin.setTimeInMillis(curCalTime);
            outCalEnd.setTimeInMillis(curCalTime);
    
            Time oTime = (Time) e.nextElement();
    
            String oTimeDay = oTime.getDay();
            String begins = oTime.getBegins();
            String ends = oTime.getEnds();
    
            if (oTimeDay != null) {
                // see if outage time was specified as sunday/monday..
                Integer dayInMap = getDayOfWeekIndex(oTimeDay);
                if (dayInMap != null) {
                    // check if value specified matches current date
                    if (cal.get(Calendar.DAY_OF_WEEK) == dayInMap.intValue())
                        inOutage = true;
    
                    outCalBegin.set(Calendar.DAY_OF_WEEK, dayInMap.intValue());
                    outCalEnd.set(Calendar.DAY_OF_WEEK, dayInMap.intValue());
                }
                // else see if outage time was specified as day of month
                else {
                    int intOTimeDay = (new Integer(oTimeDay)).intValue();
    
                    if (cal.get(Calendar.DAY_OF_MONTH) == intOTimeDay)
                        inOutage = true;
    
                    outCalBegin.set(Calendar.DAY_OF_MONTH, intOTimeDay);
                    outCalEnd.set(Calendar.DAY_OF_MONTH, intOTimeDay);
                }
            }
    
            // if time of day was specified and did not match, continue
            if (oTimeDay != null && !inOutage)
                continue;

            /**
             *  set time in out calendars, starting with the end time.
             *  
             * By starting with the end time, we can optimize out the case where
             * the end time is prior to our current time, meaning we don't need
             * to convert the time from a string to an object.
             * 
             */
            setOutCalTime(outCalEnd, ends);
            long outCalEndTime = (outCalEnd.getTimeInMillis() / 1000 + 1) * 1000;

            if (log.isDebugEnabled())
                log.debug("isTimeInOutage: comparing current time to end time: \n current: " + cal.getTime() + "\n end: " + outCalEnd.getTime());

            if (curCalTime < outCalEndTime) {
                // Our end time is before our current time, check the beginning.

                setOutCalTime(outCalBegin, begins);
                long outCalBeginTime = outCalBegin.getTimeInMillis() / 1000 * 1000;

                if (log.isDebugEnabled())
                    log.debug("isTimeInOutage: comparing current time to begin time: \n current: " + cal.getTime() + "\n begin: " + outCalBegin.getTime());

                if (curCalTime < outCalBeginTime) {
                    inOutage = false;
                } else {
                    inOutage = true;
                }
            }
        }
        return inOutage;
    }

