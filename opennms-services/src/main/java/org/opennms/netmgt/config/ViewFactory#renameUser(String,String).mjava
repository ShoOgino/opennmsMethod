    /**
     * When this method is called users name is changed, so also is the username
     * belonging to the group and the view. Also overwrites the "users.xml" file
     *
     * @param oldName a {@link java.lang.String} object.
     * @param newName a {@link java.lang.String} object.
     * @throws java.lang.Exception if any.
     */
    public synchronized void renameUser(String oldName, String newName) throws Exception {
        // Get the old data
        if (oldName == null || oldName == "") {
            throw new Exception("ViewFactory:renameUser Invalid old name");
        }
        if (newName == null || newName == "") {
            throw new Exception("ViewFactory:renameUser Invalid new name");
        }
        Collection<View> coll = m_views.values();
        Iterator<View> iter = coll.iterator();
        Map<String, View> map = new HashMap<String, View>();

        while (iter.hasNext()) {
            View view = iter.next();
            Membership membership = view.getMembership();
            if (membership != null) {
                Collection<Member> memberColl = membership.getMemberCollection();
                if (memberColl != null) {
                    Iterator<Member> iterMember = memberColl.iterator();
                    while (iterMember != null && iterMember.hasNext()) {
                        Member member = iterMember.next();
                        if (member.getType().equals("user")) {
                            String name = member.getContent();
                            if (name.equals(oldName)) {
                                member.setContent(newName);
                            }
                        }
                    }
                }
            }
            view.setMembership(membership);
            map.put(view.getName(), view);
        }
        m_views.clear();
        Views views = new Views();
        views.setView(new ArrayList<View>(map.values()));
        saveViews(views);
    }

