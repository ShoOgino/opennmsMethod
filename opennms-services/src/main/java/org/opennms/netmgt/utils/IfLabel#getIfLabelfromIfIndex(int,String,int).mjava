    public static String getIfLabelfromIfIndex(final int nodeId, final String ipAddr, final int ifIndex) {
        if (ipAddr == null) {
            throw new IllegalArgumentException("Cannot take null parameters.");
        }

        if (ifIndex == -1) {
        	return getIfLabel(nodeId, ipAddr);
        }
        
        class LabelHolder {
            private String m_label;

            public void setLabel(String label) {
                m_label = label;
            }

            public String getLabel() {
                return m_label;
            }
        }
        
        final LabelHolder holder = new LabelHolder();
        
        String query = "" +
        		"SELECT DISTINCT snmpifname, snmpifdescr,snmpphysaddr " +
        		"  FROM snmpinterface, ipinterface " +
        		" WHERE (ipinterface.ismanaged!='D') " +
        		"   AND ipinterface.nodeid=snmpinterface.nodeid " +
        		"   AND ifindex=snmpifindex " +
        		"   AND ipinterface.nodeid=? " +
        		"   AND ipinterface.ipaddr=? " +
        		"   AND ipinterface.ifindex=?";
        
        
        Querier q = new Querier(Vault.getDataSource(), query, new RowProcessor() {

            public void processRow(ResultSet rs) throws SQLException {
                if (rs.next()) {
                    String name = rs.getString("snmpifname");
                    String descr = rs.getString("snmpifdescr");
                    String physAddr = rs.getString("snmpphysaddr");

                    if (name != null || descr != null) {
                        holder.setLabel(getIfLabel(name, descr, physAddr));
                    } else {
                        log.warn("Interface (nodeId/ipAddr=" + nodeId + "/" + ipAddr + ") has no ifName and no ifDescr...setting to label to 'no_ifLabel'.");
                        holder.setLabel("no_ifLabel");
                    }
                }

                if (rs.next()) {
                    log.warn("Found more than one interface for node=" + nodeId + " ip=" + ipAddr);
                }
            }
            
        });
        q.execute();
        
        return holder.getLabel();
    }

