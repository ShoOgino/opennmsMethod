    /**
     * Return a map of useful SNMP information for the interface specified by
     * the nodeId and ifLabel. Essentially a "decoding" algorithm for the
     * ifLabel.
     * 
     * @param conn
     *            Database connection
     * @param nodeId
     *            Node id
     * @param ifLabel
     *            Interface label of format: <description>- <macAddr>
     * 
     * @return Map of SNMP info keyed by 'snmpInterface' table column names for
     *         the interface specified by nodeId and ifLabel args.
     * 
     * @throws SQLException
     *             if error occurs accessing the database.
     */
    public static Map<String, String> getInterfaceInfoFromIfLabel(int nodeId, String ifLabel) {
        if (ifLabel == null) {
            throw new IllegalArgumentException("Cannot take null parameters.");
        }

        final Map<String, String> info = new HashMap<String, String>();
        String desc = ifLabel;
        String mac = null;

        // first I have to strip off the MAC address from the end, if there is
        // one
        int dashIndex = ifLabel.lastIndexOf("-");

        if (dashIndex >= 0) {
            desc = ifLabel.substring(0, dashIndex);
            mac = ifLabel.substring(dashIndex + 1, ifLabel.length());
        }
        
       final String desc2 = desc;
       final String mac2 = mac;
 
        log.debug("getInterfaceInfoFromIfLabel: desc=" + desc + " mac=" + mac);

        String queryDesc = desc.replace('_', '%');

        String query = "" +
                "SELECT * " +
                "  FROM snmpinterface " +
                " WHERE nodeid = "+nodeId+
                "   AND (snmpifdescr ILIKE '"+queryDesc+"'" +
                "    OR snmpifname ilike '"+queryDesc+"')";
        log.debug("getInterfaceInfoFromLabel: query is: "+query);
        
        Querier q = new Querier(Vault.getDataSource(), query, new RowProcessor() {

            public void processRow(ResultSet rs) throws SQLException {
                while (rs.next()) {
                    // If the description portion of ifLabel matches an entry
                    // in the snmpinterface table...

                    /*
                     * When Cisco Express Forwarding (CEF) or some ATM encapsulations
                     * (AAL5) are used on Cisco routers, an additional entry might be 
                     * in the ifTable for these sub-interfaces, but there is no
                     * performance data available for collection.  This check excludes
                     * ifTable entries where ifDescr contains "-cef".  See bug #803.
                     */
                    if (rs.getString("snmpifdescr") != null) {
                        if (Pattern.matches(".*-cef.*", rs.getString("snmpifdescr")))
                            continue;
                    }

                    if ((AlphaNumeric.parseAndReplace(rs.getString("snmpifname"), '_').equals(desc2)) || (AlphaNumeric.parseAndReplace(rs.getString("snmpifdescr"), '_').equals(desc2))) {

                        // If the mac address portion of the ifLabel matches
                        // an entry in the snmpinterface table...
                        if (mac2 == null || mac2.equals(rs.getString("snmpphysaddr"))) {
                            ThreadCategory.getInstance(IfLabel.class).debug("getInterfaceInfoFromIfLabel: found match...");
                            for (int i = 1; i <= rs.getMetaData().getColumnCount(); i++) {
                                // Get extra information about the interface
                                info.put(rs.getMetaData().getColumnName(i), rs.getString(i));
                            }

                            break;
                        }
                    }
                }
            }
            
        });
        q.execute();
        log.debug("getInterfaceInfoFromLabel: Querier result count is: "+q.getCount());
        
        // The map will remain empty if the information was not located in the
        // DB.
        return info;
    }

