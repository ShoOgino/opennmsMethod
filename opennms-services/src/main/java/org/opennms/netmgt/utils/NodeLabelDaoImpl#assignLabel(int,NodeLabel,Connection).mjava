    /**
     * This method updates the 'nodelabel' and 'nodelabelsource' fields of the
     * 'node' table for the specified nodeID.
     *
     * If nodeLabel parameter is NULL the method will first call computeLabel()
     * and use the resulting NodeLabel object to update the database.
     *
     * @param nodeID
     *            Unique identifier of the node to be updated.
     * @param nodeLabel
     *            Object containing label and source values.
     * @param dbConnection
     *            SQL database connection
     * @throws java.sql.SQLException if any.
     * 
     * @deprecated Use a {@link NodeDao#update(org.opennms.netmgt.model.OnmsNode)} method call instead
     */
    @Override
    public void assignLabel(final int nodeID, NodeLabel nodeLabel, final Connection dbConnection) throws SQLException {
        if (nodeLabel == null) {
            nodeLabel = computeLabel(nodeID, dbConnection);
        }

        OnmsNode node = nodeDao.get(nodeID);

        // Node Label
        LOG.debug("NodeLabel.assignLabel: Node label: {} source: {}", nodeLabel.getLabel(), nodeLabel.getSource());

        if (nodeLabel.getLabel() != null) {
        	// nodeLabel may not exceed MAX_NODELABEL_LEN.if it does truncate it
        	String label = nodeLabel.getLabel();
        	if (label.length() > MAX_NODE_LABEL_LENGTH) {
        		label = label.substring(0, MAX_NODE_LABEL_LENGTH);
        	}
        	node.setLabel(label);
        	//        stmt.setString(column++, label);
        } else {
        	node.setLabel(null);
        }
        node.setLabelSource(nodeLabel.getSource());
        nodeDao.update(node);
    }

