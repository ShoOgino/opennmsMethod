  /**
   * <p>getMBeanServerConnection</p>
   *
   * @param propertiesMap a {@link java.util.Map} object.
   * @param address a {@link java.net.InetAddress} object.
   * @return a {@link org.opennms.protocols.jmx.connectors.MX4JConnectionWrapper} object.
   */
  public static MX4JConnectionWrapper getMBeanServerConnection(Map propertiesMap, InetAddress address) {
      MX4JConnectionWrapper connectionWrapper = null;
      JMXServiceURL url = null;
      
      
      String factory =  ParameterMap.getKeyedString( propertiesMap, "factory", "STANDARD");
      int    port =     ParameterMap.getKeyedInteger(propertiesMap, "port",     1099);
      String protocol = ParameterMap.getKeyedString( propertiesMap, "protocol", "rmi");
      String urlPath =  ParameterMap.getKeyedString( propertiesMap, "urlPath",  "/jmxrmi");
      
      log.debug("JMX: " + factory + " - service:" + protocol + "//" + address.getHostAddress() + ":" + port + urlPath);

      if (factory == null || factory.equals("STANDARD")) {
          try {
              
              url = new JMXServiceURL(protocol, address.getHostAddress(), port, urlPath);
              
              // Connect a JSR 160 JMXConnector to the server side
              JMXConnector connector = JMXConnectorFactory.connect(url);
              MBeanServerConnection connection = connector.getMBeanServerConnection();
              
              connectionWrapper = new MX4JConnectionWrapper(connector, connection);
          } catch(Throwable e) {
              LogUtils.errorf(MX4JConnectionFactory.class, e, "Unable to get MBeanServerConnection: %s", url);
          }
      }
      else if (factory.equals("PASSWORD-CLEAR")) {
          try {
              
              String username   = ParameterMap.getKeyedString(propertiesMap, "username", null);
              String password   = ParameterMap.getKeyedString(propertiesMap, "password", null);
              
              HashMap env = new HashMap();
              
              // Provide the credentials required by the server to successfully
              // perform user authentication
              //
              String[] credentials = new String[] { username , password };
              env.put("jmx.remote.credentials", credentials);
              
              // Create an RMI connector client and
              // connect it to the RMI connector server
              //
              url = new JMXServiceURL(protocol, address.getHostAddress(), port, urlPath);
              
              // Connect a JSR 160 JMXConnector to the server side
              JMXConnector connector = JMXConnectorFactory.newJMXConnector(url, null);
              
              // Connect and invoke an operation on the remote MBeanServer
              try
              {
                  connector.connect(env);
              }
              catch (SecurityException x)
              {
                  // Uh-oh ! Bad credentials 
                  log.error("Security exception: bad credentials");
                  throw x;
              }

              MBeanServerConnection connection = connector.getMBeanServerConnection();

              connectionWrapper = new MX4JConnectionWrapper(connector, connection);
              
          } catch(Throwable e) {
              log.error("Unable to get MBeanServerConnection: " + url, e);
          }
      }
      /*
      else if (factory.equals("PASSWORD-OBFUSCATED")) {
          try {
              
              String username   = ParameterMap.getKeyedString(propertiesMap, "username", null);
              String password   = ParameterMap.getKeyedString(propertiesMap, "password", null);
              
              HashMap env = new HashMap();
              
              // Provide the credentials required by the server to successfully
              // perform user authentication
              //
              String[] credentials = new String[] { username , PasswordAuthenticator.obfuscatePassword(password) };
              env.put("jmx.remote.credentials", credentials);
              
              // Create an RMI connector client and
              // connect it to the RMI connector server
              //
              JMXServiceURL url = new JMXServiceURL(protocol, address.getHostAddress(), port, urlPath);
              
              // Connect a JSR 160 JMXConnector to the server side
              JMXConnector connector = JMXConnectorFactory.newJMXConnector(url, null);
              
              // Connect and invoke an operation on the remote MBeanServer
              try
              {
                  connector.connect(env);
              }
              catch (SecurityException x)
              {
                  // Uh-oh ! Bad credentials 
                  log.error("Security exception: bad credentials");
                  throw x;
              }

              MBeanServerConnection connection = connector.getMBeanServerConnection();

              connectionWrapper = new Jsr160ConnectionWrapper(connector, connection);
              
          } catch(Throwable e) {
              e.fillInStackTrace();
              log.error("Unable to get MBeanServerConnection", e);
          }
      }
      
      else if (factory.equals("SSL")) {
          try {
              
              String username   = ParameterMap.getKeyedString(propertiesMap, "username", null);
              String password   = ParameterMap.getKeyedString(propertiesMap, "password", null);
              
              HashMap env = new HashMap();
              
              // Provide the credentials required by the server to successfully
              // perform user authentication
              //
              String[] credentials = new String[] { username , PasswordAuthenticator.obfuscatePassword(password) };
              env.put("jmx.remote.credentials", credentials);
              
              // Create an RMI connector client and
              // connect it to the RMI connector server
              //
              JMXServiceURL url = new JMXServiceURL(protocol, address.getHostAddress(), port, urlPath);
              
              // Connect a JSR 160 JMXConnector to the server side
              JMXConnector connector = JMXConnectorFactory.newJMXConnector(url, null);
              
              // Connect and invoke an operation on the remote MBeanServer
              try
              {
                  connector.connect(env);
              }
              catch (SecurityException x)
              {
                  // Uh-oh ! Bad credentials 
                  log.error("Security exception: bad credentials");
                  throw x;
              }

              MBeanServerConnection connection = connector.getMBeanServerConnection();

              connectionWrapper = new Jsr160ConnectionWrapper(connector, connection);
              
          } catch(Throwable e) {
              e.fillInStackTrace();
              log.error("Unable to get MBeanServerConnection", e);
          }
      }
      */
      return connectionWrapper;
  }    

