    /**
     * <P>
     * Extracts the response from the bytearray.
     * </P>
     *
     * @param data
     *            The byte array containing the response.
     * @param length
     *            The length of the byte array.
     * @exception IOException
     *                Thrown if there is an error while reading the recieved
     *                packet
     * @throws java.io.IOException if any.
     */
    public void receiveResponse(byte[] data, int length) throws IOException {
        /*
         * Decode the input stream.
         */
        DNSInputStream dnsIn = new DNSInputStream(data, 0, length);
        int id = dnsIn.readShort();
        if (id != m_reqID)
            throw new IOException("ID does not match request");

        //
        // read in the flags
        //
        int flags = dnsIn.readShort();
        decodeFlags(flags);

        int numQueries = dnsIn.readShort();
        int numAnswers = dnsIn.readShort();
        @SuppressWarnings("unused")
        int numAuthorities = dnsIn.readShort();
        @SuppressWarnings("unused")
        int numAdditional = dnsIn.readShort();

        while (numQueries-- > 0) {
            //
            // discard questions
            //
            @SuppressWarnings("unused")
            String rname = dnsIn.readDomainName();
            @SuppressWarnings("unused")
            int rtype = dnsIn.readShort();
            @SuppressWarnings("unused")
            int rclass = dnsIn.readShort();
        }

        try {
            while (numAnswers-- > 0)
                m_answers.add(dnsIn.readRR());

            // ignore the authorities and additional information
            /**
             * while (numAuthorities -- > 0) dnsIn.readRR (); while
             * (numAdditional -- > 0) dnsIn.readRR ();
             */

        } catch (IOException ex) {
            if (!m_truncated)
                throw ex;
        }
    }

