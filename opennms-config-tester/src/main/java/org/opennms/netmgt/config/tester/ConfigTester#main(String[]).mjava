	public static void main(String[] argv) {
		BasicConfigurator.configure();
		Logger.getRootLogger().setLevel(Level.WARN);
		
		Logger.getLogger("org.springframework").setLevel(Level.WARN);
		
		ApplicationContext context = BeanUtils.getFactory("configTesterContext", ClassPathXmlApplicationContext.class);
		ConfigTester tester = context.getBean("configTester", ConfigTester.class);

		final CommandLineParser parser = new PosixParser();

		final Options options = new Options();
		options.addOption("h", "help",           false, "print this help and exit");
		options.addOption("a", "all",         	 false, "check all supported configuration files");
		options.addOption("l", "list",   		 false, "list supported configuration files and exit");
		options.addOption("v", "verbose", 		 false, "list each configuration file as it is tested");
		options.addOption("i", "ignore-unknown", false, "ignore unknown configuration files and continue processing");

		final CommandLine line;
		try {
			line = parser.parse(options, argv, false);
		} catch (ParseException e) {
			System.err.println("Invalid usage: " + e.getMessage());
			System.err.println("Run 'config-tester -h' for help.");
			System.exit(1);
			
			return; // not reached; here to eliminate warning on line being uninitialized
		}

		final boolean ignoreUnknown = line.hasOption("i");

		if ((line.hasOption('l') || line.hasOption('h') || line.hasOption('a'))) {
			if (line.getArgList().size() > 0) {
				System.err.println("Invalid usage: No arguments allowed when using the '-a', '-h', or '-l' options.");
				System.err.println("Run 'config-tester -h' for help.");
				System.exit(1);
			}
		} else {
			if (line.getArgs().length == 0) {
				System.err.println("Invalid usage: too few arguments.  Use the '-h' option for help.");
				System.exit(1);
			}
		}
		
		boolean verbose = line.hasOption('v');

		DataSourceFactory.setInstance(new ConfigTesterDataSource());
		
		if (line.hasOption('l')) {
			System.out.println("Supported configuration files: ");
			for (String configFile : tester.getConfigs().keySet()) {
				System.out.println("    " + configFile);
			}
			System.out.println("Note: not all OpenNMS configuration files are currently supported.");
		} else if (line.hasOption('h')) {
			 final HelpFormatter formatter = new HelpFormatter();
			 formatter.printHelp("config-tester -a\nOR: config-tester [config files]\nOR: config-tester -l\nOR: config-tester -h", options);
		} else if (line.hasOption('a')) {
			for (String configFile : tester.getConfigs().keySet()) {
				tester.testConfig(configFile, verbose, ignoreUnknown);
			}
		} else {
			for (String configFile : line.getArgs()) {
				tester.testConfig(configFile, verbose, ignoreUnknown);
			}
		}
	}

