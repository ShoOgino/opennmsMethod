    private static void configureRMI(final ClassLoader cl) throws IOException {
        if (m_rmiServerSocketFactory != null) {
            // socket already configured
            return;
        }

        final String host = System.getProperty("opennms.poller.server.serverHost", "localhost");
        if ("localhost".equals(host) || "127.0.0.1".equals(host) || "::1".equals(host)) {
            if (System.getProperty("java.rmi.server.hostname") == null) {
                System.setProperty("java.rmi.server.hostname", host);
            }
            m_rmiServerSocketFactory = new HostRMIServerSocketFactory("localhost");
            RMISocketFactory.setSocketFactory(m_rmiServerSocketFactory);
        }

        /**
          * This is necessary so the ProxyLoginModule can find the OpenNMSLoginModule because
          * otherwise we're at the mercy of which thread/context is the first to make a JAAS
          * request, since LoginModules are initialized statically.  In my testing, attempting
          * to connect to JMX with jconsole would give a class not found while attempting to
          * locate the OpenNMSLoginModule without using a classloader like this.
          */
        OpenNMSProxyLoginModule.setClassloader(cl);
    }

