    /**
     * <p>pingLocalhost</p>
     *
     * @throws java.io.IOException if any.
     */
    public void pingLocalhost() throws IOException {
        String host = "127.0.0.1";

        IcmpSocket m_socket = null;

        try {
            m_socket = new IcmpSocket();
        } catch (UnsatisfiedLinkError e) {
            m_out.println("UnsatisfiedLinkError while creating an "
                    + "IcmpSocket.  Most likely failed to load "
                    + "libjicmp.so.  Try setting the property "
                    + "'opennms.library.jicmp' to point at the "
                    + "full path name of the libjicmp.so shared "
                    + "library "
                    + "(e.g. 'java -Dopennms.library.jicmp=/some/path/libjicmp.so ...')");
            throw e;
        } catch (NoClassDefFoundError e) {
            m_out.println("NoClassDefFoundError while creating an "
                    + "IcmpSocket.  Most likely failed to load "
                    + "libjicmp.so.");
            throw e;
        } catch (IOException e) {
            m_out.println("IOException while creating an " + "IcmpSocket.");
            throw e;
        }

        java.net.InetAddress addr = null;
        try {
            addr = java.net.InetAddress.getByName(host);
        } catch (java.net.UnknownHostException e) {
            m_out.println("UnknownHostException when looking up " + host
                    + ".");
            throw e;

        }

        m_out.println("PING " + host + " (" + addr.getHostAddress()
                + "): 56 data bytes");

        short m_icmpId = 2;

        Ping.Stuff s = new Ping.Stuff(m_socket, m_icmpId);
        Thread t = new Thread(s, Ping.class.getSimpleName());
        t.start();

        int count = 3;
        for (long attempt = 0; attempt < count; attempt++) {
            // build a packet
            org.opennms.protocols.icmp.ICMPEchoPacket pingPkt = new org.opennms.protocols.icmp.ICMPEchoPacket(attempt);
            pingPkt.setIdentity(m_icmpId);
            pingPkt.computeChecksum();

            // convert it to a datagram to be sent
            byte[] buf = pingPkt.toBytes();
            DatagramPacket sendPkt = new DatagramPacket(buf, buf.length, addr, 0);
            buf = null;
            pingPkt = null;

            try {
                m_socket.send(sendPkt);
            } catch (IOException e) {
                m_out.println("IOException received when sending packet.");
                throw e;
            }
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                // do nothing
            }
        }

    }

