    @SuppressWarnings("unchecked")
    public String findLibrary(String libname, String path, boolean isRequired)
            throws Exception {
        String fullname = System.mapLibraryName(libname);

        ArrayList<String> searchPaths = new ArrayList<String>();

        if (path != null) {
            for (String entry : path.split(File.pathSeparator)) {
                searchPaths.add(entry);
            }
        }

        try {
            File confFile = new File(m_opennms_home + File.separator + "etc"
                    + File.separator + LIBRARY_PROPERTY_FILE);
            Properties p = new Properties();
            InputStream is = new FileInputStream(confFile);
            p.load(is);
            is.close();
            for (Enumeration e = p.keys(); e.hasMoreElements();) {
                String key = (String) e.nextElement();
                if (key.startsWith("opennms.library")) {
                    String value = p.getProperty(key);
                    value.replaceAll(File.separator + "[^" + File.separator
                            + "]*$", "");
                    searchPaths.add(value);
                }
            }
        } catch (Exception e) {
            // ok if we can't read these, we'll try to find them
        }

        if (System.getProperty("java.library.path") != null) {
            for (String entry : System.getProperty("java.library.path").split(
                                                                              File.pathSeparator)) {
                searchPaths.add(entry);
            }
        }

        if (!System.getProperty("os.name").contains("Windows")) {
            String[] defaults = { "/usr/lib/jni", "/usr/lib",
                    "/usr/local/lib" };
            for (String entry : defaults) {
                searchPaths.add(entry);
            }
        }

        m_out.println("- searching for " + libname + ":");
        for (String dirname : searchPaths) {
            File entry = new File(dirname);

            if (entry.isFile()) {
                // if they specified a file, try the parent directory instead
                dirname = entry.getParent();
            }

            String fullpath = dirname + File.separator + fullname;
            if (loadLibrary(fullpath)) {
                return fullpath;
            }
        }

        m_out.println("Failed to load the " + libname + " library.");

        if (isRequired) {
            m_out.println("It is required at runtime.  By default, we search the java library path:");
            for (String pathEntry : System.getProperty("java.library.path").split(
                                                                                  File.pathSeparator)) {
                m_out.println("  " + pathEntry);
            }
            m_out.println("\nFor more information, see http://www.opennms.org/index.php/"
                    + libname + "\n");
            throw new Exception("A fatal error occurred, exiting installer.");
        } else {
            m_out.println("This error is not fatal, since " + libname
                    + " is only required for optional features.");
            m_out.println("For more information, see http://www.opennms.org/index.php/"
                    + libname + "\n");
        }

        return null;
    }

