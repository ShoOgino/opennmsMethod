    public void addStoredProcedures() throws Exception {
        Statement st = m_dbconnection.createStatement();

        m_out.print("- adding stored procedures... ");

        FileFilter sqlFilter = new FileFilter() {
            public boolean accept(File pathname) {
                return (pathname.getName().startsWith("get") && pathname.getName().endsWith(".sql"))
                     || pathname.getName().endsWith("Trigger.sql");
            }
        };

        File[] list = new File(m_sql_dir).listFiles(sqlFilter);

        for (int i = 0; i < list.length; i++) {
            LinkedList<String> drop = new LinkedList<String>();
            StringBuffer create = new StringBuffer();
            String line;

            m_out.print("\n  - " + list[i].getName() + "... ");

            BufferedReader r = new BufferedReader(new FileReader(list[i]));
            while ((line = r.readLine()) != null) {
                line = line.trim();

                if (line.matches("--.*")) {
                    continue;
                }

                if (line.toLowerCase().startsWith("drop function")) {
                    drop.add(line);
                } else {
                    create.append(line);
                    create.append("\n");
                }
            }
            r.close();

            Matcher m = Pattern.compile(
                                        "(?is)\\b(CREATE(?: OR REPLACE)? FUNCTION\\s+"
                                                + "(\\w+)\\s*\\((.*?)\\)\\s+"
                                                + "RETURNS\\s+(\\S+)\\s+AS\\s+"
                                                + "(.+? language ['\"]?\\w+['\"]?);)").matcher(
                                                                                              create.toString());

            if (!m.find()) {
                throw new Exception("Couldn't match \"" + m.pattern().pattern()
                        + "\" in string \"" + create + "\"");
            }
            String createSql = m.group(1);
            String function = m.group(2);
            String columns = m.group(3);
            String returns = m.group(4);
            // String rest = m.group(5);

            if (functionExists(function, columns, returns)) {
                if (m_force) {
                    st.execute("DROP FUNCTION " + function + "(" + columns
                            + ")");
                    st.execute(createSql);
                    m_out.print("OK (dropped and re-added)");
                } else {
                    m_out.print("EXISTS");
                }
            } else {
                st.execute(createSql);
                m_out.print("OK");
            }

            Pattern p = Pattern.compile("(?i)"
                                        + "(CREATE TRIGGER (\\S+)\\s+"
                                        + "BEFORE INSERT OR UPDATE\\s+"
                                        + "ON (\\S+) FOR EACH ROW\\s+"
                                        + "EXECUTE PROCEDURE (\\S+)\\(\\));");
            m = p.matcher(create.toString());
            if (m.find()) {
                String triggerSql = m.group(1);
                String triggerName = m.group(2);
                String triggerTable = m.group(3);
                String triggerProc = m.group(4);
                
                m_out.print("    - checking trigger '" + triggerName + "' ...");
                
                if (triggerExists(triggerName, triggerTable, triggerProc)) {
                    m_out.println("EXISTS");
                } else {
                    st.execute(triggerSql);
                    m_out.println("ADDED");
                }
            }

        }
        m_out.println("");
        
    }

