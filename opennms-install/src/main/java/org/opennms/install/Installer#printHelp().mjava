    public void printHelp() {
        m_out.println("usage:");
        m_out.println("      $OPENNMS_HOME/bin/install -h");
        m_out.println("      $OPENNMS_HOME/bin/install "
                + "[-r] [-x] [-N] [-R] [-c] [-d] [-i] [-s] [-U]");
        m_out.println("                                [-y] [-X]");
        m_out.println("                                "
                + "[-u <PostgreSQL admin user>]");
        m_out.println("                                "
                + "[-p <PostgreSQL admin password>]");
        m_out.println("                                "
                + "[-D <PostgreSQL database URL>]");
        m_out.println("                                "
                + "[-T <tomcat4.conf>]");
        m_out.println("                                "
                + "[-w <tomcat context directory>");
        m_out.println("                                "
                + "[-C <constraint>]");
        m_out.println("");
        m_out.println(m_required_options);
        m_out.println("");
        m_out.println("   -h    this help");
        m_out.println("");
        m_out.println("   -d    perform database actions");
        m_out.println("   -i    insert data into the database");
        m_out.println("   -s    update iplike postgres function");
        m_out.println("   -U    upgrade database to unicode, if needed");
        m_out.println("   -y    install web application (see -w)");
        m_out.println("");
        m_out.println("   -u    username of the PostgreSQL "
                + "administrator (default: \"" + m_pg_user + "\")");
        m_out.println("   -p    password of the PostgreSQL "
                + "administrator (default: \"" + m_pg_pass + "\")");
        m_out.println("   -D    JDBC URL of the PostgreSQL "
                + "database (default: \"" + m_pg_url + "\")");
        m_out.println("   -c    drop and recreate tables that already "
                + "exist");
        m_out.println("");
        m_out.println("   -T    location of tomcat.conf");
        m_out.println("   -w    location of tomcat's context directory");
        m_out.println("         (usually under conf/Catalina/localhost)");
        m_out.println("");
        m_out.println("   -l    library search path");
        m_out.println("");
        m_out.println("   -r    run as an RPM install (does nothing)");
        m_out.println("   -x    turn on debugging for database data "
                + "transformation");
        m_out.println("   -N    ignore NOT NULL constraint checks when "
                + "transforming data");
        m_out.println("         useful after a table is reverted by a "
                + "previous run of the installer");
        m_out.println("   -R    do not revert a table to the original if "
                + "an error occurs when");
        m_out.println("         transforming data -- only used for debugging");
        m_out.println("   -C    fix rows that violate the specified "
                + "constraint -- sets key column in");
        m_out.println("         affected rows to NULL by default");
        m_out.println("   -X    drop rows that violate constraint instead of marking key column in");
        m_out.println("         affected rows to NULL (used with \"-C\")");

        System.exit(0);
    }

