    /**
     * Checks if the platform is IPv6 ready.
     * For non windows platforms it always returns true.
     * For windows platforms it is version dependant.
     *
     * The following table assigns the internal microsoft version to the windows release.
     *
     * Operating system        Version number
     * -----------------       --------------
     * Windows 8.1                 6.3
     * Windows Server 2012 R2      6.3
     * Windows 8                   6.2
     * Windows Server 2012         6.2
     * Windows 7                   6.1
     * Windows Server 2008 R2      6.1
     * Windows Server 2008         6.0
     * Windows Vista               6.0
     * Windows Server 2003 R2      5.2
     * Windows Server 2003         5.2
     * Windows XP 64-Bit Edition   5.2
     * Windows XP                  5.1
     * Windows 2000                5.0
     *
     * Source: http://msdn.microsoft.com/en-us/library/windows/desktop/ms724832(v=vs.85).aspx
     *
     * @return true if Platform is not windows or if the provided windows system supports IPv6.
     */
    public boolean isPlatformIPv6Ready() {
		boolean ok = true;
		if (Platform.isWindows()) {
			debug(null, "Looks like we're on Windows...  Validating.");

			final String architecture = System.getenv("PROCESSOR_ARCHITECTURE");
			final String rawVersion = getStringFromRegistry("CurrentVersion");
			if (rawVersion == null) {
				error(null, "Unable to determine Windows version from the registry.");
				return false;
			}
			final Float version = Float.valueOf(rawVersion);
			if (version < 5.1f) {
				error(null, "You must be running at least Windows Vista (32-bit) or Windows XP Professional Service Pack 2 (64-bit), but Windows kernel version is only %.1f!", version);
				return false;
			}
			final String rawBuild = getStringFromRegistry("CurrentBuildNumber");
			Integer build = 0;
			if (rawBuild != null) {
				build = Integer.valueOf(rawBuild);
			}
			final String csdVersion = getStringFromRegistry("CSDVersion");
			Integer servicePack = 0;
			if (csdVersion != null) {
				final Matcher m = SERVICE_PACK_PATTERN.matcher(csdVersion);
				if (m.matches()) {
					servicePack = Integer.valueOf(m.group(1));
				}
				
				if (servicePack > 0) {
					debug(null, "Found Service Pack " + servicePack);
				}
			}

			// Windows XP
			if (version < 6.0f) {
				final String productName = getStringFromRegistry("ProductName");
				
				// Can't do XP on x86, unless it's Server 2003
				if (architecture.equals("x86")) {
					if (productName == null || !productName.contains("Server 2003")) {
						error(null, "OpenNMS does not support 32-bit Windows XP.");
						ok = false;
					}
				}

				// No matter what, we need Service Pack 2 on XP
				if (servicePack < 2) {
					error(null, "OpenNMS requires Service Pack 2 or higher on Windows XP and Windows Server 2003.");
					ok = false;
				}

				if (ok) {
					// If we get this far, make sure the hotfixes are installed
					for (final String hotfix : new String[] { "978338", "947369" }) {
						if (!checkHotfix(hotfix, "Windows XP or Windows Server 2003")) {
                            warn(null, "Hotfix %s was not found.", hotfix);
                            warn(null, "Go to http://support.microsoft.com/kb/%s and install it", hotfix);
							ok = false;
						}
					}
					if (!ok) {
						error(null, "One or more HotFixes was not found.  Please install them and try again.");
						return false;
					}
				}
			}
			
			// Windows Vista and Windows Server 2008
			if (version < 6.1f) {
				if (servicePack < 1) {
					error(null, "OpenNMS requires Service Pack 1 or higher on Windows Vista and Windows Server 2008.");
					ok = false;
				}
			}
			debug(null, "Windows NT Version %.1f, Build %d (Service Pack %d)", version, build, servicePack);
		}
        debug(null, "Platform is IPv6 ready: %s", ok);
		return ok;
	}

