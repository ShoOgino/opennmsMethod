    public boolean functionExists(String function, String columns,
            String returnType) throws Exception {
        Map types = getTypesFromDB();

        int[] columnTypes = new int[0];
        columns = columns.trim();
        if (columns.length() > 0) {
            String[] splitColumns = columns.split("\\s*,\\s*");
            columnTypes = new int[splitColumns.length];
            Column c;
            for (int j = 0; j < splitColumns.length; j++) {
                c = new Column();
                c.parseColumnType(splitColumns[j]);
                columnTypes[j] = ((Integer) types.get(c.getType())).intValue();
            }
        }

        Column c = new Column();
        try {
            c.parseColumnType(returnType);
        } catch (Exception e) {
            throw new Exception("Could not parse column type '" + returnType + "' for function '" + function + "'.  Nested exception: " + e.getMessage(), e);
        }
        int retType = ((Integer) types.get(c.getType())).intValue();

        return functionExists(function, columnTypes, retType);
    }

