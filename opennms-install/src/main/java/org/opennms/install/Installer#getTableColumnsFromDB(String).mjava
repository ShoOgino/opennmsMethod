	public List<Column> getTableColumnsFromDB(String table) throws Exception {
		Statement st = m_dbconnection.createStatement();
		ResultSet rs;
		LinkedList<Column> r = new LinkedList<Column>();

		if (!tableExists(table)) {
			return r;
		}

		String query = "SELECT "
			+ "        attname, "
			+ "        format_type(atttypid, atttypmod), "
			+ "        attnotnull "
			+ "FROM "
			+ "        pg_attribute "
			+ "WHERE "
			+ "        attrelid = "
			+ "                (SELECT oid FROM pg_class WHERE relname = '"
								+ table.toLowerCase()
								+ "') AND "
			+ "        attnum > 0";

		if (m_pg_version >= 7.3) {
			query = query + " AND attisdropped = false";
		}

		query = query
			+ " ORDER BY "
			+ "        attnum";

		rs = st.executeQuery(query);

		while (rs.next()) {
			Column c = new Column();
			c.setName(rs.getString(1));
			c.parseColumnType(rs.getString(2));
			c.setNotNull(rs.getBoolean(3));

			r.add(c);
		}

		if (m_pg_version > 7.3) {
			// XXX the [1] on conkey and confkey is a hack and assumes that
			// we have at most one constrained column and at most one
			// referenced foreign column (which is correct with the current
			// database layout.
			query = "SELECT "
				+ " c.conname, "
				+ "	c.contype, "
				+ "	c.confdeltype, "
				+ "	a.attname, "
				+ "	d.relname, "
				+ "	b.attname "
				+ "FROM "
				+ "	pg_class d RIGHT JOIN "
				+ "	  (pg_attribute b RIGHT JOIN "
				+ "	    (pg_constraint c JOIN pg_attribute a "
				+ "	      ON c.conrelid = a.attrelid AND "
				+ "	         a.attnum = c.conkey[1]) "
				+ "	    ON c.confrelid = b.attrelid AND "
				+ "	       b.attnum = c.confkey[1]) "
				+ "	  ON b.attrelid = d.oid "
				+ "WHERE "
				+ "	a.attrelid = "
				+ "         (SELECT oid FROM pg_class WHERE relname = '"
								+ table.toLowerCase()
				+ "');";

			rs = st.executeQuery(query);

			while (rs.next()) {
				Constraint constraint;
				if (rs.getString(2).equals("p")) {
					constraint = new Constraint(rs.getString(1), rs
							.getString(4));
				} else if (rs.getString(2).equals("f")) {
					constraint = new Constraint(rs.getString(1), rs
							.getString(4), rs.getString(5), rs.getString(6), rs
							.getString(3));
				} else {
					throw new Exception("Do not support constraint type \""
							+ rs.getString(2) + "\" in constraint \""
							+ rs.getString(1) + "\"");
				}

				List<String> cc = constraint.getColumns();
				if (cc.size() == 0) {
					throw new IllegalStateException("constraint with no constrained columns");
				}
				if (cc.size() > 1) {
					throw new IllegalStateException("constraint with multiple constrained columns");
				}
				Column c = findColumn(r, cc.get(0));
				if (c == null) {
					// XXX HACK!
					throw new Exception("Got a constraint for column \""
							+ constraint.getColumns().get(0) + "\" of table " + table
							+ ", but could not find column.  " + "Constraint: "
							+ constraint);
				}

				c.addConstraint(constraint);
			}
		} else {
			query = "SELECT "
				+ "        c.relname, "
				+ "        a.attname "
				+ "FROM "
				+ "        pg_index i, "
				+ "        pg_class c, "
				+ "        pg_attribute a "
				+ "WHERE "
				+ "        i.indrelid = "
				+ "          (SELECT oid FROM pg_class WHERE relname = '"
								+ table.toLowerCase()
								+ "') AND "
				+ "        i.indisprimary = 't' AND "
				+ "        i.indrelid = a.attrelid AND "
				+ "        i.indkey[0] = a.attnum AND "
				+ "        i.indexrelid = c.relfilenode";

			rs = st.executeQuery(query);
			while (rs.next()) {
				Constraint constraint = new Constraint(rs.getString(1), rs
						.getString(2));

				List<String> cc = constraint.getColumns();
				if (cc.size() == 0) {
					throw new IllegalStateException("constraint with no constrained columns");
				}
				if (cc.size() > 1) {
					throw new IllegalStateException("constraint with multiple constrained columns");
				}
				Column c = findColumn(r, cc.get(0));
				if (c == null) {
					throw new Exception("Got a constraint for column \""
							+ constraint.getColumns().get(0) + "\" of table " + table
							+ ", but could not find column.  " + "Constraint: "
							+ constraint);
				}

				c.addConstraint(constraint);
			}

			int fkey, fdel;

			query = "SELECT oid FROM pg_proc WHERE proname = "
					+ "          'RI_FKey_check_ins'";
			rs = st.executeQuery(query);
			if (!rs.next()) {
				throw new Exception("Could not get OID for RI_FKey_check_ins");
			}
			fkey = rs.getInt(1);

			query = "SELECT oid FROM pg_proc WHERE proname = "
					+ "          'RI_FKey_cascade_del'";
			rs = st.executeQuery(query);
			if (!rs.next()) {
				throw new Exception("Could not get OID for RI_FKey_cascade_del");
			}
			fdel = rs.getInt(1);

			query = "SELECT "
				+ "        tgconstrname, "
				+ "        tgargs, "
				+ "        tgfoid "
				+ "FROM "
				+ "        pg_trigger "
				+ "WHERE "
				+ "        ( "
				+ "          tgrelid = "
				+ "            (SELECT oid FROM pg_class WHERE relname = '"
								+ table.toLowerCase()
								+ "') AND "
				+ "            tgfoid = " + fkey+ " "
				+ "        ) OR ( "
				+ "          tgconstrrelid = "
				+ "            (SELECT oid FROM pg_class WHERE relname = '"
								+ table.toLowerCase()
								+ "') AND "
				+ "            tgfoid = " + fdel + " "
				+ "        ) ";
			rs = st.executeQuery(query);

			while (rs.next()) {
//				String name = rs.getString(1);
				String[] args = new String(rs.getBytes(2)).split("\000");

				Constraint constraint = new Constraint(rs.getString(1),
						args[4], args[2], args[5], (rs.getInt(3) == fkey) ? "a"
								: "c");

				List<String> cc = constraint.getColumns();
				if (cc.size() == 0) {
					throw new IllegalStateException("constraint with no constrained columns");
				}
				if (cc.size() > 1) {
					throw new IllegalStateException("constraint with multiple constrained columns");
				}
				Column c = findColumn(r, cc.get(0));
				if (c == null) {
					throw new Exception("Got a constraint for column \""
							+ constraint.getColumns().get(0) + "\" of table " + table
							+ ", but could not find column.  " + "Constraint: "
							+ constraint);
				}

				boolean found = false;
				ListIterator<Constraint> i = c.getConstraints().listIterator();
				while (i.hasNext()) {
					Constraint constraint_o = i.next();
					if (constraint.equals(constraint_o, true)) {
						found = true;
						if (constraint.getForeignDelType().equals("c")) {
							i.set(constraint);
						}
					}
				}

				if (!found) {
					c.addConstraint(constraint);
				}
			}
		}

		return r;
	}

