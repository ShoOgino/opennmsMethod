    public void install(String[] argv) throws Exception {
        printHeader();
        loadProperties();
        parseArguments(argv);

        if (!m_update_database && !m_do_inserts && !m_update_iplike
                && !m_update_unicode && m_tomcat_conf == null
                && !m_install_webapp && !m_fix_constraint) {
            throw new Exception("Nothing to do.\n" + m_required_options
                    + "\nUse '-h' for help.");
        }
        
        DataSource adminDataSource =
            new SimpleDataSource(m_pg_driver, m_pg_url + "template1",
                                    m_pg_user, m_pg_pass);
        m_installerDb.setAdminDataSource(adminDataSource);
        DataSource opennmsDataSource =
            new SimpleDataSource(m_pg_driver, m_pg_url + m_installerDb.getDatabaseName(),
                                    m_pg_user, m_pg_pass);
        m_installerDb.setDataSource(opennmsDataSource);

        /*
         * make sure we can load the ICMP library before we go any farther
         */
        
        String icmp_path = findLibrary("jicmp", m_library_search_path, true);
        String jrrd_path = findLibrary("jrrd", m_library_search_path, false);
        
        writeLibraryConfig(icmp_path, jrrd_path);
        
        /*
         * Everything needs to use the administrative data source until
         * we verify that the opennms database is created below (and where
         * we create it if it doesn't already exist).
         */

        // XXX Check Tomcat version?

        if (m_update_database || m_update_iplike || m_update_unicode
                || m_do_inserts || m_fix_constraint) {
            m_installerDb.databaseCheckVersion();
            m_installerDb.databaseCheckLanguage();
        }

        printDiagnostics();

        verifyFilesAndDirectories();

        if (m_install_webapp) {
            checkWebappOldOpennmsDir();
            checkServerXmlOldOpennmsContext();
        }

        if (m_update_database || m_fix_constraint) {
            m_installerDb.readTables();
        }

        if (m_update_database) {
            // XXX Check and optionally modify pg_hba.conf

            if (!m_installerDb.databaseUserExists()) {
                m_installerDb.databaseAddUser();
            }
            if (!m_installerDb.databaseDBExists()) {
                m_installerDb.databaseAddDB();
            }
        }
        
        // We can now use the opennms database

        if (m_fix_constraint) {
            m_installerDb.fixConstraint(m_fix_constraint_name,
                                        m_fix_constraint_remove_rows);
        }

        if (m_update_database) {
            m_installerDb.checkOldTables();
            if (!m_skip_constraints) {
                m_installerDb.checkConstraints();
                m_installerDb.checkIndexUniqueness();
            }
            m_installerDb.createSequences();

            // should we be using createFunctions and createLanguages instead?
            m_installerDb.updatePlPgsql();

            // should we be using createFunctions instead?
            m_installerDb.addStoredProcedures();

            m_installerDb.addColumnReplacements();
            m_installerDb.createTables();
            m_installerDb.closeColumnReplacements();
            
            //createIndexes();
            // createFunctions(m_cfunctions); // Unused, not in create.sql
            // createLanguages(); // Unused, not in create.sql
            // createFunctions(m_functions); // Unused, not in create.sql

            m_installerDb.fixData();
        }

        if (m_do_inserts) {
            m_installerDb.insertData();
        }

        if (m_update_unicode) {
            m_installerDb.checkUnicode();
        }

        if (m_install_webapp) {
            installWebApp();
        }

        if (m_tomcat_conf != null) {
            updateTomcatConf();
        }

        if (m_update_iplike) {
            m_installerDb.updateIplike();
        }

        m_installerDb.closeConnection();
        m_installerDb.closeAdminConnection();

        if (m_update_database) {
            createConfiguredFile();
        }

        m_out.println();
        m_out.println("Installer completed successfully!");
    }

