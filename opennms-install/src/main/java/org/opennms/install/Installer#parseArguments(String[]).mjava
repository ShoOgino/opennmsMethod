    /**
     * <p>parseArguments</p>
     *
     * @param argv an array of {@link java.lang.String} objects.
     * @throws java.lang.Exception if any.
     */
    public void parseArguments(String[] argv) throws Exception {

        options.addOption("h", "help", false, "this help");

        // database-related options
        options.addOption("d", "do-database", false,
                "perform database actions");

        options.addOption("Z", "remove-database", false,
                "remove the OpenNMS database");

        options.addOption("u", "username", true,
                "username of the database account (default: 'opennms')");
        options.addOption("p", "password", true,
                "password of the database account (default: 'opennms')");
        options.addOption("a", "admin-username", true,
                "username of the database administrator (default: 'postgres')");
        options.addOption("A", "admin-password", true,
                "password of the database administrator (default: '')");
        options.addOption("D", "database-url", true,
                "JDBC database URL (default: jdbc:postgresql://localhost:5432/");
        options.addOption("P", "database-name", true,
                "name of the PostgreSQL database (default: opennms)");

        options.addOption("c", "clean-database", false,
                "this option does nothing");
        options.addOption("i", "insert-data", false,
                "(obsolete)");
        options.addOption("s", "stored-procedure", false,
                "add the IPLIKE stored procedure if it's missing");
        options.addOption("v", "vacuum", false,
                "vacuum (optimize) the database");
        options.addOption("f", "vacuum-full", false,
                "vacuum full the database (recovers unused disk space)");
        options.addOption("Q", "ignore-database-version", false,
                "disable the database version check");

        options.addOption("x", "database-debug", false,
                "turn on debugging for the database data transformation");
        options.addOption("e", "extended-repairs", false,
                "enable extended repairs of old schemas");
        // tomcat-related options
        options.addOption("y", "do-webapp", false,
                          "install web application (see '-w')");
        options.addOption("T", "tomcat-conf", true, "location of tomcat.conf");
        options.addOption("w", "tomcat-context", true,
                          "location of the tomcat context (eg, conf/Catalina/localhost)");

        // general installation options
        options.addOption("l", "library-path", true,
                          "library search path (directories separated by '"
                                  + File.pathSeparator + "')");
        options.addOption("r", "rpm-install", false,
                          "RPM install (deprecated)");

        // upgrade tools options
        options.addOption("S", "skip-upgrade-tools", false,
                "Skip the execution of the upgrade tools (post-processing tasks)");

        CommandLineParser parser = new PosixParser();
        m_commandLine = parser.parse(options, argv);

        if (m_commandLine.hasOption("h")) {
            usage(options, m_commandLine);
            System.exit(0);
        }

        options.addOption("u", "username", true,
                "replaced by opennms-datasources.xml");
        options.addOption("p", "password", true,
                "replaced by opennms-datasources.xml");
        options.addOption("a", "admin-username", true,
                "replaced by opennms-datasources.xml");
        options.addOption("A", "admin-password", true,
                "replaced by opennms-datasources.xml");
        options.addOption("D", "database-url", true,
                "replaced by opennms-datasources.xml");
        options.addOption("P", "database-name", true,
                "replaced by opennms-datasources.xml");

        if (m_commandLine.hasOption("c")) {
            usage(options, m_commandLine, "The 'c' option was deprecated in 1.6, and disabled in 1.8.  You should backup and then drop the database before running install to reset your data.", null);
            System.exit(1);
        }

        if (m_commandLine.hasOption("u")
                || m_commandLine.hasOption("p")
                || m_commandLine.hasOption("a")
                || m_commandLine.hasOption("A")
                || m_commandLine.hasOption("D")
                || m_commandLine.hasOption("P")) {
            usage(
                    options,
                    m_commandLine,
                    "The 'u', 'p', 'a', 'A', 'D', and 'P' options have all been superseded.\nPlease edit $OPENNMS_HOME/etc/opennms-datasources.xml instead.", null);
            System.exit(1);
        }

        m_fix_constraint = m_commandLine.hasOption("C");
        m_fix_constraint_name = m_commandLine.getOptionValue("C");
        if (m_commandLine.hasOption("e")) {
            System.setProperty("opennms.contexts", "production,repair");
        }
        m_update_database = m_commandLine.hasOption("d");
        m_remove_database = m_commandLine.hasOption("Z");
        m_do_full_vacuum = m_commandLine.hasOption("f");
        m_library_search_path = m_commandLine.getOptionValue("l", m_library_search_path);
        m_ignore_database_version = m_commandLine.hasOption("Q");
        m_update_iplike = m_commandLine.hasOption("s");
        m_tomcat_conf = m_commandLine.getOptionValue("T", m_tomcat_conf);
        m_do_vacuum = m_commandLine.hasOption("v");
        m_webappdir = m_commandLine.getOptionValue("w", m_webappdir);

        Configurator.setRootLevel(Level.INFO);
        if (m_commandLine.hasOption("x")) {
            Configurator.setRootLevel(Level.DEBUG);
        }

        m_fix_constraint_remove_rows = m_commandLine.hasOption("X");
        m_install_webapp = m_commandLine.hasOption("y");
        m_skip_upgrade_tools = m_commandLine.hasOption("S");

        if (m_commandLine.getArgList().size() > 0) {
            usage(options, m_commandLine, "Unknown command-line arguments: "
                    + Arrays.toString(m_commandLine.getArgs()), null);
            System.exit(1);
        }

        // XXX this probably needs to reflect the webapp options
        if (!m_update_database && !m_update_iplike && m_library_search_path == null) {
            usage(options, m_commandLine, "Nothing to do.  Use -h for help.", null);
            System.exit(1);
        }
    }

