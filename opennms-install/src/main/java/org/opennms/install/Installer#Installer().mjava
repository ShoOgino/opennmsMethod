    public Installer() throws SQLException {
        // The DEFAULT value for these columns will take care of these primary keys
        m_columnReplacements.put("snmpinterface.id", new DoNotAddColumn());
        m_columnReplacements.put("ipinterface.id", new DoNotAddColumn());
        m_columnReplacements.put("ifservices.id", new DoNotAddColumn());
        m_columnReplacements.put("assets.id", new DoNotAddColumn());

        // Triggers will take care of these surrogate foreign keys
        m_columnReplacements.put("ipinterface.snmpinterfaceid",
                                 new DoNotAddColumn());
        m_columnReplacements.put("ifservices.ipinterfaceid",
                                 new DoNotAddColumn());
        m_columnReplacements.put("outages.ifserviceid", new DoNotAddColumn());
        
        m_columnReplacements.put("events.eventsource",
                                 new EventSourceReplacement());
        
        m_columnReplacements.put("outages.outageid",
                                 new AutoInteger(1));
        
        m_columnReplacements.put("snmpinterface.nodeid",
                                 new RowHasBogusData("snmpInterface",
                                                     "nodeId"));
        
        m_columnReplacements.put("snmpinterface.snmpifindex",
                                 new RowHasBogusData("snmpInterface",
                                                     "snmpIfIndex"));

        m_columnReplacements.put("ipinterface.nodeid",
                                 new RowHasBogusData("ipInterface", "nodeId"));

        m_columnReplacements.put("ipinterface.ipaddr",
                                 new RowHasBogusData("ipInterface", "ipAddr"));

        m_columnReplacements.put("ifservices.nodeid",
                                 new RowHasBogusData("ifservices", "nodeId"));

        m_columnReplacements.put("ifservices.ipaddr",
                                 new RowHasBogusData("ifservices", "ipaddr"));

        m_columnReplacements.put("ifservices.serviceid",
                                 new RowHasBogusData("ifservices",
                                                     "serviceId"));

        m_columnReplacements.put("outages.nodeid",
                                 new RowHasBogusData("outages", "nodeId"));
        
        m_columnReplacements.put("outages.serviceid",
                                 new RowHasBogusData("outages", "serviceId"));
        
        /*
         * This is totally bogus.  outages.svcregainedeventid is a foreign
         * key that points at events.eventid, and a fixed replacement of zero
         * will break, because there should never be an event with an ID of
         * zero.  I don't think it ever got executed before due to the
         * null replacement only being performed if a column was marked as
         * NOT NULL.
         */
        /*
        m_columnReplacements.put("outages.svcregainedeventid",
                                 new FixedIntegerReplacement(0));
                                 */
        
        // Disabled for the same reason as above
        /*
        m_columnReplacements.put("notifications.eventid",
                                 new FixedIntegerReplacement(0));
                                 */
        
        m_columnReplacements.put("usersnotified.id",
                                 new NextValReplacement("userNotifNxtId"));
        
    }

