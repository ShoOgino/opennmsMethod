    public Installer() {
        AutoIntegerIdMapStore snmpInterfaceId =
            new AutoIntegerIdMapStore(1, new String[] { "nodeid", "ipaddr", "snmpifindex" });
        m_columnReplacements.put("snmpinterface.id", snmpInterfaceId);
        
        AutoIntegerIdMapStore ipInterfaceId =
            new AutoIntegerIdMapStore(1, new String[] { "nodeid", "ipaddr", "ifindex" });
        m_columnReplacements.put("ipinterface.id", ipInterfaceId);

        MapStoreIdGetter IpInterfaceSnmpInterfaceId =
            new MapStoreIdGetter(snmpInterfaceId, new String[] { "nodeid", "ipaddr", "ifindex" }, true);
        m_columnReplacements.put("ipinterface.snmpinterfaceid", IpInterfaceSnmpInterfaceId);
        
        AutoIntegerIdMapStore ifServicesId =
            new AutoIntegerIdMapStore(1, new String[] { "nodeid", "ipaddr", "ifindex", "serviceid" });
        m_columnReplacements.put("ifservices.id", ifServicesId);
        
        MapStoreIdGetter ifServicesIpInterfaceId =
            new MapStoreIdGetter(ipInterfaceId, new String[] { "nodeid", "ipaddr", "ifindex" }, false);
        m_columnReplacements.put("ifservices.ipinterfaceid", ifServicesIpInterfaceId);
        
        m_columnReplacements.put("events.eventsource",
                                 new EventSourceReplacement());
        
        m_columnReplacements.put("outages.outageid",
                                 new AutoInteger(1));
        
        m_columnReplacements.put("snmpinterface.nodeid", new ColumnChangeReplacement() {
            public Object getColumnReplacement(ResultSet rs, Map<String, ColumnChange> columnChanges) throws SQLException {
                throw new IllegalArgumentException("The nodeId column in the snmpInterface table should never be null, but the entry for this row does have a null nodeId.  It needs to be removed or udpated to reflect a valid nodeId.");
            }
        });
        
        m_columnReplacements.put("ipinterface.ipaddr", new ColumnChangeReplacement() {
            public Object getColumnReplacement(ResultSet rs, Map<String, ColumnChange> columnChanges) throws SQLException {
                throw new IllegalArgumentException("The ipAddr column in the ipInterface table should never be null, but the entry for this row does have a null ipAddr.  It needs to be removed or udpated to reflect a valid ipAddr.");
            }
        });

        
        /*
         * This is totally bogus.  outages.svcregainedeventid is a foreign
         * key that points at events.eventid, and a fixed replacement of zero
         * will break, because there should never be an event with an ID of
         * zero.  I don't think it ever got executed before due to the
         * null replacement only being performed if a column was marked as
         * NOT NULL.
         */
        /*
        m_columnReplacements.put("outages.svcregainedeventid",
                                 new FixedIntegerReplacement(0));
                                 */
        
        // Disabled for the same reason as above
        /*
        m_columnReplacements.put("notifications.eventid",
                                 new FixedIntegerReplacement(0));
                                 */
        
        m_columnReplacements.put("usersnotified.id",
                                 new AutoInteger(1));

    }

