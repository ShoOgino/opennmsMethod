	public List<Column> getTableColumnsFromSQL(String table) throws Exception {
		String create = getTableFromSQL(table);
		LinkedList<Column> columns = new LinkedList<Column>();
		boolean parens = false;
		StringBuffer accumulator = new StringBuffer();

		for (int i = 0; i <= create.length(); i++) {
			char c = ' ';

			if (i < create.length()) {
				c = create.charAt(i);

				if (c == '(' || c == ')') {
					parens = (c == '(');
					accumulator.append(c);
					continue;
				}
			}

			if (((c == ',') && !parens) || i == create.length()) {
				String a = accumulator.toString().trim();

				if (a.toLowerCase().startsWith("constraint ")) {
					Constraint constraint = new Constraint(a);
					List<String> cc = constraint.getColumns();
					if (cc.size() == 0) {
						throw new IllegalStateException("constraint with no constrained columns");
					}
					if (cc.size() > 1) {
						throw new IllegalStateException("constraint with multiple constrained columns");
					}
					Column constrained = findColumn(columns, cc.get(0));
					if (constrained == null) {
						throw new Exception("constraint does not "
								+ "reference a column in the table: "
								+ constraint);
					}
					constrained.addConstraint(constraint);
				} else {
					Column column = new Column();
					try {
						column.parse(accumulator.toString());
						columns.add(column);
					} catch (Exception e) {
						throw new Exception("While parsing table entry for column " + column.getName() + " of " + table + ".  Chained: " + e.getMessage(), e);
					}
				}

				accumulator = new StringBuffer();
			} else {
				accumulator.append(c);
			}
		}

		return columns;
	}

