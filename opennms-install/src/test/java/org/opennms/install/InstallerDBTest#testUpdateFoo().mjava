    public void testUpdateFoo() throws Exception {
        if (!isDBTestEnabled()) {
            return;
        }
        
        m_installer.createSequences();
        for (int i = 0; i < 10; i++) {
            executeSQL("SELECT nextval('opennmsNxtId');");
        }
        
        addTableFromSQL("distPoller");
        addTableFromSQL("node");
        addTableFromSQL("snmpinterface");
      
        // No ID column
        addTableFromSQLWithReplacements("ipinterface", new String[][] {
                new String[] { "(?i)id\\s+integer default nextval\\('opennmsNxtId'\\) not null,", "" },
                new String[] { "(?i)constraint ipinterface_pkey primary key \\(id\\),", "" }
                });
        
        addTableFromSQL("service");
        
        // No ID or ipInterfaceID column
        addTableFromSQLWithReplacements("ifservices", new String[][] {
                new String[] { "(?i)id\\s+integer default nextval\\('opennmsNxtId'\\) not null,", "" },
                new String[] { "(?i)constraint ifServices_pkey primary key \\(id\\),", "" },
                new String[] { "(?i)ipInterfaceID\\s+integer not null,", "" },
                new String[] { "(?i)constraint ipinterface_fkey foreign key \\(ipInterfaceId\\) references ipInterface \\(id\\) ON DELETE CASCADE,", "" }
                });

        executeSQL("INSERT INTO node (nodeId, nodeCreateTime) VALUES ( 1, now() )");
        executeSQL("INSERT INTO ipInterface (nodeId, ipAddr, ifIndex) VALUES ( 1, '1.2.3.4', null )");
        executeSQL("INSERT INTO ipInterface (nodeId, ipAddr, ifIndex) VALUES ( 1, '1.2.3.9', 1 )");
        executeSQL("INSERT INTO service (serviceID, serviceName) VALUES ( 1, 'COFFEE-READY' )");
        executeSQL("INSERT INTO ifServices (nodeID, ipAddr, ifIndex, serviceID) VALUES ( 1, '1.2.3.4', null, 1)");
        executeSQL("INSERT INTO ifServices (nodeID, ipAddr, ifIndex, serviceID) VALUES ( 1, '1.2.3.9', 1, 1)");
        
        m_installer.createTables();
        
        Statement st = m_installer.m_dbconnection.createStatement();
        ResultSet rs = st.executeQuery("SELECT id from ipInterface");
        int count = 0;
        for (int expected = 1; rs.next(); expected++) {
            assertEquals("expected ipInterface id", expected, rs.getInt(1));
            count++;
        }
        assertEquals("expected column count", 2, count);

        rs = st.executeQuery("SELECT id, ipInterfaceID from ifServices");
        count = 0;
        for (int expected = 1; rs.next(); expected++) {
            assertEquals("expected ifServices id", expected, rs.getInt(1));
            assertEquals("expected ifServices ipInterfaceId", expected, rs.getInt(2));
            count++;
        }
        assertEquals("expected column count", 2, count);
    }

