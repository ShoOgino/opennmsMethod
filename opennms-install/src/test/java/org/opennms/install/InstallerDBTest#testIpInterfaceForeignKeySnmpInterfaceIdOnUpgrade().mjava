    public void testIpInterfaceForeignKeySnmpInterfaceIdOnUpgrade()
            throws Exception {
        if (!isDBTestEnabled()) {
            return;
        }

        m_installer.createSequences();
        m_installer.updatePlPgsql();
        m_installer.addStoredProcedures();

        addTableFromSQL("distPoller");
        addTableFromSQL("node");

        // No ID column
        addTableFromSQLWithReplacements("snmpinterface",
                                        new String[][] {
                                                new String[] {
                                                        "(?i)id\\s+INTEGER DEFAULT nextval\\('opennmsNxtId'\\) NOT NULL,",
                                                        "" },
                                                new String[] {
                                                        "(?i)CONSTRAINT snmpinterface_pkey primary key \\(id\\),",
                                                        "" } });

        // No snmpInterfaceID column
        addTableFromSQLWithReplacements("ipinterface",
                                        new String[][] {
                                                new String[] {
                                                        "(?i)snmpInterfaceId\\s+integer,",
                                                        "" },
                                                new String[] {
                                                        "(?i)CONSTRAINT snmpinterface_fkey1 FOREIGN KEY \\(snmpInterfaceId\\) REFERENCES snmpInterface \\(id\\) ON DELETE CASCADE,",
                                                        "" } }, false);

        addTableFromSQL("service");
        addTableFromSQL("ifServices");
        addTableFromSQL("events");
        addTableFromSQL("outages");

        executeSQL("INSERT INTO node (nodeId, nodeCreateTime) VALUES ( 1, now() )");
        executeSQL("INSERT INTO node (nodeId, nodeCreateTime) VALUES ( 2, now() )");
        executeSQL("INSERT INTO snmpInterface (nodeId, ipAddr, snmpIfIndex) VALUES ( 1, '1.2.3.4', 1)");
        executeSQL("INSERT INTO ipInterface (nodeId, ipAddr, ifIndex) VALUES ( 1, '1.2.3.4', 1 )");
        executeSQL("INSERT INTO ipInterface (nodeId, ipAddr, ifIndex) VALUES ( 2, '1.2.3.9', null )");

 //       verifyTriggers(false);

        m_installer.createTables();

        verifyTriggers(false);

        Statement st;
        ResultSet rs;
        int id;

        st = m_installer.m_dbconnection.createStatement();
        rs = st.executeQuery("SELECT id from snmpInterface ORDER BY nodeId");

        assertTrue("Could not ResultSet.next() to first result entry",
                   rs.next());
        rs.getInt(1);
        assertFalse("first result should not be null, but was null",
                    rs.wasNull());
        // I don't care about the value
        // assertEquals("smmpInterface id", 1, got);

        assertFalse("Too many entries", rs.next());

        st = m_installer.m_dbconnection.createStatement();
        rs = st.executeQuery("SELECT id, snmpInterfaceID from ipInterface ORDER BY nodeId");

        assertTrue("Could not ResultSet.next() to first result entry",
                   rs.next());
        rs.getInt(1);
        assertFalse("ipInterface.id in first result should not be null, but was null",
                    rs.wasNull());
        rs.getInt(2);
        assertFalse("ipInterface.snmpInterfaceId in first result should not be null, but was null",
                    rs.wasNull());
//        assertEquals("ipInterface snmpInterfaceId", 1, rs.getInt(1));

        assertTrue("Could not ResultSet.next() to second result entry",
                   rs.next());
        rs.getInt(1);
        assertFalse("ipInterface.id in second result should not be null, but was null",
                    rs.wasNull());
        int got = rs.getInt(2);
        assertFalse("ipInterface.snmpInterfaceId in second result should be null, but wasn't null (was "
                + got + ")", rs.wasNull());

        assertFalse("Too many entries", rs.next());
    }

