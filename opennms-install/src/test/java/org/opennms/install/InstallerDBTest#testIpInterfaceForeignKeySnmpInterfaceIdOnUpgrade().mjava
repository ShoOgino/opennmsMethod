    public void testIpInterfaceForeignKeySnmpInterfaceIdOnUpgrade() throws Exception {
        if (!isDBTestEnabled()) {
            return;
        }
        
        m_installer.createSequences();
        for (int i = 0; i < 10; i++) {
            executeSQL("SELECT nextval('opennmsNxtId');");
        }
        
        addTableFromSQL("distPoller");
        addTableFromSQL("node");
        
        // No ID column
        addTableFromSQLWithReplacements("snmpinterface", new String[][] {
                new String[] { "(?i)id\\s+INTEGER DEFAULT nextval\\('opennmsNxtId'\\) NOT NULL,", "" },
                new String[] { "(?i)CONSTRAINT snmpinterface_pkey primary key \\(id\\),", "" }
            });
      
        // No snmpInterfaceID column
        addTableFromSQLWithReplacements("ipinterface", new String[][] {
                new String[] { "(?i)snmpInterfaceId\\s+integer,", "" },
                new String[] { "(?i)CONSTRAINT snmpinterface_fkey1 FOREIGN KEY \\(snmpInterfaceId\\) REFERENCES snmpInterface \\(id\\),", "" }
                });
        
        executeSQL("INSERT INTO node (nodeId, nodeCreateTime) VALUES ( 1, now() )");
        executeSQL("INSERT INTO snmpInterface (nodeId, ipAddr, snmpIfIndex) VALUES ( 1, '1.2.3.4', null)");
        executeSQL("INSERT INTO ipInterface (nodeId, ipAddr, ifIndex) VALUES ( 1, '1.2.3.4', null )");
        executeSQL("INSERT INTO ipInterface (nodeId, ipAddr, ifIndex) VALUES ( 1, '1.2.3.9', 1 )");
        
        m_installer.createTables();
        
        Statement st = m_installer.m_dbconnection.createStatement();
        ResultSet rs = st.executeQuery("SELECT snmpInterfaceID from ipInterface");
        
        assertTrue("Could not ResultSet.next() to first result entry", rs.next());
        int got = rs.getInt(1);
        assertFalse("first result should not be null, but was null", rs.wasNull());
        assertEquals("ipInterface snmpInterfaceId", 1, got);
        
        assertTrue("Could not ResultSet.next() to second result entry", rs.next());
        assertFalse("second result should be null, but wasn't null", rs.wasNull());

        assertFalse("Too many entries", rs.next());
    }

