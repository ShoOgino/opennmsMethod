    public void doTestBug931(boolean dropForeignTable, int badRows,
            boolean fixConstraint) throws Exception {
        final String errorSubstring;
        if (dropForeignTable) {
            errorSubstring = "Table events contains "
                + badRows
                + " rows (out of 2) that violate new constraint "
                + s_constraint
                + ".  See the install guide for details on how to correct this "
                + "problem.  You can execute this SQL query to see a list of "
                + "the rows that violate the constraint:\n"
                + "SELECT * FROM events WHERE events.nodeid IS NOT NULL";
        } else {
            errorSubstring = "Table events contains "
                + badRows
                + " rows (out of 2) that violate new constraint "
                + s_constraint
                + ".  See the install guide for details on how to correct this "
                + "problem.  You can execute this SQL query to see a list of "
                + "the rows that violate the constraint:\n"
                + "SELECT * FROM events WHERE events.nodeid IS NOT NULL "
                + "AND ( events.nodeid ) NOT IN (SELECT node.nodeid FROM node)";
        }

        setupBug931((badRows != 0) || fixConstraint, dropForeignTable);

        if (fixConstraint) {
            m_installer.fixConstraint();
        }

        ThrowableAnticipator ta = new ThrowableAnticipator();
        if (badRows > 0) {
            ta.anticipate(new Exception(errorSubstring));
        }

        try {
            m_installer.checkConstraints();
        } catch (Throwable t) {
            ta.throwableReceived(t);
        }

        ta.verifyAnticipated();
    }

