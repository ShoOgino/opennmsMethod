    public void testPrimaryKeyMultipleColumns() throws Exception {
    	final String createSQL = 
    		"create table element (\n"
    		+ "    mapId           integer not null,\n"
    		+ "    elementId       integer not null,\n"
    		+ "    constraint pk_element primary key (mapId, elementId)\n"
    		+ ");";
    	
        if (!isDBTestEnabled()) {
            return;
        }
        
        ThrowableAnticipator ta = new ThrowableAnticipator();
        ta.anticipate(new IllegalStateException("constraint with multiple constrained columns"));
              
        m_installer.readTables(new StringReader(createSQL));
//        List<Column> columns = null;
        try {
            m_installer.getTableColumnsFromSQL("element");
        } catch (Throwable t) {
        	ta.throwableReceived(t);
        }
        ta.verifyAnticipated();
        
        /*
        boolean foundColumn = false;
        boolean foundConstraint = false;
        for (Iterator<Column> i = columns.iterator(); i.hasNext(); ) {
        	Column column = i.next();
        	if (column.getName().equals("mapid")) {
        		foundColumn = true;
        		
        		List<Constraint> constraints = column.getConstraints();
        		for (Iterator<Constraint> j = constraints.iterator(); j.hasNext(); ) {
        			Constraint constraint = j.next();
        			if (constraint.getName().equals("pk_element")) {
        				foundConstraint = true;
        				List<String> constrained = constraint.getColumns();
        				for (Iterator<String> k = constrained.iterator(); k.hasNext(); ) {
        					String c = k.next();
        					System.out.println("constrained: " + c);
        				}
        			}
        		}
        		
                if (!foundConstraint) {
                	fail("Did not find constraint pk_element in column mapid in SQL");
                }
        	}
        }
        
        if (!foundColumn) {
        	fail("Did not find column mapid in SQL column list");
        }
        */
    }

