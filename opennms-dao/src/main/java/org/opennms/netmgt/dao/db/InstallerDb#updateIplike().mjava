    public void updateIplike() throws Exception {
        Statement st = getConnection().createStatement();

        boolean insert_iplike = false;
        
        m_out.print("- checking if iplike is usable... ");
        try {
        	st.execute("SELECT IPLIKE('127.0.0.1', '*.*.*.*')");
        	m_out.println("YES");
        } catch (SQLException selectException) {
        	insert_iplike = true;
        	m_out.println("NO");
        }
        
        if (insert_iplike) {
        	m_out.print("- removing existing iplike definition (if any)... ");
        	try {
        		st.execute("DROP FUNCTION iplike(text,text)");
        		m_out.println("OK");
        	} catch (SQLException dropException) {
        		if (dropException.toString().contains("does not exist")
        				|| "42883".equals(dropException.getSQLState())) {
        			m_out.println("OK");
        		} else {
        			m_out.println("FAILED");
        			throw dropException;
        		}
        	}

        	m_out.print("- inserting C iplike function... ");
            boolean success;
            if (m_pg_iplike == null) {
                success = false;
                
                m_out.println("SKIPPED (location of iplike function not set)");
            } else {
            	try {
                    st.execute("CREATE FUNCTION iplike(text,text) RETURNS bool " + "AS '"
                            + m_pg_iplike + "' LANGUAGE 'c' WITH(isstrict)");
                    
                    success = true;
                    m_out.println("OK");
            	} catch (SQLException e) {
                    success = false;
            		m_out.println("FAILED (" + e + ")");
                }
            }
            
            if (!success) {
        		try {
                    m_out.print("- inserting PL/pgSQL iplike function... ");
                    
                	InputStream sqlfile = getClass().getResourceAsStream(IPLIKE_SQL_RESOURCE);
                	if (sqlfile == null) {
                        String message = "unable to locate " + IPLIKE_SQL_RESOURCE;
                        m_out.println("FAILED (" + message + ")");
                		throw new Exception(message);
                	}
                	
                	BufferedReader in = new BufferedReader(new InputStreamReader(sqlfile));
                	StringBuffer createFunction = new StringBuffer();
                	String line;
                	while ((line = in.readLine()) != null) {
                		createFunction.append(line).append("\n");
                	}
        			st.execute(createFunction.toString());
        			m_out.println("OK");
        		} catch (Exception e) {
        			m_out.println("FAILED");
        			throw e;
        		}
        	}
        }

        // XXX This error is generated from Postgres if eventtime(text)
        // does not exist:
        // ERROR: function eventtime(text) does not exist
        m_out.print("- checking for stale eventtime.so references... ");
        try {
            st.execute("DROP FUNCTION eventtime(text)");
            m_out.println("REMOVED");
        } catch (SQLException e) {
            /*
             * SQL Status code: 42883: ERROR: function %s does not exist
             */
            if (e.toString().indexOf("does not exist") != -1
                    || "42883".equals(e.getSQLState())) {
                m_out.println("OK");
            } else {
            	m_out.println("FAILED");
                throw e;
            }
        }
    }

