    private void validateResourceTypes(final Set<String> allowedResourceTypes) {
        final String configuredString;
        if (allowedResourceTypes.size() == 0) {
            configuredString = "(none)";
        } else {
            configuredString = StringUtils.join(allowedResourceTypes, ", ");
        }

        final String allowableValues = "any positive number, 'ifIndex', or any of the configured resourceTypes: " + configuredString;
        for (final SnmpCollection collection : getContainer().getObject().getSnmpCollectionCollection()) {
            final Groups groups = collection.getGroups();
            if (groups != null) {
				for (final Group group : groups.getGroupCollection()) {
	                for (final MibObj mibObj : group.getMibObjCollection()) {
	                    final String instance = mibObj.getInstance();
	                    if (instance == null)                            continue;
                        if (MibObject.INSTANCE_IFINDEX.equals(instance)) continue;
                        if (allowedResourceTypes.contains(instance))     continue;
	                    try {
	                        // Check to see if the value is a non-negative integer
	                        if (Integer.parseInt(instance.trim()) >= 0) {
	                            continue;
	                        }
	                    } catch (NumberFormatException e) {}

	                    // XXX this should be a better exception
	                    throw new IllegalArgumentException("instance '" + instance + "' invalid in mibObj definition for OID '" + mibObj.getOid() + "' in collection '" + collection.getName() + "' for group '" + group.getName() + "'.  Allowable instance values: " + allowableValues);
	                }
				}
            }
        }
    }

