    @Override
    public List<BridgeMacTopologyLink> getAllBridgeLinksToIpAddrToNodes(){
        List<Object[]> links =  getHibernateTemplate().execute(new HibernateCallback<List<Object[]>>() {
            @Override
            public List<Object[]> doInHibernate(Session session) throws HibernateException, SQLException {
                return session.createSQLQuery("select mlink.*," +
                        "ntm.netaddress, " +
                        "ip.ipaddr, " +
                        "ip.nodeid as targetnodeid, " +
                        "node.nodelabel " +
                        "from bridgemaclink as mlink " +
                        "left join ipnettomedia as ntm " +
                        "on mlink.macaddress = ntm.physaddress " +
                        "left join ipinterface ip on ip.ipaddr = ntm.netaddress " +
                        "left join node on ip.nodeid = node.nodeid " +
                        "order by bridgeport;").list();
            }
        });

        List<BridgeMacTopologyLink> topoLinks = new ArrayList<BridgeMacTopologyLink>();
        for(Object[] link : links) {
            topoLinks.add(new BridgeMacTopologyLink((Integer)link[0], (Integer)link[1], (Integer)link[2],
                    (Integer)link[3], (Integer)link[4], (Integer)link[5], (String)link[6], (String)link[9],
                    (String)link[10], (Integer)link[11], (String)link[12]));
        }

        return topoLinks;
    }

