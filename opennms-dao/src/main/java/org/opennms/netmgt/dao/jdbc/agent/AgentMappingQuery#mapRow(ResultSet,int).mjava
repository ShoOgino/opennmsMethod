    public Object mapRow(ResultSet rs, int rowNumber) throws SQLException {
    	
    	// FIXME: Right now an agent is also an SnmpAgent.  That's not correct for
    	// JMX agents especially when we put the datacollection config references here.
    	// Need to provide different subclasses of agent based on ServiceType.
    	//
    	// This may not be the optimum way to implemenet this.  more to come later
    	
    	
    	// NOTE: At the moment this is no agent table.  These agents are 'derived' from a
    	// join on the node, ipinterface, ifservices tables where isSnmpPrimary = 'P'.  
    	// An agent is defined a collectable service responding on the primary interface for a node.
    	// the id of the agent is the nodeid of the node it belongs too.  This definition currently
    	// implies that there can be at most one agent of a given serviceType on a node. 
    
        final Integer id = (Integer) rs.getObject("agentNodeid");
        
        LazyAgent agent = (LazyAgent)Cache.obtain(OnmsAgent.class, id);
        agent.setLoaded(true);
        
        OnmsNode node = (OnmsNode)Cache.obtain(OnmsNode.class, id);
        agent.setNode(node);	//        "node.nodeid as agentNodeid, " +
        
        Integer svcId = (Integer) rs.getObject("agentServiceId");
        OnmsServiceType svcType = (OnmsServiceType)Cache.obtain(OnmsServiceType.class, svcId);
        agent.setServiceType(svcType); // "ifservices.serviceid as agentServiceId"
        
        agent.setSysObjectId(rs.getString("agentSysOid"));	//        "node.nodeSysOid as agentSysOid, " +
        agent.setSysName(rs.getString("agentSysName"));	//        "node.nodeSysName as agentSysName, " +
        agent.setSysDescription(rs.getString("agentSysDescription"));	//        "node.nodeSysDescription as agentSysDescription, " +
        agent.setSysLocation(rs.getString("agentSysLocation"));	//        "node.nodeSysLocation as agentSysLocation, " +
        agent.setSysContact(rs.getString("agentSysContact"));	//        "node.nodeSysContact as agentSysContact, " +
        agent.setIpAddress(rs.getString("agentAddress"));	//        "ipInterface.ipAddr as agentAddress, " +

        // TODO: add code to load/lazyLoad the SnmpAgentConfig
        
        // TODO: add code load/lazyLoad the DataCollection Attributes associated with this agent
        
//        LazySet.Loader ifLoader = new LazySet.Loader() {
//
//			public Set load() {
//				return new FindByNode(getDataSource()).findSet(id);
//			}
//        	
//        };
//        
//        agent.setIpInterfaces(new LazySet(ifLoader));
//        
//        LazySet.Loader catLoader = new LazySet.Loader() {
//            public Set load() {
//                return new FindCategoriesByNode(getDataSource()).findSet(id);
//            }
//        };
//        agent.setCategories(new LazySet(catLoader));
//        
//        LazySet.Loader snmpIfLoader = new LazySet.Loader() {
//        	public Set load() {
//        		return new org.opennms.netmgt.dao.jdbc.snmpif.FindByNode(getDataSource()).findSet(id);
//        	}
//        };
//        agent.setSnmpInterfaces(new LazySet(snmpIfLoader));
        
        agent.setDirty(false);
        return agent;
    }

