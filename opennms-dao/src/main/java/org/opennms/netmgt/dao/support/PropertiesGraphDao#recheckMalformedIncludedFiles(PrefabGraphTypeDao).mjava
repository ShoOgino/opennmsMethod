    /**
     * Checks for any files which were malformed last time the include directory for this type
     * was scanned.  If any of them have changed since then, attempt to read them again.
     * 
     * This is meant to ensure that if the administrator made a mistake when adding a new file
     * they don't need to wait for include.directory.rescan before the fix will be noticed 
     * 
     * It's necessary because if the file was broken, the broken graphs won't be stored in a
     * FileReloadContainer to be noticed.
     * @param type
     */
    private void recheckMalformedIncludedFiles(PrefabGraphTypeDao type) throws IOException {
        Map<File, Long> filesMap = type.getMalformedFiles();
        //Get an immutable set of files, for iterating over safely while potentially modifying
        // the set in loadIncludedFile
        File[] files = filesMap.keySet().toArray(new File[0]);
        for (File file : files) {
            Long lastKnownTimestamp = filesMap.get(file);
            if(file.lastModified() > lastKnownTimestamp) {
                //Try loading it again; it's been modified since we noted it was borked
                this.loadIncludedFile(type, file);
            }
        }
    }

