    public static ApplicationStatus buildApplicationStatus(final OnmsApplication onmsApplication, final Collection<OnmsOutage> onmsOutages, final long start, final long end) {
        final Map<OnmsMonitoringLocation, List<DowntimeInterval>> m = new HashMap<>();

        for (final OnmsMonitoringLocation onmsMonitoringLocation : onmsApplication.getPerspectiveLocations()) {
            m.put(onmsMonitoringLocation, new ArrayList<>());
        }

        for(final OnmsOutage onmsOutage : onmsOutages) {
            m.get(onmsOutage.getPerspective()).add(new DowntimeInterval(onmsOutage, start, end));
        }

        final ApplicationStatus applicationStatus = new ApplicationStatus();
        applicationStatus.setStart(start);
        applicationStatus.setEnd(end);
        applicationStatus.setApplicationId(onmsApplication.getId());
        applicationStatus.setOverallStatus(100.0 * calculateApplicationPercentageUptime(
                mergeDowntimeIntervals(
                        m.values().stream()
                                .flatMap(e -> e.stream())
                                .collect(Collectors.toList())
                ), start, end)
        );

        for (final OnmsMonitoringLocation onmsMonitoringLocation : onmsApplication.getPerspectiveLocations()) {
            final Location location = new Location();
            location.setName(onmsMonitoringLocation.getLocationName());

            final List<DowntimeInterval> mergedDowntimeIntervals = mergeDowntimeIntervals(m.get(onmsMonitoringLocation));

            location.setAggregatedStatus(100.0 * calculateApplicationPercentageUptime(mergedDowntimeIntervals, start, end));
            applicationStatus.getLocations().add(location);
        }
        return applicationStatus;
    }

