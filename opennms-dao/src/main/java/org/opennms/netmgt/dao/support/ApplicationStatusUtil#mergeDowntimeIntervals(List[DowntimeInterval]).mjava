    private static List<DowntimeInterval> mergeDowntimeIntervals(final List<DowntimeInterval> intervals) {
        final List<DowntimeInterval> resultList = new ArrayList<>();

        Collections.sort(intervals, (DowntimeInterval donwtimeInterval1, DowntimeInterval donwtimeInterval2) -> {
            return Long.signum(donwtimeInterval1.start - donwtimeInterval2.start) != 0 ? Long.signum(donwtimeInterval1.start - donwtimeInterval2.start) : Long.signum(donwtimeInterval1.end - donwtimeInterval2.end);
        });

        for (int i = 0; i < intervals.size(); ++i) {
            final DowntimeInterval mergedInterval = intervals.get(i);

            ++i;
            while (i < intervals.size() && intervalsOverlap(mergedInterval, intervals.get(i))) {
                mergedInterval.start = Math.min(mergedInterval.start, intervals.get(i).start);
                mergedInterval.end = Math.max(mergedInterval.end, intervals.get(i).end);
                ++i;
            }
            --i;

            resultList.add(mergedInterval);
        }

        return resultList;
    }

