    /**
     * Returns a list of resources for a node in a foreign source.
     *
     * XXX It does not currently fully check that an IP address that is found to have
     * distributed response time data is in the database on the proper node so it can have false positives.
     *
     * @return a {@link java.util.List} object.
     */
    @Override
    public List<OnmsResource> findNodeSourceResources() {
        List<OnmsResource> resources = new LinkedList<OnmsResource>();

        Set<String> nodeSources = findNodeSourceDirectories();
        Set<String> responseTimeInterfaces = findChildrenMatchingFilter(new File(getRrdDirectory(), RESPONSE_DIRECTORY), RrdFileConstants.INTERFACE_DIRECTORY_FILTER);
        Set<String> distributedResponseTimeInterfaces = findChildrenChildrenMatchingFilter(new File(new File(getRrdDirectory(), RESPONSE_DIRECTORY), "distributed"), RrdFileConstants.INTERFACE_DIRECTORY_FILTER);

        List<OnmsNode> nodes = m_nodeDao.findAll();
        IntSet nodesFound = new IntSet();
        for (OnmsNode node : nodes) {
            if (nodesFound.contains(node.getId())) {
                continue;
            }

            boolean found = false;
            if (node.getForeignSource() != null && node.getForeignId() != null) {
                if (nodeSources.contains(node.getForeignSource() + ":" + node.getForeignId())) {
                    found = true;
                } else if (responseTimeInterfaces.size() > 0 || distributedResponseTimeInterfaces.size() > 0) {
                    for (final OnmsIpInterface ip : node.getIpInterfaces()) {
                        final String addr = InetAddressUtils.str(ip.getIpAddress());
                                           if (responseTimeInterfaces.contains(addr) || distributedResponseTimeInterfaces.contains(addr)) {
                            found = true;
                            break;
                        }
                    }
                }
            }

            if (found) {
                resources.add(m_nodeSourceResourceType.createChildResource(node.getForeignSource() + ":" + node.getForeignId()));
                nodesFound.add(node.getId());
                LOG.debug("findNodeSourceResources: adding resource for {}:{}", node.getForeignSource(), node.getForeignId());
            }
        }

        return resources;
    }

