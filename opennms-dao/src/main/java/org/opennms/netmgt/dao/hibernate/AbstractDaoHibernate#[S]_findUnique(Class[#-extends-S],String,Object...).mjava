    /**
     * <p>findUnique</p>
     *
     * @param type a {@link java.lang.Class} object.
     * @param queryString a {@link java.lang.String} object.
     * @param args a {@link java.lang.Object} object.
     * @param <S> a S object.
     * @return a S object.
     */
    protected <S> S findUnique(final Class <? extends S> type, final String queryString, final Object... args) {
    	final HibernateCallback<S> callback = new HibernateCallback<S>() {
            @Override
            public S doInHibernate(final Session session) throws HibernateException, SQLException {
            	final Query query = session.createQuery(queryString);
                for (int i = 0; i < args.length; i++) {
                    query.setParameter(i, args[i]);
                }
                final Object result = query.uniqueResult();
                return result == null ? null : type.cast(result);
            }

        };
//      logger.debug(String.format("findUnique(%s, %s, %s) = %s", type, queryString, Arrays.toString(args), result));
//      Assert.isTrue(result == null || type.isInstance(result), "Expected "+result+" to an instance of "+type+" but is "+(result == null ? null : result.getClass()));
        return getHibernateTemplate().execute(callback);
    }

