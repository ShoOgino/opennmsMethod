    /** {@inheritDoc} */
    @Override
    public OnmsResource getChildByName(final OnmsResource parent, final String name) {
        if (DomainResourceType.isDomain(parent)) {
            // Load all of the resources and search when dealing with domains.
            // This is not efficient, but resources of this type should be sparse.
            for (final OnmsResource resource : getResourcesForParent(parent)) {
                if (resource.getName().equals(name)) {
                    return resource;
                }
            }
            throw new ObjectRetrievalFailureException(OnmsResource.class, "No child with name '" + name + "' found on '" + parent + "'");
        }

        // Grab the node entity
        final OnmsNode node = ResourceTypeUtils.getNodeFromResource(parent);

        // Verify that the requested resource exists
        final ResourcePath resourcePath = new ResourcePath(parent.getPath(), name);
        if (!m_resourceStorageDao.exists(resourcePath, 0)) {
            throw new ObjectRetrievalFailureException(OnmsResource.class, "No resource with name '" + name + "' found.");
        }

        // Leverage the existing function for retrieving the resource list
        final List<OnmsResource> resources = getNodeResources(parent.getPath(), Sets.newHashSet(name), node);
        if (resources.size() != 1) {
            throw new ObjectRetrievalFailureException(OnmsResource.class, "No resource with name '" + name + "' found.");
        }

        final OnmsResource resource = resources.get(0);
        resource.setParent(parent);
        return resource;
    }

