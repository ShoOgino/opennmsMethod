	@Override
	public List<MonitoredServiceStatusEntity> getAlarmStatus(final List<OnmsApplication> applications) {
		Objects.requireNonNull(applications);
		final List<OnmsMonitoredService> services = applications.stream().flatMap(application -> application.getMonitoredServices().stream()).collect(Collectors.toList());
		final String sql = "select alarm.node.id, alarm.ipAddr, alarm.serviceType.id, min(alarm.lastEventTime), max(alarm.severity), (count(*) - count(alarm.alarmAckTime)) " +
				"from OnmsAlarm alarm " +
				"where alarm.severity != " + OnmsSeverity.CLEARED.getId() + " and alarm.reductionKey in :keys " +
				"group by alarm.node.id, alarm.ipAddr, alarm.serviceType.id";

		// Build query based on reduction keys
		final Set<String> reductionKeys = services.stream().flatMap(service -> ReductionKeyHelper.getNodeLostServiceFromPerspectiveReductionKeys(service).stream()).collect(Collectors.toSet());

		// Avoid querying the database if unnecessary
		if (services.isEmpty() || reductionKeys.isEmpty()) {
			return Lists.newArrayList();
		}

		// Convert to object
		final List<Object[][]> perspectiveAlarmsForService = (List<Object[][]>) getHibernateTemplate().findByNamedParam(sql, new String[]{"keys"}, new Object[]{reductionKeys.toArray()});
		final List<MonitoredServiceStatusEntity> entityList = new ArrayList<>();
		for (Object[] eachRow : perspectiveAlarmsForService) {
			MonitoredServiceStatusEntity entity = new MonitoredServiceStatusEntity((Integer)eachRow[0],
					(InetAddress)eachRow[1], (Integer)eachRow[2],(Date) eachRow[3], (OnmsSeverity) eachRow[4], (Long) eachRow[5]);
			entityList.add(entity);
		}
		return entityList;
	}

