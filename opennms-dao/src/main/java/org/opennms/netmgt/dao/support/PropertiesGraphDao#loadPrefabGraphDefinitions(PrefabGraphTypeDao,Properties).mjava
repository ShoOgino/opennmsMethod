    /**
     * @param type
     *            - a PrefabGraphType in which graphs
     *            found in 'properties' will be stored
     * @param properties
     *            - a properties object, usually loaded from a File or
     *            InputStream, with graph definitions in it
     * @return A list of the graphs found.  THIS LIST MAY CONTAIN NULL ENTRIES, one for each
     * graph in a multi-graph file that failed to load (e.g. missing properties).  Other than
     * logging an error, this is the only way this method indicates a problem with just one graph
     * The only cause for a real exception is if there's neither a "reports" nor a "report.id" 
     * property, which cannot be recovered from   
     */
    private List<PrefabGraph> loadPrefabGraphDefinitions(
            PrefabGraphTypeDao type, Properties properties) {
        Assert.notNull(properties, "properties argument cannot be null");

        List<PrefabGraph> result = new ArrayList<PrefabGraph>();

        String listString = properties.getProperty(DEFAULT_GRAPH_LIST_KEY); // Optional

        String[] list;

        if (listString != null) {
            list = BundleLists.parseBundleList(listString);
        } else {
            // A report-per-file properties file; just use the report.id
            // At this stage, if there was no "reports", then there *must* be
            // a report.id, otherwise we're pooched
            list = new String[1];
            try {
                list[0] = getProperty(properties, "report.id");
            } catch (DataAccessResourceFailureException e) {
                // Special case; if this exception is thrown, then report.id
                // was missing
                // But, we need to be more clear in the report (no report.id
                // *or* "reports" property).  However, we shouldn't throw
                // an exception, because that would break loading of all 
                // graphs if just one file was broken
                throw new DataAccessResourceFailureException("Properties must "
                                    + "contain a 'report.id' property "
                                    + "or a 'reports' property");
            }
        }

        for (String name : list) {
            try {
                PrefabGraph graph = makePrefabGraph(name, properties,
                                                    type.getNextOrdering());
                result.add(graph);
            } catch (DataAccessResourceFailureException e) {
                log().error("Failed to load report '" + name + "' because:",
                            e);
                result.add(null); //Add a null, indicating a broken graph
            }
        }
        return result;
    }

