    public boolean isRuleMatching(String rule) throws FilterParseException {
        boolean matches = false;
        String sqlString;

        if (log().isDebugEnabled()) {
            log().debug("Filter: rule: " + rule);
        }

        // get the database connection
        Connection conn = null;
        try {
            conn = getDataSource().getConnection();

            // parse the rule and get the sql select statement
            Start parseTree = parseRule(rule);
            SQLTranslation translation = new SQLTranslation(parseTree, getDatabaseSchemaConfigFactory());
            translation.setLimitCount(1);
            sqlString = translation.getStatement();
            if (log().isDebugEnabled()) {
                log().debug("Filter: SQL statement: \n" + sqlString);
            }

            // execute query and return the list of ip addresses
            Statement stmt = conn.createStatement();
            ResultSet rset = stmt.executeQuery(sqlString);

            // we only want to check if zero or one rows were fetched, so just
            // return the output from rset.next()
            matches = rset.next();

            try {
                rset.close();
            } catch (SQLException e) {
            }

            try {
                stmt.close();
            } catch (SQLException e) {
            }

            if (log().isDebugEnabled()) {
                log().debug("isRuleMatching: rule \"" + rule + "\" " + (matches ? "matches" : "does not match") + " an entry in the database");
            }
        } catch (FilterParseException e) {
            log().info("Filter Parse Exception occurred testing rule \"" + rule + "\" for matching results: " + e, e);
            throw new FilterParseException("Filter Parse Exception occurred testing rule \"" + rule + "\" for matching results: " + e);
        } catch (SQLException e) {
            log().warn("SQL Exception occurred testing rule \""+ rule + "\" for matching results: " + e, e);
            throw new FilterParseException("SQL Exception occurred testing rule \""+ rule + "\" for matching results: " + e);
        } catch (Exception e) {
            log().fatal("Exception getting database connection: " + e, e);
            throw new UndeclaredThrowableException(e);
        } finally {
            if (conn != null) {
                try {
                    conn.close();
                } catch (SQLException e) {
                }
            }
        }
    }

