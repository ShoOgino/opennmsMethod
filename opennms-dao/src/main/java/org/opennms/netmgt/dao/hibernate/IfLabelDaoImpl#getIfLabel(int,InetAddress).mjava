    /**
     * <p>getIfLabel</p>
     *
     * @param nodeId a int.
     * @param ipAddr a {@link java.lang.String} object.
     * @return a {@link java.lang.String} object.
     */
    @Override
    public String getIfLabel(final int nodeId, final InetAddress ipAddr) {
        if (ipAddr == null) {
            throw new IllegalArgumentException("Cannot take null parameters.");
        }

        CriteriaBuilder builder = new CriteriaBuilder(OnmsSnmpInterface.class);
        builder.alias("node", "node", JoinType.LEFT_JOIN);
        builder.alias("ipInterfaces", "ipInterfaces", JoinType.LEFT_JOIN);
        builder.eq("node.id", nodeId);
        builder.ne("ipInterfaces.isManaged", "D");
        builder.eq("ipInterfaces.ipAddress", ipAddr);

        List<OnmsSnmpInterface> ifaces = m_snmpInterfaceDao.findMatching(builder.toCriteria());

        if (ifaces.size() > 0) {
            if (ifaces.size() > 1) {
                LOG.warn("Found multiple OnmsSnmpInterface objects for: {}, {}, using the first entry", nodeId, str(ipAddr));
            }
            OnmsSnmpInterface iface = ifaces.iterator().next();

            String name = iface.getIfName();
            String descr = iface.getIfDescr();
            String physAddr = iface.getPhysAddr();

            if (name != null || descr != null) {
                return getIfLabel(name, descr, physAddr);
            } else {
                LOG.warn("Interface (nodeId/ipAddr={}/{}) has no ifName and no ifDescr...setting to label to '{}'.", nodeId, str(ipAddr), IfLabel.NO_IFLABEL);
                return IfLabel.NO_IFLABEL;
            }
        } else {
            LOG.warn("No OnmsSnmpInterface found for: {}, {}; setting to label to '{}'", nodeId, str(ipAddr), IfLabel.NO_IFLABEL);
            return IfLabel.NO_IFLABEL;
        }
    }

