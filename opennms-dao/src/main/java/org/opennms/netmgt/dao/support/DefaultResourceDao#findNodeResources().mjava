    /**
     * Returns a list of resources for a node.
     *
     * XXX It does not currently fully check that an IP address that is found to have
     * distributed response time data is in the database on the proper node so it can have false positives.
     *
     * @return a {@link java.util.List} object.
     */
    @Override
    public List<OnmsResource> findNodeResources() {
        List<OnmsResource> resources = new LinkedList<OnmsResource>();

        Set<Integer> snmpNodes = findSnmpNodeDirectories(); 
        Set<String> responseTimeInterfaces = findChildrenMatchingFilter(new File(getRrdDirectory(), ResourceTypeUtils.RESPONSE_DIRECTORY), RrdFileConstants.INTERFACE_DIRECTORY_FILTER);
        Set<String> distributedResponseTimeInterfaces = findChildrenChildrenMatchingFilter(new File(new File(getRrdDirectory(), ResourceTypeUtils.RESPONSE_DIRECTORY), "distributed"), RrdFileConstants.INTERFACE_DIRECTORY_FILTER);

        // Only returns non-deleted nodes to fix NMS-2977
        // http://issues.opennms.org/browse/NMS-2977
        Collection<Integer> nodeIds = m_nodeDao.getNodeIds();
        Set<Integer> nodesFound = new TreeSet<Integer>();
        for (Integer nodeId : nodeIds) {
            if (nodesFound.contains(nodeId.intValue())) {
                continue;
            }

            boolean found = false;
            OnmsNode node = m_nodeDao.get(nodeId);
            if (snmpNodes.contains(nodeId)) {
                found = true;
            } else if ((responseTimeInterfaces.size() > 0 || distributedResponseTimeInterfaces.size() > 0) && (node.getForeignSource() == null || node.getForeignId() == null)) {
                for (final OnmsIpInterface ip : m_nodeDao.get(nodeId).getIpInterfaces()) {
                    final String addr = InetAddressUtils.str(ip.getIpAddress());
					if (responseTimeInterfaces.contains(addr) || distributedResponseTimeInterfaces.contains(addr)) {
                        found = true;
                        break;
                    }
                }
            }

            if (found) {
                resources.add(m_nodeResourceType.createChildResource(node));
                nodesFound.add(nodeId);
            }
        }

        return resources;
    }

