    /**
     * <p>createChildResource</p>
     *
     * @param nodeSource a {@link java.lang.String} object.
     * @return a {@link org.opennms.netmgt.model.OnmsResource} object.
     */
    public OnmsResource createChildResource(final String nodeSource) {
        if (!nodeSource.contains(":")) {
            LOG.warn("'%s' is not in the format foreignSource:foreignId.", nodeSource);
            throw new IllegalArgumentException("Node definition '" + nodeSource + "' is invalid, it should be in the format: 'foreignSource:foreignId'.");
        }

        final String[] ident = nodeSource.split(":", 2);
        if (!(ident.length == 2)) {
            LOG.warn("'%s' is not in the format foreignSource:foreignId.", nodeSource);
            throw new IllegalArgumentException("Node definition '" + nodeSource + "' is invalid, it should be in the format: 'foreignSource:foreignId'.");
        }

        final OnmsNode node = m_nodeDao.findByForeignId(ident[0], ident[1]);

        if (node == null) {
            LOG.debug("Failed to locate node by foreign ID '%s:%s'", ident[0], ident[1]);
            return null;
        }

        final String label = ident[0] + ":" + node.getLabel();
        NodeSourceChildResourceLoader loader = new NodeSourceChildResourceLoader(nodeSource, node.getId());
        OnmsResource resource = new OnmsResource(nodeSource, label, this, s_emptyAttributeSet, new LazyList<OnmsResource>(loader));
        loader.setParent(resource);

        return resource;
    }

