    /** {@inheritDoc} */
    public Map<String, Set<String>> getIPServiceMap(final String rule) throws FilterParseException {
        LogUtils.debugf(this, "Filter.getIPServiceMap(%s)", rule);

        return m_transactionTemplate.execute(new TransactionCallback<Map<String, Set<String>>>() {

			@Override
			public Map<String, Set<String>> doInTransaction(final TransactionStatus status) {
		    	final Map<String, Set<String>> ipServices = new TreeMap<String, Set<String>>();

		        // get the database connection
		        Connection conn = null;
		        final DBUtils d = new DBUtils(getClass());
		        try {
		            conn = DataSourceUtils.getConnection(getDataSource());

		            // parse the rule and get the sql select statement
		            final String sqlString = getIPServiceMappingStatement(rule);
		            LogUtils.debugf(this, "Filter.getIPServiceMap(%s): SQL statement: %s", rule, sqlString);

		            // execute query
		            final Statement stmt = conn.createStatement();
		            d.watch(stmt);
		            final ResultSet rset = stmt.executeQuery(sqlString);
		            d.watch(rset);

		            // fill up the array list if the result set has values
		            if (rset != null) {
		                // Iterate through the result and build the array list
		                while (rset.next()) {
		                	final String ipaddr = rset.getString(1);

		                    if (!ipServices.containsKey(ipaddr)) {
		                        ipServices.put(ipaddr, new TreeSet<String>());
		                    }

		                    ipServices.get(ipaddr).add(rset.getString(2));
		                }
		            }

		        } catch (final FilterParseException e) {
		        	LogUtils.warnf(this, e, "Filter Parse Exception occurred getting IP Service List.");
		            throw new FilterParseException("Filter Parse Exception occurred getting IP Service List: " + e.getLocalizedMessage(), e);
		        } catch (final SQLException e) {
		            LogUtils.warnf(this, e, "SQL Exception occurred getting IP Service List.");
		            throw new FilterParseException("SQL Exception occurred getting IP Service List: " + e.getLocalizedMessage(), e);
		        } catch (final Throwable e) {
		        	LogUtils.errorf(this, e, "Exception getting database connection.");
		            throw new UndeclaredThrowableException(e);
		        } finally {
		            d.cleanUp();
		        	if (conn != null) {
		        		DataSourceUtils.releaseConnection(conn, getDataSource());
		        	}
		        }

		        return ipServices;
			}
		});
    }

