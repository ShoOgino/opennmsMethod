    @Override
    public synchronized void loadTopology(List<BridgeElement> bridgeelements, 
            List<BridgeMacLink> links,
            List<BridgeBridgeLink> bridgelinks,
            List<BridgeStpLink> stplinks) {
        
        //clear all the topology for all domains
        m_domains.clear();
        
        List<SharedSegment> segments = new ArrayList<SharedSegment>();
        for (BridgeMacLink link: links) {
            for (SharedSegment segment: segments) {
                if (segment.containsMac(link.getMacAddress())) {
                    segment.add(link);
                    break;
                }
                if (segment.containsPort(link.getNode().getId(), link.getBridgePort())) {
                    segment.add(link);
                    break;
                }
            }
            SharedSegment segment = new SharedSegment();
            segment.add(link);
            segments.add(segment);
        }

        for (BridgeBridgeLink link: bridgelinks) {
            for (SharedSegment segment: segments) {
                if (segment.containsPort(link.getNode().getId(), link.getBridgePort())) {
                    segment.add(link);
                    break;
                }
                if (segment.containsPort(link.getDesignatedNode().getId(), link.getDesignatedPort())) {
                    segment.add(link);
                    break;
                }
            }
            SharedSegment segment = new SharedSegment();
            segment.add(link);
            segments.add(segment);
        }
        
        // Assign the segment to domain
        for (SharedSegment segment: segments) {
            BroadcastDomain domain = null;
            for (BroadcastDomain curdomain: m_domains) {
                if (curdomain.containsAtleastOne(segment.getBridgeIdsOnSegment())) {
                    domain = curdomain;
                    break;
                }
            }
            if (domain == null) {
                domain = new BroadcastDomain(); 
                m_domains.add(domain);
            }
            domain.loadTopologyEntry(segment);
        }
       
        for (BridgeElement element: bridgeelements) {
            for (BroadcastDomain domain: m_domains) {
                if (domain.containBridgeId(element.getNode().getId())) {
                    domain.addBridgeElement(element);
                    break;
                }
            }
        }
        
        for (BridgeStpLink link: stplinks) {
            for (BroadcastDomain domain: m_domains) {
                if (domain.containBridgeId(link.getNode().getId())) {
                    domain.addSTPEntry(link);
                    break;
                }
            }
        }
    }

