    /**
     * Read all XML files from datacollection directory and parse them to create a list of DatacollectionGroup objects.
     */
    private void parseExternalResources() {
        // Ensure that this is called only once.
        if (externalGroupsMap != null && externalGroupsMap.size() > 0) {
            log().info("parseExternalResources: external data collection groups are already parsed");
            return;
        }
        
        // Check configuration files repository
        File folder = new File(configDirectory);
        if (!folder.exists() || !folder.isDirectory()) {
            log().info("parseExternalResources: directory " + folder + " does not exist or is not a folder.");
            return;
        }
        
        // Get external configuration files
        File[] listOfFiles = folder.listFiles(new FilenameFilter() {
            public boolean accept(File file, String name) {
                return name.endsWith(".xml");
            }
        });
        
        // Parse configuration files (populate external groups map)
        for (File file : listOfFiles) {
            InputStream in = null;
            try {
                in = new FileInputStream(file);
            } catch (IOException e) {
                throwException("Could not get an input stream for resource '" + file + "'; nested exception: " + e.getMessage(), e);
            }
            try {
                log().debug("parseExternalResources: parsing " + file);
                DatacollectionGroup group = CastorUtils.unmarshalWithTranslatedExceptions(DatacollectionGroup.class, in);
                group.validate();
                externalGroupsMap.put(group.getName(), group);
            } catch (Throwable e) {
                throwException("Can't parse XML file " + file + "; nested exception: " + e.getMessage(), e);
            } finally {
                IOUtils.closeQuietly(in);
            }
        }
    }

