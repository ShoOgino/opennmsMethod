    private void doResetDatabase() {
        LOG.debug("==== DatabasePopulator Reset ====");
        for (final OnmsOutage outage : m_outageDao.findAll()) {
            m_outageDao.delete(outage);
        }
        for (final OnmsUserNotification not : m_userNotificationDao.findAll()) {
            m_userNotificationDao.delete(not);
        }
        for (final OnmsNotification not : m_notificationDao.findAll()) {
            m_notificationDao.delete(not);
        }
        for (final AlarmAssociation ass : m_alarmAssociationDao.findAll()) {
            ass.getRelatedAlarm().getAssociatedAlarms().clear();
            ass.getSituationAlarm().getAssociatedAlarms().clear();
            m_alarmAssociationDao.delete(ass);
        }
        for (final OnmsAlarm alarm : m_alarmDao.findAll()) {
            m_alarmDao.delete(alarm);
        }
        for (final OnmsEvent event : m_eventDao.findAll()) {
            m_eventDao.delete(event);
        }

        for (final OnmsSnmpInterface snmpIface : m_snmpInterfaceDao.findAll()) {
            for (OnmsIpInterface eachIf : snmpIface.getIpInterfaces()) {
                eachIf.setSnmpInterface(null);
                snmpIface.getNode().getIpInterfaces().remove(eachIf);
            }
            snmpIface.getNode().getSnmpInterfaces().remove(snmpIface);
            m_snmpInterfaceDao.delete(snmpIface);
        }
        for (final OnmsIpInterface iface : m_ipInterfaceDao.findAll()) {
            iface.setSnmpInterface(null);
            iface.getNode().getIpInterfaces().remove(iface);
            m_ipInterfaceDao.delete(iface);
        }
        for (final OnmsNode node : m_nodeDao.findAll()) {
            m_nodeDao.delete(node);
        }
        for (final OnmsServiceType service : m_serviceTypeDao.findAll()) {
            m_serviceTypeDao.delete(service);
        }
        for (final OnmsMonitoringLocation location : m_monitoringLocationDao.findAll()) {
            // Don't delete the default localhost monitoring location
            if (!MonitoringLocationDao.DEFAULT_MONITORING_LOCATION_ID.equals(location.getLocationName())) {
                m_monitoringLocationDao.delete(location);
            }
        }
        for (final OnmsCategory category : m_categoryDao.findAll()) {
            m_categoryDao.delete(category);
        }
        
        LOG.debug("= DatabasePopulatorExtension Reset Starting =");
    	for (Extension eachExtension : extensions) {
    			DaoSupport daoSupport = eachExtension.getDaoSupport();
    			OnmsDao<?,?> dao = daoSupport != null && daoSupport.getDaoClass() != null ? lookupDao(daoSupport.getDaoClass()) : null;

    			eachExtension.onShutdown(this, dao);
    			if (dao != null) {
    				dao.flush();
    			}
    	}
    	LOG.debug("= DatabasePopulatorExtension Reset Finished =");
        
        m_outageDao.flush();
        m_userNotificationDao.flush();
        m_notificationDao.flush();
        m_alarmAssociationDao.flush();
        m_alarmDao.flush();
        m_eventDao.flush();
        m_snmpInterfaceDao.flush();
        m_ipInterfaceDao.flush();
        m_nodeDao.flush();
        m_serviceTypeDao.flush();
        m_monitoringLocationDao.flush();
        
        LOG.debug("==== DatabasePopulator Reset Finished ====");
    }

