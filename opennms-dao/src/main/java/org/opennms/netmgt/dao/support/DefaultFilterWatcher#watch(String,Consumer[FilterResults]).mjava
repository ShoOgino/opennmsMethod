    @Override
    public Closeable watch(String filterRule, Consumer<FilterResults> callback) {
        String effectiveFilterRule;
        if (StringUtils.isEmpty(filterRule)) {
            effectiveFilterRule = MATCH_ANY_RULE;
        } else {
            effectiveFilterRule = filterRule.trim();
        }

        final FilterSession session;
        synchronized (sessionByRule) {
            // Create a new session if necessary
            session = sessionByRule.computeIfAbsent(effectiveFilterRule, FilterSession::new);
            // Register the callback with the session
            session.addCallback(callback);
        }

        // Remove the callback and close any sessions we no longer need
        return () -> {
            synchronized (sessionByRule) {
                session.removeCallback(callback);
                garbageCollectSessions();
            }
        };
    }

