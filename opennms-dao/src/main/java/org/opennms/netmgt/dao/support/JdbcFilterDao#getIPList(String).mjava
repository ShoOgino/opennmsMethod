    /**
     * {@inheritDoc}
     *
     * This method returns a list of all ip addresses that match the rule that
     * is passed in.
     * @exception FilterParseException
     *                if a rule is syntactically incorrect or failed in
     *                executing the SQL statement
     */
    public List<String> getIPList(final String rule) throws FilterParseException {
    	final List<String> resultList = new ArrayList<String>();
        String sqlString;

        LogUtils.debugf(this, "Filter: rule: %s", rule);

        // get the database connection
        Connection conn = null;
        final DBUtils d = new DBUtils(getClass());
        try {
            conn = getDataSource().getConnection();
            d.watch(conn);

            // parse the rule and get the sql select statement
            sqlString = getSQLStatement(rule);
            LogUtils.debugf(this, "Filter: SQL statement: %s", sqlString);

            // execute query and return the list of ip addresses
            final Statement stmt = conn.createStatement();
            d.watch(stmt);
            final ResultSet rset = stmt.executeQuery(sqlString);
            d.watch(rset);

            // fill up the array list if the result set has values
            if (rset != null) {
                // Iterate through the result and build the array list
                while (rset.next()) {
                    resultList.add(InetAddressUtils.normalize(rset.getString(1)));
                }
            }

        } catch (final FilterParseException e) {
            LogUtils.warnf(this, e, "Filter Parse Exception occurred getting IP List.");
            throw new FilterParseException("Filter Parse Exception occurred getting IP List: " + e.getLocalizedMessage(), e);
        } catch (final SQLException e) {
            LogUtils.warnf(this, e, "SQL Exception occurred getting IP List.");
            throw new FilterParseException("SQL Exception occurred getting IP List: " + e.getLocalizedMessage(), e);
        } catch (final Throwable e) {
            LogUtils.errorf(this, e, "Exception getting database connection.");
            throw new UndeclaredThrowableException(e);
        } finally {
            d.cleanUp();
        }

        return resultList;
    }

