    @Override
    public List<CdpTopologyLink> findLinksForTopology() {
        return getHibernateTemplate().execute(new HibernateCallback<List<CdpTopologyLink>>() {
            @Override
            @SuppressWarnings("unchecked")
            public List<CdpTopologyLink> doInHibernate(Session session) throws HibernateException, SQLException {
               Map<String, CdpTopologyLink> mapToLink = new HashMap<String,CdpTopologyLink>();
               List<CdpTopologyLink> alllinks = convertObjectToTopologyLink(session.createSQLQuery(SQL_CDP_LINK_BASE_QUERY+";").list());
               for (CdpTopologyLink link: alllinks){
                    String sourcekey=link.getSrcNodeId()+link.getSrcIfName();
                    String targetkey=link.getTargetNodeId()+link.getTargetIfName();
                    if (mapToLink.containsKey(sourcekey)) {
                        if (link.getLastPollTime().after(mapToLink.get(sourcekey).getLastPollTime())) {
                            CdpTopologyLink oldlink = mapToLink.get(sourcekey);
                            String oldsourcekey=oldlink.getSrcNodeId()+oldlink.getSrcIfName();
                            String oldtargetkey=oldlink.getTargetNodeId()+oldlink.getTargetIfName();
                            mapToLink.remove(oldsourcekey);
                            mapToLink.remove(oldtargetkey);
                            mapToLink.put(sourcekey, link);
                            mapToLink.put(targetkey, link);
                            continue;
                        }
                    } 
                    if (mapToLink.containsKey(targetkey)) {
                        if (link.getLastPollTime().after(mapToLink.get(targetkey).getLastPollTime())) {
                            CdpTopologyLink oldlink = mapToLink.get(targetkey);
                            String oldsourcekey=oldlink.getSrcNodeId()+oldlink.getSrcIfName();
                            String oldtargetkey=oldlink.getTargetNodeId()+oldlink.getTargetIfName();
                            mapToLink.remove(oldsourcekey);
                            mapToLink.remove(oldtargetkey);
                            mapToLink.put(sourcekey, link);
                            mapToLink.put(targetkey, link);
                            continue;
                        }
                    }
                    mapToLink.put(sourcekey, link);
                    mapToLink.put(targetkey, link);
               }
               List<Integer> ids = new ArrayList<Integer>();
               List<CdpTopologyLink> links = new ArrayList<CdpTopologyLink>();
               for (CdpTopologyLink link: mapToLink.values()) {
                    if (ids.contains(link.getSourceId()))
                        continue;
                    links.add(link);
                    ids.add(link.getSourceId());
               }
               return links;
            }
        });
    }

