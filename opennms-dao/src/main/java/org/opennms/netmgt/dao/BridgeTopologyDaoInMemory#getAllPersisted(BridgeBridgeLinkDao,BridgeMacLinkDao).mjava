    @Override
    public Set<BroadcastDomain> getAllPersisted(BridgeBridgeLinkDao bridgeBridgeLinkDao,BridgeMacLinkDao bridgeMacLinkDao) {
        List<SharedSegment> segments = new ArrayList<SharedSegment>();

BRIDGELINK:        for (BridgeBridgeLink link : bridgeBridgeLinkDao.findAll()) {
            for (SharedSegment segment : segments) {
                if (segment.containsPort(link.getNode().getId(),
                                         link.getBridgePort())
                     || segment.containsPort(link.getDesignatedNode().getId(),
                                             link.getDesignatedPort())) {
                    segment.add(link);
                    continue BRIDGELINK;
                }
            }
            SharedSegment segment = new SharedSegment();
            segment.add(link);
            segment.setDesignatedBridge(link.getDesignatedNode().getId());
            segments.add(segment);
        }
        
        Map<String,List<BridgeMacLink>> mactobridgeportlist = new HashMap<String, List<BridgeMacLink>>();
        for (BridgeMacLink link : bridgeMacLinkDao.findAll()) {
            link.setBridgeDot1qTpFdbStatus(BridgeDot1qTpFdbStatus.DOT1D_TP_FDB_STATUS_LEARNED);
            if (!mactobridgeportlist.containsKey(link.getMacAddress()))
                mactobridgeportlist.put(link.getMacAddress(), new ArrayList<BridgeMacLink>());
            mactobridgeportlist.get(link.getMacAddress()).add(link);
        }

        List<BridgeMacLink> forwarders = new ArrayList<BridgeMacLink>();
MAC:        for (String macaddress: mactobridgeportlist.keySet()) {
            List<BridgeMacLink> maclinks = mactobridgeportlist.get(macaddress); 
            SharedSegment segmentfound = null;
MACLINK:    for (BridgeMacLink link : maclinks) {
                // check if I can found a segment
                for (SharedSegment segment : segments) {
                    if (segment.containsPort(link.getNode().getId(),
                                                    link.getBridgePort())) {
                        segmentfound = segment;
                        break MACLINK;
                    }
                }
            }
            if (segmentfound != null) {
                boolean forwardermac = false;
                for (BridgePort bp: segmentfound.getBridgePortsOnSegment()) {
                    boolean found = false;
                    for (BridgeMacLink link: maclinks) {
                        if (link.getNode().getId().intValue() == bp.getNode().getId().intValue() &&
                                link.getBridgePort().intValue() == bp.getBridgePort().intValue()) {
                            found = true;
                            break;
                        }
                    }
                    if (!found) {
                        forwardermac = true;
                        break;
                    }
                }
                             if (forwardermac) {
                    forwarders.addAll(maclinks);
                    continue MAC;
                }
            } else {
                segmentfound = new SharedSegment();
                segments.add(segmentfound);
            }
            for (BridgeMacLink link: maclinks) {
                segmentfound.add(link);
                if (!segmentfound.hasDesignatedBridgeport())
                    segmentfound.setDesignatedBridge(link.getNode().getId());
            }
        }
                
        Set<Set<Integer>> nodelinked = new HashSet<Set<Integer>>();
SHARED:        for (SharedSegment segment: segments) {
            Set<Integer> nodesOnSegment = new HashSet<Integer>(segment.getBridgeIdsOnSegment());
            for (Set<Integer> nodes: nodelinked) {
                for (Integer nodeid: nodesOnSegment) {
                    if (nodes.contains(nodeid)) 
                        continue SHARED;
                }
            }
            nodelinked.add(getNodesOnDomainSet(segments, segment, new HashSet<SharedSegment>(),nodesOnSegment));
        }
        
        Set<BroadcastDomain> domains = new HashSet<BroadcastDomain>();
        for (Set<Integer> nodes : nodelinked) {
            BroadcastDomain domain = new BroadcastDomain();
            for (Integer nodeid: nodes)
                domain.addBridge(new Bridge(nodeid));
            domains.add(domain);
        }
        // Assign the segment to domain and add to single nodes
        for (SharedSegment segment : segments) {
            BroadcastDomain domain = null;
            for (BroadcastDomain cdomain: domains) {
                if (cdomain.containsAtleastOne(segment.getBridgeIdsOnSegment())) {
                    domain = cdomain;
                    break;
                }
            }
            if (domain == null) {
                domain = new BroadcastDomain();
                domains.add(domain);
            }
            domain.loadTopologyEntry(segment);
        }
        for (BroadcastDomain domain: domains)
            domain.loadTopologyRoot();
        
        for (BridgeMacLink forwarder : forwarders) {
            for (BroadcastDomain domain: domains) {
                if (domain.containBridgeId(forwarder.getNode().getId())) {
                    domain.addForwarding(forwarder);
                    break;
                }
            }
        }

        return domains;
    }

