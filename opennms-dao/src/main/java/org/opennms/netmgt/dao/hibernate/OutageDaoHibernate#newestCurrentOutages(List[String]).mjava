    /** {@inheritDoc} */
    @Override
    public Collection<CurrentOutageDetails> newestCurrentOutages(final List<String> serviceNames) {
        return getHibernateTemplate().execute(new HibernateCallback<List<CurrentOutageDetails>>() {
            @Override
            @SuppressWarnings("unchecked")
            public List<CurrentOutageDetails> doInHibernate(Session session) throws HibernateException, SQLException {
                final StringBuilder query = new StringBuilder()
                        .append("SELECT DISTINCT\n")
                        .append("        outages.outageId,\n")
                        .append("        outages.ifServiceId AS monitoredServiceId,\n")
                        .append("        service.serviceName AS serviceName,\n")
                        .append("        outages.ifLostService,\n")
                        .append("        node.nodeId,\n")
                        .append("        node.foreignSource,\n")
                        .append("        node.foreignId,\n")
                        .append("        node.location\n")
                        .append("FROM outages\n")
                        .append("        LEFT JOIN ifServices ON outages.ifServiceId = ifServices.id\n")
                        .append("        LEFT JOIN service ON ifServices.serviceId = service.serviceId\n")
                        .append("        LEFT JOIN ipInterface ON ifServices.ipInterfaceId = ipInterface.id\n")
                        .append("        LEFT JOIN node ON ipInterface.nodeId = node.nodeId\n")
                        .append("WHERE\n")
                        .append("        outages.ifRegainedService IS NULL\n");
                if (serviceNames.size() > 0) {
                    query.append("        AND service.serviceName IN ( :serviceNames )\n");
                }
                query.append("ORDER BY outages.outageId\n")
                .append(";\n");

                Query sqlQuery = session.createSQLQuery( query.toString() );
                if (serviceNames.size() > 0) {
                    sqlQuery = sqlQuery.setParameterList("serviceNames", serviceNames);
                }

                return (List<CurrentOutageDetails>) sqlQuery.setResultTransformer(new ResultTransformer() {
                            private static final long serialVersionUID = 1L;

                            @Override
                            public Object transformTuple(Object[] tuple, String[] aliases) {
                                return new CurrentOutageDetails(
                                                         (Integer)tuple[0],
                                                         (Integer)tuple[1],
                                                         (String)tuple[2],
                                                         (Date)tuple[3],
                                                         (Integer)tuple[4],
                                                         (String)tuple[5],
                                                         (String)tuple[6],
                                                         (String)tuple[7]);
                            }

                            @SuppressWarnings("rawtypes")
                            @Override
                            public List transformList(List collection) {
                                return collection;
                            }
                        }).list();
            }
        });
    }

