    /**
     * Creates a new container with an object and a file underlying that
     * object.  The {@link FileReloadCallback#reload(Object, File) reload}
     * on the callback will be called when the file is modified.
     *  
     * @param object object to be stored in this container
     * @param file file underlying the object
     * @param callback {@link FileReloadCallback#reload(Object, File) reload}
     *  will be called when the underlying file object is modified
     * @throws IllegalArgumentException if object, file, or callback are null
     */
    public FileReloadContainer(T object, Resource resource,
                               FileReloadCallback<T> callback) {
        Assert.notNull(object, "argument object cannot be null");
        Assert.notNull(resource, "argument file cannot be null");
        Assert.notNull(callback, "argument callback cannot be null");
        
        m_object = object;
        m_resource = resource;
        m_callback = callback;
        
        try {
            m_file = resource.getFile();
            m_lastModified = m_file.lastModified();
        } catch (IOException e) {
            // Do nothing... we'll fall back to using the InputStream
            log().info("Resource '" + resource + "' does not seem to have an underlying File object; assuming this is not an auto-reloadable file resource");
        }
    }

