    /**
     * Creates a new container with an object and a file underlying that
     * object.  The {@link FileReloadCallback#reload(Object, File) reload}
     * on the callback will be called when the file is modified.
     *  
     * @param object object to be stored in this container
     * @param file file underlying the object
     * @param callback {@link FileReloadCallback#reload(Object, File) reload}
     *  will be called when the underlying file object is modified
     * @throws IllegalArgumentException if object, file, or callback are null
     */
    public FileReloadContainer(T object, File file,
                               FileReloadCallback<T> callback) {
        if (object == null) {
            throw new IllegalArgumentException("object cannot be null");
        }
        
        if (file == null) {
            throw new IllegalArgumentException("file cannot be null");
        }
        
        if (callback == null) {
            throw new IllegalArgumentException("callback cannot be null");
        }
        
        m_object = object;
        m_file = file;
        m_callback = callback;
        
        m_lastModified = m_file.lastModified();
    }

