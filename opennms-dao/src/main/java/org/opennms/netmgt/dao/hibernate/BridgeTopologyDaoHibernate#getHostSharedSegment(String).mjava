    @Override
    public SharedSegment getHostSharedSegment(String mac) {
        
        List<SharedSegment> segments = new ArrayList<SharedSegment>();

        List<BridgeMacLink> links = m_bridgeMacLinkDao.findByMacAddress(mac);
        if (links.size() == 0 ) {
            return SharedSegment.create();
        }
        
        Set<BridgePort> designated = new HashSet<BridgePort>();
        MACLINK: for (BridgeMacLink link: links) {
            if (link.getLinkType() == BridgeMacLinkType.BRIDGE_FORWARDER) {
                continue;
            }
            designated.add(BridgePort.getFromBridgeMacLink(link));
            for (SharedSegment segment : segments) {
                if (segment.containsPort(BridgePort.getFromBridgeMacLink(link))) {
                    segment.getMacsOnSegment().add(link.getMacAddress());
                    continue MACLINK;
                }
            }
            try {
                segments.add(SharedSegment.create(link));
            } catch (BridgeTopologyException e) {
                LOG.error("getHostNodeSharedSegment: cannot create shared segment {}", e.getMessage(),e);
                return SharedSegment.create();
            }
        }

        for (BridgePort port: designated) {
            SharedSegment shared = null;
            for (SharedSegment segment : segments) {
                if (segment.containsPort(port)) {
                    shared = segment;
                    break;
                }
            }
            if (shared == null) {
                LOG.error("getHostNodeSharedSegment: cannot found shared segment for port {}", port.printTopology());
                return SharedSegment.create();
            }
            for (BridgeBridgeLink link : m_bridgeBridgeLinkDao.getByDesignatedNodeIdBridgePort(port.getNodeId(), port.getBridgePort())) {
                    shared.getBridgePortsOnSegment().add(BridgePort.getFromBridgeBridgeLink(link));
            }
        }

        if (segments.size() == 0) {
           return SharedSegment.create();
        }

        if (segments.size() > 1) {
            LOG.error("getHostSharedSegment: found {} shared segment for mac {}", 
                      segments.size(),
                      mac);
            return SharedSegment.create();
        }
            return segments.iterator().next();
    }

