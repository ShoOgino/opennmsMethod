    /**
     * Create a PrefabGraphTypeDao from the properties file in sourceResource
     * If reloadable is true, add the type's reload call back to each graph,
     * otherwise don't If sourceResource is not a file-based resource, then
     * reloadable should be false NB: I didn't want to get into checking for
     * what the implementation class of Resource is, because that could break
     * in future with new classes and types that do have a File underneath
     * them. This way, it's up to the caller, who *should* be able to make a
     * sensible choice as to whether the resource is reloadable or not.
     * 
     * @param type
     * @param sourceResource
     * @param reloadable
     * @return
     */
    private PrefabGraphTypeDao createPrefabGraphType(String type,
            Resource sourceResource, boolean reloadable) {
        InputStream in = null;
        try {
            in = sourceResource.getInputStream();
            Properties properties = new Properties();
            properties.load(in);
            PrefabGraphTypeDao t = new PrefabGraphTypeDao();
            t.setName(type);

            t.setCommandPrefix(getProperty(properties, "command.prefix"));
            t.setOutputMimeType(getProperty(properties, "output.mime"));

            t.setDefaultReport(properties.getProperty("default.report",
                                                      "none"));

            String includeDirectoryString = properties.getProperty("include.directory");
            t.setIncludeDirectory(includeDirectoryString);
            
            if (includeDirectoryString != null) {
                Resource includeDirectoryResource;

                File includeDirectoryFile = new File(includeDirectoryString);
                if (includeDirectoryFile.isAbsolute()) {
                    includeDirectoryResource = new FileSystemResource(
                                                                         includeDirectoryString);
                } else {
                    includeDirectoryResource = sourceResource.createRelative(includeDirectoryString);
                }
                
                File includeDirectory = includeDirectoryResource.getFile();
                
                if (includeDirectory.isDirectory()) {
                    t.setIncludeDirectoryResource(includeDirectoryResource);
                } else {
                    // Just warn; no need to throw a hissy fit or otherwise fail to load
                    LOG.warn("includeDirectory '{}' specified in '{}' is not a directory", includeDirectoryFile.getAbsolutePath(), sourceResource.getFilename());
                }
            }

            // Default to 5 minutes; it's up to users to specify a shorter
            // time if they don't mind OpenNMS spamming on that directory
            int interval;
            try {
                interval = Integer.parseInt(properties.getProperty("include.directory.rescan",
                                                                   "300000"));
            } catch (NumberFormatException e) {
                // Default value if one was specified but it wasn't an integer
                interval = 300000;
                LOG.warn("The property 'include.directory.rescan' in {} was not able to be parsed as an integer.  Defaulting to {}ms", sourceResource, interval, e);
            }

            t.setIncludeDirectoryRescanInterval(interval);

            List<PrefabGraph> graphs = loadPrefabGraphDefinitions(t,
                                                                  properties);

            for (PrefabGraph graph : graphs) {
                //The graphs list may contain nulls; see loadPrefabGraphDefinitions for reasons
                if(graph != null) {
                    FileReloadContainer<PrefabGraph> container;
                    if (reloadable) {
                        container = new FileReloadContainer<PrefabGraph>(
                                                                         graph,
                                                                         sourceResource,
                                                                         t.getCallback());
                    } else {
                        container = new FileReloadContainer<PrefabGraph>(graph);
                    }
    
                    t.addPrefabGraph(container);
                }
            }
            
            //This *must* come after loading the main graph file, to ensure overrides are correct
            this.scanIncludeDirectory(t);
            return t;

        } catch (IOException e) {
            LOG.error("Failed to load prefab graph configuration of type {} from {}", type, sourceResource, e);
            return null;
        } finally {
            IOUtils.closeQuietly(in);
        }

    }

