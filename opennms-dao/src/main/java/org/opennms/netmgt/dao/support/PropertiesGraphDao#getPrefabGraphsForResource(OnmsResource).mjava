    public PrefabGraph[] getPrefabGraphsForResource(OnmsResource resource) {
        Set<OnmsAttribute> attributes = resource.getAttributes();
        String resourceType = resource.getResourceType().getName();
        
        List<PrefabGraph> returnList = new LinkedList<PrefabGraph>();

        Set<String> availDataSourceList = new HashSet<String>(attributes.size());
        for (OnmsAttribute attribute : attributes) {
            availDataSourceList.add(attribute.getName());
        }

        for (PrefabGraph query : getAllPrefabGraphs()) {
            if (resourceType != null && !query.hasMatchingType(resourceType)) {
                if (log().isDebugEnabled()) {
                    log().debug("skipping " + query.getName() + " because its types \"" + StringUtils.arrayToDelimitedString(query.getTypes(), ", ") + "\" does not match resourceType \"" + resourceType + "\"");
                }
                continue;
            }
            
            List<String> requiredList = Arrays.asList(query.getColumns());

            if (availDataSourceList.containsAll(requiredList)) {
                if (log().isDebugEnabled()) {
                    log().debug("adding " + query.getName() + " to query list");
                }
                returnList.add(query);
            } else {
                if (log().isDebugEnabled()) {
                    log().debug("not adding " + query.getName() + " to query list because the required list of attributes (" + StringUtils.collectionToDelimitedString(requiredList, ", ") + ") is not in the list of attributes on the resource (" + StringUtils.collectionToDelimitedString(availDataSourceList, ", ")+ ")");
                }
            }
        }

        PrefabGraph[] availQueries = returnList.toArray(new PrefabGraph[returnList.size()]);

        return availQueries;
    }

