    /** {@inheritDoc} */
    @Override
    public PrefabGraph[] getPrefabGraphsForResource(OnmsResource resource) {
        if (resource == null) {
            LOG.warn("returning empty graph list for resource because it is null");
            return new PrefabGraph[0];
        }
        Set<OnmsAttribute> attributes = resource.getAttributes();
        // Check if there are no attributes
        if (attributes.size() == 0) {
            LOG.debug("returning empty graph list for resource " + resource + " because its attribute list is empty");
            return new PrefabGraph[0];
        }

        Set<String> availableRrdAttributes = resource.getRrdGraphAttributes().keySet();
        Set<String> availableStringAttributes = resource.getStringPropertyAttributes().keySet();
        Set<String> availableExternalAttributes = resource.getExternalValueAttributes().keySet();

        // Check if there are no RRD attributes
        if (availableRrdAttributes.size() == 0) {
            LOG.debug("returning empty graph list for resource " + resource + " because it has no RRD attributes");
            return new PrefabGraph[0];
        }

        String resourceType = resource.getResourceType().getName();

        Map<String, PrefabGraph> returnList = new LinkedHashMap<String, PrefabGraph>();
        for (PrefabGraph query : getAllPrefabGraphs()) {
            if (resourceType != null && !query.hasMatchingType(resourceType)) {
                LOG.debug("skipping " + query.getName() + " because its types \"" + StringUtils.arrayToDelimitedString(query.getTypes(), ", ") + "\" does not match resourceType \"" + resourceType + "\"");
                continue;
            }

            if (!verifyAttributesExist(query, "RRD",
                                       Arrays.asList(query.getColumns()),
                                       availableRrdAttributes)) {
                continue;
            }
            if (!verifyAttributesExist(query,
                                       "string property",
                                       Arrays.asList(query.getPropertiesValues()),
                                       availableStringAttributes)) {
                continue;
            }
            if (!verifyAttributesExist(query,
                                       "external value",
                                       Arrays.asList(query.getExternalValues()),
                                       availableExternalAttributes)) {
                continue;
            }

            LOG.debug("adding " + query.getName() + " to query list");

            returnList.put(query.getName(), query);
        }

        if (LOG.isDebugEnabled()) {
            ArrayList<String> nameList = new ArrayList<String>(
                                                               returnList.size());
            for (PrefabGraph graph : returnList.values()) {
                nameList.add(graph.getName());
            }
            LOG.debug("found " + nameList.size() + " prefabricated graphs for resource " + resource + ": " + StringUtils.collectionToDelimitedString(nameList, ", "));
        }

        Set<String> suppressReports = new HashSet<String>();
        for (Entry<String, PrefabGraph> entry : returnList.entrySet()) {
            suppressReports.addAll(Arrays.asList(entry.getValue().getSuppress()));
        }

        suppressReports.retainAll(returnList.keySet());
        if (suppressReports.size() > 0) {
            LOG.debug("suppressing " + suppressReports.size() + " prefabricated graphs for resource " + resource + ": " + StringUtils.collectionToDelimitedString(suppressReports, ", "));
        }

        for (String suppressReport : suppressReports) {
            returnList.remove(suppressReport);
        }

        return returnList.values().toArray(new PrefabGraph[returnList.size()]);
    }

