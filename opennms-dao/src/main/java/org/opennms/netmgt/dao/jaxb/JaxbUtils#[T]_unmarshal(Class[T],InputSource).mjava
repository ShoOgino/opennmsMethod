	public static <T> T unmarshal(final Class<T> clazz, final InputSource inputSource) {
		final Unmarshaller um = getUnmarshallerFor(clazz);

		LogUtils.debugf(JaxbUtils.class, "unmarshalling class %s from input source %s with unmarshaller %s", clazz.getSimpleName(), inputSource, um);
		try {
			XMLFilter filter = null;
			final XmlSchema schema = clazz.getPackage().getAnnotation(XmlSchema.class);
			if (schema != null) {
				final String namespace = schema.namespace();
				if (namespace != null && !"".equals(namespace)) {
					LogUtils.debugf(JaxbUtils.class, "found namespace %s for class %s", namespace, clazz);
					filter = new SimpleNamespaceFilter(namespace, true);
				}
			}
			if (filter == null) {
				filter = new SimpleNamespaceFilter("", false);
			}

			final XMLReader xmlReader = XMLReaderFactory.createXMLReader();
			filter.setParent(xmlReader);

			um.setEventHandler(new ValidationEventHandler() {
				
				@Override
				public boolean handleEvent(final ValidationEvent event) {
					LogUtils.debugf(this, event.getLinkedException(), "event = %s", event);
					return false;
				}
			});
			
			final SAXSource source = new SAXSource(filter, inputSource);
			final JAXBElement<T> element = um.unmarshal(source, clazz);
			return element.getValue();
		} catch (final SAXException e) {
			throw EXCEPTION_TRANSLATOR.translate("creating an XML reader object", e);
		} catch (final JAXBException e) {
			throw EXCEPTION_TRANSLATOR.translate("unmarshalling an object (" + clazz.getSimpleName() + ")", e);
		}
	}

