    public OnmsResource getResourceByNodeAndIndex(int nodeId, final String index) {
        final Set<OnmsAttribute> set = new LazySet<OnmsAttribute>(new AttributeLoader(nodeId, index));
        
        String label;
        if (m_resourceLabelExpression == null) {
            label = index;
        } else {
            SymbolTable symbolTable = new SymbolTable() {
                public String getSymbolValue(String symbol) {
                    if (symbol.equals("index")) {
                        return index;
                    }
                    
                    if (symbol.startsWith("index:")) {
                        String partsStr = symbol.substring("index:".length());
                        
                        int start = -1;
                        int end = -1;
                        
                        if (INTEGER_PATTERN.matcher(partsStr).matches()) {
                            start = end = Integer.parseInt(partsStr);
                        } else {
                            Matcher m = RANGE_PATTERN.matcher(partsStr);
                            if (m.matches()) {
                                //m.find();
                                if (m.group(1).length() > 0) {
                                    start = Integer.parseInt(m.group(1));
                                }
                                if (m.group(2).length() > 0) {
                                    end = Integer.parseInt(m.group(2));
                                }
                                
                                if (start == -1 && end == -1) {
                                    // Bogus format
                                    return null;
                                }
                            } else {
                                // Bogus format
                                return null;
                            }
                        }
                        
                        List<String> indexElements = tokenizeIndex(index);
                        
                        if (start >= indexElements.size() || end >= indexElements.size()) {
                            // Bogus index start or end size
                            return null;
                        }
                        
                        if (start == -1) {
                            start = 0;
                        }
                        if (end == -1) {
                            end = indexElements.size() - 1;
                        }
                        
                        StringBuffer indexSubString = new StringBuffer();
                        for (int i = start; i <= end; i++) {
                            if (indexSubString.length() != 0) {
                                indexSubString.append(".");
                            }
                            
                            indexSubString.append(indexElements.get(i));
                        }
                        
                        return indexSubString.toString();
                    }
                    
                    Matcher hexMatcher = HEX_PATTERN.matcher(symbol);
                    if (hexMatcher.matches()) {
                        String subSymbol = getSymbolValue(hexMatcher.group(1));
                        List<String> indexElements = tokenizeIndex(subSymbol);
                        
                        StringBuffer hexString = new StringBuffer();
                        for (String indexElement : indexElements) {
                            if (hexString.length() > 0) {
                                hexString.append(":");
                            }
                            try {
                                hexString.append(String.format("%02X", Integer.parseInt(indexElement)));
                            } catch (NumberFormatException e) {
                                return null;
                            }
                        }
                        
                        return hexString.toString();
                    }
                    
                    for (OnmsAttribute attr : set) {
                        if (symbol.equals(attr.getName())) {
                            if (StringPropertyAttribute.class.isAssignableFrom(attr.getClass())) {
                                StringPropertyAttribute stringAttr = (StringPropertyAttribute) attr;
                                return stringAttr.getValue();
                            }
                            if (ExternalValueAttribute.class.isAssignableFrom(attr.getClass())) {
                                ExternalValueAttribute extAttr = (ExternalValueAttribute) attr;
                                return extAttr.getValue();
                            }
                        }
                    }
                    
                    return null;
                }

                private List<String> tokenizeIndex(final String index) {
                    List<String> indexElements = new ArrayList<String>();
                    StringTokenizer t = new StringTokenizer(index, ".");
                    while (t.hasMoreTokens()) {
                        indexElements.add(t.nextToken());
                    }
                    return indexElements;
                }
            };
            
            label = PropertiesUtils.substitute(m_resourceLabelExpression, symbolTable);
        }

        return new OnmsResource(index, label, this, set);
    }

