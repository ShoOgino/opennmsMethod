    /** {@inheritDoc} */
    @Transactional(readOnly=false)
    @Override
    public void processAck(OnmsAcknowledgment ack) {
        LogUtils.infof(this,"processAck: Searching DB for acknowledgables for ack: "+ack);
        List<Acknowledgeable> ackables = findAcknowledgables(ack);
        
        if (ackables == null || ackables.size() < 1) {
            LogUtils.debugf(this,"processAck: No acknowledgables found.");
            throw new IllegalStateException("No acknowlegables in the database for ack: "+ack);
        }

        LogUtils.debugf(this,"processAck: Found "+ackables.size()+". Acknowledging...");
        
        Iterator<Acknowledgeable> it = ackables.iterator();
        while (it.hasNext()) {
            try {
                Acknowledgeable ackable = it.next();

                switch (ack.getAckAction()) {
                case ACKNOWLEDGE:
                    LogUtils.debugf(this,"processAck: Acknowledging ackable: "+ackable+"...");
                    ackable.acknowledge(ack.getAckUser());
                    LogUtils.debugf(this,"processAck: Acknowledged ackable: "+ackable);
                    break;
                case UNACKNOWLEDGE:
                    LogUtils.debugf(this,"processAck: Unacknowledging ackable: "+ackable+"...");
                    ackable.unacknowledge(ack.getAckUser());
                    LogUtils.debugf(this,"processAck: Unacknowledged ackable: "+ackable);
                    break;
                case CLEAR:
                    LogUtils.debugf(this,"processAck: Clearing ackable: "+ackable+"...");
                    ackable.clear(ack.getAckUser());
                    LogUtils.debugf(this,"processAck: Cleared ackable: "+ackable);
                    break;
                case ESCALATE:
                    LogUtils.debugf(this,"processAck: Escalating ackable: "+ackable+"...");
                    ackable.escalate(ack.getAckUser());
                    LogUtils.debugf(this,"processAck: Escalated ackable: "+ackable);
                    break;
                default:
                    break;
                }

                updateAckable(ackable);
                save(ack);
                flush();
            } catch (Throwable t) {
                LogUtils.errorf(this, "processAck: exception while processing: "+ack+"; "+t, t);
            }
            
        }
        LogUtils.infof(this,"processAck: Found and processed acknowledgables for the acknowledgement: "+ack);
    }

