    /**
     * {@inheritDoc}
     *
     * This method returns a map of all nodeids and nodelabels that match
     * the rule that is passed in, sorted by nodeid.
     * @exception FilterParseException
     *                if a rule is syntactically incorrect or failed in
     *                executing the SQL statement
     */
    public SortedMap<Integer, String> getNodeMap(final String rule) throws FilterParseException {
        LogUtils.debugf(this, "Filter.getNodeMap(%s)", rule);

        return m_transactionTemplate.execute(new TransactionCallback<SortedMap<Integer,String>>() {

			@Override
			public SortedMap<Integer, String> doInTransaction(final TransactionStatus status) {
		    	final SortedMap<Integer, String> resultMap = new TreeMap<Integer, String>();

		        // get the database connection
		        final DBUtils d = new DBUtils(getClass());
	            Connection conn = null;
		        
		        try {
		            conn = DataSourceUtils.getConnection(getDataSource());

		            // parse the rule and get the sql select statement
		            final String sqlString = getNodeMappingStatement(rule);
		            LogUtils.debugf(this, "Filter.getNodeMap(%s): SQL statement: %s", rule, sqlString);

		            // execute query
		            final Statement stmt = conn.createStatement();
		            d.watch(stmt);
		            final ResultSet rset = stmt.executeQuery(sqlString);
		            d.watch(rset);

		            if (rset != null) {
		                // Iterate through the result and build the map
		                while (rset.next()) {
		                    resultMap.put(Integer.valueOf(rset.getInt(1)), rset.getString(2));
		                }
		            }
		        } catch (final FilterParseException e) {
		            LogUtils.warnf(this, e, "Filter Parse Exception occurred getting node map.");
		            throw new FilterParseException("Filter Parse Exception occurred getting node map: " + e.getLocalizedMessage(), e);
		        } catch (final SQLException e) {
		            LogUtils.warnf(this, e, "SQL Exception occurred getting node map.");
		            throw new FilterParseException("SQL Exception occurred getting node map: " + e.getLocalizedMessage(), e);
		        } catch (final Throwable e) {
		            LogUtils.errorf(this, e, "Exception getting database connection.");
		            throw new UndeclaredThrowableException(e);
		        } finally {
		            d.cleanUp();
		        	if (conn != null) {
		        		DataSourceUtils.releaseConnection(conn, getDataSource());
		        	}
		        }

		        return resultMap;
			}
		});
    }

