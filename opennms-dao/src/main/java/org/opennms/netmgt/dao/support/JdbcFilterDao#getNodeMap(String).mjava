    /**
     * This method returns a map of all nodeids and nodelabels that match
     * the rule that is passed in, sorted by nodeid.
     *
     * @param rule
     *            an expression rule to be parsed and executed.
     *
     * @return SortedMap containing all nodeids/nodelabels selected by the rule.
     *
     * @exception FilterParseException
     *                if a rule is syntactically incorrect or failed in
     *                executing the SQL statement
     */
    public SortedMap<Integer, String> getNodeMap(String rule) throws FilterParseException {
        SortedMap<Integer, String> resultMap = new TreeMap<Integer, String>();
        String sqlString;

        if (log().isDebugEnabled()) {
            log().debug("Filter: rule: " + rule);
        }

        // get the database connection
        Connection conn = null;
        try {
            conn = getDataSource().getConnection();

            // parse the rule and get the sql select statement
            sqlString = getNodeMappingStatement(rule);
            if (log().isDebugEnabled()) {
                log().debug("Filter: SQL statement: " + sqlString);
            }

            // execute query
            Statement stmt = conn.createStatement();
            ResultSet rset = stmt.executeQuery(sqlString);

            if (rset != null) {
                // Iterate through the result and build the map
                while (rset.next()) {
                    resultMap.put(new Integer(rset.getInt(1)), rset.getString(2));
                }
            }

            try {
                rset.close();
            } catch (SQLException e) {
            }

            try {
                stmt.close();
            } catch (SQLException e) {
            }
        } catch (FilterParseException e) {
            log().info("Filter Parse Exception occurred getting node map: " + e, e);
            throw new FilterParseException("Filter Parse Exception occurred getting node map: " + e);
        } catch (SQLException e) {
            log().info("SQL Exception occurred getting node map: " + e, e);
            throw new FilterParseException("SQL Exception occurred getting node map: " + e);
        } catch (Exception e) {
            log().fatal("Exception getting database connection: " + e, e);
            throw new UndeclaredThrowableException(e);
        } finally {
            if (conn != null) {
                try {
                    conn.close();
                } catch (SQLException e) {
                }
            }
        }

        return resultMap;
    }

