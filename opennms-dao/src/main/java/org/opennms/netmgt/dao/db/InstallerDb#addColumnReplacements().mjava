    public void addColumnReplacements() throws SQLException {
        /*
         * The DEFAULT value for these columns will take care of these
         * primary keys
         */
        addColumnReplacement("snmpinterface.id",
                                           new DoNotAddColumn());
        addColumnReplacement("ipinterface.id",
                                           new DoNotAddColumn());
        addColumnReplacement("ifservices.id",
                                           new DoNotAddColumn());
        addColumnReplacement("assets.id",
                                           new DoNotAddColumn());
        addColumnReplacement("atinterface.id", new DoNotAddColumn());

        // Triggers will take care of these surrogate foreign keys
        addColumnReplacement("ipinterface.snmpinterfaceid",
                                           new DoNotAddColumn());
        addColumnReplacement("ifservices.ipinterfaceid",
                                           new DoNotAddColumn());
        addColumnReplacement("outages.ifserviceid",
                                           new DoNotAddColumn());
        
        addColumnReplacement("events.eventsource",
                                           new EventSourceReplacement());
        
        addColumnReplacement("outages.outageid",
                                           new AutoInteger(1));
        
        addColumnReplacement("snmpinterface.nodeid",
                                           new RowHasBogusData("snmpInterface",
                                                               "nodeId"));
        
        addColumnReplacement("snmpinterface.snmpifindex",
                                           new RowHasBogusData("snmpInterface",
                                                               "snmpIfIndex"));

        addColumnReplacement("ipinterface.nodeid",
                                 new RowHasBogusData("ipInterface", "nodeId"));

        addColumnReplacement("ipinterface.ipaddr",
                                 new RowHasBogusData("ipInterface", "ipAddr"));

        addColumnReplacement("ifservices.nodeid",
                                 new RowHasBogusData("ifservices", "nodeId"));

        addColumnReplacement("ifservices.ipaddr",
                                 new RowHasBogusData("ifservices", "ipaddr"));

        addColumnReplacement("ifservices.serviceid",
                                 new RowHasBogusData("ifservices",
                                                     "serviceId"));

        addColumnReplacement("outages.nodeid",
                                 new RowHasBogusData("outages", "nodeId"));
        
        addColumnReplacement("outages.serviceid",
                                 new RowHasBogusData("outages", "serviceId"));
        
        /*
         * This is totally bogus.  outages.svcregainedeventid is a foreign
         * key that points at events.eventid, and a fixed replacement of zero
         * will break, because there should never be an event with an ID of
         * zero.  I don't think it ever got executed before due to the
         * null replacement only being performed if a column was marked as
         * NOT NULL.
         */
        /*
        m_columnReplacements.put("outages.svcregainedeventid",
                                 new FixedIntegerReplacement(0));
                                 */
        
        // Disabled for the same reason as above
        /*
        m_columnReplacements.put("notifications.eventid",
                                 new FixedIntegerReplacement(0));
                                 */
        
        addColumnReplacement("usersnotified.id",
                                 new NextValReplacement("userNotifNxtId",
                                                        getDataSource()));
        
    }

