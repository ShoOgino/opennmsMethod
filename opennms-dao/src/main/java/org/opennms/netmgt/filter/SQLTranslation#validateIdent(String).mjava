    /**
     * Validate the identifier by ensuring it is referenced in the schema. Also
     * check for 'virtual columns' by checking the prefix.
     */
    private String validateIdent(String ident) {
        String expr = null;
        expr = addColumn(ident);

        if (expr == null && ident.startsWith(VIRTUAL_COLUMN_PREFIX)) {
            String serviceName = ident.substring(VIRTUAL_COLUMN_PREFIX.length());
            // should check against some form of
            // service identifier table, but for now I'm
            // removing this check since it's just used
            // internally
            //
            expr = addColumn("serviceName");
            if (expr != null)
                expr = expr + " = '" + serviceName + '\'';
        }

        if (expr == null && ident.startsWith(VIRTUAL_NOT_COLUMN_PREFIX)) {
            String serviceName = ident.substring(VIRTUAL_NOT_COLUMN_PREFIX.length());
            // should check against some form of
            // service identifier table, but for now I'm
            // removing this check since it's just used
            // internally
            //
            expr = addColumn("ipAddr");
            if (expr != null)
                expr = expr + " not in (select ipaddr from ifservices,service where service.serviceName ='"+ serviceName + "' and service.serviceID = ifServices.serviceid)";
        }

        if (expr == null && ident.startsWith(VIRTUAL_CATINC_PREFIX)) {
            String categoryName = ident.substring(VIRTUAL_CATINC_PREFIX.length());
            //
            // This is a kludge to get Alex's categories working
            //
            expr = addColumn("nodeID");
            if (expr != null)
                expr = expr + " in (select nodeid from category_node, categories where categories.categoryID = category_node.categoryID AND categories.categoryName = '"+ categoryName + "')";
        }

        if (expr == null) {
            throw new FilterParseException("The token " + ident + " is an illegal column value.");
        }

        return expr;
    }

