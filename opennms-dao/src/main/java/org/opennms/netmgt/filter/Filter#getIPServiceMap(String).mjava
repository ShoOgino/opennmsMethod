    public Map<String, Set<String>> getIPServiceMap(String rule) {
        Map<String, Set<String>> ipServices = new TreeMap<String, Set<String>>();

        // parse the rule
        parseRule(rule);
        // return getIPServiceMappingStatement();

        // get the database connection
        Connection conn = null;
        try {
            conn = getConnection();

            // execute query and return the list of ip addresses
            Statement stmt = conn.createStatement();
            ResultSet rset = stmt.executeQuery(getIPServiceMappingStatement());

            // fill up the array list if the result set has values
            if (rset != null) {
                // Iterate through the result and build the array list
                while (rset.next()) {
                    String ipaddr = rset.getString(1);

                    if (!ipServices.containsKey(ipaddr)) {
                        ipServices.put(ipaddr, new TreeSet<String>());
                    }
                    
                    ipServices.get(ipaddr).add(rset.getString(2));
                }
            }

            try {
                rset.close();
            } catch (SQLException e) {
            }

            try {
                stmt.close();
            } catch (SQLException e) {
            }
        } catch (SQLException e) {
            log().info("SQL Exception occured getting IP List: " + e, e);
            throw new UndeclaredThrowableException(e);
        } catch (Exception e) {
            log().fatal("Exception getting database connection: " + e, e);
            throw new UndeclaredThrowableException(e);
        } finally {
            if (conn != null) {
                try {
                    conn.close();
                } catch (SQLException e) {
                }
            }
        }

        return ipServices;
    }

