    /**
     * The passed range is evaluated against the existing ranges in the
     * definition and updates the def range if it overlaps or eclipses
     * a def range.
     *
     * @param range a {@link org.opennms.netmgt.config.common.Range} object.
     * @return the state of having updated any ranges in the definition
     *   due to being affected by the new range.
     */
    public boolean mergeOverlappingRanges(final Range range) {
        boolean overlapped = false;
        sortRanges();
        MergeableRange newRange = new MergeableRange(range);
        Range[] ranges = getConfigDef().getRange();
        for (int i = 0; i < ranges.length; i++) {
            Range defRange = ranges[i];
            
            if (newRange.equals(defRange)) {
                overlapped = true;
            } else if (newRange.overlapsBegin(defRange)) {
                defRange.setBegin(newRange.getRange().getBegin());
                overlapped = true;
            } else if (newRange.overlapsEnd(defRange)) {
                defRange.setEnd(newRange.getRange().getEnd());
                overlapped = true;
            } else if (newRange.eclipses(defRange)) {
                defRange.setBegin(newRange.getRange().getBegin());
                defRange.setEnd(newRange.getRange().getEnd());
                overlapped = true;
            }
        }
        sortRanges();
        return overlapped;
    }

