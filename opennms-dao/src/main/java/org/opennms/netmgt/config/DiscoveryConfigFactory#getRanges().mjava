    /**
     * <p>getRanges</p>
     *
     * @return a {@link java.util.List} object.
     */
    public List<IPPollRange> getRanges() {
        List<IPPollRange> includes = new LinkedList<IPPollRange>();
        Enumeration<IncludeRange> includeRangeEntries = getConfiguration().enumerateIncludeRange();
        while (includeRangeEntries.hasMoreElements()) {
            IncludeRange ir = includeRangeEntries.nextElement();

            // Validate IP range; if invalid, then log and discard this range
            try {
                InetAddressUtils.toIpAddrBytes(ir.getBegin());
            } catch (Throwable e) {
                ThreadCategory.getInstance(getClass()).warn("Begin address of discovery range is invalid, discarding: " + ir.getBegin());
                continue;
            } 
            
            try {
                InetAddressUtils.toIpAddrBytes(ir.getEnd());
            } catch (Throwable e) {
                ThreadCategory.getInstance(getClass()).warn("End address of discovery range is invalid, discarding: " + ir.getEnd());
                continue;
            }

            long timeout = 800L;
            if (ir.hasTimeout()) {
                timeout = ir.getTimeout();
            } else if (getConfiguration().hasTimeout()) {
                timeout = getConfiguration().getTimeout();
            }
    
            int retries = 3;
            if (ir.hasRetries()) {
                retries = ir.getRetries();
            } else if (getConfiguration().hasRetries()) {
                retries = getConfiguration().getRetries();
            }
    
            try {
                includes.add(new IPPollRange(ir.getBegin(), ir.getEnd(), timeout, retries));
            } catch (UnknownHostException uhE) {
                ThreadCategory.getInstance(getClass()).warn("Failed to convert address range (" + ir.getBegin() + ", " + ir.getEnd() + ")", uhE);
            }
        }
    
        return includes;
    }

