    /**
     * Removes the specifics and ranges covered by the range specified in the parameter from the current wrapped definition.
     *
     * @param eventRange a {@link org.opennms.netmgt.config.common.Range} object.
     */
    public void purgeRangeFromDef(final Range eventRange) {
        MergeableRange range = new MergeableRange(eventRange);
        
        sortSpecifics();
        String[] specs = getConfigDef().getSpecific();
        
        for (int i = 0; i < specs.length; i++) {
            String spec = specs[i];
            if (range.coversSpecific(spec)) {
                getConfigDef().removeSpecific(spec);
            }
        }
        
        sortRanges();
        Range[] ranges = getConfigDef().getRange();
        for (int i = 0; i < ranges.length; i++) {
            Range defRng = ranges[i];

            try {
                if (range.eclipses(defRng)) {
                    getConfigDef().removeRange(defRng);
                } else if (range.withInRange(defRng)) {
                    Range newRange = new Range();
                    newRange.setBegin(InetAddressUtils.incr(range.getLast().getSpecific()));
                    newRange.setEnd(defRng.getEnd());
                    getConfigDef().addRange(newRange);
                    defRng.setEnd(InetAddressUtils.decr(range.getFirst().getSpecific()));
                } else if (range.overlapsBegin(defRng)) {
                    defRng.setBegin(InetAddressUtils.incr(range.getLast().getSpecific()));
                } else if (range.overlapsEnd(defRng)) {
                    defRng.setEnd(InetAddressUtils.decr(range.getFirst().getSpecific()));
                }
            } catch (UnknownHostException e) {
                ThreadCategory.getInstance(getClass()).error("Error converting string to IP address: " + e.getMessage(), e);
            }
        }
    }

