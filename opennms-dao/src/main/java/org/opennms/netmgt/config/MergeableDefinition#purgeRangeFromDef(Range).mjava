    /**
     * Removes the specifics and ranges covered by the range specified in the parameter from the current wrapped definition.
     * @param eventRange
     */
    public void purgeRangeFromDef(final Range eventRange) {
        MergeableRange range = new MergeableRange(eventRange);
        
        sortSpecifics();
        String[] specs = getConfigDef().getSpecific();
        
        for (int i = 0; i < specs.length; i++) {
            String spec = specs[i];
            if (range.coversSpecific(spec)) {
                getConfigDef().removeSpecific(spec);
            }
        }
        
        sortRanges();
        Range[] ranges = getConfigDef().getRange();
        for (int i = 0; i < ranges.length; i++) {
            Range defRng = ranges[i];

            if (range.eclipses(defRng)) {
                getConfigDef().removeRange(defRng);
            } else if (range.withInRange(defRng)) {
                Range newRange = new Range();
                newRange.setBegin(SnmpPeerFactory.toIpAddr(range.getLast().getValue()+1));
                newRange.setEnd(defRng.getEnd());
                getConfigDef().addRange(newRange);
                defRng.setEnd(SnmpPeerFactory.toIpAddr(range.getFirst().getValue()-1));
            } else if (range.overlapsBegin(defRng)) {
                defRng.setBegin(SnmpPeerFactory.toIpAddr(range.getLast().getValue()+1));
            } else if (range.overlapsEnd(defRng)) {
                defRng.setEnd(SnmpPeerFactory.toIpAddr(range.getFirst().getValue()-1));
            }
        }
    }

