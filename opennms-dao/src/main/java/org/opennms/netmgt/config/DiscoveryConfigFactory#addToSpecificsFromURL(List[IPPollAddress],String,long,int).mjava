    /**
     * <pre>
     * The file URL is read and a 'specific IP' is added for each entry
     *  in this file. Each line in the URL file can be one of -
     *  &lt;IP&gt;&lt;space&gt;#&lt;comments&gt;
     *  or
     *  &lt;IP&gt;
     *  or
     *  #&lt;comments&gt;
     * 
     *  Lines starting with a '#' are ignored and so are characters after
     *  a '&lt;space&gt;#' in a line.
     * </pre>
     * 
     * @param specifics
     *            the list to add to
     * @param url
     *            the URL file
     * @param timeout
     *            the timeout for all entries in this URL
     * @param retries
     *            the retries for all entries in this URL
     */
    public boolean addToSpecificsFromURL(List<IPPollAddress> specifics, String url, long timeout, int retries) {
        Category log = ThreadCategory.getInstance();
    
        boolean bRet = true;
    
        try {
            // open the file indicated by the URL
            URL fileURL = new URL(url);
    
            InputStream is = fileURL.openStream();
    
            // check to see if the file exists
            if (is != null) {
                BufferedReader buffer = new BufferedReader(new InputStreamReader(is, "UTF-8"));
    
                String ipLine = null;
                String specIP = null;
    
                // get each line of the file and turn it into a specific range
                while ((ipLine = buffer.readLine()) != null) {
                    ipLine = ipLine.trim();
                    if (ipLine.length() == 0 || ipLine.charAt(0) == DiscoveryConfigFactory.COMMENT_CHAR) {
                        // blank line or skip comment
                        continue;
                    }
    
                    // check for comments after IP
                    int comIndex = ipLine.indexOf(DiscoveryConfigFactory.COMMENT_STR);
                    if (comIndex == -1) {
                        specIP = ipLine;
                    } else {
                        specIP = ipLine.substring(0, comIndex);
                        ipLine = ipLine.trim();
                    }
    
                    try {
                        specifics.add(new IPPollAddress(specIP, timeout, retries));
                    } catch (UnknownHostException e) {
                        log.warn("Unknown host \'" + specIP + "\' read from URL \'" + url.toString() + "\': address ignored");
                    }
    
                    specIP = null;
                }
    
                buffer.close();
            } else {
                // log something
                log.warn("URL does not exist: " + url.toString());
                bRet = true;
            }
        } catch (MalformedURLException e) {
            log.error("Error reading URL: " + url.toString() + ": " + e.getLocalizedMessage());
            bRet = false;
        } catch (FileNotFoundException e) {
            log.error("Error reading URL: " + url.toString() + ": " + e.getLocalizedMessage());
            bRet = false;
        } catch (IOException e) {
            log.error("Error reading URL: " + url.toString() + ": " + e.getLocalizedMessage());
            bRet = false;
        }
    
        return bRet;
    }

