    /**
     * <pre>
     * The file URL is read and a 'specific IP' is added for each entry
     *  in this file. Each line in the URL file can be one of -
     *  &lt;IP&gt;&lt;space&gt;#&lt;comments&gt;
     *  or
     *  &lt;IP&gt;
     *  or
     *  #&lt;comments&gt;
     * 
     *  Lines starting with a '#' are ignored and so are characters after
     *  a '&lt;space&gt;#' in a line.
     * </pre>
     * 
     * @param specifics
     *            the list to add to
     * @param url
     *            the URL file
     * @param timeout
     *            the timeout for all entries in this URL
     * @param retries
     *            the retries for all entries in this URL
     */
    public static boolean addToSpecificsFromURL(List<IPPollAddress> specifics, String url, long timeout, int retries) {
        ThreadCategory log = ThreadCategory.getInstance();
        
        // open the file indicated by the URL
        InputStream is = null;
        try {
            URL fileURL = new URL(url);
            is = fileURL.openStream();
            // check to see if the file exists
            if (is == null) {
                // log something
                log.warn("URL does not exist: " + url);
                return true;
            } else {
                return addToSpecificsFromURL(specifics, fileURL.openStream(), timeout, retries);
            }
        } catch (MalformedURLException e) {
            log.error("Error reading URL: " + url + ": " + e.getLocalizedMessage());
            return false;
        } catch (IOException e) {
            log.error("Error reading URL: " + url + ": " + e.getLocalizedMessage());
            return false;
        } finally {
            if (is != null) { 
                try {
                    is.close();
                } catch (IOException e) {
                    log.warn("Could not close discovery include file stream: " + e.getMessage(), e);
                } 
            }
        }
    }

