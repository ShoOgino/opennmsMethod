    /**
     * Puts a specific IP address with associated read-community string into
     * the currently loaded snmp-config.xml.
     * 
     * Despite the "unused" warning from Eclipse, this is used, in the JSPs.  :P
     */
    @SuppressWarnings("unused")
    private void define(final InetAddress ip, final String community) throws UnknownHostException {
        SnmpPeerFactory.getWriteLock().lock();

        try {
            // Convert IP to long so that it easily compared in range elements
            final int address = new IPv4Address(ip).getAddress();

            // Copy the current definitions so that elements can be added and
            // removed
            final ArrayList<Definition> definitions = new ArrayList<Definition>(m_config.getDefinitionCollection());

            // First step: Find the first definition matching the
            // read-community or
            // create a new definition, then add the specific IP
            Definition definition = null;
            for (final Definition currentDefinition : definitions) {
                if ((currentDefinition.getReadCommunity() != null && currentDefinition.getReadCommunity().equals(community))
                        || (currentDefinition.getReadCommunity() == null && m_config.getReadCommunity() != null && m_config.getReadCommunity().equals(community))) {
                    LogUtils.debugf(this, "define: Found existing definition with read-community %s", community);
                    definition = currentDefinition;
                    break;
                }
            }
            if (definition == null) {
                LogUtils.debugf(this, "define: Creating new definition");

                definition = new Definition();
                definition.setReadCommunity(community);
                definitions.add(definition);
            }
            definition.addSpecific(ip.getHostAddress());

            // Second step: Find and remove any existing specific and range
            // elements with matching IP among all definitions except for the
            // definition identified in the first step
            for (final Definition currentDefinition : definitions) {
                // Ignore this definition if it was the one identified by the
                // first step
                if (currentDefinition == definition) {
                    continue;
                }

                // Remove any specific elements that match IP
                while (currentDefinition.removeSpecific(ip.getHostAddress())) {
                    LogUtils.debugf(this, "define: Removed an existing specific element with IP %s", ip);
                }

                // Split and replace any range elements that contain IP
                ArrayList<Range> ranges = new ArrayList<Range>(currentDefinition.getRangeCollection());
                Range[] rangesArray = currentDefinition.getRange();
                for (final Range range : rangesArray) {
                    final int begin = new IPv4Address(range.getBegin()).getAddress();
                    final int end = new IPv4Address(range.getEnd()).getAddress();
                    if (address >= begin && address <= end) {
                        LogUtils.debugf(this, "define: Splitting range element with begin %s and end %s", range.getBegin(), range.getEnd());

                        if (begin == end) {
                            ranges.remove(range);
                            continue;
                        }

                        if (address == begin) {
                            range.setBegin(IPv4Address.addressToString(address + 1));
                            continue;
                        }

                        if (address == end) {
                            range.setEnd(IPv4Address.addressToString(address - 1));
                            continue;
                        }

                        final Range head = new Range();
                        head.setBegin(range.getBegin());
                        head.setEnd(IPv4Address.addressToString(address - 1));

                        final Range tail = new Range();
                        tail.setBegin(IPv4Address.addressToString(address + 1));
                        tail.setEnd(range.getEnd());

                        ranges.remove(range);
                        ranges.add(head);
                        ranges.add(tail);
                    }
                }
                currentDefinition.setRange(ranges);
            }

            // Store the altered list of definitions
            m_config.setDefinition(definitions);
        } finally {
            SnmpPeerFactory.getWriteLock().unlock();
        }
    }

