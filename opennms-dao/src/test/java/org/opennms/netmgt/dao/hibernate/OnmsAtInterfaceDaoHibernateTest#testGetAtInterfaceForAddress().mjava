    @Test
    public void testGetAtInterfaceForAddress() throws UnknownHostException {
    	Collection<OnmsAtInterface> atinterfaces = m_atInterfaceDao.getAtInterfaceForAddress(InetAddress.getByName("192.168.2.1"));
    	assertEquals(1, atinterfaces.size());
    	assertEquals(1, m_atInterfaceDao.countAll());
    	
    	final OnmsAtInterface atinterface = atinterfaces.iterator().next();
    	checkAtInterface(atinterface);
    	
    	atinterfaces = m_atInterfaceDao.getAtInterfaceForAddress(InetAddress.getByName("192.168.3.1"));
       	assertEquals(1, atinterfaces.size());
    	assertEquals(1, m_atInterfaceDao.countAll());

    	final OnmsAtInterface atinterface2 = atinterfaces.iterator().next();
    	assertEquals("192.168.3.1", atinterface2.getIpAddress().getHostAddress());
    	assertEquals(m_databasePopulator.getNode3().getId(),atinterface2.getNode().getId());
    	assertEquals("", atinterface2.getMacAddress());
    	
        atinterface2.setSourceNodeId(m_databasePopulator.getNode1().getId());
        atinterface2.setIfIndex(1);
        atinterface2.setMacAddress("0080aa11aa11");
        atinterface2.setLastPollTime(new Date());
        atinterface2.setStatus(StatusType.ACTIVE);
    	
        
        m_atInterfaceDao.saveOrUpdate(atinterface2);

    	atinterfaces = m_atInterfaceDao.getAtInterfaceForAddress(InetAddress.getByName("192.168.3.1"));
       	assertEquals(1, atinterfaces.size());
    	assertEquals(2, m_atInterfaceDao.countAll());

    	final OnmsAtInterface atinterface3 = atinterfaces.iterator().next();
    	assertEquals("192.168.3.1", atinterface3.getIpAddress().getHostAddress());
    	assertEquals(m_databasePopulator.getNode3().getId(),atinterface3.getNode().getId());
    	assertEquals("0080aa11aa11", atinterface3.getMacAddress());
    	
    	atinterfaces = m_atInterfaceDao.getAtInterfaceForAddress(InetAddress.getByName("192.168.168.1"));
       	assertEquals(0, atinterfaces.size());
    	
    }

