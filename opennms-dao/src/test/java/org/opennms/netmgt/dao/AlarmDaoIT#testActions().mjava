	@Test
	@Transactional
	public void testActions() {
		OnmsEvent event = new OnmsEvent();
		event.setEventLog("Y");
		event.setEventDisplay("Y");
		event.setEventCreateTime(new Date());
		event.setDistPoller(m_distPollerDao.whoami());
		event.setEventTime(new Date());
		event.setEventSeverity(OnmsSeverity.MAJOR.getId());
		event.setEventUei("uei://org/opennms/test/EventDaoTest");
		event.setEventSource("test");
		m_eventDao.save(event);

		OnmsNode node = m_nodeDao.findAll().iterator().next();

		OnmsAlarm alarm = new OnmsAlarm();

		alarm.setNode(node);
		alarm.setUei(event.getEventUei());
		alarm.setSeverity(OnmsSeverity.get(event.getEventSeverity()));
		alarm.setSeverityId(event.getEventSeverity());
		alarm.setFirstEventTime(event.getEventTime());
		alarm.setLastEvent(event);
		alarm.setCounter(1);
		alarm.setDistPoller(m_distPollerDao.whoami());

		m_alarmDao.save(alarm);

		OnmsAlarm newAlarm = m_alarmDao.load(alarm.getId());
		assertEquals("uei://org/opennms/test/EventDaoTest", newAlarm.getUei());
		assertEquals(alarm.getLastEvent().getId(), newAlarm.getLastEvent().getId());

		assertEquals(OnmsSeverity.MAJOR, newAlarm.getSeverity());

		newAlarm.escalate("admin");
		assertEquals(OnmsSeverity.CRITICAL, newAlarm.getSeverity());

		newAlarm.clear("admin");
		assertEquals(OnmsSeverity.CLEARED, newAlarm.getSeverity());

		newAlarm.unacknowledge("admin");
		assertNull(newAlarm.getAckUser());
		assertNull(newAlarm.getAlarmAckTime());

	}

