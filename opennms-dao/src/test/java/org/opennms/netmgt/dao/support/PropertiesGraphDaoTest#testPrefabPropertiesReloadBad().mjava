    public void testPrefabPropertiesReloadBad() throws Exception {
        /*
         * We're not going to use the anticipator functionality, but it's
         * handy for handling temporary directories.
         */
        FileAnticipator fa = new FileAnticipator();
        
        MockLogAppender.setupLogging(false, "DEBUG");
        
        try {
            File f = fa.tempFile("snmp-graph.properties");

            Writer writer = new OutputStreamWriter(new FileOutputStream(f), "UTF-8");
            writer.write(s_prefab);
            writer.close();

            HashMap<String, Resource> perfConfig = new HashMap<String, Resource>();
            perfConfig.put("performance", new FileSystemResource(f));
            PropertiesGraphDao dao = createPropertiesGraphDao(perfConfig, s_emptyMap);
            PrefabGraphTypeDao type = dao.findPrefabGraphTypeDaoByName("performance");
            assertNotNull("could not get performance prefab graph type", type);
            
            assertNotNull("could not get mib2.bits report", type.getQuery("mib2.bits"));
            assertNotNull("could not get mib2.discards report", type.getQuery("mib2.discards"));

            Thread.sleep(1100);

            writer = new OutputStreamWriter(new FileOutputStream(f), "UTF-8");
            // Don't include the reports line at all so we get an error
            String noReports = s_prefab.replace("reports=mib2.HCbits, mib2.bits, mib2.discards", "");
            writer.write(noReports);
            writer.close();
            
            type = dao.findPrefabGraphTypeDaoByName("performance");
            LoggingEvent[] events = MockLogAppender.getEvents();
            assertNotNull("logged event list was null", events);
            assertEquals("should only have received two logged events", 2, events.length);
            assertEquals("should have received an ERROR event" + events[0], Level.ERROR, events[0].getLevel());
            assertEquals("should have received an INFO event" + events[1], Level.INFO, events[1].getLevel());
            MockLogAppender.resetEvents();

            assertNotNull("could not get performance prefab graph type after rewriting config file", type);
            assertNotNull("could not get mib2.bits report after rewriting config file", type.getQuery("mib2.bits"));
            
            //Expecting the same events again, as the individual graph reload attempts to re-read the config file
            events = MockLogAppender.getEvents();
            assertNotNull("logged event list was null", events);
            assertEquals("should only have received two logged events", 2, events.length);
            assertEquals("should have received an ERROR event" + events[0], Level.ERROR, events[0].getLevel());
            assertEquals("should have received an INFO event" + events[1], Level.INFO, events[1].getLevel());
            MockLogAppender.resetEvents();
            
            assertNotNull("could not get mib2.discards report after rewriting config file", type.getQuery("mib2.discards"));
            //And again, same events
            events = MockLogAppender.getEvents();
            assertNotNull("logged event list was null", events);
            assertEquals("should only have received two logged events", 2, events.length);
            assertEquals("should have received an ERROR event" + events[0], Level.ERROR, events[0].getLevel());
            assertEquals("should have received an INFO event" + events[1], Level.INFO, events[1].getLevel());
            MockLogAppender.resetEvents();

        } finally {
            fa.deleteExpected();
            fa.tearDown();
        }
    }

