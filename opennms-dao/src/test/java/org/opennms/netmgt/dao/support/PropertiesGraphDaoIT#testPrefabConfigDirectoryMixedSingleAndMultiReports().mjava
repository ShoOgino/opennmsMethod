    /**
     * Test that properties files in an included directory with
     * multiple graphs defined in some, and single graphs in others, are loaded correctly
     */
    @Test
    public void testPrefabConfigDirectoryMixedSingleAndMultiReports() throws IOException {
        File rootFile = m_fileAnticipator.tempFile("snmp-graph.properties");
        File graphDirectory = m_fileAnticipator.tempDir("snmp-graph.properties.d");
        
        File multiFile = m_fileAnticipator.tempFile(graphDirectory, "mib2-1.properties");
        File graphBits = m_fileAnticipator.tempFile(graphDirectory, "mib2.bits.properties");
        File graphHCbits = m_fileAnticipator.tempFile(graphDirectory, "mib2.HCbits.properties");

        m_outputStream = new FileOutputStream(rootFile);
        m_writer = new OutputStreamWriter(m_outputStream, "UTF-8");
        m_writer.write(s_baseIncludePrefab);
        m_writer.close();
        m_outputStream.close();
                    
        graphDirectory.mkdir();
        m_outputStream = new FileOutputStream(graphBits);
        m_writer = new OutputStreamWriter(m_outputStream, "UTF-8");
        m_writer.write(s_separateBitsGraph);
        m_writer.close();
        m_outputStream.close();
        
        m_outputStream = new FileOutputStream(graphHCbits);
        m_writer = new OutputStreamWriter(m_outputStream, "UTF-8");
        m_writer.write(s_separateHCBitsGraph);
        m_writer.close();
        m_outputStream.close();
                    
        graphDirectory.mkdir();
        m_outputStream = new FileOutputStream(multiFile);
        m_writer = new OutputStreamWriter(m_outputStream, "UTF-8");
        m_writer.write(s_includedMultiGraph1);
        m_writer.close();
        m_outputStream.close();

        HashMap<String, Resource> prefabConfigs = new HashMap<String, Resource>();
        prefabConfigs.put("performance", new FileSystemResource(rootFile));

        PropertiesGraphDao dao = createPropertiesGraphDao(prefabConfigs, s_emptyMap);
        
        //Check the graphs, basically ensuring that a handful of unique but easily checkable 
        // bits are uniquely what they should be.
        
        //We check all 4 graphs
        PrefabGraph mib2Bits = dao.getPrefabGraph("mib2.bits");
        assertNotNull(mib2Bits);
        assertEquals("mib2.bits", mib2Bits.getName());
        assertEquals("Bits In/Out", mib2Bits.getTitle());
        String columns1[] = {"ifInOctets","ifOutOctets"};
        Assert.assertArrayEquals(columns1, mib2Bits.getColumns());

        PrefabGraph mib2HCBits = dao.getPrefabGraph("mib2.HCbits");
        assertNotNull(mib2HCBits);
        assertEquals("mib2.HCbits", mib2HCBits.getName());
        assertEquals("Bits In/Out", mib2HCBits.getTitle());
        String columns2[] = {"ifHCInOctets","ifHCOutOctets"};
        Assert.assertArrayEquals(columns2, mib2HCBits.getColumns());
        
        PrefabGraph mib2Discards = dao.getPrefabGraph("mib2.discards");
        assertNotNull(mib2Discards);
        assertEquals("mib2.discards", mib2Discards.getName());
        assertEquals("Discards In/Out", mib2Discards.getTitle());
        String columns3[] = {"ifInDiscards","ifOutDiscards"};
        Assert.assertArrayEquals(columns3, mib2Discards.getColumns());

        PrefabGraph mib2Errors = dao.getPrefabGraph("mib2.errors");
        assertNotNull(mib2Errors);
        assertEquals("mib2.errors", mib2Errors.getName());
        assertEquals("Errors In/Out", mib2Errors.getTitle());
        String columns4[] = {"ifInErrors","ifOutErrors"};
        Assert.assertArrayEquals(columns4, mib2Errors.getColumns());
    }

