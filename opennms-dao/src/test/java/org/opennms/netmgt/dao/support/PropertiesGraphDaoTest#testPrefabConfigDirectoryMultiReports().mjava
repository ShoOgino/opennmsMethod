    /**
     * Test that properties files in an included directory with
     * multiple graphs defined in them are loaded correctly
     */
    public void testPrefabConfigDirectoryMultiReports() throws IOException {
        /*
         * We're not going to use the anticipator functionality, but it's
         * handy for handling temporary directories.
         */
        FileAnticipator fa = new FileAnticipator();

        try {
            File rootFile = fa.tempFile("snmp-graph.properties");
            File graphDirectory = fa.tempDir("snmp-graph.properties.d");
            
            File multiFile1 = fa.tempFile(graphDirectory, "mib2.bits1.properties");
            File multiFile2 = fa.tempFile(graphDirectory, "mib2.bits2.properties");
                        
            Writer writer = new OutputStreamWriter(new FileOutputStream(rootFile), "UTF-8");
            writer.write(s_baseIncludePrefab);
            writer.close();
                        
            graphDirectory.mkdir();
            writer = new OutputStreamWriter(new FileOutputStream(multiFile1), "UTF-8");
            writer.write(s_includedMultiGraph1);
            writer.close();
            writer = new OutputStreamWriter(new FileOutputStream(multiFile2), "UTF-8");
            writer.write(s_includedMultiGraph2);
            writer.close();
           
    
            HashMap<String, Resource> prefabConfigs = new HashMap<String, Resource>();
            prefabConfigs.put("performance", new FileSystemResource(rootFile));

            PropertiesGraphDao dao = createPropertiesGraphDao(prefabConfigs, s_emptyMap);
            
            //Check the graphs, basically ensuring that a handful of unique but easily checkable 
            // bits are uniquely what they should be.
            
            //We check all 4 graphs
            PrefabGraph mib2Bits = dao.getPrefabGraph("mib2.bits");
            assertNotNull(mib2Bits);
            assertEquals("mib2.bits", mib2Bits.getName());
            assertEquals("Bits In/Out", mib2Bits.getTitle());
            String columns1[] = {"ifInOctets","ifOutOctets"};
            Assert.assertArrayEquals(columns1, mib2Bits.getColumns());

            PrefabGraph mib2HCBits = dao.getPrefabGraph("mib2.HCbits");
            assertNotNull(mib2HCBits);
            assertEquals("mib2.HCbits", mib2HCBits.getName());
            assertEquals("Bits In/Out", mib2HCBits.getTitle());
            String columns2[] = {"ifHCInOctets","ifHCOutOctets"};
            Assert.assertArrayEquals(columns2, mib2HCBits.getColumns());
            
            PrefabGraph mib2Discards = dao.getPrefabGraph("mib2.discards");
            assertNotNull(mib2Discards);
            assertEquals("mib2.discards", mib2Discards.getName());
            assertEquals("Discards In/Out", mib2Discards.getTitle());
            String columns3[] = {"ifInDiscards","ifOutDiscards"};
            Assert.assertArrayEquals(columns3, mib2Discards.getColumns());

            PrefabGraph mib2Errors = dao.getPrefabGraph("mib2.errors");
            assertNotNull(mib2Errors);
            assertEquals("mib2.errors", mib2Errors.getName());
            assertEquals("Errors In/Out", mib2Errors.getTitle());
            String columns4[] = {"ifInErrors","ifOutErrors"};
            Assert.assertArrayEquals(columns4, mib2Errors.getColumns());
       }
        finally {
            fa.deleteExpected();
            fa.tearDown();
        }
    }

