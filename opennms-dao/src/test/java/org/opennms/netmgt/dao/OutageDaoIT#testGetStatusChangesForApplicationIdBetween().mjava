    @Test
    @Transactional
    public void testGetStatusChangesForApplicationIdBetween() {
        final OnmsMonitoringLocation rdu = new OnmsMonitoringLocation();
        rdu.setLocationName("RDU");
        rdu.setMonitoringArea("USA");
        rdu.setPriority(1L);
        m_monitoringLocationDao.save(rdu);

        final OnmsMonitoringLocation fulda = new OnmsMonitoringLocation();
        fulda.setLocationName("Fulda");
        fulda.setMonitoringArea("Germany");
        fulda.setPriority(1L);
        m_monitoringLocationDao.save(fulda);

        final OnmsMonitoringLocation ottawa = new OnmsMonitoringLocation();
        ottawa.setLocationName("Ottawa");
        ottawa.setMonitoringArea("Canada");
        ottawa.setPriority(1L);
        m_monitoringLocationDao.save(ottawa);

        final OnmsNode node = new OnmsNode(m_locationDao.getDefaultLocation(), "node");
        m_nodeDao.save(node);

        final OnmsMonitoredService app1Service1 = getMonitoredService(getIpInterface("172.16.1.1", node), getServiceType("ICMP"));
        final OnmsMonitoredService app1Service2 = getMonitoredService(getIpInterface("172.16.1.2", node), getServiceType("ICMP"));
        final OnmsMonitoredService service3 = getMonitoredService(getIpInterface("172.18.1.2", node), getServiceType("ICMP"));

        final OnmsApplication app1 = new OnmsApplication();
        app1.setName("APP1");
        app1.getPerspectiveLocations().add(rdu);
        app1.getPerspectiveLocations().add(fulda);
        int app1Id = this.m_applicationDao.save(app1);

        app1Service1.setApplications(Sets.newHashSet(app1));
        app1Service2.setApplications(Sets.newHashSet(app1));
        this.m_monitoredServiceDao.saveOrUpdate(app1Service1);
        this.m_monitoredServiceDao.saveOrUpdate(app1Service2);

        assertEquals(0, this.m_outageDao.findAll().size());
        assertEquals(0, this.m_outageDao.getStatusChangesForApplicationIdBetween(new Date(10000), new Date(20000), app1Id).size());

        // Case #1 |---|               |---|
        // Timeframe    | <- - - - -> |
        addOutage(rdu, app1Service1, 9000L, 9500L);
        addOutage(rdu, app1Service1, 20500L, 21000L);
        assertEquals(2, this.m_outageDao.findAll().size());
        assertEquals(0, this.m_outageDao.getStatusChangesForApplicationIdBetween(new Date(10000), new Date(20000), app1Id).size());

        // Case #2    |---|
        // Timeframe    | <- - - - -> |
        addOutage(rdu, app1Service1, 5000L, 15000L);
        assertEquals(3, this.m_outageDao.findAll().size());
        assertEquals(1, this.m_outageDao.getStatusChangesForApplicationIdBetween(new Date(10000), new Date(20000), app1Id).size());

        // Case #3           |---|
        // Timeframe    | <- - - - -> |
        addOutage(rdu, app1Service2, 12500L, 17500L);
        assertEquals(4, this.m_outageDao.findAll().size());
        assertEquals(2, this.m_outageDao.getStatusChangesForApplicationIdBetween(new Date(10000), new Date(20000), app1Id).size());

        // Case #4                  |---|
        // Timeframe    | <- - - - -> |
        addOutage(rdu, app1Service1, 15000L, 25000L);
        assertEquals(5, this.m_outageDao.findAll().size());
        assertEquals(3, this.m_outageDao.getStatusChangesForApplicationIdBetween(new Date(10000), new Date(20000), app1Id).size());

        // Case #5                  |---> ongoing
        // Timeframe    | <- - - - -> |
        addOutage(rdu, app1Service2, 15000L, null);
        assertEquals(6, this.m_outageDao.findAll().size());
        assertEquals(4, this.m_outageDao.getStatusChangesForApplicationIdBetween(new Date(10000), new Date(20000), app1Id).size());

        // Case #6    |-----------------|
        // Timeframe    | <- - - - -> |
        addOutage(rdu, app1Service1, 5000L, 25000L);
        assertEquals(7, this.m_outageDao.findAll().size());
        assertEquals(5, this.m_outageDao.getStatusChangesForApplicationIdBetween(new Date(10000), new Date(20000), app1Id).size());

        // Case #7    |-----------------> ongoing
        // Timeframe    | <- - - - -> |
        addOutage(rdu, app1Service1, 5000L, null);
        assertEquals(8, this.m_outageDao.findAll().size());
        assertEquals(6, this.m_outageDao.getStatusChangesForApplicationIdBetween(new Date(10000), new Date(20000), app1Id).size());

        // now, insert stuff in the time interval that is not related to the application's services and locations
        addOutage(rdu, service3, 11000L, 19000L);
        addOutage(fulda, service3, 12000L, 18000L);
        addOutage(ottawa, app1Service1, 13000L, 17000L);
        addOutage(ottawa, app1Service2, 14000L, 16000L);

        assertEquals(12, this.m_outageDao.findAll().size());
        assertEquals(6, this.m_outageDao.getStatusChangesForApplicationIdBetween(new Date(10000), new Date(20000), app1Id).size());
    }

