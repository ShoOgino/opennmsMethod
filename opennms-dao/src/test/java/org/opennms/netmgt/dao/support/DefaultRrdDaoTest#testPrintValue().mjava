    public void testPrintValue() throws Exception {
        String rrdDir = "snmp/1/eth0";
        String rrdFile = "ifInOctets.jrb";
        
        long end = System.currentTimeMillis();
        long start = end - (24 * 60 * 60 * 1000);
        String[] command = new String[] {
                m_dao.getRrdBinaryPath(),
                "graph",
                "-",
                "--start=" + (start / 1000),
                "--end=" + (end / 1000),
                "DEF:ds=" + rrdDir + File.separator + rrdFile + ":ifInOctets:AVERAGE",
                "PRINT:ds:AVERAGE:\"%le\""
        };
        String commandString = StringUtils.arrayToDelimitedString(command, " ");
        
        OnmsResource topResource = new OnmsResource("1", "Node One", new MockResourceType(), new HashSet<OnmsAttribute>(0));

        OnmsAttribute attribute = new RrdGraphAttribute("ifInOctets", rrdDir, rrdFile);
        HashSet<OnmsAttribute> attributeSet = new HashSet<OnmsAttribute>(1);
        attributeSet.add(attribute);
        
        MockResourceType childResourceType = new MockResourceType();
        OnmsResource childResource = new OnmsResource("eth0", "Interface One: eth0", childResourceType, attributeSet);
        childResource.setParent(topResource);
        
        DefaultRrdGraphDetails details = new DefaultRrdGraphDetails();
        details.setPrintLines(new String[] { "1" });
        expect(m_rrdStrategy.createGraphReturnDetails(commandString, m_dao.getRrdBaseDirectory())).andReturn(details);

        m_mocks.replayAll();
        Double value = m_dao.getPrintValue(childResource.getAttributes().iterator().next(), "AVERAGE", start, end);
        m_mocks.verifyAll();
        
        assertNotNull("value should not be null", value);
        assertEquals("value", 1.0, value);
    }

