    protected PlatformTransactionManager setUp(DB db, boolean createDb) throws Exception {
    	m_createDb = createDb;
        if (isUsePool()) {
            m_dataSource = db.getPoolingDataSource();
        } else {
            m_dataSource = db.getDataSource();
        }
        
        Class[] annotatedClasses = {
        	OnmsDistPoller.class,
        	OnmsNode.class,
        	OnmsAssetRecord.class,
        	OnmsIpInterface.class,
        	OnmsSnmpInterface.class,
        	OnmsMonitoredService.class,
        	OnmsCategory.class,
        	OnmsServiceType.class,
        	OnmsOutage.class,
        	OnmsEvent.class,
        	OnmsAlarm.class,
        	OnmsNotification.class,
        	OnmsUserNotification.class,
            org.opennms.netmgt.model.AggregateStatusView.class,
            org.opennms.netmgt.model.AggregateStatusDefinition.class,

        };
        
        String[] annotatedPackages = {
        		"com.opennms.netmgt.model"
        };
        
        AnnotationSessionFactoryBean sfb = new AnnotationSessionFactoryBean();
        sfb.setAnnotatedClasses(annotatedClasses);
        sfb.setAnnotatedPackages(annotatedPackages);
		setLsfb(sfb);
        getLsfb().setDataSource(m_dataSource);
        Properties props = new Properties();
        props.put("hibernate.dialect", db.getHibernateDialect());
        props.put("hibernate.show_sql", System.getProperty("hibernate.show_sql", "false"));

        //c3p0 settings
        props.put("hibernate.c3p0.min_size", "1");
        props.put("hibernate.c3p0.max_size", "256");
        props.put("hibernate.c3p0.timeout", "1800");
        props.put("hibernate.pool_size", "0");
        
        props.put("hibernate.format_sql", "true");
        props.put("hibernate.cache.use_second_level_cache", "false");
        props.put("hibernate.cache", "false");
        //props.put("hibernate.cache.use_query_cache", "true");
        props.put("hibernate.jdbc.batch_size", "0");
        //props.put("hibernate.hbm2ddl.auto", "create-drop");
        getLsfb().setHibernateProperties(props);
        
        //m_lsfb.setEventListeners(null);
        
        getLsfb().afterPropertiesSet();
        m_lsfbInitialized = true;
    
        
        setFactory((SessionFactory)getLsfb().getObject());
       
        
//        if (createDb) {
//            //m_lsfb.createDatabaseSchema();
//            getLsfb().updateDatabaseSchema();
//        }
        

        List<File> sqlFiles = new LinkedList<File>();
        sqlFiles.add(new File("../opennms-daemon/src/main/filtered/etc/create.sql"));

        FileFilter sqlFilter = new FileFilter() {
            public boolean accept(File pathname) {
                return (pathname.getName().startsWith("get") && pathname.getName().endsWith(".sql"))
                     || pathname.getName().endsWith("Trigger.sql");
            }
        };

        File[] list = new File("../opennms-daemon/src/main/filtered/etc").listFiles(sqlFilter);
        sqlFiles.addAll(Arrays.asList(list));
        
        /*
        Resource resource = new ClassPathResource("create.sql");
        File createSql = resource.getFile();
             */

        if (createDb) {
           for (File sqlFile : sqlFiles) {
               String cmd = System.getProperty("psql.command", "psql") ;
               System.err.println("psql.command = " + cmd);
               cmd = cmd+" test -U opennms -f " + sqlFile.getAbsolutePath();

               System.err.println("Executing: " + cmd);
               Process p = Runtime.getRuntime().exec(cmd);
               ReaderEater inputEater = new ReaderEater(new BufferedReader(new InputStreamReader(p.getInputStream())));
               ReaderEater errorEater = new ReaderEater(new BufferedReader(new InputStreamReader(p.getErrorStream())));
               inputEater.start();
               errorEater.start();
               p.waitFor();
               inputEater.getReader().close();
               errorEater.getReader().close();
            
               System.err.println("Got an exitValue of "+p.exitValue());
               p.destroy();
           }
        }
        
        HibernateTransactionManager m_transMgr = new HibernateTransactionManager();
        m_transMgr.setSessionFactory(getFactory());
        m_transMgr.afterPropertiesSet();
        
        
        return m_transMgr;
    }

