    protected PlatformTransactionManager setUp(DB db, boolean createDb) throws IOException {

        DataSource dataSource;
        if (isUsePool()) {
            dataSource = db.getPoolingDataSource();
        } else {
            dataSource = db.getDataSource();
        }
        setLsfb(new LocalSessionFactoryBean());
        getLsfb().setDataSource(dataSource);
        Properties props = new Properties();
        props.put("hibernate.dialect", db.getHibernateDialect());
        props.put("hibernate.show_sql", "true");

        //c3p0 settings
        props.put("hibernate.c3p0.min_size", "1");
        props.put("hibernate.c3p0.max_size", "256");
        props.put("hibernate.c3p0.timeout", "1800");
        props.put("hibernate.pool_size", "0");
        
        //props.put("hibernate.format_sql", "true");
        //props.put("hibernate.cache.use_query_cache", "true");
        //props.put("hibernate.jdbc.batch_size", "0");
        //props.put("hibernate.hbm2ddl.auto", "create-drop");
        getLsfb().setHibernateProperties(props);
        Resource modelDir = new ClassPathResource("org/opennms/netmgt/model");
        getLsfb().setMappingDirectoryLocations(new Resource[] { modelDir });
        
        //m_lsfb.setEventListeners(null);
        
        getLsfb().afterPropertiesSet();
        m_lsfbInitialized = true;
    
        
        setFactory((SessionFactory)getLsfb().getObject());
        
        if (createDb) {
            //m_lsfb.createDatabaseSchema();
            getLsfb().updateDatabaseSchema();
        }
    
        HibernateTransactionManager m_transMgr = new HibernateTransactionManager();
        m_transMgr.setSessionFactory(getFactory());
        m_transMgr.afterPropertiesSet();
        return m_transMgr;
    }

