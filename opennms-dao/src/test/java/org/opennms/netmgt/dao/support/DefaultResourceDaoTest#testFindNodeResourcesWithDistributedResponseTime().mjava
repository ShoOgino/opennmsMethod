    @Test
    public void testFindNodeResourcesWithDistributedResponseTime() throws Exception {
        List<OnmsNode> nodes = new LinkedList<>();
        OnmsNode node = createNode();
        OnmsIpInterface ip = createIpInterface();
        node.addIpInterface(ip);
        nodes.add(node);

        expect(m_nodeDao.findAll()).andReturn(nodes);

        File response = m_fileAnticipator.tempDir("response");
        File distributed = m_fileAnticipator.tempDir(response, "distributed");
        File monitor = m_fileAnticipator.tempDir(distributed, LOCATION_MONITOR_ID);
        File ipDir = m_fileAnticipator.tempDir(monitor, "192.168.1.1");
        m_fileAnticipator.tempFile(ipDir, "icmp" + m_rrdFileExtension);

        expect(m_resourceTypesDao.getLastUpdate()).andReturn(m_lastUpdateTime);

        // Setup the status to match the path on disk
        OnmsLocationMonitor locMon = new OnmsLocationMonitor();
        locMon.setId(LOCATION_MONITOR_ID);
        OnmsIpInterface ipIntf = new OnmsIpInterface();
        ipIntf.setIpAddress(InetAddress.getByName("192.168.1.1"));
        LocationMonitorIpInterface locMonIpIntf = new LocationMonitorIpInterface(locMon, ipIntf);

        expect(m_locationMonitorDao.findStatusChangesForNodeForUniqueMonitorAndInterface(node.getId())).andReturn(Collections.singleton(locMonIpIntf)).anyTimes();

        m_easyMockUtils.replayAll();
        List<OnmsResource> resources = m_resourceDao.findTopLevelResources();
        m_easyMockUtils.verifyAll();

        assertNotNull("Resource list should not be null", resources);
        assertEquals("Resource list size", 1, resources.size());
    }

