    public void testPrefabPropertiesIncludeDirectoryReloadSingleReports() throws Exception {
        /*
         * We're not going to use the anticipator functionality, but it's
         * handy for handling temporary directories.
         */
        FileAnticipator fa = new FileAnticipator();
        
        try {
            File rootFile = fa.tempFile("snmp-graph.properties");
            File graphDirectory = fa.tempDir("snmp-graph.properties.d");
            File graphBits = fa.tempFile(graphDirectory, "mib2.bits.properties");

            Writer writer = new OutputStreamWriter(new FileOutputStream(rootFile), "UTF-8");
            writer.write(s_baseIncludePrefab);
            writer.close();
            
            graphDirectory.mkdir();
            writer = new OutputStreamWriter(new FileOutputStream(graphBits), "UTF-8");
            writer.write(s_separateBitsGraph);
            writer.close();
       
            
            HashMap<String, Resource> perfConfig = new HashMap<String, Resource>();
            perfConfig.put("performance", new FileSystemResource(rootFile));
            PropertiesGraphDao dao = createPropertiesGraphDao(perfConfig, s_emptyMap);
                        
            PrefabGraph graph = dao.getPrefabGraph("mib2.bits");
            assertNotNull("could not get mib2.bits report", graph);
            assertEquals("ifSpeed", graph.getExternalValues()[0]);

            Thread.sleep(1100);

            writer = new OutputStreamWriter(new FileOutputStream(graphBits), "UTF-8");
            writer.write(s_separateBitsGraph.replace("ifSpeed", "anotherExternalValue"));
            writer.close();
            
            graph = dao.getPrefabGraph("mib2.bits");
            assertNotNull("could not get mib2.bits report after rewriting config file", graph);
            assertEquals("anotherExternalValue", graph.getExternalValues()[0]);
            
        } finally {
            fa.deleteExpected();
            fa.tearDown();
        }
    }

