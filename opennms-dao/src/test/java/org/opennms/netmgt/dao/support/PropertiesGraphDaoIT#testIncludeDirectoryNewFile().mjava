	/**
	 * Test that adding a new properties file into an included directory
	 * will be picked up.  Requires the include.directory.rescan to be set low 
	 * @throws Exception
	 */
	@Test
	public void testIncludeDirectoryNewFile() throws Exception {
	    File rootFile = m_fileAnticipator.tempFile("snmp-graph.properties");
	
	    m_outputStream = new FileOutputStream(rootFile);
	    m_writer = new OutputStreamWriter(m_outputStream, "UTF-8");
	    m_writer.write(s_baseIncludePrefab);
	    m_writer.close();
	    m_outputStream.close();
	    
	    File graphDirectory = m_fileAnticipator.tempDir("snmp-graph.properties.d");
	    graphDirectory.mkdir();
	
	    HashMap<String, Resource> perfConfig = new HashMap<String, Resource>();
	    perfConfig.put("performance", new FileSystemResource(rootFile));
	    PropertiesGraphDao dao = createPropertiesGraphDao(perfConfig, s_emptyMap);
	
	    try {
	        PrefabGraph mib2errors = dao.getPrefabGraph("mib2.errors");
	        fail("Should have thrown an ObjectRetrievalFailureException retrieving graph " + mib2errors);
	    } catch (ObjectRetrievalFailureException e) {
	        
	    }
	
	    //Now create the new graph in a sub-directory; see if it gets read
	    File graphErrors = m_fileAnticipator.tempFile(graphDirectory, "mib2.errors.properties");
	    m_outputStream = new FileOutputStream(graphErrors);
	    m_writer = new OutputStreamWriter(m_outputStream, "UTF-8");
	    m_writer.write(s_separateErrorsGraph);
	    m_writer.close();
	    m_outputStream.close();
	
	    //Wait longer than the rescan timeout on the include directory
	    Thread.sleep(1100);
	    
	    assertNotNull(dao.getPrefabGraph("mib2.errors")); //This is the core: this graph should have been picked up
	}

