    /*
     * On hybrid environments where some nodes have been discovered and other nodes are part of a requisition,
     * the top level resources are always going to be built using NodeResourceType only if storeByForeignSource
     * is disabled.
     * But, if storeByForeignSource is enabled, the resources associated with discovered nodes are going to be
     * built by NodeResourceType, and the resources associated with requisitioned nodes are going to be built by
     * NodeSourceResourceType.
     */
    private void execute_testFindTopLevelResources_hybridNodes(boolean storeByForeignSource) throws Exception {
        setStoreByForeignSource(storeByForeignSource);
        final String foreignSource = "Junit";
        final List<OnmsNode> nodes = new ArrayList<OnmsNode>();

        OnmsNode n1 = createNode(1, "node1", null, null, "10.0.0.1"); // Discovered node on the DB with RRD Data
        nodes.add(n1);
        OnmsNode n2 = createNode(2, "node2", foreignSource, "node2", "10.0.0.2"); // Requisitioned node on the DB with RRD Data
        nodes.add(n2);
        OnmsNode n3 = createNode(3, "node3", null, null, "10.0.0.3"); // Discovered node on the DB with No RRD Data
        nodes.add(n3);
        OnmsNode n4 = createNode(4, "node4", foreignSource, "node4", "10.0.0.4"); // Requisitioned node on the DB with RRD Data
        nodes.add(n4);

        expect(m_resourceTypesDao.getLastUpdate()).andReturn(new Date(System.currentTimeMillis())).atLeastOnce();
        expect(m_resourceTypesDao.getResourceTypes()).andReturn(new HashMap<String, ResourceType>());
        expect(m_nodeDao.findAll()).andReturn(nodes);

        expect(m_locationMonitorDao.findStatusChangesForNodeForUniqueMonitorAndInterface(n1.getId())).andReturn(new ArrayList<LocationMonitorIpInterface>(0));
        expect(m_locationMonitorDao.findStatusChangesForNodeForUniqueMonitorAndInterface(n2.getId())).andReturn(new ArrayList<LocationMonitorIpInterface>(0));
        expect(m_locationMonitorDao.findStatusChangesForNodeForUniqueMonitorAndInterface(n3.getId())).andReturn(new ArrayList<LocationMonitorIpInterface>(0));
        expect(m_locationMonitorDao.findStatusChangesForNodeForUniqueMonitorAndInterface(n4.getId())).andReturn(new ArrayList<LocationMonitorIpInterface>(0));

        // Common directories
        File snmpDir = m_fileAnticipator.tempDir(ResourceTypeUtils.SNMP_DIRECTORY);
        File responseDir = m_fileAnticipator.tempDir(ResourceTypeUtils.RESPONSE_DIRECTORY);
        File featureDir = m_fileAnticipator.tempDir(snmpDir, ResourceTypeUtils.FOREIGN_SOURCE_DIRECTORY);
        File fsDir = m_fileAnticipator.tempDir(featureDir, foreignSource);

        // RRD Directory for n1
        File node1Dir = m_fileAnticipator.tempDir(snmpDir, n1.getId().toString());
        m_fileAnticipator.tempFile(node1Dir, "data" + m_rrdFileExtension);

        // RRD Directory for n2
        File node2Dir = null;
        if (storeByForeignSource) {
            node2Dir = m_fileAnticipator.tempDir(fsDir, n2.getForeignId());
        } else {
            node2Dir = m_fileAnticipator.tempDir(snmpDir, n2.getId().toString());
        }
        m_fileAnticipator.tempFile(node2Dir, "data" + m_rrdFileExtension);

        // RRD Directory for an orphan discovered node
        m_fileAnticipator.tempFile(m_fileAnticipator.tempDir(snmpDir, "100"), "data" + m_rrdFileExtension);

        // RRD Directory for an orphan requisitioned node
        File orphanDir = null;
        if (storeByForeignSource) {
            orphanDir = m_fileAnticipator.tempDir(fsDir, "orphan_node");
        } else {
            orphanDir = m_fileAnticipator.tempDir(snmpDir, "101");
        }
        m_fileAnticipator.tempFile(orphanDir, "data" + m_rrdFileExtension);

        // Response Time RRD Directory for n1
        File ip1Dir = m_fileAnticipator.tempDir(responseDir, n1.getIpInterfaces().iterator().next().getIpAddress().getHostAddress());
        m_fileAnticipator.tempFile(ip1Dir, "icmp" + m_rrdFileExtension);

        // Response Time RRD Directory for n2
        File ip2Dir = m_fileAnticipator.tempDir(responseDir, n2.getIpInterfaces().iterator().next().getIpAddress().getHostAddress());
        m_fileAnticipator.tempFile(ip2Dir, "icmp" + m_rrdFileExtension);

        m_easyMockUtils.replayAll();
        m_resourceDao.afterPropertiesSet();

        List<OnmsResource> resources = m_resourceDao.findTopLevelResources();
        Assert.assertNotNull(resources);
        Collections.sort(resources);
        Assert.assertEquals(2, resources.size());

        if (storeByForeignSource) {
            OnmsResource r1 = resources.get(0); // parent resource for the provisioned node 
            List<OnmsResource> children1 = r1.getChildResources();
            Collections.sort(children1);
            Assert.assertEquals("nodeSource[Junit%3Anode2]", r1.getId());
            Assert.assertEquals("nodeSource[Junit%3Anode2].responseTime[10.0.0.2]", children1.get(0).getId());
            Assert.assertEquals("nodeSource[Junit%3Anode2].nodeSnmp[]", children1.get(1).getId());

            OnmsResource r2 = resources.get(1); // parent resource for the discovered node
            Assert.assertEquals("node[1]", r2.getId());
            List<OnmsResource> children2 = r2.getChildResources();
            Collections.sort(children2);
            Assert.assertEquals(2, children2.size());
            Assert.assertEquals("node[1].responseTime[10.0.0.1]", children2.get(0).getId());
            Assert.assertEquals("node[1].nodeSnmp[]", children2.get(1).getId());

        } else {
            OnmsResource r1 = resources.get(1); // parent resource for the provisioned node 
            List<OnmsResource> children1 = r1.getChildResources();
            Collections.sort(children1);
            Assert.assertEquals("node[2]", r1.getId());
            Assert.assertEquals("node[2].responseTime[10.0.0.2]", children1.get(0).getId());
            Assert.assertEquals("node[2].nodeSnmp[]", children1.get(1).getId());

            OnmsResource r2 = resources.get(0); // parent resource for the discovered node
            Assert.assertEquals("node[1]", r2.getId());
            List<OnmsResource> children2 = r2.getChildResources();
            Collections.sort(children2);
            Assert.assertEquals(2, children2.size());
            Assert.assertEquals("node[1].responseTime[10.0.0.1]", children2.get(0).getId());
            Assert.assertEquals("node[1].nodeSnmp[]", children2.get(1).getId());
        }

        m_easyMockUtils.verifyAll();
    }

