    public void testIfServicesForeignKeyIpInterfaceIdOnUpgrade()
            throws Exception {
        getInstallerDb().createSequences();
        getInstallerDb().updatePlPgsql();
        getInstallerDb().addStoredProcedures();

        addTableFromSQL("distPoller");
        addTableFromSQL("node");
        addTableFromSQL("snmpinterface");

        // No ID column
        addTableFromSQLWithReplacements("ipinterface",
                                        new String[][] {
                                                new String[] {
                                                        "(?i)id\\s+integer default nextval\\('opennmsNxtId'\\) not null,",
                                                        "" },
                                                new String[] {
                                                        "(?i)constraint ipinterface_pkey primary key \\(id\\),",
                                                        "" } });

        addTableFromSQL("service");

        // No ID or ipInterfaceID column
        addTableFromSQLWithReplacements("ifservices",
                                        new String[][] {
                /*
                                                new String[] {
                                                        "(?i)id\\s+integer default nextval\\('opennmsNxtId'\\) not null,",
                                                        "" },
                                                new String[] {
                                                        "(?i)constraint ifServices_pkey primary key \\(id\\),",
                                                        "" },
                                                        */
                                                new String[] {
                                                        "(?i)ipInterfaceID\\s+integer not null,",
                                                        "" },
                                                new String[] {
                                                        "(?i)constraint ipinterface_fkey foreign key \\(ipInterfaceId\\) references ipInterface \\(id\\) ON DELETE CASCADE,",
                                                        "" } }, false);

        executeSQL("INSERT INTO node (nodeId, nodeCreateTime) VALUES ( 1, now() )");
        executeSQL("INSERT INTO ipInterface (nodeId, ipAddr, ifIndex) VALUES ( 1, '1.2.3.4', null )");
        executeSQL("INSERT INTO service (serviceID, serviceName) VALUES ( 1, 'COFFEE-READY' )");
        executeSQL("INSERT INTO ifServices (nodeID, ipAddr, ifIndex, serviceID) VALUES ( 1, '1.2.3.4', null, 1)");

        getInstallerDb().createTables();

        Statement st = m_connection.createStatement();
        ResultSet rs = st.executeQuery("SELECT id from ipInterface");

        assertTrue("could not advance results to first row", rs.next());
        rs.getInt(1);
        assertFalse("ipInterface.id should not be null", rs.wasNull());
        // Don't care about what it is, just that it's not null
        // assertEquals("ipInterface id", expected, rs.getInt(1));
        assertFalse("too many rows: only expecting one", rs.next());
        

        rs = st.executeQuery("SELECT id, ipInterfaceID from ifServices");

        assertTrue("could not advance results to first row", rs.next());

        rs.getInt(1);
        assertFalse("ifServices.id should not be null", rs.wasNull());
        rs.getInt(2);
        assertFalse("ifServices.interfaceId should not be null",
                    rs.wasNull());
        
        // Don't care about the actual values, just that they are not null
        // assertEquals("ifServices id", expected, rs.getInt(1));
        // assertEquals("ifServices ipInterfaceId", expected,
        //             rs.getInt(2));
        assertFalse("too many rows: only expecting one", rs.next());
    }

