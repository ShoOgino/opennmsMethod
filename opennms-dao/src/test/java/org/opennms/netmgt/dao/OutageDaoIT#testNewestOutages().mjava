    @Test
    @JUnitTemporaryDatabase
    public void testNewestOutages() {
        for (final OnmsNode node : m_nodeDao.findAll()) {
            m_nodeDao.delete(node);
        }
        m_nodeDao.flush();

        OnmsNode node = new OnmsNode(m_locationDao.getDefaultLocation(), "minion");
        m_nodeDao.save(node);

        final OnmsServiceType minionHeartbeat = getServiceType("Minion-Heartbeat");
        final OnmsServiceType minionRpc = getServiceType("Minion-RPC");
        final OnmsServiceType icmp = getServiceType("ICMP");

        final OnmsIpInterface iface = getIpInterface("172.16.1.1", node);
        final OnmsIpInterface v6 = getIpInterface("::1", node);

        final OnmsMonitoredService nodeHeartbeatService = getMonitoredService(iface, minionHeartbeat);
        final OnmsMonitoredService nodeRpcService = getMonitoredService(iface, minionRpc);
        final OnmsMonitoredService icmpService = getMonitoredService(iface, icmp);

        final OnmsMonitoredService v6IcmpService = getMonitoredService(v6, icmp);

        final Date date1 = new Date(1);
        final Date date2 = new Date(2);
        final Date date3 = new Date(3);
        final Date date4 = new Date(4);
        final Date date5 = new Date(5);
        final Date date6 = new Date(6);

        OnmsOutage h1 = new OnmsOutage(date1, date1, nodeHeartbeatService);
        OnmsOutage h2 = new OnmsOutage(date3, date3, nodeHeartbeatService);
        OnmsOutage h3 = new OnmsOutage(date5, (Date)null, nodeHeartbeatService);

        OnmsOutage r1 = new OnmsOutage(date2, date2, nodeRpcService);
        OnmsOutage r2 = new OnmsOutage(date4, date4, nodeRpcService);
        OnmsOutage r3 = new OnmsOutage(date6, (Date)null, nodeRpcService);

        OnmsOutage i1 = new OnmsOutage(date1, date1, icmpService);

        OnmsOutage v1 = new OnmsOutage(date1, date1, v6IcmpService);

        m_outageDao.save(h1);
        m_outageDao.save(h2);
        m_outageDao.save(h3);

        m_outageDao.save(r1);
        m_outageDao.save(r2);
        m_outageDao.save(r3);

        m_outageDao.save(i1);

        m_outageDao.save(v1);

        m_outageDao.flush();

        m_transTemplate.execute(new TransactionCallbackWithoutResult() {
            @Override
            public void doInTransactionWithoutResult(final TransactionStatus status) {
                final List<String> services = Arrays.asList("Minion-Heartbeat", "Minion-RPC");
                Collection<CurrentOutageDetails> outages = m_outageDao.newestCurrentOutages(services);
                assertEquals("we should have 2 outages", 2, outages.size());

                Iterator<CurrentOutageDetails> it = outages.iterator();
                CurrentOutageDetails outage = it.next();
                assertEquals("the first outage should be a heartbeat outage", "Minion-Heartbeat", outage.getServiceName());
                assertEquals("the first outage should be the *latest* heartbeat outage", date5, outage.getIfLostService());

                outage = it.next();
                assertEquals("the second outage should be an RPC outage", "Minion-RPC", outage.getServiceName());
                assertEquals("the second outage should be the *latest* RPC outage", date6, outage.getIfLostService());

                // also make sure it works when no services are specified
                outages = m_outageDao.newestCurrentOutages(Collections.emptyList());
                assertEquals("we should have 2 outages", 2, outages.size());

                it = outages.iterator();
                outage = it.next();
                assertEquals("the first outage should be a heartbeat outage", "Minion-Heartbeat", outage.getServiceName());
                assertEquals("the first outage should be the *latest* heartbeat outage", date5, outage.getIfLostService());

                outage = it.next();
                assertEquals("the second outage should be an RPC outage", "Minion-RPC", outage.getServiceName());
                assertEquals("the second outage should be the *latest* RPC outage", date6, outage.getIfLostService());
            }
        });
    }

