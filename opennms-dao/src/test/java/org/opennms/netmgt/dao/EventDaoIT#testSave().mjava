	@Test
	@Transactional
    public void testSave() {
        OnmsEvent event = new OnmsEvent();
        event.setDistPoller(m_distPollerDao.whoami());
        event.setEventCreateTime(new Date());
        event.setEventDescr("event dao test");
        event.setEventHost("localhost");
        event.setEventLog("Y");
        event.setEventDisplay("Y");
        event.setEventLogGroup("event dao test log group");
        event.setEventLogMsg("event dao test log msg");
        event.setEventSeverity(OnmsSeverity.CRITICAL.getId());
        event.setEventSource("EventDaoTest");
        event.setEventTime(new Date());
        event.setEventUei("uei://org/opennms/test/EventDaoTest");
        OnmsNode node = (OnmsNode) m_nodeDao.findAll().iterator().next();
        OnmsIpInterface iface = (OnmsIpInterface)node.getIpInterfaces().iterator().next();
        OnmsMonitoredService service = (OnmsMonitoredService)iface.getMonitoredServices().iterator().next();
        event.setNode(node);
	    event.setServiceType(service.getServiceType());
        OnmsAlarm alarm = new OnmsAlarm();
	    event.setAlarm(alarm);
        event.setIpAddr(iface.getIpAddress());
        event.setEventParameters(Lists.newArrayList(
                new OnmsEventParameter(event, "label", "node", "string"),
                new OnmsEventParameter(event, "ds", "(memAvailReal + memCached) / memTotalReal * 100.0", "string"),
                new OnmsEventParameter(event, "description", "(memAvailReal + memCached) / memTotalReal * 100.0", "string"),
                new OnmsEventParameter(event, "value", "4.7", "string"),
                new OnmsEventParameter(event, "instance", "node", "string"),
                new OnmsEventParameter(event, "instanceLabel", "node", "string"),
                new OnmsEventParameter(event, "resourceId", "node[70].nodeSnmp[]", "string"),
                new OnmsEventParameter(event, "threshold", "5.0", "string"),
                new OnmsEventParameter(event, "trigger", "2", "string"),
                new OnmsEventParameter(event, "rearm", "10.0", "string")));
        m_eventDao.save(event);
       
        OnmsEvent newEvent = m_eventDao.load(event.getId());
        assertEquals("uei://org/opennms/test/EventDaoTest", newEvent.getEventUei());
        assertNotNull(newEvent.getServiceType());
        assertEquals(service.getNodeId(), newEvent.getNode().getId());
        assertEquals(event.getIpAddr(), newEvent.getIpAddr());
        
        System.err.println(JaxbUtils.marshal(event));
    }

