	@Test
	@Transactional
    public void testSave() {
        OnmsEvent event = new OnmsEvent();
        event.setDistPoller(m_distPollerDao.whoami());
        event.setEventCreateTime(new Date());
        event.setEventDescr("event dao test");
        event.setEventHost("localhost");
        event.setEventLog("Y");
        event.setEventDisplay("Y");
        event.setEventLogGroup("event dao test log group");
        event.setEventLogMsg("event dao test log msg");
        event.setEventSeverity(7);
        event.setEventSource("EventDaoTest");
        event.setEventTime(new Date());
        event.setEventUei("uei://org/opennms/test/EventDaoTest");
        OnmsNode node = (OnmsNode) m_nodeDao.findAll().iterator().next();
        OnmsIpInterface iface = (OnmsIpInterface)node.getIpInterfaces().iterator().next();
        OnmsMonitoredService service = (OnmsMonitoredService)iface.getMonitoredServices().iterator().next();
        event.setNode(node);
	    event.setServiceType(service.getServiceType());
        OnmsAlarm alarm = new OnmsAlarm();
	    event.setAlarm(alarm);
        event.setIpAddr(iface.getIpAddress());
        m_eventDao.save(event);
       
        OnmsEvent newEvent = m_eventDao.load(event.getId());
        assertEquals("uei://org/opennms/test/EventDaoTest", newEvent.getEventUei());
        assertNotNull(newEvent.getServiceType());
        assertEquals(service.getNodeId(), newEvent.getNode().getId());
        assertEquals(event.getIpAddr(), newEvent.getIpAddr());
    }

