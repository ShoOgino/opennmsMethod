    @Test
    @Transactional
    public void testFindLatestAcks() {
        assertThat(m_acknowledgmentDao.findLatestAcks(), hasSize(0));

        int numAcks = 100;
        Map<Integer, Integer> dbIdsByRefId = new HashMap<>();
        dbIdsByRefId.put(1, generateAcks(1, numAcks));
        dbIdsByRefId.put(2, generateAcks(2, numAcks));
        dbIdsByRefId.put(3, generateAcks(3, numAcks));
        assertThat(m_acknowledgmentDao.findAll(), hasSize(greaterThan(3)));

        List<OnmsAcknowledgment> acks = m_acknowledgmentDao.findLatestAcks();        
        assertThat(acks, hasSize(3));
        // Check that we got an ack back for each of the refIds we expect
        assertThat(acks.stream()
                .map(OnmsAcknowledgment::getRefId)
                .collect(Collectors.toList()), containsInAnyOrder(1, 2, 3));

        // Check that the ackTimes are the latest ones
        for (OnmsAcknowledgment ack : acks) {
            assertThat(ack.getAckTime(), equalTo(new Date(numAcks)));
        }
        
        // Check that the Ids are the latest ones given that we had ties for ackTime
        for (OnmsAcknowledgment ack : acks) {
            assertThat(ack.getId(), equalTo(dbIdsByRefId.get(ack.getRefId())));
        }
        
        // Check that we get consistent results with finding the acks the hard way with separate queries
        List<OnmsAcknowledgment> acksTheHardWay = findAcksTheHardWay(Arrays.asList(1, 2, 3));
        assertThat(acks, equalTo(acksTheHardWay));
    }

