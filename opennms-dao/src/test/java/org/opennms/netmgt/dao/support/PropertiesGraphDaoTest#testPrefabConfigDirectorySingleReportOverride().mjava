    /**
     * Test that an included single report per file properties config can override
     * a report in the main properties file. 
     * @throws IOException
     */
    public void testPrefabConfigDirectorySingleReportOverride() throws Exception {
        /*
         * We're not going to use the anticipator functionality, but it's
         * handy for handling temporary directories.
         */
        FileAnticipator fa = new FileAnticipator();

        try {
            File rootFile = fa.tempFile("snmp-graph.properties");
            File graphDirectory = fa.tempDir("snmp-graph.properties.d");
            
            File graphBits = fa.tempFile(graphDirectory, "mib2.bits.properties");
            File graphHCbits = fa.tempFile(graphDirectory, "mib2.HCbits.properties");
                        
            Writer writer = new OutputStreamWriter(new FileOutputStream(rootFile), "UTF-8");
            writer.write(s_mib2bitsBasePrefab);
            writer.close();
                        
            graphDirectory.mkdir();
            writer = new OutputStreamWriter(new FileOutputStream(graphBits), "UTF-8");
            writer.write(s_separateBitsGraph);
            writer.close();
            writer = new OutputStreamWriter(new FileOutputStream(graphHCbits), "UTF-8");
            writer.write(s_separateHCBitsGraph);
            writer.close();
           
            HashMap<String, Resource> prefabConfigs = new HashMap<String, Resource>();
            prefabConfigs.put("performance", new FileSystemResource(rootFile));

            PropertiesGraphDao dao = createPropertiesGraphDao(prefabConfigs, s_emptyMap);
            
            PrefabGraph mib2Bits = dao.getPrefabGraph("mib2.bits");
            assertNotNull(mib2Bits);
            //The base properties file (s_mib2bitsBasePrefab) has the name=Wrong Name, and columns=wrongColumn1,wrongColumn2.
            // We check that the overridden graph has the correct details in it
            assertEquals("mib2.bits", mib2Bits.getName());
            assertEquals("Bits In/Out", mib2Bits.getTitle());
            String columns1[] = {"ifInOctets","ifOutOctets"};
            Assert.assertArrayEquals(columns1, mib2Bits.getColumns());

            PrefabGraph mib2HCBits = dao.getPrefabGraph("mib2.HCbits");
            assertNotNull(mib2HCBits);
            assertEquals("mib2.HCbits", mib2HCBits.getName());
            assertEquals("Bits In/Out", mib2HCBits.getTitle());
            String columns2[] = {"ifHCInOctets","ifHCOutOctets"};
            Assert.assertArrayEquals(columns2, mib2HCBits.getColumns());
            
            //Now, having proven that the override works, rewrite the base file with the same data, thus updating the timestamp
            // and forcing a reload.  The mib2.bits graph should still be the correct overridden one.  

            writer = new OutputStreamWriter(new FileOutputStream(rootFile), "UTF-8");
            writer.write(s_mib2bitsBasePrefab);
            writer.close();
                        
            //Wait long enough to make the FileReloadContainers do their thing reliably
            Thread.sleep(1100);

            //Ensure that the override still applies and hasn't been "underridden" by the rewrite of the base file.
            mib2Bits = dao.getPrefabGraph("mib2.bits");
            assertNotNull(mib2Bits);
            assertEquals("mib2.bits", mib2Bits.getName());
            assertEquals("Bits In/Out", mib2Bits.getTitle());
            String columns3[] = {"ifInOctets","ifOutOctets"};
            Assert.assertArrayEquals(columns3, mib2Bits.getColumns());

       }
        finally {
            fa.deleteExpected();
            fa.tearDown();
        }
    }

