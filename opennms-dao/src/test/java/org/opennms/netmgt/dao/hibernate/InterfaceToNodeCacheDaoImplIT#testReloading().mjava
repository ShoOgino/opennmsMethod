    // Verify reloading works. See HZN-1311
    @Test
    public void testReloading() {
        // We manually have to create a reloading dao, as by default it does not
        m_cache = new InterfaceToNodeCacheDaoImpl(1000L);
        applicationContext.getAutowireCapableBeanFactory().autowireBean(m_cache);
        applicationContext.getAutowireCapableBeanFactory().initializeBean(m_cache, "reloading-interface-to-node-cache");

        // Verify it is initialized
        Optional<Integer> nodeId = m_cache.getFirstNodeId(MonitoringLocationDao.DEFAULT_MONITORING_LOCATION_ID, m_databasePopulator.getNode1().getPrimaryInterface().getIpAddress());
        Assert.assertEquals(true, nodeId.isPresent());
        Assert.assertEquals(m_databasePopulator.getNode1().getId(), nodeId.get());

        // Verify bean is not there yet
        nodeId = m_cache.getFirstNodeId(MonitoringLocationDao.DEFAULT_MONITORING_LOCATION_ID, InetAddressUtils.addr("8.8.8.8"));
        Assert.assertEquals(false, nodeId.isPresent());

        // Execute adding of missing node in transaction scope
        transactionOperations.execute((status) -> {
            // Add missing node
            final OnmsNode node = new OnmsNode();
            node.setLocation(m_databasePopulator.getNode1().getLocation());
            node.setLabel("Dummy-Node");
            node.setType(OnmsNode.NodeType.ACTIVE);

            // Add interface to node
            new OnmsIpInterface(InetAddressUtils.addr("8.8.8.8"), node);
            m_databasePopulator.getNodeDao().save(node);
            m_databasePopulator.getNodeDao().flush();
            return null;
        });

        // Try for number of seconds until it succeeds
        await().atMost(10, TimeUnit.SECONDS)
               .pollInterval(1000, TimeUnit.MILLISECONDS)
               .until(() -> m_cache.getFirstNodeId(MonitoringLocationDao.DEFAULT_MONITORING_LOCATION_ID, InetAddressUtils.addr("8.8.8.8")).isPresent());
    }

