    @Override
    public boolean equals(final Object other) {
        if (!(other instanceof Url)) {
            return false;
        }
        final Url that = (Url) other;
        return Objects.equals(this.m_parameters, that.m_parameters) && Objects.equals(this.m_method, that.m_method)
                && Objects.equals(this.m_httpVersion, that.m_httpVersion) && Objects.equals(this.m_userAgent, that.m_userAgent)
                && Objects.equals(this.m_virtualHost, that.m_virtualHost) && Objects.equals(this.m_scheme, that.m_scheme)
                && Objects.equals(this.m_userInfo, that.m_userInfo) && Objects.equals(this.m_host, that.m_host)
                && Objects.equals(this.m_port, that.m_port) && Objects.equals(this.m_path, that.m_path)
                && Objects.equals(this.m_query, that.m_query) && Objects.equals(this.m_fragment, that.m_fragment)
                && Objects.equals(this.m_matches, that.m_matches) && Objects.equals(this.m_responseRange, that.m_responseRange)
                && Objects.equals(this.m_canonicalEquivalence, that.m_canonicalEquivalence)
                && Objects.equals(this.m_caseInsensitive, that.m_caseInsensitive)
                && Objects.equals(this.m_comments, that.m_comments) && Objects.equals(this.m_dotall, that.m_dotall)
                && Objects.equals(this.m_literal, that.m_literal) && Objects.equals(this.m_multiline, that.m_multiline)
                && Objects.equals(this.m_unicodeCase, that.m_unicodeCase) && Objects.equals(this.m_unixLines, that.m_unixLines);
    }

