	public static Field field(String name) {
		if (name.equals(Maskelement.TAG_UEI)) {
			return new Field() { public String get(Event event) { return event.getUei(); } };
		} else if (name.equals(Maskelement.TAG_SOURCE)) {
			return new Field() { public String get(Event event) { return event.getSource(); } };
		} else if (name.equals(Maskelement.TAG_NODEID)) {
			return new Field() { public String get(Event event) { return Long.toString(event.getNodeid()); } };
		} else if (name.equals(Maskelement.TAG_HOST)) {
			return new Field() { public String get(Event event) { return event.getHost(); } };
		} else if (name.equals(Maskelement.TAG_INTERFACE)) {
			return new Field() { public String get(Event event) { return event.getInterface(); } };
		} else if (name.equals(Maskelement.TAG_SNMPHOST)) {
			return new Field() { public String get(Event event) { return event.getSnmphost(); } };
		} else if (name.equals(Maskelement.TAG_SERVICE)) {
			return new Field() { public String get(Event event) { return event.getService(); } };
		} else if (name.equals(Maskelement.TAG_SNMP_EID)) {
			return new Field() { public String get(Event event) { return event.getSnmp() == null ? null : event.getSnmp().getId(); } };
		} else if (name.equals(Maskelement.TAG_SNMP_COMMUNITY)) {
			return new Field() { public String get(Event event) { return event.getSnmp() == null ? null : event.getSnmp().getCommunity(); } };
		} else if (name.equals(Maskelement.TAG_SNMP_SPECIFIC)) {
			return new Field() { 
				public String get(Event event) {
					return event.getSnmp() == null || !event.getSnmp().hasSpecific() 
							? null 
							: Integer.toString(event.getSnmp().getSpecific());
				}
			};
		} else if (name.equals(Maskelement.TAG_SNMP_GENERIC)) {
			return new Field() { 
				public String get(Event event) {
					return event.getSnmp() == null || !event.getSnmp().hasGeneric() 
							? null 
							: Integer.toString(event.getSnmp().getGeneric());
				}
			};
		}
		else {
			throw new IllegalStateException("Field " + name + " is not understood!");
		}
	}

