    private void indexEventsByUei() {
        m_eventsByUei.clear();

        // Build a map of UEI to Event definition
        forEachEvent((e) -> {
            final String uei = e.getUei();
            if (uei == null) {
                // Skip events with no UEI
                return;
            }
            // Don't overwrite existing keys, first one wins
            m_eventsByUei.putIfAbsent(uei, e);
        });

        // Now remove event definitions from the index if any
        // mask elements from any other event definitions match
        // the UEI.
        //
        // This allows mask elements to be used against incoming
        // event instances that already have a UEI set, provided
        // that they include a UEI match. In this case the associated
        // event definition will no longer be found in the
        // UEI to Event definition index.

        // 1) Gather the set of matchers from all event definitions
        // that are used to match a UEI
        final List<EventMatcher> matchers = new ArrayList<>();
        forEachEvent((e) -> {
            final Mask mask = e.getMask();
            if (mask != null) {
                final Maskelement ueiMask = mask.getMaskElement("uei");
                if (ueiMask != null) {
                    matchers.add(ueiMask.constructMatcher());
                }
            }
        });

        // 2) Remove event definition from the index if they are matched
        // by any of the known UEI matchers.
        if (matchers.size() >= 1) {
            events: for(Iterator<Entry<String, Event>> it = m_eventsByUei.entrySet().iterator(); it.hasNext(); ) {
                final Entry<String, Event> entry = it.next();
                for (EventMatcher matcher : matchers) {
                    // Build an event instance
                    org.opennms.netmgt.xml.event.Event eventToMatch = new org.opennms.netmgt.xml.event.Event();
                    // The UEI is the only field the matcher should check
                    eventToMatch.setUei(entry.getKey());
                    if (matcher.matches(eventToMatch)) {
                        // We got a match, remove this event definition from the index
                        it.remove();
                        continue events;
                    }
                }
            }
        }
    }

